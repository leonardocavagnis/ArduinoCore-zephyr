/*
Copyright (c) 2010 - 2025, Nordic Semiconductor ASA All rights reserved.

SPDX-License-Identifier: BSD-3-Clause

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. Neither the name of Nordic Semiconductor ASA nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 *
 * @file     nrf5340_network.h
 * @brief    CMSIS HeaderFile
 * @version  1
 * @date     12. February 2025
 * @note     Generated by SVDConv V3.3.35 on Wednesday, 12.02.2025 14:52:38
 *           from File 'nrf5340_network.svd',
 *           last modified on Wednesday, 12.02.2025 13:51:19
 */



/** @addtogroup Nordic Semiconductor
  * @{
  */


/** @addtogroup nrf5340_network
  * @{
  */


#ifndef NRF5340_NETWORK_H
#define NRF5340_NETWORK_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M33 Specific Interrupt Numbers  ======================================= */
  Reset_IRQn                = -15,
  NonMaskableInt_IRQn       = -14,
  HardFault_IRQn            = -13,
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,
  SecureFault_IRQn          =  -9,
  SVCall_IRQn               =  -5,
  DebugMonitor_IRQn         =  -4,
  PendSV_IRQn               =  -2,
  SysTick_IRQn              =  -1,
/* ======================================  nrf5340_network Specific Interrupt Numbers  ======================================= */
  CLOCK_POWER_IRQn          =   5,
  RADIO_IRQn                =   8,
  RNG_IRQn                  =   9,
  GPIOTE_IRQn               =  10,
  WDT_IRQn                  =  11,
  TIMER0_IRQn               =  12,
  ECB_IRQn                  =  13,
  AAR_CCM_IRQn              =  14,
  TEMP_IRQn                 =  16,
  RTC0_IRQn                 =  17,
  IPC_IRQn                  =  18,
  SERIAL0_IRQn              =  19,
  EGU0_IRQn                 =  20,
  RTC1_IRQn                 =  22,
  TIMER1_IRQn               =  24,
  TIMER2_IRQn               =  25,
  SWI0_IRQn                 =  26,
  SWI1_IRQn                 =  27,
  SWI2_IRQn                 =  28,
  SWI3_IRQn                 =  29
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ==========================  Configuration of the ARM Cortex-M33 Processor and Core Peripherals  =========================== */
#define __CM33_REV                 0x0004U
#define __INTERRUPTS_MAX                   129
#define __DSP_PRESENT                  0
#define __NVIC_PRIO_BITS               3
#define __Vendor_SysTickConfig         0
#define __VTOR_PRESENT                 1
#define __MPU_PRESENT                  1
#define __FPU_PRESENT                  0
#define __FPU_DP                       0
#define __SAUREGION_PRESENT            0


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm33.h"
#include "system_nrf5340_network.h"

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* =========================================================================================================================== */
/* ================                              Device Specific Cluster Section                              ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_clusters
  * @{
  */


/**
  * @brief FICR_INFO [INFO] (Device info)
  */
typedef struct {
  __IM  uint32_t  CONFIGID;
  __IM  uint32_t  DEVICEID[2];
  __IM  uint32_t  PART;
  __IM  uint32_t  VARIANT;                      /*!< (@ 0x00000010) Part Variant, Hardware version and Production
                                                                    configuration                                              */
  __IM  uint32_t  PACKAGE;
  __IM  uint32_t  RAM;
  __IM  uint32_t  FLASH;
  __IM  uint32_t  CODEPAGESIZE;
  __IM  uint32_t  CODESIZE;
  __IM  uint32_t  DEVICETYPE;
} FICR_INFO_Type;


/**
  * @brief FICR_TRIMCNF [TRIMCNF] (Unspecified)
  */
typedef struct {
  __IM  uint32_t  ADDR;
  __IM  uint32_t  DATA;
} FICR_TRIMCNF_Type;


/**
  * @brief VREQCTRL_VREGRADIO [VREGRADIO] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  VREQH;                        /*!< (@ 0x00000000) Request high voltage on RADIO After requesting
                                                                    high voltage, the user must wait until VREQHREADY
                                                                    is set to Ready                                            */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  VREQHREADY;
} VREQCTRL_VREGRADIO_Type;


/**
  * @brief CTRLAPPERI_MAILBOX [MAILBOX] (Unspecified)
  */
typedef struct {
  __IM  uint32_t  RXDATA;
  __IM  uint32_t  RXSTATUS;                     /*!< (@ 0x00000004) This register shows a status that indicates if
                                                                    data sent from the debugger to the CPU has
                                                                    been read.                                                 */
  __IM  uint32_t  RESERVED[30];
  __IOM uint32_t  TXDATA;
  __IM  uint32_t  TXSTATUS;                     /*!< (@ 0x00000084) This register shows a status that indicates if
                                                                    the data sent from the CPU to the debugger
                                                                    has been read.                                             */
} CTRLAPPERI_MAILBOX_Type;


/**
  * @brief CTRLAPPERI_ERASEPROTECT [ERASEPROTECT] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  LOCK;                         /*!< (@ 0x00000000) This register locks the ERASEPROTECT.DISABLE
                                                                    register from being written until next reset.              */
  __IOM uint32_t  DISABLE;                      /*!< (@ 0x00000004) This register disables the ERASEPROTECT register
                                                                    and performs an ERASEALL operation.                        */
} CTRLAPPERI_ERASEPROTECT_Type;


/**
  * @brief CTRLAPPERI_APPROTECT [APPROTECT] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  LOCK;                         /*!< (@ 0x00000000) This register locks the APPROTECT.DISABLE register
                                                                    from being written to until next reset.                    */
  __IOM uint32_t  DISABLE;                      /*!< (@ 0x00000004) This register disables the APPROTECT register
                                                                    and enables debug access to non-secure mode.               */
} CTRLAPPERI_APPROTECT_Type;


/**
  * @brief RADIO_PSEL [PSEL] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  DFEGPIO[8];                   /*!< (@ 0x00000000) Description collection: Pin select for DFE pin
                                                                    n                                                          */
} RADIO_PSEL_Type;


/**
  * @brief RADIO_DFEPACKET [DFEPACKET] (DFE packet EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;
} RADIO_DFEPACKET_Type;


/**
  * @brief DPPIC_TASKS_CHG [TASKS_CHG] (Channel group tasks)
  */
typedef struct {
  __OM  uint32_t  EN;
  __OM  uint32_t  DIS;
} DPPIC_TASKS_CHG_Type;


/**
  * @brief DPPIC_SUBSCRIBE_CHG [SUBSCRIBE_CHG] (Subscribe configuration for tasks)
  */
typedef struct {
  __IOM uint32_t  EN;                           /*!< (@ 0x00000000) Description cluster: Subscribe configuration
                                                                    for task CHG[n].EN                                         */
  __IOM uint32_t  DIS;                          /*!< (@ 0x00000004) Description cluster: Subscribe configuration
                                                                    for task CHG[n].DIS                                        */
} DPPIC_SUBSCRIBE_CHG_Type;


/**
  * @brief SPIM_PSEL [PSEL] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  SCK;
  __IOM uint32_t  MOSI;
  __IOM uint32_t  MISO;
  __IOM uint32_t  CSN;
} SPIM_PSEL_Type;


/**
  * @brief SPIM_RXD [RXD] (RXD EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;
  __IOM uint32_t  LIST;
} SPIM_RXD_Type;


/**
  * @brief SPIM_TXD [TXD] (TXD EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;
  __IOM uint32_t  LIST;
} SPIM_TXD_Type;


/**
  * @brief SPIM_IFTIMING [IFTIMING] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  RXDELAY;
  __IOM uint32_t  CSNDUR;                       /*!< (@ 0x00000004) Minimum duration between edge of CSN and edge
                                                                    of SCK. When SHORTS.END_START is used, this
                                                                    is also the minimum duration CSN must stay
                                                                    high between transactions.                                 */
} SPIM_IFTIMING_Type;


/**
  * @brief SPIS_PSEL [PSEL] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  SCK;
  __IOM uint32_t  MISO;
  __IOM uint32_t  MOSI;
  __IOM uint32_t  CSN;
} SPIS_PSEL_Type;


/**
  * @brief SPIS_RXD [RXD] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;
  __IOM uint32_t  LIST;
} SPIS_RXD_Type;


/**
  * @brief SPIS_TXD [TXD] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;
  __IOM uint32_t  LIST;
} SPIS_TXD_Type;


/**
  * @brief TWIM_PSEL [PSEL] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  SCL;
  __IOM uint32_t  SDA;
} TWIM_PSEL_Type;


/**
  * @brief TWIM_RXD [RXD] (RXD EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;
  __IOM uint32_t  LIST;
} TWIM_RXD_Type;


/**
  * @brief TWIM_TXD [TXD] (TXD EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;
  __IOM uint32_t  LIST;
} TWIM_TXD_Type;


/**
  * @brief TWIS_PSEL [PSEL] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  SCL;
  __IOM uint32_t  SDA;
} TWIS_PSEL_Type;


/**
  * @brief TWIS_RXD [RXD] (RXD EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;
  __IOM uint32_t  LIST;
} TWIS_RXD_Type;


/**
  * @brief TWIS_TXD [TXD] (TXD EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;
  __IOM uint32_t  LIST;
} TWIS_TXD_Type;


/**
  * @brief UARTE_PSEL [PSEL] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  RTS;
  __IOM uint32_t  TXD;
  __IOM uint32_t  CTS;
  __IOM uint32_t  RXD;
} UARTE_PSEL_Type;


/**
  * @brief UARTE_RXD [RXD] (RXD EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;
} UARTE_RXD_Type;


/**
  * @brief UARTE_TXD [TXD] (TXD EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;
} UARTE_TXD_Type;


/**
  * @brief ACL_ACL [ACL] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  ADDR;                         /*!< (@ 0x00000000) Description cluster: Start address of region
                                                                    to protect. The start address must be word-aligned.        */
  __IOM uint32_t  SIZE;                         /*!< (@ 0x00000004) Description cluster: Size of region to protect
                                                                    counting from address ACL[n].ADDR. Writing
                                                                    a '0' has no effect.                                       */
  __IOM uint32_t  PERM;                         /*!< (@ 0x00000008) Description cluster: Access permissions for region
                                                                    n as defined by start address ACL[n].ADDR
                                                                    and size ACL[n].SIZE                                       */
  __IM  uint32_t  RESERVED;
} ACL_ACL_Type;


/**
  * @brief VMC_RAM [RAM] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  POWER;
  __IOM uint32_t  POWERSET;                     /*!< (@ 0x00000004) Description cluster: RAM[n] power control set
                                                                    register                                                   */
  __IOM uint32_t  POWERCLR;                     /*!< (@ 0x00000008) Description cluster: RAM[n] power control clear
                                                                    register                                                   */
  __IM  uint32_t  RESERVED;
} VMC_RAM_Type;


/** @} */ /* End of group Device_Peripheral_clusters */


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                          FICR_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Factory Information Configuration Registers (FICR_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED[128];
  __IOM FICR_INFO_Type INFO;
  __IM  uint32_t  RESERVED1[21];
  __IM  uint32_t  ER[4];                        /*!< (@ 0x00000280) Description collection: Encryption Root, word
                                                                    n                                                          */
  __IM  uint32_t  IR[4];
  __IM  uint32_t  DEVICEADDRTYPE;
  __IM  uint32_t  DEVICEADDR[2];
  __IM  uint32_t  RESERVED2[21];
  __IOM FICR_TRIMCNF_Type TRIMCNF[32];
} NRF_FICR_Type;



/* =========================================================================================================================== */
/* ================                                          UICR_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief User Information Configuration Registers (UICR_NS)
  */

typedef struct {
  __IOM uint32_t  APPROTECT;
  __IOM uint32_t  ERASEPROTECT;
  __IM  uint32_t  RESERVED[126];
  __IOM uint32_t  NRFFW[32];                    /*!< (@ 0x00000200) Description collection: Reserved for Nordic firmware
                                                                    design                                                     */
  __IM  uint32_t  RESERVED1[32];
  __IOM uint32_t  CUSTOMER[32];
} NRF_UICR_Type;



/* =========================================================================================================================== */
/* ================                                          CTI_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Cross-Trigger Interface control. NOTE: this is not a separate peripheral, but describes CM33 functionality. (CTI_NS)
  */

typedef struct {
  __IOM uint32_t  CTICONTROL;
  __IM  uint32_t  RESERVED[3];
  __OM  uint32_t  CTIINTACK;
  __IOM uint32_t  CTIAPPSET;
  __OM  uint32_t  CTIAPPCLEAR;
  __OM  uint32_t  CTIAPPPULSE;
  __IOM uint32_t  CTIINEN[8];                   /*!< (@ 0x00000020) Description collection: CTI Trigger to Channel
                                                                    Enable register                                            */
  __IM  uint32_t  RESERVED1[24];
  __IOM uint32_t  CTIOUTEN[8];                  /*!< (@ 0x000000A0) Description collection: CTI Channel to Trigger
                                                                    Enable register                                            */
  __IM  uint32_t  RESERVED2[28];
  __IM  uint32_t  CTITRIGINSTATUS;
  __IM  uint32_t  CTITRIGOUTSTATUS;
  __IM  uint32_t  CTICHINSTATUS;
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  CTIGATE;
  __IM  uint32_t  RESERVED4[926];
  __IM  uint32_t  DEVARCH;
  __IM  uint32_t  RESERVED5[2];
  __IM  uint32_t  DEVID;
  __IM  uint32_t  DEVTYPE;
  __IM  uint32_t  PIDR4;
  __IM  uint32_t  PIDR5;
  __IM  uint32_t  PIDR6;
  __IM  uint32_t  PIDR7;
  __IM  uint32_t  PIDR0;
  __IM  uint32_t  PIDR1;
  __IM  uint32_t  PIDR2;
  __IM  uint32_t  PIDR3;
  __IM  uint32_t  CIDR0;
  __IM  uint32_t  CIDR1;
  __IM  uint32_t  CIDR2;
  __IM  uint32_t  CIDR3;
} NRF_CTI_Type;



/* =========================================================================================================================== */
/* ================                                          DCNF_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Domain configuration management (DCNF_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED[264];
  __IM  uint32_t  CPUID;
} NRF_DCNF_Type;



/* =========================================================================================================================== */
/* ================                                        VREQCTRL_NS                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Voltage request control (VREQCTRL_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED[320];
  __IOM VREQCTRL_VREGRADIO_Type VREGRADIO;
} NRF_VREQCTRL_Type;



/* =========================================================================================================================== */
/* ================                                         CLOCK_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Clock management (CLOCK_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_HFCLKSTART;             /*!< (@ 0x00000000) Start HFCLK128M/HFCLK64M source as selected in
                                                                    HFCLKSRC                                                   */
  __OM  uint32_t  TASKS_HFCLKSTOP;
  __OM  uint32_t  TASKS_LFCLKSTART;
  __OM  uint32_t  TASKS_LFCLKSTOP;
  __OM  uint32_t  TASKS_CAL;
  __IM  uint32_t  RESERVED[27];
  __IOM uint32_t  SUBSCRIBE_HFCLKSTART;
  __IOM uint32_t  SUBSCRIBE_HFCLKSTOP;
  __IOM uint32_t  SUBSCRIBE_LFCLKSTART;
  __IOM uint32_t  SUBSCRIBE_LFCLKSTOP;
  __IOM uint32_t  SUBSCRIBE_CAL;
  __IM  uint32_t  RESERVED1[27];
  __IOM uint32_t  EVENTS_HFCLKSTARTED;
  __IOM uint32_t  EVENTS_LFCLKSTARTED;
  __IM  uint32_t  RESERVED2[5];
  __IOM uint32_t  EVENTS_DONE;
  __IM  uint32_t  RESERVED3[24];
  __IOM uint32_t  PUBLISH_HFCLKSTARTED;
  __IOM uint32_t  PUBLISH_LFCLKSTARTED;
  __IM  uint32_t  RESERVED4[5];
  __IOM uint32_t  PUBLISH_DONE;
  __IM  uint32_t  RESERVED5[88];
  __IOM uint32_t  INTEN;
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  INTPEND;
  __IM  uint32_t  RESERVED6[62];
  __IM  uint32_t  HFCLKRUN;                     /*!< (@ 0x00000408) Status indicating that HFCLKSTART task has been
                                                                    triggered                                                  */
  __IM  uint32_t  HFCLKSTAT;                    /*!< (@ 0x0000040C) Status indicating which HFCLK128M/HFCLK64M source
                                                                    is running This register value in any CLOCK
                                                                    instance reflects status only due to configurations/action
                                                                    in that CLOCK instance.                                    */
  __IM  uint32_t  RESERVED7;
  __IM  uint32_t  LFCLKRUN;                     /*!< (@ 0x00000414) Status indicating that LFCLKSTART task has been
                                                                    triggered                                                  */
  __IM  uint32_t  LFCLKSTAT;                    /*!< (@ 0x00000418) Status indicating which LFCLK source is running
                                                                    This register value in any CLOCK instance
                                                                    reflects status only due to configurations/actions
                                                                    in that CLOCK instance.                                    */
  __IM  uint32_t  LFCLKSRCCOPY;                 /*!< (@ 0x0000041C) Copy of LFCLKSRC register, set when LFCLKSTART
                                                                    task was triggered                                         */
  __IM  uint32_t  RESERVED8[61];
  __IOM uint32_t  HFCLKSRC;
  __IOM uint32_t  LFCLKSRC;
  __IM  uint32_t  RESERVED9[15];
  __IOM uint32_t  HFCLKCTRL;
  __IM  uint32_t  RESERVED10[5];
  __IOM uint32_t  HFCLKALWAYSRUN;
  __IOM uint32_t  LFCLKALWAYSRUN;
} NRF_CLOCK_Type;



/* =========================================================================================================================== */
/* ================                                         POWER_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Power control (POWER_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED[30];
  __OM  uint32_t  TASKS_CONSTLAT;
  __OM  uint32_t  TASKS_LOWPWR;
  __IM  uint32_t  RESERVED1[30];
  __IOM uint32_t  SUBSCRIBE_CONSTLAT;
  __IOM uint32_t  SUBSCRIBE_LOWPWR;
  __IM  uint32_t  RESERVED2[2];
  __IOM uint32_t  EVENTS_POFWARN;
  __IM  uint32_t  RESERVED3[2];
  __IOM uint32_t  EVENTS_SLEEPENTER;
  __IOM uint32_t  EVENTS_SLEEPEXIT;
  __IM  uint32_t  RESERVED4[27];
  __IOM uint32_t  PUBLISH_POFWARN;
  __IM  uint32_t  RESERVED5[2];
  __IOM uint32_t  PUBLISH_SLEEPENTER;
  __IOM uint32_t  PUBLISH_SLEEPEXIT;
  __IM  uint32_t  RESERVED6[89];
  __IOM uint32_t  INTEN;
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED7[132];
  __IOM uint32_t  GPREGRET[2];                  /*!< (@ 0x0000051C) Description collection: General purpose retention
                                                                    register                                                   */
} NRF_POWER_Type;



/* =========================================================================================================================== */
/* ================                                         RESET_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Reset control (RESET_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED[256];
  __IOM uint32_t  RESETREAS;
} NRF_RESET_Type;



/* =========================================================================================================================== */
/* ================                                         CTRLAP_NS                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Control access port (CTRLAP_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED[256];
  __IOM CTRLAPPERI_MAILBOX_Type MAILBOX;
  __IM  uint32_t  RESERVED1[30];
  __IOM CTRLAPPERI_ERASEPROTECT_Type ERASEPROTECT;
  __IM  uint32_t  RESERVED2[14];
  __IOM CTRLAPPERI_APPROTECT_Type APPROTECT;
  __IM  uint32_t  RESERVED3[46];
  __IM  uint32_t  STATUS;
} NRF_CTRLAPPERI_Type;



/* =========================================================================================================================== */
/* ================                                         RADIO_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief 2.4 GHz radio (RADIO_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_TXEN;
  __OM  uint32_t  TASKS_RXEN;
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __OM  uint32_t  TASKS_DISABLE;
  __OM  uint32_t  TASKS_RSSISTART;              /*!< (@ 0x00000014) Start the RSSI and take one single sample of
                                                                    the receive signal strength                                */
  __OM  uint32_t  TASKS_RSSISTOP;
  __OM  uint32_t  TASKS_BCSTART;
  __OM  uint32_t  TASKS_BCSTOP;
  __OM  uint32_t  TASKS_EDSTART;                /*!< (@ 0x00000024) Start the energy detect measurement used in IEEE
                                                                    802.15.4 mode                                              */
  __OM  uint32_t  TASKS_EDSTOP;
  __OM  uint32_t  TASKS_CCASTART;               /*!< (@ 0x0000002C) Start the clear channel assessment used in IEEE
                                                                    802.15.4 mode                                              */
  __OM  uint32_t  TASKS_CCASTOP;
  __IM  uint32_t  RESERVED[19];
  __IOM uint32_t  SUBSCRIBE_TXEN;
  __IOM uint32_t  SUBSCRIBE_RXEN;
  __IOM uint32_t  SUBSCRIBE_START;
  __IOM uint32_t  SUBSCRIBE_STOP;
  __IOM uint32_t  SUBSCRIBE_DISABLE;
  __IOM uint32_t  SUBSCRIBE_RSSISTART;
  __IOM uint32_t  SUBSCRIBE_RSSISTOP;
  __IOM uint32_t  SUBSCRIBE_BCSTART;
  __IOM uint32_t  SUBSCRIBE_BCSTOP;
  __IOM uint32_t  SUBSCRIBE_EDSTART;
  __IOM uint32_t  SUBSCRIBE_EDSTOP;
  __IOM uint32_t  SUBSCRIBE_CCASTART;
  __IOM uint32_t  SUBSCRIBE_CCASTOP;
  __IM  uint32_t  RESERVED1[19];
  __IOM uint32_t  EVENTS_READY;
  __IOM uint32_t  EVENTS_ADDRESS;
  __IOM uint32_t  EVENTS_PAYLOAD;
  __IOM uint32_t  EVENTS_END;
  __IOM uint32_t  EVENTS_DISABLED;
  __IOM uint32_t  EVENTS_DEVMATCH;              /*!< (@ 0x00000114) A device address match occurred on the last received
                                                                    packet                                                     */
  __IOM uint32_t  EVENTS_DEVMISS;               /*!< (@ 0x00000118) No device address match occurred on the last
                                                                    received packet                                            */
  __IOM uint32_t  EVENTS_RSSIEND;
  __IM  uint32_t  RESERVED2[2];
  __IOM uint32_t  EVENTS_BCMATCH;
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  EVENTS_CRCOK;
  __IOM uint32_t  EVENTS_CRCERROR;
  __IOM uint32_t  EVENTS_FRAMESTART;
  __IOM uint32_t  EVENTS_EDEND;                 /*!< (@ 0x0000013C) Sampling of energy detection complete. A new
                                                                    ED sample is ready for readout from the
                                                                    RADIO.EDSAMPLE register.                                   */
  __IOM uint32_t  EVENTS_EDSTOPPED;
  __IOM uint32_t  EVENTS_CCAIDLE;
  __IOM uint32_t  EVENTS_CCABUSY;
  __IOM uint32_t  EVENTS_CCASTOPPED;
  __IOM uint32_t  EVENTS_RATEBOOST;             /*!< (@ 0x00000150) Ble_LR CI field received, receive mode is changed
                                                                    from Ble_LR125Kbit to Ble_LR500Kbit.                       */
  __IOM uint32_t  EVENTS_TXREADY;               /*!< (@ 0x00000154) RADIO has ramped up and is ready to be started
                                                                    TX path                                                    */
  __IOM uint32_t  EVENTS_RXREADY;               /*!< (@ 0x00000158) RADIO has ramped up and is ready to be started
                                                                    RX path                                                    */
  __IOM uint32_t  EVENTS_MHRMATCH;
  __IM  uint32_t  RESERVED4[2];
  __IOM uint32_t  EVENTS_SYNC;
  __IOM uint32_t  EVENTS_PHYEND;                /*!< (@ 0x0000016C) Generated when last bit is sent on air, or received
                                                                    from air                                                   */
  __IOM uint32_t  EVENTS_CTEPRESENT;            /*!< (@ 0x00000170) CTE is present (early warning right after receiving
                                                                    CTEInfo byte)                                              */
  __IM  uint32_t  RESERVED5[3];
  __IOM uint32_t  PUBLISH_READY;
  __IOM uint32_t  PUBLISH_ADDRESS;
  __IOM uint32_t  PUBLISH_PAYLOAD;
  __IOM uint32_t  PUBLISH_END;
  __IOM uint32_t  PUBLISH_DISABLED;
  __IOM uint32_t  PUBLISH_DEVMATCH;
  __IOM uint32_t  PUBLISH_DEVMISS;
  __IOM uint32_t  PUBLISH_RSSIEND;
  __IM  uint32_t  RESERVED6[2];
  __IOM uint32_t  PUBLISH_BCMATCH;
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  PUBLISH_CRCOK;
  __IOM uint32_t  PUBLISH_CRCERROR;
  __IOM uint32_t  PUBLISH_FRAMESTART;
  __IOM uint32_t  PUBLISH_EDEND;
  __IOM uint32_t  PUBLISH_EDSTOPPED;
  __IOM uint32_t  PUBLISH_CCAIDLE;
  __IOM uint32_t  PUBLISH_CCABUSY;
  __IOM uint32_t  PUBLISH_CCASTOPPED;
  __IOM uint32_t  PUBLISH_RATEBOOST;
  __IOM uint32_t  PUBLISH_TXREADY;
  __IOM uint32_t  PUBLISH_RXREADY;
  __IOM uint32_t  PUBLISH_MHRMATCH;
  __IM  uint32_t  RESERVED8[2];
  __IOM uint32_t  PUBLISH_SYNC;
  __IOM uint32_t  PUBLISH_PHYEND;
  __IOM uint32_t  PUBLISH_CTEPRESENT;
  __IM  uint32_t  RESERVED9[3];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED10[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED11[61];
  __IM  uint32_t  CRCSTATUS;
  __IM  uint32_t  RESERVED12;
  __IM  uint32_t  RXMATCH;
  __IM  uint32_t  RXCRC;
  __IM  uint32_t  DAI;
  __IM  uint32_t  PDUSTAT;
  __IM  uint32_t  RESERVED13[13];
  __IM  uint32_t  CTESTATUS;
  __IM  uint32_t  RESERVED14[2];
  __IM  uint32_t  DFESTATUS;
  __IM  uint32_t  RESERVED15[42];
  __IOM uint32_t  PACKETPTR;
  __IOM uint32_t  FREQUENCY;
  __IOM uint32_t  TXPOWER;
  __IOM uint32_t  MODE;
  __IOM uint32_t  PCNF0;
  __IOM uint32_t  PCNF1;
  __IOM uint32_t  BASE0;
  __IOM uint32_t  BASE1;
  __IOM uint32_t  PREFIX0;
  __IOM uint32_t  PREFIX1;
  __IOM uint32_t  TXADDRESS;
  __IOM uint32_t  RXADDRESSES;
  __IOM uint32_t  CRCCNF;
  __IOM uint32_t  CRCPOLY;
  __IOM uint32_t  CRCINIT;
  __IM  uint32_t  RESERVED16;
  __IOM uint32_t  TIFS;
  __IM  uint32_t  RSSISAMPLE;
  __IM  uint32_t  RESERVED17;
  __IM  uint32_t  STATE;
  __IOM uint32_t  DATAWHITEIV;
  __IM  uint32_t  RESERVED18[2];
  __IOM uint32_t  BCC;
  __IM  uint32_t  RESERVED19[39];
  __IOM uint32_t  DAB[8];                       /*!< (@ 0x00000600) Description collection: Device address base segment
                                                                    n                                                          */
  __IOM uint32_t  DAP[8];                       /*!< (@ 0x00000620) Description collection: Device address prefix
                                                                    n                                                          */
  __IOM uint32_t  DACNF;
  __IOM uint32_t  MHRMATCHCONF;
  __IOM uint32_t  MHRMATCHMAS;
  __IM  uint32_t  RESERVED20;
  __IOM uint32_t  MODECNF0;
  __IM  uint32_t  RESERVED21[3];
  __IOM uint32_t  SFD;
  __IOM uint32_t  EDCNT;
  __IM  uint32_t  EDSAMPLE;
  __IOM uint32_t  CCACTRL;
  __IM  uint32_t  RESERVED22[164];
  __IOM uint32_t  DFEMODE;                      /*!< (@ 0x00000900) Whether to use Angle-of-Arrival (AOA) or Angle-of-Departure
                                                                    (AOD)                                                      */
  __IOM uint32_t  CTEINLINECONF;
  __IM  uint32_t  RESERVED23[2];
  __IOM uint32_t  DFECTRL1;
  __IOM uint32_t  DFECTRL2;
  __IM  uint32_t  RESERVED24[4];
  __IOM uint32_t  SWITCHPATTERN;
  __IOM uint32_t  CLEARPATTERN;
  __IOM RADIO_PSEL_Type PSEL;
  __IOM RADIO_DFEPACKET_Type DFEPACKET;
  __IM  uint32_t  RESERVED25[424];
  __IOM uint32_t  POWER;
} NRF_RADIO_Type;



/* =========================================================================================================================== */
/* ================                                          RNG_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Random Number Generator (RNG_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __IM  uint32_t  RESERVED[30];
  __IOM uint32_t  SUBSCRIBE_START;
  __IOM uint32_t  SUBSCRIBE_STOP;
  __IM  uint32_t  RESERVED1[30];
  __IOM uint32_t  EVENTS_VALRDY;                /*!< (@ 0x00000100) Event being generated for every new random number
                                                                    written to the VALUE register                              */
  __IM  uint32_t  RESERVED2[31];
  __IOM uint32_t  PUBLISH_VALRDY;
  __IM  uint32_t  RESERVED3[31];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED4[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED5[126];
  __IOM uint32_t  CONFIG;
  __IM  uint32_t  VALUE;
} NRF_RNG_Type;



/* =========================================================================================================================== */
/* ================                                         GPIOTE_NS                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO Tasks and Events (GPIOTE_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_OUT[8];                 /*!< (@ 0x00000000) Description collection: Task for writing to pin
                                                                    specified in CONFIG[n].PSEL. Action on pin
                                                                    is configured in CONFIG[n].POLARITY.                       */
  __IM  uint32_t  RESERVED[4];
  __OM  uint32_t  TASKS_SET[8];                 /*!< (@ 0x00000030) Description collection: Task for writing to pin
                                                                    specified in CONFIG[n].PSEL. Action on pin
                                                                    is to set it high.                                         */
  __IM  uint32_t  RESERVED1[4];
  __OM  uint32_t  TASKS_CLR[8];                 /*!< (@ 0x00000060) Description collection: Task for writing to pin
                                                                    specified in CONFIG[n].PSEL. Action on pin
                                                                    is to set it low.                                          */
  __IOM uint32_t  SUBSCRIBE_OUT[8];             /*!< (@ 0x00000080) Description collection: Subscribe configuration
                                                                    for task OUT[n]                                            */
  __IM  uint32_t  RESERVED2[4];
  __IOM uint32_t  SUBSCRIBE_SET[8];             /*!< (@ 0x000000B0) Description collection: Subscribe configuration
                                                                    for task SET[n]                                            */
  __IM  uint32_t  RESERVED3[4];
  __IOM uint32_t  SUBSCRIBE_CLR[8];             /*!< (@ 0x000000E0) Description collection: Subscribe configuration
                                                                    for task CLR[n]                                            */
  __IOM uint32_t  EVENTS_IN[8];                 /*!< (@ 0x00000100) Description collection: Event generated from
                                                                    pin specified in CONFIG[n].PSEL                            */
  __IM  uint32_t  RESERVED4[23];
  __IOM uint32_t  EVENTS_PORT;                  /*!< (@ 0x0000017C) Event generated from multiple input GPIO pins
                                                                    with SENSE mechanism enabled                               */
  __IOM uint32_t  PUBLISH_IN[8];                /*!< (@ 0x00000180) Description collection: Publish configuration
                                                                    for event IN[n]                                            */
  __IM  uint32_t  RESERVED5[23];
  __IOM uint32_t  PUBLISH_PORT;
  __IM  uint32_t  RESERVED6[65];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED7[126];
  __IOM uint32_t  LATENCY;                      /*!< (@ 0x00000504) Latency selection for Event mode (MODE=Event)
                                                                    with rising or falling edge detection on
                                                                    the pin.                                                   */
  __IM  uint32_t  RESERVED8[2];
  __IOM uint32_t  CONFIG[8];                    /*!< (@ 0x00000510) Description collection: Configuration for OUT[n],
                                                                    SET[n], and CLR[n] tasks and IN[n] event                   */
} NRF_GPIOTE_Type;



/* =========================================================================================================================== */
/* ================                                          WDT_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Watchdog Timer (WDT_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __IM  uint32_t  RESERVED[30];
  __IOM uint32_t  SUBSCRIBE_START;
  __IOM uint32_t  SUBSCRIBE_STOP;
  __IM  uint32_t  RESERVED1[30];
  __IOM uint32_t  EVENTS_TIMEOUT;
  __IOM uint32_t  EVENTS_STOPPED;
  __IM  uint32_t  RESERVED2[30];
  __IOM uint32_t  PUBLISH_TIMEOUT;
  __IOM uint32_t  PUBLISH_STOPPED;
  __IM  uint32_t  RESERVED3[95];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED4[6];
  __IOM uint32_t  NMIENSET;
  __IOM uint32_t  NMIENCLR;
  __IM  uint32_t  RESERVED5[53];
  __IM  uint32_t  RUNSTATUS;
  __IM  uint32_t  REQSTATUS;
  __IM  uint32_t  RESERVED6[63];
  __IOM uint32_t  CRV;
  __IOM uint32_t  RREN;
  __IOM uint32_t  CONFIG;
  __IM  uint32_t  RESERVED7[4];
  __OM  uint32_t  TSEN;
  __IM  uint32_t  RESERVED8[55];
  __OM  uint32_t  RR[8];
} NRF_WDT_Type;



/* =========================================================================================================================== */
/* ================                                         TIMER0_NS                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 0 (TIMER0_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __OM  uint32_t  TASKS_COUNT;
  __OM  uint32_t  TASKS_CLEAR;
  __OM  uint32_t  TASKS_SHUTDOWN;
  __IM  uint32_t  RESERVED[11];
  __OM  uint32_t  TASKS_CAPTURE[8];             /*!< (@ 0x00000040) Description collection: Capture Timer value to
                                                                    CC[n] register                                             */
  __IM  uint32_t  RESERVED1[8];
  __IOM uint32_t  SUBSCRIBE_START;
  __IOM uint32_t  SUBSCRIBE_STOP;
  __IOM uint32_t  SUBSCRIBE_COUNT;
  __IOM uint32_t  SUBSCRIBE_CLEAR;
  __IOM uint32_t  SUBSCRIBE_SHUTDOWN;           /*!< (@ 0x00000090) Deprecated register - Subscribe configuration
                                                                    for task SHUTDOWN                                          */
  __IM  uint32_t  RESERVED2[11];
  __IOM uint32_t  SUBSCRIBE_CAPTURE[8];         /*!< (@ 0x000000C0) Description collection: Subscribe configuration
                                                                    for task CAPTURE[n]                                        */
  __IM  uint32_t  RESERVED3[24];
  __IOM uint32_t  EVENTS_COMPARE[8];            /*!< (@ 0x00000140) Description collection: Compare event on CC[n]
                                                                    match                                                      */
  __IM  uint32_t  RESERVED4[24];
  __IOM uint32_t  PUBLISH_COMPARE[8];           /*!< (@ 0x000001C0) Description collection: Publish configuration
                                                                    for event COMPARE[n]                                       */
  __IM  uint32_t  RESERVED5[8];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED6[63];
  __IOM uint32_t  INTEN;
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED7[126];
  __IOM uint32_t  MODE;
  __IOM uint32_t  BITMODE;
  __IM  uint32_t  RESERVED8;
  __IOM uint32_t  PRESCALER;
  __IM  uint32_t  RESERVED9[11];
  __IOM uint32_t  CC[8];                        /*!< (@ 0x00000540) Description collection: Capture/Compare register
                                                                    n                                                          */
  __IM  uint32_t  RESERVED10[8];
  __IOM uint32_t  ONESHOTEN[8];                 /*!< (@ 0x00000580) Description collection: Enable one-shot operation
                                                                    for Capture/Compare channel n                              */
} NRF_TIMER_Type;



/* =========================================================================================================================== */
/* ================                                          ECB_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief AES ECB Mode Encryption (ECB_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_STARTECB;
  __OM  uint32_t  TASKS_STOPECB;
  __IM  uint32_t  RESERVED[30];
  __IOM uint32_t  SUBSCRIBE_STARTECB;
  __IOM uint32_t  SUBSCRIBE_STOPECB;
  __IM  uint32_t  RESERVED1[30];
  __IOM uint32_t  EVENTS_ENDECB;
  __IOM uint32_t  EVENTS_ERRORECB;              /*!< (@ 0x00000104) ECB block encrypt aborted because of a STOPECB
                                                                    task or due to an error                                    */
  __IM  uint32_t  RESERVED2[30];
  __IOM uint32_t  PUBLISH_ENDECB;
  __IOM uint32_t  PUBLISH_ERRORECB;
  __IM  uint32_t  RESERVED3[95];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED4[126];
  __IOM uint32_t  ECBDATAPTR;
} NRF_ECB_Type;



/* =========================================================================================================================== */
/* ================                                          AAR_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Accelerated Address Resolver (AAR_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start resolving addresses based on IRKs specified
                                                                    in the IRK data structure                                  */
  __IM  uint32_t  RESERVED;
  __OM  uint32_t  TASKS_STOP;
  __IM  uint32_t  RESERVED1[29];
  __IOM uint32_t  SUBSCRIBE_START;
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  SUBSCRIBE_STOP;
  __IM  uint32_t  RESERVED3[29];
  __IOM uint32_t  EVENTS_END;
  __IOM uint32_t  EVENTS_RESOLVED;
  __IOM uint32_t  EVENTS_NOTRESOLVED;
  __IM  uint32_t  RESERVED4[29];
  __IOM uint32_t  PUBLISH_END;
  __IOM uint32_t  PUBLISH_RESOLVED;
  __IOM uint32_t  PUBLISH_NOTRESOLVED;
  __IM  uint32_t  RESERVED5[94];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED6[61];
  __IM  uint32_t  STATUS;
  __IM  uint32_t  RESERVED7[63];
  __IOM uint32_t  ENABLE;
  __IOM uint32_t  NIRK;
  __IOM uint32_t  IRKPTR;
  __IM  uint32_t  RESERVED8;
  __IOM uint32_t  ADDRPTR;
  __IOM uint32_t  SCRATCHPTR;
} NRF_AAR_Type;



/* =========================================================================================================================== */
/* ================                                          CCM_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief AES CCM mode encryption (CCM_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_KSGEN;                  /*!< (@ 0x00000000) Start generation of keystream. This operation
                                                                    will stop by itself when completed.                        */
  __OM  uint32_t  TASKS_CRYPT;                  /*!< (@ 0x00000004) Start encryption/decryption. This operation will
                                                                    stop by itself when completed.                             */
  __OM  uint32_t  TASKS_STOP;
  __OM  uint32_t  TASKS_RATEOVERRIDE;           /*!< (@ 0x0000000C) Override DATARATE setting in MODE register with
                                                                    the contents of the RATEOVERRIDE register
                                                                    for any ongoing encryption/decryption                      */
  __IM  uint32_t  RESERVED[28];
  __IOM uint32_t  SUBSCRIBE_KSGEN;
  __IOM uint32_t  SUBSCRIBE_CRYPT;
  __IOM uint32_t  SUBSCRIBE_STOP;
  __IOM uint32_t  SUBSCRIBE_RATEOVERRIDE;
  __IM  uint32_t  RESERVED1[28];
  __IOM uint32_t  EVENTS_ENDKSGEN;
  __IOM uint32_t  EVENTS_ENDCRYPT;
  __IOM uint32_t  EVENTS_ERROR;
  __IM  uint32_t  RESERVED2[29];
  __IOM uint32_t  PUBLISH_ENDKSGEN;
  __IOM uint32_t  PUBLISH_ENDCRYPT;
  __IOM uint32_t  PUBLISH_ERROR;                /*!< (@ 0x00000188) Deprecated register - Publish configuration for
                                                                    event ERROR                                                */
  __IM  uint32_t  RESERVED3[29];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED4[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED5[61];
  __IM  uint32_t  MICSTATUS;
  __IM  uint32_t  RESERVED6[63];
  __IOM uint32_t  ENABLE;
  __IOM uint32_t  MODE;
  __IOM uint32_t  CNFPTR;                       /*!< (@ 0x00000508) Pointer to data structure holding the AES key
                                                                    and the NONCE vector                                       */
  __IOM uint32_t  INPTR;
  __IOM uint32_t  OUTPTR;
  __IOM uint32_t  SCRATCHPTR;
  __IOM uint32_t  MAXPACKETSIZE;                /*!< (@ 0x00000518) Length of keystream generated when MODE.LENGTH
                                                                    = Extended                                                 */
  __IOM uint32_t  RATEOVERRIDE;
  __IOM uint32_t  HEADERMASK;
} NRF_CCM_Type;



/* =========================================================================================================================== */
/* ================                                         DPPIC_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Distributed programmable peripheral interconnect controller (DPPIC_NS)
  */

typedef struct {
  __OM  DPPIC_TASKS_CHG_Type TASKS_CHG[6];
  __IM  uint32_t  RESERVED[20];
  __IOM DPPIC_SUBSCRIBE_CHG_Type SUBSCRIBE_CHG[6];
  __IM  uint32_t  RESERVED1[276];
  __IOM uint32_t  CHEN;
  __IOM uint32_t  CHENSET;
  __IOM uint32_t  CHENCLR;
  __IM  uint32_t  RESERVED2[189];
  __IOM uint32_t  CHG[6];                       /*!< (@ 0x00000800) Description collection: Channel group n Note:
                                                                    Writes to this register are ignored if either
                                                                    SUBSCRIBE_CHG[n].EN or SUBSCRIBE_CHG[n].DIS
                                                                    is enabled                                                 */
} NRF_DPPIC_Type;



/* =========================================================================================================================== */
/* ================                                          TEMP_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Temperature Sensor (TEMP_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __IM  uint32_t  RESERVED[30];
  __IOM uint32_t  SUBSCRIBE_START;
  __IOM uint32_t  SUBSCRIBE_STOP;
  __IM  uint32_t  RESERVED1[30];
  __IOM uint32_t  EVENTS_DATARDY;
  __IM  uint32_t  RESERVED2[31];
  __IOM uint32_t  PUBLISH_DATARDY;
  __IM  uint32_t  RESERVED3[96];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED4[127];
  __IM  int32_t   TEMP;
  __IM  uint32_t  RESERVED5[5];
  __IOM uint32_t  A0;
  __IOM uint32_t  A1;
  __IOM uint32_t  A2;
  __IOM uint32_t  A3;
  __IOM uint32_t  A4;
  __IOM uint32_t  A5;
  __IM  uint32_t  RESERVED6[2];
  __IOM uint32_t  B0;
  __IOM uint32_t  B1;
  __IOM uint32_t  B2;
  __IOM uint32_t  B3;
  __IOM uint32_t  B4;
  __IOM uint32_t  B5;
  __IM  uint32_t  RESERVED7[2];
  __IOM uint32_t  T0;
  __IOM uint32_t  T1;
  __IOM uint32_t  T2;
  __IOM uint32_t  T3;
  __IOM uint32_t  T4;
} NRF_TEMP_Type;



/* =========================================================================================================================== */
/* ================                                          RTC0_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Real-time counter 0 (RTC0_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __OM  uint32_t  TASKS_CLEAR;
  __OM  uint32_t  TASKS_TRIGOVRFLW;
  __IM  uint32_t  RESERVED[12];
  __OM  uint32_t  TASKS_CAPTURE[4];             /*!< (@ 0x00000040) Description collection: Capture RTC counter to
                                                                    CC[n] register                                             */
  __IM  uint32_t  RESERVED1[12];
  __IOM uint32_t  SUBSCRIBE_START;
  __IOM uint32_t  SUBSCRIBE_STOP;
  __IOM uint32_t  SUBSCRIBE_CLEAR;
  __IOM uint32_t  SUBSCRIBE_TRIGOVRFLW;
  __IM  uint32_t  RESERVED2[12];
  __IOM uint32_t  SUBSCRIBE_CAPTURE[4];         /*!< (@ 0x000000C0) Description collection: Subscribe configuration
                                                                    for task CAPTURE[n]                                        */
  __IM  uint32_t  RESERVED3[12];
  __IOM uint32_t  EVENTS_TICK;
  __IOM uint32_t  EVENTS_OVRFLW;
  __IM  uint32_t  RESERVED4[14];
  __IOM uint32_t  EVENTS_COMPARE[4];            /*!< (@ 0x00000140) Description collection: Compare event on CC[n]
                                                                    match                                                      */
  __IM  uint32_t  RESERVED5[12];
  __IOM uint32_t  PUBLISH_TICK;
  __IOM uint32_t  PUBLISH_OVRFLW;
  __IM  uint32_t  RESERVED6[14];
  __IOM uint32_t  PUBLISH_COMPARE[4];           /*!< (@ 0x000001C0) Description collection: Publish configuration
                                                                    for event COMPARE[n]                                       */
  __IM  uint32_t  RESERVED7[12];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED8[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED9[13];
  __IOM uint32_t  EVTEN;
  __IOM uint32_t  EVTENSET;
  __IOM uint32_t  EVTENCLR;
  __IM  uint32_t  RESERVED10[110];
  __IM  uint32_t  COUNTER;
  __IOM uint32_t  PRESCALER;                    /*!< (@ 0x00000508) 12-bit prescaler for counter frequency (32768
                                                                    / (PRESCALER + 1)). Must be written when
                                                                    RTC is stopped.                                            */
  __IM  uint32_t  RESERVED11[13];
  __IOM uint32_t  CC[4];
} NRF_RTC_Type;



/* =========================================================================================================================== */
/* ================                                          IPC_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Interprocessor communication (IPC_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_SEND[16];               /*!< (@ 0x00000000) Description collection: Trigger events on IPC
                                                                    channel enabled in SEND_CNF[n]                             */
  __IM  uint32_t  RESERVED[16];
  __IOM uint32_t  SUBSCRIBE_SEND[16];           /*!< (@ 0x00000080) Description collection: Subscribe configuration
                                                                    for task SEND[n]                                           */
  __IM  uint32_t  RESERVED1[16];
  __IOM uint32_t  EVENTS_RECEIVE[16];           /*!< (@ 0x00000100) Description collection: Event received on one
                                                                    or more of the enabled IPC channels in RECEIVE_CNF[n]      */
  __IM  uint32_t  RESERVED2[16];
  __IOM uint32_t  PUBLISH_RECEIVE[16];          /*!< (@ 0x00000180) Description collection: Publish configuration
                                                                    for event RECEIVE[n]                                       */
  __IM  uint32_t  RESERVED3[80];
  __IOM uint32_t  INTEN;
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  INTPEND;
  __IM  uint32_t  RESERVED4[128];
  __IOM uint32_t  SEND_CNF[16];                 /*!< (@ 0x00000510) Description collection: Send event configuration
                                                                    for TASKS_SEND[n]                                          */
  __IM  uint32_t  RESERVED5[16];
  __IOM uint32_t  RECEIVE_CNF[16];              /*!< (@ 0x00000590) Description collection: Receive event configuration
                                                                    for EVENTS_RECEIVE[n]                                      */
  __IM  uint32_t  RESERVED6[16];
  __IOM uint32_t  GPMEM[2];
} NRF_IPC_Type;



/* =========================================================================================================================== */
/* ================                                         SPIM0_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial Peripheral Interface Master with EasyDMA (SPIM0_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED[4];
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __IM  uint32_t  RESERVED1;
  __OM  uint32_t  TASKS_SUSPEND;
  __OM  uint32_t  TASKS_RESUME;
  __IM  uint32_t  RESERVED2[27];
  __IOM uint32_t  SUBSCRIBE_START;
  __IOM uint32_t  SUBSCRIBE_STOP;
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  SUBSCRIBE_SUSPEND;
  __IOM uint32_t  SUBSCRIBE_RESUME;
  __IM  uint32_t  RESERVED4[24];
  __IOM uint32_t  EVENTS_STOPPED;
  __IM  uint32_t  RESERVED5[2];
  __IOM uint32_t  EVENTS_ENDRX;
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  EVENTS_END;
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  EVENTS_ENDTX;
  __IM  uint32_t  RESERVED8[10];
  __IOM uint32_t  EVENTS_STARTED;
  __IM  uint32_t  RESERVED9[13];
  __IOM uint32_t  PUBLISH_STOPPED;
  __IM  uint32_t  RESERVED10[2];
  __IOM uint32_t  PUBLISH_ENDRX;
  __IM  uint32_t  RESERVED11;
  __IOM uint32_t  PUBLISH_END;
  __IM  uint32_t  RESERVED12;
  __IOM uint32_t  PUBLISH_ENDTX;
  __IM  uint32_t  RESERVED13[10];
  __IOM uint32_t  PUBLISH_STARTED;
  __IM  uint32_t  RESERVED14[12];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED15[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED16[61];
  __IOM uint32_t  STALLSTAT;                    /*!< (@ 0x00000400) Stall status for EasyDMA RAM accesses. The fields
                                                                    in this register are set to STALL by hardware
                                                                    whenever a stall occurres and can be cleared
                                                                    (set to NOSTALL) by the CPU.                               */
  __IM  uint32_t  RESERVED17[63];
  __IOM uint32_t  ENABLE;
  __IM  uint32_t  RESERVED18;
  __IOM SPIM_PSEL_Type PSEL;
  __IM  uint32_t  RESERVED19[3];
  __IOM uint32_t  FREQUENCY;                    /*!< (@ 0x00000524) SPI frequency. Accuracy depends on the HFCLK
                                                                    source selected.                                           */
  __IM  uint32_t  RESERVED20[3];
  __IOM SPIM_RXD_Type RXD;
  __IOM SPIM_TXD_Type TXD;
  __IOM uint32_t  CONFIG;
  __IM  uint32_t  RESERVED21[2];
  __IOM SPIM_IFTIMING_Type IFTIMING;
  __IOM uint32_t  CSNPOL;
  __IOM uint32_t  PSELDCX;
  __IOM uint32_t  DCXCNT;
  __IM  uint32_t  RESERVED22[19];
  __IOM uint32_t  ORC;                          /*!< (@ 0x000005C0) Byte transmitted after TXD.MAXCNT bytes have
                                                                    been transmitted in the case when RXD.MAXCNT
                                                                    is greater than TXD.MAXCNT                                 */
} NRF_SPIM_Type;



/* =========================================================================================================================== */
/* ================                                         SPIS0_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI Slave (SPIS0_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED[9];
  __OM  uint32_t  TASKS_ACQUIRE;
  __OM  uint32_t  TASKS_RELEASE;                /*!< (@ 0x00000028) Release SPI semaphore, enabling the SPI slave
                                                                    to acquire it                                              */
  __IM  uint32_t  RESERVED1[30];
  __IOM uint32_t  SUBSCRIBE_ACQUIRE;
  __IOM uint32_t  SUBSCRIBE_RELEASE;
  __IM  uint32_t  RESERVED2[22];
  __IOM uint32_t  EVENTS_END;
  __IM  uint32_t  RESERVED3[2];
  __IOM uint32_t  EVENTS_ENDRX;
  __IM  uint32_t  RESERVED4[5];
  __IOM uint32_t  EVENTS_ACQUIRED;
  __IM  uint32_t  RESERVED5[22];
  __IOM uint32_t  PUBLISH_END;
  __IM  uint32_t  RESERVED6[2];
  __IOM uint32_t  PUBLISH_ENDRX;
  __IM  uint32_t  RESERVED7[5];
  __IOM uint32_t  PUBLISH_ACQUIRED;
  __IM  uint32_t  RESERVED8[21];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED9[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED10[61];
  __IM  uint32_t  SEMSTAT;
  __IM  uint32_t  RESERVED11[15];
  __IOM uint32_t  STATUS;
  __IM  uint32_t  RESERVED12[47];
  __IOM uint32_t  ENABLE;
  __IM  uint32_t  RESERVED13;
  __IOM SPIS_PSEL_Type PSEL;
  __IM  uint32_t  RESERVED14[7];
  __IOM SPIS_RXD_Type RXD;
  __IOM SPIS_TXD_Type TXD;
  __IOM uint32_t  CONFIG;
  __IM  uint32_t  RESERVED15;
  __IOM uint32_t  DEF;                          /*!< (@ 0x0000055C) Default character. Character clocked out in case
                                                                    of an ignored transaction.                                 */
  __IM  uint32_t  RESERVED16[24];
  __IOM uint32_t  ORC;
} NRF_SPIS_Type;



/* =========================================================================================================================== */
/* ================                                         TWIM0_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C compatible Two-Wire Master Interface with EasyDMA (TWIM0_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_STARTRX;
  __IM  uint32_t  RESERVED;
  __OM  uint32_t  TASKS_STARTTX;
  __IM  uint32_t  RESERVED1[2];
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000014) Stop TWI transaction. Must be issued while the
                                                                    TWI master is not suspended.                               */
  __IM  uint32_t  RESERVED2;
  __OM  uint32_t  TASKS_SUSPEND;
  __OM  uint32_t  TASKS_RESUME;
  __IM  uint32_t  RESERVED3[23];
  __IOM uint32_t  SUBSCRIBE_STARTRX;
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  SUBSCRIBE_STARTTX;
  __IM  uint32_t  RESERVED5[2];
  __IOM uint32_t  SUBSCRIBE_STOP;
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  SUBSCRIBE_SUSPEND;
  __IOM uint32_t  SUBSCRIBE_RESUME;
  __IM  uint32_t  RESERVED7[24];
  __IOM uint32_t  EVENTS_STOPPED;
  __IM  uint32_t  RESERVED8[7];
  __IOM uint32_t  EVENTS_ERROR;
  __IM  uint32_t  RESERVED9[8];
  __IOM uint32_t  EVENTS_SUSPENDED;             /*!< (@ 0x00000148) SUSPEND task has been issued, TWI traffic is
                                                                    now suspended.                                             */
  __IOM uint32_t  EVENTS_RXSTARTED;
  __IOM uint32_t  EVENTS_TXSTARTED;
  __IM  uint32_t  RESERVED10[2];
  __IOM uint32_t  EVENTS_LASTRX;
  __IOM uint32_t  EVENTS_LASTTX;                /*!< (@ 0x00000160) Byte boundary, starting to transmit the last
                                                                    byte                                                       */
  __IM  uint32_t  RESERVED11[8];
  __IOM uint32_t  PUBLISH_STOPPED;
  __IM  uint32_t  RESERVED12[7];
  __IOM uint32_t  PUBLISH_ERROR;
  __IM  uint32_t  RESERVED13[8];
  __IOM uint32_t  PUBLISH_SUSPENDED;
  __IOM uint32_t  PUBLISH_RXSTARTED;
  __IOM uint32_t  PUBLISH_TXSTARTED;
  __IM  uint32_t  RESERVED14[2];
  __IOM uint32_t  PUBLISH_LASTRX;
  __IOM uint32_t  PUBLISH_LASTTX;
  __IM  uint32_t  RESERVED15[7];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED16[63];
  __IOM uint32_t  INTEN;
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED17[110];
  __IOM uint32_t  ERRORSRC;
  __IM  uint32_t  RESERVED18[14];
  __IOM uint32_t  ENABLE;
  __IM  uint32_t  RESERVED19;
  __IOM TWIM_PSEL_Type PSEL;
  __IM  uint32_t  RESERVED20[5];
  __IOM uint32_t  FREQUENCY;                    /*!< (@ 0x00000524) TWI frequency. Accuracy depends on the HFCLK
                                                                    source selected.                                           */
  __IM  uint32_t  RESERVED21[3];
  __IOM TWIM_RXD_Type RXD;
  __IOM TWIM_TXD_Type TXD;
  __IM  uint32_t  RESERVED22[13];
  __IOM uint32_t  ADDRESS;
} NRF_TWIM_Type;



/* =========================================================================================================================== */
/* ================                                         TWIS0_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C compatible Two-Wire Slave Interface with EasyDMA (TWIS0_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED[5];
  __OM  uint32_t  TASKS_STOP;
  __IM  uint32_t  RESERVED1;
  __OM  uint32_t  TASKS_SUSPEND;
  __OM  uint32_t  TASKS_RESUME;
  __IM  uint32_t  RESERVED2[3];
  __OM  uint32_t  TASKS_PREPARERX;
  __OM  uint32_t  TASKS_PREPARETX;
  __IM  uint32_t  RESERVED3[23];
  __IOM uint32_t  SUBSCRIBE_STOP;
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  SUBSCRIBE_SUSPEND;
  __IOM uint32_t  SUBSCRIBE_RESUME;
  __IM  uint32_t  RESERVED5[3];
  __IOM uint32_t  SUBSCRIBE_PREPARERX;
  __IOM uint32_t  SUBSCRIBE_PREPARETX;
  __IM  uint32_t  RESERVED6[19];
  __IOM uint32_t  EVENTS_STOPPED;
  __IM  uint32_t  RESERVED7[7];
  __IOM uint32_t  EVENTS_ERROR;
  __IM  uint32_t  RESERVED8[9];
  __IOM uint32_t  EVENTS_RXSTARTED;
  __IOM uint32_t  EVENTS_TXSTARTED;
  __IM  uint32_t  RESERVED9[4];
  __IOM uint32_t  EVENTS_WRITE;
  __IOM uint32_t  EVENTS_READ;
  __IM  uint32_t  RESERVED10[6];
  __IOM uint32_t  PUBLISH_STOPPED;
  __IM  uint32_t  RESERVED11[7];
  __IOM uint32_t  PUBLISH_ERROR;
  __IM  uint32_t  RESERVED12[9];
  __IOM uint32_t  PUBLISH_RXSTARTED;
  __IOM uint32_t  PUBLISH_TXSTARTED;
  __IM  uint32_t  RESERVED13[4];
  __IOM uint32_t  PUBLISH_WRITE;
  __IOM uint32_t  PUBLISH_READ;
  __IM  uint32_t  RESERVED14[5];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED15[63];
  __IOM uint32_t  INTEN;
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED16[113];
  __IOM uint32_t  ERRORSRC;
  __IM  uint32_t  MATCH;                        /*!< (@ 0x000004D4) Status register indicating which address had
                                                                    a match                                                    */
  __IM  uint32_t  RESERVED17[10];
  __IOM uint32_t  ENABLE;
  __IM  uint32_t  RESERVED18;
  __IOM TWIS_PSEL_Type PSEL;
  __IM  uint32_t  RESERVED19[9];
  __IOM TWIS_RXD_Type RXD;
  __IOM TWIS_TXD_Type TXD;
  __IM  uint32_t  RESERVED20[13];
  __IOM uint32_t  ADDRESS[2];
  __IM  uint32_t  RESERVED21;
  __IOM uint32_t  CONFIG;                       /*!< (@ 0x00000594) Configuration register for the address match
                                                                    mechanism                                                  */
  __IM  uint32_t  RESERVED22[10];
  __IOM uint32_t  ORC;                          /*!< (@ 0x000005C0) Over-read character. Character sent out in case
                                                                    of an over-read of the transmit buffer.                    */
} NRF_TWIS_Type;



/* =========================================================================================================================== */
/* ================                                         UARTE0_NS                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief UART with EasyDMA (UARTE0_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_STARTRX;
  __OM  uint32_t  TASKS_STOPRX;
  __OM  uint32_t  TASKS_STARTTX;
  __OM  uint32_t  TASKS_STOPTX;
  __IM  uint32_t  RESERVED[7];
  __OM  uint32_t  TASKS_FLUSHRX;
  __IM  uint32_t  RESERVED1[20];
  __IOM uint32_t  SUBSCRIBE_STARTRX;
  __IOM uint32_t  SUBSCRIBE_STOPRX;
  __IOM uint32_t  SUBSCRIBE_STARTTX;
  __IOM uint32_t  SUBSCRIBE_STOPTX;
  __IM  uint32_t  RESERVED2[7];
  __IOM uint32_t  SUBSCRIBE_FLUSHRX;
  __IM  uint32_t  RESERVED3[20];
  __IOM uint32_t  EVENTS_CTS;
  __IOM uint32_t  EVENTS_NCTS;
  __IOM uint32_t  EVENTS_RXDRDY;                /*!< (@ 0x00000108) Data received in RXD (but potentially not yet
                                                                    transferred to Data RAM)                                   */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  EVENTS_ENDRX;
  __IM  uint32_t  RESERVED5[2];
  __IOM uint32_t  EVENTS_TXDRDY;
  __IOM uint32_t  EVENTS_ENDTX;
  __IOM uint32_t  EVENTS_ERROR;
  __IM  uint32_t  RESERVED6[7];
  __IOM uint32_t  EVENTS_RXTO;
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  EVENTS_RXSTARTED;
  __IOM uint32_t  EVENTS_TXSTARTED;
  __IM  uint32_t  RESERVED8;
  __IOM uint32_t  EVENTS_TXSTOPPED;
  __IM  uint32_t  RESERVED9[9];
  __IOM uint32_t  PUBLISH_CTS;
  __IOM uint32_t  PUBLISH_NCTS;
  __IOM uint32_t  PUBLISH_RXDRDY;
  __IM  uint32_t  RESERVED10;
  __IOM uint32_t  PUBLISH_ENDRX;
  __IM  uint32_t  RESERVED11[2];
  __IOM uint32_t  PUBLISH_TXDRDY;
  __IOM uint32_t  PUBLISH_ENDTX;
  __IOM uint32_t  PUBLISH_ERROR;
  __IM  uint32_t  RESERVED12[7];
  __IOM uint32_t  PUBLISH_RXTO;
  __IM  uint32_t  RESERVED13;
  __IOM uint32_t  PUBLISH_RXSTARTED;
  __IOM uint32_t  PUBLISH_TXSTARTED;
  __IM  uint32_t  RESERVED14;
  __IOM uint32_t  PUBLISH_TXSTOPPED;
  __IM  uint32_t  RESERVED15[9];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED16[63];
  __IOM uint32_t  INTEN;
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED17[93];
  __IOM uint32_t  ERRORSRC;
  __IM  uint32_t  RESERVED18[31];
  __IOM uint32_t  ENABLE;
  __IM  uint32_t  RESERVED19;
  __IOM UARTE_PSEL_Type PSEL;
  __IM  uint32_t  RESERVED20[3];
  __IOM uint32_t  BAUDRATE;                     /*!< (@ 0x00000524) Baud rate. Accuracy depends on the HFCLK source
                                                                    selected.                                                  */
  __IM  uint32_t  RESERVED21[3];
  __IOM UARTE_RXD_Type RXD;
  __IM  uint32_t  RESERVED22;
  __IOM UARTE_TXD_Type TXD;
  __IM  uint32_t  RESERVED23[7];
  __IOM uint32_t  CONFIG;
} NRF_UARTE_Type;



/* =========================================================================================================================== */
/* ================                                          EGU0_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Event generator unit (EGU0_NS)
  */

typedef struct {
  __OM  uint32_t  TASKS_TRIGGER[16];            /*!< (@ 0x00000000) Description collection: Trigger n for triggering
                                                                    the corresponding TRIGGERED[n] event                       */
  __IM  uint32_t  RESERVED[16];
  __IOM uint32_t  SUBSCRIBE_TRIGGER[16];        /*!< (@ 0x00000080) Description collection: Subscribe configuration
                                                                    for task TRIGGER[n]                                        */
  __IM  uint32_t  RESERVED1[16];
  __IOM uint32_t  EVENTS_TRIGGERED[16];         /*!< (@ 0x00000100) Description collection: Event number n generated
                                                                    by triggering the corresponding TRIGGER[n]
                                                                    task                                                       */
  __IM  uint32_t  RESERVED2[16];
  __IOM uint32_t  PUBLISH_TRIGGERED[16];        /*!< (@ 0x00000180) Description collection: Publish configuration
                                                                    for event TRIGGERED[n]                                     */
  __IM  uint32_t  RESERVED3[80];
  __IOM uint32_t  INTEN;
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
} NRF_EGU_Type;



/* =========================================================================================================================== */
/* ================                                          SWI0_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Software interrupt 0 (SWI0_NS)
  */

typedef struct {
  __IM  uint32_t  UNUSED;
} NRF_SWI_Type;



/* =========================================================================================================================== */
/* ================                                        APPMUTEX_NS                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief MUTEX 0 (APPMUTEX_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED[256];
  __IOM uint32_t  MUTEX[16];
} NRF_MUTEX_Type;



/* =========================================================================================================================== */
/* ================                                          ACL_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Access control lists (ACL_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED[512];
  __IOM ACL_ACL_Type ACL[8];
} NRF_ACL_Type;



/* =========================================================================================================================== */
/* ================                                          NVMC_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Non-volatile memory controller (NVMC_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED[256];
  __IM  uint32_t  READY;
  __IM  uint32_t  RESERVED1;
  __IM  uint32_t  READYNEXT;
  __IM  uint32_t  RESERVED2[62];
  __IOM uint32_t  CONFIG;
  __IM  uint32_t  RESERVED3;
  __OM  uint32_t  ERASEALL;
  __IM  uint32_t  RESERVED4[3];
  __IOM uint32_t  ERASEPAGEPARTIALCFG;
  __IM  uint32_t  RESERVED5[8];
  __IOM uint32_t  ICACHECNF;
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  IHIT;
  __IOM uint32_t  IMISS;
} NRF_NVMC_Type;



/* =========================================================================================================================== */
/* ================                                          VMC_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Volatile Memory controller (VMC_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED[384];
  __IOM VMC_RAM_Type RAM[4];
} NRF_VMC_Type;



/* =========================================================================================================================== */
/* ================                                           P0_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO Port 0 (P0_NS)
  */

typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  OUT;
  __IOM uint32_t  OUTSET;
  __IOM uint32_t  OUTCLR;
  __IM  uint32_t  IN;
  __IOM uint32_t  DIR;
  __IOM uint32_t  DIRSET;
  __IOM uint32_t  DIRCLR;
  __IOM uint32_t  LATCH;                        /*!< (@ 0x00000020) Latch register indicating what GPIO pins that
                                                                    have met the criteria set in the PIN_CNF[n].SENSE
                                                                    registers                                                  */
  __IOM uint32_t  DETECTMODE;                   /*!< (@ 0x00000024) Select between default DETECT signal behavior
                                                                    and LDETECT mode                                           */
  __IOM uint32_t  DETECTMODE_SEC;               /*!< (@ 0x00000028) Select between default DETECT signal behavior
                                                                    and LDETECT mode                                           */
  __IM  uint32_t  RESERVED1[117];
  __IOM uint32_t  PIN_CNF[32];                  /*!< (@ 0x00000200) Description collection: Configuration of GPIO
                                                                    pins                                                       */
} NRF_GPIO_Type;


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define NRF_FICR_NS_BASE            0x01FF0000UL
#define NRF_UICR_NS_BASE            0x01FF8000UL
#define NRF_CTI_NS_BASE             0xE0042000UL
#define NRF_DCNF_NS_BASE            0x41000000UL
#define NRF_VREQCTRL_NS_BASE        0x41004000UL
#define NRF_CLOCK_NS_BASE           0x41005000UL
#define NRF_POWER_NS_BASE           0x41005000UL
#define NRF_RESET_NS_BASE           0x41005000UL
#define NRF_CTRLAP_NS_BASE          0x41006000UL
#define NRF_RADIO_NS_BASE           0x41008000UL
#define NRF_RNG_NS_BASE             0x41009000UL
#define NRF_GPIOTE_NS_BASE          0x4100A000UL
#define NRF_WDT_NS_BASE             0x4100B000UL
#define NRF_TIMER0_NS_BASE          0x4100C000UL
#define NRF_ECB_NS_BASE             0x4100D000UL
#define NRF_AAR_NS_BASE             0x4100E000UL
#define NRF_CCM_NS_BASE             0x4100E000UL
#define NRF_DPPIC_NS_BASE           0x4100F000UL
#define NRF_TEMP_NS_BASE            0x41010000UL
#define NRF_RTC0_NS_BASE            0x41011000UL
#define NRF_IPC_NS_BASE             0x41012000UL
#define NRF_SPIM0_NS_BASE           0x41013000UL
#define NRF_SPIS0_NS_BASE           0x41013000UL
#define NRF_TWIM0_NS_BASE           0x41013000UL
#define NRF_TWIS0_NS_BASE           0x41013000UL
#define NRF_UARTE0_NS_BASE          0x41013000UL
#define NRF_EGU0_NS_BASE            0x41014000UL
#define NRF_RTC1_NS_BASE            0x41016000UL
#define NRF_TIMER1_NS_BASE          0x41018000UL
#define NRF_TIMER2_NS_BASE          0x41019000UL
#define NRF_SWI0_NS_BASE            0x4101A000UL
#define NRF_SWI1_NS_BASE            0x4101B000UL
#define NRF_SWI2_NS_BASE            0x4101C000UL
#define NRF_SWI3_NS_BASE            0x4101D000UL
#define NRF_APPMUTEX_NS_BASE        0x40030000UL
#define NRF_APPMUTEX_S_BASE         0x50030000UL
#define NRF_ACL_NS_BASE             0x41080000UL
#define NRF_NVMC_NS_BASE            0x41080000UL
#define NRF_VMC_NS_BASE             0x41081000UL
#define NRF_P0_NS_BASE              0x418C0500UL
#define NRF_P1_NS_BASE              0x418C0800UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define NRF_FICR_NS                 ((NRF_FICR_Type*)          NRF_FICR_NS_BASE)
#define NRF_UICR_NS                 ((NRF_UICR_Type*)          NRF_UICR_NS_BASE)
#define NRF_CTI_NS                  ((NRF_CTI_Type*)           NRF_CTI_NS_BASE)
#define NRF_DCNF_NS                 ((NRF_DCNF_Type*)          NRF_DCNF_NS_BASE)
#define NRF_VREQCTRL_NS             ((NRF_VREQCTRL_Type*)      NRF_VREQCTRL_NS_BASE)
#define NRF_CLOCK_NS                ((NRF_CLOCK_Type*)         NRF_CLOCK_NS_BASE)
#define NRF_POWER_NS                ((NRF_POWER_Type*)         NRF_POWER_NS_BASE)
#define NRF_RESET_NS                ((NRF_RESET_Type*)         NRF_RESET_NS_BASE)
#define NRF_CTRLAP_NS               ((NRF_CTRLAPPERI_Type*)    NRF_CTRLAP_NS_BASE)
#define NRF_RADIO_NS                ((NRF_RADIO_Type*)         NRF_RADIO_NS_BASE)
#define NRF_RNG_NS                  ((NRF_RNG_Type*)           NRF_RNG_NS_BASE)
#define NRF_GPIOTE_NS               ((NRF_GPIOTE_Type*)        NRF_GPIOTE_NS_BASE)
#define NRF_WDT_NS                  ((NRF_WDT_Type*)           NRF_WDT_NS_BASE)
#define NRF_TIMER0_NS               ((NRF_TIMER_Type*)         NRF_TIMER0_NS_BASE)
#define NRF_ECB_NS                  ((NRF_ECB_Type*)           NRF_ECB_NS_BASE)
#define NRF_AAR_NS                  ((NRF_AAR_Type*)           NRF_AAR_NS_BASE)
#define NRF_CCM_NS                  ((NRF_CCM_Type*)           NRF_CCM_NS_BASE)
#define NRF_DPPIC_NS                ((NRF_DPPIC_Type*)         NRF_DPPIC_NS_BASE)
#define NRF_TEMP_NS                 ((NRF_TEMP_Type*)          NRF_TEMP_NS_BASE)
#define NRF_RTC0_NS                 ((NRF_RTC_Type*)           NRF_RTC0_NS_BASE)
#define NRF_IPC_NS                  ((NRF_IPC_Type*)           NRF_IPC_NS_BASE)
#define NRF_SPIM0_NS                ((NRF_SPIM_Type*)          NRF_SPIM0_NS_BASE)
#define NRF_SPIS0_NS                ((NRF_SPIS_Type*)          NRF_SPIS0_NS_BASE)
#define NRF_TWIM0_NS                ((NRF_TWIM_Type*)          NRF_TWIM0_NS_BASE)
#define NRF_TWIS0_NS                ((NRF_TWIS_Type*)          NRF_TWIS0_NS_BASE)
#define NRF_UARTE0_NS               ((NRF_UARTE_Type*)         NRF_UARTE0_NS_BASE)
#define NRF_EGU0_NS                 ((NRF_EGU_Type*)           NRF_EGU0_NS_BASE)
#define NRF_RTC1_NS                 ((NRF_RTC_Type*)           NRF_RTC1_NS_BASE)
#define NRF_TIMER1_NS               ((NRF_TIMER_Type*)         NRF_TIMER1_NS_BASE)
#define NRF_TIMER2_NS               ((NRF_TIMER_Type*)         NRF_TIMER2_NS_BASE)
#define NRF_SWI0_NS                 ((NRF_SWI_Type*)           NRF_SWI0_NS_BASE)
#define NRF_SWI1_NS                 ((NRF_SWI_Type*)           NRF_SWI1_NS_BASE)
#define NRF_SWI2_NS                 ((NRF_SWI_Type*)           NRF_SWI2_NS_BASE)
#define NRF_SWI3_NS                 ((NRF_SWI_Type*)           NRF_SWI3_NS_BASE)
#define NRF_APPMUTEX_NS             ((NRF_MUTEX_Type*)         NRF_APPMUTEX_NS_BASE)
#define NRF_APPMUTEX_S              ((NRF_MUTEX_Type*)         NRF_APPMUTEX_S_BASE)
#define NRF_ACL_NS                  ((NRF_ACL_Type*)           NRF_ACL_NS_BASE)
#define NRF_NVMC_NS                 ((NRF_NVMC_Type*)          NRF_NVMC_NS_BASE)
#define NRF_VMC_NS                  ((NRF_VMC_Type*)           NRF_VMC_NS_BASE)
#define NRF_P0_NS                   ((NRF_GPIO_Type*)          NRF_P0_NS_BASE)
#define NRF_P1_NS                   ((NRF_GPIO_Type*)          NRF_P1_NS_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


#ifdef __cplusplus
}
#endif

#endif /* NRF5340_NETWORK_H */


/** @} */ /* End of group nrf5340_network */

/** @} */ /* End of group Nordic Semiconductor */
