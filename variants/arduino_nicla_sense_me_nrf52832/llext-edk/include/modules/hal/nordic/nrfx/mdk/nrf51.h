/*
Copyright (c) 2010 - 2025, Nordic Semiconductor ASA All rights reserved.\n
\n
SPDX-License-Identifier: BSD-3-Clause\n
\n
Redistribution and use in source and binary forms, with or without\n
modification, are permitted provided that the following conditions are met:\n
\n
1. Redistributions of source code must retain the above copyright notice, this\n
   list of conditions and the following disclaimer.\n
\n
2. Redistributions in binary form must reproduce the above copyright\n
   notice, this list of conditions and the following disclaimer in the\n
   documentation and/or other materials provided with the distribution.\n
\n
3. Neither the name of Nordic Semiconductor ASA nor the names of its\n
   contributors may be used to endorse or promote products derived from this\n
   software without specific prior written permission.\n
\n
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\n
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n
IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE\n
ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE\n
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n
POSSIBILITY OF SUCH DAMAGE.\n
 *
 * @file     nrf51.h
 * @brief    CMSIS HeaderFile
 * @version  522
 * @date     12. February 2025
 * @note     Generated by SVDConv V3.3.35 on Wednesday, 12.02.2025 14:52:21
 *           from File 'nrf51.svd',
 *           last modified on Wednesday, 12.02.2025 13:51:18
 */



/** @addtogroup Nordic Semiconductor
  * @{
  */


/** @addtogroup nrf51
  * @{
  */


#ifndef NRF51_H
#define NRF51_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M0 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,
  NonMaskableInt_IRQn       = -14,
  HardFault_IRQn            = -13,
  SVCall_IRQn               =  -5,
  PendSV_IRQn               =  -2,
  SysTick_IRQn              =  -1,
/* ===========================================  nrf51 Specific Interrupt Numbers  ============================================ */
  POWER_CLOCK_IRQn          =   0,
  RADIO_IRQn                =   1,
  UART0_IRQn                =   2,
  SPI0_TWI0_IRQn            =   3,
  SPI1_TWI1_IRQn            =   4,
  GPIOTE_IRQn               =   6,
  ADC_IRQn                  =   7,
  TIMER0_IRQn               =   8,
  TIMER1_IRQn               =   9,
  TIMER2_IRQn               =  10,
  RTC0_IRQn                 =  11,
  TEMP_IRQn                 =  12,
  RNG_IRQn                  =  13,
  ECB_IRQn                  =  14,
  CCM_AAR_IRQn              =  15,
  WDT_IRQn                  =  16,
  RTC1_IRQn                 =  17,
  QDEC_IRQn                 =  18,
  LPCOMP_IRQn               =  19,
  SWI0_IRQn                 =  20,
  SWI1_IRQn                 =  21,
  SWI2_IRQn                 =  22,
  SWI3_IRQn                 =  23,
  SWI4_IRQn                 =  24,
  SWI5_IRQn                 =  25
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M0 Processor and Core Peripherals  =========================== */
#define __CM0_REV                 0x0301U
#define __INTERRUPTS_MAX                   32
#define __DSP_PRESENT                  0
#define __VTOR_PRESENT                 0
#define __NVIC_PRIO_BITS               2
#define __Vendor_SysTickConfig         0
#define __MPU_PRESENT                  0
#define __FPU_PRESENT                  0


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm0.h"
#include "system_nrf51.h"

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                              Device Specific Cluster Section                              ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_clusters
  * @{
  */


/**
  * @brief PPI_TASKS_CHG [TASKS_CHG] (Channel group tasks.)
  */
typedef struct {
  __OM  uint32_t  EN;
  __OM  uint32_t  DIS;
} PPI_TASKS_CHG_Type;


/**
  * @brief PPI_CH [CH] (PPI Channel.)
  */
typedef struct {
  __IOM uint32_t  EEP;
  __IOM uint32_t  TEP;
} PPI_CH_Type;


/** @} */ /* End of group Device_Peripheral_clusters */


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           POWER                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Power Control. (POWER)
  */

typedef struct {
  __IM  uint32_t  RESERVED[30];
  __OM  uint32_t  TASKS_CONSTLAT;
  __OM  uint32_t  TASKS_LOWPWR;
  __IM  uint32_t  RESERVED1[34];
  __IOM uint32_t  EVENTS_POFWARN;
  __IM  uint32_t  RESERVED2[126];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED3[61];
  __IOM uint32_t  RESETREAS;
  __IM  uint32_t  RESERVED4[9];
  __IM  uint32_t  RAMSTATUS;
  __IM  uint32_t  RESERVED5[53];
  __OM  uint32_t  SYSTEMOFF;
  __IM  uint32_t  RESERVED6[3];
  __IOM uint32_t  POFCON;
  __IM  uint32_t  RESERVED7[2];
  __IOM uint32_t  GPREGRET;                     /*!< (@ 0x0000051C) General purpose retention register. This register
                                                                    is a retained register.                                    */
  __IM  uint32_t  RESERVED8;
  __IOM uint32_t  RAMON;
  __IM  uint32_t  RESERVED9[7];
  __IOM uint32_t  RESET;                        /*!< (@ 0x00000544) Pin reset functionality configuration register.
                                                                    This register is a retained register.                      */
  __IM  uint32_t  RESERVED10[3];
  __IOM uint32_t  RAMONB;
  __IM  uint32_t  RESERVED11[8];
  __IOM uint32_t  DCDCEN;
  __IM  uint32_t  RESERVED12[291];
  __IOM uint32_t  DCDCFORCE;
} NRF_POWER_Type;



/* =========================================================================================================================== */
/* ================                                           CLOCK                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Clock control. (CLOCK)
  */

typedef struct {
  __OM  uint32_t  TASKS_HFCLKSTART;
  __OM  uint32_t  TASKS_HFCLKSTOP;
  __OM  uint32_t  TASKS_LFCLKSTART;
  __OM  uint32_t  TASKS_LFCLKSTOP;
  __OM  uint32_t  TASKS_CAL;
  __OM  uint32_t  TASKS_CTSTART;
  __OM  uint32_t  TASKS_CTSTOP;
  __IM  uint32_t  RESERVED[57];
  __IOM uint32_t  EVENTS_HFCLKSTARTED;
  __IOM uint32_t  EVENTS_LFCLKSTARTED;
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  EVENTS_DONE;
  __IOM uint32_t  EVENTS_CTTO;
  __IM  uint32_t  RESERVED2[124];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED3[63];
  __IM  uint32_t  HFCLKRUN;
  __IM  uint32_t  HFCLKSTAT;
  __IM  uint32_t  RESERVED4;
  __IM  uint32_t  LFCLKRUN;
  __IM  uint32_t  LFCLKSTAT;
  __IM  uint32_t  LFCLKSRCCOPY;                 /*!< (@ 0x0000041C) Clock source for the LFCLK clock, set when task
                                                                    LKCLKSTART is triggered.                                   */
  __IM  uint32_t  RESERVED5[62];
  __IOM uint32_t  LFCLKSRC;
  __IM  uint32_t  RESERVED6[7];
  __IOM uint32_t  CTIV;
  __IM  uint32_t  RESERVED7[5];
  __IOM uint32_t  XTALFREQ;
} NRF_CLOCK_Type;



/* =========================================================================================================================== */
/* ================                                            MPU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Memory Protection Unit. (MPU)
  */

typedef struct {
  __IM  uint32_t  RESERVED[330];
  __IOM uint32_t  PERR0;
  __IOM uint32_t  RLENR0;
  __IM  uint32_t  RESERVED1[52];
  __IOM uint32_t  PROTENSET0;
  __IOM uint32_t  PROTENSET1;
  __IOM uint32_t  DISABLEINDEBUG;               /*!< (@ 0x00000608) Disable erase and write protection mechanism
                                                                    in debug mode.                                             */
  __IOM uint32_t  PROTBLOCKSIZE;
} NRF_MPU_Type;



/* =========================================================================================================================== */
/* ================                                           RADIO                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief The radio. (RADIO)
  */

typedef struct {
  __OM  uint32_t  TASKS_TXEN;
  __OM  uint32_t  TASKS_RXEN;
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __OM  uint32_t  TASKS_DISABLE;
  __OM  uint32_t  TASKS_RSSISTART;              /*!< (@ 0x00000014) Start the RSSI and take one sample of the receive
                                                                    signal strength.                                           */
  __OM  uint32_t  TASKS_RSSISTOP;
  __OM  uint32_t  TASKS_BCSTART;
  __OM  uint32_t  TASKS_BCSTOP;
  __IM  uint32_t  RESERVED[55];
  __IOM uint32_t  EVENTS_READY;
  __IOM uint32_t  EVENTS_ADDRESS;
  __IOM uint32_t  EVENTS_PAYLOAD;
  __IOM uint32_t  EVENTS_END;
  __IOM uint32_t  EVENTS_DISABLED;
  __IOM uint32_t  EVENTS_DEVMATCH;              /*!< (@ 0x00000114) A device address match occurred on the last received
                                                                    packet.                                                    */
  __IOM uint32_t  EVENTS_DEVMISS;               /*!< (@ 0x00000118) No device address match occurred on the last
                                                                    received packet.                                           */
  __IOM uint32_t  EVENTS_RSSIEND;               /*!< (@ 0x0000011C) Sampling of the receive signal strength complete.
                                                                    A new RSSI sample is ready for readout at
                                                                    the RSSISAMPLE register.                                   */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  EVENTS_BCMATCH;               /*!< (@ 0x00000128) Bit counter reached bit count value specified
                                                                    in BCC register.                                           */
  __IM  uint32_t  RESERVED2[53];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED3[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED4[61];
  __IM  uint32_t  CRCSTATUS;
  __IM  uint32_t  RESERVED5;
  __IM  uint32_t  RXMATCH;
  __IM  uint32_t  RXCRC;
  __IM  uint32_t  DAI;
  __IM  uint32_t  RESERVED6[60];
  __IOM uint32_t  PACKETPTR;
  __IOM uint32_t  FREQUENCY;
  __IOM uint32_t  TXPOWER;
  __IOM uint32_t  MODE;
  __IOM uint32_t  PCNF0;
  __IOM uint32_t  PCNF1;
  __IOM uint32_t  BASE0;
  __IOM uint32_t  BASE1;
  __IOM uint32_t  PREFIX0;
  __IOM uint32_t  PREFIX1;
  __IOM uint32_t  TXADDRESS;
  __IOM uint32_t  RXADDRESSES;
  __IOM uint32_t  CRCCNF;
  __IOM uint32_t  CRCPOLY;
  __IOM uint32_t  CRCINIT;
  __IOM uint32_t  TEST;
  __IOM uint32_t  TIFS;
  __IM  uint32_t  RSSISAMPLE;
  __IM  uint32_t  RESERVED7;
  __IM  uint32_t  STATE;
  __IOM uint32_t  DATAWHITEIV;
  __IM  uint32_t  RESERVED8[2];
  __IOM uint32_t  BCC;
  __IM  uint32_t  RESERVED9[39];
  __IOM uint32_t  DAB[8];
  __IOM uint32_t  DAP[8];
  __IOM uint32_t  DACNF;
  __IM  uint32_t  RESERVED10[56];
  __IOM uint32_t  OVERRIDE0;
  __IOM uint32_t  OVERRIDE1;
  __IOM uint32_t  OVERRIDE2;
  __IOM uint32_t  OVERRIDE3;
  __IOM uint32_t  OVERRIDE4;
  __IM  uint32_t  RESERVED11[561];
  __IOM uint32_t  POWER;
} NRF_RADIO_Type;



/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal Asynchronous Receiver/Transmitter. (UART0)
  */

typedef struct {
  __OM  uint32_t  TASKS_STARTRX;
  __OM  uint32_t  TASKS_STOPRX;
  __OM  uint32_t  TASKS_STARTTX;
  __OM  uint32_t  TASKS_STOPTX;
  __IM  uint32_t  RESERVED[3];
  __OM  uint32_t  TASKS_SUSPEND;
  __IM  uint32_t  RESERVED1[56];
  __IOM uint32_t  EVENTS_CTS;
  __IOM uint32_t  EVENTS_NCTS;
  __IOM uint32_t  EVENTS_RXDRDY;
  __IM  uint32_t  RESERVED2[4];
  __IOM uint32_t  EVENTS_TXDRDY;
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  EVENTS_ERROR;
  __IM  uint32_t  RESERVED4[7];
  __IOM uint32_t  EVENTS_RXTO;
  __IM  uint32_t  RESERVED5[46];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED6[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED7[93];
  __IOM uint32_t  ERRORSRC;                     /*!< (@ 0x00000480) Error source. Write error field to 1 to clear
                                                                    error.                                                     */
  __IM  uint32_t  RESERVED8[31];
  __IOM uint32_t  ENABLE;
  __IM  uint32_t  RESERVED9;
  __IOM uint32_t  PSELRTS;
  __IOM uint32_t  PSELTXD;
  __IOM uint32_t  PSELCTS;
  __IOM uint32_t  PSELRXD;
  __IM  uint32_t  RXD;                          /*!< (@ 0x00000518) RXD register. On read action the buffer pointer
                                                                    is displaced. Once read the character is
                                                                    consumed. If read when no character available,
                                                                    the UART will stop working.                                */
  __OM  uint32_t  TXD;
  __IM  uint32_t  RESERVED10;
  __IOM uint32_t  BAUDRATE;
  __IM  uint32_t  RESERVED11[17];
  __IOM uint32_t  CONFIG;                       /*!< (@ 0x0000056C) Configuration of parity and hardware flow control
                                                                    register.                                                  */
  __IM  uint32_t  RESERVED12[675];
  __IOM uint32_t  POWER;
} NRF_UART_Type;



/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI master 0. (SPI0)
  */

typedef struct {
  __IM  uint32_t  RESERVED[66];
  __IOM uint32_t  EVENTS_READY;
  __IM  uint32_t  RESERVED1[126];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED2[125];
  __IOM uint32_t  ENABLE;
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  PSELSCK;
  __IOM uint32_t  PSELMOSI;
  __IOM uint32_t  PSELMISO;
  __IM  uint32_t  RESERVED4;
  __IM  uint32_t  RXD;
  __IOM uint32_t  TXD;
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  FREQUENCY;
  __IM  uint32_t  RESERVED6[11];
  __IOM uint32_t  CONFIG;
  __IM  uint32_t  RESERVED7[681];
  __IOM uint32_t  POWER;
} NRF_SPI_Type;



/* =========================================================================================================================== */
/* ================                                           TWI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Two-wire interface master 0. (TWI0)
  */

typedef struct {
  __OM  uint32_t  TASKS_STARTRX;
  __IM  uint32_t  RESERVED;
  __OM  uint32_t  TASKS_STARTTX;
  __IM  uint32_t  RESERVED1[2];
  __OM  uint32_t  TASKS_STOP;
  __IM  uint32_t  RESERVED2;
  __OM  uint32_t  TASKS_SUSPEND;
  __OM  uint32_t  TASKS_RESUME;
  __IM  uint32_t  RESERVED3[56];
  __IOM uint32_t  EVENTS_STOPPED;
  __IOM uint32_t  EVENTS_RXDREADY;
  __IM  uint32_t  RESERVED4[4];
  __IOM uint32_t  EVENTS_TXDSENT;
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  EVENTS_ERROR;
  __IM  uint32_t  RESERVED6[4];
  __IOM uint32_t  EVENTS_BB;
  __IM  uint32_t  RESERVED7[3];
  __IOM uint32_t  EVENTS_SUSPENDED;
  __IM  uint32_t  RESERVED8[45];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED9[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED10[110];
  __IOM uint32_t  ERRORSRC;                     /*!< (@ 0x000004C4) Two-wire error source. Write error field to 1
                                                                    to clear error.                                            */
  __IM  uint32_t  RESERVED11[14];
  __IOM uint32_t  ENABLE;
  __IM  uint32_t  RESERVED12;
  __IOM uint32_t  PSELSCL;
  __IOM uint32_t  PSELSDA;
  __IM  uint32_t  RESERVED13[2];
  __IM  uint32_t  RXD;
  __IOM uint32_t  TXD;
  __IM  uint32_t  RESERVED14;
  __IOM uint32_t  FREQUENCY;
  __IM  uint32_t  RESERVED15[24];
  __IOM uint32_t  ADDRESS;
  __IM  uint32_t  RESERVED16[668];
  __IOM uint32_t  POWER;
} NRF_TWI_Type;



/* =========================================================================================================================== */
/* ================                                           SPIS1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI slave 1. (SPIS1)
  */

typedef struct {
  __IM  uint32_t  RESERVED[9];
  __OM  uint32_t  TASKS_ACQUIRE;
  __OM  uint32_t  TASKS_RELEASE;
  __IM  uint32_t  RESERVED1[54];
  __IOM uint32_t  EVENTS_END;
  __IM  uint32_t  RESERVED2[2];
  __IOM uint32_t  EVENTS_ENDRX;
  __IM  uint32_t  RESERVED3[5];
  __IOM uint32_t  EVENTS_ACQUIRED;
  __IM  uint32_t  RESERVED4[53];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED5[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED6[61];
  __IM  uint32_t  SEMSTAT;
  __IM  uint32_t  RESERVED7[15];
  __IOM uint32_t  STATUS;
  __IM  uint32_t  RESERVED8[47];
  __IOM uint32_t  ENABLE;
  __IM  uint32_t  RESERVED9;
  __IOM uint32_t  PSELSCK;
  __IOM uint32_t  PSELMISO;
  __IOM uint32_t  PSELMOSI;
  __IOM uint32_t  PSELCSN;
  __IM  uint32_t  RESERVED10[7];
  __IOM uint32_t  RXDPTR;
  __IOM uint32_t  MAXRX;
  __IM  uint32_t  AMOUNTRX;
  __IM  uint32_t  RESERVED11;
  __IOM uint32_t  TXDPTR;
  __IOM uint32_t  MAXTX;
  __IM  uint32_t  AMOUNTTX;
  __IM  uint32_t  RESERVED12;
  __IOM uint32_t  CONFIG;
  __IM  uint32_t  RESERVED13;
  __IOM uint32_t  DEF;
  __IM  uint32_t  RESERVED14[24];
  __IOM uint32_t  ORC;
  __IM  uint32_t  RESERVED15[654];
  __IOM uint32_t  POWER;
} NRF_SPIS_Type;



/* =========================================================================================================================== */
/* ================                                          GPIOTE                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO tasks and events. (GPIOTE)
  */

typedef struct {
  __OM  uint32_t  TASKS_OUT[4];
  __IM  uint32_t  RESERVED[60];
  __IOM uint32_t  EVENTS_IN[4];
  __IM  uint32_t  RESERVED1[27];
  __IOM uint32_t  EVENTS_PORT;
  __IM  uint32_t  RESERVED2[97];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED3[129];
  __IOM uint32_t  CONFIG[4];
  __IM  uint32_t  RESERVED4[695];
  __IOM uint32_t  POWER;
} NRF_GPIOTE_Type;



/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog to digital converter. (ADC)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __IM  uint32_t  RESERVED[62];
  __IOM uint32_t  EVENTS_END;
  __IM  uint32_t  RESERVED1[128];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED2[61];
  __IM  uint32_t  BUSY;
  __IM  uint32_t  RESERVED3[63];
  __IOM uint32_t  ENABLE;
  __IOM uint32_t  CONFIG;
  __IM  uint32_t  RESULT;
  __IM  uint32_t  RESERVED4[700];
  __IOM uint32_t  POWER;
} NRF_ADC_Type;



/* =========================================================================================================================== */
/* ================                                          TIMER0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer 0. (TIMER0)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __OM  uint32_t  TASKS_COUNT;
  __OM  uint32_t  TASKS_CLEAR;
  __OM  uint32_t  TASKS_SHUTDOWN;
  __IM  uint32_t  RESERVED[11];
  __OM  uint32_t  TASKS_CAPTURE[4];
  __IM  uint32_t  RESERVED1[60];
  __IOM uint32_t  EVENTS_COMPARE[4];
  __IM  uint32_t  RESERVED2[44];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED3[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED4[126];
  __IOM uint32_t  MODE;
  __IOM uint32_t  BITMODE;
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  PRESCALER;                    /*!< (@ 0x00000510) 4-bit prescaler to source clock frequency (max
                                                                    value 9). Source clock frequency is divided
                                                                    by 2^SCALE.                                                */
  __IM  uint32_t  RESERVED6[11];
  __IOM uint32_t  CC[4];
  __IM  uint32_t  RESERVED7[683];
  __IOM uint32_t  POWER;
} NRF_TIMER_Type;



/* =========================================================================================================================== */
/* ================                                           RTC0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real time counter 0. (RTC0)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __OM  uint32_t  TASKS_CLEAR;
  __OM  uint32_t  TASKS_TRIGOVRFLW;
  __IM  uint32_t  RESERVED[60];
  __IOM uint32_t  EVENTS_TICK;
  __IOM uint32_t  EVENTS_OVRFLW;
  __IM  uint32_t  RESERVED1[14];
  __IOM uint32_t  EVENTS_COMPARE[4];
  __IM  uint32_t  RESERVED2[109];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED3[13];
  __IOM uint32_t  EVTEN;                        /*!< (@ 0x00000340) Configures event enable routing to PPI for each
                                                                    RTC event.                                                 */
  __IOM uint32_t  EVTENSET;                     /*!< (@ 0x00000344) Enable events routing to PPI. The reading of
                                                                    this register gives the value of EVTEN.                    */
  __IOM uint32_t  EVTENCLR;                     /*!< (@ 0x00000348) Disable events routing to PPI. The reading of
                                                                    this register gives the value of EVTEN.                    */
  __IM  uint32_t  RESERVED4[110];
  __IM  uint32_t  COUNTER;
  __IOM uint32_t  PRESCALER;                    /*!< (@ 0x00000508) 12-bit prescaler for COUNTER frequency (32768/(PRESCALER+1)).
                                                                    Must be written when RTC is STOPed.                        */
  __IM  uint32_t  RESERVED5[13];
  __IOM uint32_t  CC[4];
  __IM  uint32_t  RESERVED6[683];
  __IOM uint32_t  POWER;
} NRF_RTC_Type;



/* =========================================================================================================================== */
/* ================                                           TEMP                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Temperature Sensor. (TEMP)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __IM  uint32_t  RESERVED[62];
  __IOM uint32_t  EVENTS_DATARDY;               /*!< (@ 0x00000100) Temperature measurement complete, data ready
                                                                    event.                                                     */
  __IM  uint32_t  RESERVED1[128];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED2[127];
  __IM  int32_t   TEMP;                         /*!< (@ 0x00000508) Die temperature in degC, 2's complement format,
                                                                    0.25 degC pecision.                                        */
  __IM  uint32_t  RESERVED3[700];
  __IOM uint32_t  POWER;
} NRF_TEMP_Type;



/* =========================================================================================================================== */
/* ================                                            RNG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Random Number Generator. (RNG)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __IM  uint32_t  RESERVED[62];
  __IOM uint32_t  EVENTS_VALRDY;                /*!< (@ 0x00000100) New random number generated and written to VALUE
                                                                    register.                                                  */
  __IM  uint32_t  RESERVED1[63];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED2[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED3[126];
  __IOM uint32_t  CONFIG;
  __IM  uint32_t  VALUE;
  __IM  uint32_t  RESERVED4[700];
  __IOM uint32_t  POWER;
} NRF_RNG_Type;



/* =========================================================================================================================== */
/* ================                                            ECB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief AES ECB Mode Encryption. (ECB)
  */

typedef struct {
  __OM  uint32_t  TASKS_STARTECB;               /*!< (@ 0x00000000) Start ECB block encrypt. If a crypto operation
                                                                    is running, this will not initiate a new
                                                                    encryption and the ERRORECB event will be
                                                                    triggered.                                                 */
  __OM  uint32_t  TASKS_STOPECB;                /*!< (@ 0x00000004) Stop current ECB encryption. If a crypto operation
                                                                    is running, this will will trigger the ERRORECB
                                                                    event.                                                     */
  __IM  uint32_t  RESERVED[62];
  __IOM uint32_t  EVENTS_ENDECB;
  __IOM uint32_t  EVENTS_ERRORECB;              /*!< (@ 0x00000104) ECB block encrypt aborted due to a STOPECB task
                                                                    or due to an error.                                        */
  __IM  uint32_t  RESERVED1[127];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED2[126];
  __IOM uint32_t  ECBDATAPTR;
  __IM  uint32_t  RESERVED3[701];
  __IOM uint32_t  POWER;
} NRF_ECB_Type;



/* =========================================================================================================================== */
/* ================                                            AAR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Accelerated Address Resolver. (AAR)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start resolving addresses based on IRKs specified
                                                                    in the IRK data structure.                                 */
  __IM  uint32_t  RESERVED;
  __OM  uint32_t  TASKS_STOP;
  __IM  uint32_t  RESERVED1[61];
  __IOM uint32_t  EVENTS_END;
  __IOM uint32_t  EVENTS_RESOLVED;
  __IOM uint32_t  EVENTS_NOTRESOLVED;
  __IM  uint32_t  RESERVED2[126];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED3[61];
  __IM  uint32_t  STATUS;
  __IM  uint32_t  RESERVED4[63];
  __IOM uint32_t  ENABLE;
  __IOM uint32_t  NIRK;                         /*!< (@ 0x00000504) Number of Identity root Keys in the IRK data
                                                                    structure.                                                 */
  __IOM uint32_t  IRKPTR;
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  ADDRPTR;
  __IOM uint32_t  SCRATCHPTR;                   /*!< (@ 0x00000514) Pointer to a scratch data area used for temporary
                                                                    storage during resolution. A minimum of
                                                                    3 bytes must be reserved.                                  */
  __IM  uint32_t  RESERVED6[697];
  __IOM uint32_t  POWER;
} NRF_AAR_Type;



/* =========================================================================================================================== */
/* ================                                            CCM                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief AES CCM Mode Encryption. (CCM)
  */

typedef struct {
  __OM  uint32_t  TASKS_KSGEN;                  /*!< (@ 0x00000000) Start generation of key-stream. This operation
                                                                    will stop by itself when completed.                        */
  __OM  uint32_t  TASKS_CRYPT;                  /*!< (@ 0x00000004) Start encrypt/decrypt. This operation will stop
                                                                    by itself when completed.                                  */
  __OM  uint32_t  TASKS_STOP;
  __IM  uint32_t  RESERVED[61];
  __IOM uint32_t  EVENTS_ENDKSGEN;
  __IOM uint32_t  EVENTS_ENDCRYPT;
  __IOM uint32_t  EVENTS_ERROR;
  __IM  uint32_t  RESERVED1[61];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED2[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED3[61];
  __IM  uint32_t  MICSTATUS;
  __IM  uint32_t  RESERVED4[63];
  __IOM uint32_t  ENABLE;
  __IOM uint32_t  MODE;
  __IOM uint32_t  CNFPTR;                       /*!< (@ 0x00000508) Pointer to a data structure holding AES key and
                                                                    NONCE vector.                                              */
  __IOM uint32_t  INPTR;
  __IOM uint32_t  OUTPTR;
  __IOM uint32_t  SCRATCHPTR;                   /*!< (@ 0x00000514) Pointer to a scratch data area used for temporary
                                                                    storage during resolution. A minimum of
                                                                    43 bytes must be reserved.                                 */
  __IM  uint32_t  RESERVED5[697];
  __IOM uint32_t  POWER;
} NRF_CCM_Type;



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Watchdog Timer. (WDT)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;
  __IM  uint32_t  RESERVED[63];
  __IOM uint32_t  EVENTS_TIMEOUT;
  __IM  uint32_t  RESERVED1[128];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED2[61];
  __IM  uint32_t  RUNSTATUS;
  __IM  uint32_t  REQSTATUS;
  __IM  uint32_t  RESERVED3[63];
  __IOM uint32_t  CRV;                          /*!< (@ 0x00000504) Counter reload value in number of 32kiHz clock
                                                                    cycles.                                                    */
  __IOM uint32_t  RREN;
  __IOM uint32_t  CONFIG;
  __IM  uint32_t  RESERVED4[60];
  __OM  uint32_t  RR[8];
  __IM  uint32_t  RESERVED5[631];
  __IOM uint32_t  POWER;
} NRF_WDT_Type;



/* =========================================================================================================================== */
/* ================                                           QDEC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Rotary decoder. (QDEC)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __OM  uint32_t  TASKS_READCLRACC;             /*!< (@ 0x00000008) Transfers the content from ACC registers to ACCREAD
                                                                    registers, and clears the ACC registers.                   */
  __IM  uint32_t  RESERVED[61];
  __IOM uint32_t  EVENTS_SAMPLERDY;
  __IOM uint32_t  EVENTS_REPORTRDY;             /*!< (@ 0x00000104) REPORTPER number of samples accumulated in ACC
                                                                    register, and ACC register different than
                                                                    zero.                                                      */
  __IOM uint32_t  EVENTS_ACCOF;
  __IM  uint32_t  RESERVED1[61];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED2[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED3[125];
  __IOM uint32_t  ENABLE;
  __IOM uint32_t  LEDPOL;
  __IOM uint32_t  SAMPLEPER;
  __IM  int32_t   SAMPLE;
  __IOM uint32_t  REPORTPER;
  __IM  int32_t   ACC;
  __IM  int32_t   ACCREAD;                      /*!< (@ 0x00000518) Snapshot of ACC register. Value generated by
                                                                    the TASKS_READCLEACC task.                                 */
  __IOM uint32_t  PSELLED;
  __IOM uint32_t  PSELA;
  __IOM uint32_t  PSELB;
  __IOM uint32_t  DBFEN;
  __IM  uint32_t  RESERVED4[5];
  __IOM uint32_t  LEDPRE;
  __IM  uint32_t  ACCDBL;
  __IM  uint32_t  ACCDBLREAD;                   /*!< (@ 0x00000548) Snapshot of ACCDBL register. Value generated
                                                                    by the TASKS_READCLEACC task.                              */
  __IM  uint32_t  RESERVED5[684];
  __IOM uint32_t  POWER;
} NRF_QDEC_Type;



/* =========================================================================================================================== */
/* ================                                          LPCOMP                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Low power comparator. (LPCOMP)
  */

typedef struct {
  __OM  uint32_t  TASKS_START;
  __OM  uint32_t  TASKS_STOP;
  __OM  uint32_t  TASKS_SAMPLE;
  __IM  uint32_t  RESERVED[61];
  __IOM uint32_t  EVENTS_READY;
  __IOM uint32_t  EVENTS_DOWN;
  __IOM uint32_t  EVENTS_UP;
  __IOM uint32_t  EVENTS_CROSS;
  __IM  uint32_t  RESERVED1[60];
  __IOM uint32_t  SHORTS;
  __IM  uint32_t  RESERVED2[64];
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IM  uint32_t  RESERVED3[61];
  __IM  uint32_t  RESULT;
  __IM  uint32_t  RESERVED4[63];
  __IOM uint32_t  ENABLE;
  __IOM uint32_t  PSEL;
  __IOM uint32_t  REFSEL;
  __IOM uint32_t  EXTREFSEL;
  __IM  uint32_t  RESERVED5[4];
  __IOM uint32_t  ANADETECT;
  __IM  uint32_t  RESERVED6[694];
  __IOM uint32_t  POWER;
} NRF_LPCOMP_Type;



/* =========================================================================================================================== */
/* ================                                            SWI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SW Interrupts. (SWI)
  */

typedef struct {
  __IM  uint32_t  UNUSED;
} NRF_SWI_Type;



/* =========================================================================================================================== */
/* ================                                           NVMC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Non Volatile Memory Controller. (NVMC)
  */

typedef struct {
  __IM  uint32_t  RESERVED[256];
  __IM  uint32_t  READY;
  __IM  uint32_t  RESERVED1[64];
  __IOM uint32_t  CONFIG;
  
  union {
    __IOM uint32_t ERASEPAGE;                   /*!< (@ 0x00000508) Register for erasing a non-protected non-volatile
                                                                    memory page.                                               */
    __IOM uint32_t ERASEPCR1;                   /*!< (@ 0x00000508) Register for erasing a non-protected non-volatile
                                                                    memory page.                                               */
  };
  __IOM uint32_t  ERASEALL;
  __IOM uint32_t  ERASEPCR0;                    /*!< (@ 0x00000510) Register for erasing a protected non-volatile
                                                                    memory page.                                               */
  __IOM uint32_t  ERASEUICR;                    /*!< (@ 0x00000514) Register for start erasing User Information Congfiguration
                                                                    Registers.                                                 */
} NRF_NVMC_Type;



/* =========================================================================================================================== */
/* ================                                            PPI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief PPI controller. (PPI)
  */

typedef struct {
  __IOM PPI_TASKS_CHG_Type TASKS_CHG[4];
  __IM  uint32_t  RESERVED[312];
  __IOM uint32_t  CHEN;
  __IOM uint32_t  CHENSET;
  __IOM uint32_t  CHENCLR;
  __IM  uint32_t  RESERVED1;
  __IOM PPI_CH_Type CH[16];
  __IM  uint32_t  RESERVED2[156];
  __IOM uint32_t  CHG[4];
} NRF_PPI_Type;



/* =========================================================================================================================== */
/* ================                                           FICR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Factory Information Configuration. (FICR)
  */

typedef struct {
  __IM  uint32_t  RESERVED[4];
  __IM  uint32_t  CODEPAGESIZE;
  __IM  uint32_t  CODESIZE;
  __IM  uint32_t  RESERVED1[4];
  __IM  uint32_t  CLENR0;
  __IM  uint32_t  PPFC;
  __IM  uint32_t  RESERVED2;
  __IM  uint32_t  NUMRAMBLOCK;
  
  union {
    __IM  uint32_t SIZERAMBLOCKS;
    __IM  uint32_t SIZERAMBLOCK[4];             /*!< (@ 0x00000038) Deprecated array of size of RAM block in bytes.
                                                                    This name is kept for backward compatinility
                                                                    purposes. Use SIZERAMBLOCKS instead.                       */
  };
  __IM  uint32_t  RESERVED3[5];
  __IM  uint32_t  CONFIGID;
  __IM  uint32_t  DEVICEID[2];
  __IM  uint32_t  RESERVED4[6];
  __IM  uint32_t  ER[4];
  __IM  uint32_t  IR[4];
  __IM  uint32_t  DEVICEADDRTYPE;
  __IM  uint32_t  DEVICEADDR[2];
  __IM  uint32_t  OVERRIDEEN;
  __IM  uint32_t  NRF_1MBIT[5];                 /*!< (@ 0x000000B0) Override values for the OVERRIDEn registers in
                                                                    RADIO for NRF_1Mbit mode.                                  */
  __IM  uint32_t  RESERVED5[10];
  __IM  uint32_t  BLE_1MBIT[5];                 /*!< (@ 0x000000EC) Override values for the OVERRIDEn registers in
                                                                    RADIO for BLE_1Mbit mode.                                  */
} NRF_FICR_Type;



/* =========================================================================================================================== */
/* ================                                           UICR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief User Information Configuration. (UICR)
  */

typedef struct {
  __IOM uint32_t  CLENR0;
  __IOM uint32_t  RBPCONF;
  __IOM uint32_t  XTALFREQ;
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  FWID;
  
  union {
    __IOM uint32_t BOOTLOADERADDR;
    __IOM uint32_t NRFFW[15];
  };
  __IOM uint32_t  NRFHW[12];
  __IOM uint32_t  CUSTOMER[32];
} NRF_UICR_Type;



/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose input and output. (GPIO)
  */

typedef struct {
  __IM  uint32_t  RESERVED[321];
  __IOM uint32_t  OUT;
  __IOM uint32_t  OUTSET;
  __IOM uint32_t  OUTCLR;
  __IM  uint32_t  IN;
  __IOM uint32_t  DIR;
  __IOM uint32_t  DIRSET;
  __IOM uint32_t  DIRCLR;
  __IM  uint32_t  RESERVED1[120];
  __IOM uint32_t  PIN_CNF[32];
} NRF_GPIO_Type;


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define NRF_POWER_BASE              0x40000000UL
#define NRF_CLOCK_BASE              0x40000000UL
#define NRF_MPU_BASE                0x40000000UL
#define NRF_RADIO_BASE              0x40001000UL
#define NRF_UART0_BASE              0x40002000UL
#define NRF_SPI0_BASE               0x40003000UL
#define NRF_TWI0_BASE               0x40003000UL
#define NRF_SPI1_BASE               0x40004000UL
#define NRF_TWI1_BASE               0x40004000UL
#define NRF_SPIS1_BASE              0x40004000UL
#define NRF_GPIOTE_BASE             0x40006000UL
#define NRF_ADC_BASE                0x40007000UL
#define NRF_TIMER0_BASE             0x40008000UL
#define NRF_TIMER1_BASE             0x40009000UL
#define NRF_TIMER2_BASE             0x4000A000UL
#define NRF_RTC0_BASE               0x4000B000UL
#define NRF_TEMP_BASE               0x4000C000UL
#define NRF_RNG_BASE                0x4000D000UL
#define NRF_ECB_BASE                0x4000E000UL
#define NRF_AAR_BASE                0x4000F000UL
#define NRF_CCM_BASE                0x4000F000UL
#define NRF_WDT_BASE                0x40010000UL
#define NRF_RTC1_BASE               0x40011000UL
#define NRF_QDEC_BASE               0x40012000UL
#define NRF_LPCOMP_BASE             0x40013000UL
#define NRF_SWI_BASE                0x40014000UL
#define NRF_NVMC_BASE               0x4001E000UL
#define NRF_PPI_BASE                0x4001F000UL
#define NRF_FICR_BASE               0x10000000UL
#define NRF_UICR_BASE               0x10001000UL
#define NRF_GPIO_BASE               0x50000000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define NRF_POWER                   ((NRF_POWER_Type*)         NRF_POWER_BASE)
#define NRF_CLOCK                   ((NRF_CLOCK_Type*)         NRF_CLOCK_BASE)
#define NRF_MPU                     ((NRF_MPU_Type*)           NRF_MPU_BASE)
#define NRF_RADIO                   ((NRF_RADIO_Type*)         NRF_RADIO_BASE)
#define NRF_UART0                   ((NRF_UART_Type*)          NRF_UART0_BASE)
#define NRF_SPI0                    ((NRF_SPI_Type*)           NRF_SPI0_BASE)
#define NRF_TWI0                    ((NRF_TWI_Type*)           NRF_TWI0_BASE)
#define NRF_SPI1                    ((NRF_SPI_Type*)           NRF_SPI1_BASE)
#define NRF_TWI1                    ((NRF_TWI_Type*)           NRF_TWI1_BASE)
#define NRF_SPIS1                   ((NRF_SPIS_Type*)          NRF_SPIS1_BASE)
#define NRF_GPIOTE                  ((NRF_GPIOTE_Type*)        NRF_GPIOTE_BASE)
#define NRF_ADC                     ((NRF_ADC_Type*)           NRF_ADC_BASE)
#define NRF_TIMER0                  ((NRF_TIMER_Type*)         NRF_TIMER0_BASE)
#define NRF_TIMER1                  ((NRF_TIMER_Type*)         NRF_TIMER1_BASE)
#define NRF_TIMER2                  ((NRF_TIMER_Type*)         NRF_TIMER2_BASE)
#define NRF_RTC0                    ((NRF_RTC_Type*)           NRF_RTC0_BASE)
#define NRF_TEMP                    ((NRF_TEMP_Type*)          NRF_TEMP_BASE)
#define NRF_RNG                     ((NRF_RNG_Type*)           NRF_RNG_BASE)
#define NRF_ECB                     ((NRF_ECB_Type*)           NRF_ECB_BASE)
#define NRF_AAR                     ((NRF_AAR_Type*)           NRF_AAR_BASE)
#define NRF_CCM                     ((NRF_CCM_Type*)           NRF_CCM_BASE)
#define NRF_WDT                     ((NRF_WDT_Type*)           NRF_WDT_BASE)
#define NRF_RTC1                    ((NRF_RTC_Type*)           NRF_RTC1_BASE)
#define NRF_QDEC                    ((NRF_QDEC_Type*)          NRF_QDEC_BASE)
#define NRF_LPCOMP                  ((NRF_LPCOMP_Type*)        NRF_LPCOMP_BASE)
#define NRF_SWI                     ((NRF_SWI_Type*)           NRF_SWI_BASE)
#define NRF_NVMC                    ((NRF_NVMC_Type*)          NRF_NVMC_BASE)
#define NRF_PPI                     ((NRF_PPI_Type*)           NRF_PPI_BASE)
#define NRF_FICR                    ((NRF_FICR_Type*)          NRF_FICR_BASE)
#define NRF_UICR                    ((NRF_UICR_Type*)          NRF_UICR_BASE)
#define NRF_GPIO                    ((NRF_GPIO_Type*)          NRF_GPIO_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


#ifdef __cplusplus
}
#endif

#endif /* NRF51_H */


/** @} */ /* End of group nrf51 */

/** @} */ /* End of group Nordic Semiconductor */
