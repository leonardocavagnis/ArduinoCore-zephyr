/*

Copyright (c) 2010 - 2025, Nordic Semiconductor ASA All rights reserved.

SPDX-License-Identifier: BSD-3-Clause

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. Neither the name of Nordic Semiconductor ASA nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

*/

#ifndef NRF54LV10A_ENGA_TYPES_H
#define NRF54LV10A_ENGA_TYPES_H

#ifdef __cplusplus
    extern "C" {
#endif

#include <stdint.h>
#include "compiler_abstraction.h"


/* ============================================ Include required type specifiers ============================================= */

#ifndef __I
  #ifdef __cplusplus
    #define __I     volatile
  #else
    #define __I     volatile const
  #endif
#endif
#ifndef __O
  #define __O     volatile
#endif
#ifndef __IO
  #define __IO    volatile
#endif

/* The following defines should be used for structure members */
#ifndef __IM
  #define __IM     volatile const
#endif
#ifndef __OM
  #define __OM     volatile
#endif
#ifndef __IOM
  #define __IOM    volatile
#endif

/* ======================================================= Domain IDs ======================================================== */
/**
  * @brief (unspecified)
  */
typedef enum {
  NRF_DOMAIN_NONE                            = 0,
} NRF_DOMAINID_Type;

/* ====================================================== Processor IDs ====================================================== */
/**
  * @brief (unspecified)
  */
typedef enum {
  NRF_PROCESSOR_CM33                         = 1,
  NRF_PROCESSOR_VPR                          = 2,
} NRF_PROCESSORID_Type;

/* ======================================================== Owner IDs ======================================================== */
/**
  * @brief (unspecified)
  */
typedef enum {
  NRF_OWNER_NONE                             = 0,
  NRF_OWNER_APPLICATION                      = 1,
  NRF_OWNER_KMU                              = 2,
} NRF_OWNERID_Type;


/* ========================================= Start of section using anonymous unions ========================================= */

#include "compiler_abstraction.h"

#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Unsupported compiler type
#endif

/* =========================================================================================================================== */
/* ================                                    Peripherals Section                                    ================ */
/* =========================================================================================================================== */


/* =========================================================================================================================== */
/* ================                                            AAR                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ====================================================== Struct AAR_IN ====================================================== */
/**
  * @brief IN [AAR_IN] IN EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;
} NRF_AAR_IN_Type;

/* AAR_IN_PTR: Input pointer */
  #define AAR_IN_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Points to a job list containing AAR data structure */
  #define AAR_IN_PTR_PTR_Pos (0UL)
  #define AAR_IN_PTR_PTR_Msk (0xFFFFFFFFUL << AAR_IN_PTR_PTR_Pos)



/* ===================================================== Struct AAR_OUT ====================================================== */
/**
  * @brief OUT [AAR_OUT] OUT EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IM  uint32_t  AMOUNT;
} NRF_AAR_OUT_Type;

/* AAR_OUT_PTR: Output pointer */
  #define AAR_OUT_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Output pointer */
  #define AAR_OUT_PTR_PTR_Pos (0UL)
  #define AAR_OUT_PTR_PTR_Msk (0xFFFFFFFFUL << AAR_OUT_PTR_PTR_Pos)


/* AAR_OUT_AMOUNT: Number of bytes transferred in the last transaction */
  #define AAR_OUT_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..7 : Number of bytes written to memory after triggering the START task. */
  #define AAR_OUT_AMOUNT_AMOUNT_Pos (0UL)
  #define AAR_OUT_AMOUNT_AMOUNT_Msk (0xFFUL << AAR_OUT_AMOUNT_AMOUNT_Pos)
  #define AAR_OUT_AMOUNT_AMOUNT_Min (0x01UL)
  #define AAR_OUT_AMOUNT_AMOUNT_Max (0xFFUL)


/* ======================================================= Struct AAR ======================================================== */
/**
  * @brief Accelerated Address Resolver
  */
  typedef struct {
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Start resolving addresses based on IRKs specified in
                                                                         the IRK data structure*/
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_END;                       /*!< (@ 0x00000100) Address resolution procedure complete or ended due to
                                                                         an error*/
    __IOM uint32_t EVENTS_RESOLVED;
    __IOM uint32_t EVENTS_NOTRESOLVED;
    __IOM uint32_t EVENTS_ERROR;                     /*!< (@ 0x0000010C) Operation aborted because of a STOP task or due to an
                                                                         error*/
    __IM uint32_t RESERVED2[28];
    __IOM uint32_t PUBLISH_END;
    __IOM uint32_t PUBLISH_RESOLVED;
    __IOM uint32_t PUBLISH_NOTRESOLVED;
    __IOM uint32_t PUBLISH_ERROR;
    __IM uint32_t RESERVED3[93];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED4[62];
    __IM uint32_t ERRORSTATUS;
    __IM uint32_t RESERVED5[62];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED6;
    __IOM uint32_t MAXRESOLVED;
    __IM uint32_t RESERVED7[9];
    __IOM NRF_AAR_IN_Type IN;
    __IM uint32_t RESERVED8;
    __IOM NRF_AAR_OUT_Type OUT;
  } NRF_AAR_Type;

/* AAR_TASKS_START: Start resolving addresses based on IRKs specified in the IRK data structure */
  #define AAR_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start resolving addresses based on IRKs specified in the IRK data structure */
  #define AAR_TASKS_START_TASKS_START_Pos (0UL)
  #define AAR_TASKS_START_TASKS_START_Msk (0x1UL << AAR_TASKS_START_TASKS_START_Pos)
  #define AAR_TASKS_START_TASKS_START_Min (0x1UL)
  #define AAR_TASKS_START_TASKS_START_Max (0x1UL)
  #define AAR_TASKS_START_TASKS_START_Trigger (0x1UL)


/* AAR_TASKS_STOP: Stop resolving addresses */
  #define AAR_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop resolving addresses */
  #define AAR_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define AAR_TASKS_STOP_TASKS_STOP_Msk (0x1UL << AAR_TASKS_STOP_TASKS_STOP_Pos)
  #define AAR_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define AAR_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define AAR_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* AAR_SUBSCRIBE_START: Subscribe configuration for task START */
  #define AAR_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define AAR_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define AAR_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << AAR_SUBSCRIBE_START_CHIDX_Pos)
  #define AAR_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define AAR_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define AAR_SUBSCRIBE_START_EN_Pos (31UL)
  #define AAR_SUBSCRIBE_START_EN_Msk (0x1UL << AAR_SUBSCRIBE_START_EN_Pos)
  #define AAR_SUBSCRIBE_START_EN_Min (0x0UL)
  #define AAR_SUBSCRIBE_START_EN_Max (0x1UL)
  #define AAR_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define AAR_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* AAR_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define AAR_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define AAR_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define AAR_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << AAR_SUBSCRIBE_STOP_CHIDX_Pos)
  #define AAR_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define AAR_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define AAR_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define AAR_SUBSCRIBE_STOP_EN_Msk (0x1UL << AAR_SUBSCRIBE_STOP_EN_Pos)
  #define AAR_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define AAR_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define AAR_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define AAR_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* AAR_EVENTS_END: Address resolution procedure complete or ended due to an error */
  #define AAR_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : Address resolution procedure complete or ended due to an error */
  #define AAR_EVENTS_END_EVENTS_END_Pos (0UL)
  #define AAR_EVENTS_END_EVENTS_END_Msk (0x1UL << AAR_EVENTS_END_EVENTS_END_Pos)
  #define AAR_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define AAR_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define AAR_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define AAR_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* AAR_EVENTS_RESOLVED: Address resolved */
  #define AAR_EVENTS_RESOLVED_ResetValue (0x00000000UL)

/* EVENTS_RESOLVED @Bit 0 : Address resolved */
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Pos (0UL)
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Msk (0x1UL << AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Pos) /*!< Bit mask of
                                                                            EVENTS_RESOLVED field.*/
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Min (0x0UL)
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Max (0x1UL)
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_NotGenerated (0x0UL)
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Generated (0x1UL)


/* AAR_EVENTS_NOTRESOLVED: Address not resolved */
  #define AAR_EVENTS_NOTRESOLVED_ResetValue (0x00000000UL)

/* EVENTS_NOTRESOLVED @Bit 0 : Address not resolved */
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Pos (0UL)
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Msk (0x1UL << AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Pos) /*!< Bit mask
                                                                            of EVENTS_NOTRESOLVED field.*/
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Min (0x0UL)
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Max (0x1UL)
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_NotGenerated (0x0UL)
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Generated (0x1UL)


/* AAR_EVENTS_ERROR: Operation aborted because of a STOP task or due to an error */
  #define AAR_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : Operation aborted because of a STOP task or due to an error */
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << AAR_EVENTS_ERROR_EVENTS_ERROR_Pos)
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* AAR_PUBLISH_END: Publish configuration for event END */
  #define AAR_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define AAR_PUBLISH_END_CHIDX_Pos (0UL)
  #define AAR_PUBLISH_END_CHIDX_Msk (0xFFUL << AAR_PUBLISH_END_CHIDX_Pos)
  #define AAR_PUBLISH_END_CHIDX_Min (0x00UL)
  #define AAR_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define AAR_PUBLISH_END_EN_Pos (31UL)
  #define AAR_PUBLISH_END_EN_Msk (0x1UL << AAR_PUBLISH_END_EN_Pos)
  #define AAR_PUBLISH_END_EN_Min (0x0UL)
  #define AAR_PUBLISH_END_EN_Max (0x1UL)
  #define AAR_PUBLISH_END_EN_Disabled (0x0UL)
  #define AAR_PUBLISH_END_EN_Enabled (0x1UL)


/* AAR_PUBLISH_RESOLVED: Publish configuration for event RESOLVED */
  #define AAR_PUBLISH_RESOLVED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RESOLVED will publish to */
  #define AAR_PUBLISH_RESOLVED_CHIDX_Pos (0UL)
  #define AAR_PUBLISH_RESOLVED_CHIDX_Msk (0xFFUL << AAR_PUBLISH_RESOLVED_CHIDX_Pos)
  #define AAR_PUBLISH_RESOLVED_CHIDX_Min (0x00UL)
  #define AAR_PUBLISH_RESOLVED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define AAR_PUBLISH_RESOLVED_EN_Pos (31UL)
  #define AAR_PUBLISH_RESOLVED_EN_Msk (0x1UL << AAR_PUBLISH_RESOLVED_EN_Pos)
  #define AAR_PUBLISH_RESOLVED_EN_Min (0x0UL)
  #define AAR_PUBLISH_RESOLVED_EN_Max (0x1UL)
  #define AAR_PUBLISH_RESOLVED_EN_Disabled (0x0UL)
  #define AAR_PUBLISH_RESOLVED_EN_Enabled (0x1UL)


/* AAR_PUBLISH_NOTRESOLVED: Publish configuration for event NOTRESOLVED */
  #define AAR_PUBLISH_NOTRESOLVED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event NOTRESOLVED will publish to */
  #define AAR_PUBLISH_NOTRESOLVED_CHIDX_Pos (0UL)
  #define AAR_PUBLISH_NOTRESOLVED_CHIDX_Msk (0xFFUL << AAR_PUBLISH_NOTRESOLVED_CHIDX_Pos)
  #define AAR_PUBLISH_NOTRESOLVED_CHIDX_Min (0x00UL)
  #define AAR_PUBLISH_NOTRESOLVED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define AAR_PUBLISH_NOTRESOLVED_EN_Pos (31UL)
  #define AAR_PUBLISH_NOTRESOLVED_EN_Msk (0x1UL << AAR_PUBLISH_NOTRESOLVED_EN_Pos)
  #define AAR_PUBLISH_NOTRESOLVED_EN_Min (0x0UL)
  #define AAR_PUBLISH_NOTRESOLVED_EN_Max (0x1UL)
  #define AAR_PUBLISH_NOTRESOLVED_EN_Disabled (0x0UL)
  #define AAR_PUBLISH_NOTRESOLVED_EN_Enabled (0x1UL)


/* AAR_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define AAR_PUBLISH_ERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define AAR_PUBLISH_ERROR_CHIDX_Pos (0UL)
  #define AAR_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << AAR_PUBLISH_ERROR_CHIDX_Pos)
  #define AAR_PUBLISH_ERROR_CHIDX_Min (0x00UL)
  #define AAR_PUBLISH_ERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define AAR_PUBLISH_ERROR_EN_Pos (31UL)
  #define AAR_PUBLISH_ERROR_EN_Msk (0x1UL << AAR_PUBLISH_ERROR_EN_Pos)
  #define AAR_PUBLISH_ERROR_EN_Min (0x0UL)
  #define AAR_PUBLISH_ERROR_EN_Max (0x1UL)
  #define AAR_PUBLISH_ERROR_EN_Disabled (0x0UL)
  #define AAR_PUBLISH_ERROR_EN_Enabled (0x1UL)


/* AAR_INTENSET: Enable interrupt */
  #define AAR_INTENSET_ResetValue (0x00000000UL)

/* END @Bit 0 : Write '1' to enable interrupt for event END */
  #define AAR_INTENSET_END_Pos (0UL)
  #define AAR_INTENSET_END_Msk (0x1UL << AAR_INTENSET_END_Pos)
  #define AAR_INTENSET_END_Min (0x0UL)
  #define AAR_INTENSET_END_Max (0x1UL)
  #define AAR_INTENSET_END_Set (0x1UL)
  #define AAR_INTENSET_END_Disabled (0x0UL)
  #define AAR_INTENSET_END_Enabled (0x1UL)

/* RESOLVED @Bit 1 : Write '1' to enable interrupt for event RESOLVED */
  #define AAR_INTENSET_RESOLVED_Pos (1UL)
  #define AAR_INTENSET_RESOLVED_Msk (0x1UL << AAR_INTENSET_RESOLVED_Pos)
  #define AAR_INTENSET_RESOLVED_Min (0x0UL)
  #define AAR_INTENSET_RESOLVED_Max (0x1UL)
  #define AAR_INTENSET_RESOLVED_Set (0x1UL)
  #define AAR_INTENSET_RESOLVED_Disabled (0x0UL)
  #define AAR_INTENSET_RESOLVED_Enabled (0x1UL)

/* NOTRESOLVED @Bit 2 : Write '1' to enable interrupt for event NOTRESOLVED */
  #define AAR_INTENSET_NOTRESOLVED_Pos (2UL)
  #define AAR_INTENSET_NOTRESOLVED_Msk (0x1UL << AAR_INTENSET_NOTRESOLVED_Pos)
  #define AAR_INTENSET_NOTRESOLVED_Min (0x0UL)
  #define AAR_INTENSET_NOTRESOLVED_Max (0x1UL)
  #define AAR_INTENSET_NOTRESOLVED_Set (0x1UL)
  #define AAR_INTENSET_NOTRESOLVED_Disabled (0x0UL)
  #define AAR_INTENSET_NOTRESOLVED_Enabled (0x1UL)

/* ERROR @Bit 3 : Write '1' to enable interrupt for event ERROR */
  #define AAR_INTENSET_ERROR_Pos (3UL)
  #define AAR_INTENSET_ERROR_Msk (0x1UL << AAR_INTENSET_ERROR_Pos)
  #define AAR_INTENSET_ERROR_Min (0x0UL)
  #define AAR_INTENSET_ERROR_Max (0x1UL)
  #define AAR_INTENSET_ERROR_Set (0x1UL)
  #define AAR_INTENSET_ERROR_Disabled (0x0UL)
  #define AAR_INTENSET_ERROR_Enabled (0x1UL)


/* AAR_INTENCLR: Disable interrupt */
  #define AAR_INTENCLR_ResetValue (0x00000000UL)

/* END @Bit 0 : Write '1' to disable interrupt for event END */
  #define AAR_INTENCLR_END_Pos (0UL)
  #define AAR_INTENCLR_END_Msk (0x1UL << AAR_INTENCLR_END_Pos)
  #define AAR_INTENCLR_END_Min (0x0UL)
  #define AAR_INTENCLR_END_Max (0x1UL)
  #define AAR_INTENCLR_END_Clear (0x1UL)
  #define AAR_INTENCLR_END_Disabled (0x0UL)
  #define AAR_INTENCLR_END_Enabled (0x1UL)

/* RESOLVED @Bit 1 : Write '1' to disable interrupt for event RESOLVED */
  #define AAR_INTENCLR_RESOLVED_Pos (1UL)
  #define AAR_INTENCLR_RESOLVED_Msk (0x1UL << AAR_INTENCLR_RESOLVED_Pos)
  #define AAR_INTENCLR_RESOLVED_Min (0x0UL)
  #define AAR_INTENCLR_RESOLVED_Max (0x1UL)
  #define AAR_INTENCLR_RESOLVED_Clear (0x1UL)
  #define AAR_INTENCLR_RESOLVED_Disabled (0x0UL)
  #define AAR_INTENCLR_RESOLVED_Enabled (0x1UL)

/* NOTRESOLVED @Bit 2 : Write '1' to disable interrupt for event NOTRESOLVED */
  #define AAR_INTENCLR_NOTRESOLVED_Pos (2UL)
  #define AAR_INTENCLR_NOTRESOLVED_Msk (0x1UL << AAR_INTENCLR_NOTRESOLVED_Pos)
  #define AAR_INTENCLR_NOTRESOLVED_Min (0x0UL)
  #define AAR_INTENCLR_NOTRESOLVED_Max (0x1UL)
  #define AAR_INTENCLR_NOTRESOLVED_Clear (0x1UL)
  #define AAR_INTENCLR_NOTRESOLVED_Disabled (0x0UL)
  #define AAR_INTENCLR_NOTRESOLVED_Enabled (0x1UL)

/* ERROR @Bit 3 : Write '1' to disable interrupt for event ERROR */
  #define AAR_INTENCLR_ERROR_Pos (3UL)
  #define AAR_INTENCLR_ERROR_Msk (0x1UL << AAR_INTENCLR_ERROR_Pos)
  #define AAR_INTENCLR_ERROR_Min (0x0UL)
  #define AAR_INTENCLR_ERROR_Max (0x1UL)
  #define AAR_INTENCLR_ERROR_Clear (0x1UL)
  #define AAR_INTENCLR_ERROR_Disabled (0x0UL)
  #define AAR_INTENCLR_ERROR_Enabled (0x1UL)


/* AAR_ERRORSTATUS: Error status */
  #define AAR_ERRORSTATUS_ResetValue (0x00000000UL)

/* ERRORSTATUS @Bits 0..2 : Error status when the ERROR event is generated */
  #define AAR_ERRORSTATUS_ERRORSTATUS_Pos (0UL)
  #define AAR_ERRORSTATUS_ERRORSTATUS_Msk (0x7UL << AAR_ERRORSTATUS_ERRORSTATUS_Pos)
  #define AAR_ERRORSTATUS_ERRORSTATUS_Min (0x0UL)
  #define AAR_ERRORSTATUS_ERRORSTATUS_Max (0x4UL)
  #define AAR_ERRORSTATUS_ERRORSTATUS_NoError (0x0UL)
  #define AAR_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd (0x1UL)
  #define AAR_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd (0x2UL)
  #define AAR_ERRORSTATUS_ERRORSTATUS_DmaError (0x4UL)


/* AAR_ENABLE: Enable AAR */
  #define AAR_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..1 : Enable or disable AAR */
  #define AAR_ENABLE_ENABLE_Pos (0UL)
  #define AAR_ENABLE_ENABLE_Msk (0x3UL << AAR_ENABLE_ENABLE_Pos)
  #define AAR_ENABLE_ENABLE_Min (0x0UL)
  #define AAR_ENABLE_ENABLE_Max (0x3UL)
  #define AAR_ENABLE_ENABLE_Disabled (0x0UL)
  #define AAR_ENABLE_ENABLE_Enabled (0x3UL)


/* AAR_MAXRESOLVED: Maximum number of IRKs to resolve */
  #define AAR_MAXRESOLVED_ResetValue (0x00000001UL)

/* MAXRESOLVED @Bits 0..11 : The maximum number of IRKs to resolve */
  #define AAR_MAXRESOLVED_MAXRESOLVED_Pos (0UL)
  #define AAR_MAXRESOLVED_MAXRESOLVED_Msk (0xFFFUL << AAR_MAXRESOLVED_MAXRESOLVED_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           CACHE                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct CACHE_PROFILING ================================================== */
/**
  * @brief PROFILING [CACHE_PROFILING] (unspecified)
  */
typedef struct {
  __IOM uint32_t  ENABLE;
  __OM  uint32_t  CLEAR;
  __IM  uint32_t  HIT;
  __IM  uint32_t  MISS;
  __IM  uint32_t  LMISS;
  __IM  uint32_t  READS;
  __IM  uint32_t  WRITES;
} NRF_CACHE_PROFILING_Type;

/* CACHE_PROFILING_ENABLE: Enable the profiling counters. */
  #define CACHE_PROFILING_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable the profiling counters */
  #define CACHE_PROFILING_ENABLE_ENABLE_Pos (0UL)
  #define CACHE_PROFILING_ENABLE_ENABLE_Msk (0x1UL << CACHE_PROFILING_ENABLE_ENABLE_Pos)
  #define CACHE_PROFILING_ENABLE_ENABLE_Min (0x0UL)
  #define CACHE_PROFILING_ENABLE_ENABLE_Max (0x1UL)
  #define CACHE_PROFILING_ENABLE_ENABLE_Disable (0x0UL)
  #define CACHE_PROFILING_ENABLE_ENABLE_Enable (0x1UL)


/* CACHE_PROFILING_CLEAR: Clear the profiling counters. */
  #define CACHE_PROFILING_CLEAR_ResetValue (0x00000000UL)

/* CLEAR @Bit 0 : Clearing the profiling counters */
  #define CACHE_PROFILING_CLEAR_CLEAR_Pos (0UL)
  #define CACHE_PROFILING_CLEAR_CLEAR_Msk (0x1UL << CACHE_PROFILING_CLEAR_CLEAR_Pos)
  #define CACHE_PROFILING_CLEAR_CLEAR_Min (0x1UL)
  #define CACHE_PROFILING_CLEAR_CLEAR_Max (0x1UL)
  #define CACHE_PROFILING_CLEAR_CLEAR_Clear (0x1UL)


/* CACHE_PROFILING_HIT: The cache hit counter for cache region. */
  #define CACHE_PROFILING_HIT_ResetValue (0x00000000UL)

/* HITS @Bits 0..31 : Number of cache hits */
  #define CACHE_PROFILING_HIT_HITS_Pos (0UL)
  #define CACHE_PROFILING_HIT_HITS_Msk (0xFFFFFFFFUL << CACHE_PROFILING_HIT_HITS_Pos)


/* CACHE_PROFILING_MISS: The cache miss counter for cache region. */
  #define CACHE_PROFILING_MISS_ResetValue (0x00000000UL)

/* MISSES @Bits 0..31 : Number of cache misses */
  #define CACHE_PROFILING_MISS_MISSES_Pos (0UL)
  #define CACHE_PROFILING_MISS_MISSES_Msk (0xFFFFFFFFUL << CACHE_PROFILING_MISS_MISSES_Pos)


/* CACHE_PROFILING_LMISS: The cache line miss counter for cache region. */
  #define CACHE_PROFILING_LMISS_ResetValue (0x00000000UL)

/* LMISSES @Bits 0..31 : Number of cache line misses */
  #define CACHE_PROFILING_LMISS_LMISSES_Pos (0UL)
  #define CACHE_PROFILING_LMISS_LMISSES_Msk (0xFFFFFFFFUL << CACHE_PROFILING_LMISS_LMISSES_Pos)


/* CACHE_PROFILING_READS: Number of reads for cache region. */
  #define CACHE_PROFILING_READS_ResetValue (0x00000000UL)

/* READS @Bits 0..31 : Number of reads for cache region. */
  #define CACHE_PROFILING_READS_READS_Pos (0UL)
  #define CACHE_PROFILING_READS_READS_Msk (0xFFFFFFFFUL << CACHE_PROFILING_READS_READS_Pos)


/* CACHE_PROFILING_WRITES: Number of writes for cache region. */
  #define CACHE_PROFILING_WRITES_ResetValue (0x00000000UL)

/* WRITES @Bits 0..31 : Number of writes for cache region. */
  #define CACHE_PROFILING_WRITES_WRITES_Pos (0UL)
  #define CACHE_PROFILING_WRITES_WRITES_Msk (0xFFFFFFFFUL << CACHE_PROFILING_WRITES_WRITES_Pos)


/* ====================================================== Struct CACHE ======================================================= */
/**
  * @brief Cache
  */
  typedef struct {
    __IM uint32_t RESERVED[2];
    __OM uint32_t TASKS_INVALIDATECACHE;
    __IM uint32_t RESERVED1[2];
    __OM uint32_t TASKS_INVALIDATELINE;
    __IM uint32_t RESERVED2[2];
    __OM uint32_t TASKS_ERASE;
    __IM uint32_t RESERVED3[247];
    __IM uint32_t STATUS;
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED4[2];
    __IOM uint32_t LINEADDR;
    __IOM NRF_CACHE_PROFILING_Type PROFILING;
    __IOM uint32_t DEBUGLOCK;
    __IOM uint32_t WRITELOCK;
  } NRF_CACHE_Type;

/* CACHE_TASKS_INVALIDATECACHE: Invalidate the cache. */
  #define CACHE_TASKS_INVALIDATECACHE_ResetValue (0x00000000UL)

/* TASKS_INVALIDATECACHE @Bit 0 : Invalidate the cache. */
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Pos (0UL)
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Msk (0x1UL << CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Pos)
                                                                            /*!< Bit mask of TASKS_INVALIDATECACHE field.*/
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Min (0x1UL) /*!< Min enumerator value of TASKS_INVALIDATECACHE
                                                                            field.*/
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Max (0x1UL) /*!< Max enumerator value of TASKS_INVALIDATECACHE
                                                                            field.*/
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Trigger (0x1UL)


/* CACHE_TASKS_INVALIDATELINE: Invalidate the line. */
  #define CACHE_TASKS_INVALIDATELINE_ResetValue (0x00000000UL)

/* TASKS_INVALIDATELINE @Bit 0 : Invalidate the line. */
  #define CACHE_TASKS_INVALIDATELINE_TASKS_INVALIDATELINE_Pos (0UL)
  #define CACHE_TASKS_INVALIDATELINE_TASKS_INVALIDATELINE_Msk (0x1UL << CACHE_TASKS_INVALIDATELINE_TASKS_INVALIDATELINE_Pos)
                                                                            /*!< Bit mask of TASKS_INVALIDATELINE field.*/
  #define CACHE_TASKS_INVALIDATELINE_TASKS_INVALIDATELINE_Min (0x1UL)
  #define CACHE_TASKS_INVALIDATELINE_TASKS_INVALIDATELINE_Max (0x1UL)
  #define CACHE_TASKS_INVALIDATELINE_TASKS_INVALIDATELINE_Trigger (0x1UL)


/* CACHE_TASKS_ERASE: Erase the cache. */
  #define CACHE_TASKS_ERASE_ResetValue (0x00000000UL)

/* TASKS_ERASE @Bit 0 : Erase the cache. */
  #define CACHE_TASKS_ERASE_TASKS_ERASE_Pos (0UL)
  #define CACHE_TASKS_ERASE_TASKS_ERASE_Msk (0x1UL << CACHE_TASKS_ERASE_TASKS_ERASE_Pos)
  #define CACHE_TASKS_ERASE_TASKS_ERASE_Min (0x1UL)
  #define CACHE_TASKS_ERASE_TASKS_ERASE_Max (0x1UL)
  #define CACHE_TASKS_ERASE_TASKS_ERASE_Trigger (0x1UL)


/* CACHE_STATUS: Status of the cache activities. */
  #define CACHE_STATUS_ResetValue (0x00000000UL)

/* READY @Bit 0 : Ready status. */
  #define CACHE_STATUS_READY_Pos (0UL)
  #define CACHE_STATUS_READY_Msk (0x1UL << CACHE_STATUS_READY_Pos)
  #define CACHE_STATUS_READY_Min (0x0UL)
  #define CACHE_STATUS_READY_Max (0x1UL)
  #define CACHE_STATUS_READY_Ready (0x0UL)
  #define CACHE_STATUS_READY_Busy (0x1UL)


/* CACHE_ENABLE: Enable cache. */
  #define CACHE_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable cache */
  #define CACHE_ENABLE_ENABLE_Pos (0UL)
  #define CACHE_ENABLE_ENABLE_Msk (0x1UL << CACHE_ENABLE_ENABLE_Pos)
  #define CACHE_ENABLE_ENABLE_Min (0x0UL)
  #define CACHE_ENABLE_ENABLE_Max (0x1UL)
  #define CACHE_ENABLE_ENABLE_Disabled (0x0UL)
  #define CACHE_ENABLE_ENABLE_Enabled (0x1UL)


/* CACHE_LINEADDR: Memory address covered by the line to be maintained. */
  #define CACHE_LINEADDR_ResetValue (0x00000000UL)

/* ADDR @Bits 0..31 : Address. */
  #define CACHE_LINEADDR_ADDR_Pos (0UL)
  #define CACHE_LINEADDR_ADDR_Msk (0xFFFFFFFFUL << CACHE_LINEADDR_ADDR_Pos)


/* CACHE_DEBUGLOCK: Lock debug mode. */
  #define CACHE_DEBUGLOCK_ResetValue (0x00000000UL)

/* DEBUGLOCK @Bit 0 : Lock debug mode */
  #define CACHE_DEBUGLOCK_DEBUGLOCK_Pos (0UL)
  #define CACHE_DEBUGLOCK_DEBUGLOCK_Msk (0x1UL << CACHE_DEBUGLOCK_DEBUGLOCK_Pos)
  #define CACHE_DEBUGLOCK_DEBUGLOCK_Min (0x0UL)
  #define CACHE_DEBUGLOCK_DEBUGLOCK_Max (0x1UL)
  #define CACHE_DEBUGLOCK_DEBUGLOCK_Unlocked (0x0UL)
  #define CACHE_DEBUGLOCK_DEBUGLOCK_Locked (0x1UL)


/* CACHE_WRITELOCK: Lock cache updates. */
  #define CACHE_WRITELOCK_ResetValue (0x00000000UL)

/* WRITELOCK @Bit 0 : Lock cache updates */
  #define CACHE_WRITELOCK_WRITELOCK_Pos (0UL)
  #define CACHE_WRITELOCK_WRITELOCK_Msk (0x1UL << CACHE_WRITELOCK_WRITELOCK_Pos)
  #define CACHE_WRITELOCK_WRITELOCK_Min (0x0UL)
  #define CACHE_WRITELOCK_WRITELOCK_Max (0x1UL)
  #define CACHE_WRITELOCK_WRITELOCK_Unlocked (0x0UL)
  #define CACHE_WRITELOCK_WRITELOCK_Locked (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                         CACHEDATA                                         ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* =============================================== Struct CACHEDATA_SET_WAY_DU =============================================== */
/**
  * @brief DU [CACHEDATA_SET_WAY_DU] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DATA[2];                           /*!< (@ 0x00000000) Cache data bits for DATA[q] in DU[p] (DataUnit) of
                                                                         SET[n], WAY[o].*/
} NRF_CACHEDATA_SET_WAY_DU_Type;
  #define CACHEDATA_SET_WAY_DU_MaxCount (4UL)
  #define CACHEDATA_SET_WAY_DU_MaxIndex (3UL)
  #define CACHEDATA_SET_WAY_DU_MinIndex (0UL)

/* CACHEDATA_SET_WAY_DU_DATA: Cache data bits for DATA[q] in DU[p] (DataUnit) of SET[n], WAY[o]. */
  #define CACHEDATA_SET_WAY_DU_DATA_MaxCount (2UL)
  #define CACHEDATA_SET_WAY_DU_DATA_MaxIndex (1UL)
  #define CACHEDATA_SET_WAY_DU_DATA_MinIndex (0UL)
  #define CACHEDATA_SET_WAY_DU_DATA_ResetValue (0x00000000UL)

/* Data @Bits 0..31 : Data */
  #define CACHEDATA_SET_WAY_DU_DATA_Data_Pos (0UL)
  #define CACHEDATA_SET_WAY_DU_DATA_Data_Msk (0xFFFFFFFFUL << CACHEDATA_SET_WAY_DU_DATA_Data_Pos)



/* ================================================ Struct CACHEDATA_SET_WAY ================================================= */
/**
  * @brief WAY [CACHEDATA_SET_WAY] (unspecified)
  */
typedef struct {
  __IOM NRF_CACHEDATA_SET_WAY_DU_Type DU[4];
} NRF_CACHEDATA_SET_WAY_Type;
  #define CACHEDATA_SET_WAY_MaxCount (2UL)
  #define CACHEDATA_SET_WAY_MaxIndex (1UL)
  #define CACHEDATA_SET_WAY_MinIndex (0UL)


/* ================================================== Struct CACHEDATA_SET =================================================== */
/**
  * @brief SET [CACHEDATA_SET] (unspecified)
  */
typedef struct {
  __IOM NRF_CACHEDATA_SET_WAY_Type WAY[2];
} NRF_CACHEDATA_SET_Type;
  #define CACHEDATA_SET_MaxCount (128UL)
  #define CACHEDATA_SET_MaxIndex (127UL)
  #define CACHEDATA_SET_MinIndex (0UL)

/* ==================================================== Struct CACHEDATA ===================================================== */
/**
  * @brief CACHEDATA
  */
  typedef struct {
    __IOM NRF_CACHEDATA_SET_Type SET[128];
  } NRF_CACHEDATA_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                         CACHEINFO                                         ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct CACHEINFO_SET_WAY ================================================= */
/**
  * @brief WAY [CACHEINFO_SET_WAY] (unspecified)
  */
typedef struct {
  __IOM uint32_t  INFO;
} NRF_CACHEINFO_SET_WAY_Type;
  #define CACHEINFO_SET_WAY_MaxCount (2UL)
  #define CACHEINFO_SET_WAY_MaxIndex (1UL)
  #define CACHEINFO_SET_WAY_MinIndex (0UL)

/* CACHEINFO_SET_WAY_INFO: Cache information for SET[n], WAY[o]. */
  #define CACHEINFO_SET_WAY_INFO_ResetValue (0x00000000UL)

/* TAG @Bits 0..23 : Cache tag. */
  #define CACHEINFO_SET_WAY_INFO_TAG_Pos (0UL)
  #define CACHEINFO_SET_WAY_INFO_TAG_Msk (0xFFFFFFUL << CACHEINFO_SET_WAY_INFO_TAG_Pos)

/* DUV0 @Bit 24 : Data unit valid info. */
  #define CACHEINFO_SET_WAY_INFO_DUV0_Pos (24UL)
  #define CACHEINFO_SET_WAY_INFO_DUV0_Msk (0x1UL << CACHEINFO_SET_WAY_INFO_DUV0_Pos)
  #define CACHEINFO_SET_WAY_INFO_DUV0_Min (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV0_Max (0x1UL)
  #define CACHEINFO_SET_WAY_INFO_DUV0_Invalid (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV0_Valid (0x1UL)

/* DUV1 @Bit 25 : Data unit valid info. */
  #define CACHEINFO_SET_WAY_INFO_DUV1_Pos (25UL)
  #define CACHEINFO_SET_WAY_INFO_DUV1_Msk (0x1UL << CACHEINFO_SET_WAY_INFO_DUV1_Pos)
  #define CACHEINFO_SET_WAY_INFO_DUV1_Min (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV1_Max (0x1UL)
  #define CACHEINFO_SET_WAY_INFO_DUV1_Invalid (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV1_Valid (0x1UL)

/* DUV2 @Bit 26 : Data unit valid info. */
  #define CACHEINFO_SET_WAY_INFO_DUV2_Pos (26UL)
  #define CACHEINFO_SET_WAY_INFO_DUV2_Msk (0x1UL << CACHEINFO_SET_WAY_INFO_DUV2_Pos)
  #define CACHEINFO_SET_WAY_INFO_DUV2_Min (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV2_Max (0x1UL)
  #define CACHEINFO_SET_WAY_INFO_DUV2_Invalid (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV2_Valid (0x1UL)

/* DUV3 @Bit 27 : Data unit valid info. */
  #define CACHEINFO_SET_WAY_INFO_DUV3_Pos (27UL)
  #define CACHEINFO_SET_WAY_INFO_DUV3_Msk (0x1UL << CACHEINFO_SET_WAY_INFO_DUV3_Pos)
  #define CACHEINFO_SET_WAY_INFO_DUV3_Min (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV3_Max (0x1UL)
  #define CACHEINFO_SET_WAY_INFO_DUV3_Invalid (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV3_Valid (0x1UL)

/* V @Bit 30 : Line valid bit. */
  #define CACHEINFO_SET_WAY_INFO_V_Pos (30UL)
  #define CACHEINFO_SET_WAY_INFO_V_Msk (0x1UL << CACHEINFO_SET_WAY_INFO_V_Pos)
  #define CACHEINFO_SET_WAY_INFO_V_Min (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_V_Max (0x1UL)
  #define CACHEINFO_SET_WAY_INFO_V_Invalid (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_V_Valid (0x1UL)

/* MRU @Bit 31 : Most recently used way. */
  #define CACHEINFO_SET_WAY_INFO_MRU_Pos (31UL)
  #define CACHEINFO_SET_WAY_INFO_MRU_Msk (0x1UL << CACHEINFO_SET_WAY_INFO_MRU_Pos)
  #define CACHEINFO_SET_WAY_INFO_MRU_Min (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_MRU_Max (0x1UL)
  #define CACHEINFO_SET_WAY_INFO_MRU_Way0 (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_MRU_Way1 (0x1UL)



/* ================================================== Struct CACHEINFO_SET =================================================== */
/**
  * @brief SET [CACHEINFO_SET] (unspecified)
  */
typedef struct {
  __IOM NRF_CACHEINFO_SET_WAY_Type WAY[2];
} NRF_CACHEINFO_SET_Type;
  #define CACHEINFO_SET_MaxCount (128UL)
  #define CACHEINFO_SET_MaxIndex (127UL)
  #define CACHEINFO_SET_MinIndex (0UL)

/* ==================================================== Struct CACHEINFO ===================================================== */
/**
  * @brief CACHEINFO
  */
  typedef struct {
    __IOM NRF_CACHEINFO_SET_Type SET[128];
  } NRF_CACHEINFO_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            CCM                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ===================================================== Struct CCM_KEY ====================================================== */
/**
  * @brief KEY [CCM_KEY] (unspecified)
  */
typedef struct {
  __OM  uint32_t  VALUE[4];
} NRF_CCM_KEY_Type;

/* CCM_KEY_VALUE: 128-bit AES key */
  #define CCM_KEY_VALUE_MaxCount (4UL)
  #define CCM_KEY_VALUE_MaxIndex (3UL)
  #define CCM_KEY_VALUE_MinIndex (0UL)
  #define CCM_KEY_VALUE_ResetValue (0x00000000UL)

/* VALUE @Bits 0..31 : AES 128-bit key value, bits (32*(i+1))-1 : (32*i) */
  #define CCM_KEY_VALUE_VALUE_Pos (0UL)
  #define CCM_KEY_VALUE_VALUE_Msk (0xFFFFFFFFUL << CCM_KEY_VALUE_VALUE_Pos)



/* ==================================================== Struct CCM_NONCE ===================================================== */
/**
  * @brief NONCE [CCM_NONCE] (unspecified)
  */
typedef struct {
  __IOM uint32_t  VALUE[4];
} NRF_CCM_NONCE_Type;

/* CCM_NONCE_VALUE: 13-byte NONCE vector Only the lower 13 bytes are used */
  #define CCM_NONCE_VALUE_MaxCount (4UL)
  #define CCM_NONCE_VALUE_MaxIndex (3UL)
  #define CCM_NONCE_VALUE_MinIndex (0UL)
  #define CCM_NONCE_VALUE_ResetValue (0x00000000UL)

/* VALUE @Bits 0..31 : NONCE value, bits (32*(n+1))-1 : (32*n) */
  #define CCM_NONCE_VALUE_VALUE_Pos (0UL)
  #define CCM_NONCE_VALUE_VALUE_Msk (0xFFFFFFFFUL << CCM_NONCE_VALUE_VALUE_Pos)



/* ====================================================== Struct CCM_IN ====================================================== */
/**
  * @brief IN [CCM_IN] IN EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000000) Input pointer Points to a job list containing
                                                                         unencrypted CCM data structure in Encryption mode
                                                                         Points to a job list containing encrypted CCM data
                                                                         structure in Decryption mode*/
} NRF_CCM_IN_Type;

/* CCM_IN_PTR: Input pointer Points to a job list containing unencrypted CCM data structure in Encryption mode Points to a job
                list containing encrypted CCM data structure in Decryption mode */

  #define CCM_IN_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Input pointer */
  #define CCM_IN_PTR_PTR_Pos (0UL)
  #define CCM_IN_PTR_PTR_Msk (0xFFFFFFFFUL << CCM_IN_PTR_PTR_Pos)



/* ===================================================== Struct CCM_OUT ====================================================== */
/**
  * @brief OUT [CCM_OUT] OUT EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000000) Output pointer Points to a job list containing
                                                                         encrypted CCM data structure in Encryption mode Points
                                                                         to a job list containing decrypted CCM data structure
                                                                         in Decryption mode*/
} NRF_CCM_OUT_Type;

/* CCM_OUT_PTR: Output pointer Points to a job list containing encrypted CCM data structure in Encryption mode Points to a job
                 list containing decrypted CCM data structure in Decryption mode */

  #define CCM_OUT_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Output pointer */
  #define CCM_OUT_PTR_PTR_Pos (0UL)
  #define CCM_OUT_PTR_PTR_Msk (0xFFFFFFFFUL << CCM_OUT_PTR_PTR_Pos)


/* ======================================================= Struct CCM ======================================================== */
/**
  * @brief AES CCM Mode Encryption
  */
  typedef struct {
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Start encryption/decryption. This operation will stop
                                                                         by itself when completed.*/
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_RATEOVERRIDE;                /*!< (@ 0x00000008) Override DATARATE setting in MODE register with the
                                                                         contents of the RATEOVERRIDE register for any ongoing
                                                                         encryption/decryption*/
    __IM uint32_t RESERVED[29];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_RATEOVERRIDE;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_END;
    __IOM uint32_t EVENTS_ERROR;
    __IM uint32_t RESERVED2[30];
    __IOM uint32_t PUBLISH_END;
    __IOM uint32_t PUBLISH_ERROR;
    __IM uint32_t RESERVED3[94];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED4[61];
    __IM uint32_t MACSTATUS;
    __IM uint32_t ERRORSTATUS;
    __IM uint32_t RESERVED5[62];
    __IOM uint32_t ENABLE;
    __IOM uint32_t MODE;
    __IM uint32_t RESERVED6[2];
    __IOM NRF_CCM_KEY_Type KEY;
    __IOM NRF_CCM_NONCE_Type NONCE;
    __IOM NRF_CCM_IN_Type IN;
    __IM uint32_t RESERVED7;
    __IOM NRF_CCM_OUT_Type OUT;
    __IM uint32_t RESERVED8[2];
    __IOM uint32_t RATEOVERRIDE;
    __IOM uint32_t ADATAMASK;
  } NRF_CCM_Type;

/* CCM_TASKS_START: Start encryption/decryption. This operation will stop by itself when completed. */
  #define CCM_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start encryption/decryption. This operation will stop by itself when completed. */
  #define CCM_TASKS_START_TASKS_START_Pos (0UL)
  #define CCM_TASKS_START_TASKS_START_Msk (0x1UL << CCM_TASKS_START_TASKS_START_Pos)
  #define CCM_TASKS_START_TASKS_START_Min (0x1UL)
  #define CCM_TASKS_START_TASKS_START_Max (0x1UL)
  #define CCM_TASKS_START_TASKS_START_Trigger (0x1UL)


/* CCM_TASKS_STOP: Stop encryption/decryption */
  #define CCM_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop encryption/decryption */
  #define CCM_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define CCM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << CCM_TASKS_STOP_TASKS_STOP_Pos)
  #define CCM_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define CCM_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define CCM_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* CCM_TASKS_RATEOVERRIDE: Override DATARATE setting in MODE register with the contents of the RATEOVERRIDE register for any
                            ongoing encryption/decryption */

  #define CCM_TASKS_RATEOVERRIDE_ResetValue (0x00000000UL)

/* TASKS_RATEOVERRIDE @Bit 0 : Override DATARATE setting in MODE register with the contents of the RATEOVERRIDE register for any
                               ongoing encryption/decryption */

  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Pos (0UL)
  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Msk (0x1UL << CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Pos) /*!< Bit mask
                                                                            of TASKS_RATEOVERRIDE field.*/
  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Min (0x1UL)
  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Max (0x1UL)
  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Trigger (0x1UL)


/* CCM_SUBSCRIBE_START: Subscribe configuration for task START */
  #define CCM_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define CCM_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define CCM_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << CCM_SUBSCRIBE_START_CHIDX_Pos)
  #define CCM_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define CCM_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CCM_SUBSCRIBE_START_EN_Pos (31UL)
  #define CCM_SUBSCRIBE_START_EN_Msk (0x1UL << CCM_SUBSCRIBE_START_EN_Pos)
  #define CCM_SUBSCRIBE_START_EN_Min (0x0UL)
  #define CCM_SUBSCRIBE_START_EN_Max (0x1UL)
  #define CCM_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define CCM_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* CCM_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define CCM_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define CCM_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define CCM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << CCM_SUBSCRIBE_STOP_CHIDX_Pos)
  #define CCM_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define CCM_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CCM_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define CCM_SUBSCRIBE_STOP_EN_Msk (0x1UL << CCM_SUBSCRIBE_STOP_EN_Pos)
  #define CCM_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define CCM_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define CCM_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define CCM_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* CCM_SUBSCRIBE_RATEOVERRIDE: Subscribe configuration for task RATEOVERRIDE */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RATEOVERRIDE will subscribe to */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Pos (0UL)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Msk (0xFFUL << CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Pos)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Min (0x00UL)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Pos (31UL)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Msk (0x1UL << CCM_SUBSCRIBE_RATEOVERRIDE_EN_Pos)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Min (0x0UL)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Max (0x1UL)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Disabled (0x0UL)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Enabled (0x1UL)


/* CCM_EVENTS_END: Encrypt/decrypt complete or ended because of an error */
  #define CCM_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : Encrypt/decrypt complete or ended because of an error */
  #define CCM_EVENTS_END_EVENTS_END_Pos (0UL)
  #define CCM_EVENTS_END_EVENTS_END_Msk (0x1UL << CCM_EVENTS_END_EVENTS_END_Pos)
  #define CCM_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define CCM_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define CCM_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define CCM_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* CCM_EVENTS_ERROR: CCM error event */
  #define CCM_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : CCM error event */
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << CCM_EVENTS_ERROR_EVENTS_ERROR_Pos)
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* CCM_PUBLISH_END: Publish configuration for event END */
  #define CCM_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define CCM_PUBLISH_END_CHIDX_Pos (0UL)
  #define CCM_PUBLISH_END_CHIDX_Msk (0xFFUL << CCM_PUBLISH_END_CHIDX_Pos)
  #define CCM_PUBLISH_END_CHIDX_Min (0x00UL)
  #define CCM_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CCM_PUBLISH_END_EN_Pos (31UL)
  #define CCM_PUBLISH_END_EN_Msk (0x1UL << CCM_PUBLISH_END_EN_Pos)
  #define CCM_PUBLISH_END_EN_Min (0x0UL)
  #define CCM_PUBLISH_END_EN_Max (0x1UL)
  #define CCM_PUBLISH_END_EN_Disabled (0x0UL)
  #define CCM_PUBLISH_END_EN_Enabled (0x1UL)


/* CCM_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define CCM_PUBLISH_ERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define CCM_PUBLISH_ERROR_CHIDX_Pos (0UL)
  #define CCM_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << CCM_PUBLISH_ERROR_CHIDX_Pos)
  #define CCM_PUBLISH_ERROR_CHIDX_Min (0x00UL)
  #define CCM_PUBLISH_ERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CCM_PUBLISH_ERROR_EN_Pos (31UL)
  #define CCM_PUBLISH_ERROR_EN_Msk (0x1UL << CCM_PUBLISH_ERROR_EN_Pos)
  #define CCM_PUBLISH_ERROR_EN_Min (0x0UL)
  #define CCM_PUBLISH_ERROR_EN_Max (0x1UL)
  #define CCM_PUBLISH_ERROR_EN_Disabled (0x0UL)
  #define CCM_PUBLISH_ERROR_EN_Enabled (0x1UL)


/* CCM_INTENSET: Enable interrupt */
  #define CCM_INTENSET_ResetValue (0x00000000UL)

/* END @Bit 1 : Write '1' to enable interrupt for event END */
  #define CCM_INTENSET_END_Pos (1UL)
  #define CCM_INTENSET_END_Msk (0x1UL << CCM_INTENSET_END_Pos)
  #define CCM_INTENSET_END_Min (0x0UL)
  #define CCM_INTENSET_END_Max (0x1UL)
  #define CCM_INTENSET_END_Set (0x1UL)
  #define CCM_INTENSET_END_Disabled (0x0UL)
  #define CCM_INTENSET_END_Enabled (0x1UL)

/* ERROR @Bit 2 : Write '1' to enable interrupt for event ERROR */
  #define CCM_INTENSET_ERROR_Pos (2UL)
  #define CCM_INTENSET_ERROR_Msk (0x1UL << CCM_INTENSET_ERROR_Pos)
  #define CCM_INTENSET_ERROR_Min (0x0UL)
  #define CCM_INTENSET_ERROR_Max (0x1UL)
  #define CCM_INTENSET_ERROR_Set (0x1UL)
  #define CCM_INTENSET_ERROR_Disabled (0x0UL)
  #define CCM_INTENSET_ERROR_Enabled (0x1UL)


/* CCM_INTENCLR: Disable interrupt */
  #define CCM_INTENCLR_ResetValue (0x00000000UL)

/* END @Bit 1 : Write '1' to disable interrupt for event END */
  #define CCM_INTENCLR_END_Pos (1UL)
  #define CCM_INTENCLR_END_Msk (0x1UL << CCM_INTENCLR_END_Pos)
  #define CCM_INTENCLR_END_Min (0x0UL)
  #define CCM_INTENCLR_END_Max (0x1UL)
  #define CCM_INTENCLR_END_Clear (0x1UL)
  #define CCM_INTENCLR_END_Disabled (0x0UL)
  #define CCM_INTENCLR_END_Enabled (0x1UL)

/* ERROR @Bit 2 : Write '1' to disable interrupt for event ERROR */
  #define CCM_INTENCLR_ERROR_Pos (2UL)
  #define CCM_INTENCLR_ERROR_Msk (0x1UL << CCM_INTENCLR_ERROR_Pos)
  #define CCM_INTENCLR_ERROR_Min (0x0UL)
  #define CCM_INTENCLR_ERROR_Max (0x1UL)
  #define CCM_INTENCLR_ERROR_Clear (0x1UL)
  #define CCM_INTENCLR_ERROR_Disabled (0x0UL)
  #define CCM_INTENCLR_ERROR_Enabled (0x1UL)


/* CCM_MACSTATUS: MAC check result */
  #define CCM_MACSTATUS_ResetValue (0x00000000UL)

/* MACSTATUS @Bit 0 : The result of the MAC check performed during the previous decryption operation */
  #define CCM_MACSTATUS_MACSTATUS_Pos (0UL)
  #define CCM_MACSTATUS_MACSTATUS_Msk (0x1UL << CCM_MACSTATUS_MACSTATUS_Pos)
  #define CCM_MACSTATUS_MACSTATUS_Min (0x0UL)
  #define CCM_MACSTATUS_MACSTATUS_Max (0x1UL)
  #define CCM_MACSTATUS_MACSTATUS_CheckFailed (0x0UL)
  #define CCM_MACSTATUS_MACSTATUS_CheckPassed (0x1UL)


/* CCM_ERRORSTATUS: Error status */
  #define CCM_ERRORSTATUS_ResetValue (0x00000000UL)

/* ERRORSTATUS @Bits 0..2 : Error status when the ERROR event is generated */
  #define CCM_ERRORSTATUS_ERRORSTATUS_Pos (0UL)
  #define CCM_ERRORSTATUS_ERRORSTATUS_Msk (0x7UL << CCM_ERRORSTATUS_ERRORSTATUS_Pos)
  #define CCM_ERRORSTATUS_ERRORSTATUS_Min (0x0UL)
  #define CCM_ERRORSTATUS_ERRORSTATUS_Max (0x4UL)
  #define CCM_ERRORSTATUS_ERRORSTATUS_NoError (0x0UL)
  #define CCM_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd (0x1UL)
  #define CCM_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd (0x2UL) /*!< End of OUTPTR job list before CCM data structure was
                                                                      read.*/
  #define CCM_ERRORSTATUS_ERRORSTATUS_EncryptionTooSlow (0x3UL) /*!< Encryption of the unencrypted CCM data structure did not
                                                                     complete in time.*/
  #define CCM_ERRORSTATUS_ERRORSTATUS_DmaError (0x4UL)


/* CCM_ENABLE: Enable */
  #define CCM_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..1 : Enable or disable CCM */
  #define CCM_ENABLE_ENABLE_Pos (0UL)
  #define CCM_ENABLE_ENABLE_Msk (0x3UL << CCM_ENABLE_ENABLE_Pos)
  #define CCM_ENABLE_ENABLE_Min (0x0UL)
  #define CCM_ENABLE_ENABLE_Max (0x2UL)
  #define CCM_ENABLE_ENABLE_Disabled (0x0UL)
  #define CCM_ENABLE_ENABLE_Enabled (0x2UL)


/* CCM_MODE: Operation mode */
  #define CCM_MODE_ResetValue (0x00000001UL)

/* MODE @Bits 0..1 : The mode of operation to be used. The settings in this register apply when the CRYPT task is triggered. */
  #define CCM_MODE_MODE_Pos (0UL)
  #define CCM_MODE_MODE_Msk (0x3UL << CCM_MODE_MODE_Pos)
  #define CCM_MODE_MODE_Min (0x0UL)
  #define CCM_MODE_MODE_Max (0x2UL)
  #define CCM_MODE_MODE_Encryption (0x0UL)
  #define CCM_MODE_MODE_Decryption (0x1UL)
  #define CCM_MODE_MODE_FastDecryption (0x2UL)

/* PROTOCOL @Bits 8..9 : Protocol and packet format selection */
  #define CCM_MODE_PROTOCOL_Pos (8UL)
  #define CCM_MODE_PROTOCOL_Msk (0x3UL << CCM_MODE_PROTOCOL_Pos)
  #define CCM_MODE_PROTOCOL_Min (0x0UL)
  #define CCM_MODE_PROTOCOL_Max (0x1UL)
  #define CCM_MODE_PROTOCOL_Ble (0x0UL)
  #define CCM_MODE_PROTOCOL_Ieee802154 (0x1UL)

/* DATARATE @Bits 16..18 : Radio data rate that the CCM shall run synchronous with */
  #define CCM_MODE_DATARATE_Pos (16UL)
  #define CCM_MODE_DATARATE_Msk (0x7UL << CCM_MODE_DATARATE_Pos)
  #define CCM_MODE_DATARATE_Min (0x0UL)
  #define CCM_MODE_DATARATE_Max (0x5UL)
  #define CCM_MODE_DATARATE_125Kbit (0x0UL)
  #define CCM_MODE_DATARATE_250Kbit (0x1UL)
  #define CCM_MODE_DATARATE_500Kbit (0x2UL)
  #define CCM_MODE_DATARATE_1Mbit (0x3UL)
  #define CCM_MODE_DATARATE_2Mbit (0x4UL)
  #define CCM_MODE_DATARATE_4Mbit (0x5UL)

/* MACLEN @Bits 24..26 : CCM MAC length (bytes) */
  #define CCM_MODE_MACLEN_Pos (24UL)
  #define CCM_MODE_MACLEN_Msk (0x7UL << CCM_MODE_MACLEN_Pos)
  #define CCM_MODE_MACLEN_Min (0x0UL)
  #define CCM_MODE_MACLEN_Max (0x7UL)
  #define CCM_MODE_MACLEN_M0 (0x0UL)                 /*!< M = 0 This is a special case for CCM* where encryption is required but
                                                          not authentication*/
  #define CCM_MODE_MACLEN_M4 (0x1UL)
  #define CCM_MODE_MACLEN_M6 (0x2UL)
  #define CCM_MODE_MACLEN_M8 (0x3UL)
  #define CCM_MODE_MACLEN_M10 (0x4UL)
  #define CCM_MODE_MACLEN_M12 (0x5UL)
  #define CCM_MODE_MACLEN_M14 (0x6UL)
  #define CCM_MODE_MACLEN_M16 (0x7UL)


/* CCM_RATEOVERRIDE: Data rate override setting. */
  #define CCM_RATEOVERRIDE_ResetValue (0x00000002UL)

/* RATEOVERRIDE @Bits 0..2 : Data rate override setting. */
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_Pos (0UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_Msk (0x7UL << CCM_RATEOVERRIDE_RATEOVERRIDE_Pos)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_Min (0x0UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_Max (0x5UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_125Kbit (0x0UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_500Kbit (0x2UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_1Mbit (0x3UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_2Mbit (0x4UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_4Mbit (0x5UL)


/* CCM_ADATAMASK: CCM adata mask. */
  #define CCM_ADATAMASK_ResetValue (0x000000E3UL)

/* ADATAMASK @Bits 0..7 : CCM adata mask. */
  #define CCM_ADATAMASK_ADATAMASK_Pos (0UL)
  #define CCM_ADATAMASK_ADATAMASK_Msk (0xFFUL << CCM_ADATAMASK_ADATAMASK_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           CLIC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ==================================================== Struct CLIC_CLIC ===================================================== */
/**
  * @brief CLIC [CLIC_CLIC] (unspecified)
  */
typedef struct {
  __IM  uint32_t  CLICCFG;
  __IM  uint32_t  CLICINFO;
  __IM  uint32_t  RESERVED[1022];
  __IOM uint32_t  CLICINT[271];
} NRF_CLIC_CLIC_Type;

/* CLIC_CLIC_CLICCFG: CLIC configuration. */
  #define CLIC_CLIC_CLICCFG_ResetValue (0x00000011UL)

/* NVBITS @Bit 0 : Selective interrupt hardware vectoring. */
  #define CLIC_CLIC_CLICCFG_NVBITS_Pos (0UL)
  #define CLIC_CLIC_CLICCFG_NVBITS_Msk (0x1UL << CLIC_CLIC_CLICCFG_NVBITS_Pos)
  #define CLIC_CLIC_CLICCFG_NVBITS_Min (0x1UL)
  #define CLIC_CLIC_CLICCFG_NVBITS_Max (0x1UL)
  #define CLIC_CLIC_CLICCFG_NVBITS_Implemented (0x1UL)

/* NLBITS @Bits 1..4 : Interrupt level encoding. */
  #define CLIC_CLIC_CLICCFG_NLBITS_Pos (1UL)
  #define CLIC_CLIC_CLICCFG_NLBITS_Msk (0xFUL << CLIC_CLIC_CLICCFG_NLBITS_Pos)
  #define CLIC_CLIC_CLICCFG_NLBITS_Min (0x8UL)
  #define CLIC_CLIC_CLICCFG_NLBITS_Max (0x8UL)
  #define CLIC_CLIC_CLICCFG_NLBITS_Eight (0x8UL)

/* NMBITS @Bits 5..6 : Interrupt privilege mode. */
  #define CLIC_CLIC_CLICCFG_NMBITS_Pos (5UL)
  #define CLIC_CLIC_CLICCFG_NMBITS_Msk (0x3UL << CLIC_CLIC_CLICCFG_NMBITS_Pos)
  #define CLIC_CLIC_CLICCFG_NMBITS_Min (0x0UL)
  #define CLIC_CLIC_CLICCFG_NMBITS_Max (0x0UL)
  #define CLIC_CLIC_CLICCFG_NMBITS_ModeM (0x0UL)


/* CLIC_CLIC_CLICINFO: CLIC information. */
  #define CLIC_CLIC_CLICINFO_ResetValue (0x00401FFFUL)

/* NUMINTERRUPTS @Bits 0..12 : Maximum number of interrupts supported. */
  #define CLIC_CLIC_CLICINFO_NUMINTERRUPTS_Pos (0UL)
  #define CLIC_CLIC_CLICINFO_NUMINTERRUPTS_Msk (0x1FFFUL << CLIC_CLIC_CLICINFO_NUMINTERRUPTS_Pos) /*!< Bit mask of NUMINTERRUPTS
                                                                            field.*/

/* VERSION @Bits 13..20 : Version */
  #define CLIC_CLIC_CLICINFO_VERSION_Pos (13UL)
  #define CLIC_CLIC_CLICINFO_VERSION_Msk (0xFFUL << CLIC_CLIC_CLICINFO_VERSION_Pos)

/* NUMTRIGGER @Bits 25..30 : Number of maximum interrupt triggers supported */
  #define CLIC_CLIC_CLICINFO_NUMTRIGGER_Pos (25UL)
  #define CLIC_CLIC_CLICINFO_NUMTRIGGER_Msk (0x3FUL << CLIC_CLIC_CLICINFO_NUMTRIGGER_Pos)


/* CLIC_CLIC_CLICINT: Interrupt control register for IRQ number [n]. */
  #define CLIC_CLIC_CLICINT_MaxCount (271UL)
  #define CLIC_CLIC_CLICINT_MaxIndex (270UL)
  #define CLIC_CLIC_CLICINT_MinIndex (0UL)
  #define CLIC_CLIC_CLICINT_ResetValue (0x3FC30000UL)

/* IP @Bit 0 : Interrupt Pending bit. */
  #define CLIC_CLIC_CLICINT_IP_Pos (0UL)
  #define CLIC_CLIC_CLICINT_IP_Msk (0x1UL << CLIC_CLIC_CLICINT_IP_Pos)
  #define CLIC_CLIC_CLICINT_IP_Min (0x0UL)
  #define CLIC_CLIC_CLICINT_IP_Max (0x1UL)
  #define CLIC_CLIC_CLICINT_IP_NotPending (0x0UL)
  #define CLIC_CLIC_CLICINT_IP_Pending (0x1UL)

/* READ1 @Bits 1..7 : Read as 0, write ignored. */
  #define CLIC_CLIC_CLICINT_READ1_Pos (1UL)
  #define CLIC_CLIC_CLICINT_READ1_Msk (0x7FUL << CLIC_CLIC_CLICINT_READ1_Pos)

/* IE @Bit 8 : Interrupt enable bit. */
  #define CLIC_CLIC_CLICINT_IE_Pos (8UL)
  #define CLIC_CLIC_CLICINT_IE_Msk (0x1UL << CLIC_CLIC_CLICINT_IE_Pos)
  #define CLIC_CLIC_CLICINT_IE_Min (0x0UL)
  #define CLIC_CLIC_CLICINT_IE_Max (0x1UL)
  #define CLIC_CLIC_CLICINT_IE_Disabled (0x0UL)
  #define CLIC_CLIC_CLICINT_IE_Enabled (0x1UL)

/* READ2 @Bits 9..15 : Read as 0, write ignored. */
  #define CLIC_CLIC_CLICINT_READ2_Pos (9UL)
  #define CLIC_CLIC_CLICINT_READ2_Msk (0x7FUL << CLIC_CLIC_CLICINT_READ2_Pos)

/* SHV @Bit 16 : Selective Hardware Vectoring. */
  #define CLIC_CLIC_CLICINT_SHV_Pos (16UL)
  #define CLIC_CLIC_CLICINT_SHV_Msk (0x1UL << CLIC_CLIC_CLICINT_SHV_Pos)
  #define CLIC_CLIC_CLICINT_SHV_Min (0x1UL)
  #define CLIC_CLIC_CLICINT_SHV_Max (0x1UL)
  #define CLIC_CLIC_CLICINT_SHV_Vectored (0x1UL)

/* TRIG @Bits 17..18 : Trigger type and polarity for each interrupt input. */
  #define CLIC_CLIC_CLICINT_TRIG_Pos (17UL)
  #define CLIC_CLIC_CLICINT_TRIG_Msk (0x3UL << CLIC_CLIC_CLICINT_TRIG_Pos)
  #define CLIC_CLIC_CLICINT_TRIG_Min (0x1UL)
  #define CLIC_CLIC_CLICINT_TRIG_Max (0x1UL)
  #define CLIC_CLIC_CLICINT_TRIG_EdgeTriggered (0x1UL)

/* MODE @Bits 22..23 : Privilege mode. */
  #define CLIC_CLIC_CLICINT_MODE_Pos (22UL)
  #define CLIC_CLIC_CLICINT_MODE_Msk (0x3UL << CLIC_CLIC_CLICINT_MODE_Pos)
  #define CLIC_CLIC_CLICINT_MODE_Min (0x3UL)
  #define CLIC_CLIC_CLICINT_MODE_Max (0x3UL)
  #define CLIC_CLIC_CLICINT_MODE_MachineMode (0x3UL)

/* PRIORITY @Bits 24..31 : Interrupt priority level */
  #define CLIC_CLIC_CLICINT_PRIORITY_Pos (24UL)
  #define CLIC_CLIC_CLICINT_PRIORITY_Msk (0xFFUL << CLIC_CLIC_CLICINT_PRIORITY_Pos)
  #define CLIC_CLIC_CLICINT_PRIORITY_Min (0x3FUL)
  #define CLIC_CLIC_CLICINT_PRIORITY_Max (0xFFUL)
  #define CLIC_CLIC_CLICINT_PRIORITY_PRIOLEVEL0 (0x3FUL)
  #define CLIC_CLIC_CLICINT_PRIORITY_PRIOLEVEL1 (0x7FUL)
  #define CLIC_CLIC_CLICINT_PRIORITY_PRIOLEVEL2 (0xBFUL)
  #define CLIC_CLIC_CLICINT_PRIORITY_PRIOLEVEL3 (0xFFUL)


/* ======================================================= Struct CLIC ======================================================= */
/**
  * @brief VPR CLIC registers
  */
  typedef struct {
    __IOM NRF_CLIC_CLIC_Type CLIC;
  } NRF_CLIC_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           CLOCK                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ===================================================== Struct CLOCK_XO ===================================================== */
/**
  * @brief XO [CLOCK_XO] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IM  uint32_t  RUN;
  __IM  uint32_t  STAT;
} NRF_CLOCK_XO_Type;

/* CLOCK_XO_RUN: Indicates that XOSTART task was triggered */
  #define CLOCK_XO_RUN_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : XOSTART task triggered or not */
  #define CLOCK_XO_RUN_STATUS_Pos (0UL)
  #define CLOCK_XO_RUN_STATUS_Msk (0x1UL << CLOCK_XO_RUN_STATUS_Pos)
  #define CLOCK_XO_RUN_STATUS_Min (0x0UL)
  #define CLOCK_XO_RUN_STATUS_Max (0x1UL)
  #define CLOCK_XO_RUN_STATUS_NotTriggered (0x0UL)
  #define CLOCK_XO_RUN_STATUS_Triggered (0x1UL)


/* CLOCK_XO_STAT: XO status */
  #define CLOCK_XO_STAT_ResetValue (0x00000000UL)

/* STATE @Bit 16 : XO state (Running between START task and STOPPED event) */
  #define CLOCK_XO_STAT_STATE_Pos (16UL)
  #define CLOCK_XO_STAT_STATE_Msk (0x1UL << CLOCK_XO_STAT_STATE_Pos)
  #define CLOCK_XO_STAT_STATE_Min (0x0UL)
  #define CLOCK_XO_STAT_STATE_Max (0x1UL)
  #define CLOCK_XO_STAT_STATE_NotRunning (0x0UL)
  #define CLOCK_XO_STAT_STATE_Running (0x1UL)



/* ==================================================== Struct CLOCK_PLL ===================================================== */
/**
  * @brief PLL [CLOCK_PLL] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IM  uint32_t  RUN;
  __IM  uint32_t  STAT;                              /*!< (@ 0x0000000C) Which PLL settings were selected when triggering START
                                                                         task*/
} NRF_CLOCK_PLL_Type;

/* CLOCK_PLL_RUN: Indicates that PLLSTART task was triggered */
  #define CLOCK_PLL_RUN_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : PLLSTART task triggered or not */
  #define CLOCK_PLL_RUN_STATUS_Pos (0UL)
  #define CLOCK_PLL_RUN_STATUS_Msk (0x1UL << CLOCK_PLL_RUN_STATUS_Pos)
  #define CLOCK_PLL_RUN_STATUS_Min (0x0UL)
  #define CLOCK_PLL_RUN_STATUS_Max (0x1UL)
  #define CLOCK_PLL_RUN_STATUS_NotTriggered (0x0UL)
  #define CLOCK_PLL_RUN_STATUS_Triggered (0x1UL)


/* CLOCK_PLL_STAT: Which PLL settings were selected when triggering START task */
  #define CLOCK_PLL_STAT_ResetValue (0x00000000UL)

/* STATE @Bit 16 : PLL state (Running between START task and STOPPED event) */
  #define CLOCK_PLL_STAT_STATE_Pos (16UL)
  #define CLOCK_PLL_STAT_STATE_Msk (0x1UL << CLOCK_PLL_STAT_STATE_Pos)
  #define CLOCK_PLL_STAT_STATE_Min (0x0UL)
  #define CLOCK_PLL_STAT_STATE_Max (0x1UL)
  #define CLOCK_PLL_STAT_STATE_NotRunning (0x0UL)
  #define CLOCK_PLL_STAT_STATE_Running (0x1UL)



/* =================================================== Struct CLOCK_LFCLK ==================================================== */
/**
  * @brief LFCLK [CLOCK_LFCLK] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SRC;
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  RUN;
  __IM  uint32_t  STAT;                              /*!< (@ 0x0000000C) Copy of LFCLK.SRCCOPY register, set when LFCLKSTARTED
                                                                         event is triggered.*/
  __IOM uint32_t  SRCCOPY;                           /*!< (@ 0x00000010) Copy of LFCLK.SRC register, set when LFCLKSTART task is
                                                                         triggered*/
} NRF_CLOCK_LFCLK_Type;

/* CLOCK_LFCLK_SRC: Clock source for LFCLK */
  #define CLOCK_LFCLK_SRC_ResetValue (0x00000000UL)

/* SRC @Bits 0..1 : Select which LFCLK source is started by the LFCLKSTART task */
  #define CLOCK_LFCLK_SRC_SRC_Pos (0UL)
  #define CLOCK_LFCLK_SRC_SRC_Msk (0x3UL << CLOCK_LFCLK_SRC_SRC_Pos)
  #define CLOCK_LFCLK_SRC_SRC_Min (0x0UL)
  #define CLOCK_LFCLK_SRC_SRC_Max (0x2UL)
  #define CLOCK_LFCLK_SRC_SRC_LFRC (0x0UL)
  #define CLOCK_LFCLK_SRC_SRC_LFXO (0x1UL)
  #define CLOCK_LFCLK_SRC_SRC_LFSYNT (0x2UL)


/* CLOCK_LFCLK_RUN: Indicates that LFCLKSTART task was triggered */
  #define CLOCK_LFCLK_RUN_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : LFCLKSTART task triggered or not */
  #define CLOCK_LFCLK_RUN_STATUS_Pos (0UL)
  #define CLOCK_LFCLK_RUN_STATUS_Msk (0x1UL << CLOCK_LFCLK_RUN_STATUS_Pos)
  #define CLOCK_LFCLK_RUN_STATUS_Min (0x0UL)
  #define CLOCK_LFCLK_RUN_STATUS_Max (0x1UL)
  #define CLOCK_LFCLK_RUN_STATUS_NotTriggered (0x0UL)
  #define CLOCK_LFCLK_RUN_STATUS_Triggered (0x1UL)


/* CLOCK_LFCLK_STAT: Copy of LFCLK.SRCCOPY register, set when LFCLKSTARTED event is triggered. */
  #define CLOCK_LFCLK_STAT_ResetValue (0x00000000UL)

/* SRC @Bits 0..1 : Value of LFCLK.SRCCOPY register when LFCLKSTARTED event was triggered */
  #define CLOCK_LFCLK_STAT_SRC_Pos (0UL)
  #define CLOCK_LFCLK_STAT_SRC_Msk (0x3UL << CLOCK_LFCLK_STAT_SRC_Pos)
  #define CLOCK_LFCLK_STAT_SRC_Min (0x0UL)
  #define CLOCK_LFCLK_STAT_SRC_Max (0x2UL)
  #define CLOCK_LFCLK_STAT_SRC_LFRC (0x0UL)
  #define CLOCK_LFCLK_STAT_SRC_LFXO (0x1UL)
  #define CLOCK_LFCLK_STAT_SRC_LFSYNT (0x2UL)

/* ALWAYSRUNNING @Bit 4 : ALWAYSRUN activated */
  #define CLOCK_LFCLK_STAT_ALWAYSRUNNING_Pos (4UL)
  #define CLOCK_LFCLK_STAT_ALWAYSRUNNING_Msk (0x1UL << CLOCK_LFCLK_STAT_ALWAYSRUNNING_Pos) /*!< Bit mask of ALWAYSRUNNING
                                                                            field.*/
  #define CLOCK_LFCLK_STAT_ALWAYSRUNNING_Min (0x0UL)
  #define CLOCK_LFCLK_STAT_ALWAYSRUNNING_Max (0x1UL)
  #define CLOCK_LFCLK_STAT_ALWAYSRUNNING_NotRunning (0x0UL)
  #define CLOCK_LFCLK_STAT_ALWAYSRUNNING_Running (0x1UL)

/* STATE @Bit 16 : LFCLK state (Running between START task and STOPPED event) */
  #define CLOCK_LFCLK_STAT_STATE_Pos (16UL)
  #define CLOCK_LFCLK_STAT_STATE_Msk (0x1UL << CLOCK_LFCLK_STAT_STATE_Pos)
  #define CLOCK_LFCLK_STAT_STATE_Min (0x0UL)
  #define CLOCK_LFCLK_STAT_STATE_Max (0x1UL)
  #define CLOCK_LFCLK_STAT_STATE_NotRunning (0x0UL)
  #define CLOCK_LFCLK_STAT_STATE_Running (0x1UL)


/* CLOCK_LFCLK_SRCCOPY: Copy of LFCLK.SRC register, set when LFCLKSTART task is triggered */
  #define CLOCK_LFCLK_SRCCOPY_ResetValue (0x00000000UL)

/* SRC @Bits 0..1 : Value of LFCLK.SRC register when LFCLKSTART task was triggered */
  #define CLOCK_LFCLK_SRCCOPY_SRC_Pos (0UL)
  #define CLOCK_LFCLK_SRCCOPY_SRC_Msk (0x3UL << CLOCK_LFCLK_SRCCOPY_SRC_Pos)
  #define CLOCK_LFCLK_SRCCOPY_SRC_Min (0x0UL)
  #define CLOCK_LFCLK_SRCCOPY_SRC_Max (0x2UL)
  #define CLOCK_LFCLK_SRCCOPY_SRC_LFRC (0x0UL)
  #define CLOCK_LFCLK_SRCCOPY_SRC_LFXO (0x1UL)
  #define CLOCK_LFCLK_SRCCOPY_SRC_LFSYNT (0x2UL)


/* ====================================================== Struct CLOCK ======================================================= */
/**
  * @brief Clock management
  */
  typedef struct {
    __OM uint32_t TASKS_XOSTART;
    __OM uint32_t TASKS_XOSTOP;
    __OM uint32_t TASKS_PLLSTART;                    /*!< (@ 0x00000008) Start PLL and keep it running, regardless of the
                                                                         automatic clock requests*/
    __OM uint32_t TASKS_PLLSTOP;
    __OM uint32_t TASKS_LFCLKSTART;
    __OM uint32_t TASKS_LFCLKSTOP;
    __OM uint32_t TASKS_CAL;
    __OM uint32_t TASKS_XOTUNE;
    __OM uint32_t TASKS_XOTUNEABORT;
    __IM uint32_t RESERVED[23];
    __IOM uint32_t SUBSCRIBE_XOSTART;
    __IOM uint32_t SUBSCRIBE_XOSTOP;
    __IOM uint32_t SUBSCRIBE_PLLSTART;
    __IOM uint32_t SUBSCRIBE_PLLSTOP;
    __IOM uint32_t SUBSCRIBE_LFCLKSTART;
    __IOM uint32_t SUBSCRIBE_LFCLKSTOP;
    __IOM uint32_t SUBSCRIBE_CAL;
    __IOM uint32_t SUBSCRIBE_XOTUNE;
    __IOM uint32_t SUBSCRIBE_XOTUNEABORT;
    __IM uint32_t RESERVED1[23];
    __IOM uint32_t EVENTS_XOSTARTED;
    __IOM uint32_t EVENTS_PLLSTARTED;
    __IOM uint32_t EVENTS_LFCLKSTARTED;
    __IOM uint32_t EVENTS_DONE;
    __IOM uint32_t EVENTS_XOTUNED;                   /*!< (@ 0x00000110) HFXO tuning is done. XOTUNED is generated after
                                                                         TASKS_XOSTART or after TASKS_XOTUNE has completed*/
    __IOM uint32_t EVENTS_XOTUNEERROR;
    __IOM uint32_t EVENTS_XOTUNEFAILED;
    __IM uint32_t RESERVED2[25];
    __IOM uint32_t PUBLISH_XOSTARTED;
    __IOM uint32_t PUBLISH_PLLSTARTED;
    __IOM uint32_t PUBLISH_LFCLKSTARTED;
    __IOM uint32_t PUBLISH_DONE;
    __IOM uint32_t PUBLISH_XOTUNED;
    __IOM uint32_t PUBLISH_XOTUNEERROR;
    __IOM uint32_t PUBLISH_XOTUNEFAILED;
    __IM uint32_t RESERVED3[89];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED4[60];
    __IOM NRF_CLOCK_XO_Type XO;
    __IM uint32_t RESERVED5[4];
    __IOM NRF_CLOCK_PLL_Type PLL;
    __IM uint32_t RESERVED6[4];
    __IOM NRF_CLOCK_LFCLK_Type LFCLK;
  } NRF_CLOCK_Type;

/* CLOCK_TASKS_XOSTART: Start crystal oscillator (HFXO) */
  #define CLOCK_TASKS_XOSTART_ResetValue (0x00000000UL)

/* TASKS_XOSTART @Bit 0 : Start crystal oscillator (HFXO) */
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Pos (0UL)
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Msk (0x1UL << CLOCK_TASKS_XOSTART_TASKS_XOSTART_Pos) /*!< Bit mask of TASKS_XOSTART
                                                                            field.*/
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Min (0x1UL)
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Max (0x1UL)
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Trigger (0x1UL)


/* CLOCK_TASKS_XOSTOP: Stop crystal oscillator (HFXO) */
  #define CLOCK_TASKS_XOSTOP_ResetValue (0x00000000UL)

/* TASKS_XOSTOP @Bit 0 : Stop crystal oscillator (HFXO) */
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Pos (0UL)
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Msk (0x1UL << CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Pos) /*!< Bit mask of TASKS_XOSTOP
                                                                            field.*/
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Min (0x1UL)
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Max (0x1UL)
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Trigger (0x1UL)


/* CLOCK_TASKS_PLLSTART: Start PLL and keep it running, regardless of the automatic clock requests */
  #define CLOCK_TASKS_PLLSTART_ResetValue (0x00000000UL)

/* TASKS_PLLSTART @Bit 0 : Start PLL and keep it running, regardless of the automatic clock requests */
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Pos (0UL)
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Msk (0x1UL << CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Pos) /*!< Bit mask of
                                                                            TASKS_PLLSTART field.*/
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Min (0x1UL)
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Max (0x1UL)
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Trigger (0x1UL)


/* CLOCK_TASKS_PLLSTOP: Stop PLL */
  #define CLOCK_TASKS_PLLSTOP_ResetValue (0x00000000UL)

/* TASKS_PLLSTOP @Bit 0 : Stop PLL */
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Pos (0UL)
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Msk (0x1UL << CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Pos) /*!< Bit mask of TASKS_PLLSTOP
                                                                            field.*/
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Min (0x1UL)
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Max (0x1UL)
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Trigger (0x1UL)


/* CLOCK_TASKS_LFCLKSTART: Start LFCLK source as selected in LFCLK.SRC */
  #define CLOCK_TASKS_LFCLKSTART_ResetValue (0x00000000UL)

/* TASKS_LFCLKSTART @Bit 0 : Start LFCLK source as selected in LFCLK.SRC */
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Pos (0UL)
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Msk (0x1UL << CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Pos) /*!< Bit mask of
                                                                            TASKS_LFCLKSTART field.*/
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Min (0x1UL)
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Max (0x1UL)
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Trigger (0x1UL)


/* CLOCK_TASKS_LFCLKSTOP: Stop LFCLK source */
  #define CLOCK_TASKS_LFCLKSTOP_ResetValue (0x00000000UL)

/* TASKS_LFCLKSTOP @Bit 0 : Stop LFCLK source */
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Pos (0UL)
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Msk (0x1UL << CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Pos) /*!< Bit mask of
                                                                            TASKS_LFCLKSTOP field.*/
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Min (0x1UL)
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Max (0x1UL)
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Trigger (0x1UL)


/* CLOCK_TASKS_CAL: Start calibration of LFRC oscillator */
  #define CLOCK_TASKS_CAL_ResetValue (0x00000000UL)

/* TASKS_CAL @Bit 0 : Start calibration of LFRC oscillator */
  #define CLOCK_TASKS_CAL_TASKS_CAL_Pos (0UL)
  #define CLOCK_TASKS_CAL_TASKS_CAL_Msk (0x1UL << CLOCK_TASKS_CAL_TASKS_CAL_Pos)
  #define CLOCK_TASKS_CAL_TASKS_CAL_Min (0x1UL)
  #define CLOCK_TASKS_CAL_TASKS_CAL_Max (0x1UL)
  #define CLOCK_TASKS_CAL_TASKS_CAL_Trigger (0x1UL)


/* CLOCK_TASKS_XOTUNE: Request tuning for HFXO */
  #define CLOCK_TASKS_XOTUNE_ResetValue (0x00000000UL)

/* TASKS_XOTUNE @Bit 0 : Request tuning for HFXO */
  #define CLOCK_TASKS_XOTUNE_TASKS_XOTUNE_Pos (0UL)
  #define CLOCK_TASKS_XOTUNE_TASKS_XOTUNE_Msk (0x1UL << CLOCK_TASKS_XOTUNE_TASKS_XOTUNE_Pos) /*!< Bit mask of TASKS_XOTUNE
                                                                            field.*/
  #define CLOCK_TASKS_XOTUNE_TASKS_XOTUNE_Min (0x1UL)
  #define CLOCK_TASKS_XOTUNE_TASKS_XOTUNE_Max (0x1UL)
  #define CLOCK_TASKS_XOTUNE_TASKS_XOTUNE_Trigger (0x1UL)


/* CLOCK_TASKS_XOTUNEABORT: Abort tuning for HFXO */
  #define CLOCK_TASKS_XOTUNEABORT_ResetValue (0x00000000UL)

/* TASKS_XOTUNEABORT @Bit 0 : Abort tuning for HFXO */
  #define CLOCK_TASKS_XOTUNEABORT_TASKS_XOTUNEABORT_Pos (0UL)
  #define CLOCK_TASKS_XOTUNEABORT_TASKS_XOTUNEABORT_Msk (0x1UL << CLOCK_TASKS_XOTUNEABORT_TASKS_XOTUNEABORT_Pos) /*!< Bit mask
                                                                            of TASKS_XOTUNEABORT field.*/
  #define CLOCK_TASKS_XOTUNEABORT_TASKS_XOTUNEABORT_Min (0x1UL)
  #define CLOCK_TASKS_XOTUNEABORT_TASKS_XOTUNEABORT_Max (0x1UL)
  #define CLOCK_TASKS_XOTUNEABORT_TASKS_XOTUNEABORT_Trigger (0x1UL)


/* CLOCK_SUBSCRIBE_XOSTART: Subscribe configuration for task XOSTART */
  #define CLOCK_SUBSCRIBE_XOSTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task XOSTART will subscribe to */
  #define CLOCK_SUBSCRIBE_XOSTART_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_XOSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_XOSTART_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_XOSTART_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_XOSTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_XOSTART_EN_Pos)
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_XOSTOP: Subscribe configuration for task XOSTOP */
  #define CLOCK_SUBSCRIBE_XOSTOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task XOSTOP will subscribe to */
  #define CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_XOSTOP_EN_Pos)
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_PLLSTART: Subscribe configuration for task PLLSTART */
  #define CLOCK_SUBSCRIBE_PLLSTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task PLLSTART will subscribe to */
  #define CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_PLLSTART_EN_Pos)
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_PLLSTOP: Subscribe configuration for task PLLSTOP */
  #define CLOCK_SUBSCRIBE_PLLSTOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task PLLSTOP will subscribe to */
  #define CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_PLLSTOP_EN_Pos)
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_LFCLKSTART: Subscribe configuration for task LFCLKSTART */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task LFCLKSTART will subscribe to */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_LFCLKSTART_EN_Pos)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_LFCLKSTOP: Subscribe configuration for task LFCLKSTOP */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task LFCLKSTOP will subscribe to */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Pos)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_CAL: Subscribe configuration for task CAL */
  #define CLOCK_SUBSCRIBE_CAL_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CAL will subscribe to */
  #define CLOCK_SUBSCRIBE_CAL_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_CAL_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_CAL_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_CAL_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_CAL_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_CAL_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_CAL_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_CAL_EN_Pos)
  #define CLOCK_SUBSCRIBE_CAL_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_CAL_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_CAL_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_CAL_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_XOTUNE: Subscribe configuration for task XOTUNE */
  #define CLOCK_SUBSCRIBE_XOTUNE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task XOTUNE will subscribe to */
  #define CLOCK_SUBSCRIBE_XOTUNE_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_XOTUNE_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_XOTUNE_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_XOTUNE_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_XOTUNE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_XOTUNE_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_XOTUNE_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_XOTUNE_EN_Pos)
  #define CLOCK_SUBSCRIBE_XOTUNE_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_XOTUNE_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_XOTUNE_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_XOTUNE_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_XOTUNEABORT: Subscribe configuration for task XOTUNEABORT */
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task XOTUNEABORT will subscribe to */
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_XOTUNEABORT_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Pos)
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Enabled (0x1UL)


/* CLOCK_EVENTS_XOSTARTED: Crystal oscillator has started */
  #define CLOCK_EVENTS_XOSTARTED_ResetValue (0x00000000UL)

/* EVENTS_XOSTARTED @Bit 0 : Crystal oscillator has started */
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Pos (0UL)
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Msk (0x1UL << CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_XOSTARTED field.*/
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Min (0x0UL)
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Max (0x1UL)
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_NotGenerated (0x0UL)
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Generated (0x1UL)


/* CLOCK_EVENTS_PLLSTARTED: PLL started */
  #define CLOCK_EVENTS_PLLSTARTED_ResetValue (0x00000000UL)

/* EVENTS_PLLSTARTED @Bit 0 : PLL started */
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Pos (0UL)
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Msk (0x1UL << CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Pos) /*!< Bit mask
                                                                            of EVENTS_PLLSTARTED field.*/
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Min (0x0UL)
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Max (0x1UL)
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_NotGenerated (0x0UL)
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Generated (0x1UL)


/* CLOCK_EVENTS_LFCLKSTARTED: LFCLK source started */
  #define CLOCK_EVENTS_LFCLKSTARTED_ResetValue (0x00000000UL)

/* EVENTS_LFCLKSTARTED @Bit 0 : LFCLK source started */
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Pos (0UL)
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Msk (0x1UL << CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Pos) /*!<
                                                                            Bit mask of EVENTS_LFCLKSTARTED field.*/
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Min (0x0UL)
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Max (0x1UL)
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_NotGenerated (0x0UL)
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Generated (0x1UL)


/* CLOCK_EVENTS_DONE: Calibration of LFRC oscillator complete event */
  #define CLOCK_EVENTS_DONE_ResetValue (0x00000000UL)

/* EVENTS_DONE @Bit 0 : Calibration of LFRC oscillator complete event */
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Pos (0UL)
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Msk (0x1UL << CLOCK_EVENTS_DONE_EVENTS_DONE_Pos)
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Min (0x0UL)
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Max (0x1UL)
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_NotGenerated (0x0UL)
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Generated (0x1UL)


/* CLOCK_EVENTS_XOTUNED: HFXO tuning is done. XOTUNED is generated after TASKS_XOSTART or after TASKS_XOTUNE has completed */
  #define CLOCK_EVENTS_XOTUNED_ResetValue (0x00000000UL)

/* EVENTS_XOTUNED @Bit 0 : HFXO tuning is done. XOTUNED is generated after TASKS_XOSTART or after TASKS_XOTUNE has completed */
  #define CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_Pos (0UL)
  #define CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_Msk (0x1UL << CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_Pos) /*!< Bit mask of
                                                                            EVENTS_XOTUNED field.*/
  #define CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_Min (0x0UL)
  #define CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_Max (0x1UL)
  #define CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_NotGenerated (0x0UL)
  #define CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_Generated (0x1UL)


/* CLOCK_EVENTS_XOTUNEERROR: HFXO quality issue detected, XOTUNE is needed */
  #define CLOCK_EVENTS_XOTUNEERROR_ResetValue (0x00000000UL)

/* EVENTS_XOTUNEERROR @Bit 0 : HFXO quality issue detected, XOTUNE is needed */
  #define CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_Pos (0UL)
  #define CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_Msk (0x1UL << CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_Pos) /*!< Bit
                                                                            mask of EVENTS_XOTUNEERROR field.*/
  #define CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_Min (0x0UL)
  #define CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_Max (0x1UL)
  #define CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_NotGenerated (0x0UL)
  #define CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_Generated (0x1UL)


/* CLOCK_EVENTS_XOTUNEFAILED: HFXO tuning could not be completed */
  #define CLOCK_EVENTS_XOTUNEFAILED_ResetValue (0x00000000UL)

/* EVENTS_XOTUNEFAILED @Bit 0 : HFXO tuning could not be completed */
  #define CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_Pos (0UL)
  #define CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_Msk (0x1UL << CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_Pos) /*!<
                                                                            Bit mask of EVENTS_XOTUNEFAILED field.*/
  #define CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_Min (0x0UL)
  #define CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_Max (0x1UL)
  #define CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_NotGenerated (0x0UL)
  #define CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_Generated (0x1UL)


/* CLOCK_PUBLISH_XOSTARTED: Publish configuration for event XOSTARTED */
  #define CLOCK_PUBLISH_XOSTARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event XOSTARTED will publish to */
  #define CLOCK_PUBLISH_XOSTARTED_CHIDX_Pos (0UL)
  #define CLOCK_PUBLISH_XOSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_XOSTARTED_CHIDX_Pos)
  #define CLOCK_PUBLISH_XOSTARTED_CHIDX_Min (0x00UL)
  #define CLOCK_PUBLISH_XOSTARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_XOSTARTED_EN_Pos (31UL)
  #define CLOCK_PUBLISH_XOSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_XOSTARTED_EN_Pos)
  #define CLOCK_PUBLISH_XOSTARTED_EN_Min (0x0UL)
  #define CLOCK_PUBLISH_XOSTARTED_EN_Max (0x1UL)
  #define CLOCK_PUBLISH_XOSTARTED_EN_Disabled (0x0UL)
  #define CLOCK_PUBLISH_XOSTARTED_EN_Enabled (0x1UL)


/* CLOCK_PUBLISH_PLLSTARTED: Publish configuration for event PLLSTARTED */
  #define CLOCK_PUBLISH_PLLSTARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event PLLSTARTED will publish to */
  #define CLOCK_PUBLISH_PLLSTARTED_CHIDX_Pos (0UL)
  #define CLOCK_PUBLISH_PLLSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_PLLSTARTED_CHIDX_Pos)
  #define CLOCK_PUBLISH_PLLSTARTED_CHIDX_Min (0x00UL)
  #define CLOCK_PUBLISH_PLLSTARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Pos (31UL)
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_PLLSTARTED_EN_Pos)
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Min (0x0UL)
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Max (0x1UL)
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Disabled (0x0UL)
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Enabled (0x1UL)


/* CLOCK_PUBLISH_LFCLKSTARTED: Publish configuration for event LFCLKSTARTED */
  #define CLOCK_PUBLISH_LFCLKSTARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event LFCLKSTARTED will publish to */
  #define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Pos (0UL)
  #define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Pos)
  #define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Min (0x00UL)
  #define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Pos (31UL)
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_LFCLKSTARTED_EN_Pos)
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Min (0x0UL)
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Max (0x1UL)
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Disabled (0x0UL)
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Enabled (0x1UL)


/* CLOCK_PUBLISH_DONE: Publish configuration for event DONE */
  #define CLOCK_PUBLISH_DONE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DONE will publish to */
  #define CLOCK_PUBLISH_DONE_CHIDX_Pos (0UL)
  #define CLOCK_PUBLISH_DONE_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_DONE_CHIDX_Pos)
  #define CLOCK_PUBLISH_DONE_CHIDX_Min (0x00UL)
  #define CLOCK_PUBLISH_DONE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_DONE_EN_Pos (31UL)
  #define CLOCK_PUBLISH_DONE_EN_Msk (0x1UL << CLOCK_PUBLISH_DONE_EN_Pos)
  #define CLOCK_PUBLISH_DONE_EN_Min (0x0UL)
  #define CLOCK_PUBLISH_DONE_EN_Max (0x1UL)
  #define CLOCK_PUBLISH_DONE_EN_Disabled (0x0UL)
  #define CLOCK_PUBLISH_DONE_EN_Enabled (0x1UL)


/* CLOCK_PUBLISH_XOTUNED: Publish configuration for event XOTUNED */
  #define CLOCK_PUBLISH_XOTUNED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event XOTUNED will publish to */
  #define CLOCK_PUBLISH_XOTUNED_CHIDX_Pos (0UL)
  #define CLOCK_PUBLISH_XOTUNED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_XOTUNED_CHIDX_Pos)
  #define CLOCK_PUBLISH_XOTUNED_CHIDX_Min (0x00UL)
  #define CLOCK_PUBLISH_XOTUNED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_XOTUNED_EN_Pos (31UL)
  #define CLOCK_PUBLISH_XOTUNED_EN_Msk (0x1UL << CLOCK_PUBLISH_XOTUNED_EN_Pos)
  #define CLOCK_PUBLISH_XOTUNED_EN_Min (0x0UL)
  #define CLOCK_PUBLISH_XOTUNED_EN_Max (0x1UL)
  #define CLOCK_PUBLISH_XOTUNED_EN_Disabled (0x0UL)
  #define CLOCK_PUBLISH_XOTUNED_EN_Enabled (0x1UL)


/* CLOCK_PUBLISH_XOTUNEERROR: Publish configuration for event XOTUNEERROR */
  #define CLOCK_PUBLISH_XOTUNEERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event XOTUNEERROR will publish to */
  #define CLOCK_PUBLISH_XOTUNEERROR_CHIDX_Pos (0UL)
  #define CLOCK_PUBLISH_XOTUNEERROR_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_XOTUNEERROR_CHIDX_Pos)
  #define CLOCK_PUBLISH_XOTUNEERROR_CHIDX_Min (0x00UL)
  #define CLOCK_PUBLISH_XOTUNEERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_XOTUNEERROR_EN_Pos (31UL)
  #define CLOCK_PUBLISH_XOTUNEERROR_EN_Msk (0x1UL << CLOCK_PUBLISH_XOTUNEERROR_EN_Pos)
  #define CLOCK_PUBLISH_XOTUNEERROR_EN_Min (0x0UL)
  #define CLOCK_PUBLISH_XOTUNEERROR_EN_Max (0x1UL)
  #define CLOCK_PUBLISH_XOTUNEERROR_EN_Disabled (0x0UL)
  #define CLOCK_PUBLISH_XOTUNEERROR_EN_Enabled (0x1UL)


/* CLOCK_PUBLISH_XOTUNEFAILED: Publish configuration for event XOTUNEFAILED */
  #define CLOCK_PUBLISH_XOTUNEFAILED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event XOTUNEFAILED will publish to */
  #define CLOCK_PUBLISH_XOTUNEFAILED_CHIDX_Pos (0UL)
  #define CLOCK_PUBLISH_XOTUNEFAILED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_XOTUNEFAILED_CHIDX_Pos)
  #define CLOCK_PUBLISH_XOTUNEFAILED_CHIDX_Min (0x00UL)
  #define CLOCK_PUBLISH_XOTUNEFAILED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_XOTUNEFAILED_EN_Pos (31UL)
  #define CLOCK_PUBLISH_XOTUNEFAILED_EN_Msk (0x1UL << CLOCK_PUBLISH_XOTUNEFAILED_EN_Pos)
  #define CLOCK_PUBLISH_XOTUNEFAILED_EN_Min (0x0UL)
  #define CLOCK_PUBLISH_XOTUNEFAILED_EN_Max (0x1UL)
  #define CLOCK_PUBLISH_XOTUNEFAILED_EN_Disabled (0x0UL)
  #define CLOCK_PUBLISH_XOTUNEFAILED_EN_Enabled (0x1UL)


/* CLOCK_INTEN: Enable or disable interrupt */
  #define CLOCK_INTEN_ResetValue (0x00000000UL)

/* XOSTARTED @Bit 0 : Enable or disable interrupt for event XOSTARTED */
  #define CLOCK_INTEN_XOSTARTED_Pos (0UL)
  #define CLOCK_INTEN_XOSTARTED_Msk (0x1UL << CLOCK_INTEN_XOSTARTED_Pos)
  #define CLOCK_INTEN_XOSTARTED_Min (0x0UL)
  #define CLOCK_INTEN_XOSTARTED_Max (0x1UL)
  #define CLOCK_INTEN_XOSTARTED_Disabled (0x0UL)
  #define CLOCK_INTEN_XOSTARTED_Enabled (0x1UL)

/* PLLSTARTED @Bit 1 : Enable or disable interrupt for event PLLSTARTED */
  #define CLOCK_INTEN_PLLSTARTED_Pos (1UL)
  #define CLOCK_INTEN_PLLSTARTED_Msk (0x1UL << CLOCK_INTEN_PLLSTARTED_Pos)
  #define CLOCK_INTEN_PLLSTARTED_Min (0x0UL)
  #define CLOCK_INTEN_PLLSTARTED_Max (0x1UL)
  #define CLOCK_INTEN_PLLSTARTED_Disabled (0x0UL)
  #define CLOCK_INTEN_PLLSTARTED_Enabled (0x1UL)

/* LFCLKSTARTED @Bit 2 : Enable or disable interrupt for event LFCLKSTARTED */
  #define CLOCK_INTEN_LFCLKSTARTED_Pos (2UL)
  #define CLOCK_INTEN_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTEN_LFCLKSTARTED_Pos)
  #define CLOCK_INTEN_LFCLKSTARTED_Min (0x0UL)
  #define CLOCK_INTEN_LFCLKSTARTED_Max (0x1UL)
  #define CLOCK_INTEN_LFCLKSTARTED_Disabled (0x0UL)
  #define CLOCK_INTEN_LFCLKSTARTED_Enabled (0x1UL)

/* DONE @Bit 3 : Enable or disable interrupt for event DONE */
  #define CLOCK_INTEN_DONE_Pos (3UL)
  #define CLOCK_INTEN_DONE_Msk (0x1UL << CLOCK_INTEN_DONE_Pos)
  #define CLOCK_INTEN_DONE_Min (0x0UL)
  #define CLOCK_INTEN_DONE_Max (0x1UL)
  #define CLOCK_INTEN_DONE_Disabled (0x0UL)
  #define CLOCK_INTEN_DONE_Enabled (0x1UL)

/* XOTUNED @Bit 4 : Enable or disable interrupt for event XOTUNED */
  #define CLOCK_INTEN_XOTUNED_Pos (4UL)
  #define CLOCK_INTEN_XOTUNED_Msk (0x1UL << CLOCK_INTEN_XOTUNED_Pos)
  #define CLOCK_INTEN_XOTUNED_Min (0x0UL)
  #define CLOCK_INTEN_XOTUNED_Max (0x1UL)
  #define CLOCK_INTEN_XOTUNED_Disabled (0x0UL)
  #define CLOCK_INTEN_XOTUNED_Enabled (0x1UL)

/* XOTUNEERROR @Bit 5 : Enable or disable interrupt for event XOTUNEERROR */
  #define CLOCK_INTEN_XOTUNEERROR_Pos (5UL)
  #define CLOCK_INTEN_XOTUNEERROR_Msk (0x1UL << CLOCK_INTEN_XOTUNEERROR_Pos)
  #define CLOCK_INTEN_XOTUNEERROR_Min (0x0UL)
  #define CLOCK_INTEN_XOTUNEERROR_Max (0x1UL)
  #define CLOCK_INTEN_XOTUNEERROR_Disabled (0x0UL)
  #define CLOCK_INTEN_XOTUNEERROR_Enabled (0x1UL)

/* XOTUNEFAILED @Bit 6 : Enable or disable interrupt for event XOTUNEFAILED */
  #define CLOCK_INTEN_XOTUNEFAILED_Pos (6UL)
  #define CLOCK_INTEN_XOTUNEFAILED_Msk (0x1UL << CLOCK_INTEN_XOTUNEFAILED_Pos)
  #define CLOCK_INTEN_XOTUNEFAILED_Min (0x0UL)
  #define CLOCK_INTEN_XOTUNEFAILED_Max (0x1UL)
  #define CLOCK_INTEN_XOTUNEFAILED_Disabled (0x0UL)
  #define CLOCK_INTEN_XOTUNEFAILED_Enabled (0x1UL)


/* CLOCK_INTENSET: Enable interrupt */
  #define CLOCK_INTENSET_ResetValue (0x00000000UL)

/* XOSTARTED @Bit 0 : Write '1' to enable interrupt for event XOSTARTED */
  #define CLOCK_INTENSET_XOSTARTED_Pos (0UL)
  #define CLOCK_INTENSET_XOSTARTED_Msk (0x1UL << CLOCK_INTENSET_XOSTARTED_Pos)
  #define CLOCK_INTENSET_XOSTARTED_Min (0x0UL)
  #define CLOCK_INTENSET_XOSTARTED_Max (0x1UL)
  #define CLOCK_INTENSET_XOSTARTED_Set (0x1UL)
  #define CLOCK_INTENSET_XOSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENSET_XOSTARTED_Enabled (0x1UL)

/* PLLSTARTED @Bit 1 : Write '1' to enable interrupt for event PLLSTARTED */
  #define CLOCK_INTENSET_PLLSTARTED_Pos (1UL)
  #define CLOCK_INTENSET_PLLSTARTED_Msk (0x1UL << CLOCK_INTENSET_PLLSTARTED_Pos)
  #define CLOCK_INTENSET_PLLSTARTED_Min (0x0UL)
  #define CLOCK_INTENSET_PLLSTARTED_Max (0x1UL)
  #define CLOCK_INTENSET_PLLSTARTED_Set (0x1UL)
  #define CLOCK_INTENSET_PLLSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENSET_PLLSTARTED_Enabled (0x1UL)

/* LFCLKSTARTED @Bit 2 : Write '1' to enable interrupt for event LFCLKSTARTED */
  #define CLOCK_INTENSET_LFCLKSTARTED_Pos (2UL)
  #define CLOCK_INTENSET_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTENSET_LFCLKSTARTED_Pos)
  #define CLOCK_INTENSET_LFCLKSTARTED_Min (0x0UL)
  #define CLOCK_INTENSET_LFCLKSTARTED_Max (0x1UL)
  #define CLOCK_INTENSET_LFCLKSTARTED_Set (0x1UL)
  #define CLOCK_INTENSET_LFCLKSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENSET_LFCLKSTARTED_Enabled (0x1UL)

/* DONE @Bit 3 : Write '1' to enable interrupt for event DONE */
  #define CLOCK_INTENSET_DONE_Pos (3UL)
  #define CLOCK_INTENSET_DONE_Msk (0x1UL << CLOCK_INTENSET_DONE_Pos)
  #define CLOCK_INTENSET_DONE_Min (0x0UL)
  #define CLOCK_INTENSET_DONE_Max (0x1UL)
  #define CLOCK_INTENSET_DONE_Set (0x1UL)
  #define CLOCK_INTENSET_DONE_Disabled (0x0UL)
  #define CLOCK_INTENSET_DONE_Enabled (0x1UL)

/* XOTUNED @Bit 4 : Write '1' to enable interrupt for event XOTUNED */
  #define CLOCK_INTENSET_XOTUNED_Pos (4UL)
  #define CLOCK_INTENSET_XOTUNED_Msk (0x1UL << CLOCK_INTENSET_XOTUNED_Pos)
  #define CLOCK_INTENSET_XOTUNED_Min (0x0UL)
  #define CLOCK_INTENSET_XOTUNED_Max (0x1UL)
  #define CLOCK_INTENSET_XOTUNED_Set (0x1UL)
  #define CLOCK_INTENSET_XOTUNED_Disabled (0x0UL)
  #define CLOCK_INTENSET_XOTUNED_Enabled (0x1UL)

/* XOTUNEERROR @Bit 5 : Write '1' to enable interrupt for event XOTUNEERROR */
  #define CLOCK_INTENSET_XOTUNEERROR_Pos (5UL)
  #define CLOCK_INTENSET_XOTUNEERROR_Msk (0x1UL << CLOCK_INTENSET_XOTUNEERROR_Pos)
  #define CLOCK_INTENSET_XOTUNEERROR_Min (0x0UL)
  #define CLOCK_INTENSET_XOTUNEERROR_Max (0x1UL)
  #define CLOCK_INTENSET_XOTUNEERROR_Set (0x1UL)
  #define CLOCK_INTENSET_XOTUNEERROR_Disabled (0x0UL)
  #define CLOCK_INTENSET_XOTUNEERROR_Enabled (0x1UL)

/* XOTUNEFAILED @Bit 6 : Write '1' to enable interrupt for event XOTUNEFAILED */
  #define CLOCK_INTENSET_XOTUNEFAILED_Pos (6UL)
  #define CLOCK_INTENSET_XOTUNEFAILED_Msk (0x1UL << CLOCK_INTENSET_XOTUNEFAILED_Pos)
  #define CLOCK_INTENSET_XOTUNEFAILED_Min (0x0UL)
  #define CLOCK_INTENSET_XOTUNEFAILED_Max (0x1UL)
  #define CLOCK_INTENSET_XOTUNEFAILED_Set (0x1UL)
  #define CLOCK_INTENSET_XOTUNEFAILED_Disabled (0x0UL)
  #define CLOCK_INTENSET_XOTUNEFAILED_Enabled (0x1UL)


/* CLOCK_INTENCLR: Disable interrupt */
  #define CLOCK_INTENCLR_ResetValue (0x00000000UL)

/* XOSTARTED @Bit 0 : Write '1' to disable interrupt for event XOSTARTED */
  #define CLOCK_INTENCLR_XOSTARTED_Pos (0UL)
  #define CLOCK_INTENCLR_XOSTARTED_Msk (0x1UL << CLOCK_INTENCLR_XOSTARTED_Pos)
  #define CLOCK_INTENCLR_XOSTARTED_Min (0x0UL)
  #define CLOCK_INTENCLR_XOSTARTED_Max (0x1UL)
  #define CLOCK_INTENCLR_XOSTARTED_Clear (0x1UL)
  #define CLOCK_INTENCLR_XOSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENCLR_XOSTARTED_Enabled (0x1UL)

/* PLLSTARTED @Bit 1 : Write '1' to disable interrupt for event PLLSTARTED */
  #define CLOCK_INTENCLR_PLLSTARTED_Pos (1UL)
  #define CLOCK_INTENCLR_PLLSTARTED_Msk (0x1UL << CLOCK_INTENCLR_PLLSTARTED_Pos)
  #define CLOCK_INTENCLR_PLLSTARTED_Min (0x0UL)
  #define CLOCK_INTENCLR_PLLSTARTED_Max (0x1UL)
  #define CLOCK_INTENCLR_PLLSTARTED_Clear (0x1UL)
  #define CLOCK_INTENCLR_PLLSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENCLR_PLLSTARTED_Enabled (0x1UL)

/* LFCLKSTARTED @Bit 2 : Write '1' to disable interrupt for event LFCLKSTARTED */
  #define CLOCK_INTENCLR_LFCLKSTARTED_Pos (2UL)
  #define CLOCK_INTENCLR_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTENCLR_LFCLKSTARTED_Pos)
  #define CLOCK_INTENCLR_LFCLKSTARTED_Min (0x0UL)
  #define CLOCK_INTENCLR_LFCLKSTARTED_Max (0x1UL)
  #define CLOCK_INTENCLR_LFCLKSTARTED_Clear (0x1UL)
  #define CLOCK_INTENCLR_LFCLKSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENCLR_LFCLKSTARTED_Enabled (0x1UL)

/* DONE @Bit 3 : Write '1' to disable interrupt for event DONE */
  #define CLOCK_INTENCLR_DONE_Pos (3UL)
  #define CLOCK_INTENCLR_DONE_Msk (0x1UL << CLOCK_INTENCLR_DONE_Pos)
  #define CLOCK_INTENCLR_DONE_Min (0x0UL)
  #define CLOCK_INTENCLR_DONE_Max (0x1UL)
  #define CLOCK_INTENCLR_DONE_Clear (0x1UL)
  #define CLOCK_INTENCLR_DONE_Disabled (0x0UL)
  #define CLOCK_INTENCLR_DONE_Enabled (0x1UL)

/* XOTUNED @Bit 4 : Write '1' to disable interrupt for event XOTUNED */
  #define CLOCK_INTENCLR_XOTUNED_Pos (4UL)
  #define CLOCK_INTENCLR_XOTUNED_Msk (0x1UL << CLOCK_INTENCLR_XOTUNED_Pos)
  #define CLOCK_INTENCLR_XOTUNED_Min (0x0UL)
  #define CLOCK_INTENCLR_XOTUNED_Max (0x1UL)
  #define CLOCK_INTENCLR_XOTUNED_Clear (0x1UL)
  #define CLOCK_INTENCLR_XOTUNED_Disabled (0x0UL)
  #define CLOCK_INTENCLR_XOTUNED_Enabled (0x1UL)

/* XOTUNEERROR @Bit 5 : Write '1' to disable interrupt for event XOTUNEERROR */
  #define CLOCK_INTENCLR_XOTUNEERROR_Pos (5UL)
  #define CLOCK_INTENCLR_XOTUNEERROR_Msk (0x1UL << CLOCK_INTENCLR_XOTUNEERROR_Pos)
  #define CLOCK_INTENCLR_XOTUNEERROR_Min (0x0UL)
  #define CLOCK_INTENCLR_XOTUNEERROR_Max (0x1UL)
  #define CLOCK_INTENCLR_XOTUNEERROR_Clear (0x1UL)
  #define CLOCK_INTENCLR_XOTUNEERROR_Disabled (0x0UL)
  #define CLOCK_INTENCLR_XOTUNEERROR_Enabled (0x1UL)

/* XOTUNEFAILED @Bit 6 : Write '1' to disable interrupt for event XOTUNEFAILED */
  #define CLOCK_INTENCLR_XOTUNEFAILED_Pos (6UL)
  #define CLOCK_INTENCLR_XOTUNEFAILED_Msk (0x1UL << CLOCK_INTENCLR_XOTUNEFAILED_Pos)
  #define CLOCK_INTENCLR_XOTUNEFAILED_Min (0x0UL)
  #define CLOCK_INTENCLR_XOTUNEFAILED_Max (0x1UL)
  #define CLOCK_INTENCLR_XOTUNEFAILED_Clear (0x1UL)
  #define CLOCK_INTENCLR_XOTUNEFAILED_Disabled (0x0UL)
  #define CLOCK_INTENCLR_XOTUNEFAILED_Enabled (0x1UL)


/* CLOCK_INTPEND: Pending interrupts */
  #define CLOCK_INTPEND_ResetValue (0x00000000UL)

/* XOSTARTED @Bit 0 : Read pending status of interrupt for event XOSTARTED */
  #define CLOCK_INTPEND_XOSTARTED_Pos (0UL)
  #define CLOCK_INTPEND_XOSTARTED_Msk (0x1UL << CLOCK_INTPEND_XOSTARTED_Pos)
  #define CLOCK_INTPEND_XOSTARTED_Min (0x0UL)
  #define CLOCK_INTPEND_XOSTARTED_Max (0x1UL)
  #define CLOCK_INTPEND_XOSTARTED_NotPending (0x0UL)
  #define CLOCK_INTPEND_XOSTARTED_Pending (0x1UL)

/* PLLSTARTED @Bit 1 : Read pending status of interrupt for event PLLSTARTED */
  #define CLOCK_INTPEND_PLLSTARTED_Pos (1UL)
  #define CLOCK_INTPEND_PLLSTARTED_Msk (0x1UL << CLOCK_INTPEND_PLLSTARTED_Pos)
  #define CLOCK_INTPEND_PLLSTARTED_Min (0x0UL)
  #define CLOCK_INTPEND_PLLSTARTED_Max (0x1UL)
  #define CLOCK_INTPEND_PLLSTARTED_NotPending (0x0UL)
  #define CLOCK_INTPEND_PLLSTARTED_Pending (0x1UL)

/* LFCLKSTARTED @Bit 2 : Read pending status of interrupt for event LFCLKSTARTED */
  #define CLOCK_INTPEND_LFCLKSTARTED_Pos (2UL)
  #define CLOCK_INTPEND_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTPEND_LFCLKSTARTED_Pos)
  #define CLOCK_INTPEND_LFCLKSTARTED_Min (0x0UL)
  #define CLOCK_INTPEND_LFCLKSTARTED_Max (0x1UL)
  #define CLOCK_INTPEND_LFCLKSTARTED_NotPending (0x0UL)
  #define CLOCK_INTPEND_LFCLKSTARTED_Pending (0x1UL)

/* DONE @Bit 3 : Read pending status of interrupt for event DONE */
  #define CLOCK_INTPEND_DONE_Pos (3UL)
  #define CLOCK_INTPEND_DONE_Msk (0x1UL << CLOCK_INTPEND_DONE_Pos)
  #define CLOCK_INTPEND_DONE_Min (0x0UL)
  #define CLOCK_INTPEND_DONE_Max (0x1UL)
  #define CLOCK_INTPEND_DONE_NotPending (0x0UL)
  #define CLOCK_INTPEND_DONE_Pending (0x1UL)

/* XOTUNED @Bit 4 : Read pending status of interrupt for event XOTUNED */
  #define CLOCK_INTPEND_XOTUNED_Pos (4UL)
  #define CLOCK_INTPEND_XOTUNED_Msk (0x1UL << CLOCK_INTPEND_XOTUNED_Pos)
  #define CLOCK_INTPEND_XOTUNED_Min (0x0UL)
  #define CLOCK_INTPEND_XOTUNED_Max (0x1UL)
  #define CLOCK_INTPEND_XOTUNED_NotPending (0x0UL)
  #define CLOCK_INTPEND_XOTUNED_Pending (0x1UL)

/* XOTUNEERROR @Bit 5 : Read pending status of interrupt for event XOTUNEERROR */
  #define CLOCK_INTPEND_XOTUNEERROR_Pos (5UL)
  #define CLOCK_INTPEND_XOTUNEERROR_Msk (0x1UL << CLOCK_INTPEND_XOTUNEERROR_Pos)
  #define CLOCK_INTPEND_XOTUNEERROR_Min (0x0UL)
  #define CLOCK_INTPEND_XOTUNEERROR_Max (0x1UL)
  #define CLOCK_INTPEND_XOTUNEERROR_NotPending (0x0UL)
  #define CLOCK_INTPEND_XOTUNEERROR_Pending (0x1UL)

/* XOTUNEFAILED @Bit 6 : Read pending status of interrupt for event XOTUNEFAILED */
  #define CLOCK_INTPEND_XOTUNEFAILED_Pos (6UL)
  #define CLOCK_INTPEND_XOTUNEFAILED_Msk (0x1UL << CLOCK_INTPEND_XOTUNEFAILED_Pos)
  #define CLOCK_INTPEND_XOTUNEFAILED_Min (0x0UL)
  #define CLOCK_INTPEND_XOTUNEFAILED_Max (0x1UL)
  #define CLOCK_INTPEND_XOTUNEFAILED_NotPending (0x0UL)
  #define CLOCK_INTPEND_XOTUNEFAILED_Pending (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           COMP                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct COMP ======================================================= */
/**
  * @brief Comparator
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_SAMPLE;                      /*!< (@ 0x00000008) Sample comparator value. This task requires that COMP
                                                                         has been started by the START Task.*/
    __IM uint32_t RESERVED[29];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_SAMPLE;
    __IM uint32_t RESERVED1[29];
    __IOM uint32_t EVENTS_READY;
    __IOM uint32_t EVENTS_DOWN;
    __IOM uint32_t EVENTS_UP;
    __IOM uint32_t EVENTS_CROSS;
    __IM uint32_t RESERVED2[28];
    __IOM uint32_t PUBLISH_READY;
    __IOM uint32_t PUBLISH_DOWN;
    __IOM uint32_t PUBLISH_UP;
    __IOM uint32_t PUBLISH_CROSS;
    __IM uint32_t RESERVED3[28];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED4[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED5[60];
    __IM uint32_t RESULT;
    __IM uint32_t RESERVED6[63];
    __IOM uint32_t ENABLE;
    __IOM uint32_t PSEL;
    __IOM uint32_t REFSEL;
    __IOM uint32_t EXTREFSEL;
    __IM uint32_t RESERVED7[8];
    __IOM uint32_t TH;
    __IOM uint32_t MODE;
    __IOM uint32_t HYST;
    __IOM uint32_t ISOURCE;
  } NRF_COMP_Type;

/* COMP_TASKS_START: Start comparator */
  #define COMP_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start comparator */
  #define COMP_TASKS_START_TASKS_START_Pos (0UL)
  #define COMP_TASKS_START_TASKS_START_Msk (0x1UL << COMP_TASKS_START_TASKS_START_Pos)
  #define COMP_TASKS_START_TASKS_START_Min (0x1UL)
  #define COMP_TASKS_START_TASKS_START_Max (0x1UL)
  #define COMP_TASKS_START_TASKS_START_Trigger (0x1UL)


/* COMP_TASKS_STOP: Stop comparator */
  #define COMP_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop comparator */
  #define COMP_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define COMP_TASKS_STOP_TASKS_STOP_Msk (0x1UL << COMP_TASKS_STOP_TASKS_STOP_Pos)
  #define COMP_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define COMP_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define COMP_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* COMP_TASKS_SAMPLE: Sample comparator value. This task requires that COMP has been started by the START Task. */
  #define COMP_TASKS_SAMPLE_ResetValue (0x00000000UL)

/* TASKS_SAMPLE @Bit 0 : Sample comparator value. This task requires that COMP has been started by the START Task. */
  #define COMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos (0UL)
  #define COMP_TASKS_SAMPLE_TASKS_SAMPLE_Msk (0x1UL << COMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos)
  #define COMP_TASKS_SAMPLE_TASKS_SAMPLE_Min (0x1UL)
  #define COMP_TASKS_SAMPLE_TASKS_SAMPLE_Max (0x1UL)
  #define COMP_TASKS_SAMPLE_TASKS_SAMPLE_Trigger (0x1UL)


/* COMP_SUBSCRIBE_START: Subscribe configuration for task START */
  #define COMP_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define COMP_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define COMP_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << COMP_SUBSCRIBE_START_CHIDX_Pos)
  #define COMP_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define COMP_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_SUBSCRIBE_START_EN_Pos (31UL)
  #define COMP_SUBSCRIBE_START_EN_Msk (0x1UL << COMP_SUBSCRIBE_START_EN_Pos)
  #define COMP_SUBSCRIBE_START_EN_Min (0x0UL)
  #define COMP_SUBSCRIBE_START_EN_Max (0x1UL)
  #define COMP_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define COMP_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* COMP_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define COMP_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define COMP_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define COMP_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << COMP_SUBSCRIBE_STOP_CHIDX_Pos)
  #define COMP_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define COMP_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define COMP_SUBSCRIBE_STOP_EN_Msk (0x1UL << COMP_SUBSCRIBE_STOP_EN_Pos)
  #define COMP_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define COMP_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define COMP_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define COMP_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* COMP_SUBSCRIBE_SAMPLE: Subscribe configuration for task SAMPLE */
  #define COMP_SUBSCRIBE_SAMPLE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SAMPLE will subscribe to */
  #define COMP_SUBSCRIBE_SAMPLE_CHIDX_Pos (0UL)
  #define COMP_SUBSCRIBE_SAMPLE_CHIDX_Msk (0xFFUL << COMP_SUBSCRIBE_SAMPLE_CHIDX_Pos)
  #define COMP_SUBSCRIBE_SAMPLE_CHIDX_Min (0x00UL)
  #define COMP_SUBSCRIBE_SAMPLE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_SUBSCRIBE_SAMPLE_EN_Pos (31UL)
  #define COMP_SUBSCRIBE_SAMPLE_EN_Msk (0x1UL << COMP_SUBSCRIBE_SAMPLE_EN_Pos)
  #define COMP_SUBSCRIBE_SAMPLE_EN_Min (0x0UL)
  #define COMP_SUBSCRIBE_SAMPLE_EN_Max (0x1UL)
  #define COMP_SUBSCRIBE_SAMPLE_EN_Disabled (0x0UL)
  #define COMP_SUBSCRIBE_SAMPLE_EN_Enabled (0x1UL)


/* COMP_EVENTS_READY: COMP is ready and output is valid */
  #define COMP_EVENTS_READY_ResetValue (0x00000000UL)

/* EVENTS_READY @Bit 0 : COMP is ready and output is valid */
  #define COMP_EVENTS_READY_EVENTS_READY_Pos (0UL)
  #define COMP_EVENTS_READY_EVENTS_READY_Msk (0x1UL << COMP_EVENTS_READY_EVENTS_READY_Pos)
  #define COMP_EVENTS_READY_EVENTS_READY_Min (0x0UL)
  #define COMP_EVENTS_READY_EVENTS_READY_Max (0x1UL)
  #define COMP_EVENTS_READY_EVENTS_READY_NotGenerated (0x0UL)
  #define COMP_EVENTS_READY_EVENTS_READY_Generated (0x1UL)


/* COMP_EVENTS_DOWN: Downward crossing */
  #define COMP_EVENTS_DOWN_ResetValue (0x00000000UL)

/* EVENTS_DOWN @Bit 0 : Downward crossing */
  #define COMP_EVENTS_DOWN_EVENTS_DOWN_Pos (0UL)
  #define COMP_EVENTS_DOWN_EVENTS_DOWN_Msk (0x1UL << COMP_EVENTS_DOWN_EVENTS_DOWN_Pos)
  #define COMP_EVENTS_DOWN_EVENTS_DOWN_Min (0x0UL)
  #define COMP_EVENTS_DOWN_EVENTS_DOWN_Max (0x1UL)
  #define COMP_EVENTS_DOWN_EVENTS_DOWN_NotGenerated (0x0UL)
  #define COMP_EVENTS_DOWN_EVENTS_DOWN_Generated (0x1UL)


/* COMP_EVENTS_UP: Upward crossing */
  #define COMP_EVENTS_UP_ResetValue (0x00000000UL)

/* EVENTS_UP @Bit 0 : Upward crossing */
  #define COMP_EVENTS_UP_EVENTS_UP_Pos (0UL)
  #define COMP_EVENTS_UP_EVENTS_UP_Msk (0x1UL << COMP_EVENTS_UP_EVENTS_UP_Pos)
  #define COMP_EVENTS_UP_EVENTS_UP_Min (0x0UL)
  #define COMP_EVENTS_UP_EVENTS_UP_Max (0x1UL)
  #define COMP_EVENTS_UP_EVENTS_UP_NotGenerated (0x0UL)
  #define COMP_EVENTS_UP_EVENTS_UP_Generated (0x1UL)


/* COMP_EVENTS_CROSS: Downward or upward crossing */
  #define COMP_EVENTS_CROSS_ResetValue (0x00000000UL)

/* EVENTS_CROSS @Bit 0 : Downward or upward crossing */
  #define COMP_EVENTS_CROSS_EVENTS_CROSS_Pos (0UL)
  #define COMP_EVENTS_CROSS_EVENTS_CROSS_Msk (0x1UL << COMP_EVENTS_CROSS_EVENTS_CROSS_Pos)
  #define COMP_EVENTS_CROSS_EVENTS_CROSS_Min (0x0UL)
  #define COMP_EVENTS_CROSS_EVENTS_CROSS_Max (0x1UL)
  #define COMP_EVENTS_CROSS_EVENTS_CROSS_NotGenerated (0x0UL)
  #define COMP_EVENTS_CROSS_EVENTS_CROSS_Generated (0x1UL)


/* COMP_PUBLISH_READY: Publish configuration for event READY */
  #define COMP_PUBLISH_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define COMP_PUBLISH_READY_CHIDX_Pos (0UL)
  #define COMP_PUBLISH_READY_CHIDX_Msk (0xFFUL << COMP_PUBLISH_READY_CHIDX_Pos)
  #define COMP_PUBLISH_READY_CHIDX_Min (0x00UL)
  #define COMP_PUBLISH_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_PUBLISH_READY_EN_Pos (31UL)
  #define COMP_PUBLISH_READY_EN_Msk (0x1UL << COMP_PUBLISH_READY_EN_Pos)
  #define COMP_PUBLISH_READY_EN_Min (0x0UL)
  #define COMP_PUBLISH_READY_EN_Max (0x1UL)
  #define COMP_PUBLISH_READY_EN_Disabled (0x0UL)
  #define COMP_PUBLISH_READY_EN_Enabled (0x1UL)


/* COMP_PUBLISH_DOWN: Publish configuration for event DOWN */
  #define COMP_PUBLISH_DOWN_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DOWN will publish to */
  #define COMP_PUBLISH_DOWN_CHIDX_Pos (0UL)
  #define COMP_PUBLISH_DOWN_CHIDX_Msk (0xFFUL << COMP_PUBLISH_DOWN_CHIDX_Pos)
  #define COMP_PUBLISH_DOWN_CHIDX_Min (0x00UL)
  #define COMP_PUBLISH_DOWN_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_PUBLISH_DOWN_EN_Pos (31UL)
  #define COMP_PUBLISH_DOWN_EN_Msk (0x1UL << COMP_PUBLISH_DOWN_EN_Pos)
  #define COMP_PUBLISH_DOWN_EN_Min (0x0UL)
  #define COMP_PUBLISH_DOWN_EN_Max (0x1UL)
  #define COMP_PUBLISH_DOWN_EN_Disabled (0x0UL)
  #define COMP_PUBLISH_DOWN_EN_Enabled (0x1UL)


/* COMP_PUBLISH_UP: Publish configuration for event UP */
  #define COMP_PUBLISH_UP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event UP will publish to */
  #define COMP_PUBLISH_UP_CHIDX_Pos (0UL)
  #define COMP_PUBLISH_UP_CHIDX_Msk (0xFFUL << COMP_PUBLISH_UP_CHIDX_Pos)
  #define COMP_PUBLISH_UP_CHIDX_Min (0x00UL)
  #define COMP_PUBLISH_UP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_PUBLISH_UP_EN_Pos (31UL)
  #define COMP_PUBLISH_UP_EN_Msk (0x1UL << COMP_PUBLISH_UP_EN_Pos)
  #define COMP_PUBLISH_UP_EN_Min (0x0UL)
  #define COMP_PUBLISH_UP_EN_Max (0x1UL)
  #define COMP_PUBLISH_UP_EN_Disabled (0x0UL)
  #define COMP_PUBLISH_UP_EN_Enabled (0x1UL)


/* COMP_PUBLISH_CROSS: Publish configuration for event CROSS */
  #define COMP_PUBLISH_CROSS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CROSS will publish to */
  #define COMP_PUBLISH_CROSS_CHIDX_Pos (0UL)
  #define COMP_PUBLISH_CROSS_CHIDX_Msk (0xFFUL << COMP_PUBLISH_CROSS_CHIDX_Pos)
  #define COMP_PUBLISH_CROSS_CHIDX_Min (0x00UL)
  #define COMP_PUBLISH_CROSS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_PUBLISH_CROSS_EN_Pos (31UL)
  #define COMP_PUBLISH_CROSS_EN_Msk (0x1UL << COMP_PUBLISH_CROSS_EN_Pos)
  #define COMP_PUBLISH_CROSS_EN_Min (0x0UL)
  #define COMP_PUBLISH_CROSS_EN_Max (0x1UL)
  #define COMP_PUBLISH_CROSS_EN_Disabled (0x0UL)
  #define COMP_PUBLISH_CROSS_EN_Enabled (0x1UL)


/* COMP_SHORTS: Shortcuts between local events and tasks */
  #define COMP_SHORTS_ResetValue (0x00000000UL)

/* READY_SAMPLE @Bit 0 : Shortcut between event READY and task SAMPLE */
  #define COMP_SHORTS_READY_SAMPLE_Pos (0UL)
  #define COMP_SHORTS_READY_SAMPLE_Msk (0x1UL << COMP_SHORTS_READY_SAMPLE_Pos)
  #define COMP_SHORTS_READY_SAMPLE_Min (0x0UL)
  #define COMP_SHORTS_READY_SAMPLE_Max (0x1UL)
  #define COMP_SHORTS_READY_SAMPLE_Disabled (0x0UL)
  #define COMP_SHORTS_READY_SAMPLE_Enabled (0x1UL)

/* READY_STOP @Bit 1 : Shortcut between event READY and task STOP */
  #define COMP_SHORTS_READY_STOP_Pos (1UL)
  #define COMP_SHORTS_READY_STOP_Msk (0x1UL << COMP_SHORTS_READY_STOP_Pos)
  #define COMP_SHORTS_READY_STOP_Min (0x0UL)
  #define COMP_SHORTS_READY_STOP_Max (0x1UL)
  #define COMP_SHORTS_READY_STOP_Disabled (0x0UL)
  #define COMP_SHORTS_READY_STOP_Enabled (0x1UL)

/* DOWN_STOP @Bit 2 : Shortcut between event DOWN and task STOP */
  #define COMP_SHORTS_DOWN_STOP_Pos (2UL)
  #define COMP_SHORTS_DOWN_STOP_Msk (0x1UL << COMP_SHORTS_DOWN_STOP_Pos)
  #define COMP_SHORTS_DOWN_STOP_Min (0x0UL)
  #define COMP_SHORTS_DOWN_STOP_Max (0x1UL)
  #define COMP_SHORTS_DOWN_STOP_Disabled (0x0UL)
  #define COMP_SHORTS_DOWN_STOP_Enabled (0x1UL)

/* UP_STOP @Bit 3 : Shortcut between event UP and task STOP */
  #define COMP_SHORTS_UP_STOP_Pos (3UL)
  #define COMP_SHORTS_UP_STOP_Msk (0x1UL << COMP_SHORTS_UP_STOP_Pos)
  #define COMP_SHORTS_UP_STOP_Min (0x0UL)
  #define COMP_SHORTS_UP_STOP_Max (0x1UL)
  #define COMP_SHORTS_UP_STOP_Disabled (0x0UL)
  #define COMP_SHORTS_UP_STOP_Enabled (0x1UL)

/* CROSS_STOP @Bit 4 : Shortcut between event CROSS and task STOP */
  #define COMP_SHORTS_CROSS_STOP_Pos (4UL)
  #define COMP_SHORTS_CROSS_STOP_Msk (0x1UL << COMP_SHORTS_CROSS_STOP_Pos)
  #define COMP_SHORTS_CROSS_STOP_Min (0x0UL)
  #define COMP_SHORTS_CROSS_STOP_Max (0x1UL)
  #define COMP_SHORTS_CROSS_STOP_Disabled (0x0UL)
  #define COMP_SHORTS_CROSS_STOP_Enabled (0x1UL)


/* COMP_INTEN: Enable or disable interrupt */
  #define COMP_INTEN_ResetValue (0x00000000UL)

/* READY @Bit 0 : Enable or disable interrupt for event READY */
  #define COMP_INTEN_READY_Pos (0UL)
  #define COMP_INTEN_READY_Msk (0x1UL << COMP_INTEN_READY_Pos)
  #define COMP_INTEN_READY_Min (0x0UL)
  #define COMP_INTEN_READY_Max (0x1UL)
  #define COMP_INTEN_READY_Disabled (0x0UL)
  #define COMP_INTEN_READY_Enabled (0x1UL)

/* DOWN @Bit 1 : Enable or disable interrupt for event DOWN */
  #define COMP_INTEN_DOWN_Pos (1UL)
  #define COMP_INTEN_DOWN_Msk (0x1UL << COMP_INTEN_DOWN_Pos)
  #define COMP_INTEN_DOWN_Min (0x0UL)
  #define COMP_INTEN_DOWN_Max (0x1UL)
  #define COMP_INTEN_DOWN_Disabled (0x0UL)
  #define COMP_INTEN_DOWN_Enabled (0x1UL)

/* UP @Bit 2 : Enable or disable interrupt for event UP */
  #define COMP_INTEN_UP_Pos (2UL)
  #define COMP_INTEN_UP_Msk (0x1UL << COMP_INTEN_UP_Pos)
  #define COMP_INTEN_UP_Min (0x0UL)
  #define COMP_INTEN_UP_Max (0x1UL)
  #define COMP_INTEN_UP_Disabled (0x0UL)
  #define COMP_INTEN_UP_Enabled (0x1UL)

/* CROSS @Bit 3 : Enable or disable interrupt for event CROSS */
  #define COMP_INTEN_CROSS_Pos (3UL)
  #define COMP_INTEN_CROSS_Msk (0x1UL << COMP_INTEN_CROSS_Pos)
  #define COMP_INTEN_CROSS_Min (0x0UL)
  #define COMP_INTEN_CROSS_Max (0x1UL)
  #define COMP_INTEN_CROSS_Disabled (0x0UL)
  #define COMP_INTEN_CROSS_Enabled (0x1UL)


/* COMP_INTENSET: Enable interrupt */
  #define COMP_INTENSET_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to enable interrupt for event READY */
  #define COMP_INTENSET_READY_Pos (0UL)
  #define COMP_INTENSET_READY_Msk (0x1UL << COMP_INTENSET_READY_Pos)
  #define COMP_INTENSET_READY_Min (0x0UL)
  #define COMP_INTENSET_READY_Max (0x1UL)
  #define COMP_INTENSET_READY_Set (0x1UL)
  #define COMP_INTENSET_READY_Disabled (0x0UL)
  #define COMP_INTENSET_READY_Enabled (0x1UL)

/* DOWN @Bit 1 : Write '1' to enable interrupt for event DOWN */
  #define COMP_INTENSET_DOWN_Pos (1UL)
  #define COMP_INTENSET_DOWN_Msk (0x1UL << COMP_INTENSET_DOWN_Pos)
  #define COMP_INTENSET_DOWN_Min (0x0UL)
  #define COMP_INTENSET_DOWN_Max (0x1UL)
  #define COMP_INTENSET_DOWN_Set (0x1UL)
  #define COMP_INTENSET_DOWN_Disabled (0x0UL)
  #define COMP_INTENSET_DOWN_Enabled (0x1UL)

/* UP @Bit 2 : Write '1' to enable interrupt for event UP */
  #define COMP_INTENSET_UP_Pos (2UL)
  #define COMP_INTENSET_UP_Msk (0x1UL << COMP_INTENSET_UP_Pos)
  #define COMP_INTENSET_UP_Min (0x0UL)
  #define COMP_INTENSET_UP_Max (0x1UL)
  #define COMP_INTENSET_UP_Set (0x1UL)
  #define COMP_INTENSET_UP_Disabled (0x0UL)
  #define COMP_INTENSET_UP_Enabled (0x1UL)

/* CROSS @Bit 3 : Write '1' to enable interrupt for event CROSS */
  #define COMP_INTENSET_CROSS_Pos (3UL)
  #define COMP_INTENSET_CROSS_Msk (0x1UL << COMP_INTENSET_CROSS_Pos)
  #define COMP_INTENSET_CROSS_Min (0x0UL)
  #define COMP_INTENSET_CROSS_Max (0x1UL)
  #define COMP_INTENSET_CROSS_Set (0x1UL)
  #define COMP_INTENSET_CROSS_Disabled (0x0UL)
  #define COMP_INTENSET_CROSS_Enabled (0x1UL)


/* COMP_INTENCLR: Disable interrupt */
  #define COMP_INTENCLR_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to disable interrupt for event READY */
  #define COMP_INTENCLR_READY_Pos (0UL)
  #define COMP_INTENCLR_READY_Msk (0x1UL << COMP_INTENCLR_READY_Pos)
  #define COMP_INTENCLR_READY_Min (0x0UL)
  #define COMP_INTENCLR_READY_Max (0x1UL)
  #define COMP_INTENCLR_READY_Clear (0x1UL)
  #define COMP_INTENCLR_READY_Disabled (0x0UL)
  #define COMP_INTENCLR_READY_Enabled (0x1UL)

/* DOWN @Bit 1 : Write '1' to disable interrupt for event DOWN */
  #define COMP_INTENCLR_DOWN_Pos (1UL)
  #define COMP_INTENCLR_DOWN_Msk (0x1UL << COMP_INTENCLR_DOWN_Pos)
  #define COMP_INTENCLR_DOWN_Min (0x0UL)
  #define COMP_INTENCLR_DOWN_Max (0x1UL)
  #define COMP_INTENCLR_DOWN_Clear (0x1UL)
  #define COMP_INTENCLR_DOWN_Disabled (0x0UL)
  #define COMP_INTENCLR_DOWN_Enabled (0x1UL)

/* UP @Bit 2 : Write '1' to disable interrupt for event UP */
  #define COMP_INTENCLR_UP_Pos (2UL)
  #define COMP_INTENCLR_UP_Msk (0x1UL << COMP_INTENCLR_UP_Pos)
  #define COMP_INTENCLR_UP_Min (0x0UL)
  #define COMP_INTENCLR_UP_Max (0x1UL)
  #define COMP_INTENCLR_UP_Clear (0x1UL)
  #define COMP_INTENCLR_UP_Disabled (0x0UL)
  #define COMP_INTENCLR_UP_Enabled (0x1UL)

/* CROSS @Bit 3 : Write '1' to disable interrupt for event CROSS */
  #define COMP_INTENCLR_CROSS_Pos (3UL)
  #define COMP_INTENCLR_CROSS_Msk (0x1UL << COMP_INTENCLR_CROSS_Pos)
  #define COMP_INTENCLR_CROSS_Min (0x0UL)
  #define COMP_INTENCLR_CROSS_Max (0x1UL)
  #define COMP_INTENCLR_CROSS_Clear (0x1UL)
  #define COMP_INTENCLR_CROSS_Disabled (0x0UL)
  #define COMP_INTENCLR_CROSS_Enabled (0x1UL)


/* COMP_INTPEND: Pending interrupts */
  #define COMP_INTPEND_ResetValue (0x00000000UL)

/* READY @Bit 0 : Read pending status of interrupt for event READY */
  #define COMP_INTPEND_READY_Pos (0UL)
  #define COMP_INTPEND_READY_Msk (0x1UL << COMP_INTPEND_READY_Pos)
  #define COMP_INTPEND_READY_Min (0x0UL)
  #define COMP_INTPEND_READY_Max (0x1UL)
  #define COMP_INTPEND_READY_NotPending (0x0UL)
  #define COMP_INTPEND_READY_Pending (0x1UL)

/* DOWN @Bit 1 : Read pending status of interrupt for event DOWN */
  #define COMP_INTPEND_DOWN_Pos (1UL)
  #define COMP_INTPEND_DOWN_Msk (0x1UL << COMP_INTPEND_DOWN_Pos)
  #define COMP_INTPEND_DOWN_Min (0x0UL)
  #define COMP_INTPEND_DOWN_Max (0x1UL)
  #define COMP_INTPEND_DOWN_NotPending (0x0UL)
  #define COMP_INTPEND_DOWN_Pending (0x1UL)

/* UP @Bit 2 : Read pending status of interrupt for event UP */
  #define COMP_INTPEND_UP_Pos (2UL)
  #define COMP_INTPEND_UP_Msk (0x1UL << COMP_INTPEND_UP_Pos)
  #define COMP_INTPEND_UP_Min (0x0UL)
  #define COMP_INTPEND_UP_Max (0x1UL)
  #define COMP_INTPEND_UP_NotPending (0x0UL)
  #define COMP_INTPEND_UP_Pending (0x1UL)

/* CROSS @Bit 3 : Read pending status of interrupt for event CROSS */
  #define COMP_INTPEND_CROSS_Pos (3UL)
  #define COMP_INTPEND_CROSS_Msk (0x1UL << COMP_INTPEND_CROSS_Pos)
  #define COMP_INTPEND_CROSS_Min (0x0UL)
  #define COMP_INTPEND_CROSS_Max (0x1UL)
  #define COMP_INTPEND_CROSS_NotPending (0x0UL)
  #define COMP_INTPEND_CROSS_Pending (0x1UL)


/* COMP_RESULT: Compare result */
  #define COMP_RESULT_ResetValue (0x00000000UL)

/* RESULT @Bit 0 : Result of last compare. Decision point SAMPLE task. */
  #define COMP_RESULT_RESULT_Pos (0UL)
  #define COMP_RESULT_RESULT_Msk (0x1UL << COMP_RESULT_RESULT_Pos)
  #define COMP_RESULT_RESULT_Min (0x0UL)
  #define COMP_RESULT_RESULT_Max (0x1UL)
  #define COMP_RESULT_RESULT_Below (0x0UL)
  #define COMP_RESULT_RESULT_Above (0x1UL)


/* COMP_ENABLE: COMP enable */
  #define COMP_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..1 : Enable or disable COMP */
  #define COMP_ENABLE_ENABLE_Pos (0UL)
  #define COMP_ENABLE_ENABLE_Msk (0x3UL << COMP_ENABLE_ENABLE_Pos)
  #define COMP_ENABLE_ENABLE_Min (0x0UL)
  #define COMP_ENABLE_ENABLE_Max (0x2UL)
  #define COMP_ENABLE_ENABLE_Disabled (0x0UL)
  #define COMP_ENABLE_ENABLE_Enabled (0x2UL)


/* COMP_PSEL: Pin select */
  #define COMP_PSEL_ResetValue (0x00000000UL)

/* PIN @Bits 0..4 : Analog pin select */
  #define COMP_PSEL_PIN_Pos (0UL)
  #define COMP_PSEL_PIN_Msk (0x1FUL << COMP_PSEL_PIN_Pos)

/* PORT @Bits 8..11 : GPIO Port selection */
  #define COMP_PSEL_PORT_Pos (8UL)
  #define COMP_PSEL_PORT_Msk (0xFUL << COMP_PSEL_PORT_Pos)


/* COMP_REFSEL: Reference source select for single-ended mode */
  #define COMP_REFSEL_ResetValue (0x00000004UL)

/* REFSEL @Bits 0..2 : Reference select */
  #define COMP_REFSEL_REFSEL_Pos (0UL)
  #define COMP_REFSEL_REFSEL_Msk (0x7UL << COMP_REFSEL_REFSEL_Pos)
  #define COMP_REFSEL_REFSEL_Min (0x0UL)
  #define COMP_REFSEL_REFSEL_Max (0x5UL)
  #define COMP_REFSEL_REFSEL_Int1V2 (0x0UL)
  #define COMP_REFSEL_REFSEL_VDD (0x4UL)
  #define COMP_REFSEL_REFSEL_ARef (0x5UL)


/* COMP_EXTREFSEL: External reference select */
  #define COMP_EXTREFSEL_ResetValue (0x00000000UL)

/* PIN @Bits 0..4 : External analog reference pin select */
  #define COMP_EXTREFSEL_PIN_Pos (0UL)
  #define COMP_EXTREFSEL_PIN_Msk (0x1FUL << COMP_EXTREFSEL_PIN_Pos)

/* PORT @Bits 8..11 : GPIO Port selection */
  #define COMP_EXTREFSEL_PORT_Pos (8UL)
  #define COMP_EXTREFSEL_PORT_Msk (0xFUL << COMP_EXTREFSEL_PORT_Pos)


/* COMP_TH: Threshold configuration for hysteresis unit */
  #define COMP_TH_ResetValue (0x00002020UL)

/* THDOWN @Bits 0..5 : VDOWN = (THDOWN+1)/64*VREF */
  #define COMP_TH_THDOWN_Pos (0UL)
  #define COMP_TH_THDOWN_Msk (0x3FUL << COMP_TH_THDOWN_Pos)
  #define COMP_TH_THDOWN_Min (0x00UL)
  #define COMP_TH_THDOWN_Max (0x3FUL)

/* THUP @Bits 8..13 : VUP = (THUP+1)/64*VREF */
  #define COMP_TH_THUP_Pos (8UL)
  #define COMP_TH_THUP_Msk (0x3FUL << COMP_TH_THUP_Pos)
  #define COMP_TH_THUP_Min (0x00UL)
  #define COMP_TH_THUP_Max (0x3FUL)


/* COMP_MODE: Mode configuration */
  #define COMP_MODE_ResetValue (0x00000000UL)

/* SP @Bits 0..1 : Speed and power modes */
  #define COMP_MODE_SP_Pos (0UL)
  #define COMP_MODE_SP_Msk (0x3UL << COMP_MODE_SP_Pos)
  #define COMP_MODE_SP_Min (0x0UL)
  #define COMP_MODE_SP_Max (0x2UL)
  #define COMP_MODE_SP_Low (0x0UL)
  #define COMP_MODE_SP_Normal (0x1UL)
  #define COMP_MODE_SP_High (0x2UL)

/* MAIN @Bit 8 : Main operation modes */
  #define COMP_MODE_MAIN_Pos (8UL)
  #define COMP_MODE_MAIN_Msk (0x1UL << COMP_MODE_MAIN_Pos)
  #define COMP_MODE_MAIN_Min (0x0UL)
  #define COMP_MODE_MAIN_Max (0x1UL)
  #define COMP_MODE_MAIN_SE (0x0UL)
  #define COMP_MODE_MAIN_Diff (0x1UL)


/* COMP_HYST: Comparator hysteresis enable */
  #define COMP_HYST_ResetValue (0x00000000UL)

/* HYST @Bit 0 : Comparator hysteresis */
  #define COMP_HYST_HYST_Pos (0UL)
  #define COMP_HYST_HYST_Msk (0x1UL << COMP_HYST_HYST_Pos)
  #define COMP_HYST_HYST_Min (0x0UL)
  #define COMP_HYST_HYST_Max (0x1UL)
  #define COMP_HYST_HYST_NoHyst (0x0UL)
  #define COMP_HYST_HYST_Hyst40mV (0x1UL)


/* COMP_ISOURCE: Current source select on analog input */
  #define COMP_ISOURCE_ResetValue (0x00000000UL)

/* ISOURCE @Bits 0..1 : Current source select on analog input */
  #define COMP_ISOURCE_ISOURCE_Pos (0UL)
  #define COMP_ISOURCE_ISOURCE_Msk (0x3UL << COMP_ISOURCE_ISOURCE_Pos)
  #define COMP_ISOURCE_ISOURCE_Min (0x0UL)
  #define COMP_ISOURCE_ISOURCE_Max (0x3UL)
  #define COMP_ISOURCE_ISOURCE_Off (0x0UL)
  #define COMP_ISOURCE_ISOURCE_Ien2uA5 (0x1UL)
  #define COMP_ISOURCE_ISOURCE_Ien5uA (0x2UL)
  #define COMP_ISOURCE_ISOURCE_Ien10uA (0x3UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           CPUC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct CPUC ======================================================= */
/**
  * @brief CPU control
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_FPUIOC;                    /*!< (@ 0x00000100) An invalid operation exception has occurred in the
                                                                         FPU.*/
    __IOM uint32_t EVENTS_FPUDZC;                    /*!< (@ 0x00000104) A floating-point divide-by-zero exception has occurred
                                                                         in the FPU.*/
    __IOM uint32_t EVENTS_FPUOFC;                    /*!< (@ 0x00000108) A floating-point overflow exception has occurred in the
                                                                         FPU.*/
    __IOM uint32_t EVENTS_FPUUFC;                    /*!< (@ 0x0000010C) A floating-point underflow exception has occurred in
                                                                         the FPU.*/
    __IOM uint32_t EVENTS_FPUIXC;                    /*!< (@ 0x00000110) A floating-point inexact exception has occurred in the
                                                                         FPU.*/
    __IOM uint32_t EVENTS_FPUIDC;                    /*!< (@ 0x00000114) A floating-point input denormal exception has occurred
                                                                         in the FPU.*/
    __IM uint32_t RESERVED1[122];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED2[125];
    __IOM uint32_t LOCK;                             /*!< (@ 0x00000500) Register to lock the certain parts of the CPU from
                                                                         being modified.*/
    __IM uint32_t CPUID;
  } NRF_CPUC_Type;

/* CPUC_EVENTS_FPUIOC: An invalid operation exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUIOC_ResetValue (0x00000000UL)

/* EVENTS_FPUIOC @Bit 0 : An invalid operation exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_Pos (0UL)
  #define CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_Msk (0x1UL << CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_Pos) /*!< Bit mask of EVENTS_FPUIOC
                                                                            field.*/
  #define CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_Min (0x0UL)
  #define CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_Max (0x1UL)
  #define CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_NotGenerated (0x0UL)
  #define CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_Generated (0x1UL)


/* CPUC_EVENTS_FPUDZC: A floating-point divide-by-zero exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUDZC_ResetValue (0x00000000UL)

/* EVENTS_FPUDZC @Bit 0 : A floating-point divide-by-zero exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_Pos (0UL)
  #define CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_Msk (0x1UL << CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_Pos) /*!< Bit mask of EVENTS_FPUDZC
                                                                            field.*/
  #define CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_Min (0x0UL)
  #define CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_Max (0x1UL)
  #define CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_NotGenerated (0x0UL)
  #define CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_Generated (0x1UL)


/* CPUC_EVENTS_FPUOFC: A floating-point overflow exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUOFC_ResetValue (0x00000000UL)

/* EVENTS_FPUOFC @Bit 0 : A floating-point overflow exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_Pos (0UL)
  #define CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_Msk (0x1UL << CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_Pos) /*!< Bit mask of EVENTS_FPUOFC
                                                                            field.*/
  #define CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_Min (0x0UL)
  #define CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_Max (0x1UL)
  #define CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_NotGenerated (0x0UL)
  #define CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_Generated (0x1UL)


/* CPUC_EVENTS_FPUUFC: A floating-point underflow exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUUFC_ResetValue (0x00000000UL)

/* EVENTS_FPUUFC @Bit 0 : A floating-point underflow exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_Pos (0UL)
  #define CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_Msk (0x1UL << CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_Pos) /*!< Bit mask of EVENTS_FPUUFC
                                                                            field.*/
  #define CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_Min (0x0UL)
  #define CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_Max (0x1UL)
  #define CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_NotGenerated (0x0UL)
  #define CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_Generated (0x1UL)


/* CPUC_EVENTS_FPUIXC: A floating-point inexact exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUIXC_ResetValue (0x00000000UL)

/* EVENTS_FPUIXC @Bit 0 : A floating-point inexact exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_Pos (0UL)
  #define CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_Msk (0x1UL << CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_Pos) /*!< Bit mask of EVENTS_FPUIXC
                                                                            field.*/
  #define CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_Min (0x0UL)
  #define CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_Max (0x1UL)
  #define CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_NotGenerated (0x0UL)
  #define CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_Generated (0x1UL)


/* CPUC_EVENTS_FPUIDC: A floating-point input denormal exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUIDC_ResetValue (0x00000000UL)

/* EVENTS_FPUIDC @Bit 0 : A floating-point input denormal exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_Pos (0UL)
  #define CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_Msk (0x1UL << CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_Pos) /*!< Bit mask of EVENTS_FPUIDC
                                                                            field.*/
  #define CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_Min (0x0UL)
  #define CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_Max (0x1UL)
  #define CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_NotGenerated (0x0UL)
  #define CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_Generated (0x1UL)


/* CPUC_INTEN: Enable or disable interrupt */
  #define CPUC_INTEN_ResetValue (0x00000000UL)

/* FPUIOC @Bit 0 : Enable or disable interrupt for event FPUIOC */
  #define CPUC_INTEN_FPUIOC_Pos (0UL)
  #define CPUC_INTEN_FPUIOC_Msk (0x1UL << CPUC_INTEN_FPUIOC_Pos)
  #define CPUC_INTEN_FPUIOC_Min (0x0UL)
  #define CPUC_INTEN_FPUIOC_Max (0x1UL)
  #define CPUC_INTEN_FPUIOC_Disabled (0x0UL)
  #define CPUC_INTEN_FPUIOC_Enabled (0x1UL)

/* FPUDZC @Bit 1 : Enable or disable interrupt for event FPUDZC */
  #define CPUC_INTEN_FPUDZC_Pos (1UL)
  #define CPUC_INTEN_FPUDZC_Msk (0x1UL << CPUC_INTEN_FPUDZC_Pos)
  #define CPUC_INTEN_FPUDZC_Min (0x0UL)
  #define CPUC_INTEN_FPUDZC_Max (0x1UL)
  #define CPUC_INTEN_FPUDZC_Disabled (0x0UL)
  #define CPUC_INTEN_FPUDZC_Enabled (0x1UL)

/* FPUOFC @Bit 2 : Enable or disable interrupt for event FPUOFC */
  #define CPUC_INTEN_FPUOFC_Pos (2UL)
  #define CPUC_INTEN_FPUOFC_Msk (0x1UL << CPUC_INTEN_FPUOFC_Pos)
  #define CPUC_INTEN_FPUOFC_Min (0x0UL)
  #define CPUC_INTEN_FPUOFC_Max (0x1UL)
  #define CPUC_INTEN_FPUOFC_Disabled (0x0UL)
  #define CPUC_INTEN_FPUOFC_Enabled (0x1UL)

/* FPUUFC @Bit 3 : Enable or disable interrupt for event FPUUFC */
  #define CPUC_INTEN_FPUUFC_Pos (3UL)
  #define CPUC_INTEN_FPUUFC_Msk (0x1UL << CPUC_INTEN_FPUUFC_Pos)
  #define CPUC_INTEN_FPUUFC_Min (0x0UL)
  #define CPUC_INTEN_FPUUFC_Max (0x1UL)
  #define CPUC_INTEN_FPUUFC_Disabled (0x0UL)
  #define CPUC_INTEN_FPUUFC_Enabled (0x1UL)

/* FPUIXC @Bit 4 : Enable or disable interrupt for event FPUIXC */
  #define CPUC_INTEN_FPUIXC_Pos (4UL)
  #define CPUC_INTEN_FPUIXC_Msk (0x1UL << CPUC_INTEN_FPUIXC_Pos)
  #define CPUC_INTEN_FPUIXC_Min (0x0UL)
  #define CPUC_INTEN_FPUIXC_Max (0x1UL)
  #define CPUC_INTEN_FPUIXC_Disabled (0x0UL)
  #define CPUC_INTEN_FPUIXC_Enabled (0x1UL)

/* FPUIDC @Bit 5 : Enable or disable interrupt for event FPUIDC */
  #define CPUC_INTEN_FPUIDC_Pos (5UL)
  #define CPUC_INTEN_FPUIDC_Msk (0x1UL << CPUC_INTEN_FPUIDC_Pos)
  #define CPUC_INTEN_FPUIDC_Min (0x0UL)
  #define CPUC_INTEN_FPUIDC_Max (0x1UL)
  #define CPUC_INTEN_FPUIDC_Disabled (0x0UL)
  #define CPUC_INTEN_FPUIDC_Enabled (0x1UL)


/* CPUC_INTENSET: Enable interrupt */
  #define CPUC_INTENSET_ResetValue (0x00000000UL)

/* FPUIOC @Bit 0 : Write '1' to enable interrupt for event FPUIOC */
  #define CPUC_INTENSET_FPUIOC_Pos (0UL)
  #define CPUC_INTENSET_FPUIOC_Msk (0x1UL << CPUC_INTENSET_FPUIOC_Pos)
  #define CPUC_INTENSET_FPUIOC_Min (0x0UL)
  #define CPUC_INTENSET_FPUIOC_Max (0x1UL)
  #define CPUC_INTENSET_FPUIOC_Set (0x1UL)
  #define CPUC_INTENSET_FPUIOC_Disabled (0x0UL)
  #define CPUC_INTENSET_FPUIOC_Enabled (0x1UL)

/* FPUDZC @Bit 1 : Write '1' to enable interrupt for event FPUDZC */
  #define CPUC_INTENSET_FPUDZC_Pos (1UL)
  #define CPUC_INTENSET_FPUDZC_Msk (0x1UL << CPUC_INTENSET_FPUDZC_Pos)
  #define CPUC_INTENSET_FPUDZC_Min (0x0UL)
  #define CPUC_INTENSET_FPUDZC_Max (0x1UL)
  #define CPUC_INTENSET_FPUDZC_Set (0x1UL)
  #define CPUC_INTENSET_FPUDZC_Disabled (0x0UL)
  #define CPUC_INTENSET_FPUDZC_Enabled (0x1UL)

/* FPUOFC @Bit 2 : Write '1' to enable interrupt for event FPUOFC */
  #define CPUC_INTENSET_FPUOFC_Pos (2UL)
  #define CPUC_INTENSET_FPUOFC_Msk (0x1UL << CPUC_INTENSET_FPUOFC_Pos)
  #define CPUC_INTENSET_FPUOFC_Min (0x0UL)
  #define CPUC_INTENSET_FPUOFC_Max (0x1UL)
  #define CPUC_INTENSET_FPUOFC_Set (0x1UL)
  #define CPUC_INTENSET_FPUOFC_Disabled (0x0UL)
  #define CPUC_INTENSET_FPUOFC_Enabled (0x1UL)

/* FPUUFC @Bit 3 : Write '1' to enable interrupt for event FPUUFC */
  #define CPUC_INTENSET_FPUUFC_Pos (3UL)
  #define CPUC_INTENSET_FPUUFC_Msk (0x1UL << CPUC_INTENSET_FPUUFC_Pos)
  #define CPUC_INTENSET_FPUUFC_Min (0x0UL)
  #define CPUC_INTENSET_FPUUFC_Max (0x1UL)
  #define CPUC_INTENSET_FPUUFC_Set (0x1UL)
  #define CPUC_INTENSET_FPUUFC_Disabled (0x0UL)
  #define CPUC_INTENSET_FPUUFC_Enabled (0x1UL)

/* FPUIXC @Bit 4 : Write '1' to enable interrupt for event FPUIXC */
  #define CPUC_INTENSET_FPUIXC_Pos (4UL)
  #define CPUC_INTENSET_FPUIXC_Msk (0x1UL << CPUC_INTENSET_FPUIXC_Pos)
  #define CPUC_INTENSET_FPUIXC_Min (0x0UL)
  #define CPUC_INTENSET_FPUIXC_Max (0x1UL)
  #define CPUC_INTENSET_FPUIXC_Set (0x1UL)
  #define CPUC_INTENSET_FPUIXC_Disabled (0x0UL)
  #define CPUC_INTENSET_FPUIXC_Enabled (0x1UL)

/* FPUIDC @Bit 5 : Write '1' to enable interrupt for event FPUIDC */
  #define CPUC_INTENSET_FPUIDC_Pos (5UL)
  #define CPUC_INTENSET_FPUIDC_Msk (0x1UL << CPUC_INTENSET_FPUIDC_Pos)
  #define CPUC_INTENSET_FPUIDC_Min (0x0UL)
  #define CPUC_INTENSET_FPUIDC_Max (0x1UL)
  #define CPUC_INTENSET_FPUIDC_Set (0x1UL)
  #define CPUC_INTENSET_FPUIDC_Disabled (0x0UL)
  #define CPUC_INTENSET_FPUIDC_Enabled (0x1UL)


/* CPUC_INTENCLR: Disable interrupt */
  #define CPUC_INTENCLR_ResetValue (0x00000000UL)

/* FPUIOC @Bit 0 : Write '1' to disable interrupt for event FPUIOC */
  #define CPUC_INTENCLR_FPUIOC_Pos (0UL)
  #define CPUC_INTENCLR_FPUIOC_Msk (0x1UL << CPUC_INTENCLR_FPUIOC_Pos)
  #define CPUC_INTENCLR_FPUIOC_Min (0x0UL)
  #define CPUC_INTENCLR_FPUIOC_Max (0x1UL)
  #define CPUC_INTENCLR_FPUIOC_Clear (0x1UL)
  #define CPUC_INTENCLR_FPUIOC_Disabled (0x0UL)
  #define CPUC_INTENCLR_FPUIOC_Enabled (0x1UL)

/* FPUDZC @Bit 1 : Write '1' to disable interrupt for event FPUDZC */
  #define CPUC_INTENCLR_FPUDZC_Pos (1UL)
  #define CPUC_INTENCLR_FPUDZC_Msk (0x1UL << CPUC_INTENCLR_FPUDZC_Pos)
  #define CPUC_INTENCLR_FPUDZC_Min (0x0UL)
  #define CPUC_INTENCLR_FPUDZC_Max (0x1UL)
  #define CPUC_INTENCLR_FPUDZC_Clear (0x1UL)
  #define CPUC_INTENCLR_FPUDZC_Disabled (0x0UL)
  #define CPUC_INTENCLR_FPUDZC_Enabled (0x1UL)

/* FPUOFC @Bit 2 : Write '1' to disable interrupt for event FPUOFC */
  #define CPUC_INTENCLR_FPUOFC_Pos (2UL)
  #define CPUC_INTENCLR_FPUOFC_Msk (0x1UL << CPUC_INTENCLR_FPUOFC_Pos)
  #define CPUC_INTENCLR_FPUOFC_Min (0x0UL)
  #define CPUC_INTENCLR_FPUOFC_Max (0x1UL)
  #define CPUC_INTENCLR_FPUOFC_Clear (0x1UL)
  #define CPUC_INTENCLR_FPUOFC_Disabled (0x0UL)
  #define CPUC_INTENCLR_FPUOFC_Enabled (0x1UL)

/* FPUUFC @Bit 3 : Write '1' to disable interrupt for event FPUUFC */
  #define CPUC_INTENCLR_FPUUFC_Pos (3UL)
  #define CPUC_INTENCLR_FPUUFC_Msk (0x1UL << CPUC_INTENCLR_FPUUFC_Pos)
  #define CPUC_INTENCLR_FPUUFC_Min (0x0UL)
  #define CPUC_INTENCLR_FPUUFC_Max (0x1UL)
  #define CPUC_INTENCLR_FPUUFC_Clear (0x1UL)
  #define CPUC_INTENCLR_FPUUFC_Disabled (0x0UL)
  #define CPUC_INTENCLR_FPUUFC_Enabled (0x1UL)

/* FPUIXC @Bit 4 : Write '1' to disable interrupt for event FPUIXC */
  #define CPUC_INTENCLR_FPUIXC_Pos (4UL)
  #define CPUC_INTENCLR_FPUIXC_Msk (0x1UL << CPUC_INTENCLR_FPUIXC_Pos)
  #define CPUC_INTENCLR_FPUIXC_Min (0x0UL)
  #define CPUC_INTENCLR_FPUIXC_Max (0x1UL)
  #define CPUC_INTENCLR_FPUIXC_Clear (0x1UL)
  #define CPUC_INTENCLR_FPUIXC_Disabled (0x0UL)
  #define CPUC_INTENCLR_FPUIXC_Enabled (0x1UL)

/* FPUIDC @Bit 5 : Write '1' to disable interrupt for event FPUIDC */
  #define CPUC_INTENCLR_FPUIDC_Pos (5UL)
  #define CPUC_INTENCLR_FPUIDC_Msk (0x1UL << CPUC_INTENCLR_FPUIDC_Pos)
  #define CPUC_INTENCLR_FPUIDC_Min (0x0UL)
  #define CPUC_INTENCLR_FPUIDC_Max (0x1UL)
  #define CPUC_INTENCLR_FPUIDC_Clear (0x1UL)
  #define CPUC_INTENCLR_FPUIDC_Disabled (0x0UL)
  #define CPUC_INTENCLR_FPUIDC_Enabled (0x1UL)


/* CPUC_LOCK: Register to lock the certain parts of the CPU from being modified. */
  #define CPUC_LOCK_ResetValue (0x00000000UL)

/* LOCKVTORAIRCRS @Bit 0 : Locks both the Vector table Offset Register (VTOR) and Application Interrupt and Reset Control
                           Register (AIRCR) for secure mode. */

  #define CPUC_LOCK_LOCKVTORAIRCRS_Pos (0UL)
  #define CPUC_LOCK_LOCKVTORAIRCRS_Msk (0x1UL << CPUC_LOCK_LOCKVTORAIRCRS_Pos)
  #define CPUC_LOCK_LOCKVTORAIRCRS_Min (0x0UL)
  #define CPUC_LOCK_LOCKVTORAIRCRS_Max (0x1UL)
  #define CPUC_LOCK_LOCKVTORAIRCRS_NotLocked (0x0UL)
  #define CPUC_LOCK_LOCKVTORAIRCRS_Locked (0x1UL)

/* LOCKVTORNS @Bit 1 : Locks the Vector table Offset Register (VTOR) for non-secure mode. */
  #define CPUC_LOCK_LOCKVTORNS_Pos (1UL)
  #define CPUC_LOCK_LOCKVTORNS_Msk (0x1UL << CPUC_LOCK_LOCKVTORNS_Pos)
  #define CPUC_LOCK_LOCKVTORNS_Min (0x0UL)
  #define CPUC_LOCK_LOCKVTORNS_Max (0x1UL)
  #define CPUC_LOCK_LOCKVTORNS_NotLocked (0x0UL)
  #define CPUC_LOCK_LOCKVTORNS_Locked (0x1UL)

/* LOCKMPUS @Bit 2 : Locks the Memory Protection Unit (MPU) for secure mode. */
  #define CPUC_LOCK_LOCKMPUS_Pos (2UL)
  #define CPUC_LOCK_LOCKMPUS_Msk (0x1UL << CPUC_LOCK_LOCKMPUS_Pos)
  #define CPUC_LOCK_LOCKMPUS_Min (0x0UL)
  #define CPUC_LOCK_LOCKMPUS_Max (0x1UL)
  #define CPUC_LOCK_LOCKMPUS_NotLocked (0x0UL)
  #define CPUC_LOCK_LOCKMPUS_Locked (0x1UL)

/* LOCKMPUNS @Bit 3 : Locks the Memory Protection Unit (MPU) for non secure mode. */
  #define CPUC_LOCK_LOCKMPUNS_Pos (3UL)
  #define CPUC_LOCK_LOCKMPUNS_Msk (0x1UL << CPUC_LOCK_LOCKMPUNS_Pos)
  #define CPUC_LOCK_LOCKMPUNS_Min (0x0UL)
  #define CPUC_LOCK_LOCKMPUNS_Max (0x1UL)
  #define CPUC_LOCK_LOCKMPUNS_NotLocked (0x0UL)
  #define CPUC_LOCK_LOCKMPUNS_Locked (0x1UL)

/* LOCKSAU @Bit 4 : Locks the Security Attribution Unit (SAU) */
  #define CPUC_LOCK_LOCKSAU_Pos (4UL)
  #define CPUC_LOCK_LOCKSAU_Msk (0x1UL << CPUC_LOCK_LOCKSAU_Pos)
  #define CPUC_LOCK_LOCKSAU_Min (0x0UL)
  #define CPUC_LOCK_LOCKSAU_Max (0x1UL)
  #define CPUC_LOCK_LOCKSAU_NotLocked (0x0UL)
  #define CPUC_LOCK_LOCKSAU_Locked (0x1UL)


/* CPUC_CPUID: The identifier for the CPU in this subsystem. */
  #define CPUC_CPUID_ResetValue (0x00000000UL)

/* CPUID @Bits 0..31 : The CPU identifier. */
  #define CPUC_CPUID_CPUID_Pos (0UL)
  #define CPUC_CPUID_CPUID_Msk (0xFFFFFFFFUL << CPUC_CPUID_CPUID_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          CRACEN                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct CRACEN ====================================================== */
/**
  * @brief CRACEN
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_CRYPTOMASTER;              /*!< (@ 0x00000100) Event indicating that interrupt triggered at
                                                                         Cryptomaster*/
    __IOM uint32_t EVENTS_RNG;
    __IOM uint32_t EVENTS_PKEIKG;                    /*!< (@ 0x00000108) Event indicating that interrupt triggered at PKE or
                                                                         IKG*/
    __IM uint32_t RESERVED1[125];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED2[60];
    __IOM uint32_t ENABLE;
    __IOM uint32_t SEEDVALID;                        /*!< (@ 0x00000404) Indicates the SEED register is valid. Writing this
                                                                         register has no effect.*/
    __IM uint32_t RESERVED3[2];
    __OM uint32_t SEED[12];                          /*!< (@ 0x00000410) Seed word [n] for symmetric and asymmetric key
                                                                         generation. This register is only writable from KMU.*/
    __IOM uint32_t SEEDLOCK;                         /*!< (@ 0x00000440) Indicates the access to the SEED register is locked.
                                                                         Writing this register has no effect.*/
    __IOM uint32_t PROTECTEDRAMLOCK;
  } NRF_CRACEN_Type;

/* CRACEN_EVENTS_CRYPTOMASTER: Event indicating that interrupt triggered at Cryptomaster */
  #define CRACEN_EVENTS_CRYPTOMASTER_ResetValue (0x00000000UL)

/* EVENTS_CRYPTOMASTER @Bit 0 : Event indicating that interrupt triggered at Cryptomaster */
  #define CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_Pos (0UL)
  #define CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_Msk (0x1UL << CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_Pos) /*!<
                                                                            Bit mask of EVENTS_CRYPTOMASTER field.*/
  #define CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_Min (0x0UL)
  #define CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_Max (0x1UL)
  #define CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_NotGenerated (0x0UL)
  #define CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_Generated (0x1UL)


/* CRACEN_EVENTS_RNG: Event indicating that interrupt triggered at RNG */
  #define CRACEN_EVENTS_RNG_ResetValue (0x00000000UL)

/* EVENTS_RNG @Bit 0 : Event indicating that interrupt triggered at RNG */
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Pos (0UL)
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Msk (0x1UL << CRACEN_EVENTS_RNG_EVENTS_RNG_Pos)
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Min (0x0UL)
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Max (0x1UL)
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_NotGenerated (0x0UL)
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Generated (0x1UL)


/* CRACEN_EVENTS_PKEIKG: Event indicating that interrupt triggered at PKE or IKG */
  #define CRACEN_EVENTS_PKEIKG_ResetValue (0x00000000UL)

/* EVENTS_PKEIKG @Bit 0 : Event indicating that interrupt triggered at PKE or IKG */
  #define CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_Pos (0UL)
  #define CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_Msk (0x1UL << CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_Pos) /*!< Bit mask of
                                                                            EVENTS_PKEIKG field.*/
  #define CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_Min (0x0UL)
  #define CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_Max (0x1UL)
  #define CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_NotGenerated (0x0UL)
  #define CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_Generated (0x1UL)


/* CRACEN_INTEN: Enable or disable interrupt */
  #define CRACEN_INTEN_ResetValue (0x00000000UL)

/* CRYPTOMASTER @Bit 0 : Enable or disable interrupt for event CRYPTOMASTER */
  #define CRACEN_INTEN_CRYPTOMASTER_Pos (0UL)
  #define CRACEN_INTEN_CRYPTOMASTER_Msk (0x1UL << CRACEN_INTEN_CRYPTOMASTER_Pos)
  #define CRACEN_INTEN_CRYPTOMASTER_Min (0x0UL)
  #define CRACEN_INTEN_CRYPTOMASTER_Max (0x1UL)
  #define CRACEN_INTEN_CRYPTOMASTER_Disabled (0x0UL)
  #define CRACEN_INTEN_CRYPTOMASTER_Enabled (0x1UL)

/* RNG @Bit 1 : Enable or disable interrupt for event RNG */
  #define CRACEN_INTEN_RNG_Pos (1UL)
  #define CRACEN_INTEN_RNG_Msk (0x1UL << CRACEN_INTEN_RNG_Pos)
  #define CRACEN_INTEN_RNG_Min (0x0UL)
  #define CRACEN_INTEN_RNG_Max (0x1UL)
  #define CRACEN_INTEN_RNG_Disabled (0x0UL)
  #define CRACEN_INTEN_RNG_Enabled (0x1UL)

/* PKEIKG @Bit 2 : Enable or disable interrupt for event PKEIKG */
  #define CRACEN_INTEN_PKEIKG_Pos (2UL)
  #define CRACEN_INTEN_PKEIKG_Msk (0x1UL << CRACEN_INTEN_PKEIKG_Pos)
  #define CRACEN_INTEN_PKEIKG_Min (0x0UL)
  #define CRACEN_INTEN_PKEIKG_Max (0x1UL)
  #define CRACEN_INTEN_PKEIKG_Disabled (0x0UL)
  #define CRACEN_INTEN_PKEIKG_Enabled (0x1UL)


/* CRACEN_INTENSET: Enable interrupt */
  #define CRACEN_INTENSET_ResetValue (0x00000000UL)

/* CRYPTOMASTER @Bit 0 : Write '1' to enable interrupt for event CRYPTOMASTER */
  #define CRACEN_INTENSET_CRYPTOMASTER_Pos (0UL)
  #define CRACEN_INTENSET_CRYPTOMASTER_Msk (0x1UL << CRACEN_INTENSET_CRYPTOMASTER_Pos)
  #define CRACEN_INTENSET_CRYPTOMASTER_Min (0x0UL)
  #define CRACEN_INTENSET_CRYPTOMASTER_Max (0x1UL)
  #define CRACEN_INTENSET_CRYPTOMASTER_Set (0x1UL)
  #define CRACEN_INTENSET_CRYPTOMASTER_Disabled (0x0UL)
  #define CRACEN_INTENSET_CRYPTOMASTER_Enabled (0x1UL)

/* RNG @Bit 1 : Write '1' to enable interrupt for event RNG */
  #define CRACEN_INTENSET_RNG_Pos (1UL)
  #define CRACEN_INTENSET_RNG_Msk (0x1UL << CRACEN_INTENSET_RNG_Pos)
  #define CRACEN_INTENSET_RNG_Min (0x0UL)
  #define CRACEN_INTENSET_RNG_Max (0x1UL)
  #define CRACEN_INTENSET_RNG_Set (0x1UL)
  #define CRACEN_INTENSET_RNG_Disabled (0x0UL)
  #define CRACEN_INTENSET_RNG_Enabled (0x1UL)

/* PKEIKG @Bit 2 : Write '1' to enable interrupt for event PKEIKG */
  #define CRACEN_INTENSET_PKEIKG_Pos (2UL)
  #define CRACEN_INTENSET_PKEIKG_Msk (0x1UL << CRACEN_INTENSET_PKEIKG_Pos)
  #define CRACEN_INTENSET_PKEIKG_Min (0x0UL)
  #define CRACEN_INTENSET_PKEIKG_Max (0x1UL)
  #define CRACEN_INTENSET_PKEIKG_Set (0x1UL)
  #define CRACEN_INTENSET_PKEIKG_Disabled (0x0UL)
  #define CRACEN_INTENSET_PKEIKG_Enabled (0x1UL)


/* CRACEN_INTENCLR: Disable interrupt */
  #define CRACEN_INTENCLR_ResetValue (0x00000000UL)

/* CRYPTOMASTER @Bit 0 : Write '1' to disable interrupt for event CRYPTOMASTER */
  #define CRACEN_INTENCLR_CRYPTOMASTER_Pos (0UL)
  #define CRACEN_INTENCLR_CRYPTOMASTER_Msk (0x1UL << CRACEN_INTENCLR_CRYPTOMASTER_Pos)
  #define CRACEN_INTENCLR_CRYPTOMASTER_Min (0x0UL)
  #define CRACEN_INTENCLR_CRYPTOMASTER_Max (0x1UL)
  #define CRACEN_INTENCLR_CRYPTOMASTER_Clear (0x1UL)
  #define CRACEN_INTENCLR_CRYPTOMASTER_Disabled (0x0UL)
  #define CRACEN_INTENCLR_CRYPTOMASTER_Enabled (0x1UL)

/* RNG @Bit 1 : Write '1' to disable interrupt for event RNG */
  #define CRACEN_INTENCLR_RNG_Pos (1UL)
  #define CRACEN_INTENCLR_RNG_Msk (0x1UL << CRACEN_INTENCLR_RNG_Pos)
  #define CRACEN_INTENCLR_RNG_Min (0x0UL)
  #define CRACEN_INTENCLR_RNG_Max (0x1UL)
  #define CRACEN_INTENCLR_RNG_Clear (0x1UL)
  #define CRACEN_INTENCLR_RNG_Disabled (0x0UL)
  #define CRACEN_INTENCLR_RNG_Enabled (0x1UL)

/* PKEIKG @Bit 2 : Write '1' to disable interrupt for event PKEIKG */
  #define CRACEN_INTENCLR_PKEIKG_Pos (2UL)
  #define CRACEN_INTENCLR_PKEIKG_Msk (0x1UL << CRACEN_INTENCLR_PKEIKG_Pos)
  #define CRACEN_INTENCLR_PKEIKG_Min (0x0UL)
  #define CRACEN_INTENCLR_PKEIKG_Max (0x1UL)
  #define CRACEN_INTENCLR_PKEIKG_Clear (0x1UL)
  #define CRACEN_INTENCLR_PKEIKG_Disabled (0x0UL)
  #define CRACEN_INTENCLR_PKEIKG_Enabled (0x1UL)


/* CRACEN_INTPEND: Pending interrupts */
  #define CRACEN_INTPEND_ResetValue (0x00000000UL)

/* CRYPTOMASTER @Bit 0 : Read pending status of interrupt for event CRYPTOMASTER */
  #define CRACEN_INTPEND_CRYPTOMASTER_Pos (0UL)
  #define CRACEN_INTPEND_CRYPTOMASTER_Msk (0x1UL << CRACEN_INTPEND_CRYPTOMASTER_Pos)
  #define CRACEN_INTPEND_CRYPTOMASTER_Min (0x0UL)
  #define CRACEN_INTPEND_CRYPTOMASTER_Max (0x1UL)
  #define CRACEN_INTPEND_CRYPTOMASTER_NotPending (0x0UL)
  #define CRACEN_INTPEND_CRYPTOMASTER_Pending (0x1UL)

/* RNG @Bit 1 : Read pending status of interrupt for event RNG */
  #define CRACEN_INTPEND_RNG_Pos (1UL)
  #define CRACEN_INTPEND_RNG_Msk (0x1UL << CRACEN_INTPEND_RNG_Pos)
  #define CRACEN_INTPEND_RNG_Min (0x0UL)
  #define CRACEN_INTPEND_RNG_Max (0x1UL)
  #define CRACEN_INTPEND_RNG_NotPending (0x0UL)
  #define CRACEN_INTPEND_RNG_Pending (0x1UL)

/* PKEIKG @Bit 2 : Read pending status of interrupt for event PKEIKG */
  #define CRACEN_INTPEND_PKEIKG_Pos (2UL)
  #define CRACEN_INTPEND_PKEIKG_Msk (0x1UL << CRACEN_INTPEND_PKEIKG_Pos)
  #define CRACEN_INTPEND_PKEIKG_Min (0x0UL)
  #define CRACEN_INTPEND_PKEIKG_Max (0x1UL)
  #define CRACEN_INTPEND_PKEIKG_NotPending (0x0UL)
  #define CRACEN_INTPEND_PKEIKG_Pending (0x1UL)


/* CRACEN_ENABLE: Enable CRACEN peripheral modules. */
  #define CRACEN_ENABLE_ResetValue (0x00000000UL)

/* CRYPTOMASTER @Bit 0 : Enable cryptomaster */
  #define CRACEN_ENABLE_CRYPTOMASTER_Pos (0UL)
  #define CRACEN_ENABLE_CRYPTOMASTER_Msk (0x1UL << CRACEN_ENABLE_CRYPTOMASTER_Pos)
  #define CRACEN_ENABLE_CRYPTOMASTER_Min (0x0UL)
  #define CRACEN_ENABLE_CRYPTOMASTER_Max (0x1UL)
  #define CRACEN_ENABLE_CRYPTOMASTER_Disabled (0x0UL)
  #define CRACEN_ENABLE_CRYPTOMASTER_Enabled (0x1UL)

/* RNG @Bit 1 : Enable RNG */
  #define CRACEN_ENABLE_RNG_Pos (1UL)
  #define CRACEN_ENABLE_RNG_Msk (0x1UL << CRACEN_ENABLE_RNG_Pos)
  #define CRACEN_ENABLE_RNG_Min (0x0UL)
  #define CRACEN_ENABLE_RNG_Max (0x1UL)
  #define CRACEN_ENABLE_RNG_Disabled (0x0UL)
  #define CRACEN_ENABLE_RNG_Enabled (0x1UL)

/* PKEIKG @Bit 2 : Enable PKE and IKG */
  #define CRACEN_ENABLE_PKEIKG_Pos (2UL)
  #define CRACEN_ENABLE_PKEIKG_Msk (0x1UL << CRACEN_ENABLE_PKEIKG_Pos)
  #define CRACEN_ENABLE_PKEIKG_Min (0x0UL)
  #define CRACEN_ENABLE_PKEIKG_Max (0x1UL)
  #define CRACEN_ENABLE_PKEIKG_Disabled (0x0UL)
  #define CRACEN_ENABLE_PKEIKG_Enabled (0x1UL)


/* CRACEN_SEEDVALID: Indicates the SEED register is valid. Writing this register has no effect. */
  #define CRACEN_SEEDVALID_ResetValue (0x00000000UL)

/* VALID @Bit 0 : Marks the SEED as valid */
  #define CRACEN_SEEDVALID_VALID_Pos (0UL)
  #define CRACEN_SEEDVALID_VALID_Msk (0x1UL << CRACEN_SEEDVALID_VALID_Pos)
  #define CRACEN_SEEDVALID_VALID_Min (0x0UL)
  #define CRACEN_SEEDVALID_VALID_Max (0x1UL)
  #define CRACEN_SEEDVALID_VALID_Disabled (0x0UL)
  #define CRACEN_SEEDVALID_VALID_Enabled (0x1UL)


/* CRACEN_SEED: Seed word [n] for symmetric and asymmetric key generation. This register is only writable from KMU. */
  #define CRACEN_SEED_MaxCount (12UL)
  #define CRACEN_SEED_MaxIndex (11UL)
  #define CRACEN_SEED_MinIndex (0UL)
  #define CRACEN_SEED_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Seed value */
  #define CRACEN_SEED_VAL_Pos (0UL)
  #define CRACEN_SEED_VAL_Msk (0xFFFFFFFFUL << CRACEN_SEED_VAL_Pos)


/* CRACEN_SEEDLOCK: Indicates the access to the SEED register is locked. Writing this register has no effect. */
  #define CRACEN_SEEDLOCK_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable the lock */
  #define CRACEN_SEEDLOCK_ENABLE_Pos (0UL)
  #define CRACEN_SEEDLOCK_ENABLE_Msk (0x1UL << CRACEN_SEEDLOCK_ENABLE_Pos)
  #define CRACEN_SEEDLOCK_ENABLE_Min (0x0UL)
  #define CRACEN_SEEDLOCK_ENABLE_Max (0x1UL)
  #define CRACEN_SEEDLOCK_ENABLE_Disabled (0x0UL)
  #define CRACEN_SEEDLOCK_ENABLE_Enabled (0x1UL)


/* CRACEN_PROTECTEDRAMLOCK: Lock the access to the protected RAM. */
  #define CRACEN_PROTECTEDRAMLOCK_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable the lock */
  #define CRACEN_PROTECTEDRAMLOCK_ENABLE_Pos (0UL)
  #define CRACEN_PROTECTEDRAMLOCK_ENABLE_Msk (0x1UL << CRACEN_PROTECTEDRAMLOCK_ENABLE_Pos)
  #define CRACEN_PROTECTEDRAMLOCK_ENABLE_Min (0x0UL)
  #define CRACEN_PROTECTEDRAMLOCK_ENABLE_Max (0x1UL)
  #define CRACEN_PROTECTEDRAMLOCK_ENABLE_Disabled (0x0UL)
  #define CRACEN_PROTECTEDRAMLOCK_ENABLE_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                        CRACENCORE                                        ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ============================================= Struct CRACENCORE_CRYPTMSTRDMA ============================================== */
/**
  * @brief CRYPTMSTRDMA [CRACENCORE_CRYPTMSTRDMA] (unspecified)
  */
typedef struct {
  __IOM uint32_t  FETCHADDRLSB;
  __IOM uint32_t  FETCHADDRMSB;
  __IOM uint32_t  FETCHLEN;
  __IOM uint32_t  FETCHTAG;
  __IOM uint32_t  PUSHADDRLSB;
  __IOM uint32_t  PUSHADDRMSB;
  __IOM uint32_t  PUSHLEN;
  __IOM uint32_t  INTEN;
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IOM uint32_t  INTSTATRAW;
  __IOM uint32_t  INTSTAT;
  __IOM uint32_t  INTSTATCLR;
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  START;
  __IOM uint32_t  STATUS;
} NRF_CRACENCORE_CRYPTMSTRDMA_Type;

/* CRACENCORE_CRYPTMSTRDMA_FETCHADDRLSB: Fetch Address Least Significant Bit */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHADDRLSB_ResetValue (0x00000000UL)

/* FETCHADDRLSB @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHADDRLSB_FETCHADDRLSB_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHADDRLSB_FETCHADDRLSB_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_FETCHADDRLSB_FETCHADDRLSB_Pos)
                                                                            /*!< Bit mask of FETCHADDRLSB field.*/


/* CRACENCORE_CRYPTMSTRDMA_FETCHADDRMSB: Fetch Address Most Significant Bit */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHADDRMSB_ResetValue (0x00000000UL)

/* FETCHADDRMSB @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHADDRMSB_FETCHADDRMSB_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHADDRMSB_FETCHADDRMSB_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_FETCHADDRMSB_FETCHADDRMSB_Pos)
                                                                            /*!< Bit mask of FETCHADDRMSB field.*/


/* CRACENCORE_CRYPTMSTRDMA_FETCHLEN: Fetch Length */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_ResetValue (0x00000000UL)

/* FETCHLEN @Bits 0..27 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHLEN_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHLEN_Msk (0xFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHLEN_Pos) /*!< Bit
                                                                            mask of FETCHLEN field.*/

/* FETCHCSTADDR @Bit 28 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHCSTADDR_Pos (28UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHCSTADDR_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHCSTADDR_Pos) /*!<
                                                                            Bit mask of FETCHCSTADDR field.*/

/* FETCHREALIGN @Bit 29 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHREALIGN_Pos (29UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHREALIGN_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHREALIGN_Pos) /*!<
                                                                            Bit mask of FETCHREALIGN field.*/

/* FETCHZPADDING @Bit 30 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHZPADDING_Pos (30UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHZPADDING_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHZPADDING_Pos) /*!<
                                                                            Bit mask of FETCHZPADDING field.*/


/* CRACENCORE_CRYPTMSTRDMA_FETCHTAG: Fetch Tag */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHTAG_ResetValue (0x00000000UL)

/* FETCHTAG @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHTAG_FETCHTAG_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHTAG_FETCHTAG_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_FETCHTAG_FETCHTAG_Pos) /*!< Bit
                                                                            mask of FETCHTAG field.*/


/* CRACENCORE_CRYPTMSTRDMA_PUSHADDRLSB: Push Address Least Significant Bit */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHADDRLSB_ResetValue (0x00000000UL)

/* PUSHADDRLSB @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHADDRLSB_PUSHADDRLSB_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_PUSHADDRLSB_PUSHADDRLSB_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_PUSHADDRLSB_PUSHADDRLSB_Pos)
                                                                            /*!< Bit mask of PUSHADDRLSB field.*/


/* CRACENCORE_CRYPTMSTRDMA_PUSHADDRMSB: Push Address Most Significant Bit */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHADDRMSB_ResetValue (0x00000000UL)

/* PUSHADDRMSB @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHADDRMSB_PUSHADDRMSB_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_PUSHADDRMSB_PUSHADDRMSB_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_PUSHADDRMSB_PUSHADDRMSB_Pos)
                                                                            /*!< Bit mask of PUSHADDRMSB field.*/


/* CRACENCORE_CRYPTMSTRDMA_PUSHLEN: Push Length */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_ResetValue (0x00000000UL)

/* PUSHLEN @Bits 0..27 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHLEN_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHLEN_Msk (0xFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHLEN_Pos) /*!< Bit mask
                                                                            of PUSHLEN field.*/

/* PUSHCSTADDR @Bit 28 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHCSTADDR_Pos (28UL)
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHCSTADDR_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHCSTADDR_Pos) /*!< Bit
                                                                            mask of PUSHCSTADDR field.*/

/* PUSHREALIGN @Bit 29 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHREALIGN_Pos (29UL)
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHREALIGN_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHREALIGN_Pos) /*!< Bit
                                                                            mask of PUSHREALIGN field.*/

/* PUSHDISCARD @Bit 30 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHDISCARD_Pos (30UL)
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHDISCARD_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHDISCARD_Pos) /*!< Bit
                                                                            mask of PUSHDISCARD field.*/


/* CRACENCORE_CRYPTMSTRDMA_INTEN: Interrupt Enable */
  #define CRACENCORE_CRYPTMSTRDMA_INTEN_ResetValue (0x00000000UL)

/* INTEN @Bits 0..5 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_INTEN_INTEN_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_INTEN_INTEN_Msk (0x3FUL << CRACENCORE_CRYPTMSTRDMA_INTEN_INTEN_Pos) /*!< Bit mask of INTEN
                                                                            field.*/


/* CRACENCORE_CRYPTMSTRDMA_INTENSET: Interrupt Set */
  #define CRACENCORE_CRYPTMSTRDMA_INTENSET_ResetValue (0x00000000UL)

/* INTENSET @Bits 0..5 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_INTENSET_INTENSET_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_INTENSET_INTENSET_Msk (0x3FUL << CRACENCORE_CRYPTMSTRDMA_INTENSET_INTENSET_Pos) /*!< Bit mask
                                                                            of INTENSET field.*/


/* CRACENCORE_CRYPTMSTRDMA_INTENCLR: Interrupt Clear */
  #define CRACENCORE_CRYPTMSTRDMA_INTENCLR_ResetValue (0x00000000UL)

/* INTENCLR @Bits 0..5 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_INTENCLR_INTENCLR_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_INTENCLR_INTENCLR_Msk (0x3FUL << CRACENCORE_CRYPTMSTRDMA_INTENCLR_INTENCLR_Pos) /*!< Bit mask
                                                                            of INTENCLR field.*/


/* CRACENCORE_CRYPTMSTRDMA_INTSTATRAW: Interrupt Status Raw */
  #define CRACENCORE_CRYPTMSTRDMA_INTSTATRAW_ResetValue (0x00000000UL)

/* INTSTATRAW @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_INTSTATRAW_INTSTATRAW_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_INTSTATRAW_INTSTATRAW_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_INTSTATRAW_INTSTATRAW_Pos)
                                                                            /*!< Bit mask of INTSTATRAW field.*/


/* CRACENCORE_CRYPTMSTRDMA_INTSTAT: Interrupt Status */
  #define CRACENCORE_CRYPTMSTRDMA_INTSTAT_ResetValue (0x00000000UL)

/* INTSTAT @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_INTSTAT_INTSTAT_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_INTSTAT_INTSTAT_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_INTSTAT_INTSTAT_Pos) /*!< Bit
                                                                            mask of INTSTAT field.*/


/* CRACENCORE_CRYPTMSTRDMA_INTSTATCLR: Interrupt Status Clear */
  #define CRACENCORE_CRYPTMSTRDMA_INTSTATCLR_ResetValue (0x00000000UL)

/* INTSTATCLR @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_INTSTATCLR_INTSTATCLR_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_INTSTATCLR_INTSTATCLR_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_INTSTATCLR_INTSTATCLR_Pos)
                                                                            /*!< Bit mask of INTSTATCLR field.*/


/* CRACENCORE_CRYPTMSTRDMA_CONFIG: Configuration */
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_ResetValue (0x00000000UL)

/* FETCHCTRLINDIRECT @Bit 0 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_FETCHCTRLINDIRECT_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_FETCHCTRLINDIRECT_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_CONFIG_FETCHCTRLINDIRECT_Pos)
                                                                            /*!< Bit mask of FETCHCTRLINDIRECT field.*/

/* PUSHCTRLINDIRECT @Bit 1 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_PUSHCTRLINDIRECT_Pos (1UL)
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_PUSHCTRLINDIRECT_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_CONFIG_PUSHCTRLINDIRECT_Pos)
                                                                            /*!< Bit mask of PUSHCTRLINDIRECT field.*/

/* FETCHSTOP @Bit 2 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_FETCHSTOP_Pos (2UL)
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_FETCHSTOP_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_CONFIG_FETCHSTOP_Pos) /*!< Bit mask of
                                                                            FETCHSTOP field.*/

/* PUSHSTOP @Bit 3 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_PUSHSTOP_Pos (3UL)
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_PUSHSTOP_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_CONFIG_PUSHSTOP_Pos) /*!< Bit mask of
                                                                            PUSHSTOP field.*/

/* SOFTRST @Bit 4 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_SOFTRST_Pos (4UL)
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_SOFTRST_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_CONFIG_SOFTRST_Pos) /*!< Bit mask of
                                                                            SOFTRST field.*/


/* CRACENCORE_CRYPTMSTRDMA_START: Start */
  #define CRACENCORE_CRYPTMSTRDMA_START_ResetValue (0x00000000UL)

/* STARTFETCH @Bit 0 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_START_STARTFETCH_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_START_STARTFETCH_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_START_STARTFETCH_Pos) /*!< Bit mask of
                                                                            STARTFETCH field.*/

/* STARTPUSH @Bit 1 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_START_STARTPUSH_Pos (1UL)
  #define CRACENCORE_CRYPTMSTRDMA_START_STARTPUSH_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_START_STARTPUSH_Pos) /*!< Bit mask of
                                                                            STARTPUSH field.*/


/* CRACENCORE_CRYPTMSTRDMA_STATUS: Status */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_ResetValue (0x00000000UL)

/* FETCHBUSY @Bit 0 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_FETCHBUSY_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_FETCHBUSY_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_STATUS_FETCHBUSY_Pos) /*!< Bit mask of
                                                                            FETCHBUSY field.*/

/* PUSHBUSY @Bit 1 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHBUSY_Pos (1UL)
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHBUSY_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHBUSY_Pos) /*!< Bit mask of
                                                                            PUSHBUSY field.*/

/* FETCHNOTEMPTY @Bit 4 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_FETCHNOTEMPTY_Pos (4UL)
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_FETCHNOTEMPTY_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_STATUS_FETCHNOTEMPTY_Pos) /*!< Bit
                                                                            mask of FETCHNOTEMPTY field.*/

/* PUSHWAITINGFIFO @Bit 5 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHWAITINGFIFO_Pos (5UL)
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHWAITINGFIFO_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHWAITINGFIFO_Pos) /*!<
                                                                            Bit mask of PUSHWAITINGFIFO field.*/

/* SOFTRSTBUSY @Bit 6 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_SOFTRSTBUSY_Pos (6UL)
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_SOFTRSTBUSY_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_STATUS_SOFTRSTBUSY_Pos) /*!< Bit mask
                                                                            of SOFTRSTBUSY field.*/

/* PUSHNBDATA @Bits 16..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHNBDATA_Pos (16UL)
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHNBDATA_Msk (0xFFFFUL << CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHNBDATA_Pos) /*!< Bit
                                                                            mask of PUSHNBDATA field.*/



/* ============================================== Struct CRACENCORE_CRYPTMSTRHW ============================================== */
/**
  * @brief CRYPTMSTRHW [CRACENCORE_CRYPTMSTRHW] (unspecified)
  */
typedef struct {
  __IOM uint32_t  INCLIPSHWCFG;
  __IOM uint32_t  BA411EAESHWCFG1;
  __IOM uint32_t  BA411EAESHWCFG2;
  __IOM uint32_t  BA413HASHHWCFG;
  __IOM uint32_t  BA418SHA3HWCFG;
  __IOM uint32_t  BA419SM4HWCFG;
  __IOM uint32_t  BA424ARIAHWCFG;
} NRF_CRACENCORE_CRYPTMSTRHW_Type;

/* CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG: Incuded IPs Hardware configuration */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_ResetValue (0x00000671UL)

/* BA411AESINCLUDED @Bit 0 : Generic g_IncludeAES value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA411AESINCLUDED_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA411AESINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA411AESINCLUDED_Pos)
                                                                            /*!< Bit mask of BA411AESINCLUDED field.*/

/* BA415HPAESGCMINCLUDED @Bit 1 : Generic g_IncludeAESGCM value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA415HPAESGCMINCLUDED_Pos (1UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA415HPAESGCMINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA415HPAESGCMINCLUDED_Pos)
                                                                            /*!< Bit mask of BA415HPAESGCMINCLUDED field.*/

/* BA416HPAESXTSINCLUDED @Bit 2 : Generic g_IncludeAESXTS value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA416HPAESXTSINCLUDED_Pos (2UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA416HPAESXTSINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA416HPAESXTSINCLUDED_Pos)
                                                                            /*!< Bit mask of BA416HPAESXTSINCLUDED field.*/

/* BA412DESINCLUDED @Bit 3 : Generic g_IncludeDES value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA412DESINCLUDED_Pos (3UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA412DESINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA412DESINCLUDED_Pos)
                                                                            /*!< Bit mask of BA412DESINCLUDED field.*/

/* BA413HASHINCLUDED @Bit 4 : Generic g_IncludeHASH value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA413HASHINCLUDED_Pos (4UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA413HASHINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA413HASHINCLUDED_Pos)
                                                                            /*!< Bit mask of BA413HASHINCLUDED field.*/

/* BA417CHACHAPOLYINCLUDED @Bit 5 : Generic g_IncludeChachaPoly value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA417CHACHAPOLYINCLUDED_Pos (5UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA417CHACHAPOLYINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA417CHACHAPOLYINCLUDED_Pos)
                                                                            /*!< Bit mask of BA417CHACHAPOLYINCLUDED field.*/

/* BA418SHA3INCLUDED @Bit 6 : Generic g_IncludeSHA3 value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA418SHA3INCLUDED_Pos (6UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA418SHA3INCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA418SHA3INCLUDED_Pos)
                                                                            /*!< Bit mask of BA418SHA3INCLUDED field.*/

/* BA421ZUCINCLUDED @Bit 7 : Generic g_IncludeZUC value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA421ZUCINCLUDED_Pos (7UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA421ZUCINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA421ZUCINCLUDED_Pos)
                                                                            /*!< Bit mask of BA421ZUCINCLUDED field.*/

/* BA419SM4INCLUDED @Bit 8 : Generic g_IncludeSM4 value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA419SM4INCLUDED_Pos (8UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA419SM4INCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA419SM4INCLUDED_Pos)
                                                                            /*!< Bit mask of BA419SM4INCLUDED field.*/

/* BA414EPPKEINCLUDED @Bit 9 : Generic g_IncludePKE value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA414EPPKEINCLUDED_Pos (9UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA414EPPKEINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA414EPPKEINCLUDED_Pos)
                                                                            /*!< Bit mask of BA414EPPKEINCLUDED field.*/

/* BA431NDRNGINCLUDED @Bit 10 : Generic g_IncludeNDRNG value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA431NDRNGINCLUDED_Pos (10UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA431NDRNGINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA431NDRNGINCLUDED_Pos)
                                                                            /*!< Bit mask of BA431NDRNGINCLUDED field.*/

/* BA420HPCHACHAPOLYINCLUDED @Bit 11 : Generic g_IncludeHPChachaPoly value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA420HPCHACHAPOLYINCLUDED_Pos (11UL) /*!< Position of BA420HPCHACHAPOLYINCLUDED
                                                                            field.*/
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA420HPCHACHAPOLYINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA420HPCHACHAPOLYINCLUDED_Pos)
                                                                            /*!< Bit mask of BA420HPCHACHAPOLYINCLUDED field.*/

/* BA423SNOW3GINCLUDED @Bit 12 : Generic g_IncludeSnow3G value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA423SNOW3GINCLUDED_Pos (12UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA423SNOW3GINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA423SNOW3GINCLUDED_Pos)
                                                                            /*!< Bit mask of BA423SNOW3GINCLUDED field.*/

/* BA422KASUMIINCLUDED @Bit 13 : Generic g_IncludeKasumi value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA422KASUMIINCLUDED_Pos (13UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA422KASUMIINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA422KASUMIINCLUDED_Pos)
                                                                            /*!< Bit mask of BA422KASUMIINCLUDED field.*/

/* BA422ARIAINCLUDED @Bit 14 : Generic g_IncludeAria value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA422ARIAINCLUDED_Pos (14UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA422ARIAINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA422ARIAINCLUDED_Pos)
                                                                            /*!< Bit mask of BA422ARIAINCLUDED field.*/


/* CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1: Generic g_AesModesPoss value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_ResetValue (0x05020167UL)

/* BA411EAESHWCFGMODE @Bits 0..8 : Generic g_AesModesPoss value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGMODE_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGMODE_Msk (0x1FFUL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGMODE_Pos)
                                                                            /*!< Bit mask of BA411EAESHWCFGMODE field.*/

/* BA411EAESHWCFGCS @Bit 16 : Generic g_CS value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGCS_Pos (16UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGCS_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGCS_Pos)
                                                                            /*!< Bit mask of BA411EAESHWCFGCS field.*/

/* BA411EAESHWCFGMASKING @Bit 17 : Generic g_UseMasking value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGMASKING_Pos (17UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGMASKING_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGMASKING_Pos)
                                                                            /*!< Bit mask of BA411EAESHWCFGMASKING field.*/

/* BA411EAESHWCFGKEYSIZE @Bits 24..26 : Generic g_Keysize value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGKEYSIZE_Pos (24UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGKEYSIZE_Msk (0x7UL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGKEYSIZE_Pos)
                                                                            /*!< Bit mask of BA411EAESHWCFGKEYSIZE field.*/

/* CONTEXTEN @Bit 27 : Generic g_CxSwitch value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_CONTEXTEN_Pos (27UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_CONTEXTEN_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_CONTEXTEN_Pos)
                                                                            /*!< Bit mask of CONTEXTEN field.*/

/* GLITCHPROT @Bit 28 : Generic g_GlitchProtection value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_GLITCHPROT_Pos (28UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_GLITCHPROT_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_GLITCHPROT_Pos)
                                                                            /*!< Bit mask of GLITCHPROT field.*/


/* CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2: Generic g_CtrSize value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_ResetValue (0x02000010UL)

/* BA411EAESHWCFG2 @Bits 0..15 : Generic g_CtrSize value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_BA411EAESHWCFG2_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_BA411EAESHWCFG2_Msk (0xFFFFUL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_BA411EAESHWCFG2_Pos)
                                                                            /*!< Bit mask of BA411EAESHWCFG2 field.*/

/* NBEXTAESKEYS @Bits 20..23 : Generic g_Ext_nb_AES_keys value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_NBEXTAESKEYS_Pos (20UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_NBEXTAESKEYS_Msk (0xFUL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_NBEXTAESKEYS_Pos)
                                                                            /*!< Bit mask of NBEXTAESKEYS field.*/

/* NBIKGAESKEYS @Bits 24..27 : Generic g_IKG_nb_AES_keys value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_NBIKGAESKEYS_Pos (24UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_NBIKGAESKEYS_Msk (0xFUL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_NBIKGAESKEYS_Pos)
                                                                            /*!< Bit mask of NBIKGAESKEYS field.*/


/* CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG: Generic g_Hash value */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_ResetValue (0x0001003EUL)

/* BA413HASHHWCFGMASK @Bits 0..6 : Generic g_HashMaskFunc value. */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGMASK_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGMASK_Msk (0x7FUL << CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGMASK_Pos)
                                                                            /*!< Bit mask of BA413HASHHWCFGMASK field.*/

/* BA413HASHHWCFGPADDING @Bit 16 : Generic g_HashPadding value. */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGPADDING_Pos (16UL)
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGPADDING_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGPADDING_Pos)
                                                                            /*!< Bit mask of BA413HASHHWCFGPADDING field.*/

/* BA413HASHHWCFGHMAC @Bit 17 : Generic g_HMAC_enabled value. */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGHMAC_Pos (17UL)
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGHMAC_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGHMAC_Pos)
                                                                            /*!< Bit mask of BA413HASHHWCFGHMAC field.*/

/* BA413HASHHWCFGVERIFYDIGEST @Bit 18 : Generic g_HashVerifyDigest value. */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGVERIFYDIGEST_Pos (18UL) /*!< Position of
                                                                            BA413HASHHWCFGVERIFYDIGEST field.*/
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGVERIFYDIGEST_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGVERIFYDIGEST_Pos)
                                                                            /*!< Bit mask of BA413HASHHWCFGVERIFYDIGEST field.*/

/* NBEXTHASHKEYS @Bits 20..23 : Generic g_Ext_nb_Hash_keys value. */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_NBEXTHASHKEYS_Pos (20UL)
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_NBEXTHASHKEYS_Msk (0xFUL << CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_NBEXTHASHKEYS_Pos)
                                                                            /*!< Bit mask of NBEXTHASHKEYS field.*/

/* NBIKGHASHKEYS @Bits 24..27 : Generic g_IKG_nb_Hash_keys value. */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_NBIKGHASHKEYS_Pos (24UL)
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_NBIKGHASHKEYS_Msk (0xFUL << CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_NBIKGHASHKEYS_Pos)
                                                                            /*!< Bit mask of NBIKGHASHKEYS field.*/


/* CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG: Generic g_Sha3CtxtEn value. */
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_ResetValue (0x00000001UL)

/* BA418SHA3HWCFG @Bit 0 : Generic g_Sha3CtxtEn value. */
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_BA418SHA3HWCFG_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_BA418SHA3HWCFG_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_BA418SHA3HWCFG_Pos)
                                                                            /*!< Bit mask of BA418SHA3HWCFG field.*/

/* HMAC @Bit 17 : HMAC enabled. */
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_HMAC_Pos (17UL)
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_HMAC_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_HMAC_Pos) /*!< Bit mask
                                                                            of HMAC field.*/

/* VERIFYDIGEST @Bit 18 : Support to digest verification. */
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_VERIFYDIGEST_Pos (18UL)
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_VERIFYDIGEST_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_VERIFYDIGEST_Pos)
                                                                            /*!< Bit mask of VERIFYDIGEST field.*/

/* NBEXTHASHKEYS @Bits 20..23 : Number of SHA3 HW keys. */
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_NBEXTHASHKEYS_Pos (20UL)
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_NBEXTHASHKEYS_Msk (0xFUL << CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_NBEXTHASHKEYS_Pos)
                                                                            /*!< Bit mask of NBEXTHASHKEYS field.*/

/* NBIKGHASHKEYS @Bits 24..27 : Number of SHA3 IKG keys. */
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_NBIKGHASHKEYS_Pos (24UL)
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_NBIKGHASHKEYS_Msk (0xFUL << CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_NBIKGHASHKEYS_Pos)
                                                                            /*!< Bit mask of NBIKGHASHKEYS field.*/


/* CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG: Generic g_SM4ModesPoss value. */
  #define CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_ResetValue (0x00000000UL)

/* BA419SM4HWCFG @Bits 0..8 : Generic g_SM4ModesPoss value. */
  #define CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_BA419SM4HWCFG_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_BA419SM4HWCFG_Msk (0x1FFUL << CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_BA419SM4HWCFG_Pos)
                                                                            /*!< Bit mask of BA419SM4HWCFG field.*/

/* USEMASKING @Bit 17 : Generic g_sm4UseMasking value. */
  #define CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_USEMASKING_Pos (17UL)
  #define CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_USEMASKING_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_USEMASKING_Pos)
                                                                            /*!< Bit mask of USEMASKING field.*/


/* CRACENCORE_CRYPTMSTRHW_BA424ARIAHWCFG: Generic g_aria_modePoss value. */
  #define CRACENCORE_CRYPTMSTRHW_BA424ARIAHWCFG_ResetValue (0x00000000UL)

/* BA424ARIAHWCFG @Bits 0..8 : Generic g_aria_modePoss value. */
  #define CRACENCORE_CRYPTMSTRHW_BA424ARIAHWCFG_BA424ARIAHWCFG_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_BA424ARIAHWCFG_BA424ARIAHWCFG_Msk (0x1FFUL << CRACENCORE_CRYPTMSTRHW_BA424ARIAHWCFG_BA424ARIAHWCFG_Pos)
                                                                            /*!< Bit mask of BA424ARIAHWCFG field.*/



/* ============================================== Struct CRACENCORE_RNGCONTROL =============================================== */
/**
  * @brief RNGCONTROL [CRACENCORE_RNGCONTROL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CONTROL;
  __IOM uint32_t  FIFOLEVEL;
  __IOM uint32_t  FIFOTHRESHOLD;
  __IOM uint32_t  FIFODEPTH;
  __IOM uint32_t  KEY[4];
  __IOM uint32_t  TESTDATA;
  __IOM uint32_t  REPEATTHRESHOLD;
  __IOM uint32_t  PROPTESTCUTOFF;
  __IOM uint32_t  LFSRSEED;
  __IOM uint32_t  STATUS;
  __IOM uint32_t  WARMUPPERIOD;
  __IOM uint32_t  DISABLEOSC;
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  SAMPLINGPERIOD;
  __IM  uint32_t  RESERVED1[4];
  __IOM uint32_t  HWCONFIG;
  __IOM uint32_t  COOLDOWNPERIOD;
  __IOM uint32_t  AUTOCORRTESTCUTOFF0;
  __IOM uint32_t  AUTOCORRTESTCUTOFF1;
  __IOM uint32_t  CORRTESTCUTOFF0;
  __IOM uint32_t  CORRTESTCUTOFF1;
  __IOM uint32_t  AUTOCORRTESTFAILED;
  __IOM uint32_t  CORRTESTFAILED;
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  HWVERSION;
} NRF_CRACENCORE_RNGCONTROL_Type;

/* CRACENCORE_RNGCONTROL_CONTROL: Control register */
  #define CRACENCORE_RNGCONTROL_CONTROL_ResetValue (0x00040000UL)

/* ENABLE @Bit 0 : Start/enable the NDRNG. */
  #define CRACENCORE_RNGCONTROL_CONTROL_ENABLE_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_ENABLE_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_ENABLE_Pos) /*!< Bit mask of ENABLE
                                                                            field.*/

/* LFSREN @Bit 1 : Select between the NDRNG with asynchronous free running oscillators (when 0) and the Pseudo-Random generator
                   with synchronous oscillators for simulation purpose (when 1). */

  #define CRACENCORE_RNGCONTROL_CONTROL_LFSREN_Pos (1UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_LFSREN_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_LFSREN_Pos) /*!< Bit mask of LFSREN
                                                                            field.*/

/* TESTEN @Bit 2 : Select input for conditioning function and continuous tests: */
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Pos (2UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Pos) /*!< Bit mask of TESTEN
                                                                            field.*/
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Min (0x0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Max (0x1UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_NORMAL (0x0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_TEST (0x1UL)

/* CONDBYPASS @Bit 3 : Conditioning function bypass. */
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Pos (3UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Pos) /*!< Bit mask of
                                                                            CONDBYPASS field.*/
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Min (0x0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Max (0x1UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_NORMAL (0x0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_BYPASS (0x1UL) /*!< the conditioning function is bypassed (to observe entropy
                                                                       source directly).*/

/* INTENREP @Bit 4 : Enable interrupt if any of the health test fails. */
  #define CRACENCORE_RNGCONTROL_CONTROL_INTENREP_Pos (4UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_INTENREP_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_INTENREP_Pos) /*!< Bit mask of
                                                                            INTENREP field.*/

/* INTENFULL @Bit 7 : Enable interrupt if FIFO is full. */
  #define CRACENCORE_RNGCONTROL_CONTROL_INTENFULL_Pos (7UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_INTENFULL_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_INTENFULL_Pos) /*!< Bit mask of
                                                                            INTENFULL field.*/

/* SOFTRST @Bit 8 : Datapath content flush and control FSM */
  #define CRACENCORE_RNGCONTROL_CONTROL_SOFTRST_Pos (8UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_SOFTRST_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_SOFTRST_Pos) /*!< Bit mask of
                                                                            SOFTRST field.*/

/* FORCEACTIVEROS @Bit 11 : Force oscillators to run when FIFO is full. */
  #define CRACENCORE_RNGCONTROL_CONTROL_FORCEACTIVEROS_Pos (11UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_FORCEACTIVEROS_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_FORCEACTIVEROS_Pos) /*!< Bit
                                                                            mask of FORCEACTIVEROS field.*/

/* IGNOREHEALTHTESTSFAILFORFSM @Bit 12 : Results of the health tests during start-up and online test do not affect the control
                                         FSM state. */

  #define CRACENCORE_RNGCONTROL_CONTROL_IGNOREHEALTHTESTSFAILFORFSM_Pos (12UL) /*!< Position of IGNOREHEALTHTESTSFAILFORFSM
                                                                            field.*/
  #define CRACENCORE_RNGCONTROL_CONTROL_IGNOREHEALTHTESTSFAILFORFSM_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_IGNOREHEALTHTESTSFAILFORFSM_Pos)
                                                                            /*!< Bit mask of IGNOREHEALTHTESTSFAILFORFSM field.*/

/* NB128BITBLOCKS @Bits 16..19 : Number of 128 bit blocks used in conditioning (AES-CBC-MAC) post-processing. */
  #define CRACENCORE_RNGCONTROL_CONTROL_NB128BITBLOCKS_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_NB128BITBLOCKS_Msk (0xFUL << CRACENCORE_RNGCONTROL_CONTROL_NB128BITBLOCKS_Pos) /*!< Bit
                                                                            mask of NB128BITBLOCKS field.*/

/* FIFOWRITESTARTUP @Bit 20 : Enable write of the samples in the FIFO during start-up. */
  #define CRACENCORE_RNGCONTROL_CONTROL_FIFOWRITESTARTUP_Pos (20UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_FIFOWRITESTARTUP_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_FIFOWRITESTARTUP_Pos) /*!<
                                                                            Bit mask of FIFOWRITESTARTUP field.*/

/* DISREPETTESTS @Bit 21 : All repetition tests (each share) are disabled via this single bit. */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISREPETTESTS_Pos (21UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_DISREPETTESTS_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_DISREPETTESTS_Pos) /*!< Bit
                                                                            mask of DISREPETTESTS field.*/

/* DISPROPTESTS @Bit 22 : All proportion tests (each share) are disabled via this single bit. */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISPROPTESTS_Pos (22UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_DISPROPTESTS_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_DISPROPTESTS_Pos) /*!< Bit mask
                                                                            of DISPROPTESTS field.*/

/* DISAUTOCORRTESTS @Bits 23..24 : Disable specific delay(s) check in auto-correlation test - same RO: */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISAUTOCORRTESTS_Pos (23UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_DISAUTOCORRTESTS_Msk (0x3UL << CRACENCORE_RNGCONTROL_CONTROL_DISAUTOCORRTESTS_Pos) /*!<
                                                                            Bit mask of DISAUTOCORRTESTS field.*/

/* DISCORRTESTS @Bits 27..29 : Disable specific delay(s) check in correlation test - different ROs: */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISCORRTESTS_Pos (27UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_DISCORRTESTS_Msk (0x7UL << CRACENCORE_RNGCONTROL_CONTROL_DISCORRTESTS_Pos) /*!< Bit mask
                                                                            of DISCORRTESTS field.*/

/* BLENDINGMETHOD @Bits 30..31 : Select blending method */
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Pos (30UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Msk (0x3UL << CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Pos) /*!< Bit
                                                                            mask of BLENDINGMETHOD field.*/
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Min (0x0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Max (0x3UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_CONCATENATION (0x0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_XORLEVEL1 (0x1UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_XORLEVEL2 (0x2UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_VONNEUMANN (0x3UL)


/* CRACENCORE_RNGCONTROL_FIFOLEVEL: FIFO level register. */
  #define CRACENCORE_RNGCONTROL_FIFOLEVEL_ResetValue (0x00000000UL)

/* FIFOLEVEL @Bits 0..31 : Number of 32 bits words of random values available in the FIFO. */
  #define CRACENCORE_RNGCONTROL_FIFOLEVEL_FIFOLEVEL_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_FIFOLEVEL_FIFOLEVEL_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_FIFOLEVEL_FIFOLEVEL_Pos) /*!< Bit
                                                                            mask of FIFOLEVEL field.*/


/* CRACENCORE_RNGCONTROL_FIFOTHRESHOLD: FIFO threshold register. */
  #define CRACENCORE_RNGCONTROL_FIFOTHRESHOLD_ResetValue (0x00000003UL)

/* FIFOTHRESHOLD @Bits 0..31 : FIFO level below which the module leaves the idle state to refill the FIFO, expressed in number
                               of 128bit blocks. */

  #define CRACENCORE_RNGCONTROL_FIFOTHRESHOLD_FIFOTHRESHOLD_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_FIFOTHRESHOLD_FIFOTHRESHOLD_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_FIFOTHRESHOLD_FIFOTHRESHOLD_Pos)
                                                                            /*!< Bit mask of FIFOTHRESHOLD field.*/


/* CRACENCORE_RNGCONTROL_FIFODEPTH: FIFO depth register. */
  #define CRACENCORE_RNGCONTROL_FIFODEPTH_ResetValue (0x00000010UL)

/* FIFODEPTH @Bits 0..31 : Maximum number of 32 bits words that can be stored in the FIFO. */
  #define CRACENCORE_RNGCONTROL_FIFODEPTH_FIFODEPTH_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_FIFODEPTH_FIFODEPTH_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_FIFODEPTH_FIFODEPTH_Pos) /*!< Bit
                                                                            mask of FIFODEPTH field.*/


/* CRACENCORE_RNGCONTROL_KEY: Key register. */
  #define CRACENCORE_RNGCONTROL_KEY_MaxCount (4UL)
  #define CRACENCORE_RNGCONTROL_KEY_MaxIndex (3UL)
  #define CRACENCORE_RNGCONTROL_KEY_MinIndex (0UL)
  #define CRACENCORE_RNGCONTROL_KEY_ResetValue (0x00000000UL)

/* KEY @Bits 0..31 : Key register. */
  #define CRACENCORE_RNGCONTROL_KEY_KEY_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_KEY_KEY_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_KEY_KEY_Pos)


/* CRACENCORE_RNGCONTROL_TESTDATA: Test data register. */
  #define CRACENCORE_RNGCONTROL_TESTDATA_ResetValue (0x00000000UL)

/* TESTDATA @Bits 0..31 : Test data register. */
  #define CRACENCORE_RNGCONTROL_TESTDATA_TESTDATA_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_TESTDATA_TESTDATA_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_TESTDATA_TESTDATA_Pos) /*!< Bit
                                                                            mask of TESTDATA field.*/


/* CRACENCORE_RNGCONTROL_REPEATTHRESHOLD: Repetition test cut-off register. */
  #define CRACENCORE_RNGCONTROL_REPEATTHRESHOLD_ResetValue (0x00000004UL)

/* REPEATTHRESHOLD @Bits 0..5 : Repetition Test cut-off value. */
  #define CRACENCORE_RNGCONTROL_REPEATTHRESHOLD_REPEATTHRESHOLD_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_REPEATTHRESHOLD_REPEATTHRESHOLD_Msk (0x3FUL << CRACENCORE_RNGCONTROL_REPEATTHRESHOLD_REPEATTHRESHOLD_Pos)
                                                                            /*!< Bit mask of REPEATTHRESHOLD field.*/


/* CRACENCORE_RNGCONTROL_PROPTESTCUTOFF: Proportion test cut-off register. */
  #define CRACENCORE_RNGCONTROL_PROPTESTCUTOFF_ResetValue (0x0000000DUL)

/* PROPTESTCUTOFF @Bits 0..8 : Proportion test cut-off value. */
  #define CRACENCORE_RNGCONTROL_PROPTESTCUTOFF_PROPTESTCUTOFF_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_PROPTESTCUTOFF_PROPTESTCUTOFF_Msk (0x1FFUL << CRACENCORE_RNGCONTROL_PROPTESTCUTOFF_PROPTESTCUTOFF_Pos)
                                                                            /*!< Bit mask of PROPTESTCUTOFF field.*/


/* CRACENCORE_RNGCONTROL_LFSRSEED: LFSR seed register. */
  #define CRACENCORE_RNGCONTROL_LFSRSEED_ResetValue (0x00FFFFFFUL)

/* LFSRSEED @Bits 0..23 : LFSR initialization value. */
  #define CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSEED_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSEED_Msk (0xFFFFFFUL << CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSEED_Pos) /*!< Bit mask
                                                                            of LFSRSEED field.*/

/* LFSRSSELECTION @Bits 24..25 : Share index for which initialization value should be used. */
  #define CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSSELECTION_Pos (24UL)
  #define CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSSELECTION_Msk (0x3UL << CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSSELECTION_Pos) /*!<
                                                                            Bit mask of LFSRSSELECTION field.*/


/* CRACENCORE_RNGCONTROL_STATUS: Status register. */
  #define CRACENCORE_RNGCONTROL_STATUS_ResetValue (0x00000000UL)

/* TESTDATABUSY @Bit 0 : High when data written to TestData register is being processed. */
  #define CRACENCORE_RNGCONTROL_STATUS_TESTDATABUSY_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_STATUS_TESTDATABUSY_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_TESTDATABUSY_Pos) /*!< Bit mask
                                                                            of TESTDATABUSY field.*/

/* STATE @Bits 1..3 : State of the control FSM: */
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_Pos (1UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_Msk (0x7UL << CRACENCORE_RNGCONTROL_STATUS_STATE_Pos) /*!< Bit mask of STATE
                                                                            field.*/
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_Min (0x0UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_Max (0x5UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_RESET (0x0UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_STARTUP (0x1UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_IDLERON (0x2UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_FILLFIFO (0x4UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_ERROR (0x5UL)

/* REPFAIL @Bit 4 : NIST repetition test(s) failure. */
  #define CRACENCORE_RNGCONTROL_STATUS_REPFAIL_Pos (4UL)
  #define CRACENCORE_RNGCONTROL_STATUS_REPFAIL_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_REPFAIL_Pos) /*!< Bit mask of REPFAIL
                                                                            field.*/

/* PROPFAIL @Bit 5 : NIST proportion test(s) failure. */
  #define CRACENCORE_RNGCONTROL_STATUS_PROPFAIL_Pos (5UL)
  #define CRACENCORE_RNGCONTROL_STATUS_PROPFAIL_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_PROPFAIL_Pos) /*!< Bit mask of
                                                                            PROPFAIL field.*/

/* ANYHEALTHTESTFAIL @Bit 6 : Any of the enabled health tests is failing. */
  #define CRACENCORE_RNGCONTROL_STATUS_ANYHEALTHTESTFAIL_Pos (6UL)
  #define CRACENCORE_RNGCONTROL_STATUS_ANYHEALTHTESTFAIL_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_ANYHEALTHTESTFAIL_Pos) /*!<
                                                                            Bit mask of ANYHEALTHTESTFAIL field.*/

/* FULLINT @Bit 7 : FIFO full status. */
  #define CRACENCORE_RNGCONTROL_STATUS_FULLINT_Pos (7UL)
  #define CRACENCORE_RNGCONTROL_STATUS_FULLINT_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_FULLINT_Pos) /*!< Bit mask of FULLINT
                                                                            field.*/

/* STARTUPFAIL @Bit 10 : Start-up test(s) failure. */
  #define CRACENCORE_RNGCONTROL_STATUS_STARTUPFAIL_Pos (10UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STARTUPFAIL_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_STARTUPFAIL_Pos) /*!< Bit mask of
                                                                            STARTUPFAIL field.*/

/* REPTESTFAILPERSHARE @Bits 12..15 : NIST Repetition test failure per share. */
  #define CRACENCORE_RNGCONTROL_STATUS_REPTESTFAILPERSHARE_Pos (12UL)
  #define CRACENCORE_RNGCONTROL_STATUS_REPTESTFAILPERSHARE_Msk (0xFUL << CRACENCORE_RNGCONTROL_STATUS_REPTESTFAILPERSHARE_Pos)
                                                                            /*!< Bit mask of REPTESTFAILPERSHARE field.*/

/* PROPTESTFAILPERSHARE @Bits 16..19 : NIST Proportion test failure per share. */
  #define CRACENCORE_RNGCONTROL_STATUS_PROPTESTFAILPERSHARE_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_STATUS_PROPTESTFAILPERSHARE_Msk (0xFUL << CRACENCORE_RNGCONTROL_STATUS_PROPTESTFAILPERSHARE_Pos)
                                                                            /*!< Bit mask of PROPTESTFAILPERSHARE field.*/

/* CONDITIONINGISTOOSLOW @Bit 20 : Conditioning consumes data slower than they are provided to it. */
  #define CRACENCORE_RNGCONTROL_STATUS_CONDITIONINGISTOOSLOW_Pos (20UL)
  #define CRACENCORE_RNGCONTROL_STATUS_CONDITIONINGISTOOSLOW_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_CONDITIONINGISTOOSLOW_Pos)
                                                                            /*!< Bit mask of CONDITIONINGISTOOSLOW field.*/


/* CRACENCORE_RNGCONTROL_WARMUPPERIOD: Number of clock cycles in warm-up sequence. */
  #define CRACENCORE_RNGCONTROL_WARMUPPERIOD_ResetValue (0x00000200UL)

/* WARMUPPERIOD @Bits 0..11 : Number of clock cycles in warm-up sequence. */
  #define CRACENCORE_RNGCONTROL_WARMUPPERIOD_WARMUPPERIOD_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_WARMUPPERIOD_WARMUPPERIOD_Msk (0xFFFUL << CRACENCORE_RNGCONTROL_WARMUPPERIOD_WARMUPPERIOD_Pos)
                                                                            /*!< Bit mask of WARMUPPERIOD field.*/


/* CRACENCORE_RNGCONTROL_DISABLEOSC: DisableOsc register. */
  #define CRACENCORE_RNGCONTROL_DISABLEOSC_ResetValue (0x00000000UL)

/* DISABLEOSC @Bits 0..7 : Disable oscillator rings 0 to 7. */
  #define CRACENCORE_RNGCONTROL_DISABLEOSC_DISABLEOSC_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_DISABLEOSC_DISABLEOSC_Msk (0xFFUL << CRACENCORE_RNGCONTROL_DISABLEOSC_DISABLEOSC_Pos) /*!< Bit
                                                                            mask of DISABLEOSC field.*/


/* CRACENCORE_RNGCONTROL_SAMPLINGPERIOD: Number of clock cycles between sampling moments. */
  #define CRACENCORE_RNGCONTROL_SAMPLINGPERIOD_ResetValue (0x00000FFFUL)

/* SAMPLINGPERIOD @Bits 0..11 : Number of clock cycles between sampling moments. */
  #define CRACENCORE_RNGCONTROL_SAMPLINGPERIOD_SAMPLINGPERIOD_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_SAMPLINGPERIOD_SAMPLINGPERIOD_Msk (0xFFFUL << CRACENCORE_RNGCONTROL_SAMPLINGPERIOD_SAMPLINGPERIOD_Pos)
                                                                            /*!< Bit mask of SAMPLINGPERIOD field.*/


/* CRACENCORE_RNGCONTROL_HWCONFIG: Hardware configuration register. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_ResetValue (0x0002410FUL)

/* NBOFINV @Bits 0..7 : Generic g_NbOfInverters value. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_NBOFINV_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_HWCONFIG_NBOFINV_Msk (0xFFUL << CRACENCORE_RNGCONTROL_HWCONFIG_NBOFINV_Pos) /*!< Bit mask of
                                                                            NBOFINV field.*/

/* LOG2NBOFAUTOCORRTESTSPERSHARE @Bits 8..11 : Generic g_Log2NbOfAutoCorrTestsPerShare value. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFAUTOCORRTESTSPERSHARE_Pos (8UL) /*!< Position of LOG2NBOFAUTOCORRTESTSPERSHARE
                                                                            field.*/
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFAUTOCORRTESTSPERSHARE_Msk (0xFUL << CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFAUTOCORRTESTSPERSHARE_Pos)
                                                                            /*!< Bit mask of LOG2NBOFAUTOCORRTESTSPERSHARE
                                                                            field.*/

/* LOG2FIFODEPTH @Bits 12..15 : Generic g_Log2FifoDepth value. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2FIFODEPTH_Pos (12UL)
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2FIFODEPTH_Msk (0xFUL << CRACENCORE_RNGCONTROL_HWCONFIG_LOG2FIFODEPTH_Pos) /*!< Bit
                                                                            mask of LOG2FIFODEPTH field.*/

/* LOG2NBOFSHARES @Bits 16..17 : Generic g_Log2NbOfShares value. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFSHARES_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFSHARES_Msk (0x3UL << CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFSHARES_Pos) /*!<
                                                                            Bit mask of LOG2NBOFSHARES field.*/


/* CRACENCORE_RNGCONTROL_COOLDOWNPERIOD: Number of clock cycles in cool-down sequence. */
  #define CRACENCORE_RNGCONTROL_COOLDOWNPERIOD_ResetValue (0x00000000UL)

/* COOLDOWNPERIOD @Bits 0..11 : Number of clock cycles in cool-down sequence. */
  #define CRACENCORE_RNGCONTROL_COOLDOWNPERIOD_COOLDOWNPERIOD_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_COOLDOWNPERIOD_COOLDOWNPERIOD_Msk (0xFFFUL << CRACENCORE_RNGCONTROL_COOLDOWNPERIOD_COOLDOWNPERIOD_Pos)
                                                                            /*!< Bit mask of COOLDOWNPERIOD field.*/


/* CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0: AutoCorrTestCutoff register 0 */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_ResetValue (0x007F007FUL)

/* DLYZEROCUTOFF @Bits 0..15 : Auto-correlation test cut-off value for delay of 0 samples. */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYZEROCUTOFF_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYZEROCUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYZEROCUTOFF_Pos)
                                                                            /*!< Bit mask of DLYZEROCUTOFF field.*/

/* DLYONECUTOFF @Bits 16..31 : Auto-correlation test cut-off value for delay of +1 sample. */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYONECUTOFF_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYONECUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYONECUTOFF_Pos)
                                                                            /*!< Bit mask of DLYONECUTOFF field.*/


/* CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1: AutoCorrTestCutoff register 1 */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_ResetValue (0x007F007FUL)

/* DLYTWOCUTOFF @Bits 0..15 : Auto-correlation test cut-off value for delay of +2 samples. */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTWOCUTOFF_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTWOCUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTWOCUTOFF_Pos)
                                                                            /*!< Bit mask of DLYTWOCUTOFF field.*/

/* DLYTHREECUTOFF @Bits 16..31 : Auto-correlation test cut-off value for delay of +3 samples. */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTHREECUTOFF_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTHREECUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTHREECUTOFF_Pos)
                                                                            /*!< Bit mask of DLYTHREECUTOFF field.*/


/* CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0: CorrTestCutoff register 0 */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_ResetValue (0x007F007FUL)

/* DLYZEROCUTOFF @Bits 0..15 : Correlation test cut-off value for delay of 0 samples. */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYZEROCUTOFF_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYZEROCUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYZEROCUTOFF_Pos)
                                                                            /*!< Bit mask of DLYZEROCUTOFF field.*/

/* DLYONECUTOFF @Bits 16..31 : Correlation test cut-off value for delay of +/-1 sample. */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYONECUTOFF_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYONECUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYONECUTOFF_Pos)
                                                                            /*!< Bit mask of DLYONECUTOFF field.*/


/* CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1: CorrTestCutoff register 1 */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_ResetValue (0x007F007FUL)

/* DLYTWOCUTOFF @Bits 0..15 : Correlation test cut-off value for delay of +/- 2 samples. */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTWOCUTOFF_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTWOCUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTWOCUTOFF_Pos)
                                                                            /*!< Bit mask of DLYTWOCUTOFF field.*/

/* DLYTHREECUTOFF @Bits 16..31 : Correlation test cut-off value for delay of +/- 3 samples. */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTHREECUTOFF_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTHREECUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTHREECUTOFF_Pos)
                                                                            /*!< Bit mask of DLYTHREECUTOFF field.*/


/* CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED: Auto-correlation test failing ring(s). */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED_ResetValue (0x00000000UL)

/* AUTOCORRTESTFAILED @Bits 0..31 : Auto-correlation test failing ring(s). */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED_AUTOCORRTESTFAILED_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED_AUTOCORRTESTFAILED_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED_AUTOCORRTESTFAILED_Pos)
                                                                            /*!< Bit mask of AUTOCORRTESTFAILED field.*/


/* CRACENCORE_RNGCONTROL_CORRTESTFAILED: Correlation test failing ring. */
  #define CRACENCORE_RNGCONTROL_CORRTESTFAILED_ResetValue (0x00000000UL)

/* CORRTESTFAILED @Bits 0..31 : Correlation test failing ring. */
  #define CRACENCORE_RNGCONTROL_CORRTESTFAILED_CORRTESTFAILED_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_CORRTESTFAILED_CORRTESTFAILED_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTFAILED_CORRTESTFAILED_Pos)
                                                                            /*!< Bit mask of CORRTESTFAILED field.*/


/* CRACENCORE_RNGCONTROL_HWVERSION: Fixed to 1 for this version. */
  #define CRACENCORE_RNGCONTROL_HWVERSION_ResetValue (0x00000001UL)

/* HWVERSION @Bits 0..31 : Fixed to 1 for this version. */
  #define CRACENCORE_RNGCONTROL_HWVERSION_HWVERSION_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_HWVERSION_HWVERSION_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_HWVERSION_HWVERSION_Pos) /*!< Bit
                                                                            mask of HWVERSION field.*/



/* ================================================== Struct CRACENCORE_PK =================================================== */
/**
  * @brief PK [CRACENCORE_PK] (unspecified)
  */
typedef struct {
  __IOM uint32_t  POINTERS;
  __IOM uint32_t  COMMAND;
  __IOM uint32_t  CONTROL;
  __IOM uint32_t  STATUS;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  TIMER;
  __IOM uint32_t  HWCONFIG;
  __IOM uint32_t  OPSIZE;
  __IM  uint32_t  RESERVED1[8];
  __IOM uint32_t  ECCERRORBITPOS;
  __IOM uint32_t  ECCCONTROLSTATUSREG;
  __IM  uint32_t  RESERVED2[12];
  __IOM uint32_t  MICROCODEFORMAT;
  __IOM uint32_t  HWVERSION;
} NRF_CRACENCORE_PK_Type;

/* CRACENCORE_PK_POINTERS: Pointers register. */
  #define CRACENCORE_PK_POINTERS_ResetValue (0x00000000UL)

/* OPPTRA @Bits 0..3 : When executing primitive arithmetic operations, this pointer defines where operand A is located in memory
                       (location 0x0 to 0xF). */

  #define CRACENCORE_PK_POINTERS_OPPTRA_Pos (0UL)
  #define CRACENCORE_PK_POINTERS_OPPTRA_Msk (0xFUL << CRACENCORE_PK_POINTERS_OPPTRA_Pos)

/* OPPTRB @Bits 8..11 : When executing primitive arithmetic operations, this pointer defines where operand B is located in
                        memory (location 0x0 to 0xF). */

  #define CRACENCORE_PK_POINTERS_OPPTRB_Pos (8UL)
  #define CRACENCORE_PK_POINTERS_OPPTRB_Msk (0xFUL << CRACENCORE_PK_POINTERS_OPPTRB_Pos)

/* OPPTRC @Bits 16..19 : When executing primitive arithmetic operations, this pointer defines the location (0x0 to 0xF) where
                         the result will be stored in memory. */

  #define CRACENCORE_PK_POINTERS_OPPTRC_Pos (16UL)
  #define CRACENCORE_PK_POINTERS_OPPTRC_Msk (0xFUL << CRACENCORE_PK_POINTERS_OPPTRC_Pos)

/* OPPTRN @Bits 24..27 : When executing primitive arithmetic operations, this pointer defines the location where the modulus is
                         located in memory (location 0x0 to 0xF). */

  #define CRACENCORE_PK_POINTERS_OPPTRN_Pos (24UL)
  #define CRACENCORE_PK_POINTERS_OPPTRN_Msk (0xFUL << CRACENCORE_PK_POINTERS_OPPTRN_Pos)


/* CRACENCORE_PK_COMMAND: Command register. */
  #define CRACENCORE_PK_COMMAND_ResetValue (0x0000000FUL)

/* OPEADDR @Bits 0..6 : This field defines the operation to be performed. */
  #define CRACENCORE_PK_COMMAND_OPEADDR_Pos (0UL)
  #define CRACENCORE_PK_COMMAND_OPEADDR_Msk (0x7FUL << CRACENCORE_PK_COMMAND_OPEADDR_Pos)

/* FIELDF @Bit 7 : 0: Field is GF(p) 1: Field is GF(2**m) */
  #define CRACENCORE_PK_COMMAND_FIELDF_Pos (7UL)
  #define CRACENCORE_PK_COMMAND_FIELDF_Msk (0x1UL << CRACENCORE_PK_COMMAND_FIELDF_Pos)

/* OPBYTESM1 @Bits 8..17 : This field defines the size (= number of bytes minus one) of the operands for the current operation.
                           */

  #define CRACENCORE_PK_COMMAND_OPBYTESM1_Pos (8UL)
  #define CRACENCORE_PK_COMMAND_OPBYTESM1_Msk (0x3FFUL << CRACENCORE_PK_COMMAND_OPBYTESM1_Pos) /*!< Bit mask of OPBYTESM1
                                                                            field.*/

/* RANDMOD @Bit 19 : Enable randomization of modulus (counter-measure). */
  #define CRACENCORE_PK_COMMAND_RANDMOD_Pos (19UL)
  #define CRACENCORE_PK_COMMAND_RANDMOD_Msk (0x1UL << CRACENCORE_PK_COMMAND_RANDMOD_Pos)

/* SELCURVE @Bits 20..22 : Enable accelerator for specific curve modulus: */
  #define CRACENCORE_PK_COMMAND_SELCURVE_Pos (20UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_Msk (0x7UL << CRACENCORE_PK_COMMAND_SELCURVE_Pos)
  #define CRACENCORE_PK_COMMAND_SELCURVE_Min (0x0UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_Max (0x6UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_NOACCEL (0x0UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_P256 (0x1UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_P384 (0x2UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_P521 (0x3UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_P192 (0x4UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_CURVE25519 (0x5UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_ED25519 (0x6UL)

/* RANDKE @Bit 24 : Enable randomization of exponent/scalar (counter-measure). */
  #define CRACENCORE_PK_COMMAND_RANDKE_Pos (24UL)
  #define CRACENCORE_PK_COMMAND_RANDKE_Msk (0x1UL << CRACENCORE_PK_COMMAND_RANDKE_Pos)

/* RANDPROJ @Bit 25 : Enable randomization of projective coordinates (counter-measure). */
  #define CRACENCORE_PK_COMMAND_RANDPROJ_Pos (25UL)
  #define CRACENCORE_PK_COMMAND_RANDPROJ_Msk (0x1UL << CRACENCORE_PK_COMMAND_RANDPROJ_Pos)

/* EDWARDS @Bit 26 : Enable Edwards curve. */
  #define CRACENCORE_PK_COMMAND_EDWARDS_Pos (26UL)
  #define CRACENCORE_PK_COMMAND_EDWARDS_Msk (0x1UL << CRACENCORE_PK_COMMAND_EDWARDS_Pos)

/* SWAPBYTES @Bit 28 : Swap the bytes on AHB interface: */
  #define CRACENCORE_PK_COMMAND_SWAPBYTES_Pos (28UL)
  #define CRACENCORE_PK_COMMAND_SWAPBYTES_Msk (0x1UL << CRACENCORE_PK_COMMAND_SWAPBYTES_Pos)
  #define CRACENCORE_PK_COMMAND_SWAPBYTES_Min (0x0UL)
  #define CRACENCORE_PK_COMMAND_SWAPBYTES_Max (0x1UL)
  #define CRACENCORE_PK_COMMAND_SWAPBYTES_NATIVE (0x0UL)
  #define CRACENCORE_PK_COMMAND_SWAPBYTES_SWAPPED (0x1UL)

/* FLAGA @Bit 29 : Flag A. */
  #define CRACENCORE_PK_COMMAND_FLAGA_Pos (29UL)
  #define CRACENCORE_PK_COMMAND_FLAGA_Msk (0x1UL << CRACENCORE_PK_COMMAND_FLAGA_Pos)

/* FLAGB @Bit 30 : Flag B. */
  #define CRACENCORE_PK_COMMAND_FLAGB_Pos (30UL)
  #define CRACENCORE_PK_COMMAND_FLAGB_Msk (0x1UL << CRACENCORE_PK_COMMAND_FLAGB_Pos)

/* CALCR2 @Bit 31 : This bit indicates if the IP has to calculate R**2 mod N for the next operation. */
  #define CRACENCORE_PK_COMMAND_CALCR2_Pos (31UL)
  #define CRACENCORE_PK_COMMAND_CALCR2_Msk (0x1UL << CRACENCORE_PK_COMMAND_CALCR2_Pos)
  #define CRACENCORE_PK_COMMAND_CALCR2_Min (0x0UL)
  #define CRACENCORE_PK_COMMAND_CALCR2_Max (0x1UL)
  #define CRACENCORE_PK_COMMAND_CALCR2_NRECALCULATE (0x0UL)
  #define CRACENCORE_PK_COMMAND_CALCR2_RECALCULATE (0x1UL)


/* CRACENCORE_PK_CONTROL: Command register. */
  #define CRACENCORE_PK_CONTROL_ResetValue (0x00000000UL)

/* START @Bit 0 : Writing a 1 starts the processing. */
  #define CRACENCORE_PK_CONTROL_START_Pos (0UL)
  #define CRACENCORE_PK_CONTROL_START_Msk (0x1UL << CRACENCORE_PK_CONTROL_START_Pos)

/* CLEARIRQ @Bit 1 : Writing a 1 clears the IRQ output. */
  #define CRACENCORE_PK_CONTROL_CLEARIRQ_Pos (1UL)
  #define CRACENCORE_PK_CONTROL_CLEARIRQ_Msk (0x1UL << CRACENCORE_PK_CONTROL_CLEARIRQ_Pos)


/* CRACENCORE_PK_STATUS: Status register. */
  #define CRACENCORE_PK_STATUS_ResetValue (0x00000000UL)

/* ERRORFLAGS @Bits 4..15 : These bits indicate an error condition. */
  #define CRACENCORE_PK_STATUS_ERRORFLAGS_Pos (4UL)
  #define CRACENCORE_PK_STATUS_ERRORFLAGS_Msk (0xFFFUL << CRACENCORE_PK_STATUS_ERRORFLAGS_Pos) /*!< Bit mask of ERRORFLAGS
                                                                            field.*/

/* PKBUSY @Bit 16 : This bit reflects the BUSY output value. */
  #define CRACENCORE_PK_STATUS_PKBUSY_Pos (16UL)
  #define CRACENCORE_PK_STATUS_PKBUSY_Msk (0x1UL << CRACENCORE_PK_STATUS_PKBUSY_Pos)

/* INTRPTSTATUS @Bit 17 : This bit reflects the IRQ output value. */
  #define CRACENCORE_PK_STATUS_INTRPTSTATUS_Pos (17UL)
  #define CRACENCORE_PK_STATUS_INTRPTSTATUS_Msk (0x1UL << CRACENCORE_PK_STATUS_INTRPTSTATUS_Pos) /*!< Bit mask of INTRPTSTATUS
                                                                            field.*/

/* FAILPTR @Bits 24..28 : These bits indicate which data location generated the error flag. */
  #define CRACENCORE_PK_STATUS_FAILPTR_Pos (24UL)
  #define CRACENCORE_PK_STATUS_FAILPTR_Msk (0x1FUL << CRACENCORE_PK_STATUS_FAILPTR_Pos)


/* CRACENCORE_PK_TIMER: Timer register. */
  #define CRACENCORE_PK_TIMER_ResetValue (0x00000000UL)

/* TIMER @Bits 1..31 : Number of clock cycles (as the number of core cycles is always even, register bit 0 is tied to zero. */
  #define CRACENCORE_PK_TIMER_TIMER_Pos (1UL)
  #define CRACENCORE_PK_TIMER_TIMER_Msk (0x7FFFFFFFUL << CRACENCORE_PK_TIMER_TIMER_Pos)


/* CRACENCORE_PK_HWCONFIG: Hardware configuration register. */
  #define CRACENCORE_PK_HWCONFIG_ResetValue (0x01F30000UL)

/* MAXOPSIZE @Bits 0..11 : Maximum operand size (number of bytes). */
  #define CRACENCORE_PK_HWCONFIG_MAXOPSIZE_Pos (0UL)
  #define CRACENCORE_PK_HWCONFIG_MAXOPSIZE_Msk (0xFFFUL << CRACENCORE_PK_HWCONFIG_MAXOPSIZE_Pos) /*!< Bit mask of MAXOPSIZE
                                                                            field.*/

/* NBMULT @Bits 12..15 : Number of multipliers: */
  #define CRACENCORE_PK_HWCONFIG_NBMULT_Pos (12UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_Msk (0xFUL << CRACENCORE_PK_HWCONFIG_NBMULT_Pos)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_Min (0x0UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_Max (0x8UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_MULT1 (0x0UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_MULT4 (0x1UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_MULT16 (0x2UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_MULT64 (0x4UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_MULT256 (0x8UL)

/* PRIMEFIELD @Bit 16 : Support prime field. */
  #define CRACENCORE_PK_HWCONFIG_PRIMEFIELD_Pos (16UL)
  #define CRACENCORE_PK_HWCONFIG_PRIMEFIELD_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_PRIMEFIELD_Pos) /*!< Bit mask of PRIMEFIELD
                                                                            field.*/

/* BINARYFIELD @Bit 17 : Support binary field. */
  #define CRACENCORE_PK_HWCONFIG_BINARYFIELD_Pos (17UL)
  #define CRACENCORE_PK_HWCONFIG_BINARYFIELD_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_BINARYFIELD_Pos) /*!< Bit mask of BINARYFIELD
                                                                            field.*/

/* DATAMEMECC @Bit 18 : Support data memory error correction. */
  #define CRACENCORE_PK_HWCONFIG_DATAMEMECC_Pos (18UL)
  #define CRACENCORE_PK_HWCONFIG_DATAMEMECC_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_DATAMEMECC_Pos) /*!< Bit mask of DATAMEMECC
                                                                            field.*/

/* CODEMEMECC @Bit 19 : Support code memory error correction. */
  #define CRACENCORE_PK_HWCONFIG_CODEMEMECC_Pos (19UL)
  #define CRACENCORE_PK_HWCONFIG_CODEMEMECC_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_CODEMEMECC_Pos) /*!< Bit mask of CODEMEMECC
                                                                            field.*/

/* P256 @Bit 20 : Support ECC P256 acceleration. */
  #define CRACENCORE_PK_HWCONFIG_P256_Pos (20UL)
  #define CRACENCORE_PK_HWCONFIG_P256_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_P256_Pos)

/* P384 @Bit 21 : Support ECC P384 acceleration. */
  #define CRACENCORE_PK_HWCONFIG_P384_Pos (21UL)
  #define CRACENCORE_PK_HWCONFIG_P384_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_P384_Pos)

/* P521 @Bit 22 : Support ECC P521 acceleration. */
  #define CRACENCORE_PK_HWCONFIG_P521_Pos (22UL)
  #define CRACENCORE_PK_HWCONFIG_P521_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_P521_Pos)

/* P192 @Bit 23 : Support ECC P192 acceleration. */
  #define CRACENCORE_PK_HWCONFIG_P192_Pos (23UL)
  #define CRACENCORE_PK_HWCONFIG_P192_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_P192_Pos)

/* X25519 @Bit 24 : Support Curve25519/Ed25519 acceleration. */
  #define CRACENCORE_PK_HWCONFIG_X25519_Pos (24UL)
  #define CRACENCORE_PK_HWCONFIG_X25519_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_X25519_Pos)

/* AHBMASTER @Bit 25 : Memory access */
  #define CRACENCORE_PK_HWCONFIG_AHBMASTER_Pos (25UL)
  #define CRACENCORE_PK_HWCONFIG_AHBMASTER_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_AHBMASTER_Pos) /*!< Bit mask of AHBMASTER
                                                                            field.*/
  #define CRACENCORE_PK_HWCONFIG_AHBMASTER_Min (0x0UL)
  #define CRACENCORE_PK_HWCONFIG_AHBMASTER_Max (0x1UL)
  #define CRACENCORE_PK_HWCONFIG_AHBMASTER_SLAVE (0x0UL)
  #define CRACENCORE_PK_HWCONFIG_AHBMASTER_MASTER (0x1UL)

/* CODERAM @Bit 26 : Code memory */
  #define CRACENCORE_PK_HWCONFIG_CODERAM_Pos (26UL)
  #define CRACENCORE_PK_HWCONFIG_CODERAM_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_CODERAM_Pos)
  #define CRACENCORE_PK_HWCONFIG_CODERAM_Min (0x0UL)
  #define CRACENCORE_PK_HWCONFIG_CODERAM_Max (0x1UL)
  #define CRACENCORE_PK_HWCONFIG_CODERAM_ROM (0x0UL)
  #define CRACENCORE_PK_HWCONFIG_CODERAM_RAM (0x1UL)

/* DISABLESMX @Bit 29 : State of DisableSMx input (high when SM2/SM9 operations are disabled). */
  #define CRACENCORE_PK_HWCONFIG_DISABLESMX_Pos (29UL)
  #define CRACENCORE_PK_HWCONFIG_DISABLESMX_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_DISABLESMX_Pos) /*!< Bit mask of DISABLESMX
                                                                            field.*/

/* DISABLECLRMEM @Bit 30 : State of DisableClrMem input (high when automatic clear of the RAM after reset is disabled). */
  #define CRACENCORE_PK_HWCONFIG_DISABLECLRMEM_Pos (30UL)
  #define CRACENCORE_PK_HWCONFIG_DISABLECLRMEM_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_DISABLECLRMEM_Pos) /*!< Bit mask of
                                                                            DISABLECLRMEM field.*/

/* DISABLECM @Bit 31 : State of DisableCM input (high when counter-measures are disabled). */
  #define CRACENCORE_PK_HWCONFIG_DISABLECM_Pos (31UL)
  #define CRACENCORE_PK_HWCONFIG_DISABLECM_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_DISABLECM_Pos) /*!< Bit mask of DISABLECM
                                                                            field.*/


/* CRACENCORE_PK_OPSIZE: Operand size register. */
  #define CRACENCORE_PK_OPSIZE_ResetValue (0x00001000UL)

/* OPSIZE @Bits 0..12 : Operand size (number of bytes): This register is used when the memory is accessed via AHB Master */
  #define CRACENCORE_PK_OPSIZE_OPSIZE_Pos (0UL)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_Msk (0x1FFFUL << CRACENCORE_PK_OPSIZE_OPSIZE_Pos)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_Min (0x100UL)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_Max (0x1000UL)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_OPSIZE256 (0x0100UL)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_OPSIZE521 (0x0209UL)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_OPSIZE2048 (0x0800UL)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_OPSIZE4096 (0x1000UL)


/* CRACENCORE_PK_ECCERRORBITPOS: ECC Error bit position register. */
  #define CRACENCORE_PK_ECCERRORBITPOS_ResetValue (0x03FF03FFUL)

/* ERRORBITPOS1 @Bits 0..9 : Position of error bit 1 */
  #define CRACENCORE_PK_ECCERRORBITPOS_ERRORBITPOS1_Pos (0UL)
  #define CRACENCORE_PK_ECCERRORBITPOS_ERRORBITPOS1_Msk (0x3FFUL << CRACENCORE_PK_ECCERRORBITPOS_ERRORBITPOS1_Pos) /*!< Bit mask
                                                                            of ERRORBITPOS1 field.*/

/* ERRORBITPOS2 @Bits 16..25 : Position of error bit 2 */
  #define CRACENCORE_PK_ECCERRORBITPOS_ERRORBITPOS2_Pos (16UL)
  #define CRACENCORE_PK_ECCERRORBITPOS_ERRORBITPOS2_Msk (0x3FFUL << CRACENCORE_PK_ECCERRORBITPOS_ERRORBITPOS2_Pos) /*!< Bit mask
                                                                            of ERRORBITPOS2 field.*/


/* CRACENCORE_PK_ECCCONTROLSTATUSREG: ECC Control and Status register. */
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_ResetValue (0x00000000UL)

/* DATAMEMCORRECTION @Bit 0 : Data Memory Correction flag, clear on write */
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_DATAMEMCORRECTION_Pos (0UL)
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_DATAMEMCORRECTION_Msk (0x1UL << CRACENCORE_PK_ECCCONTROLSTATUSREG_DATAMEMCORRECTION_Pos)
                                                                            /*!< Bit mask of DATAMEMCORRECTION field.*/

/* DATAMEMFAILURE @Bit 1 : Data Memory Failure flag, clear on write */
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_DATAMEMFAILURE_Pos (1UL)
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_DATAMEMFAILURE_Msk (0x1UL << CRACENCORE_PK_ECCCONTROLSTATUSREG_DATAMEMFAILURE_Pos)
                                                                            /*!< Bit mask of DATAMEMFAILURE field.*/

/* CODEMEMCORRECTION @Bit 2 : Code Memory Correction flag, clear on write */
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_CODEMEMCORRECTION_Pos (2UL)
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_CODEMEMCORRECTION_Msk (0x1UL << CRACENCORE_PK_ECCCONTROLSTATUSREG_CODEMEMCORRECTION_Pos)
                                                                            /*!< Bit mask of CODEMEMCORRECTION field.*/

/* CODEMEMFAILURE @Bit 3 : Code Memory Failure flag, clear on write */
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_CODEMEMFAILURE_Pos (3UL)
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_CODEMEMFAILURE_Msk (0x1UL << CRACENCORE_PK_ECCCONTROLSTATUSREG_CODEMEMFAILURE_Pos)
                                                                            /*!< Bit mask of CODEMEMFAILURE field.*/


/* CRACENCORE_PK_MICROCODEFORMAT: Microcode Format register. */
  #define CRACENCORE_PK_MICROCODEFORMAT_ResetValue (0xD4B79DDAUL)

/* MICROCODEFORMAT @Bits 0..31 : Microcode format number. */
  #define CRACENCORE_PK_MICROCODEFORMAT_MICROCODEFORMAT_Pos (0UL)
  #define CRACENCORE_PK_MICROCODEFORMAT_MICROCODEFORMAT_Msk (0xFFFFFFFFUL << CRACENCORE_PK_MICROCODEFORMAT_MICROCODEFORMAT_Pos)
                                                                            /*!< Bit mask of MICROCODEFORMAT field.*/


/* CRACENCORE_PK_HWVERSION: Hardware Version register. */
  #define CRACENCORE_PK_HWVERSION_ResetValue (0x00010001UL)

/* MINOR @Bits 0..15 : Minor version number. */
  #define CRACENCORE_PK_HWVERSION_MINOR_Pos (0UL)
  #define CRACENCORE_PK_HWVERSION_MINOR_Msk (0xFFFFUL << CRACENCORE_PK_HWVERSION_MINOR_Pos)

/* MAJOR @Bits 16..31 : Major version number. */
  #define CRACENCORE_PK_HWVERSION_MAJOR_Pos (16UL)
  #define CRACENCORE_PK_HWVERSION_MAJOR_Msk (0xFFFFUL << CRACENCORE_PK_HWVERSION_MAJOR_Pos)



/* ================================================== Struct CRACENCORE_IKG ================================================== */
/**
  * @brief IKG [CRACENCORE_IKG] (unspecified)
  */
typedef struct {
  __IOM uint32_t  START;
  __IOM uint32_t  STATUS;
  __IOM uint32_t  INITDATA;
  __IOM uint32_t  NONCE;
  __IOM uint32_t  PERSONALISATIONSTRING;
  __IOM uint32_t  RESEEDINTERVALLSB;
  __IOM uint32_t  RESEEDINTERVALMSB;
  __IOM uint32_t  PKECONTROL;
  __IOM uint32_t  PKECOMMAND;
  __IOM uint32_t  PKESTATUS;
  __IOM uint32_t  SOFTRST;
  __IOM uint32_t  HWCONFIG;
} NRF_CRACENCORE_IKG_Type;

/* CRACENCORE_IKG_START: Start register. */
  #define CRACENCORE_IKG_START_ResetValue (0x00000000UL)

/* START @Bit 0 : Start the Isolated Key Generation. */
  #define CRACENCORE_IKG_START_START_Pos (0UL)
  #define CRACENCORE_IKG_START_START_Msk (0x1UL << CRACENCORE_IKG_START_START_Pos)


/* CRACENCORE_IKG_STATUS: Status register. */
  #define CRACENCORE_IKG_STATUS_ResetValue (0x00000000UL)

/* SEEDERROR @Bit 0 : Seed Error during Isolated Key Generation. */
  #define CRACENCORE_IKG_STATUS_SEEDERROR_Pos (0UL)
  #define CRACENCORE_IKG_STATUS_SEEDERROR_Msk (0x1UL << CRACENCORE_IKG_STATUS_SEEDERROR_Pos)

/* ENTROPYERROR @Bit 1 : Entropy Error during Isolated Key Generation. */
  #define CRACENCORE_IKG_STATUS_ENTROPYERROR_Pos (1UL)
  #define CRACENCORE_IKG_STATUS_ENTROPYERROR_Msk (0x1UL << CRACENCORE_IKG_STATUS_ENTROPYERROR_Pos) /*!< Bit mask of ENTROPYERROR
                                                                            field.*/

/* OKAY @Bit 2 : Isolated Key Generation is okay. */
  #define CRACENCORE_IKG_STATUS_OKAY_Pos (2UL)
  #define CRACENCORE_IKG_STATUS_OKAY_Msk (0x1UL << CRACENCORE_IKG_STATUS_OKAY_Pos)

/* CTRDRBGBUSY @Bit 4 : CTR_DRBG health test is busy (only when g_hw_health_test = true). */
  #define CRACENCORE_IKG_STATUS_CTRDRBGBUSY_Pos (4UL)
  #define CRACENCORE_IKG_STATUS_CTRDRBGBUSY_Msk (0x1UL << CRACENCORE_IKG_STATUS_CTRDRBGBUSY_Pos) /*!< Bit mask of CTRDRBGBUSY
                                                                            field.*/

/* CATASTROPHICERROR @Bit 5 : Catastrophic error during CTR_DRBG health test (only when g_hw_health_test = true). */
  #define CRACENCORE_IKG_STATUS_CATASTROPHICERROR_Pos (5UL)
  #define CRACENCORE_IKG_STATUS_CATASTROPHICERROR_Msk (0x1UL << CRACENCORE_IKG_STATUS_CATASTROPHICERROR_Pos) /*!< Bit mask of
                                                                            CATASTROPHICERROR field.*/

/* SYMKEYSTORED @Bit 6 : Symmetric Keys are stored. */
  #define CRACENCORE_IKG_STATUS_SYMKEYSTORED_Pos (6UL)
  #define CRACENCORE_IKG_STATUS_SYMKEYSTORED_Msk (0x1UL << CRACENCORE_IKG_STATUS_SYMKEYSTORED_Pos) /*!< Bit mask of SYMKEYSTORED
                                                                            field.*/

/* PRIVKEYSTORED @Bit 7 : Private Keys are stored. */
  #define CRACENCORE_IKG_STATUS_PRIVKEYSTORED_Pos (7UL)
  #define CRACENCORE_IKG_STATUS_PRIVKEYSTORED_Msk (0x1UL << CRACENCORE_IKG_STATUS_PRIVKEYSTORED_Pos) /*!< Bit mask of
                                                                            PRIVKEYSTORED field.*/


/* CRACENCORE_IKG_INITDATA: InitData register. */
  #define CRACENCORE_IKG_INITDATA_ResetValue (0x00000000UL)

/* INITDATA @Bit 0 : Writing a 1 initialise Nonce and Personalisation_String registers counters, i.e. start writing from the 32
                     LSB. */

  #define CRACENCORE_IKG_INITDATA_INITDATA_Pos (0UL)
  #define CRACENCORE_IKG_INITDATA_INITDATA_Msk (0x1UL << CRACENCORE_IKG_INITDATA_INITDATA_Pos)


/* CRACENCORE_IKG_NONCE: Nonce register. */
  #define CRACENCORE_IKG_NONCE_ResetValue (0x00000000UL)

/* NONCE @Bits 0..31 : Nonce (write/read value 32-bit by 32-bit). */
  #define CRACENCORE_IKG_NONCE_NONCE_Pos (0UL)
  #define CRACENCORE_IKG_NONCE_NONCE_Msk (0xFFFFFFFFUL << CRACENCORE_IKG_NONCE_NONCE_Pos)


/* CRACENCORE_IKG_PERSONALISATIONSTRING: Personalisation String register. */
  #define CRACENCORE_IKG_PERSONALISATIONSTRING_ResetValue (0x00000000UL)

/* PERSONALISATIONSTRING @Bits 0..31 : Personalisation String (write/read value 32-bit by 32-bit). */
  #define CRACENCORE_IKG_PERSONALISATIONSTRING_PERSONALISATIONSTRING_Pos (0UL)
  #define CRACENCORE_IKG_PERSONALISATIONSTRING_PERSONALISATIONSTRING_Msk (0xFFFFFFFFUL << CRACENCORE_IKG_PERSONALISATIONSTRING_PERSONALISATIONSTRING_Pos)
                                                                            /*!< Bit mask of PERSONALISATIONSTRING field.*/


/* CRACENCORE_IKG_RESEEDINTERVALLSB: Reseed Interval LSB register. */
  #define CRACENCORE_IKG_RESEEDINTERVALLSB_ResetValue (0x80000000UL)

/* RESEEDINTERVALLSB @Bits 0..31 : Reseed Interval LSB. */
  #define CRACENCORE_IKG_RESEEDINTERVALLSB_RESEEDINTERVALLSB_Pos (0UL)
  #define CRACENCORE_IKG_RESEEDINTERVALLSB_RESEEDINTERVALLSB_Msk (0xFFFFFFFFUL << CRACENCORE_IKG_RESEEDINTERVALLSB_RESEEDINTERVALLSB_Pos)
                                                                            /*!< Bit mask of RESEEDINTERVALLSB field.*/


/* CRACENCORE_IKG_RESEEDINTERVALMSB: Reseed Interval MSB register. */
  #define CRACENCORE_IKG_RESEEDINTERVALMSB_ResetValue (0x00000000UL)

/* RESEEDINTERVALMSB @Bits 0..15 : Reseed Interval MSB. */
  #define CRACENCORE_IKG_RESEEDINTERVALMSB_RESEEDINTERVALMSB_Pos (0UL)
  #define CRACENCORE_IKG_RESEEDINTERVALMSB_RESEEDINTERVALMSB_Msk (0xFFFFUL << CRACENCORE_IKG_RESEEDINTERVALMSB_RESEEDINTERVALMSB_Pos)
                                                                            /*!< Bit mask of RESEEDINTERVALMSB field.*/


/* CRACENCORE_IKG_PKECONTROL: PKE Control register. */
  #define CRACENCORE_IKG_PKECONTROL_ResetValue (0x00000000UL)

/* PKESTART @Bit 0 : Start the PKE operation or trigger for Secure mode exit. */
  #define CRACENCORE_IKG_PKECONTROL_PKESTART_Pos (0UL)
  #define CRACENCORE_IKG_PKECONTROL_PKESTART_Msk (0x1UL << CRACENCORE_IKG_PKECONTROL_PKESTART_Pos) /*!< Bit mask of PKESTART
                                                                            field.*/

/* CLEARIRQ @Bit 1 : Clear the IRQ output. */
  #define CRACENCORE_IKG_PKECONTROL_CLEARIRQ_Pos (1UL)
  #define CRACENCORE_IKG_PKECONTROL_CLEARIRQ_Msk (0x1UL << CRACENCORE_IKG_PKECONTROL_CLEARIRQ_Pos) /*!< Bit mask of CLEARIRQ
                                                                            field.*/


/* CRACENCORE_IKG_PKECOMMAND: PKE Command register. */
  #define CRACENCORE_IKG_PKECOMMAND_ResetValue (0x00000000UL)

/* SECUREMODE @Bit 0 : Secure mode. */
  #define CRACENCORE_IKG_PKECOMMAND_SECUREMODE_Pos (0UL)
  #define CRACENCORE_IKG_PKECOMMAND_SECUREMODE_Msk (0x1UL << CRACENCORE_IKG_PKECOMMAND_SECUREMODE_Pos) /*!< Bit mask of
                                                                            SECUREMODE field.*/
  #define CRACENCORE_IKG_PKECOMMAND_SECUREMODE_Min (0x0UL)
  #define CRACENCORE_IKG_PKECOMMAND_SECUREMODE_Max (0x1UL)
  #define CRACENCORE_IKG_PKECOMMAND_SECUREMODE_DEACTIVATED (0x0UL)
  #define CRACENCORE_IKG_PKECOMMAND_SECUREMODE_ACTIVATED (0x1UL)

/* SELECTEDKEY @Bits 4..7 : Select Generated Private Key for PKE operation. */
  #define CRACENCORE_IKG_PKECOMMAND_SELECTEDKEY_Pos (4UL)
  #define CRACENCORE_IKG_PKECOMMAND_SELECTEDKEY_Msk (0xFUL << CRACENCORE_IKG_PKECOMMAND_SELECTEDKEY_Pos) /*!< Bit mask of
                                                                            SELECTEDKEY field.*/

/* OPSEL @Bits 8..9 : Select PKE operation with Isolated Key */
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_Pos (8UL)
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_Msk (0x3UL << CRACENCORE_IKG_PKECOMMAND_OPSEL_Pos)
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_Min (0x0UL)
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_Max (0x2UL)
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_PUBKEY (0x0UL)
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_ECDSA (0x1UL)
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_PTMUL (0x2UL)


/* CRACENCORE_IKG_PKESTATUS: PKE Status register. */
  #define CRACENCORE_IKG_PKESTATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error because either Private Keys are not stored or the operation is not defined. */
  #define CRACENCORE_IKG_PKESTATUS_ERROR_Pos (0UL)
  #define CRACENCORE_IKG_PKESTATUS_ERROR_Msk (0x1UL << CRACENCORE_IKG_PKESTATUS_ERROR_Pos)

/* STARTERROR @Bit 1 : Error because a new operation is started while the previous one is still busy. */
  #define CRACENCORE_IKG_PKESTATUS_STARTERROR_Pos (1UL)
  #define CRACENCORE_IKG_PKESTATUS_STARTERROR_Msk (0x1UL << CRACENCORE_IKG_PKESTATUS_STARTERROR_Pos) /*!< Bit mask of STARTERROR
                                                                            field.*/

/* IKGPKBUSY @Bit 16 : Busy, set when the operation starts and cleared when the operation is finished. */
  #define CRACENCORE_IKG_PKESTATUS_IKGPKBUSY_Pos (16UL)
  #define CRACENCORE_IKG_PKESTATUS_IKGPKBUSY_Msk (0x1UL << CRACENCORE_IKG_PKESTATUS_IKGPKBUSY_Pos) /*!< Bit mask of IKGPKBUSY
                                                                            field.*/

/* IRQSTATUS @Bit 17 : IRQ, set when the operation is finished and cleared when the CPU writes the bit 1 of PKE_Control Register
                       or a new operation is started. */

  #define CRACENCORE_IKG_PKESTATUS_IRQSTATUS_Pos (17UL)
  #define CRACENCORE_IKG_PKESTATUS_IRQSTATUS_Msk (0x1UL << CRACENCORE_IKG_PKESTATUS_IRQSTATUS_Pos) /*!< Bit mask of IRQSTATUS
                                                                            field.*/

/* ERASEBUSY @Bit 18 : The PKE Data RAM is being erased. */
  #define CRACENCORE_IKG_PKESTATUS_ERASEBUSY_Pos (18UL)
  #define CRACENCORE_IKG_PKESTATUS_ERASEBUSY_Msk (0x1UL << CRACENCORE_IKG_PKESTATUS_ERASEBUSY_Pos) /*!< Bit mask of ERASEBUSY
                                                                            field.*/


/* CRACENCORE_IKG_SOFTRST: SoftRst register. */
  #define CRACENCORE_IKG_SOFTRST_ResetValue (0x00000000UL)

/* SOFTRST @Bit 0 : Software reset: */
  #define CRACENCORE_IKG_SOFTRST_SOFTRST_Pos (0UL)
  #define CRACENCORE_IKG_SOFTRST_SOFTRST_Msk (0x1UL << CRACENCORE_IKG_SOFTRST_SOFTRST_Pos)
  #define CRACENCORE_IKG_SOFTRST_SOFTRST_Min (0x0UL)
  #define CRACENCORE_IKG_SOFTRST_SOFTRST_Max (0x1UL)
  #define CRACENCORE_IKG_SOFTRST_SOFTRST_NORMAL (0x0UL)
  #define CRACENCORE_IKG_SOFTRST_SOFTRST_KEY (0x1UL)


/* CRACENCORE_IKG_HWCONFIG: HwConfig register. */
  #define CRACENCORE_IKG_HWCONFIG_ResetValue (0xCC4C8312UL)

/* NBSYMKEYS @Bits 0..3 : Number of Symmetric Keys generated. */
  #define CRACENCORE_IKG_HWCONFIG_NBSYMKEYS_Pos (0UL)
  #define CRACENCORE_IKG_HWCONFIG_NBSYMKEYS_Msk (0xFUL << CRACENCORE_IKG_HWCONFIG_NBSYMKEYS_Pos) /*!< Bit mask of NBSYMKEYS
                                                                            field.*/

/* NBPRIVKEYS @Bits 4..7 : Number of Private Keys generated. */
  #define CRACENCORE_IKG_HWCONFIG_NBPRIVKEYS_Pos (4UL)
  #define CRACENCORE_IKG_HWCONFIG_NBPRIVKEYS_Msk (0xFUL << CRACENCORE_IKG_HWCONFIG_NBPRIVKEYS_Pos) /*!< Bit mask of NBPRIVKEYS
                                                                            field.*/

/* IKGCM @Bit 8 : Countermeasures for IKG operations are implemented when 1. */
  #define CRACENCORE_IKG_HWCONFIG_IKGCM_Pos (8UL)
  #define CRACENCORE_IKG_HWCONFIG_IKGCM_Msk (0x1UL << CRACENCORE_IKG_HWCONFIG_IKGCM_Pos)

/* HWHEALTHTEST @Bit 9 : CTR_DRBG health test is implemented when 1. */
  #define CRACENCORE_IKG_HWCONFIG_HWHEALTHTEST_Pos (9UL)
  #define CRACENCORE_IKG_HWCONFIG_HWHEALTHTEST_Msk (0x1UL << CRACENCORE_IKG_HWCONFIG_HWHEALTHTEST_Pos) /*!< Bit mask of
                                                                            HWHEALTHTEST field.*/

/* CURVE @Bits 10..11 : ECC curve for IKG (input). */
  #define CRACENCORE_IKG_HWCONFIG_CURVE_Pos (10UL)
  #define CRACENCORE_IKG_HWCONFIG_CURVE_Msk (0x3UL << CRACENCORE_IKG_HWCONFIG_CURVE_Pos)
  #define CRACENCORE_IKG_HWCONFIG_CURVE_Min (0x0UL)
  #define CRACENCORE_IKG_HWCONFIG_CURVE_Max (0x2UL)
  #define CRACENCORE_IKG_HWCONFIG_CURVE_P256 (0x0UL)
  #define CRACENCORE_IKG_HWCONFIG_CURVE_P384 (0x1UL)
  #define CRACENCORE_IKG_HWCONFIG_CURVE_P521 (0x2UL)

/* DF @Bit 12 : Derivation function is implemented in the CTR_DRBG when 1. */
  #define CRACENCORE_IKG_HWCONFIG_DF_Pos (12UL)
  #define CRACENCORE_IKG_HWCONFIG_DF_Msk (0x1UL << CRACENCORE_IKG_HWCONFIG_DF_Pos)

/* KEYSIZE @Bits 13..15 : AES Key Size support for the AES Core embedded in the CTR_DRBG. */
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_Pos (13UL)
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_Msk (0x7UL << CRACENCORE_IKG_HWCONFIG_KEYSIZE_Pos)
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_Min (0x1UL)
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_Max (0x4UL)
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_AES128 (0x1UL)
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_AES192 (0x2UL)
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_AES256 (0x4UL)

/* ENTROPYINPUTLENGTH @Bits 16..19 : Value of g_entropy_input_length/32. */
  #define CRACENCORE_IKG_HWCONFIG_ENTROPYINPUTLENGTH_Pos (16UL)
  #define CRACENCORE_IKG_HWCONFIG_ENTROPYINPUTLENGTH_Msk (0xFUL << CRACENCORE_IKG_HWCONFIG_ENTROPYINPUTLENGTH_Pos) /*!< Bit mask
                                                                            of ENTROPYINPUTLENGTH field.*/

/* NONCELENGTH @Bits 20..23 : Value of g_nonce_length/32. */
  #define CRACENCORE_IKG_HWCONFIG_NONCELENGTH_Pos (20UL)
  #define CRACENCORE_IKG_HWCONFIG_NONCELENGTH_Msk (0xFUL << CRACENCORE_IKG_HWCONFIG_NONCELENGTH_Pos) /*!< Bit mask of
                                                                            NONCELENGTH field.*/

/* PERSONALIZATIONSTRINGLENGTH @Bits 24..27 : Value of g_personalization_string_length/32. */
  #define CRACENCORE_IKG_HWCONFIG_PERSONALIZATIONSTRINGLENGTH_Pos (24UL)
  #define CRACENCORE_IKG_HWCONFIG_PERSONALIZATIONSTRINGLENGTH_Msk (0xFUL << CRACENCORE_IKG_HWCONFIG_PERSONALIZATIONSTRINGLENGTH_Pos)
                                                                            /*!< Bit mask of PERSONALIZATIONSTRINGLENGTH field.*/

/* ADDITIONALINPUTLENGTH @Bits 28..31 : Value of g_additional_input_length/32. */
  #define CRACENCORE_IKG_HWCONFIG_ADDITIONALINPUTLENGTH_Pos (28UL)
  #define CRACENCORE_IKG_HWCONFIG_ADDITIONALINPUTLENGTH_Msk (0xFUL << CRACENCORE_IKG_HWCONFIG_ADDITIONALINPUTLENGTH_Pos) /*!<
                                                                            Bit mask of ADDITIONALINPUTLENGTH field.*/


/* ==================================================== Struct CRACENCORE ==================================================== */
/**
  * @brief CRACENCORE
  */
  typedef struct {
    __IOM NRF_CRACENCORE_CRYPTMSTRDMA_Type CRYPTMSTRDMA;
    __IM uint32_t RESERVED[240];
    __IOM NRF_CRACENCORE_CRYPTMSTRHW_Type CRYPTMSTRHW;
    __IM uint32_t RESERVED1[761];
    __IOM NRF_CRACENCORE_RNGCONTROL_Type RNGCONTROL;
    __IM uint32_t RESERVED2[992];
    __IOM NRF_CRACENCORE_PK_Type PK;
    __IM uint32_t RESERVED3[992];
    __IOM NRF_CRACENCORE_IKG_Type IKG;
  } NRF_CRACENCORE_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                        CTRLAPPERI                                        ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct CTRLAPPERI_MAILBOX ================================================ */
/**
  * @brief MAILBOX [CTRLAPPERI_MAILBOX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RXDATA;
  __IM  uint32_t  RXSTATUS;                          /*!< (@ 0x00000004) Status to indicate if data sent from the debugger to
                                                                         the CPU has been read.*/
  __IM  uint32_t  RESERVED[30];
  __IOM uint32_t  TXDATA;
  __IM  uint32_t  TXSTATUS;                          /*!< (@ 0x00000084) Status to indicate if data sent from the CPU to the
                                                                         debugger has been read.*/
} NRF_CTRLAPPERI_MAILBOX_Type;

/* CTRLAPPERI_MAILBOX_RXDATA: Data sent from the debugger to the CPU. */
  #define CTRLAPPERI_MAILBOX_RXDATA_ResetValue (0x00000000UL)

/* RXDATA @Bits 0..31 : Data received from debugger. */
  #define CTRLAPPERI_MAILBOX_RXDATA_RXDATA_Pos (0UL)
  #define CTRLAPPERI_MAILBOX_RXDATA_RXDATA_Msk (0xFFFFFFFFUL << CTRLAPPERI_MAILBOX_RXDATA_RXDATA_Pos) /*!< Bit mask of RXDATA
                                                                            field.*/


/* CTRLAPPERI_MAILBOX_RXSTATUS: Status to indicate if data sent from the debugger to the CPU has been read. */
  #define CTRLAPPERI_MAILBOX_RXSTATUS_ResetValue (0x00000000UL)

/* RXSTATUS @Bit 0 : Status of data in register RXDATA. */
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Pos (0UL)
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Msk (0x1UL << CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Pos) /*!< Bit mask of RXSTATUS
                                                                            field.*/
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Min (0x0UL)
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Max (0x1UL)
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_NoDataPending (0x0UL)
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_DataPending (0x1UL)


/* CTRLAPPERI_MAILBOX_TXDATA: Data sent from the CPU to the debugger. */
  #define CTRLAPPERI_MAILBOX_TXDATA_ResetValue (0x00000000UL)

/* TXDATA @Bits 0..31 : Data sent to debugger. */
  #define CTRLAPPERI_MAILBOX_TXDATA_TXDATA_Pos (0UL)
  #define CTRLAPPERI_MAILBOX_TXDATA_TXDATA_Msk (0xFFFFFFFFUL << CTRLAPPERI_MAILBOX_TXDATA_TXDATA_Pos) /*!< Bit mask of TXDATA
                                                                            field.*/


/* CTRLAPPERI_MAILBOX_TXSTATUS: Status to indicate if data sent from the CPU to the debugger has been read. */
  #define CTRLAPPERI_MAILBOX_TXSTATUS_ResetValue (0x00000000UL)

/* TXSTATUS @Bit 0 : Status of data in register TXDATA. */
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Pos (0UL)
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Msk (0x1UL << CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Pos) /*!< Bit mask of TXSTATUS
                                                                            field.*/
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Min (0x0UL)
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Max (0x1UL)
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_NoDataPending (0x0UL)
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_DataPending (0x1UL)



/* ============================================= Struct CTRLAPPERI_ERASEPROTECT ============================================== */
/**
  * @brief ERASEPROTECT [CTRLAPPERI_ERASEPROTECT] (unspecified)
  */
typedef struct {
  __IOM uint32_t  LOCK;                              /*!< (@ 0x00000000) This register locks the ERASEPROTECT.DISABLE register
                                                                         from being written until next reset.*/
  __OM  uint32_t  DISABLE;                           /*!< (@ 0x00000004) This register disables the ERASEPROTECT register and
                                                                         performs an ERASEALL operation.*/
} NRF_CTRLAPPERI_ERASEPROTECT_Type;

/* CTRLAPPERI_ERASEPROTECT_LOCK: This register locks the ERASEPROTECT.DISABLE register from being written until next reset. */
  #define CTRLAPPERI_ERASEPROTECT_LOCK_ResetValue (0x00000000UL)

/* LOCK @Bit 0 : Lock ERASEPROTECT.DISABLE register from being written until next reset. */
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Pos (0UL)
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Msk (0x1UL << CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Pos)
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Min (0x0UL)
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Max (0x1UL)
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Unlocked (0x0UL)
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Locked (0x1UL)


/* CTRLAPPERI_ERASEPROTECT_DISABLE: This register disables the ERASEPROTECT register and performs an ERASEALL operation. */
  #define CTRLAPPERI_ERASEPROTECT_DISABLE_ResetValue (0x00000000UL)

/* KEY @Bits 0..31 : The ERASEALL sequence is initiated if the value of the KEY fields are non-zero and the KEY fields match on
                     both the CPU and debugger sides. */

  #define CTRLAPPERI_ERASEPROTECT_DISABLE_KEY_Pos (0UL)
  #define CTRLAPPERI_ERASEPROTECT_DISABLE_KEY_Msk (0xFFFFFFFFUL << CTRLAPPERI_ERASEPROTECT_DISABLE_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/


/* ==================================================== Struct CTRLAPPERI ==================================================== */
/**
  * @brief Control access port
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_RXREADY;
    __IOM uint32_t EVENTS_TXDONE;
    __IM uint32_t RESERVED1[126];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED2[60];
    __IOM NRF_CTRLAPPERI_MAILBOX_Type MAILBOX;
    __IM uint32_t RESERVED3[30];
    __IOM NRF_CTRLAPPERI_ERASEPROTECT_Type ERASEPROTECT;
    __IM uint32_t RESERVED4[6];
    __OM uint32_t RESET;
  } NRF_CTRLAPPERI_Type;

/* CTRLAPPERI_EVENTS_RXREADY: RXSTATUS is changed to DataPending. */
  #define CTRLAPPERI_EVENTS_RXREADY_ResetValue (0x00000000UL)

/* EVENTS_RXREADY @Bit 0 : RXSTATUS is changed to DataPending. */
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Pos (0UL)
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Msk (0x1UL << CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Pos) /*!< Bit mask of
                                                                            EVENTS_RXREADY field.*/
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Min (0x0UL)
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Max (0x1UL)
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_NotGenerated (0x0UL)
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Generated (0x1UL)


/* CTRLAPPERI_EVENTS_TXDONE: TXSTATUS is changed to NoDataPending. */
  #define CTRLAPPERI_EVENTS_TXDONE_ResetValue (0x00000000UL)

/* EVENTS_TXDONE @Bit 0 : TXSTATUS is changed to NoDataPending. */
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Pos (0UL)
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Msk (0x1UL << CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Pos) /*!< Bit mask of
                                                                            EVENTS_TXDONE field.*/
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Min (0x0UL)
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Max (0x1UL)
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_NotGenerated (0x0UL)
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Generated (0x1UL)


/* CTRLAPPERI_INTEN: Enable or disable interrupt */
  #define CTRLAPPERI_INTEN_ResetValue (0x00000000UL)

/* RXREADY @Bit 0 : Enable or disable interrupt for event RXREADY */
  #define CTRLAPPERI_INTEN_RXREADY_Pos (0UL)
  #define CTRLAPPERI_INTEN_RXREADY_Msk (0x1UL << CTRLAPPERI_INTEN_RXREADY_Pos)
  #define CTRLAPPERI_INTEN_RXREADY_Min (0x0UL)
  #define CTRLAPPERI_INTEN_RXREADY_Max (0x1UL)
  #define CTRLAPPERI_INTEN_RXREADY_Disabled (0x0UL)
  #define CTRLAPPERI_INTEN_RXREADY_Enabled (0x1UL)

/* TXDONE @Bit 1 : Enable or disable interrupt for event TXDONE */
  #define CTRLAPPERI_INTEN_TXDONE_Pos (1UL)
  #define CTRLAPPERI_INTEN_TXDONE_Msk (0x1UL << CTRLAPPERI_INTEN_TXDONE_Pos)
  #define CTRLAPPERI_INTEN_TXDONE_Min (0x0UL)
  #define CTRLAPPERI_INTEN_TXDONE_Max (0x1UL)
  #define CTRLAPPERI_INTEN_TXDONE_Disabled (0x0UL)
  #define CTRLAPPERI_INTEN_TXDONE_Enabled (0x1UL)


/* CTRLAPPERI_INTENSET: Enable interrupt */
  #define CTRLAPPERI_INTENSET_ResetValue (0x00000000UL)

/* RXREADY @Bit 0 : Write '1' to enable interrupt for event RXREADY */
  #define CTRLAPPERI_INTENSET_RXREADY_Pos (0UL)
  #define CTRLAPPERI_INTENSET_RXREADY_Msk (0x1UL << CTRLAPPERI_INTENSET_RXREADY_Pos)
  #define CTRLAPPERI_INTENSET_RXREADY_Min (0x0UL)
  #define CTRLAPPERI_INTENSET_RXREADY_Max (0x1UL)
  #define CTRLAPPERI_INTENSET_RXREADY_Set (0x1UL)
  #define CTRLAPPERI_INTENSET_RXREADY_Disabled (0x0UL)
  #define CTRLAPPERI_INTENSET_RXREADY_Enabled (0x1UL)

/* TXDONE @Bit 1 : Write '1' to enable interrupt for event TXDONE */
  #define CTRLAPPERI_INTENSET_TXDONE_Pos (1UL)
  #define CTRLAPPERI_INTENSET_TXDONE_Msk (0x1UL << CTRLAPPERI_INTENSET_TXDONE_Pos)
  #define CTRLAPPERI_INTENSET_TXDONE_Min (0x0UL)
  #define CTRLAPPERI_INTENSET_TXDONE_Max (0x1UL)
  #define CTRLAPPERI_INTENSET_TXDONE_Set (0x1UL)
  #define CTRLAPPERI_INTENSET_TXDONE_Disabled (0x0UL)
  #define CTRLAPPERI_INTENSET_TXDONE_Enabled (0x1UL)


/* CTRLAPPERI_INTENCLR: Disable interrupt */
  #define CTRLAPPERI_INTENCLR_ResetValue (0x00000000UL)

/* RXREADY @Bit 0 : Write '1' to disable interrupt for event RXREADY */
  #define CTRLAPPERI_INTENCLR_RXREADY_Pos (0UL)
  #define CTRLAPPERI_INTENCLR_RXREADY_Msk (0x1UL << CTRLAPPERI_INTENCLR_RXREADY_Pos)
  #define CTRLAPPERI_INTENCLR_RXREADY_Min (0x0UL)
  #define CTRLAPPERI_INTENCLR_RXREADY_Max (0x1UL)
  #define CTRLAPPERI_INTENCLR_RXREADY_Clear (0x1UL)
  #define CTRLAPPERI_INTENCLR_RXREADY_Disabled (0x0UL)
  #define CTRLAPPERI_INTENCLR_RXREADY_Enabled (0x1UL)

/* TXDONE @Bit 1 : Write '1' to disable interrupt for event TXDONE */
  #define CTRLAPPERI_INTENCLR_TXDONE_Pos (1UL)
  #define CTRLAPPERI_INTENCLR_TXDONE_Msk (0x1UL << CTRLAPPERI_INTENCLR_TXDONE_Pos)
  #define CTRLAPPERI_INTENCLR_TXDONE_Min (0x0UL)
  #define CTRLAPPERI_INTENCLR_TXDONE_Max (0x1UL)
  #define CTRLAPPERI_INTENCLR_TXDONE_Clear (0x1UL)
  #define CTRLAPPERI_INTENCLR_TXDONE_Disabled (0x0UL)
  #define CTRLAPPERI_INTENCLR_TXDONE_Enabled (0x1UL)


/* CTRLAPPERI_INTPEND: Pending interrupts */
  #define CTRLAPPERI_INTPEND_ResetValue (0x00000000UL)

/* RXREADY @Bit 0 : Read pending status of interrupt for event RXREADY */
  #define CTRLAPPERI_INTPEND_RXREADY_Pos (0UL)
  #define CTRLAPPERI_INTPEND_RXREADY_Msk (0x1UL << CTRLAPPERI_INTPEND_RXREADY_Pos)
  #define CTRLAPPERI_INTPEND_RXREADY_Min (0x0UL)
  #define CTRLAPPERI_INTPEND_RXREADY_Max (0x1UL)
  #define CTRLAPPERI_INTPEND_RXREADY_NotPending (0x0UL)
  #define CTRLAPPERI_INTPEND_RXREADY_Pending (0x1UL)

/* TXDONE @Bit 1 : Read pending status of interrupt for event TXDONE */
  #define CTRLAPPERI_INTPEND_TXDONE_Pos (1UL)
  #define CTRLAPPERI_INTPEND_TXDONE_Msk (0x1UL << CTRLAPPERI_INTPEND_TXDONE_Pos)
  #define CTRLAPPERI_INTPEND_TXDONE_Min (0x0UL)
  #define CTRLAPPERI_INTPEND_TXDONE_Max (0x1UL)
  #define CTRLAPPERI_INTPEND_TXDONE_NotPending (0x0UL)
  #define CTRLAPPERI_INTPEND_TXDONE_Pending (0x1UL)


/* CTRLAPPERI_RESET: System reset request. */
  #define CTRLAPPERI_RESET_ResetValue (0x00000000UL)

/* RESET @Bits 0..2 : Reset request */
  #define CTRLAPPERI_RESET_RESET_Pos (0UL)
  #define CTRLAPPERI_RESET_RESET_Msk (0x7UL << CTRLAPPERI_RESET_RESET_Pos)
  #define CTRLAPPERI_RESET_RESET_Min (0x0UL)
  #define CTRLAPPERI_RESET_RESET_Max (0x4UL)
  #define CTRLAPPERI_RESET_RESET_NoReset (0x0UL)
  #define CTRLAPPERI_RESET_RESET_SoftReset (0x1UL)
  #define CTRLAPPERI_RESET_RESET_HardReset (0x2UL)
  #define CTRLAPPERI_RESET_RESET_PinReset (0x4UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           DPPIC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct DPPIC_TASKS_CHG ================================================== */
/**
  * @brief TASKS_CHG [DPPIC_TASKS_CHG] Channel group tasks
  */
typedef struct {
  __OM  uint32_t  EN;
  __OM  uint32_t  DIS;
} NRF_DPPIC_TASKS_CHG_Type;
  #define DPPIC_TASKS_CHG_MaxCount (6UL)
  #define DPPIC_TASKS_CHG_MaxIndex (5UL)
  #define DPPIC_TASKS_CHG_MinIndex (0UL)

/* DPPIC_TASKS_CHG_EN: Enable channel group n */
  #define DPPIC_TASKS_CHG_EN_ResetValue (0x00000000UL)

/* EN @Bit 0 : Enable channel group n */
  #define DPPIC_TASKS_CHG_EN_EN_Pos (0UL)
  #define DPPIC_TASKS_CHG_EN_EN_Msk (0x1UL << DPPIC_TASKS_CHG_EN_EN_Pos)
  #define DPPIC_TASKS_CHG_EN_EN_Min (0x1UL)
  #define DPPIC_TASKS_CHG_EN_EN_Max (0x1UL)
  #define DPPIC_TASKS_CHG_EN_EN_Trigger (0x1UL)


/* DPPIC_TASKS_CHG_DIS: Disable channel group n */
  #define DPPIC_TASKS_CHG_DIS_ResetValue (0x00000000UL)

/* DIS @Bit 0 : Disable channel group n */
  #define DPPIC_TASKS_CHG_DIS_DIS_Pos (0UL)
  #define DPPIC_TASKS_CHG_DIS_DIS_Msk (0x1UL << DPPIC_TASKS_CHG_DIS_DIS_Pos)
  #define DPPIC_TASKS_CHG_DIS_DIS_Min (0x1UL)
  #define DPPIC_TASKS_CHG_DIS_DIS_Max (0x1UL)
  #define DPPIC_TASKS_CHG_DIS_DIS_Trigger (0x1UL)



/* =============================================== Struct DPPIC_SUBSCRIBE_CHG ================================================ */
/**
  * @brief SUBSCRIBE_CHG [DPPIC_SUBSCRIBE_CHG] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  EN;
  __IOM uint32_t  DIS;
} NRF_DPPIC_SUBSCRIBE_CHG_Type;
  #define DPPIC_SUBSCRIBE_CHG_MaxCount (6UL)
  #define DPPIC_SUBSCRIBE_CHG_MaxIndex (5UL)
  #define DPPIC_SUBSCRIBE_CHG_MinIndex (0UL)

/* DPPIC_SUBSCRIBE_CHG_EN: Subscribe configuration for task CHG[n].EN */
  #define DPPIC_SUBSCRIBE_CHG_EN_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CHG[n].EN will subscribe to */
  #define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Pos (0UL)
  #define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Msk (0xFFUL << DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Pos)
  #define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Min (0x00UL)
  #define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Pos (31UL)
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Msk (0x1UL << DPPIC_SUBSCRIBE_CHG_EN_EN_Pos)
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Min (0x0UL)
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Max (0x1UL)
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Disabled (0x0UL)
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Enabled (0x1UL)


/* DPPIC_SUBSCRIBE_CHG_DIS: Subscribe configuration for task CHG[n].DIS */
  #define DPPIC_SUBSCRIBE_CHG_DIS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CHG[n].DIS will subscribe to */
  #define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Pos (0UL)
  #define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Msk (0xFFUL << DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Pos)
  #define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Min (0x00UL)
  #define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Pos (31UL)
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Msk (0x1UL << DPPIC_SUBSCRIBE_CHG_DIS_EN_Pos)
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Min (0x0UL)
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Max (0x1UL)
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Disabled (0x0UL)
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Enabled (0x1UL)


/* ====================================================== Struct DPPIC ======================================================= */
/**
  * @brief Distributed programmable peripheral interconnect controller
  */
  typedef struct {
    __OM NRF_DPPIC_TASKS_CHG_Type TASKS_CHG[6];
    __IM uint32_t RESERVED[20];
    __IOM NRF_DPPIC_SUBSCRIBE_CHG_Type SUBSCRIBE_CHG[6];
    __IM uint32_t RESERVED1[276];
    __IOM uint32_t CHEN;
    __IOM uint32_t CHENSET;
    __IOM uint32_t CHENCLR;
    __IM uint32_t RESERVED2[189];
    __IOM uint32_t CHG[6];                           /*!< (@ 0x00000800) Channel group n Note: Writes to this register are
                                                                         ignored if either SUBSCRIBE_CHG[n].EN or
                                                                         SUBSCRIBE_CHG[n].DIS is enabled*/
  } NRF_DPPIC_Type;

/* DPPIC_CHEN: Channel enable register */
  #define DPPIC_CHEN_ResetValue (0x00000000UL)

/* CH0 @Bit 0 : Enable or disable channel 0 */
  #define DPPIC_CHEN_CH0_Pos (0UL)
  #define DPPIC_CHEN_CH0_Msk (0x1UL << DPPIC_CHEN_CH0_Pos)
  #define DPPIC_CHEN_CH0_Min (0x0UL)
  #define DPPIC_CHEN_CH0_Max (0x1UL)
  #define DPPIC_CHEN_CH0_Disabled (0x0UL)
  #define DPPIC_CHEN_CH0_Enabled (0x1UL)

/* CH1 @Bit 1 : Enable or disable channel 1 */
  #define DPPIC_CHEN_CH1_Pos (1UL)
  #define DPPIC_CHEN_CH1_Msk (0x1UL << DPPIC_CHEN_CH1_Pos)
  #define DPPIC_CHEN_CH1_Min (0x0UL)
  #define DPPIC_CHEN_CH1_Max (0x1UL)
  #define DPPIC_CHEN_CH1_Disabled (0x0UL)
  #define DPPIC_CHEN_CH1_Enabled (0x1UL)

/* CH2 @Bit 2 : Enable or disable channel 2 */
  #define DPPIC_CHEN_CH2_Pos (2UL)
  #define DPPIC_CHEN_CH2_Msk (0x1UL << DPPIC_CHEN_CH2_Pos)
  #define DPPIC_CHEN_CH2_Min (0x0UL)
  #define DPPIC_CHEN_CH2_Max (0x1UL)
  #define DPPIC_CHEN_CH2_Disabled (0x0UL)
  #define DPPIC_CHEN_CH2_Enabled (0x1UL)

/* CH3 @Bit 3 : Enable or disable channel 3 */
  #define DPPIC_CHEN_CH3_Pos (3UL)
  #define DPPIC_CHEN_CH3_Msk (0x1UL << DPPIC_CHEN_CH3_Pos)
  #define DPPIC_CHEN_CH3_Min (0x0UL)
  #define DPPIC_CHEN_CH3_Max (0x1UL)
  #define DPPIC_CHEN_CH3_Disabled (0x0UL)
  #define DPPIC_CHEN_CH3_Enabled (0x1UL)

/* CH4 @Bit 4 : Enable or disable channel 4 */
  #define DPPIC_CHEN_CH4_Pos (4UL)
  #define DPPIC_CHEN_CH4_Msk (0x1UL << DPPIC_CHEN_CH4_Pos)
  #define DPPIC_CHEN_CH4_Min (0x0UL)
  #define DPPIC_CHEN_CH4_Max (0x1UL)
  #define DPPIC_CHEN_CH4_Disabled (0x0UL)
  #define DPPIC_CHEN_CH4_Enabled (0x1UL)

/* CH5 @Bit 5 : Enable or disable channel 5 */
  #define DPPIC_CHEN_CH5_Pos (5UL)
  #define DPPIC_CHEN_CH5_Msk (0x1UL << DPPIC_CHEN_CH5_Pos)
  #define DPPIC_CHEN_CH5_Min (0x0UL)
  #define DPPIC_CHEN_CH5_Max (0x1UL)
  #define DPPIC_CHEN_CH5_Disabled (0x0UL)
  #define DPPIC_CHEN_CH5_Enabled (0x1UL)

/* CH6 @Bit 6 : Enable or disable channel 6 */
  #define DPPIC_CHEN_CH6_Pos (6UL)
  #define DPPIC_CHEN_CH6_Msk (0x1UL << DPPIC_CHEN_CH6_Pos)
  #define DPPIC_CHEN_CH6_Min (0x0UL)
  #define DPPIC_CHEN_CH6_Max (0x1UL)
  #define DPPIC_CHEN_CH6_Disabled (0x0UL)
  #define DPPIC_CHEN_CH6_Enabled (0x1UL)

/* CH7 @Bit 7 : Enable or disable channel 7 */
  #define DPPIC_CHEN_CH7_Pos (7UL)
  #define DPPIC_CHEN_CH7_Msk (0x1UL << DPPIC_CHEN_CH7_Pos)
  #define DPPIC_CHEN_CH7_Min (0x0UL)
  #define DPPIC_CHEN_CH7_Max (0x1UL)
  #define DPPIC_CHEN_CH7_Disabled (0x0UL)
  #define DPPIC_CHEN_CH7_Enabled (0x1UL)

/* CH8 @Bit 8 : Enable or disable channel 8 */
  #define DPPIC_CHEN_CH8_Pos (8UL)
  #define DPPIC_CHEN_CH8_Msk (0x1UL << DPPIC_CHEN_CH8_Pos)
  #define DPPIC_CHEN_CH8_Min (0x0UL)
  #define DPPIC_CHEN_CH8_Max (0x1UL)
  #define DPPIC_CHEN_CH8_Disabled (0x0UL)
  #define DPPIC_CHEN_CH8_Enabled (0x1UL)

/* CH9 @Bit 9 : Enable or disable channel 9 */
  #define DPPIC_CHEN_CH9_Pos (9UL)
  #define DPPIC_CHEN_CH9_Msk (0x1UL << DPPIC_CHEN_CH9_Pos)
  #define DPPIC_CHEN_CH9_Min (0x0UL)
  #define DPPIC_CHEN_CH9_Max (0x1UL)
  #define DPPIC_CHEN_CH9_Disabled (0x0UL)
  #define DPPIC_CHEN_CH9_Enabled (0x1UL)

/* CH10 @Bit 10 : Enable or disable channel 10 */
  #define DPPIC_CHEN_CH10_Pos (10UL)
  #define DPPIC_CHEN_CH10_Msk (0x1UL << DPPIC_CHEN_CH10_Pos)
  #define DPPIC_CHEN_CH10_Min (0x0UL)
  #define DPPIC_CHEN_CH10_Max (0x1UL)
  #define DPPIC_CHEN_CH10_Disabled (0x0UL)
  #define DPPIC_CHEN_CH10_Enabled (0x1UL)

/* CH11 @Bit 11 : Enable or disable channel 11 */
  #define DPPIC_CHEN_CH11_Pos (11UL)
  #define DPPIC_CHEN_CH11_Msk (0x1UL << DPPIC_CHEN_CH11_Pos)
  #define DPPIC_CHEN_CH11_Min (0x0UL)
  #define DPPIC_CHEN_CH11_Max (0x1UL)
  #define DPPIC_CHEN_CH11_Disabled (0x0UL)
  #define DPPIC_CHEN_CH11_Enabled (0x1UL)

/* CH12 @Bit 12 : Enable or disable channel 12 */
  #define DPPIC_CHEN_CH12_Pos (12UL)
  #define DPPIC_CHEN_CH12_Msk (0x1UL << DPPIC_CHEN_CH12_Pos)
  #define DPPIC_CHEN_CH12_Min (0x0UL)
  #define DPPIC_CHEN_CH12_Max (0x1UL)
  #define DPPIC_CHEN_CH12_Disabled (0x0UL)
  #define DPPIC_CHEN_CH12_Enabled (0x1UL)

/* CH13 @Bit 13 : Enable or disable channel 13 */
  #define DPPIC_CHEN_CH13_Pos (13UL)
  #define DPPIC_CHEN_CH13_Msk (0x1UL << DPPIC_CHEN_CH13_Pos)
  #define DPPIC_CHEN_CH13_Min (0x0UL)
  #define DPPIC_CHEN_CH13_Max (0x1UL)
  #define DPPIC_CHEN_CH13_Disabled (0x0UL)
  #define DPPIC_CHEN_CH13_Enabled (0x1UL)

/* CH14 @Bit 14 : Enable or disable channel 14 */
  #define DPPIC_CHEN_CH14_Pos (14UL)
  #define DPPIC_CHEN_CH14_Msk (0x1UL << DPPIC_CHEN_CH14_Pos)
  #define DPPIC_CHEN_CH14_Min (0x0UL)
  #define DPPIC_CHEN_CH14_Max (0x1UL)
  #define DPPIC_CHEN_CH14_Disabled (0x0UL)
  #define DPPIC_CHEN_CH14_Enabled (0x1UL)

/* CH15 @Bit 15 : Enable or disable channel 15 */
  #define DPPIC_CHEN_CH15_Pos (15UL)
  #define DPPIC_CHEN_CH15_Msk (0x1UL << DPPIC_CHEN_CH15_Pos)
  #define DPPIC_CHEN_CH15_Min (0x0UL)
  #define DPPIC_CHEN_CH15_Max (0x1UL)
  #define DPPIC_CHEN_CH15_Disabled (0x0UL)
  #define DPPIC_CHEN_CH15_Enabled (0x1UL)

/* CH16 @Bit 16 : Enable or disable channel 16 */
  #define DPPIC_CHEN_CH16_Pos (16UL)
  #define DPPIC_CHEN_CH16_Msk (0x1UL << DPPIC_CHEN_CH16_Pos)
  #define DPPIC_CHEN_CH16_Min (0x0UL)
  #define DPPIC_CHEN_CH16_Max (0x1UL)
  #define DPPIC_CHEN_CH16_Disabled (0x0UL)
  #define DPPIC_CHEN_CH16_Enabled (0x1UL)

/* CH17 @Bit 17 : Enable or disable channel 17 */
  #define DPPIC_CHEN_CH17_Pos (17UL)
  #define DPPIC_CHEN_CH17_Msk (0x1UL << DPPIC_CHEN_CH17_Pos)
  #define DPPIC_CHEN_CH17_Min (0x0UL)
  #define DPPIC_CHEN_CH17_Max (0x1UL)
  #define DPPIC_CHEN_CH17_Disabled (0x0UL)
  #define DPPIC_CHEN_CH17_Enabled (0x1UL)

/* CH18 @Bit 18 : Enable or disable channel 18 */
  #define DPPIC_CHEN_CH18_Pos (18UL)
  #define DPPIC_CHEN_CH18_Msk (0x1UL << DPPIC_CHEN_CH18_Pos)
  #define DPPIC_CHEN_CH18_Min (0x0UL)
  #define DPPIC_CHEN_CH18_Max (0x1UL)
  #define DPPIC_CHEN_CH18_Disabled (0x0UL)
  #define DPPIC_CHEN_CH18_Enabled (0x1UL)

/* CH19 @Bit 19 : Enable or disable channel 19 */
  #define DPPIC_CHEN_CH19_Pos (19UL)
  #define DPPIC_CHEN_CH19_Msk (0x1UL << DPPIC_CHEN_CH19_Pos)
  #define DPPIC_CHEN_CH19_Min (0x0UL)
  #define DPPIC_CHEN_CH19_Max (0x1UL)
  #define DPPIC_CHEN_CH19_Disabled (0x0UL)
  #define DPPIC_CHEN_CH19_Enabled (0x1UL)

/* CH20 @Bit 20 : Enable or disable channel 20 */
  #define DPPIC_CHEN_CH20_Pos (20UL)
  #define DPPIC_CHEN_CH20_Msk (0x1UL << DPPIC_CHEN_CH20_Pos)
  #define DPPIC_CHEN_CH20_Min (0x0UL)
  #define DPPIC_CHEN_CH20_Max (0x1UL)
  #define DPPIC_CHEN_CH20_Disabled (0x0UL)
  #define DPPIC_CHEN_CH20_Enabled (0x1UL)

/* CH21 @Bit 21 : Enable or disable channel 21 */
  #define DPPIC_CHEN_CH21_Pos (21UL)
  #define DPPIC_CHEN_CH21_Msk (0x1UL << DPPIC_CHEN_CH21_Pos)
  #define DPPIC_CHEN_CH21_Min (0x0UL)
  #define DPPIC_CHEN_CH21_Max (0x1UL)
  #define DPPIC_CHEN_CH21_Disabled (0x0UL)
  #define DPPIC_CHEN_CH21_Enabled (0x1UL)

/* CH22 @Bit 22 : Enable or disable channel 22 */
  #define DPPIC_CHEN_CH22_Pos (22UL)
  #define DPPIC_CHEN_CH22_Msk (0x1UL << DPPIC_CHEN_CH22_Pos)
  #define DPPIC_CHEN_CH22_Min (0x0UL)
  #define DPPIC_CHEN_CH22_Max (0x1UL)
  #define DPPIC_CHEN_CH22_Disabled (0x0UL)
  #define DPPIC_CHEN_CH22_Enabled (0x1UL)

/* CH23 @Bit 23 : Enable or disable channel 23 */
  #define DPPIC_CHEN_CH23_Pos (23UL)
  #define DPPIC_CHEN_CH23_Msk (0x1UL << DPPIC_CHEN_CH23_Pos)
  #define DPPIC_CHEN_CH23_Min (0x0UL)
  #define DPPIC_CHEN_CH23_Max (0x1UL)
  #define DPPIC_CHEN_CH23_Disabled (0x0UL)
  #define DPPIC_CHEN_CH23_Enabled (0x1UL)


/* DPPIC_CHENSET: Channel enable set register */
  #define DPPIC_CHENSET_ResetValue (0x00000000UL)

/* CH0 @Bit 0 : Channel 0 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH0_Pos (0UL)
  #define DPPIC_CHENSET_CH0_Msk (0x1UL << DPPIC_CHENSET_CH0_Pos)
  #define DPPIC_CHENSET_CH0_Min (0x0UL)
  #define DPPIC_CHENSET_CH0_Max (0x1UL)
  #define DPPIC_CHENSET_CH0_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH0_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH0_Set (0x1UL)

/* CH1 @Bit 1 : Channel 1 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH1_Pos (1UL)
  #define DPPIC_CHENSET_CH1_Msk (0x1UL << DPPIC_CHENSET_CH1_Pos)
  #define DPPIC_CHENSET_CH1_Min (0x0UL)
  #define DPPIC_CHENSET_CH1_Max (0x1UL)
  #define DPPIC_CHENSET_CH1_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH1_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH1_Set (0x1UL)

/* CH2 @Bit 2 : Channel 2 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH2_Pos (2UL)
  #define DPPIC_CHENSET_CH2_Msk (0x1UL << DPPIC_CHENSET_CH2_Pos)
  #define DPPIC_CHENSET_CH2_Min (0x0UL)
  #define DPPIC_CHENSET_CH2_Max (0x1UL)
  #define DPPIC_CHENSET_CH2_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH2_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH2_Set (0x1UL)

/* CH3 @Bit 3 : Channel 3 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH3_Pos (3UL)
  #define DPPIC_CHENSET_CH3_Msk (0x1UL << DPPIC_CHENSET_CH3_Pos)
  #define DPPIC_CHENSET_CH3_Min (0x0UL)
  #define DPPIC_CHENSET_CH3_Max (0x1UL)
  #define DPPIC_CHENSET_CH3_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH3_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH3_Set (0x1UL)

/* CH4 @Bit 4 : Channel 4 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH4_Pos (4UL)
  #define DPPIC_CHENSET_CH4_Msk (0x1UL << DPPIC_CHENSET_CH4_Pos)
  #define DPPIC_CHENSET_CH4_Min (0x0UL)
  #define DPPIC_CHENSET_CH4_Max (0x1UL)
  #define DPPIC_CHENSET_CH4_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH4_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH4_Set (0x1UL)

/* CH5 @Bit 5 : Channel 5 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH5_Pos (5UL)
  #define DPPIC_CHENSET_CH5_Msk (0x1UL << DPPIC_CHENSET_CH5_Pos)
  #define DPPIC_CHENSET_CH5_Min (0x0UL)
  #define DPPIC_CHENSET_CH5_Max (0x1UL)
  #define DPPIC_CHENSET_CH5_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH5_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH5_Set (0x1UL)

/* CH6 @Bit 6 : Channel 6 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH6_Pos (6UL)
  #define DPPIC_CHENSET_CH6_Msk (0x1UL << DPPIC_CHENSET_CH6_Pos)
  #define DPPIC_CHENSET_CH6_Min (0x0UL)
  #define DPPIC_CHENSET_CH6_Max (0x1UL)
  #define DPPIC_CHENSET_CH6_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH6_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH6_Set (0x1UL)

/* CH7 @Bit 7 : Channel 7 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH7_Pos (7UL)
  #define DPPIC_CHENSET_CH7_Msk (0x1UL << DPPIC_CHENSET_CH7_Pos)
  #define DPPIC_CHENSET_CH7_Min (0x0UL)
  #define DPPIC_CHENSET_CH7_Max (0x1UL)
  #define DPPIC_CHENSET_CH7_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH7_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH7_Set (0x1UL)

/* CH8 @Bit 8 : Channel 8 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH8_Pos (8UL)
  #define DPPIC_CHENSET_CH8_Msk (0x1UL << DPPIC_CHENSET_CH8_Pos)
  #define DPPIC_CHENSET_CH8_Min (0x0UL)
  #define DPPIC_CHENSET_CH8_Max (0x1UL)
  #define DPPIC_CHENSET_CH8_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH8_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH8_Set (0x1UL)

/* CH9 @Bit 9 : Channel 9 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH9_Pos (9UL)
  #define DPPIC_CHENSET_CH9_Msk (0x1UL << DPPIC_CHENSET_CH9_Pos)
  #define DPPIC_CHENSET_CH9_Min (0x0UL)
  #define DPPIC_CHENSET_CH9_Max (0x1UL)
  #define DPPIC_CHENSET_CH9_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH9_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH9_Set (0x1UL)

/* CH10 @Bit 10 : Channel 10 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH10_Pos (10UL)
  #define DPPIC_CHENSET_CH10_Msk (0x1UL << DPPIC_CHENSET_CH10_Pos)
  #define DPPIC_CHENSET_CH10_Min (0x0UL)
  #define DPPIC_CHENSET_CH10_Max (0x1UL)
  #define DPPIC_CHENSET_CH10_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH10_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH10_Set (0x1UL)

/* CH11 @Bit 11 : Channel 11 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH11_Pos (11UL)
  #define DPPIC_CHENSET_CH11_Msk (0x1UL << DPPIC_CHENSET_CH11_Pos)
  #define DPPIC_CHENSET_CH11_Min (0x0UL)
  #define DPPIC_CHENSET_CH11_Max (0x1UL)
  #define DPPIC_CHENSET_CH11_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH11_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH11_Set (0x1UL)

/* CH12 @Bit 12 : Channel 12 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH12_Pos (12UL)
  #define DPPIC_CHENSET_CH12_Msk (0x1UL << DPPIC_CHENSET_CH12_Pos)
  #define DPPIC_CHENSET_CH12_Min (0x0UL)
  #define DPPIC_CHENSET_CH12_Max (0x1UL)
  #define DPPIC_CHENSET_CH12_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH12_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH12_Set (0x1UL)

/* CH13 @Bit 13 : Channel 13 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH13_Pos (13UL)
  #define DPPIC_CHENSET_CH13_Msk (0x1UL << DPPIC_CHENSET_CH13_Pos)
  #define DPPIC_CHENSET_CH13_Min (0x0UL)
  #define DPPIC_CHENSET_CH13_Max (0x1UL)
  #define DPPIC_CHENSET_CH13_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH13_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH13_Set (0x1UL)

/* CH14 @Bit 14 : Channel 14 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH14_Pos (14UL)
  #define DPPIC_CHENSET_CH14_Msk (0x1UL << DPPIC_CHENSET_CH14_Pos)
  #define DPPIC_CHENSET_CH14_Min (0x0UL)
  #define DPPIC_CHENSET_CH14_Max (0x1UL)
  #define DPPIC_CHENSET_CH14_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH14_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH14_Set (0x1UL)

/* CH15 @Bit 15 : Channel 15 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH15_Pos (15UL)
  #define DPPIC_CHENSET_CH15_Msk (0x1UL << DPPIC_CHENSET_CH15_Pos)
  #define DPPIC_CHENSET_CH15_Min (0x0UL)
  #define DPPIC_CHENSET_CH15_Max (0x1UL)
  #define DPPIC_CHENSET_CH15_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH15_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH15_Set (0x1UL)

/* CH16 @Bit 16 : Channel 16 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH16_Pos (16UL)
  #define DPPIC_CHENSET_CH16_Msk (0x1UL << DPPIC_CHENSET_CH16_Pos)
  #define DPPIC_CHENSET_CH16_Min (0x0UL)
  #define DPPIC_CHENSET_CH16_Max (0x1UL)
  #define DPPIC_CHENSET_CH16_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH16_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH16_Set (0x1UL)

/* CH17 @Bit 17 : Channel 17 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH17_Pos (17UL)
  #define DPPIC_CHENSET_CH17_Msk (0x1UL << DPPIC_CHENSET_CH17_Pos)
  #define DPPIC_CHENSET_CH17_Min (0x0UL)
  #define DPPIC_CHENSET_CH17_Max (0x1UL)
  #define DPPIC_CHENSET_CH17_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH17_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH17_Set (0x1UL)

/* CH18 @Bit 18 : Channel 18 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH18_Pos (18UL)
  #define DPPIC_CHENSET_CH18_Msk (0x1UL << DPPIC_CHENSET_CH18_Pos)
  #define DPPIC_CHENSET_CH18_Min (0x0UL)
  #define DPPIC_CHENSET_CH18_Max (0x1UL)
  #define DPPIC_CHENSET_CH18_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH18_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH18_Set (0x1UL)

/* CH19 @Bit 19 : Channel 19 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH19_Pos (19UL)
  #define DPPIC_CHENSET_CH19_Msk (0x1UL << DPPIC_CHENSET_CH19_Pos)
  #define DPPIC_CHENSET_CH19_Min (0x0UL)
  #define DPPIC_CHENSET_CH19_Max (0x1UL)
  #define DPPIC_CHENSET_CH19_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH19_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH19_Set (0x1UL)

/* CH20 @Bit 20 : Channel 20 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH20_Pos (20UL)
  #define DPPIC_CHENSET_CH20_Msk (0x1UL << DPPIC_CHENSET_CH20_Pos)
  #define DPPIC_CHENSET_CH20_Min (0x0UL)
  #define DPPIC_CHENSET_CH20_Max (0x1UL)
  #define DPPIC_CHENSET_CH20_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH20_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH20_Set (0x1UL)

/* CH21 @Bit 21 : Channel 21 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH21_Pos (21UL)
  #define DPPIC_CHENSET_CH21_Msk (0x1UL << DPPIC_CHENSET_CH21_Pos)
  #define DPPIC_CHENSET_CH21_Min (0x0UL)
  #define DPPIC_CHENSET_CH21_Max (0x1UL)
  #define DPPIC_CHENSET_CH21_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH21_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH21_Set (0x1UL)

/* CH22 @Bit 22 : Channel 22 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH22_Pos (22UL)
  #define DPPIC_CHENSET_CH22_Msk (0x1UL << DPPIC_CHENSET_CH22_Pos)
  #define DPPIC_CHENSET_CH22_Min (0x0UL)
  #define DPPIC_CHENSET_CH22_Max (0x1UL)
  #define DPPIC_CHENSET_CH22_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH22_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH22_Set (0x1UL)

/* CH23 @Bit 23 : Channel 23 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH23_Pos (23UL)
  #define DPPIC_CHENSET_CH23_Msk (0x1UL << DPPIC_CHENSET_CH23_Pos)
  #define DPPIC_CHENSET_CH23_Min (0x0UL)
  #define DPPIC_CHENSET_CH23_Max (0x1UL)
  #define DPPIC_CHENSET_CH23_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH23_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH23_Set (0x1UL)


/* DPPIC_CHENCLR: Channel enable clear register */
  #define DPPIC_CHENCLR_ResetValue (0x00000000UL)

/* CH0 @Bit 0 : Channel 0 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH0_Pos (0UL)
  #define DPPIC_CHENCLR_CH0_Msk (0x1UL << DPPIC_CHENCLR_CH0_Pos)
  #define DPPIC_CHENCLR_CH0_Min (0x0UL)
  #define DPPIC_CHENCLR_CH0_Max (0x1UL)
  #define DPPIC_CHENCLR_CH0_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH0_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH0_Clear (0x1UL)

/* CH1 @Bit 1 : Channel 1 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH1_Pos (1UL)
  #define DPPIC_CHENCLR_CH1_Msk (0x1UL << DPPIC_CHENCLR_CH1_Pos)
  #define DPPIC_CHENCLR_CH1_Min (0x0UL)
  #define DPPIC_CHENCLR_CH1_Max (0x1UL)
  #define DPPIC_CHENCLR_CH1_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH1_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH1_Clear (0x1UL)

/* CH2 @Bit 2 : Channel 2 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH2_Pos (2UL)
  #define DPPIC_CHENCLR_CH2_Msk (0x1UL << DPPIC_CHENCLR_CH2_Pos)
  #define DPPIC_CHENCLR_CH2_Min (0x0UL)
  #define DPPIC_CHENCLR_CH2_Max (0x1UL)
  #define DPPIC_CHENCLR_CH2_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH2_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH2_Clear (0x1UL)

/* CH3 @Bit 3 : Channel 3 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH3_Pos (3UL)
  #define DPPIC_CHENCLR_CH3_Msk (0x1UL << DPPIC_CHENCLR_CH3_Pos)
  #define DPPIC_CHENCLR_CH3_Min (0x0UL)
  #define DPPIC_CHENCLR_CH3_Max (0x1UL)
  #define DPPIC_CHENCLR_CH3_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH3_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH3_Clear (0x1UL)

/* CH4 @Bit 4 : Channel 4 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH4_Pos (4UL)
  #define DPPIC_CHENCLR_CH4_Msk (0x1UL << DPPIC_CHENCLR_CH4_Pos)
  #define DPPIC_CHENCLR_CH4_Min (0x0UL)
  #define DPPIC_CHENCLR_CH4_Max (0x1UL)
  #define DPPIC_CHENCLR_CH4_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH4_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH4_Clear (0x1UL)

/* CH5 @Bit 5 : Channel 5 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH5_Pos (5UL)
  #define DPPIC_CHENCLR_CH5_Msk (0x1UL << DPPIC_CHENCLR_CH5_Pos)
  #define DPPIC_CHENCLR_CH5_Min (0x0UL)
  #define DPPIC_CHENCLR_CH5_Max (0x1UL)
  #define DPPIC_CHENCLR_CH5_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH5_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH5_Clear (0x1UL)

/* CH6 @Bit 6 : Channel 6 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH6_Pos (6UL)
  #define DPPIC_CHENCLR_CH6_Msk (0x1UL << DPPIC_CHENCLR_CH6_Pos)
  #define DPPIC_CHENCLR_CH6_Min (0x0UL)
  #define DPPIC_CHENCLR_CH6_Max (0x1UL)
  #define DPPIC_CHENCLR_CH6_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH6_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH6_Clear (0x1UL)

/* CH7 @Bit 7 : Channel 7 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH7_Pos (7UL)
  #define DPPIC_CHENCLR_CH7_Msk (0x1UL << DPPIC_CHENCLR_CH7_Pos)
  #define DPPIC_CHENCLR_CH7_Min (0x0UL)
  #define DPPIC_CHENCLR_CH7_Max (0x1UL)
  #define DPPIC_CHENCLR_CH7_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH7_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH7_Clear (0x1UL)

/* CH8 @Bit 8 : Channel 8 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH8_Pos (8UL)
  #define DPPIC_CHENCLR_CH8_Msk (0x1UL << DPPIC_CHENCLR_CH8_Pos)
  #define DPPIC_CHENCLR_CH8_Min (0x0UL)
  #define DPPIC_CHENCLR_CH8_Max (0x1UL)
  #define DPPIC_CHENCLR_CH8_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH8_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH8_Clear (0x1UL)

/* CH9 @Bit 9 : Channel 9 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH9_Pos (9UL)
  #define DPPIC_CHENCLR_CH9_Msk (0x1UL << DPPIC_CHENCLR_CH9_Pos)
  #define DPPIC_CHENCLR_CH9_Min (0x0UL)
  #define DPPIC_CHENCLR_CH9_Max (0x1UL)
  #define DPPIC_CHENCLR_CH9_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH9_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH9_Clear (0x1UL)

/* CH10 @Bit 10 : Channel 10 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH10_Pos (10UL)
  #define DPPIC_CHENCLR_CH10_Msk (0x1UL << DPPIC_CHENCLR_CH10_Pos)
  #define DPPIC_CHENCLR_CH10_Min (0x0UL)
  #define DPPIC_CHENCLR_CH10_Max (0x1UL)
  #define DPPIC_CHENCLR_CH10_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH10_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH10_Clear (0x1UL)

/* CH11 @Bit 11 : Channel 11 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH11_Pos (11UL)
  #define DPPIC_CHENCLR_CH11_Msk (0x1UL << DPPIC_CHENCLR_CH11_Pos)
  #define DPPIC_CHENCLR_CH11_Min (0x0UL)
  #define DPPIC_CHENCLR_CH11_Max (0x1UL)
  #define DPPIC_CHENCLR_CH11_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH11_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH11_Clear (0x1UL)

/* CH12 @Bit 12 : Channel 12 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH12_Pos (12UL)
  #define DPPIC_CHENCLR_CH12_Msk (0x1UL << DPPIC_CHENCLR_CH12_Pos)
  #define DPPIC_CHENCLR_CH12_Min (0x0UL)
  #define DPPIC_CHENCLR_CH12_Max (0x1UL)
  #define DPPIC_CHENCLR_CH12_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH12_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH12_Clear (0x1UL)

/* CH13 @Bit 13 : Channel 13 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH13_Pos (13UL)
  #define DPPIC_CHENCLR_CH13_Msk (0x1UL << DPPIC_CHENCLR_CH13_Pos)
  #define DPPIC_CHENCLR_CH13_Min (0x0UL)
  #define DPPIC_CHENCLR_CH13_Max (0x1UL)
  #define DPPIC_CHENCLR_CH13_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH13_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH13_Clear (0x1UL)

/* CH14 @Bit 14 : Channel 14 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH14_Pos (14UL)
  #define DPPIC_CHENCLR_CH14_Msk (0x1UL << DPPIC_CHENCLR_CH14_Pos)
  #define DPPIC_CHENCLR_CH14_Min (0x0UL)
  #define DPPIC_CHENCLR_CH14_Max (0x1UL)
  #define DPPIC_CHENCLR_CH14_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH14_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH14_Clear (0x1UL)

/* CH15 @Bit 15 : Channel 15 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH15_Pos (15UL)
  #define DPPIC_CHENCLR_CH15_Msk (0x1UL << DPPIC_CHENCLR_CH15_Pos)
  #define DPPIC_CHENCLR_CH15_Min (0x0UL)
  #define DPPIC_CHENCLR_CH15_Max (0x1UL)
  #define DPPIC_CHENCLR_CH15_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH15_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH15_Clear (0x1UL)

/* CH16 @Bit 16 : Channel 16 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH16_Pos (16UL)
  #define DPPIC_CHENCLR_CH16_Msk (0x1UL << DPPIC_CHENCLR_CH16_Pos)
  #define DPPIC_CHENCLR_CH16_Min (0x0UL)
  #define DPPIC_CHENCLR_CH16_Max (0x1UL)
  #define DPPIC_CHENCLR_CH16_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH16_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH16_Clear (0x1UL)

/* CH17 @Bit 17 : Channel 17 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH17_Pos (17UL)
  #define DPPIC_CHENCLR_CH17_Msk (0x1UL << DPPIC_CHENCLR_CH17_Pos)
  #define DPPIC_CHENCLR_CH17_Min (0x0UL)
  #define DPPIC_CHENCLR_CH17_Max (0x1UL)
  #define DPPIC_CHENCLR_CH17_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH17_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH17_Clear (0x1UL)

/* CH18 @Bit 18 : Channel 18 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH18_Pos (18UL)
  #define DPPIC_CHENCLR_CH18_Msk (0x1UL << DPPIC_CHENCLR_CH18_Pos)
  #define DPPIC_CHENCLR_CH18_Min (0x0UL)
  #define DPPIC_CHENCLR_CH18_Max (0x1UL)
  #define DPPIC_CHENCLR_CH18_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH18_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH18_Clear (0x1UL)

/* CH19 @Bit 19 : Channel 19 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH19_Pos (19UL)
  #define DPPIC_CHENCLR_CH19_Msk (0x1UL << DPPIC_CHENCLR_CH19_Pos)
  #define DPPIC_CHENCLR_CH19_Min (0x0UL)
  #define DPPIC_CHENCLR_CH19_Max (0x1UL)
  #define DPPIC_CHENCLR_CH19_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH19_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH19_Clear (0x1UL)

/* CH20 @Bit 20 : Channel 20 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH20_Pos (20UL)
  #define DPPIC_CHENCLR_CH20_Msk (0x1UL << DPPIC_CHENCLR_CH20_Pos)
  #define DPPIC_CHENCLR_CH20_Min (0x0UL)
  #define DPPIC_CHENCLR_CH20_Max (0x1UL)
  #define DPPIC_CHENCLR_CH20_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH20_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH20_Clear (0x1UL)

/* CH21 @Bit 21 : Channel 21 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH21_Pos (21UL)
  #define DPPIC_CHENCLR_CH21_Msk (0x1UL << DPPIC_CHENCLR_CH21_Pos)
  #define DPPIC_CHENCLR_CH21_Min (0x0UL)
  #define DPPIC_CHENCLR_CH21_Max (0x1UL)
  #define DPPIC_CHENCLR_CH21_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH21_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH21_Clear (0x1UL)

/* CH22 @Bit 22 : Channel 22 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH22_Pos (22UL)
  #define DPPIC_CHENCLR_CH22_Msk (0x1UL << DPPIC_CHENCLR_CH22_Pos)
  #define DPPIC_CHENCLR_CH22_Min (0x0UL)
  #define DPPIC_CHENCLR_CH22_Max (0x1UL)
  #define DPPIC_CHENCLR_CH22_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH22_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH22_Clear (0x1UL)

/* CH23 @Bit 23 : Channel 23 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH23_Pos (23UL)
  #define DPPIC_CHENCLR_CH23_Msk (0x1UL << DPPIC_CHENCLR_CH23_Pos)
  #define DPPIC_CHENCLR_CH23_Min (0x0UL)
  #define DPPIC_CHENCLR_CH23_Max (0x1UL)
  #define DPPIC_CHENCLR_CH23_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH23_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH23_Clear (0x1UL)


/* DPPIC_CHG: Channel group n Note: Writes to this register are ignored if either SUBSCRIBE_CHG[n].EN or SUBSCRIBE_CHG[n].DIS is
               enabled */

  #define DPPIC_CHG_MaxCount (6UL)
  #define DPPIC_CHG_MaxIndex (5UL)
  #define DPPIC_CHG_MinIndex (0UL)
  #define DPPIC_CHG_ResetValue (0x00000000UL)

/* CH0 @Bit 0 : Include or exclude channel 0 */
  #define DPPIC_CHG_CH0_Pos (0UL)
  #define DPPIC_CHG_CH0_Msk (0x1UL << DPPIC_CHG_CH0_Pos)
  #define DPPIC_CHG_CH0_Min (0x0UL)
  #define DPPIC_CHG_CH0_Max (0x1UL)
  #define DPPIC_CHG_CH0_Excluded (0x0UL)
  #define DPPIC_CHG_CH0_Included (0x1UL)

/* CH1 @Bit 1 : Include or exclude channel 1 */
  #define DPPIC_CHG_CH1_Pos (1UL)
  #define DPPIC_CHG_CH1_Msk (0x1UL << DPPIC_CHG_CH1_Pos)
  #define DPPIC_CHG_CH1_Min (0x0UL)
  #define DPPIC_CHG_CH1_Max (0x1UL)
  #define DPPIC_CHG_CH1_Excluded (0x0UL)
  #define DPPIC_CHG_CH1_Included (0x1UL)

/* CH2 @Bit 2 : Include or exclude channel 2 */
  #define DPPIC_CHG_CH2_Pos (2UL)
  #define DPPIC_CHG_CH2_Msk (0x1UL << DPPIC_CHG_CH2_Pos)
  #define DPPIC_CHG_CH2_Min (0x0UL)
  #define DPPIC_CHG_CH2_Max (0x1UL)
  #define DPPIC_CHG_CH2_Excluded (0x0UL)
  #define DPPIC_CHG_CH2_Included (0x1UL)

/* CH3 @Bit 3 : Include or exclude channel 3 */
  #define DPPIC_CHG_CH3_Pos (3UL)
  #define DPPIC_CHG_CH3_Msk (0x1UL << DPPIC_CHG_CH3_Pos)
  #define DPPIC_CHG_CH3_Min (0x0UL)
  #define DPPIC_CHG_CH3_Max (0x1UL)
  #define DPPIC_CHG_CH3_Excluded (0x0UL)
  #define DPPIC_CHG_CH3_Included (0x1UL)

/* CH4 @Bit 4 : Include or exclude channel 4 */
  #define DPPIC_CHG_CH4_Pos (4UL)
  #define DPPIC_CHG_CH4_Msk (0x1UL << DPPIC_CHG_CH4_Pos)
  #define DPPIC_CHG_CH4_Min (0x0UL)
  #define DPPIC_CHG_CH4_Max (0x1UL)
  #define DPPIC_CHG_CH4_Excluded (0x0UL)
  #define DPPIC_CHG_CH4_Included (0x1UL)

/* CH5 @Bit 5 : Include or exclude channel 5 */
  #define DPPIC_CHG_CH5_Pos (5UL)
  #define DPPIC_CHG_CH5_Msk (0x1UL << DPPIC_CHG_CH5_Pos)
  #define DPPIC_CHG_CH5_Min (0x0UL)
  #define DPPIC_CHG_CH5_Max (0x1UL)
  #define DPPIC_CHG_CH5_Excluded (0x0UL)
  #define DPPIC_CHG_CH5_Included (0x1UL)

/* CH6 @Bit 6 : Include or exclude channel 6 */
  #define DPPIC_CHG_CH6_Pos (6UL)
  #define DPPIC_CHG_CH6_Msk (0x1UL << DPPIC_CHG_CH6_Pos)
  #define DPPIC_CHG_CH6_Min (0x0UL)
  #define DPPIC_CHG_CH6_Max (0x1UL)
  #define DPPIC_CHG_CH6_Excluded (0x0UL)
  #define DPPIC_CHG_CH6_Included (0x1UL)

/* CH7 @Bit 7 : Include or exclude channel 7 */
  #define DPPIC_CHG_CH7_Pos (7UL)
  #define DPPIC_CHG_CH7_Msk (0x1UL << DPPIC_CHG_CH7_Pos)
  #define DPPIC_CHG_CH7_Min (0x0UL)
  #define DPPIC_CHG_CH7_Max (0x1UL)
  #define DPPIC_CHG_CH7_Excluded (0x0UL)
  #define DPPIC_CHG_CH7_Included (0x1UL)

/* CH8 @Bit 8 : Include or exclude channel 8 */
  #define DPPIC_CHG_CH8_Pos (8UL)
  #define DPPIC_CHG_CH8_Msk (0x1UL << DPPIC_CHG_CH8_Pos)
  #define DPPIC_CHG_CH8_Min (0x0UL)
  #define DPPIC_CHG_CH8_Max (0x1UL)
  #define DPPIC_CHG_CH8_Excluded (0x0UL)
  #define DPPIC_CHG_CH8_Included (0x1UL)

/* CH9 @Bit 9 : Include or exclude channel 9 */
  #define DPPIC_CHG_CH9_Pos (9UL)
  #define DPPIC_CHG_CH9_Msk (0x1UL << DPPIC_CHG_CH9_Pos)
  #define DPPIC_CHG_CH9_Min (0x0UL)
  #define DPPIC_CHG_CH9_Max (0x1UL)
  #define DPPIC_CHG_CH9_Excluded (0x0UL)
  #define DPPIC_CHG_CH9_Included (0x1UL)

/* CH10 @Bit 10 : Include or exclude channel 10 */
  #define DPPIC_CHG_CH10_Pos (10UL)
  #define DPPIC_CHG_CH10_Msk (0x1UL << DPPIC_CHG_CH10_Pos)
  #define DPPIC_CHG_CH10_Min (0x0UL)
  #define DPPIC_CHG_CH10_Max (0x1UL)
  #define DPPIC_CHG_CH10_Excluded (0x0UL)
  #define DPPIC_CHG_CH10_Included (0x1UL)

/* CH11 @Bit 11 : Include or exclude channel 11 */
  #define DPPIC_CHG_CH11_Pos (11UL)
  #define DPPIC_CHG_CH11_Msk (0x1UL << DPPIC_CHG_CH11_Pos)
  #define DPPIC_CHG_CH11_Min (0x0UL)
  #define DPPIC_CHG_CH11_Max (0x1UL)
  #define DPPIC_CHG_CH11_Excluded (0x0UL)
  #define DPPIC_CHG_CH11_Included (0x1UL)

/* CH12 @Bit 12 : Include or exclude channel 12 */
  #define DPPIC_CHG_CH12_Pos (12UL)
  #define DPPIC_CHG_CH12_Msk (0x1UL << DPPIC_CHG_CH12_Pos)
  #define DPPIC_CHG_CH12_Min (0x0UL)
  #define DPPIC_CHG_CH12_Max (0x1UL)
  #define DPPIC_CHG_CH12_Excluded (0x0UL)
  #define DPPIC_CHG_CH12_Included (0x1UL)

/* CH13 @Bit 13 : Include or exclude channel 13 */
  #define DPPIC_CHG_CH13_Pos (13UL)
  #define DPPIC_CHG_CH13_Msk (0x1UL << DPPIC_CHG_CH13_Pos)
  #define DPPIC_CHG_CH13_Min (0x0UL)
  #define DPPIC_CHG_CH13_Max (0x1UL)
  #define DPPIC_CHG_CH13_Excluded (0x0UL)
  #define DPPIC_CHG_CH13_Included (0x1UL)

/* CH14 @Bit 14 : Include or exclude channel 14 */
  #define DPPIC_CHG_CH14_Pos (14UL)
  #define DPPIC_CHG_CH14_Msk (0x1UL << DPPIC_CHG_CH14_Pos)
  #define DPPIC_CHG_CH14_Min (0x0UL)
  #define DPPIC_CHG_CH14_Max (0x1UL)
  #define DPPIC_CHG_CH14_Excluded (0x0UL)
  #define DPPIC_CHG_CH14_Included (0x1UL)

/* CH15 @Bit 15 : Include or exclude channel 15 */
  #define DPPIC_CHG_CH15_Pos (15UL)
  #define DPPIC_CHG_CH15_Msk (0x1UL << DPPIC_CHG_CH15_Pos)
  #define DPPIC_CHG_CH15_Min (0x0UL)
  #define DPPIC_CHG_CH15_Max (0x1UL)
  #define DPPIC_CHG_CH15_Excluded (0x0UL)
  #define DPPIC_CHG_CH15_Included (0x1UL)

/* CH16 @Bit 16 : Include or exclude channel 16 */
  #define DPPIC_CHG_CH16_Pos (16UL)
  #define DPPIC_CHG_CH16_Msk (0x1UL << DPPIC_CHG_CH16_Pos)
  #define DPPIC_CHG_CH16_Min (0x0UL)
  #define DPPIC_CHG_CH16_Max (0x1UL)
  #define DPPIC_CHG_CH16_Excluded (0x0UL)
  #define DPPIC_CHG_CH16_Included (0x1UL)

/* CH17 @Bit 17 : Include or exclude channel 17 */
  #define DPPIC_CHG_CH17_Pos (17UL)
  #define DPPIC_CHG_CH17_Msk (0x1UL << DPPIC_CHG_CH17_Pos)
  #define DPPIC_CHG_CH17_Min (0x0UL)
  #define DPPIC_CHG_CH17_Max (0x1UL)
  #define DPPIC_CHG_CH17_Excluded (0x0UL)
  #define DPPIC_CHG_CH17_Included (0x1UL)

/* CH18 @Bit 18 : Include or exclude channel 18 */
  #define DPPIC_CHG_CH18_Pos (18UL)
  #define DPPIC_CHG_CH18_Msk (0x1UL << DPPIC_CHG_CH18_Pos)
  #define DPPIC_CHG_CH18_Min (0x0UL)
  #define DPPIC_CHG_CH18_Max (0x1UL)
  #define DPPIC_CHG_CH18_Excluded (0x0UL)
  #define DPPIC_CHG_CH18_Included (0x1UL)

/* CH19 @Bit 19 : Include or exclude channel 19 */
  #define DPPIC_CHG_CH19_Pos (19UL)
  #define DPPIC_CHG_CH19_Msk (0x1UL << DPPIC_CHG_CH19_Pos)
  #define DPPIC_CHG_CH19_Min (0x0UL)
  #define DPPIC_CHG_CH19_Max (0x1UL)
  #define DPPIC_CHG_CH19_Excluded (0x0UL)
  #define DPPIC_CHG_CH19_Included (0x1UL)

/* CH20 @Bit 20 : Include or exclude channel 20 */
  #define DPPIC_CHG_CH20_Pos (20UL)
  #define DPPIC_CHG_CH20_Msk (0x1UL << DPPIC_CHG_CH20_Pos)
  #define DPPIC_CHG_CH20_Min (0x0UL)
  #define DPPIC_CHG_CH20_Max (0x1UL)
  #define DPPIC_CHG_CH20_Excluded (0x0UL)
  #define DPPIC_CHG_CH20_Included (0x1UL)

/* CH21 @Bit 21 : Include or exclude channel 21 */
  #define DPPIC_CHG_CH21_Pos (21UL)
  #define DPPIC_CHG_CH21_Msk (0x1UL << DPPIC_CHG_CH21_Pos)
  #define DPPIC_CHG_CH21_Min (0x0UL)
  #define DPPIC_CHG_CH21_Max (0x1UL)
  #define DPPIC_CHG_CH21_Excluded (0x0UL)
  #define DPPIC_CHG_CH21_Included (0x1UL)

/* CH22 @Bit 22 : Include or exclude channel 22 */
  #define DPPIC_CHG_CH22_Pos (22UL)
  #define DPPIC_CHG_CH22_Msk (0x1UL << DPPIC_CHG_CH22_Pos)
  #define DPPIC_CHG_CH22_Min (0x0UL)
  #define DPPIC_CHG_CH22_Max (0x1UL)
  #define DPPIC_CHG_CH22_Excluded (0x0UL)
  #define DPPIC_CHG_CH22_Included (0x1UL)

/* CH23 @Bit 23 : Include or exclude channel 23 */
  #define DPPIC_CHG_CH23_Pos (23UL)
  #define DPPIC_CHG_CH23_Msk (0x1UL << DPPIC_CHG_CH23_Pos)
  #define DPPIC_CHG_CH23_Min (0x0UL)
  #define DPPIC_CHG_CH23_Max (0x1UL)
  #define DPPIC_CHG_CH23_Excluded (0x0UL)
  #define DPPIC_CHG_CH23_Included (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            ECB                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ===================================================== Struct ECB_KEY ====================================================== */
/**
  * @brief KEY [ECB_KEY] (unspecified)
  */
typedef struct {
  __OM  uint32_t  VALUE[4];
} NRF_ECB_KEY_Type;

/* ECB_KEY_VALUE: 128-bit AES key */
  #define ECB_KEY_VALUE_MaxCount (4UL)
  #define ECB_KEY_VALUE_MaxIndex (3UL)
  #define ECB_KEY_VALUE_MinIndex (0UL)
  #define ECB_KEY_VALUE_ResetValue (0x00000000UL)

/* VALUE @Bits 0..31 : AES 128-bit key value, bits (32*(n+1))-1 : (32*n) */
  #define ECB_KEY_VALUE_VALUE_Pos (0UL)
  #define ECB_KEY_VALUE_VALUE_Msk (0xFFFFFFFFUL << ECB_KEY_VALUE_VALUE_Pos)



/* ====================================================== Struct ECB_IN ====================================================== */
/**
  * @brief IN [ECB_IN] IN EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;
} NRF_ECB_IN_Type;

/* ECB_IN_PTR: Input pointer */
  #define ECB_IN_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Points to a job list containing unencrypted ECB data structure */
  #define ECB_IN_PTR_PTR_Pos (0UL)
  #define ECB_IN_PTR_PTR_Msk (0xFFFFFFFFUL << ECB_IN_PTR_PTR_Pos)



/* ===================================================== Struct ECB_OUT ====================================================== */
/**
  * @brief OUT [ECB_OUT] OUT EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000000) Output pointer Points to a job list containing
                                                                         encrypted ECB data structure*/
} NRF_ECB_OUT_Type;

/* ECB_OUT_PTR: Output pointer Points to a job list containing encrypted ECB data structure */
  #define ECB_OUT_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Output pointer */
  #define ECB_OUT_PTR_PTR_Pos (0UL)
  #define ECB_OUT_PTR_PTR_Msk (0xFFFFFFFFUL << ECB_OUT_PTR_PTR_Pos)


/* ======================================================= Struct ECB ======================================================== */
/**
  * @brief AES ECB Mode Encryption
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_END;
    __IOM uint32_t EVENTS_ERROR;                     /*!< (@ 0x00000104) ECB block encrypt aborted because of a STOP task or due
                                                                         to an error*/
    __IM uint32_t RESERVED2[30];
    __IOM uint32_t PUBLISH_END;
    __IOM uint32_t PUBLISH_ERROR;
    __IM uint32_t RESERVED3[95];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED4[61];
    __IM uint32_t ERRORSTATUS;
    __IM uint32_t RESERVED5[67];
    __IOM NRF_ECB_KEY_Type KEY;
    __IM uint32_t RESERVED6[4];
    __IOM NRF_ECB_IN_Type IN;
    __IM uint32_t RESERVED7;
    __IOM NRF_ECB_OUT_Type OUT;
  } NRF_ECB_Type;

/* ECB_TASKS_START: Start ECB block encrypt */
  #define ECB_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start ECB block encrypt */
  #define ECB_TASKS_START_TASKS_START_Pos (0UL)
  #define ECB_TASKS_START_TASKS_START_Msk (0x1UL << ECB_TASKS_START_TASKS_START_Pos)
  #define ECB_TASKS_START_TASKS_START_Min (0x1UL)
  #define ECB_TASKS_START_TASKS_START_Max (0x1UL)
  #define ECB_TASKS_START_TASKS_START_Trigger (0x1UL)


/* ECB_TASKS_STOP: Abort a possible executing ECB operation */
  #define ECB_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Abort a possible executing ECB operation */
  #define ECB_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define ECB_TASKS_STOP_TASKS_STOP_Msk (0x1UL << ECB_TASKS_STOP_TASKS_STOP_Pos)
  #define ECB_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define ECB_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define ECB_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* ECB_SUBSCRIBE_START: Subscribe configuration for task START */
  #define ECB_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define ECB_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define ECB_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << ECB_SUBSCRIBE_START_CHIDX_Pos)
  #define ECB_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define ECB_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define ECB_SUBSCRIBE_START_EN_Pos (31UL)
  #define ECB_SUBSCRIBE_START_EN_Msk (0x1UL << ECB_SUBSCRIBE_START_EN_Pos)
  #define ECB_SUBSCRIBE_START_EN_Min (0x0UL)
  #define ECB_SUBSCRIBE_START_EN_Max (0x1UL)
  #define ECB_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define ECB_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* ECB_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define ECB_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define ECB_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define ECB_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << ECB_SUBSCRIBE_STOP_CHIDX_Pos)
  #define ECB_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define ECB_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define ECB_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define ECB_SUBSCRIBE_STOP_EN_Msk (0x1UL << ECB_SUBSCRIBE_STOP_EN_Pos)
  #define ECB_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define ECB_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define ECB_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define ECB_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* ECB_EVENTS_END: ECB block encrypt complete */
  #define ECB_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : ECB block encrypt complete */
  #define ECB_EVENTS_END_EVENTS_END_Pos (0UL)
  #define ECB_EVENTS_END_EVENTS_END_Msk (0x1UL << ECB_EVENTS_END_EVENTS_END_Pos)
  #define ECB_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define ECB_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define ECB_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define ECB_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* ECB_EVENTS_ERROR: ECB block encrypt aborted because of a STOP task or due to an error */
  #define ECB_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : ECB block encrypt aborted because of a STOP task or due to an error */
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << ECB_EVENTS_ERROR_EVENTS_ERROR_Pos)
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* ECB_PUBLISH_END: Publish configuration for event END */
  #define ECB_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define ECB_PUBLISH_END_CHIDX_Pos (0UL)
  #define ECB_PUBLISH_END_CHIDX_Msk (0xFFUL << ECB_PUBLISH_END_CHIDX_Pos)
  #define ECB_PUBLISH_END_CHIDX_Min (0x00UL)
  #define ECB_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define ECB_PUBLISH_END_EN_Pos (31UL)
  #define ECB_PUBLISH_END_EN_Msk (0x1UL << ECB_PUBLISH_END_EN_Pos)
  #define ECB_PUBLISH_END_EN_Min (0x0UL)
  #define ECB_PUBLISH_END_EN_Max (0x1UL)
  #define ECB_PUBLISH_END_EN_Disabled (0x0UL)
  #define ECB_PUBLISH_END_EN_Enabled (0x1UL)


/* ECB_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define ECB_PUBLISH_ERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define ECB_PUBLISH_ERROR_CHIDX_Pos (0UL)
  #define ECB_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << ECB_PUBLISH_ERROR_CHIDX_Pos)
  #define ECB_PUBLISH_ERROR_CHIDX_Min (0x00UL)
  #define ECB_PUBLISH_ERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define ECB_PUBLISH_ERROR_EN_Pos (31UL)
  #define ECB_PUBLISH_ERROR_EN_Msk (0x1UL << ECB_PUBLISH_ERROR_EN_Pos)
  #define ECB_PUBLISH_ERROR_EN_Min (0x0UL)
  #define ECB_PUBLISH_ERROR_EN_Max (0x1UL)
  #define ECB_PUBLISH_ERROR_EN_Disabled (0x0UL)
  #define ECB_PUBLISH_ERROR_EN_Enabled (0x1UL)


/* ECB_INTENSET: Enable interrupt */
  #define ECB_INTENSET_ResetValue (0x00000000UL)

/* END @Bit 0 : Write '1' to enable interrupt for event END */
  #define ECB_INTENSET_END_Pos (0UL)
  #define ECB_INTENSET_END_Msk (0x1UL << ECB_INTENSET_END_Pos)
  #define ECB_INTENSET_END_Min (0x0UL)
  #define ECB_INTENSET_END_Max (0x1UL)
  #define ECB_INTENSET_END_Set (0x1UL)
  #define ECB_INTENSET_END_Disabled (0x0UL)
  #define ECB_INTENSET_END_Enabled (0x1UL)

/* ERROR @Bit 1 : Write '1' to enable interrupt for event ERROR */
  #define ECB_INTENSET_ERROR_Pos (1UL)
  #define ECB_INTENSET_ERROR_Msk (0x1UL << ECB_INTENSET_ERROR_Pos)
  #define ECB_INTENSET_ERROR_Min (0x0UL)
  #define ECB_INTENSET_ERROR_Max (0x1UL)
  #define ECB_INTENSET_ERROR_Set (0x1UL)
  #define ECB_INTENSET_ERROR_Disabled (0x0UL)
  #define ECB_INTENSET_ERROR_Enabled (0x1UL)


/* ECB_INTENCLR: Disable interrupt */
  #define ECB_INTENCLR_ResetValue (0x00000000UL)

/* END @Bit 0 : Write '1' to disable interrupt for event END */
  #define ECB_INTENCLR_END_Pos (0UL)
  #define ECB_INTENCLR_END_Msk (0x1UL << ECB_INTENCLR_END_Pos)
  #define ECB_INTENCLR_END_Min (0x0UL)
  #define ECB_INTENCLR_END_Max (0x1UL)
  #define ECB_INTENCLR_END_Clear (0x1UL)
  #define ECB_INTENCLR_END_Disabled (0x0UL)
  #define ECB_INTENCLR_END_Enabled (0x1UL)

/* ERROR @Bit 1 : Write '1' to disable interrupt for event ERROR */
  #define ECB_INTENCLR_ERROR_Pos (1UL)
  #define ECB_INTENCLR_ERROR_Msk (0x1UL << ECB_INTENCLR_ERROR_Pos)
  #define ECB_INTENCLR_ERROR_Min (0x0UL)
  #define ECB_INTENCLR_ERROR_Max (0x1UL)
  #define ECB_INTENCLR_ERROR_Clear (0x1UL)
  #define ECB_INTENCLR_ERROR_Disabled (0x0UL)
  #define ECB_INTENCLR_ERROR_Enabled (0x1UL)


/* ECB_ERRORSTATUS: Error status */
  #define ECB_ERRORSTATUS_ResetValue (0x00000000UL)

/* ERRORSTATUS @Bits 0..2 : Error status when the ERROR event is generated */
  #define ECB_ERRORSTATUS_ERRORSTATUS_Pos (0UL)
  #define ECB_ERRORSTATUS_ERRORSTATUS_Msk (0x7UL << ECB_ERRORSTATUS_ERRORSTATUS_Pos)
  #define ECB_ERRORSTATUS_ERRORSTATUS_Min (0x0UL)
  #define ECB_ERRORSTATUS_ERRORSTATUS_Max (0x4UL)
  #define ECB_ERRORSTATUS_ERRORSTATUS_NoError (0x0UL)
  #define ECB_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd (0x1UL)
  #define ECB_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd (0x2UL)
  #define ECB_ERRORSTATUS_ERRORSTATUS_EncryptionTooSlow (0x3UL) /*!< Encryption aborted due to higher priority peripheral
                                                                     requesting or using the AES module.*/
  #define ECB_ERRORSTATUS_ERRORSTATUS_Aborted (0x3UL) /*!< Encryption aborted due to higher priority peripheral requesting or
                                                           using the AES module.*/
  #define ECB_ERRORSTATUS_ERRORSTATUS_DmaError (0x4UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            EGU                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct EGU ======================================================== */
/**
  * @brief Event generator unit
  */
  typedef struct {
    __OM uint32_t TASKS_TRIGGER[16];                 /*!< (@ 0x00000000) Trigger n for triggering the corresponding TRIGGERED[n]
                                                                         event*/
    __IM uint32_t RESERVED[16];
    __IOM uint32_t SUBSCRIBE_TRIGGER[16];
    __IM uint32_t RESERVED1[16];
    __IOM uint32_t EVENTS_TRIGGERED[16];             /*!< (@ 0x00000100) Event number n generated by triggering the
                                                                         corresponding TRIGGER[n] task*/
    __IM uint32_t RESERVED2[16];
    __IOM uint32_t PUBLISH_TRIGGERED[16];
    __IM uint32_t RESERVED3[80];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
  } NRF_EGU_Type;

/* EGU_TASKS_TRIGGER: Trigger n for triggering the corresponding TRIGGERED[n] event */
  #define EGU_TASKS_TRIGGER_MaxCount (16UL)
  #define EGU_TASKS_TRIGGER_MaxIndex (15UL)
  #define EGU_TASKS_TRIGGER_MinIndex (0UL)
  #define EGU_TASKS_TRIGGER_ResetValue (0x00000000UL)

/* TASKS_TRIGGER @Bit 0 : Trigger n for triggering the corresponding TRIGGERED[n] event */
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Pos (0UL)
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Msk (0x1UL << EGU_TASKS_TRIGGER_TASKS_TRIGGER_Pos) /*!< Bit mask of TASKS_TRIGGER
                                                                            field.*/
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Min (0x1UL)
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Max (0x1UL)
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Trigger (0x1UL)


/* EGU_SUBSCRIBE_TRIGGER: Subscribe configuration for task TRIGGER[n] */
  #define EGU_SUBSCRIBE_TRIGGER_MaxCount (16UL)
  #define EGU_SUBSCRIBE_TRIGGER_MaxIndex (15UL)
  #define EGU_SUBSCRIBE_TRIGGER_MinIndex (0UL)
  #define EGU_SUBSCRIBE_TRIGGER_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task TRIGGER[n] will subscribe to */
  #define EGU_SUBSCRIBE_TRIGGER_CHIDX_Pos (0UL)
  #define EGU_SUBSCRIBE_TRIGGER_CHIDX_Msk (0xFFUL << EGU_SUBSCRIBE_TRIGGER_CHIDX_Pos)
  #define EGU_SUBSCRIBE_TRIGGER_CHIDX_Min (0x00UL)
  #define EGU_SUBSCRIBE_TRIGGER_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define EGU_SUBSCRIBE_TRIGGER_EN_Pos (31UL)
  #define EGU_SUBSCRIBE_TRIGGER_EN_Msk (0x1UL << EGU_SUBSCRIBE_TRIGGER_EN_Pos)
  #define EGU_SUBSCRIBE_TRIGGER_EN_Min (0x0UL)
  #define EGU_SUBSCRIBE_TRIGGER_EN_Max (0x1UL)
  #define EGU_SUBSCRIBE_TRIGGER_EN_Disabled (0x0UL)
  #define EGU_SUBSCRIBE_TRIGGER_EN_Enabled (0x1UL)


/* EGU_EVENTS_TRIGGERED: Event number n generated by triggering the corresponding TRIGGER[n] task */
  #define EGU_EVENTS_TRIGGERED_MaxCount (16UL)
  #define EGU_EVENTS_TRIGGERED_MaxIndex (15UL)
  #define EGU_EVENTS_TRIGGERED_MinIndex (0UL)
  #define EGU_EVENTS_TRIGGERED_ResetValue (0x00000000UL)

/* EVENTS_TRIGGERED @Bit 0 : Event number n generated by triggering the corresponding TRIGGER[n] task */
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos (0UL)
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Msk (0x1UL << EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos) /*!< Bit mask of
                                                                            EVENTS_TRIGGERED field.*/
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Min (0x0UL)
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Max (0x1UL)
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_NotGenerated (0x0UL)
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Generated (0x1UL)


/* EGU_PUBLISH_TRIGGERED: Publish configuration for event TRIGGERED[n] */
  #define EGU_PUBLISH_TRIGGERED_MaxCount (16UL)
  #define EGU_PUBLISH_TRIGGERED_MaxIndex (15UL)
  #define EGU_PUBLISH_TRIGGERED_MinIndex (0UL)
  #define EGU_PUBLISH_TRIGGERED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event TRIGGERED[n] will publish to */
  #define EGU_PUBLISH_TRIGGERED_CHIDX_Pos (0UL)
  #define EGU_PUBLISH_TRIGGERED_CHIDX_Msk (0xFFUL << EGU_PUBLISH_TRIGGERED_CHIDX_Pos)
  #define EGU_PUBLISH_TRIGGERED_CHIDX_Min (0x00UL)
  #define EGU_PUBLISH_TRIGGERED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define EGU_PUBLISH_TRIGGERED_EN_Pos (31UL)
  #define EGU_PUBLISH_TRIGGERED_EN_Msk (0x1UL << EGU_PUBLISH_TRIGGERED_EN_Pos)
  #define EGU_PUBLISH_TRIGGERED_EN_Min (0x0UL)
  #define EGU_PUBLISH_TRIGGERED_EN_Max (0x1UL)
  #define EGU_PUBLISH_TRIGGERED_EN_Disabled (0x0UL)
  #define EGU_PUBLISH_TRIGGERED_EN_Enabled (0x1UL)


/* EGU_INTEN: Enable or disable interrupt */
  #define EGU_INTEN_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Enable or disable interrupt for event TRIGGERED[0] */
  #define EGU_INTEN_TRIGGERED0_Pos (0UL)
  #define EGU_INTEN_TRIGGERED0_Msk (0x1UL << EGU_INTEN_TRIGGERED0_Pos)
  #define EGU_INTEN_TRIGGERED0_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED0_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED0_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Enable or disable interrupt for event TRIGGERED[1] */
  #define EGU_INTEN_TRIGGERED1_Pos (1UL)
  #define EGU_INTEN_TRIGGERED1_Msk (0x1UL << EGU_INTEN_TRIGGERED1_Pos)
  #define EGU_INTEN_TRIGGERED1_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED1_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED1_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Enable or disable interrupt for event TRIGGERED[2] */
  #define EGU_INTEN_TRIGGERED2_Pos (2UL)
  #define EGU_INTEN_TRIGGERED2_Msk (0x1UL << EGU_INTEN_TRIGGERED2_Pos)
  #define EGU_INTEN_TRIGGERED2_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED2_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED2_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Enable or disable interrupt for event TRIGGERED[3] */
  #define EGU_INTEN_TRIGGERED3_Pos (3UL)
  #define EGU_INTEN_TRIGGERED3_Msk (0x1UL << EGU_INTEN_TRIGGERED3_Pos)
  #define EGU_INTEN_TRIGGERED3_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED3_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED3_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED3_Enabled (0x1UL)

/* TRIGGERED4 @Bit 4 : Enable or disable interrupt for event TRIGGERED[4] */
  #define EGU_INTEN_TRIGGERED4_Pos (4UL)
  #define EGU_INTEN_TRIGGERED4_Msk (0x1UL << EGU_INTEN_TRIGGERED4_Pos)
  #define EGU_INTEN_TRIGGERED4_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED4_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED4_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED4_Enabled (0x1UL)

/* TRIGGERED5 @Bit 5 : Enable or disable interrupt for event TRIGGERED[5] */
  #define EGU_INTEN_TRIGGERED5_Pos (5UL)
  #define EGU_INTEN_TRIGGERED5_Msk (0x1UL << EGU_INTEN_TRIGGERED5_Pos)
  #define EGU_INTEN_TRIGGERED5_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED5_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED5_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED5_Enabled (0x1UL)

/* TRIGGERED6 @Bit 6 : Enable or disable interrupt for event TRIGGERED[6] */
  #define EGU_INTEN_TRIGGERED6_Pos (6UL)
  #define EGU_INTEN_TRIGGERED6_Msk (0x1UL << EGU_INTEN_TRIGGERED6_Pos)
  #define EGU_INTEN_TRIGGERED6_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED6_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED6_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED6_Enabled (0x1UL)

/* TRIGGERED7 @Bit 7 : Enable or disable interrupt for event TRIGGERED[7] */
  #define EGU_INTEN_TRIGGERED7_Pos (7UL)
  #define EGU_INTEN_TRIGGERED7_Msk (0x1UL << EGU_INTEN_TRIGGERED7_Pos)
  #define EGU_INTEN_TRIGGERED7_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED7_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED7_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED7_Enabled (0x1UL)

/* TRIGGERED8 @Bit 8 : Enable or disable interrupt for event TRIGGERED[8] */
  #define EGU_INTEN_TRIGGERED8_Pos (8UL)
  #define EGU_INTEN_TRIGGERED8_Msk (0x1UL << EGU_INTEN_TRIGGERED8_Pos)
  #define EGU_INTEN_TRIGGERED8_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED8_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED8_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED8_Enabled (0x1UL)

/* TRIGGERED9 @Bit 9 : Enable or disable interrupt for event TRIGGERED[9] */
  #define EGU_INTEN_TRIGGERED9_Pos (9UL)
  #define EGU_INTEN_TRIGGERED9_Msk (0x1UL << EGU_INTEN_TRIGGERED9_Pos)
  #define EGU_INTEN_TRIGGERED9_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED9_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED9_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED9_Enabled (0x1UL)

/* TRIGGERED10 @Bit 10 : Enable or disable interrupt for event TRIGGERED[10] */
  #define EGU_INTEN_TRIGGERED10_Pos (10UL)
  #define EGU_INTEN_TRIGGERED10_Msk (0x1UL << EGU_INTEN_TRIGGERED10_Pos)
  #define EGU_INTEN_TRIGGERED10_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED10_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED10_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED10_Enabled (0x1UL)

/* TRIGGERED11 @Bit 11 : Enable or disable interrupt for event TRIGGERED[11] */
  #define EGU_INTEN_TRIGGERED11_Pos (11UL)
  #define EGU_INTEN_TRIGGERED11_Msk (0x1UL << EGU_INTEN_TRIGGERED11_Pos)
  #define EGU_INTEN_TRIGGERED11_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED11_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED11_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED11_Enabled (0x1UL)

/* TRIGGERED12 @Bit 12 : Enable or disable interrupt for event TRIGGERED[12] */
  #define EGU_INTEN_TRIGGERED12_Pos (12UL)
  #define EGU_INTEN_TRIGGERED12_Msk (0x1UL << EGU_INTEN_TRIGGERED12_Pos)
  #define EGU_INTEN_TRIGGERED12_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED12_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED12_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED12_Enabled (0x1UL)

/* TRIGGERED13 @Bit 13 : Enable or disable interrupt for event TRIGGERED[13] */
  #define EGU_INTEN_TRIGGERED13_Pos (13UL)
  #define EGU_INTEN_TRIGGERED13_Msk (0x1UL << EGU_INTEN_TRIGGERED13_Pos)
  #define EGU_INTEN_TRIGGERED13_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED13_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED13_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED13_Enabled (0x1UL)

/* TRIGGERED14 @Bit 14 : Enable or disable interrupt for event TRIGGERED[14] */
  #define EGU_INTEN_TRIGGERED14_Pos (14UL)
  #define EGU_INTEN_TRIGGERED14_Msk (0x1UL << EGU_INTEN_TRIGGERED14_Pos)
  #define EGU_INTEN_TRIGGERED14_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED14_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED14_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED14_Enabled (0x1UL)

/* TRIGGERED15 @Bit 15 : Enable or disable interrupt for event TRIGGERED[15] */
  #define EGU_INTEN_TRIGGERED15_Pos (15UL)
  #define EGU_INTEN_TRIGGERED15_Msk (0x1UL << EGU_INTEN_TRIGGERED15_Pos)
  #define EGU_INTEN_TRIGGERED15_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED15_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED15_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED15_Enabled (0x1UL)


/* EGU_INTENSET: Enable interrupt */
  #define EGU_INTENSET_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to enable interrupt for event TRIGGERED[0] */
  #define EGU_INTENSET_TRIGGERED0_Pos (0UL)
  #define EGU_INTENSET_TRIGGERED0_Msk (0x1UL << EGU_INTENSET_TRIGGERED0_Pos)
  #define EGU_INTENSET_TRIGGERED0_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED0_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED0_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED0_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to enable interrupt for event TRIGGERED[1] */
  #define EGU_INTENSET_TRIGGERED1_Pos (1UL)
  #define EGU_INTENSET_TRIGGERED1_Msk (0x1UL << EGU_INTENSET_TRIGGERED1_Pos)
  #define EGU_INTENSET_TRIGGERED1_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED1_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED1_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED1_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to enable interrupt for event TRIGGERED[2] */
  #define EGU_INTENSET_TRIGGERED2_Pos (2UL)
  #define EGU_INTENSET_TRIGGERED2_Msk (0x1UL << EGU_INTENSET_TRIGGERED2_Pos)
  #define EGU_INTENSET_TRIGGERED2_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED2_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED2_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED2_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to enable interrupt for event TRIGGERED[3] */
  #define EGU_INTENSET_TRIGGERED3_Pos (3UL)
  #define EGU_INTENSET_TRIGGERED3_Msk (0x1UL << EGU_INTENSET_TRIGGERED3_Pos)
  #define EGU_INTENSET_TRIGGERED3_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED3_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED3_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED3_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED3_Enabled (0x1UL)

/* TRIGGERED4 @Bit 4 : Write '1' to enable interrupt for event TRIGGERED[4] */
  #define EGU_INTENSET_TRIGGERED4_Pos (4UL)
  #define EGU_INTENSET_TRIGGERED4_Msk (0x1UL << EGU_INTENSET_TRIGGERED4_Pos)
  #define EGU_INTENSET_TRIGGERED4_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED4_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED4_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED4_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED4_Enabled (0x1UL)

/* TRIGGERED5 @Bit 5 : Write '1' to enable interrupt for event TRIGGERED[5] */
  #define EGU_INTENSET_TRIGGERED5_Pos (5UL)
  #define EGU_INTENSET_TRIGGERED5_Msk (0x1UL << EGU_INTENSET_TRIGGERED5_Pos)
  #define EGU_INTENSET_TRIGGERED5_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED5_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED5_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED5_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED5_Enabled (0x1UL)

/* TRIGGERED6 @Bit 6 : Write '1' to enable interrupt for event TRIGGERED[6] */
  #define EGU_INTENSET_TRIGGERED6_Pos (6UL)
  #define EGU_INTENSET_TRIGGERED6_Msk (0x1UL << EGU_INTENSET_TRIGGERED6_Pos)
  #define EGU_INTENSET_TRIGGERED6_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED6_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED6_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED6_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED6_Enabled (0x1UL)

/* TRIGGERED7 @Bit 7 : Write '1' to enable interrupt for event TRIGGERED[7] */
  #define EGU_INTENSET_TRIGGERED7_Pos (7UL)
  #define EGU_INTENSET_TRIGGERED7_Msk (0x1UL << EGU_INTENSET_TRIGGERED7_Pos)
  #define EGU_INTENSET_TRIGGERED7_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED7_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED7_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED7_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED7_Enabled (0x1UL)

/* TRIGGERED8 @Bit 8 : Write '1' to enable interrupt for event TRIGGERED[8] */
  #define EGU_INTENSET_TRIGGERED8_Pos (8UL)
  #define EGU_INTENSET_TRIGGERED8_Msk (0x1UL << EGU_INTENSET_TRIGGERED8_Pos)
  #define EGU_INTENSET_TRIGGERED8_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED8_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED8_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED8_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED8_Enabled (0x1UL)

/* TRIGGERED9 @Bit 9 : Write '1' to enable interrupt for event TRIGGERED[9] */
  #define EGU_INTENSET_TRIGGERED9_Pos (9UL)
  #define EGU_INTENSET_TRIGGERED9_Msk (0x1UL << EGU_INTENSET_TRIGGERED9_Pos)
  #define EGU_INTENSET_TRIGGERED9_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED9_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED9_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED9_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED9_Enabled (0x1UL)

/* TRIGGERED10 @Bit 10 : Write '1' to enable interrupt for event TRIGGERED[10] */
  #define EGU_INTENSET_TRIGGERED10_Pos (10UL)
  #define EGU_INTENSET_TRIGGERED10_Msk (0x1UL << EGU_INTENSET_TRIGGERED10_Pos)
  #define EGU_INTENSET_TRIGGERED10_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED10_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED10_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED10_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED10_Enabled (0x1UL)

/* TRIGGERED11 @Bit 11 : Write '1' to enable interrupt for event TRIGGERED[11] */
  #define EGU_INTENSET_TRIGGERED11_Pos (11UL)
  #define EGU_INTENSET_TRIGGERED11_Msk (0x1UL << EGU_INTENSET_TRIGGERED11_Pos)
  #define EGU_INTENSET_TRIGGERED11_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED11_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED11_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED11_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED11_Enabled (0x1UL)

/* TRIGGERED12 @Bit 12 : Write '1' to enable interrupt for event TRIGGERED[12] */
  #define EGU_INTENSET_TRIGGERED12_Pos (12UL)
  #define EGU_INTENSET_TRIGGERED12_Msk (0x1UL << EGU_INTENSET_TRIGGERED12_Pos)
  #define EGU_INTENSET_TRIGGERED12_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED12_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED12_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED12_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED12_Enabled (0x1UL)

/* TRIGGERED13 @Bit 13 : Write '1' to enable interrupt for event TRIGGERED[13] */
  #define EGU_INTENSET_TRIGGERED13_Pos (13UL)
  #define EGU_INTENSET_TRIGGERED13_Msk (0x1UL << EGU_INTENSET_TRIGGERED13_Pos)
  #define EGU_INTENSET_TRIGGERED13_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED13_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED13_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED13_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED13_Enabled (0x1UL)

/* TRIGGERED14 @Bit 14 : Write '1' to enable interrupt for event TRIGGERED[14] */
  #define EGU_INTENSET_TRIGGERED14_Pos (14UL)
  #define EGU_INTENSET_TRIGGERED14_Msk (0x1UL << EGU_INTENSET_TRIGGERED14_Pos)
  #define EGU_INTENSET_TRIGGERED14_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED14_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED14_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED14_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED14_Enabled (0x1UL)

/* TRIGGERED15 @Bit 15 : Write '1' to enable interrupt for event TRIGGERED[15] */
  #define EGU_INTENSET_TRIGGERED15_Pos (15UL)
  #define EGU_INTENSET_TRIGGERED15_Msk (0x1UL << EGU_INTENSET_TRIGGERED15_Pos)
  #define EGU_INTENSET_TRIGGERED15_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED15_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED15_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED15_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED15_Enabled (0x1UL)


/* EGU_INTENCLR: Disable interrupt */
  #define EGU_INTENCLR_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to disable interrupt for event TRIGGERED[0] */
  #define EGU_INTENCLR_TRIGGERED0_Pos (0UL)
  #define EGU_INTENCLR_TRIGGERED0_Msk (0x1UL << EGU_INTENCLR_TRIGGERED0_Pos)
  #define EGU_INTENCLR_TRIGGERED0_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED0_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED0_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED0_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to disable interrupt for event TRIGGERED[1] */
  #define EGU_INTENCLR_TRIGGERED1_Pos (1UL)
  #define EGU_INTENCLR_TRIGGERED1_Msk (0x1UL << EGU_INTENCLR_TRIGGERED1_Pos)
  #define EGU_INTENCLR_TRIGGERED1_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED1_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED1_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED1_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to disable interrupt for event TRIGGERED[2] */
  #define EGU_INTENCLR_TRIGGERED2_Pos (2UL)
  #define EGU_INTENCLR_TRIGGERED2_Msk (0x1UL << EGU_INTENCLR_TRIGGERED2_Pos)
  #define EGU_INTENCLR_TRIGGERED2_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED2_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED2_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED2_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to disable interrupt for event TRIGGERED[3] */
  #define EGU_INTENCLR_TRIGGERED3_Pos (3UL)
  #define EGU_INTENCLR_TRIGGERED3_Msk (0x1UL << EGU_INTENCLR_TRIGGERED3_Pos)
  #define EGU_INTENCLR_TRIGGERED3_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED3_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED3_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED3_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED3_Enabled (0x1UL)

/* TRIGGERED4 @Bit 4 : Write '1' to disable interrupt for event TRIGGERED[4] */
  #define EGU_INTENCLR_TRIGGERED4_Pos (4UL)
  #define EGU_INTENCLR_TRIGGERED4_Msk (0x1UL << EGU_INTENCLR_TRIGGERED4_Pos)
  #define EGU_INTENCLR_TRIGGERED4_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED4_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED4_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED4_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED4_Enabled (0x1UL)

/* TRIGGERED5 @Bit 5 : Write '1' to disable interrupt for event TRIGGERED[5] */
  #define EGU_INTENCLR_TRIGGERED5_Pos (5UL)
  #define EGU_INTENCLR_TRIGGERED5_Msk (0x1UL << EGU_INTENCLR_TRIGGERED5_Pos)
  #define EGU_INTENCLR_TRIGGERED5_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED5_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED5_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED5_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED5_Enabled (0x1UL)

/* TRIGGERED6 @Bit 6 : Write '1' to disable interrupt for event TRIGGERED[6] */
  #define EGU_INTENCLR_TRIGGERED6_Pos (6UL)
  #define EGU_INTENCLR_TRIGGERED6_Msk (0x1UL << EGU_INTENCLR_TRIGGERED6_Pos)
  #define EGU_INTENCLR_TRIGGERED6_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED6_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED6_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED6_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED6_Enabled (0x1UL)

/* TRIGGERED7 @Bit 7 : Write '1' to disable interrupt for event TRIGGERED[7] */
  #define EGU_INTENCLR_TRIGGERED7_Pos (7UL)
  #define EGU_INTENCLR_TRIGGERED7_Msk (0x1UL << EGU_INTENCLR_TRIGGERED7_Pos)
  #define EGU_INTENCLR_TRIGGERED7_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED7_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED7_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED7_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED7_Enabled (0x1UL)

/* TRIGGERED8 @Bit 8 : Write '1' to disable interrupt for event TRIGGERED[8] */
  #define EGU_INTENCLR_TRIGGERED8_Pos (8UL)
  #define EGU_INTENCLR_TRIGGERED8_Msk (0x1UL << EGU_INTENCLR_TRIGGERED8_Pos)
  #define EGU_INTENCLR_TRIGGERED8_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED8_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED8_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED8_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED8_Enabled (0x1UL)

/* TRIGGERED9 @Bit 9 : Write '1' to disable interrupt for event TRIGGERED[9] */
  #define EGU_INTENCLR_TRIGGERED9_Pos (9UL)
  #define EGU_INTENCLR_TRIGGERED9_Msk (0x1UL << EGU_INTENCLR_TRIGGERED9_Pos)
  #define EGU_INTENCLR_TRIGGERED9_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED9_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED9_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED9_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED9_Enabled (0x1UL)

/* TRIGGERED10 @Bit 10 : Write '1' to disable interrupt for event TRIGGERED[10] */
  #define EGU_INTENCLR_TRIGGERED10_Pos (10UL)
  #define EGU_INTENCLR_TRIGGERED10_Msk (0x1UL << EGU_INTENCLR_TRIGGERED10_Pos)
  #define EGU_INTENCLR_TRIGGERED10_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED10_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED10_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED10_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED10_Enabled (0x1UL)

/* TRIGGERED11 @Bit 11 : Write '1' to disable interrupt for event TRIGGERED[11] */
  #define EGU_INTENCLR_TRIGGERED11_Pos (11UL)
  #define EGU_INTENCLR_TRIGGERED11_Msk (0x1UL << EGU_INTENCLR_TRIGGERED11_Pos)
  #define EGU_INTENCLR_TRIGGERED11_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED11_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED11_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED11_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED11_Enabled (0x1UL)

/* TRIGGERED12 @Bit 12 : Write '1' to disable interrupt for event TRIGGERED[12] */
  #define EGU_INTENCLR_TRIGGERED12_Pos (12UL)
  #define EGU_INTENCLR_TRIGGERED12_Msk (0x1UL << EGU_INTENCLR_TRIGGERED12_Pos)
  #define EGU_INTENCLR_TRIGGERED12_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED12_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED12_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED12_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED12_Enabled (0x1UL)

/* TRIGGERED13 @Bit 13 : Write '1' to disable interrupt for event TRIGGERED[13] */
  #define EGU_INTENCLR_TRIGGERED13_Pos (13UL)
  #define EGU_INTENCLR_TRIGGERED13_Msk (0x1UL << EGU_INTENCLR_TRIGGERED13_Pos)
  #define EGU_INTENCLR_TRIGGERED13_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED13_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED13_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED13_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED13_Enabled (0x1UL)

/* TRIGGERED14 @Bit 14 : Write '1' to disable interrupt for event TRIGGERED[14] */
  #define EGU_INTENCLR_TRIGGERED14_Pos (14UL)
  #define EGU_INTENCLR_TRIGGERED14_Msk (0x1UL << EGU_INTENCLR_TRIGGERED14_Pos)
  #define EGU_INTENCLR_TRIGGERED14_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED14_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED14_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED14_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED14_Enabled (0x1UL)

/* TRIGGERED15 @Bit 15 : Write '1' to disable interrupt for event TRIGGERED[15] */
  #define EGU_INTENCLR_TRIGGERED15_Pos (15UL)
  #define EGU_INTENCLR_TRIGGERED15_Msk (0x1UL << EGU_INTENCLR_TRIGGERED15_Pos)
  #define EGU_INTENCLR_TRIGGERED15_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED15_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED15_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED15_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED15_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            ETM                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct ETM ======================================================== */
/**
  * @brief Embedded Trace Macrocell
  */
  typedef struct {
    __IM uint32_t RESERVED;
    __IOM uint32_t TRCPRGCTLR;
    __IOM uint32_t TRCPROCSELR;                      /*!< (@ 0x00000008) Controls which PE to trace. Might ignore writes when
                                                                         the trace unit is enabled or not idle. Before writing
                                                                         to this register, ensure that TRCSTATR.IDLE == 1 so
                                                                         that the trace unit can synchronize with the chosen PE.
                                                                         Implemented if TRCIDR3.NUMPROC is greater than zero.*/
    __IOM uint32_t TRCSTATR;
    __IOM uint32_t TRCCONFIGR;                       /*!< (@ 0x00000010) Controls the tracing options This register must always
                                                                         be programmed as part of trace unit initialization.
                                                                         Might ignore writes when the trace unit is enabled or
                                                                         not idle.*/
    __IM uint32_t RESERVED1[3];
    __IOM uint32_t TRCEVENTCTL0R;                    /*!< (@ 0x00000020) Controls the tracing of arbitrary events. If the
                                                                         selected event occurs a trace element is generated in
                                                                         the trace stream according to the settings in
                                                                         TRCEVENTCTL1R.DATAEN and TRCEVENTCTL1R.INSTEN.*/
    __IOM uint32_t TRCEVENTCTL1R;                    /*!< (@ 0x00000024) Controls the behavior of the events that TRCEVENTCTL0R
                                                                         selects. This register must always be programmed as
                                                                         part of trace unit initialization. Might ignore writes
                                                                         when the trace unit is enabled or not idle.*/
    __IM uint32_t RESERVED2;
    __IOM uint32_t TRCSTALLCTLR;                     /*!< (@ 0x0000002C) Enables trace unit functionality that prevents trace
                                                                         unit buffer overflows. Might ignore writes when the
                                                                         trace unit is enabled or not idle. Must be programmed
                                                                         if TRCIDR3.STALLCTL == 1.*/
    __IOM uint32_t TRCTSCTLR;                        /*!< (@ 0x00000030) Controls the insertion of global timestamps in the
                                                                         trace streams. When the selected event is triggered,
                                                                         the trace unit inserts a global timestamp into the
                                                                         trace streams. Might ignore writes when the trace unit
                                                                         is enabled or not idle. Must be programmed if
                                                                         TRCCONFIGR.TS == 1.*/
    __IOM uint32_t TRCSYNCPR;                        /*!< (@ 0x00000034) Controls how often trace synchronization requests
                                                                         occur. Might ignore writes when the trace unit is
                                                                         enabled or not idle. If writes are permitted then the
                                                                         register must be programmed.*/
    __IOM uint32_t TRCCCCTLR;                        /*!< (@ 0x00000038) Sets the threshold value for cycle counting. Might
                                                                         ignore writes when the trace unit is enabled or not
                                                                         idle. Must be programmed if TRCCONFIGR.CCI==1.*/
    __IOM uint32_t TRCBBCTLR;                        /*!< (@ 0x0000003C) Controls which regions in the memory map are enabled to
                                                                         use branch broadcasting. Might ignore writes when the
                                                                         trace unit is enabled or not idle. Must be programmed
                                                                         if TRCCONFIGR.BB == 1.*/
    __IOM uint32_t TRCTRACEIDR;                      /*!< (@ 0x00000040) Sets the trace ID for instruction trace. If data trace
                                                                         is enabled then it also sets the trace ID for data
                                                                         trace, to (trace ID for instruction trace) + 1. This
                                                                         register must always be programmed as part of trace
                                                                         unit initialization. Might ignore writes when the trace
                                                                         unit is enabled or not idle.*/
    __IOM uint32_t TRCQCTLR;                         /*!< (@ 0x00000044) Controls when Q elements are enabled. Might ignore
                                                                         writes when the trace unit is enabled or not idle. This
                                                                         register must be programmed if it is implemented and
                                                                         TRCCONFIGR.QE is set to any value other than 0b00.*/
    __IM uint32_t RESERVED3[14];
    __IOM uint32_t TRCVICTLR;                        /*!< (@ 0x00000080) Controls instruction trace filtering. Might ignore
                                                                         writes when the trace unit is enabled or not idle. Only
                                                                         returns stable data when TRCSTATR.PMSTABLE == 1. Must
                                                                         be programmed, particularly to set the value of the
                                                                         SSSTATUS bit, which sets the state of the start/stop
                                                                         logic.*/
    __IOM uint32_t TRCVIIECTLR;                      /*!< (@ 0x00000084) ViewInst exclude control. Might ignore writes when the
                                                                         trace unit is enabled or not idle. This register must
                                                                         be programmed when one or more address comparators are
                                                                         implemented.*/
    __IOM uint32_t TRCVISSCTLR;                      /*!< (@ 0x00000088) Use this to set, or read, the single address
                                                                         comparators that control the ViewInst start/stop logic.
                                                                         The start/stop logic is active for an instruction which
                                                                         causes a start and remains active up to and including
                                                                         an instruction which causes a stop, and then the
                                                                         start/stop logic becomes inactive. Might ignore writes
                                                                         when the trace unit is enabled or not idle. If
                                                                         implemented then this register must be programmed.*/
    __IOM uint32_t TRCVIPCSSCTLR;                    /*!< (@ 0x0000008C) Use this to set, or read, which PE comparator inputs
                                                                         can control the ViewInst start/stop logic. Might ignore
                                                                         writes when the trace unit is enabled or not idle. If
                                                                         implemented then this register must be programmed.*/
    __IM uint32_t RESERVED4[4];
    __IOM uint32_t TRCVDCTLR;                        /*!< (@ 0x000000A0) Controls data trace filtering. Might ignore writes when
                                                                         the trace unit is enabled or not idle. This register
                                                                         must be programmed when data tracing is enabled, that
                                                                         is, when either TRCCONFIGR.DA == 1 or TRCCONFIGR.DV ==
                                                                         1.*/
    __IOM uint32_t TRCVDSACCTLR;                     /*!< (@ 0x000000A4) ViewData include / exclude control. Might ignore writes
                                                                         when the trace unit is enabled or not idle. This
                                                                         register must be programmed when one or more address
                                                                         comparators are implemented.*/
    __IOM uint32_t TRCVDARCCTLR;                     /*!< (@ 0x000000A8) ViewData include / exclude control. Might ignore writes
                                                                         when the trace unit is enabled or not idle. This
                                                                         register must be programmed when one or more address
                                                                         comparators are implemented.*/
    __IM uint32_t RESERVED5[21];
    __IOM uint32_t TRCSEQEVR[3];                     /*!< (@ 0x00000100) Moves the sequencer state according to programmed
                                                                         events. Might ignore writes when the trace unit is
                                                                         enabled or not idle. When the sequencer is used, all
                                                                         sequencer state transitions must be programmed with a
                                                                         valid event.*/
    __IM uint32_t RESERVED6[3];
    __IOM uint32_t TRCSEQRSTEVR;                     /*!< (@ 0x00000118) Moves the sequencer to state 0 when a programmed event
                                                                         occurs. Might ignore writes when the trace unit is
                                                                         enabled or not idle. When the sequencer is used, all
                                                                         sequencer state transitions must be programmed with a
                                                                         valid event.*/
    __IOM uint32_t TRCSEQSTR;                        /*!< (@ 0x0000011C) Use this to set, or read, the sequencer state. Might
                                                                         ignore writes when the trace unit is enabled or not
                                                                         idle. Only returns stable data when TRCSTATR.PMSTABLE
                                                                         == 1. When the sequencer is used, all sequencer state
                                                                         transitions must be programmed with a valid event.*/
    __IOM uint32_t TRCEXTINSELR;                     /*!< (@ 0x00000120) Use this to set, or read, which external inputs are
                                                                         resources to the trace unit. Might ignore writes when
                                                                         the trace unit is enabled or not idle. Only returns
                                                                         stable data when TRCSTATR.PMSTABLE == 1. When the
                                                                         sequencer is used, all sequencer state transitions must
                                                                         be programmed with a valid event.*/
    __IM uint32_t RESERVED7[7];
    __IOM uint32_t TRCCNTRLDVR[4];                   /*!< (@ 0x00000140) This sets or returns the reload count value for counter
                                                                         n. Might ignore writes when the trace unit is enabled
                                                                         or not idle.*/
    __IOM uint32_t TRCCNTCTLR[4];                    /*!< (@ 0x00000150) Controls the operation of counter n. Might ignore
                                                                         writes when the trace unit is enabled or not idle.*/
    __IOM uint32_t TRCCNTVR[4];                      /*!< (@ 0x00000160) This sets or returns the value of counter n. The count
                                                                         value is only stable when TRCSTATR.PMSTABLE == 1. If
                                                                         software uses counter n then it must write to this
                                                                         register to set the initial counter value. Might ignore
                                                                         writes when the trace unit is enabled or not idle.*/
    __IM uint32_t RESERVED8[36];
    __IOM uint32_t TRCRSCTLR[32];                    /*!< (@ 0x00000200) Controls the selection of the resources in the trace
                                                                         unit. Might ignore writes when the trace unit is
                                                                         enabled or not idle. If software selects a
                                                                         non-implemented resource then CONSTRAINED UNPREDICTABLE
                                                                         behavior of the resource selector occurs, so the
                                                                         resource selector might fire unexpectedly or might not
                                                                         fire. Reads of the TRCRSCTLRn might return UNKNOWN.*/
    __IOM uint32_t TRCSSCCR0;
    __IM uint32_t RESERVED9[7];
    __IOM uint32_t TRCSSCSR0;                        /*!< (@ 0x000002A0) Indicates the status of the single-shot comparators.
                                                                         TRCSSCSR0 is sensitive toinstruction addresses.*/
    __IM uint32_t RESERVED10[7];
    __IOM uint32_t TRCSSPCICR0;                      /*!< (@ 0x000002C0) Selects the processor comparator inputs for Single-shot
                                                                         control.*/
    __IM uint32_t RESERVED11[19];
    __IOM uint32_t TRCPDCR;
    __IOM uint32_t TRCPDSR;
    __IM uint32_t RESERVED12[755];
    __IOM uint32_t TRCITATBIDR;
    __IM uint32_t RESERVED13[3];
    __IOM uint32_t TRCITIATBINR;
    __IM uint32_t RESERVED14;
    __IOM uint32_t TRCITIATBOUTR;
    __IOM uint32_t TRCITCTRL;                        /*!< (@ 0x00000F00) Enables topology detection or integration testing, by
                                                                         putting ETM-M33 into integration mode.*/
    __IM uint32_t RESERVED15[39];
    __IOM uint32_t TRCCLAIMSET;                      /*!< (@ 0x00000FA0) Sets bits in the claim tag and determines the number of
                                                                         claim tag bits implemented.*/
    __IOM uint32_t TRCCLAIMCLR;                      /*!< (@ 0x00000FA4) Clears bits in the claim tag and determines the current
                                                                         value of the claim tag.*/
    __IM uint32_t RESERVED16[4];
    __IOM uint32_t TRCAUTHSTATUS;                    /*!< (@ 0x00000FB8) Indicates the current level of tracing permitted by the
                                                                         system*/
    __IM uint32_t TRCDEVARCH;                        /*!< (@ 0x00000FBC) The TRCDEVARCH identifies ETM-M33 as an ETMv4.2
                                                                         component*/
    __IM uint32_t RESERVED17[3];
    __IM uint32_t TRCDEVTYPE;
    __IOM uint32_t TRCPIDR[8];
    __IOM uint32_t TRCCIDR[4];
  } NRF_ETM_Type;

/* ETM_TRCPRGCTLR: Enables the trace unit. */
  #define ETM_TRCPRGCTLR_ResetValue (0x00000000UL)

/* EN @Bit 0 : Trace unit enable bit */
  #define ETM_TRCPRGCTLR_EN_Pos (0UL)
  #define ETM_TRCPRGCTLR_EN_Msk (0x1UL << ETM_TRCPRGCTLR_EN_Pos)
  #define ETM_TRCPRGCTLR_EN_Min (0x0UL)
  #define ETM_TRCPRGCTLR_EN_Max (0x1UL)
  #define ETM_TRCPRGCTLR_EN_Disabled (0x0UL)         /*!< The trace unit is disabled. All trace resources are inactive and no
                                                          trace is generated.*/
  #define ETM_TRCPRGCTLR_EN_Enabled (0x1UL)


/* ETM_TRCPROCSELR: Controls which PE to trace. Might ignore writes when the trace unit is enabled or not idle. Before writing
                     to this register, ensure that TRCSTATR.IDLE == 1 so that the trace unit can synchronize with the chosen PE.
                     Implemented if TRCIDR3.NUMPROC is greater than zero. */

  #define ETM_TRCPROCSELR_ResetValue (0x00000000UL)

/* PROCSEL @Bits 0..4 : PE select bits that select the PE to trace. */
  #define ETM_TRCPROCSELR_PROCSEL_Pos (0UL)
  #define ETM_TRCPROCSELR_PROCSEL_Msk (0x1FUL << ETM_TRCPROCSELR_PROCSEL_Pos)


/* ETM_TRCSTATR: Idle status bit */
  #define ETM_TRCSTATR_ResetValue (0x00000000UL)

/* IDLE @Bit 0 : Trace unit enable bit */
  #define ETM_TRCSTATR_IDLE_Pos (0UL)
  #define ETM_TRCSTATR_IDLE_Msk (0x1UL << ETM_TRCSTATR_IDLE_Pos)
  #define ETM_TRCSTATR_IDLE_Min (0x0UL)
  #define ETM_TRCSTATR_IDLE_Max (0x1UL)
  #define ETM_TRCSTATR_IDLE_NotIdle (0x0UL)
  #define ETM_TRCSTATR_IDLE_Idle (0x1UL)

/* PMSTABLE @Bit 1 : Programmers' model stable bit */
  #define ETM_TRCSTATR_PMSTABLE_Pos (1UL)
  #define ETM_TRCSTATR_PMSTABLE_Msk (0x1UL << ETM_TRCSTATR_PMSTABLE_Pos)
  #define ETM_TRCSTATR_PMSTABLE_Min (0x0UL)
  #define ETM_TRCSTATR_PMSTABLE_Max (0x1UL)
  #define ETM_TRCSTATR_PMSTABLE_NotStable (0x0UL)
  #define ETM_TRCSTATR_PMSTABLE_Stable (0x1UL)


/* ETM_TRCCONFIGR: Controls the tracing options This register must always be programmed as part of trace unit initialization.
                    Might ignore writes when the trace unit is enabled or not idle. */

  #define ETM_TRCCONFIGR_ResetValue (0x00000000UL)

/* LOADASP0INST @Bit 1 : Instruction P0 load field. This field controls whether load instructions are traced as P0 instructions.
                         */

  #define ETM_TRCCONFIGR_LOADASP0INST_Pos (1UL)
  #define ETM_TRCCONFIGR_LOADASP0INST_Msk (0x1UL << ETM_TRCCONFIGR_LOADASP0INST_Pos)
  #define ETM_TRCCONFIGR_LOADASP0INST_Min (0x0UL)
  #define ETM_TRCCONFIGR_LOADASP0INST_Max (0x1UL)
  #define ETM_TRCCONFIGR_LOADASP0INST_No (0x0UL)
  #define ETM_TRCCONFIGR_LOADASP0INST_Yes (0x1UL)

/* STOREASP0INST @Bit 2 : Instruction P0 field. This field controls whether store instructions are traced as P0 instructions. */
  #define ETM_TRCCONFIGR_STOREASP0INST_Pos (2UL)
  #define ETM_TRCCONFIGR_STOREASP0INST_Msk (0x1UL << ETM_TRCCONFIGR_STOREASP0INST_Pos)
  #define ETM_TRCCONFIGR_STOREASP0INST_Min (0x0UL)
  #define ETM_TRCCONFIGR_STOREASP0INST_Max (0x1UL)
  #define ETM_TRCCONFIGR_STOREASP0INST_No (0x0UL)
  #define ETM_TRCCONFIGR_STOREASP0INST_Yes (0x1UL)

/* BB @Bit 3 : Branch broadcast mode bit. */
  #define ETM_TRCCONFIGR_BB_Pos (3UL)
  #define ETM_TRCCONFIGR_BB_Msk (0x1UL << ETM_TRCCONFIGR_BB_Pos)
  #define ETM_TRCCONFIGR_BB_Min (0x0UL)
  #define ETM_TRCCONFIGR_BB_Max (0x1UL)
  #define ETM_TRCCONFIGR_BB_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_BB_Enabled (0x1UL)

/* CCI @Bit 4 : Cycle counting instruction trace bit. */
  #define ETM_TRCCONFIGR_CCI_Pos (4UL)
  #define ETM_TRCCONFIGR_CCI_Msk (0x1UL << ETM_TRCCONFIGR_CCI_Pos)
  #define ETM_TRCCONFIGR_CCI_Min (0x0UL)
  #define ETM_TRCCONFIGR_CCI_Max (0x1UL)
  #define ETM_TRCCONFIGR_CCI_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_CCI_Enabled (0x1UL)

/* CID @Bit 6 : Context ID tracing bit. */
  #define ETM_TRCCONFIGR_CID_Pos (6UL)
  #define ETM_TRCCONFIGR_CID_Msk (0x1UL << ETM_TRCCONFIGR_CID_Pos)
  #define ETM_TRCCONFIGR_CID_Min (0x0UL)
  #define ETM_TRCCONFIGR_CID_Max (0x1UL)
  #define ETM_TRCCONFIGR_CID_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_CID_Enabled (0x1UL)

/* VMID @Bit 7 : Virtual context identifier tracing bit. */
  #define ETM_TRCCONFIGR_VMID_Pos (7UL)
  #define ETM_TRCCONFIGR_VMID_Msk (0x1UL << ETM_TRCCONFIGR_VMID_Pos)
  #define ETM_TRCCONFIGR_VMID_Min (0x0UL)
  #define ETM_TRCCONFIGR_VMID_Max (0x1UL)
  #define ETM_TRCCONFIGR_VMID_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_VMID_Enabled (0x1UL)

/* COND @Bits 8..10 : Conditional instruction tracing bit. */
  #define ETM_TRCCONFIGR_COND_Pos (8UL)
  #define ETM_TRCCONFIGR_COND_Msk (0x7UL << ETM_TRCCONFIGR_COND_Pos)
  #define ETM_TRCCONFIGR_COND_Min (0x0UL)
  #define ETM_TRCCONFIGR_COND_Max (0x7UL)
  #define ETM_TRCCONFIGR_COND_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_COND_LoadOnly (0x1UL)
  #define ETM_TRCCONFIGR_COND_StoreOnly (0x2UL)
  #define ETM_TRCCONFIGR_COND_LoadAndStore (0x3UL)
  #define ETM_TRCCONFIGR_COND_All (0x7UL)

/* TS @Bit 11 : Global timestamp tracing bit. */
  #define ETM_TRCCONFIGR_TS_Pos (11UL)
  #define ETM_TRCCONFIGR_TS_Msk (0x1UL << ETM_TRCCONFIGR_TS_Pos)
  #define ETM_TRCCONFIGR_TS_Min (0x0UL)
  #define ETM_TRCCONFIGR_TS_Max (0x1UL)
  #define ETM_TRCCONFIGR_TS_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_TS_Enabled (0x1UL)

/* RS @Bit 12 : Return stack enable bit. */
  #define ETM_TRCCONFIGR_RS_Pos (12UL)
  #define ETM_TRCCONFIGR_RS_Msk (0x1UL << ETM_TRCCONFIGR_RS_Pos)
  #define ETM_TRCCONFIGR_RS_Min (0x0UL)
  #define ETM_TRCCONFIGR_RS_Max (0x1UL)
  #define ETM_TRCCONFIGR_RS_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_RS_Enabled (0x1UL)

/* QE @Bits 13..14 : Q element enable field. */
  #define ETM_TRCCONFIGR_QE_Pos (13UL)
  #define ETM_TRCCONFIGR_QE_Msk (0x3UL << ETM_TRCCONFIGR_QE_Pos)
  #define ETM_TRCCONFIGR_QE_Min (0x0UL)
  #define ETM_TRCCONFIGR_QE_Max (0x3UL)
  #define ETM_TRCCONFIGR_QE_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_QE_OnlyWithoutInstCounts (0x1UL) /*!< Q elements with instruction counts are enabled. Q elements
                                                               without instruction counts are disabled.*/
  #define ETM_TRCCONFIGR_QE_Enabled (0x3UL)

/* VMIDOPT @Bit 15 : Control bit to select the Virtual context identifier value used by the trace unit, both for trace
                     generation and in the Virtual context identifier comparators. */

  #define ETM_TRCCONFIGR_VMIDOPT_Pos (15UL)
  #define ETM_TRCCONFIGR_VMIDOPT_Msk (0x1UL << ETM_TRCCONFIGR_VMIDOPT_Pos)
  #define ETM_TRCCONFIGR_VMIDOPT_Min (0x0UL)
  #define ETM_TRCCONFIGR_VMIDOPT_Max (0x1UL)
  #define ETM_TRCCONFIGR_VMIDOPT_VTTBR_EL2 (0x0UL)   /*!< VTTBR_EL2.VMID is used. If the trace unit supports a Virtual context
                                                          identifier larger than the VTTBR_EL2.VMID, the upper unused bits are
                                                          always zero. If the trace unit supports a Virtual context identifier
                                                          larger than 8 bits and if the VTCR_EL2.VS bit forces use of an 8-bit
                                                          Virtual context identifier, bits [15:8] of the trace unit Virtual
                                                          context identifier are always zero.*/
  #define ETM_TRCCONFIGR_VMIDOPT_CONTEXTIDR_EL2 (0x1UL)

/* DA @Bit 16 : Data address tracing bit. */
  #define ETM_TRCCONFIGR_DA_Pos (16UL)
  #define ETM_TRCCONFIGR_DA_Msk (0x1UL << ETM_TRCCONFIGR_DA_Pos)
  #define ETM_TRCCONFIGR_DA_Min (0x0UL)
  #define ETM_TRCCONFIGR_DA_Max (0x1UL)
  #define ETM_TRCCONFIGR_DA_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_DA_Enabled (0x1UL)

/* DV @Bit 17 : Data value tracing bit. */
  #define ETM_TRCCONFIGR_DV_Pos (17UL)
  #define ETM_TRCCONFIGR_DV_Msk (0x1UL << ETM_TRCCONFIGR_DV_Pos)
  #define ETM_TRCCONFIGR_DV_Min (0x0UL)
  #define ETM_TRCCONFIGR_DV_Max (0x1UL)
  #define ETM_TRCCONFIGR_DV_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_DV_Enabled (0x1UL)


/* ETM_TRCEVENTCTL0R: Controls the tracing of arbitrary events. If the selected event occurs a trace element is generated in the
                       trace stream according to the settings in TRCEVENTCTL1R.DATAEN and TRCEVENTCTL1R.INSTEN. */

  #define ETM_TRCEVENTCTL0R_ResetValue (0x00000000UL)

/* EVENT @Bits 0..7 : Select which event should generate trace elements. */
  #define ETM_TRCEVENTCTL0R_EVENT_Pos (0UL)
  #define ETM_TRCEVENTCTL0R_EVENT_Msk (0xFFUL << ETM_TRCEVENTCTL0R_EVENT_Pos)
  #define ETM_TRCEVENTCTL0R_EVENT_Min (0x00UL)
  #define ETM_TRCEVENTCTL0R_EVENT_Max (0xFFUL)


/* ETM_TRCEVENTCTL1R: Controls the behavior of the events that TRCEVENTCTL0R selects. This register must always be programmed as
                       part of trace unit initialization. Might ignore writes when the trace unit is enabled or not idle. */

  #define ETM_TRCEVENTCTL1R_ResetValue (0x00000000UL)

/* INSTEN0 @Bit 0 : Instruction event enable field. */
  #define ETM_TRCEVENTCTL1R_INSTEN0_Pos (0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN0_Msk (0x1UL << ETM_TRCEVENTCTL1R_INSTEN0_Pos)
  #define ETM_TRCEVENTCTL1R_INSTEN0_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN0_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_INSTEN0_Disabled (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN0_Enabled (0x1UL)  /*!< The trace unit generates an Event element for event 0, in the
                                                          instruction trace stream.*/

/* INSTEN1 @Bit 1 : Instruction event enable field. */
  #define ETM_TRCEVENTCTL1R_INSTEN1_Pos (1UL)
  #define ETM_TRCEVENTCTL1R_INSTEN1_Msk (0x1UL << ETM_TRCEVENTCTL1R_INSTEN1_Pos)
  #define ETM_TRCEVENTCTL1R_INSTEN1_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN1_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_INSTEN1_Disabled (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN1_Enabled (0x1UL)  /*!< The trace unit generates an Event element for event 1, in the
                                                          instruction trace stream.*/

/* INSTEN2 @Bit 2 : Instruction event enable field. */
  #define ETM_TRCEVENTCTL1R_INSTEN2_Pos (2UL)
  #define ETM_TRCEVENTCTL1R_INSTEN2_Msk (0x1UL << ETM_TRCEVENTCTL1R_INSTEN2_Pos)
  #define ETM_TRCEVENTCTL1R_INSTEN2_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN2_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_INSTEN2_Disabled (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN2_Enabled (0x1UL)  /*!< The trace unit generates an Event element for event 2, in the
                                                          instruction trace stream.*/

/* INSTEN3 @Bit 3 : Instruction event enable field. */
  #define ETM_TRCEVENTCTL1R_INSTEN3_Pos (3UL)
  #define ETM_TRCEVENTCTL1R_INSTEN3_Msk (0x1UL << ETM_TRCEVENTCTL1R_INSTEN3_Pos)
  #define ETM_TRCEVENTCTL1R_INSTEN3_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN3_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_INSTEN3_Disabled (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN3_Enabled (0x1UL)  /*!< The trace unit generates an Event element for event 3, in the
                                                          instruction trace stream.*/

/* DATAEN @Bit 4 : Data event enable bit. */
  #define ETM_TRCEVENTCTL1R_DATAEN_Pos (4UL)
  #define ETM_TRCEVENTCTL1R_DATAEN_Msk (0x1UL << ETM_TRCEVENTCTL1R_DATAEN_Pos)
  #define ETM_TRCEVENTCTL1R_DATAEN_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_DATAEN_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_DATAEN_Disabled (0x0UL)
  #define ETM_TRCEVENTCTL1R_DATAEN_Enabled (0x1UL)   /*!< The trace unit generates an Event element in the data trace stream if
                                                          event 0 occurs.*/

/* ATB @Bit 11 : AMBA Trace Bus (ATB) trigger enable bit. */
  #define ETM_TRCEVENTCTL1R_ATB_Pos (11UL)
  #define ETM_TRCEVENTCTL1R_ATB_Msk (0x1UL << ETM_TRCEVENTCTL1R_ATB_Pos)
  #define ETM_TRCEVENTCTL1R_ATB_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_ATB_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_ATB_Disabled (0x0UL)
  #define ETM_TRCEVENTCTL1R_ATB_Enabled (0x1UL)      /*!< ATB trigger is enabled. If a CoreSight ATB interface is implemented
                                                          then when event 0 occurs the trace unit generates an ATB event.*/

/* LPOVERRIDE @Bit 12 : Low-power state behavior override bit. Controls how a trace unit behaves in low-power state. */
  #define ETM_TRCEVENTCTL1R_LPOVERRIDE_Pos (12UL)
  #define ETM_TRCEVENTCTL1R_LPOVERRIDE_Msk (0x1UL << ETM_TRCEVENTCTL1R_LPOVERRIDE_Pos)
  #define ETM_TRCEVENTCTL1R_LPOVERRIDE_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_LPOVERRIDE_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_LPOVERRIDE_Disabled (0x0UL) /*!< Trace unit low-power state behavior is not affected. That is, the
                                                             trace unit is enabled to enter low-power state.*/
  #define ETM_TRCEVENTCTL1R_LPOVERRIDE_Enabled (0x1UL) /*!< Trace unit low-power state behavior is overridden. That is, entry to
                                                            a low-power state does not affect the trace unit resources or trace
                                                            generation.*/


/* ETM_TRCSTALLCTLR: Enables trace unit functionality that prevents trace unit buffer overflows. Might ignore writes when the
                      trace unit is enabled or not idle. Must be programmed if TRCIDR3.STALLCTL == 1. */

  #define ETM_TRCSTALLCTLR_ResetValue (0x00000000UL)

/* LEVEL @Bits 0..3 : Threshold level field. If LEVEL is nonzero then a trace unit might suppress the generation of: Global
                      timestamps in the instruction trace stream and the data trace stream. Cycle counting in the instruction
                      trace stream, although the cumulative cycle count remains correct. */

  #define ETM_TRCSTALLCTLR_LEVEL_Pos (0UL)
  #define ETM_TRCSTALLCTLR_LEVEL_Msk (0xFUL << ETM_TRCSTALLCTLR_LEVEL_Pos)
  #define ETM_TRCSTALLCTLR_LEVEL_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_LEVEL_Max (0xFUL)

/* ISTALL @Bit 8 : Instruction stall bit. Controls if a trace unit can stall the PE when the instruction trace buffer space is
                   less than LEVEL. */

  #define ETM_TRCSTALLCTLR_ISTALL_Pos (8UL)
  #define ETM_TRCSTALLCTLR_ISTALL_Msk (0x1UL << ETM_TRCSTALLCTLR_ISTALL_Pos)
  #define ETM_TRCSTALLCTLR_ISTALL_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_ISTALL_Max (0x1UL)
  #define ETM_TRCSTALLCTLR_ISTALL_Disabled (0x0UL)
  #define ETM_TRCSTALLCTLR_ISTALL_Enabled (0x1UL)

/* DSTALL @Bit 9 : Data stall bit. Controls if a trace unit can stall the PE when the data trace buffer space is less than
                   LEVEL. */

  #define ETM_TRCSTALLCTLR_DSTALL_Pos (9UL)
  #define ETM_TRCSTALLCTLR_DSTALL_Msk (0x1UL << ETM_TRCSTALLCTLR_DSTALL_Pos)
  #define ETM_TRCSTALLCTLR_DSTALL_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_DSTALL_Max (0x1UL)
  #define ETM_TRCSTALLCTLR_DSTALL_Disabled (0x0UL)
  #define ETM_TRCSTALLCTLR_DSTALL_Enabled (0x1UL)

/* INSTPRIORITY @Bit 10 : Prioritize instruction trace bit. Controls if a trace unit can prioritize instruction trace when the
                          instruction trace buffer space is less than LEVEL. */

  #define ETM_TRCSTALLCTLR_INSTPRIORITY_Pos (10UL)
  #define ETM_TRCSTALLCTLR_INSTPRIORITY_Msk (0x1UL << ETM_TRCSTALLCTLR_INSTPRIORITY_Pos)
  #define ETM_TRCSTALLCTLR_INSTPRIORITY_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_INSTPRIORITY_Max (0x1UL)
  #define ETM_TRCSTALLCTLR_INSTPRIORITY_Disabled (0x0UL)
  #define ETM_TRCSTALLCTLR_INSTPRIORITY_Enabled (0x1UL) /*!< The trace unit can prioritize instruction trace. A trace unit might
                                                             prioritize instruction trace by preventing output of data trace, or
                                                             other means which ensure that the instruction trace has a higher
                                                             priority than the data trace.*/

/* DATADISCARDLOAD @Bit 11 : Data discard field. Controls if a trace unit can discard data trace elements on a load when the
                             data trace buffer space is less than LEVEL. */

  #define ETM_TRCSTALLCTLR_DATADISCARDLOAD_Pos (11UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDLOAD_Msk (0x1UL << ETM_TRCSTALLCTLR_DATADISCARDLOAD_Pos) /*!< Bit mask of DATADISCARDLOAD
                                                                            field.*/
  #define ETM_TRCSTALLCTLR_DATADISCARDLOAD_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDLOAD_Max (0x1UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDLOAD_Disabled (0x0UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDLOAD_Enabled (0x1UL) /*!< The trace unit can discard P1 and P2 elements associated with
                                                                data loads.*/

/* DATADISCARDSTORE @Bit 12 : Data discard field. Controls if a trace unit can discard data trace elements on a store when the
                              data trace buffer space is less than LEVEL. */

  #define ETM_TRCSTALLCTLR_DATADISCARDSTORE_Pos (12UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDSTORE_Msk (0x1UL << ETM_TRCSTALLCTLR_DATADISCARDSTORE_Pos) /*!< Bit mask of
                                                                            DATADISCARDSTORE field.*/
  #define ETM_TRCSTALLCTLR_DATADISCARDSTORE_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDSTORE_Max (0x1UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDSTORE_Disabled (0x0UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDSTORE_Enabled (0x1UL) /*!< The trace unit can discard P1 and P2 elements associated with
                                                                 data stores.*/

/* NOOVERFLOW @Bit 13 : Trace overflow prevention bit. */
  #define ETM_TRCSTALLCTLR_NOOVERFLOW_Pos (13UL)
  #define ETM_TRCSTALLCTLR_NOOVERFLOW_Msk (0x1UL << ETM_TRCSTALLCTLR_NOOVERFLOW_Pos)
  #define ETM_TRCSTALLCTLR_NOOVERFLOW_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_NOOVERFLOW_Max (0x1UL)
  #define ETM_TRCSTALLCTLR_NOOVERFLOW_Disabled (0x0UL)
  #define ETM_TRCSTALLCTLR_NOOVERFLOW_Enabled (0x1UL) /*!< Trace overflow prevention is enabled. This might cause a significant
                                                           performance impact.*/


/* ETM_TRCTSCTLR: Controls the insertion of global timestamps in the trace streams. When the selected event is triggered, the
                   trace unit inserts a global timestamp into the trace streams. Might ignore writes when the trace unit is
                   enabled or not idle. Must be programmed if TRCCONFIGR.TS == 1. */

  #define ETM_TRCTSCTLR_ResetValue (0x00000000UL)

/* EVENT @Bits 0..7 : Select which event should generate time stamps. */
  #define ETM_TRCTSCTLR_EVENT_Pos (0UL)
  #define ETM_TRCTSCTLR_EVENT_Msk (0xFFUL << ETM_TRCTSCTLR_EVENT_Pos)
  #define ETM_TRCTSCTLR_EVENT_Min (0x00UL)
  #define ETM_TRCTSCTLR_EVENT_Max (0xFFUL)


/* ETM_TRCSYNCPR: Controls how often trace synchronization requests occur. Might ignore writes when the trace unit is enabled or
                   not idle. If writes are permitted then the register must be programmed. */

  #define ETM_TRCSYNCPR_ResetValue (0x00000000UL)

/* PERIOD @Bits 0..4 : Controls how many bytes of trace, the sum of instruction and data, that a trace unit can generate before
                       a trace synchronization request occurs. The number of bytes is always a power of two, calculated by
                       2^PERIOD */

  #define ETM_TRCSYNCPR_PERIOD_Pos (0UL)
  #define ETM_TRCSYNCPR_PERIOD_Msk (0x1FUL << ETM_TRCSYNCPR_PERIOD_Pos)
  #define ETM_TRCSYNCPR_PERIOD_Min (0x00UL)
  #define ETM_TRCSYNCPR_PERIOD_Max (0x1FUL)
  #define ETM_TRCSYNCPR_PERIOD_Disabled (0x00UL)     /*!< Trace synchronization requests are disabled. This setting does not
                                                          disable other types of trace synchronization request.*/


/* ETM_TRCCCCTLR: Sets the threshold value for cycle counting. Might ignore writes when the trace unit is enabled or not idle.
                   Must be programmed if TRCCONFIGR.CCI==1. */

  #define ETM_TRCCCCTLR_ResetValue (0x00000000UL)

/* THRESHOLD @Bits 0..11 : Sets the threshold value for instruction trace cycle counting. */
  #define ETM_TRCCCCTLR_THRESHOLD_Pos (0UL)
  #define ETM_TRCCCCTLR_THRESHOLD_Msk (0xFFFUL << ETM_TRCCCCTLR_THRESHOLD_Pos)
  #define ETM_TRCCCCTLR_THRESHOLD_Min (0x000UL)
  #define ETM_TRCCCCTLR_THRESHOLD_Max (0x7FFUL)


/* ETM_TRCBBCTLR: Controls which regions in the memory map are enabled to use branch broadcasting. Might ignore writes when the
                   trace unit is enabled or not idle. Must be programmed if TRCCONFIGR.BB == 1. */

  #define ETM_TRCBBCTLR_ResetValue (0x00000000UL)

/* RANGE0 @Bit 0 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[0] controls the selection of address range
                   comparator pair 0. */

  #define ETM_TRCBBCTLR_RANGE0_Pos (0UL)
  #define ETM_TRCBBCTLR_RANGE0_Msk (0x1UL << ETM_TRCBBCTLR_RANGE0_Pos)
  #define ETM_TRCBBCTLR_RANGE0_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE0_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE0_Disabled (0x0UL)      /*!< The address range that address range comparator pair 0 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE0_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE1 @Bit 1 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[1] controls the selection of address range
                   comparator pair 1. */

  #define ETM_TRCBBCTLR_RANGE1_Pos (1UL)
  #define ETM_TRCBBCTLR_RANGE1_Msk (0x1UL << ETM_TRCBBCTLR_RANGE1_Pos)
  #define ETM_TRCBBCTLR_RANGE1_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE1_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE1_Disabled (0x0UL)      /*!< The address range that address range comparator pair 1 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE1_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE2 @Bit 2 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[2] controls the selection of address range
                   comparator pair 2. */

  #define ETM_TRCBBCTLR_RANGE2_Pos (2UL)
  #define ETM_TRCBBCTLR_RANGE2_Msk (0x1UL << ETM_TRCBBCTLR_RANGE2_Pos)
  #define ETM_TRCBBCTLR_RANGE2_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE2_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE2_Disabled (0x0UL)      /*!< The address range that address range comparator pair 2 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE2_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE3 @Bit 3 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[3] controls the selection of address range
                   comparator pair 3. */

  #define ETM_TRCBBCTLR_RANGE3_Pos (3UL)
  #define ETM_TRCBBCTLR_RANGE3_Msk (0x1UL << ETM_TRCBBCTLR_RANGE3_Pos)
  #define ETM_TRCBBCTLR_RANGE3_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE3_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE3_Disabled (0x0UL)      /*!< The address range that address range comparator pair 3 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE3_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE4 @Bit 4 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[4] controls the selection of address range
                   comparator pair 4. */

  #define ETM_TRCBBCTLR_RANGE4_Pos (4UL)
  #define ETM_TRCBBCTLR_RANGE4_Msk (0x1UL << ETM_TRCBBCTLR_RANGE4_Pos)
  #define ETM_TRCBBCTLR_RANGE4_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE4_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE4_Disabled (0x0UL)      /*!< The address range that address range comparator pair 4 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE4_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE5 @Bit 5 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[5] controls the selection of address range
                   comparator pair 5. */

  #define ETM_TRCBBCTLR_RANGE5_Pos (5UL)
  #define ETM_TRCBBCTLR_RANGE5_Msk (0x1UL << ETM_TRCBBCTLR_RANGE5_Pos)
  #define ETM_TRCBBCTLR_RANGE5_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE5_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE5_Disabled (0x0UL)      /*!< The address range that address range comparator pair 5 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE5_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE6 @Bit 6 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[6] controls the selection of address range
                   comparator pair 6. */

  #define ETM_TRCBBCTLR_RANGE6_Pos (6UL)
  #define ETM_TRCBBCTLR_RANGE6_Msk (0x1UL << ETM_TRCBBCTLR_RANGE6_Pos)
  #define ETM_TRCBBCTLR_RANGE6_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE6_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE6_Disabled (0x0UL)      /*!< The address range that address range comparator pair 6 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE6_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE7 @Bit 7 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[7] controls the selection of address range
                   comparator pair 7. */

  #define ETM_TRCBBCTLR_RANGE7_Pos (7UL)
  #define ETM_TRCBBCTLR_RANGE7_Msk (0x1UL << ETM_TRCBBCTLR_RANGE7_Pos)
  #define ETM_TRCBBCTLR_RANGE7_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE7_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE7_Disabled (0x0UL)      /*!< The address range that address range comparator pair 7 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE7_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/


/* ETM_TRCTRACEIDR: Sets the trace ID for instruction trace. If data trace is enabled then it also sets the trace ID for data
                     trace, to (trace ID for instruction trace) + 1. This register must always be programmed as part of trace
                     unit initialization. Might ignore writes when the trace unit is enabled or not idle. */

  #define ETM_TRCTRACEIDR_ResetValue (0x00000000UL)

/* TRACEID @Bits 0..6 : Trace ID field. Sets the trace ID value for instruction trace. Bit[0] must be zero if data trace is
                        enabled. If data trace is enabled then a trace unit sets the trace ID for data trace, to TRACEID+1. */

  #define ETM_TRCTRACEIDR_TRACEID_Pos (0UL)
  #define ETM_TRCTRACEIDR_TRACEID_Msk (0x7FUL << ETM_TRCTRACEIDR_TRACEID_Pos)


/* ETM_TRCQCTLR: Controls when Q elements are enabled. Might ignore writes when the trace unit is enabled or not idle. This
                  register must be programmed if it is implemented and TRCCONFIGR.QE is set to any value other than 0b00. */

  #define ETM_TRCQCTLR_ResetValue (0x00000000UL)

/* RANGE0 @Bit 0 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE0_Pos (0UL)
  #define ETM_TRCQCTLR_RANGE0_Msk (0x1UL << ETM_TRCQCTLR_RANGE0_Pos)
  #define ETM_TRCQCTLR_RANGE0_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE0_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE0_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE0_Enabled (0x1UL)

/* RANGE1 @Bit 1 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE1_Pos (1UL)
  #define ETM_TRCQCTLR_RANGE1_Msk (0x1UL << ETM_TRCQCTLR_RANGE1_Pos)
  #define ETM_TRCQCTLR_RANGE1_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE1_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE1_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE1_Enabled (0x1UL)

/* RANGE2 @Bit 2 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE2_Pos (2UL)
  #define ETM_TRCQCTLR_RANGE2_Msk (0x1UL << ETM_TRCQCTLR_RANGE2_Pos)
  #define ETM_TRCQCTLR_RANGE2_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE2_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE2_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE2_Enabled (0x1UL)

/* RANGE3 @Bit 3 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE3_Pos (3UL)
  #define ETM_TRCQCTLR_RANGE3_Msk (0x1UL << ETM_TRCQCTLR_RANGE3_Pos)
  #define ETM_TRCQCTLR_RANGE3_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE3_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE3_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE3_Enabled (0x1UL)

/* RANGE4 @Bit 4 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE4_Pos (4UL)
  #define ETM_TRCQCTLR_RANGE4_Msk (0x1UL << ETM_TRCQCTLR_RANGE4_Pos)
  #define ETM_TRCQCTLR_RANGE4_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE4_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE4_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE4_Enabled (0x1UL)

/* RANGE5 @Bit 5 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE5_Pos (5UL)
  #define ETM_TRCQCTLR_RANGE5_Msk (0x1UL << ETM_TRCQCTLR_RANGE5_Pos)
  #define ETM_TRCQCTLR_RANGE5_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE5_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE5_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE5_Enabled (0x1UL)

/* RANGE6 @Bit 6 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE6_Pos (6UL)
  #define ETM_TRCQCTLR_RANGE6_Msk (0x1UL << ETM_TRCQCTLR_RANGE6_Pos)
  #define ETM_TRCQCTLR_RANGE6_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE6_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE6_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE6_Enabled (0x1UL)

/* RANGE7 @Bit 7 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE7_Pos (7UL)
  #define ETM_TRCQCTLR_RANGE7_Msk (0x1UL << ETM_TRCQCTLR_RANGE7_Pos)
  #define ETM_TRCQCTLR_RANGE7_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE7_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE7_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE7_Enabled (0x1UL)

/* MODE @Bit 8 : Selects whether the address range comparators selected by the RANGE field indicate address ranges where the
                 trace unit is permitted to generate Q elements or address ranges where the trace unit is not permitted to
                 generate Q elements: */

  #define ETM_TRCQCTLR_MODE_Pos (8UL)
  #define ETM_TRCQCTLR_MODE_Msk (0x1UL << ETM_TRCQCTLR_MODE_Pos)
  #define ETM_TRCQCTLR_MODE_Min (0x0UL)
  #define ETM_TRCQCTLR_MODE_Max (0x1UL)
  #define ETM_TRCQCTLR_MODE_Exclude (0x0UL)          /*!< Exclude mode. The address range comparators selected by the RANGE
                                                          field indicate address ranges where the trace unit cannot generate Q
                                                          elements. If no ranges are selected, Q elements are permitted across
                                                          the entire memory map.*/
  #define ETM_TRCQCTLR_MODE_Include (0x1UL)          /*!< Include mode. The address range comparators selected by the RANGE
                                                          field indicate address ranges where the trace unit can generate Q
                                                          elements. If all the implemented bits in RANGE are set to 0 then Q
                                                          elements are disabled.*/


/* ETM_TRCVICTLR: Controls instruction trace filtering. Might ignore writes when the trace unit is enabled or not idle. Only
                   returns stable data when TRCSTATR.PMSTABLE == 1. Must be programmed, particularly to set the value of the
                   SSSTATUS bit, which sets the state of the start/stop logic. */

  #define ETM_TRCVICTLR_ResetValue (0x00000000UL)

/* EVENT_SEL @Bits 0..4 : Select which resource number should be filtered. */
  #define ETM_TRCVICTLR_EVENT_SEL_Pos (0UL)
  #define ETM_TRCVICTLR_EVENT_SEL_Msk (0x1FUL << ETM_TRCVICTLR_EVENT_SEL_Pos)
  #define ETM_TRCVICTLR_EVENT_SEL_Min (0x0UL)
  #define ETM_TRCVICTLR_EVENT_SEL_Max (0x1UL)
  #define ETM_TRCVICTLR_EVENT_SEL_Disabled (0x00UL)
  #define ETM_TRCVICTLR_EVENT_SEL_Enabled (0x01UL)

/* SSSTATUS @Bit 9 : When TRCIDR4.NUMACPAIRS > 0 or TRCIDR4.NUMPC > 0, this bit returns the status of the start/stop logic. */
  #define ETM_TRCVICTLR_SSSTATUS_Pos (9UL)
  #define ETM_TRCVICTLR_SSSTATUS_Msk (0x1UL << ETM_TRCVICTLR_SSSTATUS_Pos)
  #define ETM_TRCVICTLR_SSSTATUS_Min (0x0UL)
  #define ETM_TRCVICTLR_SSSTATUS_Max (0x1UL)
  #define ETM_TRCVICTLR_SSSTATUS_Stopped (0x0UL)
  #define ETM_TRCVICTLR_SSSTATUS_Started (0x1UL)

/* TRCRESET @Bit 10 : Controls whether a trace unit must trace a Reset exception. */
  #define ETM_TRCVICTLR_TRCRESET_Pos (10UL)
  #define ETM_TRCVICTLR_TRCRESET_Msk (0x1UL << ETM_TRCVICTLR_TRCRESET_Pos)
  #define ETM_TRCVICTLR_TRCRESET_Min (0x0UL)
  #define ETM_TRCVICTLR_TRCRESET_Max (0x1UL)
  #define ETM_TRCVICTLR_TRCRESET_Disabled (0x0UL)    /*!< The trace unit does not trace a Reset exception unless it traces the
                                                          exception or instruction immediately prior to the Reset exception.*/
  #define ETM_TRCVICTLR_TRCRESET_Enabled (0x1UL)

/* TRCERR @Bit 11 : When TRCIDR3.TRCERR==1, this bit controls whether a trace unit must trace a System error exception. */
  #define ETM_TRCVICTLR_TRCERR_Pos (11UL)
  #define ETM_TRCVICTLR_TRCERR_Msk (0x1UL << ETM_TRCVICTLR_TRCERR_Pos)
  #define ETM_TRCVICTLR_TRCERR_Min (0x0UL)
  #define ETM_TRCVICTLR_TRCERR_Max (0x1UL)
  #define ETM_TRCVICTLR_TRCERR_Disabled (0x0UL)      /*!< The trace unit does not trace a System error exception unless it
                                                          traces the exception or instruction immediately prior to the System
                                                          error exception.*/
  #define ETM_TRCVICTLR_TRCERR_Enabled (0x1UL)       /*!< The trace unit always traces a System error exception, regardless of
                                                          the value of ViewInst.*/

/* EXLEVEL0_S @Bit 16 : In Secure state, each bit controls whether instruction tracing is enabled for the corresponding
                        Exception level 0. */

  #define ETM_TRCVICTLR_EXLEVEL0_S_Pos (16UL)
  #define ETM_TRCVICTLR_EXLEVEL0_S_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL0_S_Pos)
  #define ETM_TRCVICTLR_EXLEVEL0_S_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL0_S_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL0_S_Disabled (0x1UL)  /*!< The trace unit does not generate instruction trace, in Secure state,
                                                          for Exception level 0.*/
  #define ETM_TRCVICTLR_EXLEVEL0_S_Enabled (0x0UL)   /*!< The trace unit generates instruction trace, in Secure state, for
                                                          Exception level 0.*/

/* EXLEVEL1_S @Bit 17 : In Secure state, each bit controls whether instruction tracing is enabled for the corresponding
                        Exception level 1. */

  #define ETM_TRCVICTLR_EXLEVEL1_S_Pos (17UL)
  #define ETM_TRCVICTLR_EXLEVEL1_S_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL1_S_Pos)
  #define ETM_TRCVICTLR_EXLEVEL1_S_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL1_S_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL1_S_Disabled (0x1UL)  /*!< The trace unit does not generate instruction trace, in Secure state,
                                                          for Exception level 1.*/
  #define ETM_TRCVICTLR_EXLEVEL1_S_Enabled (0x0UL)   /*!< The trace unit generates instruction trace, in Secure state, for
                                                          Exception level 1.*/

/* EXLEVEL2_S @Bit 18 : In Secure state, each bit controls whether instruction tracing is enabled for the corresponding
                        Exception level 2. */

  #define ETM_TRCVICTLR_EXLEVEL2_S_Pos (18UL)
  #define ETM_TRCVICTLR_EXLEVEL2_S_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL2_S_Pos)
  #define ETM_TRCVICTLR_EXLEVEL2_S_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL2_S_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL2_S_Disabled (0x1UL)  /*!< The trace unit does not generate instruction trace, in Secure state,
                                                          for Exception level 2.*/
  #define ETM_TRCVICTLR_EXLEVEL2_S_Enabled (0x0UL)   /*!< The trace unit generates instruction trace, in Secure state, for
                                                          Exception level 2.*/

/* EXLEVEL3_S @Bit 19 : In Secure state, each bit controls whether instruction tracing is enabled for the corresponding
                        Exception level 3. */

  #define ETM_TRCVICTLR_EXLEVEL3_S_Pos (19UL)
  #define ETM_TRCVICTLR_EXLEVEL3_S_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL3_S_Pos)
  #define ETM_TRCVICTLR_EXLEVEL3_S_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL3_S_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL3_S_Disabled (0x1UL)  /*!< The trace unit does not generate instruction trace, in Secure state,
                                                          for Exception level 3.*/
  #define ETM_TRCVICTLR_EXLEVEL3_S_Enabled (0x0UL)   /*!< The trace unit generates instruction trace, in Secure state, for
                                                          Exception level 3.*/

/* EXLEVEL0_NS @Bit 20 : In Non-secure state, each bit controls whether instruction tracing is enabled for the corresponding
                         Exception level 0. */

  #define ETM_TRCVICTLR_EXLEVEL0_NS_Pos (20UL)
  #define ETM_TRCVICTLR_EXLEVEL0_NS_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL0_NS_Pos)
  #define ETM_TRCVICTLR_EXLEVEL0_NS_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL0_NS_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL0_NS_Disabled (0x1UL) /*!< The trace unit does not generate instruction trace, in Non-secure
                                                          state, for Exception level 0.*/
  #define ETM_TRCVICTLR_EXLEVEL0_NS_Enabled (0x0UL)  /*!< The trace unit generates instruction trace, in Non-secure state, for
                                                          Exception level 0.*/

/* EXLEVEL1_NS @Bit 21 : In Non-secure state, each bit controls whether instruction tracing is enabled for the corresponding
                         Exception level 1. */

  #define ETM_TRCVICTLR_EXLEVEL1_NS_Pos (21UL)
  #define ETM_TRCVICTLR_EXLEVEL1_NS_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL1_NS_Pos)
  #define ETM_TRCVICTLR_EXLEVEL1_NS_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL1_NS_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL1_NS_Disabled (0x1UL) /*!< The trace unit does not generate instruction trace, in Non-secure
                                                          state, for Exception level 1.*/
  #define ETM_TRCVICTLR_EXLEVEL1_NS_Enabled (0x0UL)  /*!< The trace unit generates instruction trace, in Non-secure state, for
                                                          Exception level 1.*/

/* EXLEVEL2_NS @Bit 22 : In Non-secure state, each bit controls whether instruction tracing is enabled for the corresponding
                         Exception level 2. */

  #define ETM_TRCVICTLR_EXLEVEL2_NS_Pos (22UL)
  #define ETM_TRCVICTLR_EXLEVEL2_NS_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL2_NS_Pos)
  #define ETM_TRCVICTLR_EXLEVEL2_NS_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL2_NS_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL2_NS_Disabled (0x1UL) /*!< The trace unit does not generate instruction trace, in Non-secure
                                                          state, for Exception level 2.*/
  #define ETM_TRCVICTLR_EXLEVEL2_NS_Enabled (0x0UL)  /*!< The trace unit generates instruction trace, in Non-secure state, for
                                                          Exception level 2.*/

/* EXLEVEL3_NS @Bit 23 : In Non-secure state, each bit controls whether instruction tracing is enabled for the corresponding
                         Exception level 3. */

  #define ETM_TRCVICTLR_EXLEVEL3_NS_Pos (23UL)
  #define ETM_TRCVICTLR_EXLEVEL3_NS_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL3_NS_Pos)
  #define ETM_TRCVICTLR_EXLEVEL3_NS_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL3_NS_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL3_NS_Disabled (0x1UL) /*!< The trace unit does not generate instruction trace, in Non-secure
                                                          state, for Exception level 3.*/
  #define ETM_TRCVICTLR_EXLEVEL3_NS_Enabled (0x0UL)  /*!< The trace unit generates instruction trace, in Non-secure state, for
                                                          Exception level 3.*/


/* ETM_TRCVIIECTLR: ViewInst exclude control. Might ignore writes when the trace unit is enabled or not idle. This register must
                     be programmed when one or more address comparators are implemented. */

  #define ETM_TRCVIIECTLR_ResetValue (0x00000000UL)

/* INCLUDE0 @Bit 0 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE0_Pos (0UL)
  #define ETM_TRCVIIECTLR_INCLUDE0_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE0_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE0_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE0_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE0_Disabled (0x0UL)  /*!< The address range that address range comparator pair 0 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE0_Enabled (0x1UL)   /*!< The address range that address range comparator pair 0 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE1 @Bit 1 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE1_Pos (1UL)
  #define ETM_TRCVIIECTLR_INCLUDE1_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE1_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE1_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE1_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE1_Disabled (0x0UL)  /*!< The address range that address range comparator pair 1 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE1_Enabled (0x1UL)   /*!< The address range that address range comparator pair 1 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE2 @Bit 2 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE2_Pos (2UL)
  #define ETM_TRCVIIECTLR_INCLUDE2_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE2_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE2_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE2_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE2_Disabled (0x0UL)  /*!< The address range that address range comparator pair 2 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE2_Enabled (0x1UL)   /*!< The address range that address range comparator pair 2 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE3 @Bit 3 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE3_Pos (3UL)
  #define ETM_TRCVIIECTLR_INCLUDE3_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE3_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE3_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE3_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE3_Disabled (0x0UL)  /*!< The address range that address range comparator pair 3 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE3_Enabled (0x1UL)   /*!< The address range that address range comparator pair 3 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE4 @Bit 4 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE4_Pos (4UL)
  #define ETM_TRCVIIECTLR_INCLUDE4_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE4_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE4_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE4_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE4_Disabled (0x0UL)  /*!< The address range that address range comparator pair 4 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE4_Enabled (0x1UL)   /*!< The address range that address range comparator pair 4 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE5 @Bit 5 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE5_Pos (5UL)
  #define ETM_TRCVIIECTLR_INCLUDE5_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE5_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE5_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE5_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE5_Disabled (0x0UL)  /*!< The address range that address range comparator pair 5 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE5_Enabled (0x1UL)   /*!< The address range that address range comparator pair 5 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE6 @Bit 6 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE6_Pos (6UL)
  #define ETM_TRCVIIECTLR_INCLUDE6_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE6_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE6_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE6_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE6_Disabled (0x0UL)  /*!< The address range that address range comparator pair 6 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE6_Enabled (0x1UL)   /*!< The address range that address range comparator pair 6 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE7 @Bit 7 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE7_Pos (7UL)
  #define ETM_TRCVIIECTLR_INCLUDE7_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE7_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE7_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE7_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE7_Disabled (0x0UL)  /*!< The address range that address range comparator pair 7 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE7_Enabled (0x1UL)   /*!< The address range that address range comparator pair 7 defines, is
                                                          selected for ViewInst include control.*/

/* EXCLUDE0 @Bit 16 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE0_Pos (16UL)
  #define ETM_TRCVIIECTLR_EXCLUDE0_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE0_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE0_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE0_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE0_Disabled (0x0UL)  /*!< The address range that address range comparator pair 0 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE0_Enabled (0x1UL)   /*!< The address range that address range comparator pair 0 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE1 @Bit 17 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE1_Pos (17UL)
  #define ETM_TRCVIIECTLR_EXCLUDE1_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE1_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE1_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE1_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE1_Disabled (0x0UL)  /*!< The address range that address range comparator pair 1 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE1_Enabled (0x1UL)   /*!< The address range that address range comparator pair 1 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE2 @Bit 18 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE2_Pos (18UL)
  #define ETM_TRCVIIECTLR_EXCLUDE2_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE2_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE2_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE2_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE2_Disabled (0x0UL)  /*!< The address range that address range comparator pair 2 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE2_Enabled (0x1UL)   /*!< The address range that address range comparator pair 2 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE3 @Bit 19 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE3_Pos (19UL)
  #define ETM_TRCVIIECTLR_EXCLUDE3_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE3_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE3_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE3_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE3_Disabled (0x0UL)  /*!< The address range that address range comparator pair 3 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE3_Enabled (0x1UL)   /*!< The address range that address range comparator pair 3 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE4 @Bit 20 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE4_Pos (20UL)
  #define ETM_TRCVIIECTLR_EXCLUDE4_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE4_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE4_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE4_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE4_Disabled (0x0UL)  /*!< The address range that address range comparator pair 4 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE4_Enabled (0x1UL)   /*!< The address range that address range comparator pair 4 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE5 @Bit 21 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE5_Pos (21UL)
  #define ETM_TRCVIIECTLR_EXCLUDE5_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE5_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE5_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE5_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE5_Disabled (0x0UL)  /*!< The address range that address range comparator pair 5 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE5_Enabled (0x1UL)   /*!< The address range that address range comparator pair 5 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE6 @Bit 22 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE6_Pos (22UL)
  #define ETM_TRCVIIECTLR_EXCLUDE6_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE6_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE6_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE6_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE6_Disabled (0x0UL)  /*!< The address range that address range comparator pair 6 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE6_Enabled (0x1UL)   /*!< The address range that address range comparator pair 6 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE7 @Bit 23 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE7_Pos (23UL)
  #define ETM_TRCVIIECTLR_EXCLUDE7_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE7_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE7_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE7_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE7_Disabled (0x0UL)  /*!< The address range that address range comparator pair 7 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE7_Enabled (0x1UL)   /*!< The address range that address range comparator pair 7 defines, is
                                                          selected for ViewInst exclude control.*/


/* ETM_TRCVISSCTLR: Use this to set, or read, the single address comparators that control the ViewInst start/stop logic. The
                     start/stop logic is active for an instruction which causes a start and remains active up to and including
                     an instruction which causes a stop, and then the start/stop logic becomes inactive. Might ignore writes
                     when the trace unit is enabled or not idle. If implemented then this register must be programmed. */

  #define ETM_TRCVISSCTLR_ResetValue (0x00000000UL)

/* START0 @Bit 0 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START0_Pos (0UL)
  #define ETM_TRCVISSCTLR_START0_Msk (0x1UL << ETM_TRCVISSCTLR_START0_Pos)
  #define ETM_TRCVISSCTLR_START0_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START0_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START0_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START0_Enabled (0x1UL)

/* START1 @Bit 1 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START1_Pos (1UL)
  #define ETM_TRCVISSCTLR_START1_Msk (0x1UL << ETM_TRCVISSCTLR_START1_Pos)
  #define ETM_TRCVISSCTLR_START1_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START1_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START1_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START1_Enabled (0x1UL)

/* START2 @Bit 2 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START2_Pos (2UL)
  #define ETM_TRCVISSCTLR_START2_Msk (0x1UL << ETM_TRCVISSCTLR_START2_Pos)
  #define ETM_TRCVISSCTLR_START2_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START2_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START2_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START2_Enabled (0x1UL)

/* START3 @Bit 3 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START3_Pos (3UL)
  #define ETM_TRCVISSCTLR_START3_Msk (0x1UL << ETM_TRCVISSCTLR_START3_Pos)
  #define ETM_TRCVISSCTLR_START3_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START3_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START3_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START3_Enabled (0x1UL)

/* START4 @Bit 4 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START4_Pos (4UL)
  #define ETM_TRCVISSCTLR_START4_Msk (0x1UL << ETM_TRCVISSCTLR_START4_Pos)
  #define ETM_TRCVISSCTLR_START4_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START4_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START4_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START4_Enabled (0x1UL)

/* START5 @Bit 5 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START5_Pos (5UL)
  #define ETM_TRCVISSCTLR_START5_Msk (0x1UL << ETM_TRCVISSCTLR_START5_Pos)
  #define ETM_TRCVISSCTLR_START5_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START5_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START5_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START5_Enabled (0x1UL)

/* START6 @Bit 6 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START6_Pos (6UL)
  #define ETM_TRCVISSCTLR_START6_Msk (0x1UL << ETM_TRCVISSCTLR_START6_Pos)
  #define ETM_TRCVISSCTLR_START6_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START6_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START6_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START6_Enabled (0x1UL)

/* START7 @Bit 7 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START7_Pos (7UL)
  #define ETM_TRCVISSCTLR_START7_Msk (0x1UL << ETM_TRCVISSCTLR_START7_Pos)
  #define ETM_TRCVISSCTLR_START7_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START7_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START7_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START7_Enabled (0x1UL)

/* STOP0 @Bit 16 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP0_Pos (16UL)
  #define ETM_TRCVISSCTLR_STOP0_Msk (0x1UL << ETM_TRCVISSCTLR_STOP0_Pos)
  #define ETM_TRCVISSCTLR_STOP0_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP0_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP0_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP0_Enabled (0x1UL)

/* STOP1 @Bit 17 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP1_Pos (17UL)
  #define ETM_TRCVISSCTLR_STOP1_Msk (0x1UL << ETM_TRCVISSCTLR_STOP1_Pos)
  #define ETM_TRCVISSCTLR_STOP1_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP1_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP1_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP1_Enabled (0x1UL)

/* STOP2 @Bit 18 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP2_Pos (18UL)
  #define ETM_TRCVISSCTLR_STOP2_Msk (0x1UL << ETM_TRCVISSCTLR_STOP2_Pos)
  #define ETM_TRCVISSCTLR_STOP2_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP2_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP2_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP2_Enabled (0x1UL)

/* STOP3 @Bit 19 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP3_Pos (19UL)
  #define ETM_TRCVISSCTLR_STOP3_Msk (0x1UL << ETM_TRCVISSCTLR_STOP3_Pos)
  #define ETM_TRCVISSCTLR_STOP3_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP3_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP3_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP3_Enabled (0x1UL)

/* STOP4 @Bit 20 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP4_Pos (20UL)
  #define ETM_TRCVISSCTLR_STOP4_Msk (0x1UL << ETM_TRCVISSCTLR_STOP4_Pos)
  #define ETM_TRCVISSCTLR_STOP4_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP4_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP4_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP4_Enabled (0x1UL)

/* STOP5 @Bit 21 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP5_Pos (21UL)
  #define ETM_TRCVISSCTLR_STOP5_Msk (0x1UL << ETM_TRCVISSCTLR_STOP5_Pos)
  #define ETM_TRCVISSCTLR_STOP5_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP5_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP5_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP5_Enabled (0x1UL)

/* STOP6 @Bit 22 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP6_Pos (22UL)
  #define ETM_TRCVISSCTLR_STOP6_Msk (0x1UL << ETM_TRCVISSCTLR_STOP6_Pos)
  #define ETM_TRCVISSCTLR_STOP6_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP6_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP6_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP6_Enabled (0x1UL)

/* STOP7 @Bit 23 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP7_Pos (23UL)
  #define ETM_TRCVISSCTLR_STOP7_Msk (0x1UL << ETM_TRCVISSCTLR_STOP7_Pos)
  #define ETM_TRCVISSCTLR_STOP7_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP7_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP7_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP7_Enabled (0x1UL)


/* ETM_TRCVIPCSSCTLR: Use this to set, or read, which PE comparator inputs can control the ViewInst start/stop logic. Might
                       ignore writes when the trace unit is enabled or not idle. If implemented then this register must be
                       programmed. */

  #define ETM_TRCVIPCSSCTLR_ResetValue (0x00000000UL)

/* START0 @Bit 0 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START0_Pos (0UL)
  #define ETM_TRCVIPCSSCTLR_START0_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START0_Pos)
  #define ETM_TRCVIPCSSCTLR_START0_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START0_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START0_Disabled (0x0UL)  /*!< The single PE comparator input 0, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START0_Enabled (0x1UL)

/* START1 @Bit 1 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START1_Pos (1UL)
  #define ETM_TRCVIPCSSCTLR_START1_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START1_Pos)
  #define ETM_TRCVIPCSSCTLR_START1_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START1_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START1_Disabled (0x0UL)  /*!< The single PE comparator input 1, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START1_Enabled (0x1UL)

/* START2 @Bit 2 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START2_Pos (2UL)
  #define ETM_TRCVIPCSSCTLR_START2_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START2_Pos)
  #define ETM_TRCVIPCSSCTLR_START2_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START2_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START2_Disabled (0x0UL)  /*!< The single PE comparator input 2, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START2_Enabled (0x1UL)

/* START3 @Bit 3 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START3_Pos (3UL)
  #define ETM_TRCVIPCSSCTLR_START3_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START3_Pos)
  #define ETM_TRCVIPCSSCTLR_START3_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START3_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START3_Disabled (0x0UL)  /*!< The single PE comparator input 3, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START3_Enabled (0x1UL)

/* START4 @Bit 4 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START4_Pos (4UL)
  #define ETM_TRCVIPCSSCTLR_START4_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START4_Pos)
  #define ETM_TRCVIPCSSCTLR_START4_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START4_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START4_Disabled (0x0UL)  /*!< The single PE comparator input 4, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START4_Enabled (0x1UL)

/* START5 @Bit 5 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START5_Pos (5UL)
  #define ETM_TRCVIPCSSCTLR_START5_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START5_Pos)
  #define ETM_TRCVIPCSSCTLR_START5_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START5_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START5_Disabled (0x0UL)  /*!< The single PE comparator input 5, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START5_Enabled (0x1UL)

/* START6 @Bit 6 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START6_Pos (6UL)
  #define ETM_TRCVIPCSSCTLR_START6_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START6_Pos)
  #define ETM_TRCVIPCSSCTLR_START6_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START6_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START6_Disabled (0x0UL)  /*!< The single PE comparator input 6, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START6_Enabled (0x1UL)

/* START7 @Bit 7 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START7_Pos (7UL)
  #define ETM_TRCVIPCSSCTLR_START7_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START7_Pos)
  #define ETM_TRCVIPCSSCTLR_START7_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START7_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START7_Disabled (0x0UL)  /*!< The single PE comparator input 7, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START7_Enabled (0x1UL)

/* STOP0 @Bit 16 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP0_Pos (16UL)
  #define ETM_TRCVIPCSSCTLR_STOP0_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP0_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP0_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP0_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP0_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP0_Enabled (0x1UL)

/* STOP1 @Bit 17 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP1_Pos (17UL)
  #define ETM_TRCVIPCSSCTLR_STOP1_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP1_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP1_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP1_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP1_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP1_Enabled (0x1UL)

/* STOP2 @Bit 18 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP2_Pos (18UL)
  #define ETM_TRCVIPCSSCTLR_STOP2_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP2_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP2_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP2_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP2_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP2_Enabled (0x1UL)

/* STOP3 @Bit 19 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP3_Pos (19UL)
  #define ETM_TRCVIPCSSCTLR_STOP3_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP3_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP3_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP3_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP3_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP3_Enabled (0x1UL)

/* STOP4 @Bit 20 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP4_Pos (20UL)
  #define ETM_TRCVIPCSSCTLR_STOP4_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP4_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP4_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP4_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP4_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP4_Enabled (0x1UL)

/* STOP5 @Bit 21 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP5_Pos (21UL)
  #define ETM_TRCVIPCSSCTLR_STOP5_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP5_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP5_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP5_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP5_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP5_Enabled (0x1UL)

/* STOP6 @Bit 22 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP6_Pos (22UL)
  #define ETM_TRCVIPCSSCTLR_STOP6_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP6_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP6_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP6_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP6_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP6_Enabled (0x1UL)

/* STOP7 @Bit 23 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP7_Pos (23UL)
  #define ETM_TRCVIPCSSCTLR_STOP7_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP7_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP7_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP7_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP7_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP7_Enabled (0x1UL)


/* ETM_TRCVDCTLR: Controls data trace filtering. Might ignore writes when the trace unit is enabled or not idle. This register
                   must be programmed when data tracing is enabled, that is, when either TRCCONFIGR.DA == 1 or TRCCONFIGR.DV ==
                   1. */

  #define ETM_TRCVDCTLR_ResetValue (0x00000000UL)

/* EVENT0 @Bit 0 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT0_Pos (0UL)
  #define ETM_TRCVDCTLR_EVENT0_Msk (0x1UL << ETM_TRCVDCTLR_EVENT0_Pos)
  #define ETM_TRCVDCTLR_EVENT0_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT0_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT0_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT0_Enabled (0x1UL)

/* EVENT1 @Bit 1 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT1_Pos (1UL)
  #define ETM_TRCVDCTLR_EVENT1_Msk (0x1UL << ETM_TRCVDCTLR_EVENT1_Pos)
  #define ETM_TRCVDCTLR_EVENT1_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT1_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT1_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT1_Enabled (0x1UL)

/* EVENT2 @Bit 2 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT2_Pos (2UL)
  #define ETM_TRCVDCTLR_EVENT2_Msk (0x1UL << ETM_TRCVDCTLR_EVENT2_Pos)
  #define ETM_TRCVDCTLR_EVENT2_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT2_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT2_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT2_Enabled (0x1UL)

/* EVENT3 @Bit 3 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT3_Pos (3UL)
  #define ETM_TRCVDCTLR_EVENT3_Msk (0x1UL << ETM_TRCVDCTLR_EVENT3_Pos)
  #define ETM_TRCVDCTLR_EVENT3_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT3_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT3_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT3_Enabled (0x1UL)

/* EVENT4 @Bit 4 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT4_Pos (4UL)
  #define ETM_TRCVDCTLR_EVENT4_Msk (0x1UL << ETM_TRCVDCTLR_EVENT4_Pos)
  #define ETM_TRCVDCTLR_EVENT4_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT4_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT4_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT4_Enabled (0x1UL)

/* EVENT5 @Bit 5 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT5_Pos (5UL)
  #define ETM_TRCVDCTLR_EVENT5_Msk (0x1UL << ETM_TRCVDCTLR_EVENT5_Pos)
  #define ETM_TRCVDCTLR_EVENT5_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT5_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT5_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT5_Enabled (0x1UL)

/* EVENT6 @Bit 6 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT6_Pos (6UL)
  #define ETM_TRCVDCTLR_EVENT6_Msk (0x1UL << ETM_TRCVDCTLR_EVENT6_Pos)
  #define ETM_TRCVDCTLR_EVENT6_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT6_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT6_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT6_Enabled (0x1UL)

/* EVENT7 @Bit 7 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT7_Pos (7UL)
  #define ETM_TRCVDCTLR_EVENT7_Msk (0x1UL << ETM_TRCVDCTLR_EVENT7_Pos)
  #define ETM_TRCVDCTLR_EVENT7_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT7_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT7_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT7_Enabled (0x1UL)

/* SPREL @Bits 8..9 : Controls whether a trace unit traces data for transfers that are relative to the Stack Pointer (SP). */
  #define ETM_TRCVDCTLR_SPREL_Pos (8UL)
  #define ETM_TRCVDCTLR_SPREL_Msk (0x3UL << ETM_TRCVDCTLR_SPREL_Pos)
  #define ETM_TRCVDCTLR_SPREL_Min (0x0UL)
  #define ETM_TRCVDCTLR_SPREL_Max (0x3UL)
  #define ETM_TRCVDCTLR_SPREL_Enabled (0x0UL)
  #define ETM_TRCVDCTLR_SPREL_DataOnly (0x2UL)       /*!< The trace unit does not trace the address portion of SP-relative
                                                          transfers. If data value tracing is enabled then the trace unit
                                                          generates a P1 data address element.*/
  #define ETM_TRCVDCTLR_SPREL_Disabled (0x3UL)       /*!< The trace unit does not trace the address or value portions of
                                                          SP-relative transfers.*/

/* PCREL @Bit 10 : Controls whether a trace unit traces data for transfers that are relative to the Program Counter (PC). */
  #define ETM_TRCVDCTLR_PCREL_Pos (10UL)
  #define ETM_TRCVDCTLR_PCREL_Msk (0x1UL << ETM_TRCVDCTLR_PCREL_Pos)
  #define ETM_TRCVDCTLR_PCREL_Min (0x0UL)
  #define ETM_TRCVDCTLR_PCREL_Max (0x1UL)
  #define ETM_TRCVDCTLR_PCREL_Enabled (0x0UL)
  #define ETM_TRCVDCTLR_PCREL_Disabled (0x1UL)       /*!< The trace unit does not trace the address or value portions of
                                                          PC-relative transfers.*/

/* TBI @Bit 11 : Controls which information a trace unit populates in bits[63:56] of the data address. */
  #define ETM_TRCVDCTLR_TBI_Pos (11UL)
  #define ETM_TRCVDCTLR_TBI_Msk (0x1UL << ETM_TRCVDCTLR_TBI_Pos)
  #define ETM_TRCVDCTLR_TBI_Min (0x0UL)
  #define ETM_TRCVDCTLR_TBI_Max (0x1UL)
  #define ETM_TRCVDCTLR_TBI_SignExtend (0x0UL)       /*!< The trace unit assigns bits[63:56] to have the same value as bit[55]
                                                          of the data address, that is, it sign-extends the value.*/
  #define ETM_TRCVDCTLR_TBI_Copy (0x1UL)             /*!< The trace unit assigns bits[63:56] to have the same value as
                                                          bits[63:56] of the data address.*/

/* TRCEXDATA @Bit 12 : Controls the tracing of data transfers for exceptions and exception returns on Armv6-M, Armv7-M, and
                       Armv8-M PEs. */

  #define ETM_TRCVDCTLR_TRCEXDATA_Pos (12UL)
  #define ETM_TRCVDCTLR_TRCEXDATA_Msk (0x1UL << ETM_TRCVDCTLR_TRCEXDATA_Pos)
  #define ETM_TRCVDCTLR_TRCEXDATA_Min (0x0UL)
  #define ETM_TRCVDCTLR_TRCEXDATA_Max (0x1UL)
  #define ETM_TRCVDCTLR_TRCEXDATA_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_TRCEXDATA_Enabled (0x1UL)    /*!< Exception and exception return data transfers are traced if the other
                                                          aspects of ViewData indicate that the data transfers must be traced.*/


/* ETM_TRCVDSACCTLR: ViewData include / exclude control. Might ignore writes when the trace unit is enabled or not idle. This
                      register must be programmed when one or more address comparators are implemented. */

  #define ETM_TRCVDSACCTLR_ResetValue (0x00000000UL)

/* INCLUDE0 @Bit 0 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE0_Pos (0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE0_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE0_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE0_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE0_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE0_Disabled (0x0UL) /*!< The single address comparator 0, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE0_Enabled (0x1UL)  /*!< The single address comparator 0, is selected for ViewData include
                                                          control.*/

/* INCLUDE1 @Bit 1 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE1_Pos (1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE1_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE1_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE1_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE1_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE1_Disabled (0x0UL) /*!< The single address comparator 1, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE1_Enabled (0x1UL)  /*!< The single address comparator 1, is selected for ViewData include
                                                          control.*/

/* INCLUDE2 @Bit 2 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE2_Pos (2UL)
  #define ETM_TRCVDSACCTLR_INCLUDE2_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE2_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE2_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE2_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE2_Disabled (0x0UL) /*!< The single address comparator 2, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE2_Enabled (0x1UL)  /*!< The single address comparator 2, is selected for ViewData include
                                                          control.*/

/* INCLUDE3 @Bit 3 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE3_Pos (3UL)
  #define ETM_TRCVDSACCTLR_INCLUDE3_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE3_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE3_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE3_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE3_Disabled (0x0UL) /*!< The single address comparator 3, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE3_Enabled (0x1UL)  /*!< The single address comparator 3, is selected for ViewData include
                                                          control.*/

/* INCLUDE4 @Bit 4 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE4_Pos (4UL)
  #define ETM_TRCVDSACCTLR_INCLUDE4_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE4_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE4_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE4_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE4_Disabled (0x0UL) /*!< The single address comparator 4, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE4_Enabled (0x1UL)  /*!< The single address comparator 4, is selected for ViewData include
                                                          control.*/

/* INCLUDE5 @Bit 5 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE5_Pos (5UL)
  #define ETM_TRCVDSACCTLR_INCLUDE5_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE5_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE5_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE5_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE5_Disabled (0x0UL) /*!< The single address comparator 5, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE5_Enabled (0x1UL)  /*!< The single address comparator 5, is selected for ViewData include
                                                          control.*/

/* INCLUDE6 @Bit 6 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE6_Pos (6UL)
  #define ETM_TRCVDSACCTLR_INCLUDE6_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE6_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE6_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE6_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE6_Disabled (0x0UL) /*!< The single address comparator 6, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE6_Enabled (0x1UL)  /*!< The single address comparator 6, is selected for ViewData include
                                                          control.*/

/* INCLUDE7 @Bit 7 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE7_Pos (7UL)
  #define ETM_TRCVDSACCTLR_INCLUDE7_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE7_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE7_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE7_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE7_Disabled (0x0UL) /*!< The single address comparator 7, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE7_Enabled (0x1UL)  /*!< The single address comparator 7, is selected for ViewData include
                                                          control.*/

/* EXCLUDE0 @Bit 16 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE0_Pos (16UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE0_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE0_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE0_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE0_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE0_Disabled (0x0UL) /*!< The single address comparator 0, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE0_Enabled (0x1UL)  /*!< The single address comparator 0, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE1 @Bit 17 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE1_Pos (17UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE1_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE1_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE1_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE1_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE1_Disabled (0x0UL) /*!< The single address comparator 1, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE1_Enabled (0x1UL)  /*!< The single address comparator 1, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE2 @Bit 18 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE2_Pos (18UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE2_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE2_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE2_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE2_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE2_Disabled (0x0UL) /*!< The single address comparator 2, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE2_Enabled (0x1UL)  /*!< The single address comparator 2, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE3 @Bit 19 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE3_Pos (19UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE3_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE3_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE3_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE3_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE3_Disabled (0x0UL) /*!< The single address comparator 3, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE3_Enabled (0x1UL)  /*!< The single address comparator 3, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE4 @Bit 20 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE4_Pos (20UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE4_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE4_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE4_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE4_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE4_Disabled (0x0UL) /*!< The single address comparator 4, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE4_Enabled (0x1UL)  /*!< The single address comparator 4, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE5 @Bit 21 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE5_Pos (21UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE5_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE5_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE5_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE5_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE5_Disabled (0x0UL) /*!< The single address comparator 5, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE5_Enabled (0x1UL)  /*!< The single address comparator 5, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE6 @Bit 22 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE6_Pos (22UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE6_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE6_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE6_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE6_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE6_Disabled (0x0UL) /*!< The single address comparator 6, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE6_Enabled (0x1UL)  /*!< The single address comparator 6, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE7 @Bit 23 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE7_Pos (23UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE7_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE7_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE7_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE7_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE7_Disabled (0x0UL) /*!< The single address comparator 7, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE7_Enabled (0x1UL)  /*!< The single address comparator 7, s selected for ViewData exclude
                                                          control.*/


/* ETM_TRCVDARCCTLR: ViewData include / exclude control. Might ignore writes when the trace unit is enabled or not idle. This
                      register must be programmed when one or more address comparators are implemented. */

  #define ETM_TRCVDARCCTLR_ResetValue (0x00000000UL)

/* INCLUDE0 @Bit 0 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE0_Pos (0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE0_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE0_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE0_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE0_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE0_Disabled (0x0UL) /*!< The address range that address range comparator 0 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE0_Enabled (0x1UL)  /*!< The address range that address range comparator 0 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE1 @Bit 1 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE1_Pos (1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE1_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE1_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE1_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE1_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE1_Disabled (0x0UL) /*!< The address range that address range comparator 1 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE1_Enabled (0x1UL)  /*!< The address range that address range comparator 1 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE2 @Bit 2 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE2_Pos (2UL)
  #define ETM_TRCVDARCCTLR_INCLUDE2_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE2_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE2_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE2_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE2_Disabled (0x0UL) /*!< The address range that address range comparator 2 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE2_Enabled (0x1UL)  /*!< The address range that address range comparator 2 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE3 @Bit 3 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE3_Pos (3UL)
  #define ETM_TRCVDARCCTLR_INCLUDE3_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE3_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE3_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE3_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE3_Disabled (0x0UL) /*!< The address range that address range comparator 3 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE3_Enabled (0x1UL)  /*!< The address range that address range comparator 3 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE4 @Bit 4 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE4_Pos (4UL)
  #define ETM_TRCVDARCCTLR_INCLUDE4_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE4_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE4_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE4_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE4_Disabled (0x0UL) /*!< The address range that address range comparator 4 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE4_Enabled (0x1UL)  /*!< The address range that address range comparator 4 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE5 @Bit 5 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE5_Pos (5UL)
  #define ETM_TRCVDARCCTLR_INCLUDE5_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE5_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE5_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE5_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE5_Disabled (0x0UL) /*!< The address range that address range comparator 5 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE5_Enabled (0x1UL)  /*!< The address range that address range comparator 5 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE6 @Bit 6 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE6_Pos (6UL)
  #define ETM_TRCVDARCCTLR_INCLUDE6_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE6_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE6_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE6_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE6_Disabled (0x0UL) /*!< The address range that address range comparator 6 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE6_Enabled (0x1UL)  /*!< The address range that address range comparator 6 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE7 @Bit 7 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE7_Pos (7UL)
  #define ETM_TRCVDARCCTLR_INCLUDE7_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE7_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE7_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE7_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE7_Disabled (0x0UL) /*!< The address range that address range comparator 7 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE7_Enabled (0x1UL)  /*!< The address range that address range comparator 7 defines, is selected
                                                          for ViewData include control.*/

/* EXCLUDE0 @Bit 16 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE0_Pos (16UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE0_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE0_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE0_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE0_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE0_Disabled (0x0UL) /*!< The address range that address range comparator 0 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE0_Enabled (0x1UL)  /*!< The address range that address range comparator 0 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE1 @Bit 17 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE1_Pos (17UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE1_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE1_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE1_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE1_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE1_Disabled (0x0UL) /*!< The address range that address range comparator 1 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE1_Enabled (0x1UL)  /*!< The address range that address range comparator 1 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE2 @Bit 18 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE2_Pos (18UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE2_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE2_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE2_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE2_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE2_Disabled (0x0UL) /*!< The address range that address range comparator 2 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE2_Enabled (0x1UL)  /*!< The address range that address range comparator 2 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE3 @Bit 19 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE3_Pos (19UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE3_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE3_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE3_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE3_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE3_Disabled (0x0UL) /*!< The address range that address range comparator 3 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE3_Enabled (0x1UL)  /*!< The address range that address range comparator 3 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE4 @Bit 20 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE4_Pos (20UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE4_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE4_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE4_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE4_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE4_Disabled (0x0UL) /*!< The address range that address range comparator 4 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE4_Enabled (0x1UL)  /*!< The address range that address range comparator 4 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE5 @Bit 21 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE5_Pos (21UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE5_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE5_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE5_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE5_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE5_Disabled (0x0UL) /*!< The address range that address range comparator 5 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE5_Enabled (0x1UL)  /*!< The address range that address range comparator 5 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE6 @Bit 22 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE6_Pos (22UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE6_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE6_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE6_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE6_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE6_Disabled (0x0UL) /*!< The address range that address range comparator 6 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE6_Enabled (0x1UL)  /*!< The address range that address range comparator 6 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE7 @Bit 23 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE7_Pos (23UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE7_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE7_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE7_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE7_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE7_Disabled (0x0UL) /*!< The address range that address range comparator 7 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE7_Enabled (0x1UL)  /*!< The address range that address range comparator 7 defines, s selected
                                                          for ViewData exclude control.*/


/* ETM_TRCSEQEVR: Moves the sequencer state according to programmed events. Might ignore writes when the trace unit is enabled
                   or not idle. When the sequencer is used, all sequencer state transitions must be programmed with a valid
                   event. */

  #define ETM_TRCSEQEVR_MaxCount (3UL)
  #define ETM_TRCSEQEVR_MaxIndex (2UL)
  #define ETM_TRCSEQEVR_MinIndex (0UL)
  #define ETM_TRCSEQEVR_ResetValue (0x00000000UL)

/* F0 @Bit 0 : Forward field. */
  #define ETM_TRCSEQEVR_F0_Pos (0UL)
  #define ETM_TRCSEQEVR_F0_Msk (0x1UL << ETM_TRCSEQEVR_F0_Pos)
  #define ETM_TRCSEQEVR_F0_Min (0x0UL)
  #define ETM_TRCSEQEVR_F0_Max (0x1UL)
  #define ETM_TRCSEQEVR_F0_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F0_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F1 @Bit 1 : Forward field. */
  #define ETM_TRCSEQEVR_F1_Pos (1UL)
  #define ETM_TRCSEQEVR_F1_Msk (0x1UL << ETM_TRCSEQEVR_F1_Pos)
  #define ETM_TRCSEQEVR_F1_Min (0x0UL)
  #define ETM_TRCSEQEVR_F1_Max (0x1UL)
  #define ETM_TRCSEQEVR_F1_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F1_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F2 @Bit 2 : Forward field. */
  #define ETM_TRCSEQEVR_F2_Pos (2UL)
  #define ETM_TRCSEQEVR_F2_Msk (0x1UL << ETM_TRCSEQEVR_F2_Pos)
  #define ETM_TRCSEQEVR_F2_Min (0x0UL)
  #define ETM_TRCSEQEVR_F2_Max (0x1UL)
  #define ETM_TRCSEQEVR_F2_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F2_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F3 @Bit 3 : Forward field. */
  #define ETM_TRCSEQEVR_F3_Pos (3UL)
  #define ETM_TRCSEQEVR_F3_Msk (0x1UL << ETM_TRCSEQEVR_F3_Pos)
  #define ETM_TRCSEQEVR_F3_Min (0x0UL)
  #define ETM_TRCSEQEVR_F3_Max (0x1UL)
  #define ETM_TRCSEQEVR_F3_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F3_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F4 @Bit 4 : Forward field. */
  #define ETM_TRCSEQEVR_F4_Pos (4UL)
  #define ETM_TRCSEQEVR_F4_Msk (0x1UL << ETM_TRCSEQEVR_F4_Pos)
  #define ETM_TRCSEQEVR_F4_Min (0x0UL)
  #define ETM_TRCSEQEVR_F4_Max (0x1UL)
  #define ETM_TRCSEQEVR_F4_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F4_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F5 @Bit 5 : Forward field. */
  #define ETM_TRCSEQEVR_F5_Pos (5UL)
  #define ETM_TRCSEQEVR_F5_Msk (0x1UL << ETM_TRCSEQEVR_F5_Pos)
  #define ETM_TRCSEQEVR_F5_Min (0x0UL)
  #define ETM_TRCSEQEVR_F5_Max (0x1UL)
  #define ETM_TRCSEQEVR_F5_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F5_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F6 @Bit 6 : Forward field. */
  #define ETM_TRCSEQEVR_F6_Pos (6UL)
  #define ETM_TRCSEQEVR_F6_Msk (0x1UL << ETM_TRCSEQEVR_F6_Pos)
  #define ETM_TRCSEQEVR_F6_Min (0x0UL)
  #define ETM_TRCSEQEVR_F6_Max (0x1UL)
  #define ETM_TRCSEQEVR_F6_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F6_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F7 @Bit 7 : Forward field. */
  #define ETM_TRCSEQEVR_F7_Pos (7UL)
  #define ETM_TRCSEQEVR_F7_Msk (0x1UL << ETM_TRCSEQEVR_F7_Pos)
  #define ETM_TRCSEQEVR_F7_Min (0x0UL)
  #define ETM_TRCSEQEVR_F7_Max (0x1UL)
  #define ETM_TRCSEQEVR_F7_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F7_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* B0 @Bit 8 : Backward field. */
  #define ETM_TRCSEQEVR_B0_Pos (8UL)
  #define ETM_TRCSEQEVR_B0_Msk (0x1UL << ETM_TRCSEQEVR_B0_Pos)
  #define ETM_TRCSEQEVR_B0_Min (0x0UL)
  #define ETM_TRCSEQEVR_B0_Max (0x1UL)
  #define ETM_TRCSEQEVR_B0_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B0_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B1 @Bit 9 : Backward field. */
  #define ETM_TRCSEQEVR_B1_Pos (9UL)
  #define ETM_TRCSEQEVR_B1_Msk (0x1UL << ETM_TRCSEQEVR_B1_Pos)
  #define ETM_TRCSEQEVR_B1_Min (0x0UL)
  #define ETM_TRCSEQEVR_B1_Max (0x1UL)
  #define ETM_TRCSEQEVR_B1_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B1_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B2 @Bit 10 : Backward field. */
  #define ETM_TRCSEQEVR_B2_Pos (10UL)
  #define ETM_TRCSEQEVR_B2_Msk (0x1UL << ETM_TRCSEQEVR_B2_Pos)
  #define ETM_TRCSEQEVR_B2_Min (0x0UL)
  #define ETM_TRCSEQEVR_B2_Max (0x1UL)
  #define ETM_TRCSEQEVR_B2_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B2_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B3 @Bit 11 : Backward field. */
  #define ETM_TRCSEQEVR_B3_Pos (11UL)
  #define ETM_TRCSEQEVR_B3_Msk (0x1UL << ETM_TRCSEQEVR_B3_Pos)
  #define ETM_TRCSEQEVR_B3_Min (0x0UL)
  #define ETM_TRCSEQEVR_B3_Max (0x1UL)
  #define ETM_TRCSEQEVR_B3_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B3_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B4 @Bit 12 : Backward field. */
  #define ETM_TRCSEQEVR_B4_Pos (12UL)
  #define ETM_TRCSEQEVR_B4_Msk (0x1UL << ETM_TRCSEQEVR_B4_Pos)
  #define ETM_TRCSEQEVR_B4_Min (0x0UL)
  #define ETM_TRCSEQEVR_B4_Max (0x1UL)
  #define ETM_TRCSEQEVR_B4_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B4_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B5 @Bit 13 : Backward field. */
  #define ETM_TRCSEQEVR_B5_Pos (13UL)
  #define ETM_TRCSEQEVR_B5_Msk (0x1UL << ETM_TRCSEQEVR_B5_Pos)
  #define ETM_TRCSEQEVR_B5_Min (0x0UL)
  #define ETM_TRCSEQEVR_B5_Max (0x1UL)
  #define ETM_TRCSEQEVR_B5_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B5_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B6 @Bit 14 : Backward field. */
  #define ETM_TRCSEQEVR_B6_Pos (14UL)
  #define ETM_TRCSEQEVR_B6_Msk (0x1UL << ETM_TRCSEQEVR_B6_Pos)
  #define ETM_TRCSEQEVR_B6_Min (0x0UL)
  #define ETM_TRCSEQEVR_B6_Max (0x1UL)
  #define ETM_TRCSEQEVR_B6_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B6_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B7 @Bit 15 : Backward field. */
  #define ETM_TRCSEQEVR_B7_Pos (15UL)
  #define ETM_TRCSEQEVR_B7_Msk (0x1UL << ETM_TRCSEQEVR_B7_Pos)
  #define ETM_TRCSEQEVR_B7_Min (0x0UL)
  #define ETM_TRCSEQEVR_B7_Max (0x1UL)
  #define ETM_TRCSEQEVR_B7_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B7_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/


/* ETM_TRCSEQRSTEVR: Moves the sequencer to state 0 when a programmed event occurs. Might ignore writes when the trace unit is
                      enabled or not idle. When the sequencer is used, all sequencer state transitions must be programmed with a
                      valid event. */

  #define ETM_TRCSEQRSTEVR_ResetValue (0x00000000UL)

/* EVENT @Bits 0..7 : Select which event should reset the sequencer. */
  #define ETM_TRCSEQRSTEVR_EVENT_Pos (0UL)
  #define ETM_TRCSEQRSTEVR_EVENT_Msk (0xFFUL << ETM_TRCSEQRSTEVR_EVENT_Pos)
  #define ETM_TRCSEQRSTEVR_EVENT_Min (0x00UL)
  #define ETM_TRCSEQRSTEVR_EVENT_Max (0xFFUL)


/* ETM_TRCSEQSTR: Use this to set, or read, the sequencer state. Might ignore writes when the trace unit is enabled or not idle.
                   Only returns stable data when TRCSTATR.PMSTABLE == 1. When the sequencer is used, all sequencer state
                   transitions must be programmed with a valid event. */

  #define ETM_TRCSEQSTR_ResetValue (0x00000000UL)

/* STATE @Bits 0..1 : Sets or returns the state of the sequencer. */
  #define ETM_TRCSEQSTR_STATE_Pos (0UL)
  #define ETM_TRCSEQSTR_STATE_Msk (0x3UL << ETM_TRCSEQSTR_STATE_Pos)
  #define ETM_TRCSEQSTR_STATE_Min (0x0UL)
  #define ETM_TRCSEQSTR_STATE_Max (0x3UL)
  #define ETM_TRCSEQSTR_STATE_State0 (0x0UL)
  #define ETM_TRCSEQSTR_STATE_State1 (0x1UL)
  #define ETM_TRCSEQSTR_STATE_State2 (0x2UL)
  #define ETM_TRCSEQSTR_STATE_State3 (0x3UL)


/* ETM_TRCEXTINSELR: Use this to set, or read, which external inputs are resources to the trace unit. Might ignore writes when
                      the trace unit is enabled or not idle. Only returns stable data when TRCSTATR.PMSTABLE == 1. When the
                      sequencer is used, all sequencer state transitions must be programmed with a valid event. */

  #define ETM_TRCEXTINSELR_ResetValue (0x00000000UL)

/* SEL0 @Bits 0..7 : Each field in this collection selects an external input as a resource for the trace unit. */
  #define ETM_TRCEXTINSELR_SEL0_Pos (0UL)
  #define ETM_TRCEXTINSELR_SEL0_Msk (0xFFUL << ETM_TRCEXTINSELR_SEL0_Pos)
  #define ETM_TRCEXTINSELR_SEL0_Min (0x00UL)
  #define ETM_TRCEXTINSELR_SEL0_Max (0xFFUL)

/* SEL1 @Bits 8..15 : Each field in this collection selects an external input as a resource for the trace unit. */
  #define ETM_TRCEXTINSELR_SEL1_Pos (8UL)
  #define ETM_TRCEXTINSELR_SEL1_Msk (0xFFUL << ETM_TRCEXTINSELR_SEL1_Pos)
  #define ETM_TRCEXTINSELR_SEL1_Min (0x00UL)
  #define ETM_TRCEXTINSELR_SEL1_Max (0xFFUL)

/* SEL2 @Bits 16..23 : Each field in this collection selects an external input as a resource for the trace unit. */
  #define ETM_TRCEXTINSELR_SEL2_Pos (16UL)
  #define ETM_TRCEXTINSELR_SEL2_Msk (0xFFUL << ETM_TRCEXTINSELR_SEL2_Pos)
  #define ETM_TRCEXTINSELR_SEL2_Min (0x00UL)
  #define ETM_TRCEXTINSELR_SEL2_Max (0xFFUL)

/* SEL3 @Bits 24..31 : Each field in this collection selects an external input as a resource for the trace unit. */
  #define ETM_TRCEXTINSELR_SEL3_Pos (24UL)
  #define ETM_TRCEXTINSELR_SEL3_Msk (0xFFUL << ETM_TRCEXTINSELR_SEL3_Pos)
  #define ETM_TRCEXTINSELR_SEL3_Min (0x00UL)
  #define ETM_TRCEXTINSELR_SEL3_Max (0xFFUL)


/* ETM_TRCCNTRLDVR: This sets or returns the reload count value for counter n. Might ignore writes when the trace unit is
                     enabled or not idle. */

  #define ETM_TRCCNTRLDVR_MaxCount (4UL)
  #define ETM_TRCCNTRLDVR_MaxIndex (3UL)
  #define ETM_TRCCNTRLDVR_MinIndex (0UL)
  #define ETM_TRCCNTRLDVR_ResetValue (0x00000000UL)

/* VALUE @Bits 0..15 : Contains the reload value for counter n. When a reload event occurs for counter n then the trace unit
                       copies the VALUEn field into counter n. */

  #define ETM_TRCCNTRLDVR_VALUE_Pos (0UL)
  #define ETM_TRCCNTRLDVR_VALUE_Msk (0xFFFFUL << ETM_TRCCNTRLDVR_VALUE_Pos)
  #define ETM_TRCCNTRLDVR_VALUE_Min (0x0000UL)
  #define ETM_TRCCNTRLDVR_VALUE_Max (0xFFFFUL)


/* ETM_TRCCNTCTLR: Controls the operation of counter n. Might ignore writes when the trace unit is enabled or not idle. */
  #define ETM_TRCCNTCTLR_MaxCount (4UL)
  #define ETM_TRCCNTCTLR_MaxIndex (3UL)
  #define ETM_TRCCNTCTLR_MinIndex (0UL)
  #define ETM_TRCCNTCTLR_ResetValue (0x00000000UL)

/* CNTEVENT @Bits 0..7 : Selects an event, that when it occurs causes counter n to decrement. */
  #define ETM_TRCCNTCTLR_CNTEVENT_Pos (0UL)
  #define ETM_TRCCNTCTLR_CNTEVENT_Msk (0xFFUL << ETM_TRCCNTCTLR_CNTEVENT_Pos)
  #define ETM_TRCCNTCTLR_CNTEVENT_Min (0x00UL)
  #define ETM_TRCCNTCTLR_CNTEVENT_Max (0xFFUL)

/* RLDEVENT @Bits 8..15 : Selects an event, that when it occurs causes a reload event for counter n. */
  #define ETM_TRCCNTCTLR_RLDEVENT_Pos (8UL)
  #define ETM_TRCCNTCTLR_RLDEVENT_Msk (0xFFUL << ETM_TRCCNTCTLR_RLDEVENT_Pos)
  #define ETM_TRCCNTCTLR_RLDEVENT_Min (0x00UL)
  #define ETM_TRCCNTCTLR_RLDEVENT_Max (0xFFUL)

/* RLDSELF @Bit 16 : Controls whether a reload event occurs for counter n, when counter n reaches zero. */
  #define ETM_TRCCNTCTLR_RLDSELF_Pos (16UL)
  #define ETM_TRCCNTCTLR_RLDSELF_Msk (0x1UL << ETM_TRCCNTCTLR_RLDSELF_Pos)
  #define ETM_TRCCNTCTLR_RLDSELF_Min (0x0UL)
  #define ETM_TRCCNTCTLR_RLDSELF_Max (0x1UL)
  #define ETM_TRCCNTCTLR_RLDSELF_Disabled (0x0UL)
  #define ETM_TRCCNTCTLR_RLDSELF_Enabled (0x1UL)

/* CNTCHAIN @Bit 17 : For TRCCNTCTLR3 and TRCCNTCTLR1, this bit controls whether counter n decrements when a reload event occurs
                      for counter n-1. */

  #define ETM_TRCCNTCTLR_CNTCHAIN_Pos (17UL)
  #define ETM_TRCCNTCTLR_CNTCHAIN_Msk (0x1UL << ETM_TRCCNTCTLR_CNTCHAIN_Pos)
  #define ETM_TRCCNTCTLR_CNTCHAIN_Min (0x0UL)
  #define ETM_TRCCNTCTLR_CNTCHAIN_Max (0x1UL)
  #define ETM_TRCCNTCTLR_CNTCHAIN_Disabled (0x0UL)   /*!< Counter n does not decrement when a reload event for counter n-1
                                                          occurs.*/
  #define ETM_TRCCNTCTLR_CNTCHAIN_Enabled (0x1UL)    /*!< Counter n decrements when a reload event for counter n-1 occurs. This
                                                          concatenates counter n and counter n-1, to provide a larger count
                                                          value.*/


/* ETM_TRCCNTVR: This sets or returns the value of counter n. The count value is only stable when TRCSTATR.PMSTABLE == 1. If
                  software uses counter n then it must write to this register to set the initial counter value. Might ignore
                  writes when the trace unit is enabled or not idle. */

  #define ETM_TRCCNTVR_MaxCount (4UL)
  #define ETM_TRCCNTVR_MaxIndex (3UL)
  #define ETM_TRCCNTVR_MinIndex (0UL)
  #define ETM_TRCCNTVR_ResetValue (0x00000000UL)

/* VALUE @Bits 0..15 : Contains the count value of counter n. */
  #define ETM_TRCCNTVR_VALUE_Pos (0UL)
  #define ETM_TRCCNTVR_VALUE_Msk (0xFFFFUL << ETM_TRCCNTVR_VALUE_Pos)
  #define ETM_TRCCNTVR_VALUE_Min (0x0000UL)
  #define ETM_TRCCNTVR_VALUE_Max (0xFFFFUL)


/* ETM_TRCRSCTLR: Controls the selection of the resources in the trace unit. Might ignore writes when the trace unit is enabled
                   or not idle. If software selects a non-implemented resource then CONSTRAINED UNPREDICTABLE behavior of the
                   resource selector occurs, so the resource selector might fire unexpectedly or might not fire. Reads of the
                   TRCRSCTLRn might return UNKNOWN. */

  #define ETM_TRCRSCTLR_MaxCount (30UL)
  #define ETM_TRCRSCTLR_MaxIndex (31UL)
  #define ETM_TRCRSCTLR_MinIndex (2UL)
  #define ETM_TRCRSCTLR_ResetValue (0x00000000UL)

/* EN @Bit 0 : Trace unit enable bit */
  #define ETM_TRCRSCTLR_EN_Pos (0UL)
  #define ETM_TRCRSCTLR_EN_Msk (0x1UL << ETM_TRCRSCTLR_EN_Pos)
  #define ETM_TRCRSCTLR_EN_Min (0x0UL)
  #define ETM_TRCRSCTLR_EN_Max (0x1UL)
  #define ETM_TRCRSCTLR_EN_Disabled (0x0UL)          /*!< The trace unit is disabled. All trace resources are inactive and no
                                                          trace is generated.*/
  #define ETM_TRCRSCTLR_EN_Enabled (0x1UL)


/* ETM_TRCSSCCR0: Controls the single-shot comparator. */
  #define ETM_TRCSSCCR0_ResetValue (0x00000000UL)

/* RST @Bit 24 : Enables the single-shot comparator resource to be reset when it occurs, to enable another comparator match to
                 be detected */

  #define ETM_TRCSSCCR0_RST_Pos (24UL)
  #define ETM_TRCSSCCR0_RST_Msk (0x1UL << ETM_TRCSSCCR0_RST_Pos)
  #define ETM_TRCSSCCR0_RST_Min (0x0UL)
  #define ETM_TRCSSCCR0_RST_Max (0x1UL)
  #define ETM_TRCSSCCR0_RST_Disabled (0x0UL)
  #define ETM_TRCSSCCR0_RST_Enabled (0x1UL)


/* ETM_TRCSSCSR0: Indicates the status of the single-shot comparators. TRCSSCSR0 is sensitive toinstruction addresses. */
  #define ETM_TRCSSCSR0_ResetValue (0x00000000UL)

/* INST @Bit 0 : Instruction address comparator support */
  #define ETM_TRCSSCSR0_INST_Pos (0UL)
  #define ETM_TRCSSCSR0_INST_Msk (0x1UL << ETM_TRCSSCSR0_INST_Pos)
  #define ETM_TRCSSCSR0_INST_Min (0x0UL)
  #define ETM_TRCSSCSR0_INST_Max (0x1UL)
  #define ETM_TRCSSCSR0_INST_False (0x0UL)
  #define ETM_TRCSSCSR0_INST_True (0x1UL)

/* DA @Bit 1 : Data address comparator support */
  #define ETM_TRCSSCSR0_DA_Pos (1UL)
  #define ETM_TRCSSCSR0_DA_Msk (0x1UL << ETM_TRCSSCSR0_DA_Pos)
  #define ETM_TRCSSCSR0_DA_Min (0x0UL)
  #define ETM_TRCSSCSR0_DA_Max (0x1UL)
  #define ETM_TRCSSCSR0_DA_False (0x0UL)
  #define ETM_TRCSSCSR0_DA_True (0x1UL)

/* DV @Bit 2 : Data value comparator support */
  #define ETM_TRCSSCSR0_DV_Pos (2UL)
  #define ETM_TRCSSCSR0_DV_Msk (0x1UL << ETM_TRCSSCSR0_DV_Pos)
  #define ETM_TRCSSCSR0_DV_Min (0x0UL)
  #define ETM_TRCSSCSR0_DV_Max (0x1UL)
  #define ETM_TRCSSCSR0_DV_False (0x0UL)
  #define ETM_TRCSSCSR0_DV_True (0x1UL)

/* PC @Bit 3 : Process counter value comparator support */
  #define ETM_TRCSSCSR0_PC_Pos (3UL)
  #define ETM_TRCSSCSR0_PC_Msk (0x1UL << ETM_TRCSSCSR0_PC_Pos)
  #define ETM_TRCSSCSR0_PC_Min (0x0UL)
  #define ETM_TRCSSCSR0_PC_Max (0x1UL)
  #define ETM_TRCSSCSR0_PC_False (0x0UL)
  #define ETM_TRCSSCSR0_PC_True (0x1UL)

/* STATUS @Bit 31 : Single-shot status. This indicates whether any of the selected comparators have matched. */
  #define ETM_TRCSSCSR0_STATUS_Pos (31UL)
  #define ETM_TRCSSCSR0_STATUS_Msk (0x1UL << ETM_TRCSSCSR0_STATUS_Pos)
  #define ETM_TRCSSCSR0_STATUS_Min (0x0UL)
  #define ETM_TRCSSCSR0_STATUS_Max (0x1UL)
  #define ETM_TRCSSCSR0_STATUS_NoMatch (0x0UL)
  #define ETM_TRCSSCSR0_STATUS_Match (0x1UL)


/* ETM_TRCSSPCICR0: Selects the processor comparator inputs for Single-shot control. */
  #define ETM_TRCSSPCICR0_ResetValue (0x00000000UL)

/* PC0 @Bit 0 : Selects processor comparator 0 inputs for Single-shot control */
  #define ETM_TRCSSPCICR0_PC0_Pos (0UL)
  #define ETM_TRCSSPCICR0_PC0_Msk (0x1UL << ETM_TRCSSPCICR0_PC0_Pos)
  #define ETM_TRCSSPCICR0_PC0_Min (0x0UL)
  #define ETM_TRCSSPCICR0_PC0_Max (0x1UL)
  #define ETM_TRCSSPCICR0_PC0_Disabled (0x0UL)
  #define ETM_TRCSSPCICR0_PC0_Enabled (0x1UL)

/* PC1 @Bit 1 : Selects processor comparator 1 inputs for Single-shot control */
  #define ETM_TRCSSPCICR0_PC1_Pos (1UL)
  #define ETM_TRCSSPCICR0_PC1_Msk (0x1UL << ETM_TRCSSPCICR0_PC1_Pos)
  #define ETM_TRCSSPCICR0_PC1_Min (0x0UL)
  #define ETM_TRCSSPCICR0_PC1_Max (0x1UL)
  #define ETM_TRCSSPCICR0_PC1_Disabled (0x0UL)
  #define ETM_TRCSSPCICR0_PC1_Enabled (0x1UL)

/* PC2 @Bit 2 : Selects processor comparator 2 inputs for Single-shot control */
  #define ETM_TRCSSPCICR0_PC2_Pos (2UL)
  #define ETM_TRCSSPCICR0_PC2_Msk (0x1UL << ETM_TRCSSPCICR0_PC2_Pos)
  #define ETM_TRCSSPCICR0_PC2_Min (0x0UL)
  #define ETM_TRCSSPCICR0_PC2_Max (0x1UL)
  #define ETM_TRCSSPCICR0_PC2_Disabled (0x0UL)
  #define ETM_TRCSSPCICR0_PC2_Enabled (0x1UL)

/* PC3 @Bit 3 : Selects processor comparator 3 inputs for Single-shot control */
  #define ETM_TRCSSPCICR0_PC3_Pos (3UL)
  #define ETM_TRCSSPCICR0_PC3_Msk (0x1UL << ETM_TRCSSPCICR0_PC3_Pos)
  #define ETM_TRCSSPCICR0_PC3_Min (0x0UL)
  #define ETM_TRCSSPCICR0_PC3_Max (0x1UL)
  #define ETM_TRCSSPCICR0_PC3_Disabled (0x0UL)
  #define ETM_TRCSSPCICR0_PC3_Enabled (0x1UL)


/* ETM_TRCPDCR: Controls the single-shot comparator. */
  #define ETM_TRCPDCR_ResetValue (0x00000000UL)

/* PU @Bit 24 : Power up request, to request that power to ETM and access to the trace registers is maintained. */
  #define ETM_TRCPDCR_PU_Pos (24UL)
  #define ETM_TRCPDCR_PU_Msk (0x1UL << ETM_TRCPDCR_PU_Pos)
  #define ETM_TRCPDCR_PU_Min (0x0UL)
  #define ETM_TRCPDCR_PU_Max (0x1UL)
  #define ETM_TRCPDCR_PU_Disabled (0x0UL)
  #define ETM_TRCPDCR_PU_Enabled (0x1UL)


/* ETM_TRCPDSR: Indicates the power down status of the ETM. */
  #define ETM_TRCPDSR_ResetValue (0x00000000UL)

/* POWER @Bit 0 : Indicates ETM is powered up */
  #define ETM_TRCPDSR_POWER_Pos (0UL)
  #define ETM_TRCPDSR_POWER_Msk (0x1UL << ETM_TRCPDSR_POWER_Pos)
  #define ETM_TRCPDSR_POWER_Min (0x0UL)
  #define ETM_TRCPDSR_POWER_Max (0x1UL)
  #define ETM_TRCPDSR_POWER_NotPoweredUp (0x0UL)
  #define ETM_TRCPDSR_POWER_PoweredUp (0x1UL)

/* STICKYPD @Bit 1 : Sticky power down state. This bit is set to 1 when power to the ETM registers is removed, to indicate that
                     programming state has been lost. It is cleared after a read of the TRCPDSR */

  #define ETM_TRCPDSR_STICKYPD_Pos (1UL)
  #define ETM_TRCPDSR_STICKYPD_Msk (0x1UL << ETM_TRCPDSR_STICKYPD_Pos)
  #define ETM_TRCPDSR_STICKYPD_Min (0x0UL)
  #define ETM_TRCPDSR_STICKYPD_Max (0x1UL)
  #define ETM_TRCPDSR_STICKYPD_NotPoweredDown (0x0UL) /*!< Trace register power has not been removed since the TRCPDSR was last
                                                           read.*/
  #define ETM_TRCPDSR_STICKYPD_PoweredDown (0x1UL)   /*!< Trace register power has been removed since the TRCPDSR was last
                                                          read.*/


/* ETM_TRCITATBIDR: Sets the state of output pins. */
  #define ETM_TRCITATBIDR_ResetValue (0x00000000UL)

/* ID0 @Bit 0 : Drives the ATIDMI[0] output pin. */
  #define ETM_TRCITATBIDR_ID0_Pos (0UL)
  #define ETM_TRCITATBIDR_ID0_Msk (0x1UL << ETM_TRCITATBIDR_ID0_Pos)

/* ID1 @Bit 1 : Drives the ATIDMI[1] output pin. */
  #define ETM_TRCITATBIDR_ID1_Pos (1UL)
  #define ETM_TRCITATBIDR_ID1_Msk (0x1UL << ETM_TRCITATBIDR_ID1_Pos)

/* ID2 @Bit 2 : Drives the ATIDMI[2] output pin. */
  #define ETM_TRCITATBIDR_ID2_Pos (2UL)
  #define ETM_TRCITATBIDR_ID2_Msk (0x1UL << ETM_TRCITATBIDR_ID2_Pos)

/* ID3 @Bit 3 : Drives the ATIDMI[3] output pin. */
  #define ETM_TRCITATBIDR_ID3_Pos (3UL)
  #define ETM_TRCITATBIDR_ID3_Msk (0x1UL << ETM_TRCITATBIDR_ID3_Pos)

/* ID4 @Bit 4 : Drives the ATIDMI[4] output pin. */
  #define ETM_TRCITATBIDR_ID4_Pos (4UL)
  #define ETM_TRCITATBIDR_ID4_Msk (0x1UL << ETM_TRCITATBIDR_ID4_Pos)

/* ID5 @Bit 5 : Drives the ATIDMI[5] output pin. */
  #define ETM_TRCITATBIDR_ID5_Pos (5UL)
  #define ETM_TRCITATBIDR_ID5_Msk (0x1UL << ETM_TRCITATBIDR_ID5_Pos)

/* ID6 @Bit 6 : Drives the ATIDMI[6] output pin. */
  #define ETM_TRCITATBIDR_ID6_Pos (6UL)
  #define ETM_TRCITATBIDR_ID6_Msk (0x1UL << ETM_TRCITATBIDR_ID6_Pos)


/* ETM_TRCITIATBINR: Reads the state of the input pins. */
  #define ETM_TRCITIATBINR_ResetValue (0x00000000UL)

/* ATVALID @Bit 0 : Returns the value of the ATVALIDMI input pin. */
  #define ETM_TRCITIATBINR_ATVALID_Pos (0UL)
  #define ETM_TRCITIATBINR_ATVALID_Msk (0x1UL << ETM_TRCITIATBINR_ATVALID_Pos)

/* AFREADY @Bit 1 : Returns the value of the AFREADYMI input pin. */
  #define ETM_TRCITIATBINR_AFREADY_Pos (1UL)
  #define ETM_TRCITIATBINR_AFREADY_Msk (0x1UL << ETM_TRCITIATBINR_AFREADY_Pos)


/* ETM_TRCITIATBOUTR: Sets the state of the output pins. */
  #define ETM_TRCITIATBOUTR_ResetValue (0x00000000UL)

/* ATVALID @Bit 0 : Drives the ATVALIDMI output pin. */
  #define ETM_TRCITIATBOUTR_ATVALID_Pos (0UL)
  #define ETM_TRCITIATBOUTR_ATVALID_Msk (0x1UL << ETM_TRCITIATBOUTR_ATVALID_Pos)

/* AFREADY @Bit 1 : Drives the AFREADYMI output pin. */
  #define ETM_TRCITIATBOUTR_AFREADY_Pos (1UL)
  #define ETM_TRCITIATBOUTR_AFREADY_Msk (0x1UL << ETM_TRCITIATBOUTR_AFREADY_Pos)


/* ETM_TRCITCTRL: Enables topology detection or integration testing, by putting ETM-M33 into integration mode. */
  #define ETM_TRCITCTRL_ResetValue (0x00000000UL)

/* IME @Bit 0 : Integration mode enable */
  #define ETM_TRCITCTRL_IME_Pos (0UL)
  #define ETM_TRCITCTRL_IME_Msk (0x1UL << ETM_TRCITCTRL_IME_Pos)
  #define ETM_TRCITCTRL_IME_Min (0x0UL)
  #define ETM_TRCITCTRL_IME_Max (0x1UL)
  #define ETM_TRCITCTRL_IME_Disabled (0x0UL)
  #define ETM_TRCITCTRL_IME_Enabled (0x1UL)


/* ETM_TRCCLAIMSET: Sets bits in the claim tag and determines the number of claim tag bits implemented. */
  #define ETM_TRCCLAIMSET_ResetValue (0x00000000UL)

/* SET0 @Bit 0 : Claim tag set register */
  #define ETM_TRCCLAIMSET_SET0_Pos (0UL)
  #define ETM_TRCCLAIMSET_SET0_Msk (0x1UL << ETM_TRCCLAIMSET_SET0_Pos)
  #define ETM_TRCCLAIMSET_SET0_Min (0x0UL)
  #define ETM_TRCCLAIMSET_SET0_Max (0x1UL)
  #define ETM_TRCCLAIMSET_SET0_NotSet (0x0UL)
  #define ETM_TRCCLAIMSET_SET0_Set (0x1UL)
  #define ETM_TRCCLAIMSET_SET0_Claim (0x1UL)

/* SET1 @Bit 1 : Claim tag set register */
  #define ETM_TRCCLAIMSET_SET1_Pos (1UL)
  #define ETM_TRCCLAIMSET_SET1_Msk (0x1UL << ETM_TRCCLAIMSET_SET1_Pos)
  #define ETM_TRCCLAIMSET_SET1_Min (0x0UL)
  #define ETM_TRCCLAIMSET_SET1_Max (0x1UL)
  #define ETM_TRCCLAIMSET_SET1_NotSet (0x0UL)
  #define ETM_TRCCLAIMSET_SET1_Set (0x1UL)
  #define ETM_TRCCLAIMSET_SET1_Claim (0x1UL)

/* SET2 @Bit 2 : Claim tag set register */
  #define ETM_TRCCLAIMSET_SET2_Pos (2UL)
  #define ETM_TRCCLAIMSET_SET2_Msk (0x1UL << ETM_TRCCLAIMSET_SET2_Pos)
  #define ETM_TRCCLAIMSET_SET2_Min (0x0UL)
  #define ETM_TRCCLAIMSET_SET2_Max (0x1UL)
  #define ETM_TRCCLAIMSET_SET2_NotSet (0x0UL)
  #define ETM_TRCCLAIMSET_SET2_Set (0x1UL)
  #define ETM_TRCCLAIMSET_SET2_Claim (0x1UL)

/* SET3 @Bit 3 : Claim tag set register */
  #define ETM_TRCCLAIMSET_SET3_Pos (3UL)
  #define ETM_TRCCLAIMSET_SET3_Msk (0x1UL << ETM_TRCCLAIMSET_SET3_Pos)
  #define ETM_TRCCLAIMSET_SET3_Min (0x0UL)
  #define ETM_TRCCLAIMSET_SET3_Max (0x1UL)
  #define ETM_TRCCLAIMSET_SET3_NotSet (0x0UL)
  #define ETM_TRCCLAIMSET_SET3_Set (0x1UL)
  #define ETM_TRCCLAIMSET_SET3_Claim (0x1UL)


/* ETM_TRCCLAIMCLR: Clears bits in the claim tag and determines the current value of the claim tag. */
  #define ETM_TRCCLAIMCLR_ResetValue (0x00000000UL)

/* CLR0 @Bit 0 : Claim tag clear register */
  #define ETM_TRCCLAIMCLR_CLR0_Pos (0UL)
  #define ETM_TRCCLAIMCLR_CLR0_Msk (0x1UL << ETM_TRCCLAIMCLR_CLR0_Pos)
  #define ETM_TRCCLAIMCLR_CLR0_Min (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR0_Max (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR0_NotSet (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR0_Set (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR0_Clear (0x1UL)

/* CLR1 @Bit 1 : Claim tag clear register */
  #define ETM_TRCCLAIMCLR_CLR1_Pos (1UL)
  #define ETM_TRCCLAIMCLR_CLR1_Msk (0x1UL << ETM_TRCCLAIMCLR_CLR1_Pos)
  #define ETM_TRCCLAIMCLR_CLR1_Min (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR1_Max (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR1_NotSet (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR1_Set (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR1_Clear (0x1UL)

/* CLR2 @Bit 2 : Claim tag clear register */
  #define ETM_TRCCLAIMCLR_CLR2_Pos (2UL)
  #define ETM_TRCCLAIMCLR_CLR2_Msk (0x1UL << ETM_TRCCLAIMCLR_CLR2_Pos)
  #define ETM_TRCCLAIMCLR_CLR2_Min (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR2_Max (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR2_NotSet (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR2_Set (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR2_Clear (0x1UL)

/* CLR3 @Bit 3 : Claim tag clear register */
  #define ETM_TRCCLAIMCLR_CLR3_Pos (3UL)
  #define ETM_TRCCLAIMCLR_CLR3_Msk (0x1UL << ETM_TRCCLAIMCLR_CLR3_Pos)
  #define ETM_TRCCLAIMCLR_CLR3_Min (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR3_Max (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR3_NotSet (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR3_Set (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR3_Clear (0x1UL)


/* ETM_TRCAUTHSTATUS: Indicates the current level of tracing permitted by the system */
  #define ETM_TRCAUTHSTATUS_ResetValue (0x00000000UL)

/* NSID @Bits 0..1 : Non-secure Invasive Debug */
  #define ETM_TRCAUTHSTATUS_NSID_Pos (0UL)
  #define ETM_TRCAUTHSTATUS_NSID_Msk (0x3UL << ETM_TRCAUTHSTATUS_NSID_Pos)
  #define ETM_TRCAUTHSTATUS_NSID_Min (0x0UL)
  #define ETM_TRCAUTHSTATUS_NSID_Max (0x1UL)
  #define ETM_TRCAUTHSTATUS_NSID_NotImplemented (0x0UL)
  #define ETM_TRCAUTHSTATUS_NSID_Implemented (0x1UL)

/* NSNID @Bits 2..3 : Non-secure Non-Invasive Debug */
  #define ETM_TRCAUTHSTATUS_NSNID_Pos (2UL)
  #define ETM_TRCAUTHSTATUS_NSNID_Msk (0x3UL << ETM_TRCAUTHSTATUS_NSNID_Pos)
  #define ETM_TRCAUTHSTATUS_NSNID_Min (0x0UL)
  #define ETM_TRCAUTHSTATUS_NSNID_Max (0x1UL)
  #define ETM_TRCAUTHSTATUS_NSNID_NotImplemented (0x0UL)
  #define ETM_TRCAUTHSTATUS_NSNID_Implemented (0x1UL)

/* SID @Bits 4..5 : Secure Invasive Debug */
  #define ETM_TRCAUTHSTATUS_SID_Pos (4UL)
  #define ETM_TRCAUTHSTATUS_SID_Msk (0x3UL << ETM_TRCAUTHSTATUS_SID_Pos)
  #define ETM_TRCAUTHSTATUS_SID_Min (0x0UL)
  #define ETM_TRCAUTHSTATUS_SID_Max (0x1UL)
  #define ETM_TRCAUTHSTATUS_SID_NotImplemented (0x0UL)
  #define ETM_TRCAUTHSTATUS_SID_Implemented (0x1UL)

/* SNID @Bits 6..7 : Secure Non-Invasive Debug */
  #define ETM_TRCAUTHSTATUS_SNID_Pos (6UL)
  #define ETM_TRCAUTHSTATUS_SNID_Msk (0x3UL << ETM_TRCAUTHSTATUS_SNID_Pos)
  #define ETM_TRCAUTHSTATUS_SNID_Min (0x0UL)
  #define ETM_TRCAUTHSTATUS_SNID_Max (0x1UL)
  #define ETM_TRCAUTHSTATUS_SNID_NotImplemented (0x0UL)
  #define ETM_TRCAUTHSTATUS_SNID_Implemented (0x1UL)


/* ETM_TRCDEVARCH: The TRCDEVARCH identifies ETM-M33 as an ETMv4.2 component */
  #define ETM_TRCDEVARCH_ResetValue (0x00000000UL)

/* ARCHID @Bits 0..15 : Architecture ID */
  #define ETM_TRCDEVARCH_ARCHID_Pos (0UL)
  #define ETM_TRCDEVARCH_ARCHID_Msk (0xFFFFUL << ETM_TRCDEVARCH_ARCHID_Pos)
  #define ETM_TRCDEVARCH_ARCHID_Min (0x4A13UL)
  #define ETM_TRCDEVARCH_ARCHID_Max (0x4A13UL)
  #define ETM_TRCDEVARCH_ARCHID_ETMv42 (0x4A13UL)

/* REVISION @Bits 16..19 : Architecture revision */
  #define ETM_TRCDEVARCH_REVISION_Pos (16UL)
  #define ETM_TRCDEVARCH_REVISION_Msk (0xFUL << ETM_TRCDEVARCH_REVISION_Pos)
  #define ETM_TRCDEVARCH_REVISION_Min (0x2UL)
  #define ETM_TRCDEVARCH_REVISION_Max (0x2UL)
  #define ETM_TRCDEVARCH_REVISION_v2 (0x2UL)

/* PRESENT @Bit 20 : This register is implemented */
  #define ETM_TRCDEVARCH_PRESENT_Pos (20UL)
  #define ETM_TRCDEVARCH_PRESENT_Msk (0x1UL << ETM_TRCDEVARCH_PRESENT_Pos)
  #define ETM_TRCDEVARCH_PRESENT_Min (0x0UL)
  #define ETM_TRCDEVARCH_PRESENT_Max (0x1UL)
  #define ETM_TRCDEVARCH_PRESENT_Absent (0x0UL)
  #define ETM_TRCDEVARCH_PRESENT_Present (0x1UL)

/* ARCHITECT @Bits 21..31 : Defines the architect of the component */
  #define ETM_TRCDEVARCH_ARCHITECT_Pos (21UL)
  #define ETM_TRCDEVARCH_ARCHITECT_Msk (0x7FFUL << ETM_TRCDEVARCH_ARCHITECT_Pos)
  #define ETM_TRCDEVARCH_ARCHITECT_Min (0x23BUL)
  #define ETM_TRCDEVARCH_ARCHITECT_Max (0x23BUL)
  #define ETM_TRCDEVARCH_ARCHITECT_Arm (0x23BUL)


/* ETM_TRCDEVTYPE: Controls the single-shot comparator. */
  #define ETM_TRCDEVTYPE_ResetValue (0x00000000UL)

/* MAJOR @Bits 0..3 : The main type of the component */
  #define ETM_TRCDEVTYPE_MAJOR_Pos (0UL)
  #define ETM_TRCDEVTYPE_MAJOR_Msk (0xFUL << ETM_TRCDEVTYPE_MAJOR_Pos)
  #define ETM_TRCDEVTYPE_MAJOR_Min (0x3UL)
  #define ETM_TRCDEVTYPE_MAJOR_Max (0x3UL)
  #define ETM_TRCDEVTYPE_MAJOR_TraceSource (0x3UL)

/* SUB @Bits 4..7 : The sub-type of the component */
  #define ETM_TRCDEVTYPE_SUB_Pos (4UL)
  #define ETM_TRCDEVTYPE_SUB_Msk (0xFUL << ETM_TRCDEVTYPE_SUB_Pos)
  #define ETM_TRCDEVTYPE_SUB_Min (0x1UL)
  #define ETM_TRCDEVTYPE_SUB_Max (0x1UL)
  #define ETM_TRCDEVTYPE_SUB_ProcessorTrace (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           FICR                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ==================================================== Struct FICR_INFO ===================================================== */
/**
  * @brief INFO [FICR_INFO] Device info
  */
typedef struct {
  __IM  uint32_t  CONFIGID;
  __IM  uint32_t  DEVICEID[2];
  __IOM uint32_t  UUID[4];
  __IM  uint32_t  PART;
  __IM  uint32_t  VARIANT;                           /*!< (@ 0x00000020) Part Variant, Hardware version and Production
                                                                         configuration*/
  __IM  uint32_t  PACKAGE;
  __IM  uint32_t  RAM;
  __IM  uint32_t  RRAM;
} NRF_FICR_INFO_Type;

/* FICR_INFO_CONFIGID: Configuration identifier */
  #define FICR_INFO_CONFIGID_ResetValue (0xFFFFFFFFUL)

/* HWID @Bits 0..15 : Identification number for the HW */
  #define FICR_INFO_CONFIGID_HWID_Pos (0UL)
  #define FICR_INFO_CONFIGID_HWID_Msk (0xFFFFUL << FICR_INFO_CONFIGID_HWID_Pos)


/* FICR_INFO_DEVICEID: Device identifier */
  #define FICR_INFO_DEVICEID_MaxCount (2UL)
  #define FICR_INFO_DEVICEID_MaxIndex (1UL)
  #define FICR_INFO_DEVICEID_MinIndex (0UL)
  #define FICR_INFO_DEVICEID_ResetValue (0xFFFFFFFFUL)

/* DEVICEID @Bits 0..31 : 64 bit unique device identifier */
  #define FICR_INFO_DEVICEID_DEVICEID_Pos (0UL)
  #define FICR_INFO_DEVICEID_DEVICEID_Msk (0xFFFFFFFFUL << FICR_INFO_DEVICEID_DEVICEID_Pos)


/* FICR_INFO_UUID: 128-bit Universally Unique IDentifier (UUID). */
  #define FICR_INFO_UUID_MaxCount (4UL)
  #define FICR_INFO_UUID_MaxIndex (3UL)
  #define FICR_INFO_UUID_MinIndex (0UL)
  #define FICR_INFO_UUID_ResetValue (0xFFFFFFFFUL)

/* UUID @Bits 0..31 : Device UUID [n]. */
  #define FICR_INFO_UUID_UUID_Pos (0UL)
  #define FICR_INFO_UUID_UUID_Msk (0xFFFFFFFFUL << FICR_INFO_UUID_UUID_Pos)


/* FICR_INFO_PART: Part code */
  #define FICR_INFO_PART_ResetValue (0xFFFFFFFFUL)

/* PART @Bits 0..31 : Part code */
  #define FICR_INFO_PART_PART_Pos (0UL)
  #define FICR_INFO_PART_PART_Msk (0xFFFFFFFFUL << FICR_INFO_PART_PART_Pos)
  #define FICR_INFO_PART_PART_Min (0xFFFFFFFFUL)
  #define FICR_INFO_PART_PART_Max (0xFFFFFFFFUL)
  #define FICR_INFO_PART_PART_Unspecified (0xFFFFFFFFUL)


/* FICR_INFO_VARIANT: Part Variant, Hardware version and Production configuration */
  #define FICR_INFO_VARIANT_ResetValue (0xFFFFFFFFUL)

/* VARIANT @Bits 0..31 : Part Variant, Hardware version and Production configuration, encoded as ASCII */
  #define FICR_INFO_VARIANT_VARIANT_Pos (0UL)
  #define FICR_INFO_VARIANT_VARIANT_Msk (0xFFFFFFFFUL << FICR_INFO_VARIANT_VARIANT_Pos)
  #define FICR_INFO_VARIANT_VARIANT_Min (0xFFFFFFFFUL)
  #define FICR_INFO_VARIANT_VARIANT_Max (0xFFFFFFFFUL)
  #define FICR_INFO_VARIANT_VARIANT_Unspecified (0xFFFFFFFFUL)


/* FICR_INFO_PACKAGE: Package option */
  #define FICR_INFO_PACKAGE_ResetValue (0xFFFFFFFFUL)

/* PACKAGE @Bits 0..31 : Package option */
  #define FICR_INFO_PACKAGE_PACKAGE_Pos (0UL)
  #define FICR_INFO_PACKAGE_PACKAGE_Msk (0xFFFFFFFFUL << FICR_INFO_PACKAGE_PACKAGE_Pos)
  #define FICR_INFO_PACKAGE_PACKAGE_Min (0xFFFFFFFFUL)
  #define FICR_INFO_PACKAGE_PACKAGE_Max (0xFFFFFFFFUL)
  #define FICR_INFO_PACKAGE_PACKAGE_Unspecified (0xFFFFFFFFUL)


/* FICR_INFO_RAM: RAM size (KB) */
  #define FICR_INFO_RAM_ResetValue (0xFFFFFFFFUL)

/* RAM @Bits 0..31 : RAM size (KB) */
  #define FICR_INFO_RAM_RAM_Pos (0UL)
  #define FICR_INFO_RAM_RAM_Msk (0xFFFFFFFFUL << FICR_INFO_RAM_RAM_Pos)
  #define FICR_INFO_RAM_RAM_Min (0x80UL)
  #define FICR_INFO_RAM_RAM_Max (0xFFFFFFFFUL)
  #define FICR_INFO_RAM_RAM_K192 (0x00000080UL)
  #define FICR_INFO_RAM_RAM_Unspecified (0xFFFFFFFFUL)


/* FICR_INFO_RRAM: RRAM size (KB) */
  #define FICR_INFO_RRAM_ResetValue (0xFFFFFFFFUL)

/* RRAM @Bits 0..31 : RRAM size (KB) */
  #define FICR_INFO_RRAM_RRAM_Pos (0UL)
  #define FICR_INFO_RRAM_RRAM_Msk (0xFFFFFFFFUL << FICR_INFO_RRAM_RRAM_Pos)
  #define FICR_INFO_RRAM_RRAM_Min (0x3F4UL)
  #define FICR_INFO_RRAM_RRAM_Max (0xFFFFFFFFUL)
  #define FICR_INFO_RRAM_RRAM_K1012 (0x000003F4UL)
  #define FICR_INFO_RRAM_RRAM_Unspecified (0xFFFFFFFFUL)



/* =================================================== Struct FICR_TRIMCNF =================================================== */
/**
  * @brief TRIMCNF [FICR_TRIMCNF] (unspecified)
  */
typedef struct {
  __IM  uint32_t  ADDR;
  __IM  uint32_t  DATA;
} NRF_FICR_TRIMCNF_Type;
  #define FICR_TRIMCNF_MaxCount (64UL)
  #define FICR_TRIMCNF_MaxIndex (63UL)
  #define FICR_TRIMCNF_MinIndex (0UL)

/* FICR_TRIMCNF_ADDR: Address of the register which will be written */
  #define FICR_TRIMCNF_ADDR_ResetValue (0xFFFFFFFFUL)

/* Address @Bits 0..31 : Address */
  #define FICR_TRIMCNF_ADDR_Address_Pos (0UL)
  #define FICR_TRIMCNF_ADDR_Address_Msk (0xFFFFFFFFUL << FICR_TRIMCNF_ADDR_Address_Pos)


/* FICR_TRIMCNF_DATA: Data to be written into the register */
  #define FICR_TRIMCNF_DATA_ResetValue (0xFFFFFFFFUL)

/* Data @Bits 0..31 : Data */
  #define FICR_TRIMCNF_DATA_Data_Pos (0UL)
  #define FICR_TRIMCNF_DATA_Data_Msk (0xFFFFFFFFUL << FICR_TRIMCNF_DATA_Data_Pos)



/* ===================================================== Struct FICR_NFC ===================================================== */
/**
  * @brief NFC [FICR_NFC] (unspecified)
  */
typedef struct {
  __IM  uint32_t  TAGHEADER0;                        /*!< (@ 0x00000000) Default header for NFC Tag. Software can read these
                                                                         values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and
                                                                         NFCID1_LAST.*/
  __IM  uint32_t  TAGHEADER1;                        /*!< (@ 0x00000004) Default header for NFC Tag. Software can read these
                                                                         values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and
                                                                         NFCID1_LAST.*/
  __IM  uint32_t  TAGHEADER2;                        /*!< (@ 0x00000008) Default header for NFC Tag. Software can read these
                                                                         values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and
                                                                         NFCID1_LAST.*/
  __IM  uint32_t  TAGHEADER3;                        /*!< (@ 0x0000000C) Default header for NFC Tag. Software can read these
                                                                         values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and
                                                                         NFCID1_LAST.*/
} NRF_FICR_NFC_Type;

/* FICR_NFC_TAGHEADER0: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST
                         and NFCID1_LAST. */

  #define FICR_NFC_TAGHEADER0_ResetValue (0xFFFFFF5FUL)

/* MFGID @Bits 0..7 : Default Manufacturer ID: Nordic Semiconductor ASA has ICM 0x5F */
  #define FICR_NFC_TAGHEADER0_MFGID_Pos (0UL)
  #define FICR_NFC_TAGHEADER0_MFGID_Msk (0xFFUL << FICR_NFC_TAGHEADER0_MFGID_Pos)

/* UD1 @Bits 8..15 : Unique identifier byte 1 */
  #define FICR_NFC_TAGHEADER0_UD1_Pos (8UL)
  #define FICR_NFC_TAGHEADER0_UD1_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD1_Pos)

/* UD2 @Bits 16..23 : Unique identifier byte 2 */
  #define FICR_NFC_TAGHEADER0_UD2_Pos (16UL)
  #define FICR_NFC_TAGHEADER0_UD2_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD2_Pos)

/* UD3 @Bits 24..31 : Unique identifier byte 3 */
  #define FICR_NFC_TAGHEADER0_UD3_Pos (24UL)
  #define FICR_NFC_TAGHEADER0_UD3_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD3_Pos)


/* FICR_NFC_TAGHEADER1: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST
                         and NFCID1_LAST. */

  #define FICR_NFC_TAGHEADER1_ResetValue (0xFFFFFFFFUL)

/* UD4 @Bits 0..7 : Unique identifier byte 4 */
  #define FICR_NFC_TAGHEADER1_UD4_Pos (0UL)
  #define FICR_NFC_TAGHEADER1_UD4_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD4_Pos)

/* UD5 @Bits 8..15 : Unique identifier byte 5 */
  #define FICR_NFC_TAGHEADER1_UD5_Pos (8UL)
  #define FICR_NFC_TAGHEADER1_UD5_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD5_Pos)

/* UD6 @Bits 16..23 : Unique identifier byte 6 */
  #define FICR_NFC_TAGHEADER1_UD6_Pos (16UL)
  #define FICR_NFC_TAGHEADER1_UD6_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD6_Pos)

/* UD7 @Bits 24..31 : Unique identifier byte 7 */
  #define FICR_NFC_TAGHEADER1_UD7_Pos (24UL)
  #define FICR_NFC_TAGHEADER1_UD7_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD7_Pos)


/* FICR_NFC_TAGHEADER2: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST
                         and NFCID1_LAST. */

  #define FICR_NFC_TAGHEADER2_ResetValue (0xFFFFFFFFUL)

/* UD8 @Bits 0..7 : Unique identifier byte 8 */
  #define FICR_NFC_TAGHEADER2_UD8_Pos (0UL)
  #define FICR_NFC_TAGHEADER2_UD8_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD8_Pos)

/* UD9 @Bits 8..15 : Unique identifier byte 9 */
  #define FICR_NFC_TAGHEADER2_UD9_Pos (8UL)
  #define FICR_NFC_TAGHEADER2_UD9_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD9_Pos)

/* UD10 @Bits 16..23 : Unique identifier byte 10 */
  #define FICR_NFC_TAGHEADER2_UD10_Pos (16UL)
  #define FICR_NFC_TAGHEADER2_UD10_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD10_Pos)

/* UD11 @Bits 24..31 : Unique identifier byte 11 */
  #define FICR_NFC_TAGHEADER2_UD11_Pos (24UL)
  #define FICR_NFC_TAGHEADER2_UD11_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD11_Pos)


/* FICR_NFC_TAGHEADER3: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST
                         and NFCID1_LAST. */

  #define FICR_NFC_TAGHEADER3_ResetValue (0xFFFFFFFFUL)

/* UD12 @Bits 0..7 : Unique identifier byte 12 */
  #define FICR_NFC_TAGHEADER3_UD12_Pos (0UL)
  #define FICR_NFC_TAGHEADER3_UD12_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD12_Pos)

/* UD13 @Bits 8..15 : Unique identifier byte 13 */
  #define FICR_NFC_TAGHEADER3_UD13_Pos (8UL)
  #define FICR_NFC_TAGHEADER3_UD13_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD13_Pos)

/* UD14 @Bits 16..23 : Unique identifier byte 14 */
  #define FICR_NFC_TAGHEADER3_UD14_Pos (16UL)
  #define FICR_NFC_TAGHEADER3_UD14_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD14_Pos)

/* UD15 @Bits 24..31 : Unique identifier byte 15 */
  #define FICR_NFC_TAGHEADER3_UD15_Pos (24UL)
  #define FICR_NFC_TAGHEADER3_UD15_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD15_Pos)


/* ======================================================= Struct FICR ======================================================= */
/**
  * @brief Factory Information Configuration Registers
  */
  typedef struct {
    __IM uint32_t RESERVED[192];
    __IOM NRF_FICR_INFO_Type INFO;
    __IM uint32_t RESERVED1[20];
    __IM uint32_t ER[4];
    __IM uint32_t IR[4];
    __IM uint32_t DEVICEADDRTYPE;
    __IM uint32_t DEVICEADDR[2];
    __IM uint32_t RESERVED2[21];
    __IOM NRF_FICR_TRIMCNF_Type TRIMCNF[64];
    __IOM NRF_FICR_NFC_Type NFC;
    __IM uint32_t RESERVED3[4];
    __IM uint32_t XOSC32MTRIM;
    __IM uint32_t XOSC32KTRIM;
  } NRF_FICR_Type;

/* FICR_ER: Common encryption root key, word n */
  #define FICR_ER_MaxCount (4UL)
  #define FICR_ER_MaxIndex (3UL)
  #define FICR_ER_MinIndex (0UL)
  #define FICR_ER_ResetValue (0xFFFFFFFFUL)

/* ER @Bits 0..31 : Encryption Root, word n */
  #define FICR_ER_ER_Pos (0UL)
  #define FICR_ER_ER_Msk (0xFFFFFFFFUL << FICR_ER_ER_Pos)


/* FICR_IR: Common identity root key, word n */
  #define FICR_IR_MaxCount (4UL)
  #define FICR_IR_MaxIndex (3UL)
  #define FICR_IR_MinIndex (0UL)
  #define FICR_IR_ResetValue (0xFFFFFFFFUL)

/* IR @Bits 0..31 : Identity Root, word n */
  #define FICR_IR_IR_Pos (0UL)
  #define FICR_IR_IR_Msk (0xFFFFFFFFUL << FICR_IR_IR_Pos)


/* FICR_DEVICEADDRTYPE: Device address type */
  #define FICR_DEVICEADDRTYPE_ResetValue (0xFFFFFFFFUL)

/* DEVICEADDRTYPE @Bit 0 : Device address type */
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Pos (0UL)
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Msk (0x1UL << FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Pos) /*!< Bit mask of
                                                                            DEVICEADDRTYPE field.*/
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Min (0x0UL)
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Max (0x1UL)
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Public (0x0UL)
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Random (0x1UL)


/* FICR_DEVICEADDR: Device address n */
  #define FICR_DEVICEADDR_MaxCount (2UL)
  #define FICR_DEVICEADDR_MaxIndex (1UL)
  #define FICR_DEVICEADDR_MinIndex (0UL)
  #define FICR_DEVICEADDR_ResetValue (0xFFFFFFFFUL)

/* DEVICEADDR @Bits 0..31 : 48 bit device address */
  #define FICR_DEVICEADDR_DEVICEADDR_Pos (0UL)
  #define FICR_DEVICEADDR_DEVICEADDR_Msk (0xFFFFFFFFUL << FICR_DEVICEADDR_DEVICEADDR_Pos)


/* FICR_XOSC32MTRIM: XOSC32M capacitor selection trim values */
  #define FICR_XOSC32MTRIM_ResetValue (0xFFFFFFFFUL)

/* SLOPE @Bits 0..8 : Slope trim factor on twos complement form */
  #define FICR_XOSC32MTRIM_SLOPE_Pos (0UL)
  #define FICR_XOSC32MTRIM_SLOPE_Msk (0x1FFUL << FICR_XOSC32MTRIM_SLOPE_Pos)

/* OFFSET @Bits 16..25 : Offset trim factor on integer form */
  #define FICR_XOSC32MTRIM_OFFSET_Pos (16UL)
  #define FICR_XOSC32MTRIM_OFFSET_Msk (0x3FFUL << FICR_XOSC32MTRIM_OFFSET_Pos)


/* FICR_XOSC32KTRIM: XOSC32K capacitor selection trim values */
  #define FICR_XOSC32KTRIM_ResetValue (0xFFFFFFFFUL)

/* SLOPE @Bits 0..8 : Slope trim factor on twos complement form */
  #define FICR_XOSC32KTRIM_SLOPE_Pos (0UL)
  #define FICR_XOSC32KTRIM_SLOPE_Msk (0x1FFUL << FICR_XOSC32KTRIM_SLOPE_Pos)

/* OFFSET @Bits 16..25 : Offset trim factor on integer form */
  #define FICR_XOSC32KTRIM_OFFSET_Pos (16UL)
  #define FICR_XOSC32KTRIM_OFFSET_Msk (0x3FFUL << FICR_XOSC32KTRIM_OFFSET_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                         GLITCHDET                                         ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ==================================================== Struct GLITCHDET ===================================================== */
/**
  * @brief Voltage glitch detectors
  */
  typedef struct {
    __IM uint32_t RESERVED[360];
    __IOM uint32_t CONFIG;
  } NRF_GLITCHDET_Type;

/* GLITCHDET_CONFIG: Configuration for glitch detector */
  #define GLITCHDET_CONFIG_ResetValue (0x00000001UL)

/* ENABLE @Bit 0 : Enable glitch detector */
  #define GLITCHDET_CONFIG_ENABLE_Pos (0UL)
  #define GLITCHDET_CONFIG_ENABLE_Msk (0x1UL << GLITCHDET_CONFIG_ENABLE_Pos)
  #define GLITCHDET_CONFIG_ENABLE_Min (0x0UL)
  #define GLITCHDET_CONFIG_ENABLE_Max (0x1UL)
  #define GLITCHDET_CONFIG_ENABLE_Disable (0x0UL)
  #define GLITCHDET_CONFIG_ENABLE_Enable (0x1UL)

/* MODE @Bit 4 : Glitch detector mode */
  #define GLITCHDET_CONFIG_MODE_Pos (4UL)
  #define GLITCHDET_CONFIG_MODE_Msk (0x1UL << GLITCHDET_CONFIG_MODE_Pos)
  #define GLITCHDET_CONFIG_MODE_Min (0x0UL)
  #define GLITCHDET_CONFIG_MODE_Max (0x1UL)
  #define GLITCHDET_CONFIG_MODE_HighPassFilter (0x0UL)
  #define GLITCHDET_CONFIG_MODE_CapDiv (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           GPIO                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct GPIO ======================================================= */
/**
  * @brief GPIO Port
  */
  typedef struct {
    __IOM uint32_t OUT;
    __IOM uint32_t OUTSET;
    __IOM uint32_t OUTCLR;
    __IM uint32_t IN;
    __IOM uint32_t DIR;
    __IOM uint32_t DIRSET;
    __IOM uint32_t DIRCLR;
    __IM uint32_t RESERVED;
    __IOM uint32_t LATCH;                            /*!< (@ 0x00000020) Latch register indicating what GPIO pins that have met
                                                                         the criteria set in the PIN_CNF[n].SENSE registers*/
    __IOM uint32_t DETECTMODE;                       /*!< (@ 0x00000024) Select between default DETECT signal behavior and
                                                                         LDETECT mode*/
    __IM uint32_t RESERVED1[22];
    __IOM uint32_t PIN_CNF[32];
  } NRF_GPIO_Type;

/* GPIO_OUT: Write GPIO port */
  #define GPIO_OUT_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_OUT_PIN0_Pos (0UL)
  #define GPIO_OUT_PIN0_Msk (0x1UL << GPIO_OUT_PIN0_Pos)
  #define GPIO_OUT_PIN0_Min (0x0UL)
  #define GPIO_OUT_PIN0_Max (0x1UL)
  #define GPIO_OUT_PIN0_Low (0x0UL)
  #define GPIO_OUT_PIN0_High (0x1UL)

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_OUT_PIN1_Pos (1UL)
  #define GPIO_OUT_PIN1_Msk (0x1UL << GPIO_OUT_PIN1_Pos)
  #define GPIO_OUT_PIN1_Min (0x0UL)
  #define GPIO_OUT_PIN1_Max (0x1UL)
  #define GPIO_OUT_PIN1_Low (0x0UL)
  #define GPIO_OUT_PIN1_High (0x1UL)

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_OUT_PIN2_Pos (2UL)
  #define GPIO_OUT_PIN2_Msk (0x1UL << GPIO_OUT_PIN2_Pos)
  #define GPIO_OUT_PIN2_Min (0x0UL)
  #define GPIO_OUT_PIN2_Max (0x1UL)
  #define GPIO_OUT_PIN2_Low (0x0UL)
  #define GPIO_OUT_PIN2_High (0x1UL)

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_OUT_PIN3_Pos (3UL)
  #define GPIO_OUT_PIN3_Msk (0x1UL << GPIO_OUT_PIN3_Pos)
  #define GPIO_OUT_PIN3_Min (0x0UL)
  #define GPIO_OUT_PIN3_Max (0x1UL)
  #define GPIO_OUT_PIN3_Low (0x0UL)
  #define GPIO_OUT_PIN3_High (0x1UL)

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_OUT_PIN4_Pos (4UL)
  #define GPIO_OUT_PIN4_Msk (0x1UL << GPIO_OUT_PIN4_Pos)
  #define GPIO_OUT_PIN4_Min (0x0UL)
  #define GPIO_OUT_PIN4_Max (0x1UL)
  #define GPIO_OUT_PIN4_Low (0x0UL)
  #define GPIO_OUT_PIN4_High (0x1UL)

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_OUT_PIN5_Pos (5UL)
  #define GPIO_OUT_PIN5_Msk (0x1UL << GPIO_OUT_PIN5_Pos)
  #define GPIO_OUT_PIN5_Min (0x0UL)
  #define GPIO_OUT_PIN5_Max (0x1UL)
  #define GPIO_OUT_PIN5_Low (0x0UL)
  #define GPIO_OUT_PIN5_High (0x1UL)

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_OUT_PIN6_Pos (6UL)
  #define GPIO_OUT_PIN6_Msk (0x1UL << GPIO_OUT_PIN6_Pos)
  #define GPIO_OUT_PIN6_Min (0x0UL)
  #define GPIO_OUT_PIN6_Max (0x1UL)
  #define GPIO_OUT_PIN6_Low (0x0UL)
  #define GPIO_OUT_PIN6_High (0x1UL)

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_OUT_PIN7_Pos (7UL)
  #define GPIO_OUT_PIN7_Msk (0x1UL << GPIO_OUT_PIN7_Pos)
  #define GPIO_OUT_PIN7_Min (0x0UL)
  #define GPIO_OUT_PIN7_Max (0x1UL)
  #define GPIO_OUT_PIN7_Low (0x0UL)
  #define GPIO_OUT_PIN7_High (0x1UL)

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_OUT_PIN8_Pos (8UL)
  #define GPIO_OUT_PIN8_Msk (0x1UL << GPIO_OUT_PIN8_Pos)
  #define GPIO_OUT_PIN8_Min (0x0UL)
  #define GPIO_OUT_PIN8_Max (0x1UL)
  #define GPIO_OUT_PIN8_Low (0x0UL)
  #define GPIO_OUT_PIN8_High (0x1UL)

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_OUT_PIN9_Pos (9UL)
  #define GPIO_OUT_PIN9_Msk (0x1UL << GPIO_OUT_PIN9_Pos)
  #define GPIO_OUT_PIN9_Min (0x0UL)
  #define GPIO_OUT_PIN9_Max (0x1UL)
  #define GPIO_OUT_PIN9_Low (0x0UL)
  #define GPIO_OUT_PIN9_High (0x1UL)

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_OUT_PIN10_Pos (10UL)
  #define GPIO_OUT_PIN10_Msk (0x1UL << GPIO_OUT_PIN10_Pos)
  #define GPIO_OUT_PIN10_Min (0x0UL)
  #define GPIO_OUT_PIN10_Max (0x1UL)
  #define GPIO_OUT_PIN10_Low (0x0UL)
  #define GPIO_OUT_PIN10_High (0x1UL)

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_OUT_PIN11_Pos (11UL)
  #define GPIO_OUT_PIN11_Msk (0x1UL << GPIO_OUT_PIN11_Pos)
  #define GPIO_OUT_PIN11_Min (0x0UL)
  #define GPIO_OUT_PIN11_Max (0x1UL)
  #define GPIO_OUT_PIN11_Low (0x0UL)
  #define GPIO_OUT_PIN11_High (0x1UL)

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_OUT_PIN12_Pos (12UL)
  #define GPIO_OUT_PIN12_Msk (0x1UL << GPIO_OUT_PIN12_Pos)
  #define GPIO_OUT_PIN12_Min (0x0UL)
  #define GPIO_OUT_PIN12_Max (0x1UL)
  #define GPIO_OUT_PIN12_Low (0x0UL)
  #define GPIO_OUT_PIN12_High (0x1UL)

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_OUT_PIN13_Pos (13UL)
  #define GPIO_OUT_PIN13_Msk (0x1UL << GPIO_OUT_PIN13_Pos)
  #define GPIO_OUT_PIN13_Min (0x0UL)
  #define GPIO_OUT_PIN13_Max (0x1UL)
  #define GPIO_OUT_PIN13_Low (0x0UL)
  #define GPIO_OUT_PIN13_High (0x1UL)

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_OUT_PIN14_Pos (14UL)
  #define GPIO_OUT_PIN14_Msk (0x1UL << GPIO_OUT_PIN14_Pos)
  #define GPIO_OUT_PIN14_Min (0x0UL)
  #define GPIO_OUT_PIN14_Max (0x1UL)
  #define GPIO_OUT_PIN14_Low (0x0UL)
  #define GPIO_OUT_PIN14_High (0x1UL)

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_OUT_PIN15_Pos (15UL)
  #define GPIO_OUT_PIN15_Msk (0x1UL << GPIO_OUT_PIN15_Pos)
  #define GPIO_OUT_PIN15_Min (0x0UL)
  #define GPIO_OUT_PIN15_Max (0x1UL)
  #define GPIO_OUT_PIN15_Low (0x0UL)
  #define GPIO_OUT_PIN15_High (0x1UL)

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_OUT_PIN16_Pos (16UL)
  #define GPIO_OUT_PIN16_Msk (0x1UL << GPIO_OUT_PIN16_Pos)
  #define GPIO_OUT_PIN16_Min (0x0UL)
  #define GPIO_OUT_PIN16_Max (0x1UL)
  #define GPIO_OUT_PIN16_Low (0x0UL)
  #define GPIO_OUT_PIN16_High (0x1UL)

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_OUT_PIN17_Pos (17UL)
  #define GPIO_OUT_PIN17_Msk (0x1UL << GPIO_OUT_PIN17_Pos)
  #define GPIO_OUT_PIN17_Min (0x0UL)
  #define GPIO_OUT_PIN17_Max (0x1UL)
  #define GPIO_OUT_PIN17_Low (0x0UL)
  #define GPIO_OUT_PIN17_High (0x1UL)

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_OUT_PIN18_Pos (18UL)
  #define GPIO_OUT_PIN18_Msk (0x1UL << GPIO_OUT_PIN18_Pos)
  #define GPIO_OUT_PIN18_Min (0x0UL)
  #define GPIO_OUT_PIN18_Max (0x1UL)
  #define GPIO_OUT_PIN18_Low (0x0UL)
  #define GPIO_OUT_PIN18_High (0x1UL)

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_OUT_PIN19_Pos (19UL)
  #define GPIO_OUT_PIN19_Msk (0x1UL << GPIO_OUT_PIN19_Pos)
  #define GPIO_OUT_PIN19_Min (0x0UL)
  #define GPIO_OUT_PIN19_Max (0x1UL)
  #define GPIO_OUT_PIN19_Low (0x0UL)
  #define GPIO_OUT_PIN19_High (0x1UL)

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_OUT_PIN20_Pos (20UL)
  #define GPIO_OUT_PIN20_Msk (0x1UL << GPIO_OUT_PIN20_Pos)
  #define GPIO_OUT_PIN20_Min (0x0UL)
  #define GPIO_OUT_PIN20_Max (0x1UL)
  #define GPIO_OUT_PIN20_Low (0x0UL)
  #define GPIO_OUT_PIN20_High (0x1UL)

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_OUT_PIN21_Pos (21UL)
  #define GPIO_OUT_PIN21_Msk (0x1UL << GPIO_OUT_PIN21_Pos)
  #define GPIO_OUT_PIN21_Min (0x0UL)
  #define GPIO_OUT_PIN21_Max (0x1UL)
  #define GPIO_OUT_PIN21_Low (0x0UL)
  #define GPIO_OUT_PIN21_High (0x1UL)

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_OUT_PIN22_Pos (22UL)
  #define GPIO_OUT_PIN22_Msk (0x1UL << GPIO_OUT_PIN22_Pos)
  #define GPIO_OUT_PIN22_Min (0x0UL)
  #define GPIO_OUT_PIN22_Max (0x1UL)
  #define GPIO_OUT_PIN22_Low (0x0UL)
  #define GPIO_OUT_PIN22_High (0x1UL)

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_OUT_PIN23_Pos (23UL)
  #define GPIO_OUT_PIN23_Msk (0x1UL << GPIO_OUT_PIN23_Pos)
  #define GPIO_OUT_PIN23_Min (0x0UL)
  #define GPIO_OUT_PIN23_Max (0x1UL)
  #define GPIO_OUT_PIN23_Low (0x0UL)
  #define GPIO_OUT_PIN23_High (0x1UL)

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_OUT_PIN24_Pos (24UL)
  #define GPIO_OUT_PIN24_Msk (0x1UL << GPIO_OUT_PIN24_Pos)
  #define GPIO_OUT_PIN24_Min (0x0UL)
  #define GPIO_OUT_PIN24_Max (0x1UL)
  #define GPIO_OUT_PIN24_Low (0x0UL)
  #define GPIO_OUT_PIN24_High (0x1UL)

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_OUT_PIN25_Pos (25UL)
  #define GPIO_OUT_PIN25_Msk (0x1UL << GPIO_OUT_PIN25_Pos)
  #define GPIO_OUT_PIN25_Min (0x0UL)
  #define GPIO_OUT_PIN25_Max (0x1UL)
  #define GPIO_OUT_PIN25_Low (0x0UL)
  #define GPIO_OUT_PIN25_High (0x1UL)

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_OUT_PIN26_Pos (26UL)
  #define GPIO_OUT_PIN26_Msk (0x1UL << GPIO_OUT_PIN26_Pos)
  #define GPIO_OUT_PIN26_Min (0x0UL)
  #define GPIO_OUT_PIN26_Max (0x1UL)
  #define GPIO_OUT_PIN26_Low (0x0UL)
  #define GPIO_OUT_PIN26_High (0x1UL)

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_OUT_PIN27_Pos (27UL)
  #define GPIO_OUT_PIN27_Msk (0x1UL << GPIO_OUT_PIN27_Pos)
  #define GPIO_OUT_PIN27_Min (0x0UL)
  #define GPIO_OUT_PIN27_Max (0x1UL)
  #define GPIO_OUT_PIN27_Low (0x0UL)
  #define GPIO_OUT_PIN27_High (0x1UL)

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_OUT_PIN28_Pos (28UL)
  #define GPIO_OUT_PIN28_Msk (0x1UL << GPIO_OUT_PIN28_Pos)
  #define GPIO_OUT_PIN28_Min (0x0UL)
  #define GPIO_OUT_PIN28_Max (0x1UL)
  #define GPIO_OUT_PIN28_Low (0x0UL)
  #define GPIO_OUT_PIN28_High (0x1UL)

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_OUT_PIN29_Pos (29UL)
  #define GPIO_OUT_PIN29_Msk (0x1UL << GPIO_OUT_PIN29_Pos)
  #define GPIO_OUT_PIN29_Min (0x0UL)
  #define GPIO_OUT_PIN29_Max (0x1UL)
  #define GPIO_OUT_PIN29_Low (0x0UL)
  #define GPIO_OUT_PIN29_High (0x1UL)

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_OUT_PIN30_Pos (30UL)
  #define GPIO_OUT_PIN30_Msk (0x1UL << GPIO_OUT_PIN30_Pos)
  #define GPIO_OUT_PIN30_Min (0x0UL)
  #define GPIO_OUT_PIN30_Max (0x1UL)
  #define GPIO_OUT_PIN30_Low (0x0UL)
  #define GPIO_OUT_PIN30_High (0x1UL)

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_OUT_PIN31_Pos (31UL)
  #define GPIO_OUT_PIN31_Msk (0x1UL << GPIO_OUT_PIN31_Pos)
  #define GPIO_OUT_PIN31_Min (0x0UL)
  #define GPIO_OUT_PIN31_Max (0x1UL)
  #define GPIO_OUT_PIN31_Low (0x0UL)
  #define GPIO_OUT_PIN31_High (0x1UL)


/* GPIO_OUTSET: Set individual bits in GPIO port */
  #define GPIO_OUTSET_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_OUTSET_PIN0_Pos (0UL)
  #define GPIO_OUTSET_PIN0_Msk (0x1UL << GPIO_OUTSET_PIN0_Pos)
  #define GPIO_OUTSET_PIN0_Min (0x0UL)
  #define GPIO_OUTSET_PIN0_Max (0x1UL)
  #define GPIO_OUTSET_PIN0_Low (0x0UL)
  #define GPIO_OUTSET_PIN0_High (0x1UL)
  #define GPIO_OUTSET_PIN0_Set (0x1UL)

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_OUTSET_PIN1_Pos (1UL)
  #define GPIO_OUTSET_PIN1_Msk (0x1UL << GPIO_OUTSET_PIN1_Pos)
  #define GPIO_OUTSET_PIN1_Min (0x0UL)
  #define GPIO_OUTSET_PIN1_Max (0x1UL)
  #define GPIO_OUTSET_PIN1_Low (0x0UL)
  #define GPIO_OUTSET_PIN1_High (0x1UL)
  #define GPIO_OUTSET_PIN1_Set (0x1UL)

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_OUTSET_PIN2_Pos (2UL)
  #define GPIO_OUTSET_PIN2_Msk (0x1UL << GPIO_OUTSET_PIN2_Pos)
  #define GPIO_OUTSET_PIN2_Min (0x0UL)
  #define GPIO_OUTSET_PIN2_Max (0x1UL)
  #define GPIO_OUTSET_PIN2_Low (0x0UL)
  #define GPIO_OUTSET_PIN2_High (0x1UL)
  #define GPIO_OUTSET_PIN2_Set (0x1UL)

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_OUTSET_PIN3_Pos (3UL)
  #define GPIO_OUTSET_PIN3_Msk (0x1UL << GPIO_OUTSET_PIN3_Pos)
  #define GPIO_OUTSET_PIN3_Min (0x0UL)
  #define GPIO_OUTSET_PIN3_Max (0x1UL)
  #define GPIO_OUTSET_PIN3_Low (0x0UL)
  #define GPIO_OUTSET_PIN3_High (0x1UL)
  #define GPIO_OUTSET_PIN3_Set (0x1UL)

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_OUTSET_PIN4_Pos (4UL)
  #define GPIO_OUTSET_PIN4_Msk (0x1UL << GPIO_OUTSET_PIN4_Pos)
  #define GPIO_OUTSET_PIN4_Min (0x0UL)
  #define GPIO_OUTSET_PIN4_Max (0x1UL)
  #define GPIO_OUTSET_PIN4_Low (0x0UL)
  #define GPIO_OUTSET_PIN4_High (0x1UL)
  #define GPIO_OUTSET_PIN4_Set (0x1UL)

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_OUTSET_PIN5_Pos (5UL)
  #define GPIO_OUTSET_PIN5_Msk (0x1UL << GPIO_OUTSET_PIN5_Pos)
  #define GPIO_OUTSET_PIN5_Min (0x0UL)
  #define GPIO_OUTSET_PIN5_Max (0x1UL)
  #define GPIO_OUTSET_PIN5_Low (0x0UL)
  #define GPIO_OUTSET_PIN5_High (0x1UL)
  #define GPIO_OUTSET_PIN5_Set (0x1UL)

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_OUTSET_PIN6_Pos (6UL)
  #define GPIO_OUTSET_PIN6_Msk (0x1UL << GPIO_OUTSET_PIN6_Pos)
  #define GPIO_OUTSET_PIN6_Min (0x0UL)
  #define GPIO_OUTSET_PIN6_Max (0x1UL)
  #define GPIO_OUTSET_PIN6_Low (0x0UL)
  #define GPIO_OUTSET_PIN6_High (0x1UL)
  #define GPIO_OUTSET_PIN6_Set (0x1UL)

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_OUTSET_PIN7_Pos (7UL)
  #define GPIO_OUTSET_PIN7_Msk (0x1UL << GPIO_OUTSET_PIN7_Pos)
  #define GPIO_OUTSET_PIN7_Min (0x0UL)
  #define GPIO_OUTSET_PIN7_Max (0x1UL)
  #define GPIO_OUTSET_PIN7_Low (0x0UL)
  #define GPIO_OUTSET_PIN7_High (0x1UL)
  #define GPIO_OUTSET_PIN7_Set (0x1UL)

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_OUTSET_PIN8_Pos (8UL)
  #define GPIO_OUTSET_PIN8_Msk (0x1UL << GPIO_OUTSET_PIN8_Pos)
  #define GPIO_OUTSET_PIN8_Min (0x0UL)
  #define GPIO_OUTSET_PIN8_Max (0x1UL)
  #define GPIO_OUTSET_PIN8_Low (0x0UL)
  #define GPIO_OUTSET_PIN8_High (0x1UL)
  #define GPIO_OUTSET_PIN8_Set (0x1UL)

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_OUTSET_PIN9_Pos (9UL)
  #define GPIO_OUTSET_PIN9_Msk (0x1UL << GPIO_OUTSET_PIN9_Pos)
  #define GPIO_OUTSET_PIN9_Min (0x0UL)
  #define GPIO_OUTSET_PIN9_Max (0x1UL)
  #define GPIO_OUTSET_PIN9_Low (0x0UL)
  #define GPIO_OUTSET_PIN9_High (0x1UL)
  #define GPIO_OUTSET_PIN9_Set (0x1UL)

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_OUTSET_PIN10_Pos (10UL)
  #define GPIO_OUTSET_PIN10_Msk (0x1UL << GPIO_OUTSET_PIN10_Pos)
  #define GPIO_OUTSET_PIN10_Min (0x0UL)
  #define GPIO_OUTSET_PIN10_Max (0x1UL)
  #define GPIO_OUTSET_PIN10_Low (0x0UL)
  #define GPIO_OUTSET_PIN10_High (0x1UL)
  #define GPIO_OUTSET_PIN10_Set (0x1UL)

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_OUTSET_PIN11_Pos (11UL)
  #define GPIO_OUTSET_PIN11_Msk (0x1UL << GPIO_OUTSET_PIN11_Pos)
  #define GPIO_OUTSET_PIN11_Min (0x0UL)
  #define GPIO_OUTSET_PIN11_Max (0x1UL)
  #define GPIO_OUTSET_PIN11_Low (0x0UL)
  #define GPIO_OUTSET_PIN11_High (0x1UL)
  #define GPIO_OUTSET_PIN11_Set (0x1UL)

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_OUTSET_PIN12_Pos (12UL)
  #define GPIO_OUTSET_PIN12_Msk (0x1UL << GPIO_OUTSET_PIN12_Pos)
  #define GPIO_OUTSET_PIN12_Min (0x0UL)
  #define GPIO_OUTSET_PIN12_Max (0x1UL)
  #define GPIO_OUTSET_PIN12_Low (0x0UL)
  #define GPIO_OUTSET_PIN12_High (0x1UL)
  #define GPIO_OUTSET_PIN12_Set (0x1UL)

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_OUTSET_PIN13_Pos (13UL)
  #define GPIO_OUTSET_PIN13_Msk (0x1UL << GPIO_OUTSET_PIN13_Pos)
  #define GPIO_OUTSET_PIN13_Min (0x0UL)
  #define GPIO_OUTSET_PIN13_Max (0x1UL)
  #define GPIO_OUTSET_PIN13_Low (0x0UL)
  #define GPIO_OUTSET_PIN13_High (0x1UL)
  #define GPIO_OUTSET_PIN13_Set (0x1UL)

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_OUTSET_PIN14_Pos (14UL)
  #define GPIO_OUTSET_PIN14_Msk (0x1UL << GPIO_OUTSET_PIN14_Pos)
  #define GPIO_OUTSET_PIN14_Min (0x0UL)
  #define GPIO_OUTSET_PIN14_Max (0x1UL)
  #define GPIO_OUTSET_PIN14_Low (0x0UL)
  #define GPIO_OUTSET_PIN14_High (0x1UL)
  #define GPIO_OUTSET_PIN14_Set (0x1UL)

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_OUTSET_PIN15_Pos (15UL)
  #define GPIO_OUTSET_PIN15_Msk (0x1UL << GPIO_OUTSET_PIN15_Pos)
  #define GPIO_OUTSET_PIN15_Min (0x0UL)
  #define GPIO_OUTSET_PIN15_Max (0x1UL)
  #define GPIO_OUTSET_PIN15_Low (0x0UL)
  #define GPIO_OUTSET_PIN15_High (0x1UL)
  #define GPIO_OUTSET_PIN15_Set (0x1UL)

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_OUTSET_PIN16_Pos (16UL)
  #define GPIO_OUTSET_PIN16_Msk (0x1UL << GPIO_OUTSET_PIN16_Pos)
  #define GPIO_OUTSET_PIN16_Min (0x0UL)
  #define GPIO_OUTSET_PIN16_Max (0x1UL)
  #define GPIO_OUTSET_PIN16_Low (0x0UL)
  #define GPIO_OUTSET_PIN16_High (0x1UL)
  #define GPIO_OUTSET_PIN16_Set (0x1UL)

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_OUTSET_PIN17_Pos (17UL)
  #define GPIO_OUTSET_PIN17_Msk (0x1UL << GPIO_OUTSET_PIN17_Pos)
  #define GPIO_OUTSET_PIN17_Min (0x0UL)
  #define GPIO_OUTSET_PIN17_Max (0x1UL)
  #define GPIO_OUTSET_PIN17_Low (0x0UL)
  #define GPIO_OUTSET_PIN17_High (0x1UL)
  #define GPIO_OUTSET_PIN17_Set (0x1UL)

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_OUTSET_PIN18_Pos (18UL)
  #define GPIO_OUTSET_PIN18_Msk (0x1UL << GPIO_OUTSET_PIN18_Pos)
  #define GPIO_OUTSET_PIN18_Min (0x0UL)
  #define GPIO_OUTSET_PIN18_Max (0x1UL)
  #define GPIO_OUTSET_PIN18_Low (0x0UL)
  #define GPIO_OUTSET_PIN18_High (0x1UL)
  #define GPIO_OUTSET_PIN18_Set (0x1UL)

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_OUTSET_PIN19_Pos (19UL)
  #define GPIO_OUTSET_PIN19_Msk (0x1UL << GPIO_OUTSET_PIN19_Pos)
  #define GPIO_OUTSET_PIN19_Min (0x0UL)
  #define GPIO_OUTSET_PIN19_Max (0x1UL)
  #define GPIO_OUTSET_PIN19_Low (0x0UL)
  #define GPIO_OUTSET_PIN19_High (0x1UL)
  #define GPIO_OUTSET_PIN19_Set (0x1UL)

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_OUTSET_PIN20_Pos (20UL)
  #define GPIO_OUTSET_PIN20_Msk (0x1UL << GPIO_OUTSET_PIN20_Pos)
  #define GPIO_OUTSET_PIN20_Min (0x0UL)
  #define GPIO_OUTSET_PIN20_Max (0x1UL)
  #define GPIO_OUTSET_PIN20_Low (0x0UL)
  #define GPIO_OUTSET_PIN20_High (0x1UL)
  #define GPIO_OUTSET_PIN20_Set (0x1UL)

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_OUTSET_PIN21_Pos (21UL)
  #define GPIO_OUTSET_PIN21_Msk (0x1UL << GPIO_OUTSET_PIN21_Pos)
  #define GPIO_OUTSET_PIN21_Min (0x0UL)
  #define GPIO_OUTSET_PIN21_Max (0x1UL)
  #define GPIO_OUTSET_PIN21_Low (0x0UL)
  #define GPIO_OUTSET_PIN21_High (0x1UL)
  #define GPIO_OUTSET_PIN21_Set (0x1UL)

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_OUTSET_PIN22_Pos (22UL)
  #define GPIO_OUTSET_PIN22_Msk (0x1UL << GPIO_OUTSET_PIN22_Pos)
  #define GPIO_OUTSET_PIN22_Min (0x0UL)
  #define GPIO_OUTSET_PIN22_Max (0x1UL)
  #define GPIO_OUTSET_PIN22_Low (0x0UL)
  #define GPIO_OUTSET_PIN22_High (0x1UL)
  #define GPIO_OUTSET_PIN22_Set (0x1UL)

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_OUTSET_PIN23_Pos (23UL)
  #define GPIO_OUTSET_PIN23_Msk (0x1UL << GPIO_OUTSET_PIN23_Pos)
  #define GPIO_OUTSET_PIN23_Min (0x0UL)
  #define GPIO_OUTSET_PIN23_Max (0x1UL)
  #define GPIO_OUTSET_PIN23_Low (0x0UL)
  #define GPIO_OUTSET_PIN23_High (0x1UL)
  #define GPIO_OUTSET_PIN23_Set (0x1UL)

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_OUTSET_PIN24_Pos (24UL)
  #define GPIO_OUTSET_PIN24_Msk (0x1UL << GPIO_OUTSET_PIN24_Pos)
  #define GPIO_OUTSET_PIN24_Min (0x0UL)
  #define GPIO_OUTSET_PIN24_Max (0x1UL)
  #define GPIO_OUTSET_PIN24_Low (0x0UL)
  #define GPIO_OUTSET_PIN24_High (0x1UL)
  #define GPIO_OUTSET_PIN24_Set (0x1UL)

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_OUTSET_PIN25_Pos (25UL)
  #define GPIO_OUTSET_PIN25_Msk (0x1UL << GPIO_OUTSET_PIN25_Pos)
  #define GPIO_OUTSET_PIN25_Min (0x0UL)
  #define GPIO_OUTSET_PIN25_Max (0x1UL)
  #define GPIO_OUTSET_PIN25_Low (0x0UL)
  #define GPIO_OUTSET_PIN25_High (0x1UL)
  #define GPIO_OUTSET_PIN25_Set (0x1UL)

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_OUTSET_PIN26_Pos (26UL)
  #define GPIO_OUTSET_PIN26_Msk (0x1UL << GPIO_OUTSET_PIN26_Pos)
  #define GPIO_OUTSET_PIN26_Min (0x0UL)
  #define GPIO_OUTSET_PIN26_Max (0x1UL)
  #define GPIO_OUTSET_PIN26_Low (0x0UL)
  #define GPIO_OUTSET_PIN26_High (0x1UL)
  #define GPIO_OUTSET_PIN26_Set (0x1UL)

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_OUTSET_PIN27_Pos (27UL)
  #define GPIO_OUTSET_PIN27_Msk (0x1UL << GPIO_OUTSET_PIN27_Pos)
  #define GPIO_OUTSET_PIN27_Min (0x0UL)
  #define GPIO_OUTSET_PIN27_Max (0x1UL)
  #define GPIO_OUTSET_PIN27_Low (0x0UL)
  #define GPIO_OUTSET_PIN27_High (0x1UL)
  #define GPIO_OUTSET_PIN27_Set (0x1UL)

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_OUTSET_PIN28_Pos (28UL)
  #define GPIO_OUTSET_PIN28_Msk (0x1UL << GPIO_OUTSET_PIN28_Pos)
  #define GPIO_OUTSET_PIN28_Min (0x0UL)
  #define GPIO_OUTSET_PIN28_Max (0x1UL)
  #define GPIO_OUTSET_PIN28_Low (0x0UL)
  #define GPIO_OUTSET_PIN28_High (0x1UL)
  #define GPIO_OUTSET_PIN28_Set (0x1UL)

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_OUTSET_PIN29_Pos (29UL)
  #define GPIO_OUTSET_PIN29_Msk (0x1UL << GPIO_OUTSET_PIN29_Pos)
  #define GPIO_OUTSET_PIN29_Min (0x0UL)
  #define GPIO_OUTSET_PIN29_Max (0x1UL)
  #define GPIO_OUTSET_PIN29_Low (0x0UL)
  #define GPIO_OUTSET_PIN29_High (0x1UL)
  #define GPIO_OUTSET_PIN29_Set (0x1UL)

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_OUTSET_PIN30_Pos (30UL)
  #define GPIO_OUTSET_PIN30_Msk (0x1UL << GPIO_OUTSET_PIN30_Pos)
  #define GPIO_OUTSET_PIN30_Min (0x0UL)
  #define GPIO_OUTSET_PIN30_Max (0x1UL)
  #define GPIO_OUTSET_PIN30_Low (0x0UL)
  #define GPIO_OUTSET_PIN30_High (0x1UL)
  #define GPIO_OUTSET_PIN30_Set (0x1UL)

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_OUTSET_PIN31_Pos (31UL)
  #define GPIO_OUTSET_PIN31_Msk (0x1UL << GPIO_OUTSET_PIN31_Pos)
  #define GPIO_OUTSET_PIN31_Min (0x0UL)
  #define GPIO_OUTSET_PIN31_Max (0x1UL)
  #define GPIO_OUTSET_PIN31_Low (0x0UL)
  #define GPIO_OUTSET_PIN31_High (0x1UL)
  #define GPIO_OUTSET_PIN31_Set (0x1UL)


/* GPIO_OUTCLR: Clear individual bits in GPIO port */
  #define GPIO_OUTCLR_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_OUTCLR_PIN0_Pos (0UL)
  #define GPIO_OUTCLR_PIN0_Msk (0x1UL << GPIO_OUTCLR_PIN0_Pos)
  #define GPIO_OUTCLR_PIN0_Min (0x0UL)
  #define GPIO_OUTCLR_PIN0_Max (0x1UL)
  #define GPIO_OUTCLR_PIN0_Low (0x0UL)
  #define GPIO_OUTCLR_PIN0_High (0x1UL)
  #define GPIO_OUTCLR_PIN0_Clear (0x1UL)

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_OUTCLR_PIN1_Pos (1UL)
  #define GPIO_OUTCLR_PIN1_Msk (0x1UL << GPIO_OUTCLR_PIN1_Pos)
  #define GPIO_OUTCLR_PIN1_Min (0x0UL)
  #define GPIO_OUTCLR_PIN1_Max (0x1UL)
  #define GPIO_OUTCLR_PIN1_Low (0x0UL)
  #define GPIO_OUTCLR_PIN1_High (0x1UL)
  #define GPIO_OUTCLR_PIN1_Clear (0x1UL)

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_OUTCLR_PIN2_Pos (2UL)
  #define GPIO_OUTCLR_PIN2_Msk (0x1UL << GPIO_OUTCLR_PIN2_Pos)
  #define GPIO_OUTCLR_PIN2_Min (0x0UL)
  #define GPIO_OUTCLR_PIN2_Max (0x1UL)
  #define GPIO_OUTCLR_PIN2_Low (0x0UL)
  #define GPIO_OUTCLR_PIN2_High (0x1UL)
  #define GPIO_OUTCLR_PIN2_Clear (0x1UL)

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_OUTCLR_PIN3_Pos (3UL)
  #define GPIO_OUTCLR_PIN3_Msk (0x1UL << GPIO_OUTCLR_PIN3_Pos)
  #define GPIO_OUTCLR_PIN3_Min (0x0UL)
  #define GPIO_OUTCLR_PIN3_Max (0x1UL)
  #define GPIO_OUTCLR_PIN3_Low (0x0UL)
  #define GPIO_OUTCLR_PIN3_High (0x1UL)
  #define GPIO_OUTCLR_PIN3_Clear (0x1UL)

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_OUTCLR_PIN4_Pos (4UL)
  #define GPIO_OUTCLR_PIN4_Msk (0x1UL << GPIO_OUTCLR_PIN4_Pos)
  #define GPIO_OUTCLR_PIN4_Min (0x0UL)
  #define GPIO_OUTCLR_PIN4_Max (0x1UL)
  #define GPIO_OUTCLR_PIN4_Low (0x0UL)
  #define GPIO_OUTCLR_PIN4_High (0x1UL)
  #define GPIO_OUTCLR_PIN4_Clear (0x1UL)

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_OUTCLR_PIN5_Pos (5UL)
  #define GPIO_OUTCLR_PIN5_Msk (0x1UL << GPIO_OUTCLR_PIN5_Pos)
  #define GPIO_OUTCLR_PIN5_Min (0x0UL)
  #define GPIO_OUTCLR_PIN5_Max (0x1UL)
  #define GPIO_OUTCLR_PIN5_Low (0x0UL)
  #define GPIO_OUTCLR_PIN5_High (0x1UL)
  #define GPIO_OUTCLR_PIN5_Clear (0x1UL)

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_OUTCLR_PIN6_Pos (6UL)
  #define GPIO_OUTCLR_PIN6_Msk (0x1UL << GPIO_OUTCLR_PIN6_Pos)
  #define GPIO_OUTCLR_PIN6_Min (0x0UL)
  #define GPIO_OUTCLR_PIN6_Max (0x1UL)
  #define GPIO_OUTCLR_PIN6_Low (0x0UL)
  #define GPIO_OUTCLR_PIN6_High (0x1UL)
  #define GPIO_OUTCLR_PIN6_Clear (0x1UL)

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_OUTCLR_PIN7_Pos (7UL)
  #define GPIO_OUTCLR_PIN7_Msk (0x1UL << GPIO_OUTCLR_PIN7_Pos)
  #define GPIO_OUTCLR_PIN7_Min (0x0UL)
  #define GPIO_OUTCLR_PIN7_Max (0x1UL)
  #define GPIO_OUTCLR_PIN7_Low (0x0UL)
  #define GPIO_OUTCLR_PIN7_High (0x1UL)
  #define GPIO_OUTCLR_PIN7_Clear (0x1UL)

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_OUTCLR_PIN8_Pos (8UL)
  #define GPIO_OUTCLR_PIN8_Msk (0x1UL << GPIO_OUTCLR_PIN8_Pos)
  #define GPIO_OUTCLR_PIN8_Min (0x0UL)
  #define GPIO_OUTCLR_PIN8_Max (0x1UL)
  #define GPIO_OUTCLR_PIN8_Low (0x0UL)
  #define GPIO_OUTCLR_PIN8_High (0x1UL)
  #define GPIO_OUTCLR_PIN8_Clear (0x1UL)

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_OUTCLR_PIN9_Pos (9UL)
  #define GPIO_OUTCLR_PIN9_Msk (0x1UL << GPIO_OUTCLR_PIN9_Pos)
  #define GPIO_OUTCLR_PIN9_Min (0x0UL)
  #define GPIO_OUTCLR_PIN9_Max (0x1UL)
  #define GPIO_OUTCLR_PIN9_Low (0x0UL)
  #define GPIO_OUTCLR_PIN9_High (0x1UL)
  #define GPIO_OUTCLR_PIN9_Clear (0x1UL)

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_OUTCLR_PIN10_Pos (10UL)
  #define GPIO_OUTCLR_PIN10_Msk (0x1UL << GPIO_OUTCLR_PIN10_Pos)
  #define GPIO_OUTCLR_PIN10_Min (0x0UL)
  #define GPIO_OUTCLR_PIN10_Max (0x1UL)
  #define GPIO_OUTCLR_PIN10_Low (0x0UL)
  #define GPIO_OUTCLR_PIN10_High (0x1UL)
  #define GPIO_OUTCLR_PIN10_Clear (0x1UL)

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_OUTCLR_PIN11_Pos (11UL)
  #define GPIO_OUTCLR_PIN11_Msk (0x1UL << GPIO_OUTCLR_PIN11_Pos)
  #define GPIO_OUTCLR_PIN11_Min (0x0UL)
  #define GPIO_OUTCLR_PIN11_Max (0x1UL)
  #define GPIO_OUTCLR_PIN11_Low (0x0UL)
  #define GPIO_OUTCLR_PIN11_High (0x1UL)
  #define GPIO_OUTCLR_PIN11_Clear (0x1UL)

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_OUTCLR_PIN12_Pos (12UL)
  #define GPIO_OUTCLR_PIN12_Msk (0x1UL << GPIO_OUTCLR_PIN12_Pos)
  #define GPIO_OUTCLR_PIN12_Min (0x0UL)
  #define GPIO_OUTCLR_PIN12_Max (0x1UL)
  #define GPIO_OUTCLR_PIN12_Low (0x0UL)
  #define GPIO_OUTCLR_PIN12_High (0x1UL)
  #define GPIO_OUTCLR_PIN12_Clear (0x1UL)

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_OUTCLR_PIN13_Pos (13UL)
  #define GPIO_OUTCLR_PIN13_Msk (0x1UL << GPIO_OUTCLR_PIN13_Pos)
  #define GPIO_OUTCLR_PIN13_Min (0x0UL)
  #define GPIO_OUTCLR_PIN13_Max (0x1UL)
  #define GPIO_OUTCLR_PIN13_Low (0x0UL)
  #define GPIO_OUTCLR_PIN13_High (0x1UL)
  #define GPIO_OUTCLR_PIN13_Clear (0x1UL)

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_OUTCLR_PIN14_Pos (14UL)
  #define GPIO_OUTCLR_PIN14_Msk (0x1UL << GPIO_OUTCLR_PIN14_Pos)
  #define GPIO_OUTCLR_PIN14_Min (0x0UL)
  #define GPIO_OUTCLR_PIN14_Max (0x1UL)
  #define GPIO_OUTCLR_PIN14_Low (0x0UL)
  #define GPIO_OUTCLR_PIN14_High (0x1UL)
  #define GPIO_OUTCLR_PIN14_Clear (0x1UL)

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_OUTCLR_PIN15_Pos (15UL)
  #define GPIO_OUTCLR_PIN15_Msk (0x1UL << GPIO_OUTCLR_PIN15_Pos)
  #define GPIO_OUTCLR_PIN15_Min (0x0UL)
  #define GPIO_OUTCLR_PIN15_Max (0x1UL)
  #define GPIO_OUTCLR_PIN15_Low (0x0UL)
  #define GPIO_OUTCLR_PIN15_High (0x1UL)
  #define GPIO_OUTCLR_PIN15_Clear (0x1UL)

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_OUTCLR_PIN16_Pos (16UL)
  #define GPIO_OUTCLR_PIN16_Msk (0x1UL << GPIO_OUTCLR_PIN16_Pos)
  #define GPIO_OUTCLR_PIN16_Min (0x0UL)
  #define GPIO_OUTCLR_PIN16_Max (0x1UL)
  #define GPIO_OUTCLR_PIN16_Low (0x0UL)
  #define GPIO_OUTCLR_PIN16_High (0x1UL)
  #define GPIO_OUTCLR_PIN16_Clear (0x1UL)

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_OUTCLR_PIN17_Pos (17UL)
  #define GPIO_OUTCLR_PIN17_Msk (0x1UL << GPIO_OUTCLR_PIN17_Pos)
  #define GPIO_OUTCLR_PIN17_Min (0x0UL)
  #define GPIO_OUTCLR_PIN17_Max (0x1UL)
  #define GPIO_OUTCLR_PIN17_Low (0x0UL)
  #define GPIO_OUTCLR_PIN17_High (0x1UL)
  #define GPIO_OUTCLR_PIN17_Clear (0x1UL)

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_OUTCLR_PIN18_Pos (18UL)
  #define GPIO_OUTCLR_PIN18_Msk (0x1UL << GPIO_OUTCLR_PIN18_Pos)
  #define GPIO_OUTCLR_PIN18_Min (0x0UL)
  #define GPIO_OUTCLR_PIN18_Max (0x1UL)
  #define GPIO_OUTCLR_PIN18_Low (0x0UL)
  #define GPIO_OUTCLR_PIN18_High (0x1UL)
  #define GPIO_OUTCLR_PIN18_Clear (0x1UL)

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_OUTCLR_PIN19_Pos (19UL)
  #define GPIO_OUTCLR_PIN19_Msk (0x1UL << GPIO_OUTCLR_PIN19_Pos)
  #define GPIO_OUTCLR_PIN19_Min (0x0UL)
  #define GPIO_OUTCLR_PIN19_Max (0x1UL)
  #define GPIO_OUTCLR_PIN19_Low (0x0UL)
  #define GPIO_OUTCLR_PIN19_High (0x1UL)
  #define GPIO_OUTCLR_PIN19_Clear (0x1UL)

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_OUTCLR_PIN20_Pos (20UL)
  #define GPIO_OUTCLR_PIN20_Msk (0x1UL << GPIO_OUTCLR_PIN20_Pos)
  #define GPIO_OUTCLR_PIN20_Min (0x0UL)
  #define GPIO_OUTCLR_PIN20_Max (0x1UL)
  #define GPIO_OUTCLR_PIN20_Low (0x0UL)
  #define GPIO_OUTCLR_PIN20_High (0x1UL)
  #define GPIO_OUTCLR_PIN20_Clear (0x1UL)

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_OUTCLR_PIN21_Pos (21UL)
  #define GPIO_OUTCLR_PIN21_Msk (0x1UL << GPIO_OUTCLR_PIN21_Pos)
  #define GPIO_OUTCLR_PIN21_Min (0x0UL)
  #define GPIO_OUTCLR_PIN21_Max (0x1UL)
  #define GPIO_OUTCLR_PIN21_Low (0x0UL)
  #define GPIO_OUTCLR_PIN21_High (0x1UL)
  #define GPIO_OUTCLR_PIN21_Clear (0x1UL)

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_OUTCLR_PIN22_Pos (22UL)
  #define GPIO_OUTCLR_PIN22_Msk (0x1UL << GPIO_OUTCLR_PIN22_Pos)
  #define GPIO_OUTCLR_PIN22_Min (0x0UL)
  #define GPIO_OUTCLR_PIN22_Max (0x1UL)
  #define GPIO_OUTCLR_PIN22_Low (0x0UL)
  #define GPIO_OUTCLR_PIN22_High (0x1UL)
  #define GPIO_OUTCLR_PIN22_Clear (0x1UL)

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_OUTCLR_PIN23_Pos (23UL)
  #define GPIO_OUTCLR_PIN23_Msk (0x1UL << GPIO_OUTCLR_PIN23_Pos)
  #define GPIO_OUTCLR_PIN23_Min (0x0UL)
  #define GPIO_OUTCLR_PIN23_Max (0x1UL)
  #define GPIO_OUTCLR_PIN23_Low (0x0UL)
  #define GPIO_OUTCLR_PIN23_High (0x1UL)
  #define GPIO_OUTCLR_PIN23_Clear (0x1UL)

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_OUTCLR_PIN24_Pos (24UL)
  #define GPIO_OUTCLR_PIN24_Msk (0x1UL << GPIO_OUTCLR_PIN24_Pos)
  #define GPIO_OUTCLR_PIN24_Min (0x0UL)
  #define GPIO_OUTCLR_PIN24_Max (0x1UL)
  #define GPIO_OUTCLR_PIN24_Low (0x0UL)
  #define GPIO_OUTCLR_PIN24_High (0x1UL)
  #define GPIO_OUTCLR_PIN24_Clear (0x1UL)

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_OUTCLR_PIN25_Pos (25UL)
  #define GPIO_OUTCLR_PIN25_Msk (0x1UL << GPIO_OUTCLR_PIN25_Pos)
  #define GPIO_OUTCLR_PIN25_Min (0x0UL)
  #define GPIO_OUTCLR_PIN25_Max (0x1UL)
  #define GPIO_OUTCLR_PIN25_Low (0x0UL)
  #define GPIO_OUTCLR_PIN25_High (0x1UL)
  #define GPIO_OUTCLR_PIN25_Clear (0x1UL)

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_OUTCLR_PIN26_Pos (26UL)
  #define GPIO_OUTCLR_PIN26_Msk (0x1UL << GPIO_OUTCLR_PIN26_Pos)
  #define GPIO_OUTCLR_PIN26_Min (0x0UL)
  #define GPIO_OUTCLR_PIN26_Max (0x1UL)
  #define GPIO_OUTCLR_PIN26_Low (0x0UL)
  #define GPIO_OUTCLR_PIN26_High (0x1UL)
  #define GPIO_OUTCLR_PIN26_Clear (0x1UL)

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_OUTCLR_PIN27_Pos (27UL)
  #define GPIO_OUTCLR_PIN27_Msk (0x1UL << GPIO_OUTCLR_PIN27_Pos)
  #define GPIO_OUTCLR_PIN27_Min (0x0UL)
  #define GPIO_OUTCLR_PIN27_Max (0x1UL)
  #define GPIO_OUTCLR_PIN27_Low (0x0UL)
  #define GPIO_OUTCLR_PIN27_High (0x1UL)
  #define GPIO_OUTCLR_PIN27_Clear (0x1UL)

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_OUTCLR_PIN28_Pos (28UL)
  #define GPIO_OUTCLR_PIN28_Msk (0x1UL << GPIO_OUTCLR_PIN28_Pos)
  #define GPIO_OUTCLR_PIN28_Min (0x0UL)
  #define GPIO_OUTCLR_PIN28_Max (0x1UL)
  #define GPIO_OUTCLR_PIN28_Low (0x0UL)
  #define GPIO_OUTCLR_PIN28_High (0x1UL)
  #define GPIO_OUTCLR_PIN28_Clear (0x1UL)

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_OUTCLR_PIN29_Pos (29UL)
  #define GPIO_OUTCLR_PIN29_Msk (0x1UL << GPIO_OUTCLR_PIN29_Pos)
  #define GPIO_OUTCLR_PIN29_Min (0x0UL)
  #define GPIO_OUTCLR_PIN29_Max (0x1UL)
  #define GPIO_OUTCLR_PIN29_Low (0x0UL)
  #define GPIO_OUTCLR_PIN29_High (0x1UL)
  #define GPIO_OUTCLR_PIN29_Clear (0x1UL)

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_OUTCLR_PIN30_Pos (30UL)
  #define GPIO_OUTCLR_PIN30_Msk (0x1UL << GPIO_OUTCLR_PIN30_Pos)
  #define GPIO_OUTCLR_PIN30_Min (0x0UL)
  #define GPIO_OUTCLR_PIN30_Max (0x1UL)
  #define GPIO_OUTCLR_PIN30_Low (0x0UL)
  #define GPIO_OUTCLR_PIN30_High (0x1UL)
  #define GPIO_OUTCLR_PIN30_Clear (0x1UL)

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_OUTCLR_PIN31_Pos (31UL)
  #define GPIO_OUTCLR_PIN31_Msk (0x1UL << GPIO_OUTCLR_PIN31_Pos)
  #define GPIO_OUTCLR_PIN31_Min (0x0UL)
  #define GPIO_OUTCLR_PIN31_Max (0x1UL)
  #define GPIO_OUTCLR_PIN31_Low (0x0UL)
  #define GPIO_OUTCLR_PIN31_High (0x1UL)
  #define GPIO_OUTCLR_PIN31_Clear (0x1UL)


/* GPIO_IN: Read GPIO port */
  #define GPIO_IN_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_IN_PIN0_Pos (0UL)
  #define GPIO_IN_PIN0_Msk (0x1UL << GPIO_IN_PIN0_Pos)
  #define GPIO_IN_PIN0_Min (0x0UL)
  #define GPIO_IN_PIN0_Max (0x1UL)
  #define GPIO_IN_PIN0_Low (0x0UL)
  #define GPIO_IN_PIN0_High (0x1UL)

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_IN_PIN1_Pos (1UL)
  #define GPIO_IN_PIN1_Msk (0x1UL << GPIO_IN_PIN1_Pos)
  #define GPIO_IN_PIN1_Min (0x0UL)
  #define GPIO_IN_PIN1_Max (0x1UL)
  #define GPIO_IN_PIN1_Low (0x0UL)
  #define GPIO_IN_PIN1_High (0x1UL)

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_IN_PIN2_Pos (2UL)
  #define GPIO_IN_PIN2_Msk (0x1UL << GPIO_IN_PIN2_Pos)
  #define GPIO_IN_PIN2_Min (0x0UL)
  #define GPIO_IN_PIN2_Max (0x1UL)
  #define GPIO_IN_PIN2_Low (0x0UL)
  #define GPIO_IN_PIN2_High (0x1UL)

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_IN_PIN3_Pos (3UL)
  #define GPIO_IN_PIN3_Msk (0x1UL << GPIO_IN_PIN3_Pos)
  #define GPIO_IN_PIN3_Min (0x0UL)
  #define GPIO_IN_PIN3_Max (0x1UL)
  #define GPIO_IN_PIN3_Low (0x0UL)
  #define GPIO_IN_PIN3_High (0x1UL)

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_IN_PIN4_Pos (4UL)
  #define GPIO_IN_PIN4_Msk (0x1UL << GPIO_IN_PIN4_Pos)
  #define GPIO_IN_PIN4_Min (0x0UL)
  #define GPIO_IN_PIN4_Max (0x1UL)
  #define GPIO_IN_PIN4_Low (0x0UL)
  #define GPIO_IN_PIN4_High (0x1UL)

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_IN_PIN5_Pos (5UL)
  #define GPIO_IN_PIN5_Msk (0x1UL << GPIO_IN_PIN5_Pos)
  #define GPIO_IN_PIN5_Min (0x0UL)
  #define GPIO_IN_PIN5_Max (0x1UL)
  #define GPIO_IN_PIN5_Low (0x0UL)
  #define GPIO_IN_PIN5_High (0x1UL)

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_IN_PIN6_Pos (6UL)
  #define GPIO_IN_PIN6_Msk (0x1UL << GPIO_IN_PIN6_Pos)
  #define GPIO_IN_PIN6_Min (0x0UL)
  #define GPIO_IN_PIN6_Max (0x1UL)
  #define GPIO_IN_PIN6_Low (0x0UL)
  #define GPIO_IN_PIN6_High (0x1UL)

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_IN_PIN7_Pos (7UL)
  #define GPIO_IN_PIN7_Msk (0x1UL << GPIO_IN_PIN7_Pos)
  #define GPIO_IN_PIN7_Min (0x0UL)
  #define GPIO_IN_PIN7_Max (0x1UL)
  #define GPIO_IN_PIN7_Low (0x0UL)
  #define GPIO_IN_PIN7_High (0x1UL)

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_IN_PIN8_Pos (8UL)
  #define GPIO_IN_PIN8_Msk (0x1UL << GPIO_IN_PIN8_Pos)
  #define GPIO_IN_PIN8_Min (0x0UL)
  #define GPIO_IN_PIN8_Max (0x1UL)
  #define GPIO_IN_PIN8_Low (0x0UL)
  #define GPIO_IN_PIN8_High (0x1UL)

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_IN_PIN9_Pos (9UL)
  #define GPIO_IN_PIN9_Msk (0x1UL << GPIO_IN_PIN9_Pos)
  #define GPIO_IN_PIN9_Min (0x0UL)
  #define GPIO_IN_PIN9_Max (0x1UL)
  #define GPIO_IN_PIN9_Low (0x0UL)
  #define GPIO_IN_PIN9_High (0x1UL)

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_IN_PIN10_Pos (10UL)
  #define GPIO_IN_PIN10_Msk (0x1UL << GPIO_IN_PIN10_Pos)
  #define GPIO_IN_PIN10_Min (0x0UL)
  #define GPIO_IN_PIN10_Max (0x1UL)
  #define GPIO_IN_PIN10_Low (0x0UL)
  #define GPIO_IN_PIN10_High (0x1UL)

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_IN_PIN11_Pos (11UL)
  #define GPIO_IN_PIN11_Msk (0x1UL << GPIO_IN_PIN11_Pos)
  #define GPIO_IN_PIN11_Min (0x0UL)
  #define GPIO_IN_PIN11_Max (0x1UL)
  #define GPIO_IN_PIN11_Low (0x0UL)
  #define GPIO_IN_PIN11_High (0x1UL)

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_IN_PIN12_Pos (12UL)
  #define GPIO_IN_PIN12_Msk (0x1UL << GPIO_IN_PIN12_Pos)
  #define GPIO_IN_PIN12_Min (0x0UL)
  #define GPIO_IN_PIN12_Max (0x1UL)
  #define GPIO_IN_PIN12_Low (0x0UL)
  #define GPIO_IN_PIN12_High (0x1UL)

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_IN_PIN13_Pos (13UL)
  #define GPIO_IN_PIN13_Msk (0x1UL << GPIO_IN_PIN13_Pos)
  #define GPIO_IN_PIN13_Min (0x0UL)
  #define GPIO_IN_PIN13_Max (0x1UL)
  #define GPIO_IN_PIN13_Low (0x0UL)
  #define GPIO_IN_PIN13_High (0x1UL)

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_IN_PIN14_Pos (14UL)
  #define GPIO_IN_PIN14_Msk (0x1UL << GPIO_IN_PIN14_Pos)
  #define GPIO_IN_PIN14_Min (0x0UL)
  #define GPIO_IN_PIN14_Max (0x1UL)
  #define GPIO_IN_PIN14_Low (0x0UL)
  #define GPIO_IN_PIN14_High (0x1UL)

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_IN_PIN15_Pos (15UL)
  #define GPIO_IN_PIN15_Msk (0x1UL << GPIO_IN_PIN15_Pos)
  #define GPIO_IN_PIN15_Min (0x0UL)
  #define GPIO_IN_PIN15_Max (0x1UL)
  #define GPIO_IN_PIN15_Low (0x0UL)
  #define GPIO_IN_PIN15_High (0x1UL)

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_IN_PIN16_Pos (16UL)
  #define GPIO_IN_PIN16_Msk (0x1UL << GPIO_IN_PIN16_Pos)
  #define GPIO_IN_PIN16_Min (0x0UL)
  #define GPIO_IN_PIN16_Max (0x1UL)
  #define GPIO_IN_PIN16_Low (0x0UL)
  #define GPIO_IN_PIN16_High (0x1UL)

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_IN_PIN17_Pos (17UL)
  #define GPIO_IN_PIN17_Msk (0x1UL << GPIO_IN_PIN17_Pos)
  #define GPIO_IN_PIN17_Min (0x0UL)
  #define GPIO_IN_PIN17_Max (0x1UL)
  #define GPIO_IN_PIN17_Low (0x0UL)
  #define GPIO_IN_PIN17_High (0x1UL)

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_IN_PIN18_Pos (18UL)
  #define GPIO_IN_PIN18_Msk (0x1UL << GPIO_IN_PIN18_Pos)
  #define GPIO_IN_PIN18_Min (0x0UL)
  #define GPIO_IN_PIN18_Max (0x1UL)
  #define GPIO_IN_PIN18_Low (0x0UL)
  #define GPIO_IN_PIN18_High (0x1UL)

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_IN_PIN19_Pos (19UL)
  #define GPIO_IN_PIN19_Msk (0x1UL << GPIO_IN_PIN19_Pos)
  #define GPIO_IN_PIN19_Min (0x0UL)
  #define GPIO_IN_PIN19_Max (0x1UL)
  #define GPIO_IN_PIN19_Low (0x0UL)
  #define GPIO_IN_PIN19_High (0x1UL)

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_IN_PIN20_Pos (20UL)
  #define GPIO_IN_PIN20_Msk (0x1UL << GPIO_IN_PIN20_Pos)
  #define GPIO_IN_PIN20_Min (0x0UL)
  #define GPIO_IN_PIN20_Max (0x1UL)
  #define GPIO_IN_PIN20_Low (0x0UL)
  #define GPIO_IN_PIN20_High (0x1UL)

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_IN_PIN21_Pos (21UL)
  #define GPIO_IN_PIN21_Msk (0x1UL << GPIO_IN_PIN21_Pos)
  #define GPIO_IN_PIN21_Min (0x0UL)
  #define GPIO_IN_PIN21_Max (0x1UL)
  #define GPIO_IN_PIN21_Low (0x0UL)
  #define GPIO_IN_PIN21_High (0x1UL)

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_IN_PIN22_Pos (22UL)
  #define GPIO_IN_PIN22_Msk (0x1UL << GPIO_IN_PIN22_Pos)
  #define GPIO_IN_PIN22_Min (0x0UL)
  #define GPIO_IN_PIN22_Max (0x1UL)
  #define GPIO_IN_PIN22_Low (0x0UL)
  #define GPIO_IN_PIN22_High (0x1UL)

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_IN_PIN23_Pos (23UL)
  #define GPIO_IN_PIN23_Msk (0x1UL << GPIO_IN_PIN23_Pos)
  #define GPIO_IN_PIN23_Min (0x0UL)
  #define GPIO_IN_PIN23_Max (0x1UL)
  #define GPIO_IN_PIN23_Low (0x0UL)
  #define GPIO_IN_PIN23_High (0x1UL)

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_IN_PIN24_Pos (24UL)
  #define GPIO_IN_PIN24_Msk (0x1UL << GPIO_IN_PIN24_Pos)
  #define GPIO_IN_PIN24_Min (0x0UL)
  #define GPIO_IN_PIN24_Max (0x1UL)
  #define GPIO_IN_PIN24_Low (0x0UL)
  #define GPIO_IN_PIN24_High (0x1UL)

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_IN_PIN25_Pos (25UL)
  #define GPIO_IN_PIN25_Msk (0x1UL << GPIO_IN_PIN25_Pos)
  #define GPIO_IN_PIN25_Min (0x0UL)
  #define GPIO_IN_PIN25_Max (0x1UL)
  #define GPIO_IN_PIN25_Low (0x0UL)
  #define GPIO_IN_PIN25_High (0x1UL)

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_IN_PIN26_Pos (26UL)
  #define GPIO_IN_PIN26_Msk (0x1UL << GPIO_IN_PIN26_Pos)
  #define GPIO_IN_PIN26_Min (0x0UL)
  #define GPIO_IN_PIN26_Max (0x1UL)
  #define GPIO_IN_PIN26_Low (0x0UL)
  #define GPIO_IN_PIN26_High (0x1UL)

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_IN_PIN27_Pos (27UL)
  #define GPIO_IN_PIN27_Msk (0x1UL << GPIO_IN_PIN27_Pos)
  #define GPIO_IN_PIN27_Min (0x0UL)
  #define GPIO_IN_PIN27_Max (0x1UL)
  #define GPIO_IN_PIN27_Low (0x0UL)
  #define GPIO_IN_PIN27_High (0x1UL)

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_IN_PIN28_Pos (28UL)
  #define GPIO_IN_PIN28_Msk (0x1UL << GPIO_IN_PIN28_Pos)
  #define GPIO_IN_PIN28_Min (0x0UL)
  #define GPIO_IN_PIN28_Max (0x1UL)
  #define GPIO_IN_PIN28_Low (0x0UL)
  #define GPIO_IN_PIN28_High (0x1UL)

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_IN_PIN29_Pos (29UL)
  #define GPIO_IN_PIN29_Msk (0x1UL << GPIO_IN_PIN29_Pos)
  #define GPIO_IN_PIN29_Min (0x0UL)
  #define GPIO_IN_PIN29_Max (0x1UL)
  #define GPIO_IN_PIN29_Low (0x0UL)
  #define GPIO_IN_PIN29_High (0x1UL)

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_IN_PIN30_Pos (30UL)
  #define GPIO_IN_PIN30_Msk (0x1UL << GPIO_IN_PIN30_Pos)
  #define GPIO_IN_PIN30_Min (0x0UL)
  #define GPIO_IN_PIN30_Max (0x1UL)
  #define GPIO_IN_PIN30_Low (0x0UL)
  #define GPIO_IN_PIN30_High (0x1UL)

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_IN_PIN31_Pos (31UL)
  #define GPIO_IN_PIN31_Msk (0x1UL << GPIO_IN_PIN31_Pos)
  #define GPIO_IN_PIN31_Min (0x0UL)
  #define GPIO_IN_PIN31_Max (0x1UL)
  #define GPIO_IN_PIN31_Low (0x0UL)
  #define GPIO_IN_PIN31_High (0x1UL)


/* GPIO_DIR: Direction of GPIO pins */
  #define GPIO_DIR_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_DIR_PIN0_Pos (0UL)
  #define GPIO_DIR_PIN0_Msk (0x1UL << GPIO_DIR_PIN0_Pos)
  #define GPIO_DIR_PIN0_Min (0x0UL)
  #define GPIO_DIR_PIN0_Max (0x1UL)
  #define GPIO_DIR_PIN0_Input (0x0UL)
  #define GPIO_DIR_PIN0_Output (0x1UL)

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_DIR_PIN1_Pos (1UL)
  #define GPIO_DIR_PIN1_Msk (0x1UL << GPIO_DIR_PIN1_Pos)
  #define GPIO_DIR_PIN1_Min (0x0UL)
  #define GPIO_DIR_PIN1_Max (0x1UL)
  #define GPIO_DIR_PIN1_Input (0x0UL)
  #define GPIO_DIR_PIN1_Output (0x1UL)

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_DIR_PIN2_Pos (2UL)
  #define GPIO_DIR_PIN2_Msk (0x1UL << GPIO_DIR_PIN2_Pos)
  #define GPIO_DIR_PIN2_Min (0x0UL)
  #define GPIO_DIR_PIN2_Max (0x1UL)
  #define GPIO_DIR_PIN2_Input (0x0UL)
  #define GPIO_DIR_PIN2_Output (0x1UL)

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_DIR_PIN3_Pos (3UL)
  #define GPIO_DIR_PIN3_Msk (0x1UL << GPIO_DIR_PIN3_Pos)
  #define GPIO_DIR_PIN3_Min (0x0UL)
  #define GPIO_DIR_PIN3_Max (0x1UL)
  #define GPIO_DIR_PIN3_Input (0x0UL)
  #define GPIO_DIR_PIN3_Output (0x1UL)

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_DIR_PIN4_Pos (4UL)
  #define GPIO_DIR_PIN4_Msk (0x1UL << GPIO_DIR_PIN4_Pos)
  #define GPIO_DIR_PIN4_Min (0x0UL)
  #define GPIO_DIR_PIN4_Max (0x1UL)
  #define GPIO_DIR_PIN4_Input (0x0UL)
  #define GPIO_DIR_PIN4_Output (0x1UL)

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_DIR_PIN5_Pos (5UL)
  #define GPIO_DIR_PIN5_Msk (0x1UL << GPIO_DIR_PIN5_Pos)
  #define GPIO_DIR_PIN5_Min (0x0UL)
  #define GPIO_DIR_PIN5_Max (0x1UL)
  #define GPIO_DIR_PIN5_Input (0x0UL)
  #define GPIO_DIR_PIN5_Output (0x1UL)

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_DIR_PIN6_Pos (6UL)
  #define GPIO_DIR_PIN6_Msk (0x1UL << GPIO_DIR_PIN6_Pos)
  #define GPIO_DIR_PIN6_Min (0x0UL)
  #define GPIO_DIR_PIN6_Max (0x1UL)
  #define GPIO_DIR_PIN6_Input (0x0UL)
  #define GPIO_DIR_PIN6_Output (0x1UL)

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_DIR_PIN7_Pos (7UL)
  #define GPIO_DIR_PIN7_Msk (0x1UL << GPIO_DIR_PIN7_Pos)
  #define GPIO_DIR_PIN7_Min (0x0UL)
  #define GPIO_DIR_PIN7_Max (0x1UL)
  #define GPIO_DIR_PIN7_Input (0x0UL)
  #define GPIO_DIR_PIN7_Output (0x1UL)

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_DIR_PIN8_Pos (8UL)
  #define GPIO_DIR_PIN8_Msk (0x1UL << GPIO_DIR_PIN8_Pos)
  #define GPIO_DIR_PIN8_Min (0x0UL)
  #define GPIO_DIR_PIN8_Max (0x1UL)
  #define GPIO_DIR_PIN8_Input (0x0UL)
  #define GPIO_DIR_PIN8_Output (0x1UL)

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_DIR_PIN9_Pos (9UL)
  #define GPIO_DIR_PIN9_Msk (0x1UL << GPIO_DIR_PIN9_Pos)
  #define GPIO_DIR_PIN9_Min (0x0UL)
  #define GPIO_DIR_PIN9_Max (0x1UL)
  #define GPIO_DIR_PIN9_Input (0x0UL)
  #define GPIO_DIR_PIN9_Output (0x1UL)

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_DIR_PIN10_Pos (10UL)
  #define GPIO_DIR_PIN10_Msk (0x1UL << GPIO_DIR_PIN10_Pos)
  #define GPIO_DIR_PIN10_Min (0x0UL)
  #define GPIO_DIR_PIN10_Max (0x1UL)
  #define GPIO_DIR_PIN10_Input (0x0UL)
  #define GPIO_DIR_PIN10_Output (0x1UL)

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_DIR_PIN11_Pos (11UL)
  #define GPIO_DIR_PIN11_Msk (0x1UL << GPIO_DIR_PIN11_Pos)
  #define GPIO_DIR_PIN11_Min (0x0UL)
  #define GPIO_DIR_PIN11_Max (0x1UL)
  #define GPIO_DIR_PIN11_Input (0x0UL)
  #define GPIO_DIR_PIN11_Output (0x1UL)

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_DIR_PIN12_Pos (12UL)
  #define GPIO_DIR_PIN12_Msk (0x1UL << GPIO_DIR_PIN12_Pos)
  #define GPIO_DIR_PIN12_Min (0x0UL)
  #define GPIO_DIR_PIN12_Max (0x1UL)
  #define GPIO_DIR_PIN12_Input (0x0UL)
  #define GPIO_DIR_PIN12_Output (0x1UL)

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_DIR_PIN13_Pos (13UL)
  #define GPIO_DIR_PIN13_Msk (0x1UL << GPIO_DIR_PIN13_Pos)
  #define GPIO_DIR_PIN13_Min (0x0UL)
  #define GPIO_DIR_PIN13_Max (0x1UL)
  #define GPIO_DIR_PIN13_Input (0x0UL)
  #define GPIO_DIR_PIN13_Output (0x1UL)

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_DIR_PIN14_Pos (14UL)
  #define GPIO_DIR_PIN14_Msk (0x1UL << GPIO_DIR_PIN14_Pos)
  #define GPIO_DIR_PIN14_Min (0x0UL)
  #define GPIO_DIR_PIN14_Max (0x1UL)
  #define GPIO_DIR_PIN14_Input (0x0UL)
  #define GPIO_DIR_PIN14_Output (0x1UL)

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_DIR_PIN15_Pos (15UL)
  #define GPIO_DIR_PIN15_Msk (0x1UL << GPIO_DIR_PIN15_Pos)
  #define GPIO_DIR_PIN15_Min (0x0UL)
  #define GPIO_DIR_PIN15_Max (0x1UL)
  #define GPIO_DIR_PIN15_Input (0x0UL)
  #define GPIO_DIR_PIN15_Output (0x1UL)

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_DIR_PIN16_Pos (16UL)
  #define GPIO_DIR_PIN16_Msk (0x1UL << GPIO_DIR_PIN16_Pos)
  #define GPIO_DIR_PIN16_Min (0x0UL)
  #define GPIO_DIR_PIN16_Max (0x1UL)
  #define GPIO_DIR_PIN16_Input (0x0UL)
  #define GPIO_DIR_PIN16_Output (0x1UL)

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_DIR_PIN17_Pos (17UL)
  #define GPIO_DIR_PIN17_Msk (0x1UL << GPIO_DIR_PIN17_Pos)
  #define GPIO_DIR_PIN17_Min (0x0UL)
  #define GPIO_DIR_PIN17_Max (0x1UL)
  #define GPIO_DIR_PIN17_Input (0x0UL)
  #define GPIO_DIR_PIN17_Output (0x1UL)

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_DIR_PIN18_Pos (18UL)
  #define GPIO_DIR_PIN18_Msk (0x1UL << GPIO_DIR_PIN18_Pos)
  #define GPIO_DIR_PIN18_Min (0x0UL)
  #define GPIO_DIR_PIN18_Max (0x1UL)
  #define GPIO_DIR_PIN18_Input (0x0UL)
  #define GPIO_DIR_PIN18_Output (0x1UL)

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_DIR_PIN19_Pos (19UL)
  #define GPIO_DIR_PIN19_Msk (0x1UL << GPIO_DIR_PIN19_Pos)
  #define GPIO_DIR_PIN19_Min (0x0UL)
  #define GPIO_DIR_PIN19_Max (0x1UL)
  #define GPIO_DIR_PIN19_Input (0x0UL)
  #define GPIO_DIR_PIN19_Output (0x1UL)

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_DIR_PIN20_Pos (20UL)
  #define GPIO_DIR_PIN20_Msk (0x1UL << GPIO_DIR_PIN20_Pos)
  #define GPIO_DIR_PIN20_Min (0x0UL)
  #define GPIO_DIR_PIN20_Max (0x1UL)
  #define GPIO_DIR_PIN20_Input (0x0UL)
  #define GPIO_DIR_PIN20_Output (0x1UL)

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_DIR_PIN21_Pos (21UL)
  #define GPIO_DIR_PIN21_Msk (0x1UL << GPIO_DIR_PIN21_Pos)
  #define GPIO_DIR_PIN21_Min (0x0UL)
  #define GPIO_DIR_PIN21_Max (0x1UL)
  #define GPIO_DIR_PIN21_Input (0x0UL)
  #define GPIO_DIR_PIN21_Output (0x1UL)

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_DIR_PIN22_Pos (22UL)
  #define GPIO_DIR_PIN22_Msk (0x1UL << GPIO_DIR_PIN22_Pos)
  #define GPIO_DIR_PIN22_Min (0x0UL)
  #define GPIO_DIR_PIN22_Max (0x1UL)
  #define GPIO_DIR_PIN22_Input (0x0UL)
  #define GPIO_DIR_PIN22_Output (0x1UL)

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_DIR_PIN23_Pos (23UL)
  #define GPIO_DIR_PIN23_Msk (0x1UL << GPIO_DIR_PIN23_Pos)
  #define GPIO_DIR_PIN23_Min (0x0UL)
  #define GPIO_DIR_PIN23_Max (0x1UL)
  #define GPIO_DIR_PIN23_Input (0x0UL)
  #define GPIO_DIR_PIN23_Output (0x1UL)

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_DIR_PIN24_Pos (24UL)
  #define GPIO_DIR_PIN24_Msk (0x1UL << GPIO_DIR_PIN24_Pos)
  #define GPIO_DIR_PIN24_Min (0x0UL)
  #define GPIO_DIR_PIN24_Max (0x1UL)
  #define GPIO_DIR_PIN24_Input (0x0UL)
  #define GPIO_DIR_PIN24_Output (0x1UL)

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_DIR_PIN25_Pos (25UL)
  #define GPIO_DIR_PIN25_Msk (0x1UL << GPIO_DIR_PIN25_Pos)
  #define GPIO_DIR_PIN25_Min (0x0UL)
  #define GPIO_DIR_PIN25_Max (0x1UL)
  #define GPIO_DIR_PIN25_Input (0x0UL)
  #define GPIO_DIR_PIN25_Output (0x1UL)

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_DIR_PIN26_Pos (26UL)
  #define GPIO_DIR_PIN26_Msk (0x1UL << GPIO_DIR_PIN26_Pos)
  #define GPIO_DIR_PIN26_Min (0x0UL)
  #define GPIO_DIR_PIN26_Max (0x1UL)
  #define GPIO_DIR_PIN26_Input (0x0UL)
  #define GPIO_DIR_PIN26_Output (0x1UL)

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_DIR_PIN27_Pos (27UL)
  #define GPIO_DIR_PIN27_Msk (0x1UL << GPIO_DIR_PIN27_Pos)
  #define GPIO_DIR_PIN27_Min (0x0UL)
  #define GPIO_DIR_PIN27_Max (0x1UL)
  #define GPIO_DIR_PIN27_Input (0x0UL)
  #define GPIO_DIR_PIN27_Output (0x1UL)

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_DIR_PIN28_Pos (28UL)
  #define GPIO_DIR_PIN28_Msk (0x1UL << GPIO_DIR_PIN28_Pos)
  #define GPIO_DIR_PIN28_Min (0x0UL)
  #define GPIO_DIR_PIN28_Max (0x1UL)
  #define GPIO_DIR_PIN28_Input (0x0UL)
  #define GPIO_DIR_PIN28_Output (0x1UL)

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_DIR_PIN29_Pos (29UL)
  #define GPIO_DIR_PIN29_Msk (0x1UL << GPIO_DIR_PIN29_Pos)
  #define GPIO_DIR_PIN29_Min (0x0UL)
  #define GPIO_DIR_PIN29_Max (0x1UL)
  #define GPIO_DIR_PIN29_Input (0x0UL)
  #define GPIO_DIR_PIN29_Output (0x1UL)

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_DIR_PIN30_Pos (30UL)
  #define GPIO_DIR_PIN30_Msk (0x1UL << GPIO_DIR_PIN30_Pos)
  #define GPIO_DIR_PIN30_Min (0x0UL)
  #define GPIO_DIR_PIN30_Max (0x1UL)
  #define GPIO_DIR_PIN30_Input (0x0UL)
  #define GPIO_DIR_PIN30_Output (0x1UL)

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_DIR_PIN31_Pos (31UL)
  #define GPIO_DIR_PIN31_Msk (0x1UL << GPIO_DIR_PIN31_Pos)
  #define GPIO_DIR_PIN31_Min (0x0UL)
  #define GPIO_DIR_PIN31_Max (0x1UL)
  #define GPIO_DIR_PIN31_Input (0x0UL)
  #define GPIO_DIR_PIN31_Output (0x1UL)


/* GPIO_DIRSET: DIR set register */
  #define GPIO_DIRSET_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Set as output pin 0 */
  #define GPIO_DIRSET_PIN0_Pos (0UL)
  #define GPIO_DIRSET_PIN0_Msk (0x1UL << GPIO_DIRSET_PIN0_Pos)
  #define GPIO_DIRSET_PIN0_Min (0x0UL)
  #define GPIO_DIRSET_PIN0_Max (0x1UL)
  #define GPIO_DIRSET_PIN0_Input (0x0UL)
  #define GPIO_DIRSET_PIN0_Output (0x1UL)
  #define GPIO_DIRSET_PIN0_Set (0x1UL)

/* PIN1 @Bit 1 : Set as output pin 1 */
  #define GPIO_DIRSET_PIN1_Pos (1UL)
  #define GPIO_DIRSET_PIN1_Msk (0x1UL << GPIO_DIRSET_PIN1_Pos)
  #define GPIO_DIRSET_PIN1_Min (0x0UL)
  #define GPIO_DIRSET_PIN1_Max (0x1UL)
  #define GPIO_DIRSET_PIN1_Input (0x0UL)
  #define GPIO_DIRSET_PIN1_Output (0x1UL)
  #define GPIO_DIRSET_PIN1_Set (0x1UL)

/* PIN2 @Bit 2 : Set as output pin 2 */
  #define GPIO_DIRSET_PIN2_Pos (2UL)
  #define GPIO_DIRSET_PIN2_Msk (0x1UL << GPIO_DIRSET_PIN2_Pos)
  #define GPIO_DIRSET_PIN2_Min (0x0UL)
  #define GPIO_DIRSET_PIN2_Max (0x1UL)
  #define GPIO_DIRSET_PIN2_Input (0x0UL)
  #define GPIO_DIRSET_PIN2_Output (0x1UL)
  #define GPIO_DIRSET_PIN2_Set (0x1UL)

/* PIN3 @Bit 3 : Set as output pin 3 */
  #define GPIO_DIRSET_PIN3_Pos (3UL)
  #define GPIO_DIRSET_PIN3_Msk (0x1UL << GPIO_DIRSET_PIN3_Pos)
  #define GPIO_DIRSET_PIN3_Min (0x0UL)
  #define GPIO_DIRSET_PIN3_Max (0x1UL)
  #define GPIO_DIRSET_PIN3_Input (0x0UL)
  #define GPIO_DIRSET_PIN3_Output (0x1UL)
  #define GPIO_DIRSET_PIN3_Set (0x1UL)

/* PIN4 @Bit 4 : Set as output pin 4 */
  #define GPIO_DIRSET_PIN4_Pos (4UL)
  #define GPIO_DIRSET_PIN4_Msk (0x1UL << GPIO_DIRSET_PIN4_Pos)
  #define GPIO_DIRSET_PIN4_Min (0x0UL)
  #define GPIO_DIRSET_PIN4_Max (0x1UL)
  #define GPIO_DIRSET_PIN4_Input (0x0UL)
  #define GPIO_DIRSET_PIN4_Output (0x1UL)
  #define GPIO_DIRSET_PIN4_Set (0x1UL)

/* PIN5 @Bit 5 : Set as output pin 5 */
  #define GPIO_DIRSET_PIN5_Pos (5UL)
  #define GPIO_DIRSET_PIN5_Msk (0x1UL << GPIO_DIRSET_PIN5_Pos)
  #define GPIO_DIRSET_PIN5_Min (0x0UL)
  #define GPIO_DIRSET_PIN5_Max (0x1UL)
  #define GPIO_DIRSET_PIN5_Input (0x0UL)
  #define GPIO_DIRSET_PIN5_Output (0x1UL)
  #define GPIO_DIRSET_PIN5_Set (0x1UL)

/* PIN6 @Bit 6 : Set as output pin 6 */
  #define GPIO_DIRSET_PIN6_Pos (6UL)
  #define GPIO_DIRSET_PIN6_Msk (0x1UL << GPIO_DIRSET_PIN6_Pos)
  #define GPIO_DIRSET_PIN6_Min (0x0UL)
  #define GPIO_DIRSET_PIN6_Max (0x1UL)
  #define GPIO_DIRSET_PIN6_Input (0x0UL)
  #define GPIO_DIRSET_PIN6_Output (0x1UL)
  #define GPIO_DIRSET_PIN6_Set (0x1UL)

/* PIN7 @Bit 7 : Set as output pin 7 */
  #define GPIO_DIRSET_PIN7_Pos (7UL)
  #define GPIO_DIRSET_PIN7_Msk (0x1UL << GPIO_DIRSET_PIN7_Pos)
  #define GPIO_DIRSET_PIN7_Min (0x0UL)
  #define GPIO_DIRSET_PIN7_Max (0x1UL)
  #define GPIO_DIRSET_PIN7_Input (0x0UL)
  #define GPIO_DIRSET_PIN7_Output (0x1UL)
  #define GPIO_DIRSET_PIN7_Set (0x1UL)

/* PIN8 @Bit 8 : Set as output pin 8 */
  #define GPIO_DIRSET_PIN8_Pos (8UL)
  #define GPIO_DIRSET_PIN8_Msk (0x1UL << GPIO_DIRSET_PIN8_Pos)
  #define GPIO_DIRSET_PIN8_Min (0x0UL)
  #define GPIO_DIRSET_PIN8_Max (0x1UL)
  #define GPIO_DIRSET_PIN8_Input (0x0UL)
  #define GPIO_DIRSET_PIN8_Output (0x1UL)
  #define GPIO_DIRSET_PIN8_Set (0x1UL)

/* PIN9 @Bit 9 : Set as output pin 9 */
  #define GPIO_DIRSET_PIN9_Pos (9UL)
  #define GPIO_DIRSET_PIN9_Msk (0x1UL << GPIO_DIRSET_PIN9_Pos)
  #define GPIO_DIRSET_PIN9_Min (0x0UL)
  #define GPIO_DIRSET_PIN9_Max (0x1UL)
  #define GPIO_DIRSET_PIN9_Input (0x0UL)
  #define GPIO_DIRSET_PIN9_Output (0x1UL)
  #define GPIO_DIRSET_PIN9_Set (0x1UL)

/* PIN10 @Bit 10 : Set as output pin 10 */
  #define GPIO_DIRSET_PIN10_Pos (10UL)
  #define GPIO_DIRSET_PIN10_Msk (0x1UL << GPIO_DIRSET_PIN10_Pos)
  #define GPIO_DIRSET_PIN10_Min (0x0UL)
  #define GPIO_DIRSET_PIN10_Max (0x1UL)
  #define GPIO_DIRSET_PIN10_Input (0x0UL)
  #define GPIO_DIRSET_PIN10_Output (0x1UL)
  #define GPIO_DIRSET_PIN10_Set (0x1UL)

/* PIN11 @Bit 11 : Set as output pin 11 */
  #define GPIO_DIRSET_PIN11_Pos (11UL)
  #define GPIO_DIRSET_PIN11_Msk (0x1UL << GPIO_DIRSET_PIN11_Pos)
  #define GPIO_DIRSET_PIN11_Min (0x0UL)
  #define GPIO_DIRSET_PIN11_Max (0x1UL)
  #define GPIO_DIRSET_PIN11_Input (0x0UL)
  #define GPIO_DIRSET_PIN11_Output (0x1UL)
  #define GPIO_DIRSET_PIN11_Set (0x1UL)

/* PIN12 @Bit 12 : Set as output pin 12 */
  #define GPIO_DIRSET_PIN12_Pos (12UL)
  #define GPIO_DIRSET_PIN12_Msk (0x1UL << GPIO_DIRSET_PIN12_Pos)
  #define GPIO_DIRSET_PIN12_Min (0x0UL)
  #define GPIO_DIRSET_PIN12_Max (0x1UL)
  #define GPIO_DIRSET_PIN12_Input (0x0UL)
  #define GPIO_DIRSET_PIN12_Output (0x1UL)
  #define GPIO_DIRSET_PIN12_Set (0x1UL)

/* PIN13 @Bit 13 : Set as output pin 13 */
  #define GPIO_DIRSET_PIN13_Pos (13UL)
  #define GPIO_DIRSET_PIN13_Msk (0x1UL << GPIO_DIRSET_PIN13_Pos)
  #define GPIO_DIRSET_PIN13_Min (0x0UL)
  #define GPIO_DIRSET_PIN13_Max (0x1UL)
  #define GPIO_DIRSET_PIN13_Input (0x0UL)
  #define GPIO_DIRSET_PIN13_Output (0x1UL)
  #define GPIO_DIRSET_PIN13_Set (0x1UL)

/* PIN14 @Bit 14 : Set as output pin 14 */
  #define GPIO_DIRSET_PIN14_Pos (14UL)
  #define GPIO_DIRSET_PIN14_Msk (0x1UL << GPIO_DIRSET_PIN14_Pos)
  #define GPIO_DIRSET_PIN14_Min (0x0UL)
  #define GPIO_DIRSET_PIN14_Max (0x1UL)
  #define GPIO_DIRSET_PIN14_Input (0x0UL)
  #define GPIO_DIRSET_PIN14_Output (0x1UL)
  #define GPIO_DIRSET_PIN14_Set (0x1UL)

/* PIN15 @Bit 15 : Set as output pin 15 */
  #define GPIO_DIRSET_PIN15_Pos (15UL)
  #define GPIO_DIRSET_PIN15_Msk (0x1UL << GPIO_DIRSET_PIN15_Pos)
  #define GPIO_DIRSET_PIN15_Min (0x0UL)
  #define GPIO_DIRSET_PIN15_Max (0x1UL)
  #define GPIO_DIRSET_PIN15_Input (0x0UL)
  #define GPIO_DIRSET_PIN15_Output (0x1UL)
  #define GPIO_DIRSET_PIN15_Set (0x1UL)

/* PIN16 @Bit 16 : Set as output pin 16 */
  #define GPIO_DIRSET_PIN16_Pos (16UL)
  #define GPIO_DIRSET_PIN16_Msk (0x1UL << GPIO_DIRSET_PIN16_Pos)
  #define GPIO_DIRSET_PIN16_Min (0x0UL)
  #define GPIO_DIRSET_PIN16_Max (0x1UL)
  #define GPIO_DIRSET_PIN16_Input (0x0UL)
  #define GPIO_DIRSET_PIN16_Output (0x1UL)
  #define GPIO_DIRSET_PIN16_Set (0x1UL)

/* PIN17 @Bit 17 : Set as output pin 17 */
  #define GPIO_DIRSET_PIN17_Pos (17UL)
  #define GPIO_DIRSET_PIN17_Msk (0x1UL << GPIO_DIRSET_PIN17_Pos)
  #define GPIO_DIRSET_PIN17_Min (0x0UL)
  #define GPIO_DIRSET_PIN17_Max (0x1UL)
  #define GPIO_DIRSET_PIN17_Input (0x0UL)
  #define GPIO_DIRSET_PIN17_Output (0x1UL)
  #define GPIO_DIRSET_PIN17_Set (0x1UL)

/* PIN18 @Bit 18 : Set as output pin 18 */
  #define GPIO_DIRSET_PIN18_Pos (18UL)
  #define GPIO_DIRSET_PIN18_Msk (0x1UL << GPIO_DIRSET_PIN18_Pos)
  #define GPIO_DIRSET_PIN18_Min (0x0UL)
  #define GPIO_DIRSET_PIN18_Max (0x1UL)
  #define GPIO_DIRSET_PIN18_Input (0x0UL)
  #define GPIO_DIRSET_PIN18_Output (0x1UL)
  #define GPIO_DIRSET_PIN18_Set (0x1UL)

/* PIN19 @Bit 19 : Set as output pin 19 */
  #define GPIO_DIRSET_PIN19_Pos (19UL)
  #define GPIO_DIRSET_PIN19_Msk (0x1UL << GPIO_DIRSET_PIN19_Pos)
  #define GPIO_DIRSET_PIN19_Min (0x0UL)
  #define GPIO_DIRSET_PIN19_Max (0x1UL)
  #define GPIO_DIRSET_PIN19_Input (0x0UL)
  #define GPIO_DIRSET_PIN19_Output (0x1UL)
  #define GPIO_DIRSET_PIN19_Set (0x1UL)

/* PIN20 @Bit 20 : Set as output pin 20 */
  #define GPIO_DIRSET_PIN20_Pos (20UL)
  #define GPIO_DIRSET_PIN20_Msk (0x1UL << GPIO_DIRSET_PIN20_Pos)
  #define GPIO_DIRSET_PIN20_Min (0x0UL)
  #define GPIO_DIRSET_PIN20_Max (0x1UL)
  #define GPIO_DIRSET_PIN20_Input (0x0UL)
  #define GPIO_DIRSET_PIN20_Output (0x1UL)
  #define GPIO_DIRSET_PIN20_Set (0x1UL)

/* PIN21 @Bit 21 : Set as output pin 21 */
  #define GPIO_DIRSET_PIN21_Pos (21UL)
  #define GPIO_DIRSET_PIN21_Msk (0x1UL << GPIO_DIRSET_PIN21_Pos)
  #define GPIO_DIRSET_PIN21_Min (0x0UL)
  #define GPIO_DIRSET_PIN21_Max (0x1UL)
  #define GPIO_DIRSET_PIN21_Input (0x0UL)
  #define GPIO_DIRSET_PIN21_Output (0x1UL)
  #define GPIO_DIRSET_PIN21_Set (0x1UL)

/* PIN22 @Bit 22 : Set as output pin 22 */
  #define GPIO_DIRSET_PIN22_Pos (22UL)
  #define GPIO_DIRSET_PIN22_Msk (0x1UL << GPIO_DIRSET_PIN22_Pos)
  #define GPIO_DIRSET_PIN22_Min (0x0UL)
  #define GPIO_DIRSET_PIN22_Max (0x1UL)
  #define GPIO_DIRSET_PIN22_Input (0x0UL)
  #define GPIO_DIRSET_PIN22_Output (0x1UL)
  #define GPIO_DIRSET_PIN22_Set (0x1UL)

/* PIN23 @Bit 23 : Set as output pin 23 */
  #define GPIO_DIRSET_PIN23_Pos (23UL)
  #define GPIO_DIRSET_PIN23_Msk (0x1UL << GPIO_DIRSET_PIN23_Pos)
  #define GPIO_DIRSET_PIN23_Min (0x0UL)
  #define GPIO_DIRSET_PIN23_Max (0x1UL)
  #define GPIO_DIRSET_PIN23_Input (0x0UL)
  #define GPIO_DIRSET_PIN23_Output (0x1UL)
  #define GPIO_DIRSET_PIN23_Set (0x1UL)

/* PIN24 @Bit 24 : Set as output pin 24 */
  #define GPIO_DIRSET_PIN24_Pos (24UL)
  #define GPIO_DIRSET_PIN24_Msk (0x1UL << GPIO_DIRSET_PIN24_Pos)
  #define GPIO_DIRSET_PIN24_Min (0x0UL)
  #define GPIO_DIRSET_PIN24_Max (0x1UL)
  #define GPIO_DIRSET_PIN24_Input (0x0UL)
  #define GPIO_DIRSET_PIN24_Output (0x1UL)
  #define GPIO_DIRSET_PIN24_Set (0x1UL)

/* PIN25 @Bit 25 : Set as output pin 25 */
  #define GPIO_DIRSET_PIN25_Pos (25UL)
  #define GPIO_DIRSET_PIN25_Msk (0x1UL << GPIO_DIRSET_PIN25_Pos)
  #define GPIO_DIRSET_PIN25_Min (0x0UL)
  #define GPIO_DIRSET_PIN25_Max (0x1UL)
  #define GPIO_DIRSET_PIN25_Input (0x0UL)
  #define GPIO_DIRSET_PIN25_Output (0x1UL)
  #define GPIO_DIRSET_PIN25_Set (0x1UL)

/* PIN26 @Bit 26 : Set as output pin 26 */
  #define GPIO_DIRSET_PIN26_Pos (26UL)
  #define GPIO_DIRSET_PIN26_Msk (0x1UL << GPIO_DIRSET_PIN26_Pos)
  #define GPIO_DIRSET_PIN26_Min (0x0UL)
  #define GPIO_DIRSET_PIN26_Max (0x1UL)
  #define GPIO_DIRSET_PIN26_Input (0x0UL)
  #define GPIO_DIRSET_PIN26_Output (0x1UL)
  #define GPIO_DIRSET_PIN26_Set (0x1UL)

/* PIN27 @Bit 27 : Set as output pin 27 */
  #define GPIO_DIRSET_PIN27_Pos (27UL)
  #define GPIO_DIRSET_PIN27_Msk (0x1UL << GPIO_DIRSET_PIN27_Pos)
  #define GPIO_DIRSET_PIN27_Min (0x0UL)
  #define GPIO_DIRSET_PIN27_Max (0x1UL)
  #define GPIO_DIRSET_PIN27_Input (0x0UL)
  #define GPIO_DIRSET_PIN27_Output (0x1UL)
  #define GPIO_DIRSET_PIN27_Set (0x1UL)

/* PIN28 @Bit 28 : Set as output pin 28 */
  #define GPIO_DIRSET_PIN28_Pos (28UL)
  #define GPIO_DIRSET_PIN28_Msk (0x1UL << GPIO_DIRSET_PIN28_Pos)
  #define GPIO_DIRSET_PIN28_Min (0x0UL)
  #define GPIO_DIRSET_PIN28_Max (0x1UL)
  #define GPIO_DIRSET_PIN28_Input (0x0UL)
  #define GPIO_DIRSET_PIN28_Output (0x1UL)
  #define GPIO_DIRSET_PIN28_Set (0x1UL)

/* PIN29 @Bit 29 : Set as output pin 29 */
  #define GPIO_DIRSET_PIN29_Pos (29UL)
  #define GPIO_DIRSET_PIN29_Msk (0x1UL << GPIO_DIRSET_PIN29_Pos)
  #define GPIO_DIRSET_PIN29_Min (0x0UL)
  #define GPIO_DIRSET_PIN29_Max (0x1UL)
  #define GPIO_DIRSET_PIN29_Input (0x0UL)
  #define GPIO_DIRSET_PIN29_Output (0x1UL)
  #define GPIO_DIRSET_PIN29_Set (0x1UL)

/* PIN30 @Bit 30 : Set as output pin 30 */
  #define GPIO_DIRSET_PIN30_Pos (30UL)
  #define GPIO_DIRSET_PIN30_Msk (0x1UL << GPIO_DIRSET_PIN30_Pos)
  #define GPIO_DIRSET_PIN30_Min (0x0UL)
  #define GPIO_DIRSET_PIN30_Max (0x1UL)
  #define GPIO_DIRSET_PIN30_Input (0x0UL)
  #define GPIO_DIRSET_PIN30_Output (0x1UL)
  #define GPIO_DIRSET_PIN30_Set (0x1UL)

/* PIN31 @Bit 31 : Set as output pin 31 */
  #define GPIO_DIRSET_PIN31_Pos (31UL)
  #define GPIO_DIRSET_PIN31_Msk (0x1UL << GPIO_DIRSET_PIN31_Pos)
  #define GPIO_DIRSET_PIN31_Min (0x0UL)
  #define GPIO_DIRSET_PIN31_Max (0x1UL)
  #define GPIO_DIRSET_PIN31_Input (0x0UL)
  #define GPIO_DIRSET_PIN31_Output (0x1UL)
  #define GPIO_DIRSET_PIN31_Set (0x1UL)


/* GPIO_DIRCLR: DIR clear register */
  #define GPIO_DIRCLR_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Set as input pin 0 */
  #define GPIO_DIRCLR_PIN0_Pos (0UL)
  #define GPIO_DIRCLR_PIN0_Msk (0x1UL << GPIO_DIRCLR_PIN0_Pos)
  #define GPIO_DIRCLR_PIN0_Min (0x0UL)
  #define GPIO_DIRCLR_PIN0_Max (0x1UL)
  #define GPIO_DIRCLR_PIN0_Input (0x0UL)
  #define GPIO_DIRCLR_PIN0_Output (0x1UL)
  #define GPIO_DIRCLR_PIN0_Clear (0x1UL)

/* PIN1 @Bit 1 : Set as input pin 1 */
  #define GPIO_DIRCLR_PIN1_Pos (1UL)
  #define GPIO_DIRCLR_PIN1_Msk (0x1UL << GPIO_DIRCLR_PIN1_Pos)
  #define GPIO_DIRCLR_PIN1_Min (0x0UL)
  #define GPIO_DIRCLR_PIN1_Max (0x1UL)
  #define GPIO_DIRCLR_PIN1_Input (0x0UL)
  #define GPIO_DIRCLR_PIN1_Output (0x1UL)
  #define GPIO_DIRCLR_PIN1_Clear (0x1UL)

/* PIN2 @Bit 2 : Set as input pin 2 */
  #define GPIO_DIRCLR_PIN2_Pos (2UL)
  #define GPIO_DIRCLR_PIN2_Msk (0x1UL << GPIO_DIRCLR_PIN2_Pos)
  #define GPIO_DIRCLR_PIN2_Min (0x0UL)
  #define GPIO_DIRCLR_PIN2_Max (0x1UL)
  #define GPIO_DIRCLR_PIN2_Input (0x0UL)
  #define GPIO_DIRCLR_PIN2_Output (0x1UL)
  #define GPIO_DIRCLR_PIN2_Clear (0x1UL)

/* PIN3 @Bit 3 : Set as input pin 3 */
  #define GPIO_DIRCLR_PIN3_Pos (3UL)
  #define GPIO_DIRCLR_PIN3_Msk (0x1UL << GPIO_DIRCLR_PIN3_Pos)
  #define GPIO_DIRCLR_PIN3_Min (0x0UL)
  #define GPIO_DIRCLR_PIN3_Max (0x1UL)
  #define GPIO_DIRCLR_PIN3_Input (0x0UL)
  #define GPIO_DIRCLR_PIN3_Output (0x1UL)
  #define GPIO_DIRCLR_PIN3_Clear (0x1UL)

/* PIN4 @Bit 4 : Set as input pin 4 */
  #define GPIO_DIRCLR_PIN4_Pos (4UL)
  #define GPIO_DIRCLR_PIN4_Msk (0x1UL << GPIO_DIRCLR_PIN4_Pos)
  #define GPIO_DIRCLR_PIN4_Min (0x0UL)
  #define GPIO_DIRCLR_PIN4_Max (0x1UL)
  #define GPIO_DIRCLR_PIN4_Input (0x0UL)
  #define GPIO_DIRCLR_PIN4_Output (0x1UL)
  #define GPIO_DIRCLR_PIN4_Clear (0x1UL)

/* PIN5 @Bit 5 : Set as input pin 5 */
  #define GPIO_DIRCLR_PIN5_Pos (5UL)
  #define GPIO_DIRCLR_PIN5_Msk (0x1UL << GPIO_DIRCLR_PIN5_Pos)
  #define GPIO_DIRCLR_PIN5_Min (0x0UL)
  #define GPIO_DIRCLR_PIN5_Max (0x1UL)
  #define GPIO_DIRCLR_PIN5_Input (0x0UL)
  #define GPIO_DIRCLR_PIN5_Output (0x1UL)
  #define GPIO_DIRCLR_PIN5_Clear (0x1UL)

/* PIN6 @Bit 6 : Set as input pin 6 */
  #define GPIO_DIRCLR_PIN6_Pos (6UL)
  #define GPIO_DIRCLR_PIN6_Msk (0x1UL << GPIO_DIRCLR_PIN6_Pos)
  #define GPIO_DIRCLR_PIN6_Min (0x0UL)
  #define GPIO_DIRCLR_PIN6_Max (0x1UL)
  #define GPIO_DIRCLR_PIN6_Input (0x0UL)
  #define GPIO_DIRCLR_PIN6_Output (0x1UL)
  #define GPIO_DIRCLR_PIN6_Clear (0x1UL)

/* PIN7 @Bit 7 : Set as input pin 7 */
  #define GPIO_DIRCLR_PIN7_Pos (7UL)
  #define GPIO_DIRCLR_PIN7_Msk (0x1UL << GPIO_DIRCLR_PIN7_Pos)
  #define GPIO_DIRCLR_PIN7_Min (0x0UL)
  #define GPIO_DIRCLR_PIN7_Max (0x1UL)
  #define GPIO_DIRCLR_PIN7_Input (0x0UL)
  #define GPIO_DIRCLR_PIN7_Output (0x1UL)
  #define GPIO_DIRCLR_PIN7_Clear (0x1UL)

/* PIN8 @Bit 8 : Set as input pin 8 */
  #define GPIO_DIRCLR_PIN8_Pos (8UL)
  #define GPIO_DIRCLR_PIN8_Msk (0x1UL << GPIO_DIRCLR_PIN8_Pos)
  #define GPIO_DIRCLR_PIN8_Min (0x0UL)
  #define GPIO_DIRCLR_PIN8_Max (0x1UL)
  #define GPIO_DIRCLR_PIN8_Input (0x0UL)
  #define GPIO_DIRCLR_PIN8_Output (0x1UL)
  #define GPIO_DIRCLR_PIN8_Clear (0x1UL)

/* PIN9 @Bit 9 : Set as input pin 9 */
  #define GPIO_DIRCLR_PIN9_Pos (9UL)
  #define GPIO_DIRCLR_PIN9_Msk (0x1UL << GPIO_DIRCLR_PIN9_Pos)
  #define GPIO_DIRCLR_PIN9_Min (0x0UL)
  #define GPIO_DIRCLR_PIN9_Max (0x1UL)
  #define GPIO_DIRCLR_PIN9_Input (0x0UL)
  #define GPIO_DIRCLR_PIN9_Output (0x1UL)
  #define GPIO_DIRCLR_PIN9_Clear (0x1UL)

/* PIN10 @Bit 10 : Set as input pin 10 */
  #define GPIO_DIRCLR_PIN10_Pos (10UL)
  #define GPIO_DIRCLR_PIN10_Msk (0x1UL << GPIO_DIRCLR_PIN10_Pos)
  #define GPIO_DIRCLR_PIN10_Min (0x0UL)
  #define GPIO_DIRCLR_PIN10_Max (0x1UL)
  #define GPIO_DIRCLR_PIN10_Input (0x0UL)
  #define GPIO_DIRCLR_PIN10_Output (0x1UL)
  #define GPIO_DIRCLR_PIN10_Clear (0x1UL)

/* PIN11 @Bit 11 : Set as input pin 11 */
  #define GPIO_DIRCLR_PIN11_Pos (11UL)
  #define GPIO_DIRCLR_PIN11_Msk (0x1UL << GPIO_DIRCLR_PIN11_Pos)
  #define GPIO_DIRCLR_PIN11_Min (0x0UL)
  #define GPIO_DIRCLR_PIN11_Max (0x1UL)
  #define GPIO_DIRCLR_PIN11_Input (0x0UL)
  #define GPIO_DIRCLR_PIN11_Output (0x1UL)
  #define GPIO_DIRCLR_PIN11_Clear (0x1UL)

/* PIN12 @Bit 12 : Set as input pin 12 */
  #define GPIO_DIRCLR_PIN12_Pos (12UL)
  #define GPIO_DIRCLR_PIN12_Msk (0x1UL << GPIO_DIRCLR_PIN12_Pos)
  #define GPIO_DIRCLR_PIN12_Min (0x0UL)
  #define GPIO_DIRCLR_PIN12_Max (0x1UL)
  #define GPIO_DIRCLR_PIN12_Input (0x0UL)
  #define GPIO_DIRCLR_PIN12_Output (0x1UL)
  #define GPIO_DIRCLR_PIN12_Clear (0x1UL)

/* PIN13 @Bit 13 : Set as input pin 13 */
  #define GPIO_DIRCLR_PIN13_Pos (13UL)
  #define GPIO_DIRCLR_PIN13_Msk (0x1UL << GPIO_DIRCLR_PIN13_Pos)
  #define GPIO_DIRCLR_PIN13_Min (0x0UL)
  #define GPIO_DIRCLR_PIN13_Max (0x1UL)
  #define GPIO_DIRCLR_PIN13_Input (0x0UL)
  #define GPIO_DIRCLR_PIN13_Output (0x1UL)
  #define GPIO_DIRCLR_PIN13_Clear (0x1UL)

/* PIN14 @Bit 14 : Set as input pin 14 */
  #define GPIO_DIRCLR_PIN14_Pos (14UL)
  #define GPIO_DIRCLR_PIN14_Msk (0x1UL << GPIO_DIRCLR_PIN14_Pos)
  #define GPIO_DIRCLR_PIN14_Min (0x0UL)
  #define GPIO_DIRCLR_PIN14_Max (0x1UL)
  #define GPIO_DIRCLR_PIN14_Input (0x0UL)
  #define GPIO_DIRCLR_PIN14_Output (0x1UL)
  #define GPIO_DIRCLR_PIN14_Clear (0x1UL)

/* PIN15 @Bit 15 : Set as input pin 15 */
  #define GPIO_DIRCLR_PIN15_Pos (15UL)
  #define GPIO_DIRCLR_PIN15_Msk (0x1UL << GPIO_DIRCLR_PIN15_Pos)
  #define GPIO_DIRCLR_PIN15_Min (0x0UL)
  #define GPIO_DIRCLR_PIN15_Max (0x1UL)
  #define GPIO_DIRCLR_PIN15_Input (0x0UL)
  #define GPIO_DIRCLR_PIN15_Output (0x1UL)
  #define GPIO_DIRCLR_PIN15_Clear (0x1UL)

/* PIN16 @Bit 16 : Set as input pin 16 */
  #define GPIO_DIRCLR_PIN16_Pos (16UL)
  #define GPIO_DIRCLR_PIN16_Msk (0x1UL << GPIO_DIRCLR_PIN16_Pos)
  #define GPIO_DIRCLR_PIN16_Min (0x0UL)
  #define GPIO_DIRCLR_PIN16_Max (0x1UL)
  #define GPIO_DIRCLR_PIN16_Input (0x0UL)
  #define GPIO_DIRCLR_PIN16_Output (0x1UL)
  #define GPIO_DIRCLR_PIN16_Clear (0x1UL)

/* PIN17 @Bit 17 : Set as input pin 17 */
  #define GPIO_DIRCLR_PIN17_Pos (17UL)
  #define GPIO_DIRCLR_PIN17_Msk (0x1UL << GPIO_DIRCLR_PIN17_Pos)
  #define GPIO_DIRCLR_PIN17_Min (0x0UL)
  #define GPIO_DIRCLR_PIN17_Max (0x1UL)
  #define GPIO_DIRCLR_PIN17_Input (0x0UL)
  #define GPIO_DIRCLR_PIN17_Output (0x1UL)
  #define GPIO_DIRCLR_PIN17_Clear (0x1UL)

/* PIN18 @Bit 18 : Set as input pin 18 */
  #define GPIO_DIRCLR_PIN18_Pos (18UL)
  #define GPIO_DIRCLR_PIN18_Msk (0x1UL << GPIO_DIRCLR_PIN18_Pos)
  #define GPIO_DIRCLR_PIN18_Min (0x0UL)
  #define GPIO_DIRCLR_PIN18_Max (0x1UL)
  #define GPIO_DIRCLR_PIN18_Input (0x0UL)
  #define GPIO_DIRCLR_PIN18_Output (0x1UL)
  #define GPIO_DIRCLR_PIN18_Clear (0x1UL)

/* PIN19 @Bit 19 : Set as input pin 19 */
  #define GPIO_DIRCLR_PIN19_Pos (19UL)
  #define GPIO_DIRCLR_PIN19_Msk (0x1UL << GPIO_DIRCLR_PIN19_Pos)
  #define GPIO_DIRCLR_PIN19_Min (0x0UL)
  #define GPIO_DIRCLR_PIN19_Max (0x1UL)
  #define GPIO_DIRCLR_PIN19_Input (0x0UL)
  #define GPIO_DIRCLR_PIN19_Output (0x1UL)
  #define GPIO_DIRCLR_PIN19_Clear (0x1UL)

/* PIN20 @Bit 20 : Set as input pin 20 */
  #define GPIO_DIRCLR_PIN20_Pos (20UL)
  #define GPIO_DIRCLR_PIN20_Msk (0x1UL << GPIO_DIRCLR_PIN20_Pos)
  #define GPIO_DIRCLR_PIN20_Min (0x0UL)
  #define GPIO_DIRCLR_PIN20_Max (0x1UL)
  #define GPIO_DIRCLR_PIN20_Input (0x0UL)
  #define GPIO_DIRCLR_PIN20_Output (0x1UL)
  #define GPIO_DIRCLR_PIN20_Clear (0x1UL)

/* PIN21 @Bit 21 : Set as input pin 21 */
  #define GPIO_DIRCLR_PIN21_Pos (21UL)
  #define GPIO_DIRCLR_PIN21_Msk (0x1UL << GPIO_DIRCLR_PIN21_Pos)
  #define GPIO_DIRCLR_PIN21_Min (0x0UL)
  #define GPIO_DIRCLR_PIN21_Max (0x1UL)
  #define GPIO_DIRCLR_PIN21_Input (0x0UL)
  #define GPIO_DIRCLR_PIN21_Output (0x1UL)
  #define GPIO_DIRCLR_PIN21_Clear (0x1UL)

/* PIN22 @Bit 22 : Set as input pin 22 */
  #define GPIO_DIRCLR_PIN22_Pos (22UL)
  #define GPIO_DIRCLR_PIN22_Msk (0x1UL << GPIO_DIRCLR_PIN22_Pos)
  #define GPIO_DIRCLR_PIN22_Min (0x0UL)
  #define GPIO_DIRCLR_PIN22_Max (0x1UL)
  #define GPIO_DIRCLR_PIN22_Input (0x0UL)
  #define GPIO_DIRCLR_PIN22_Output (0x1UL)
  #define GPIO_DIRCLR_PIN22_Clear (0x1UL)

/* PIN23 @Bit 23 : Set as input pin 23 */
  #define GPIO_DIRCLR_PIN23_Pos (23UL)
  #define GPIO_DIRCLR_PIN23_Msk (0x1UL << GPIO_DIRCLR_PIN23_Pos)
  #define GPIO_DIRCLR_PIN23_Min (0x0UL)
  #define GPIO_DIRCLR_PIN23_Max (0x1UL)
  #define GPIO_DIRCLR_PIN23_Input (0x0UL)
  #define GPIO_DIRCLR_PIN23_Output (0x1UL)
  #define GPIO_DIRCLR_PIN23_Clear (0x1UL)

/* PIN24 @Bit 24 : Set as input pin 24 */
  #define GPIO_DIRCLR_PIN24_Pos (24UL)
  #define GPIO_DIRCLR_PIN24_Msk (0x1UL << GPIO_DIRCLR_PIN24_Pos)
  #define GPIO_DIRCLR_PIN24_Min (0x0UL)
  #define GPIO_DIRCLR_PIN24_Max (0x1UL)
  #define GPIO_DIRCLR_PIN24_Input (0x0UL)
  #define GPIO_DIRCLR_PIN24_Output (0x1UL)
  #define GPIO_DIRCLR_PIN24_Clear (0x1UL)

/* PIN25 @Bit 25 : Set as input pin 25 */
  #define GPIO_DIRCLR_PIN25_Pos (25UL)
  #define GPIO_DIRCLR_PIN25_Msk (0x1UL << GPIO_DIRCLR_PIN25_Pos)
  #define GPIO_DIRCLR_PIN25_Min (0x0UL)
  #define GPIO_DIRCLR_PIN25_Max (0x1UL)
  #define GPIO_DIRCLR_PIN25_Input (0x0UL)
  #define GPIO_DIRCLR_PIN25_Output (0x1UL)
  #define GPIO_DIRCLR_PIN25_Clear (0x1UL)

/* PIN26 @Bit 26 : Set as input pin 26 */
  #define GPIO_DIRCLR_PIN26_Pos (26UL)
  #define GPIO_DIRCLR_PIN26_Msk (0x1UL << GPIO_DIRCLR_PIN26_Pos)
  #define GPIO_DIRCLR_PIN26_Min (0x0UL)
  #define GPIO_DIRCLR_PIN26_Max (0x1UL)
  #define GPIO_DIRCLR_PIN26_Input (0x0UL)
  #define GPIO_DIRCLR_PIN26_Output (0x1UL)
  #define GPIO_DIRCLR_PIN26_Clear (0x1UL)

/* PIN27 @Bit 27 : Set as input pin 27 */
  #define GPIO_DIRCLR_PIN27_Pos (27UL)
  #define GPIO_DIRCLR_PIN27_Msk (0x1UL << GPIO_DIRCLR_PIN27_Pos)
  #define GPIO_DIRCLR_PIN27_Min (0x0UL)
  #define GPIO_DIRCLR_PIN27_Max (0x1UL)
  #define GPIO_DIRCLR_PIN27_Input (0x0UL)
  #define GPIO_DIRCLR_PIN27_Output (0x1UL)
  #define GPIO_DIRCLR_PIN27_Clear (0x1UL)

/* PIN28 @Bit 28 : Set as input pin 28 */
  #define GPIO_DIRCLR_PIN28_Pos (28UL)
  #define GPIO_DIRCLR_PIN28_Msk (0x1UL << GPIO_DIRCLR_PIN28_Pos)
  #define GPIO_DIRCLR_PIN28_Min (0x0UL)
  #define GPIO_DIRCLR_PIN28_Max (0x1UL)
  #define GPIO_DIRCLR_PIN28_Input (0x0UL)
  #define GPIO_DIRCLR_PIN28_Output (0x1UL)
  #define GPIO_DIRCLR_PIN28_Clear (0x1UL)

/* PIN29 @Bit 29 : Set as input pin 29 */
  #define GPIO_DIRCLR_PIN29_Pos (29UL)
  #define GPIO_DIRCLR_PIN29_Msk (0x1UL << GPIO_DIRCLR_PIN29_Pos)
  #define GPIO_DIRCLR_PIN29_Min (0x0UL)
  #define GPIO_DIRCLR_PIN29_Max (0x1UL)
  #define GPIO_DIRCLR_PIN29_Input (0x0UL)
  #define GPIO_DIRCLR_PIN29_Output (0x1UL)
  #define GPIO_DIRCLR_PIN29_Clear (0x1UL)

/* PIN30 @Bit 30 : Set as input pin 30 */
  #define GPIO_DIRCLR_PIN30_Pos (30UL)
  #define GPIO_DIRCLR_PIN30_Msk (0x1UL << GPIO_DIRCLR_PIN30_Pos)
  #define GPIO_DIRCLR_PIN30_Min (0x0UL)
  #define GPIO_DIRCLR_PIN30_Max (0x1UL)
  #define GPIO_DIRCLR_PIN30_Input (0x0UL)
  #define GPIO_DIRCLR_PIN30_Output (0x1UL)
  #define GPIO_DIRCLR_PIN30_Clear (0x1UL)

/* PIN31 @Bit 31 : Set as input pin 31 */
  #define GPIO_DIRCLR_PIN31_Pos (31UL)
  #define GPIO_DIRCLR_PIN31_Msk (0x1UL << GPIO_DIRCLR_PIN31_Pos)
  #define GPIO_DIRCLR_PIN31_Min (0x0UL)
  #define GPIO_DIRCLR_PIN31_Max (0x1UL)
  #define GPIO_DIRCLR_PIN31_Input (0x0UL)
  #define GPIO_DIRCLR_PIN31_Output (0x1UL)
  #define GPIO_DIRCLR_PIN31_Clear (0x1UL)


/* GPIO_LATCH: Latch register indicating what GPIO pins that have met the criteria set in the PIN_CNF[n].SENSE registers */
  #define GPIO_LATCH_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Status on whether PIN0 has met criteria set in PIN_CNF[0].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN0_Pos (0UL)
  #define GPIO_LATCH_PIN0_Msk (0x1UL << GPIO_LATCH_PIN0_Pos)
  #define GPIO_LATCH_PIN0_Min (0x0UL)
  #define GPIO_LATCH_PIN0_Max (0x1UL)
  #define GPIO_LATCH_PIN0_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN0_Latched (0x1UL)

/* PIN1 @Bit 1 : Status on whether PIN1 has met criteria set in PIN_CNF[1].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN1_Pos (1UL)
  #define GPIO_LATCH_PIN1_Msk (0x1UL << GPIO_LATCH_PIN1_Pos)
  #define GPIO_LATCH_PIN1_Min (0x0UL)
  #define GPIO_LATCH_PIN1_Max (0x1UL)
  #define GPIO_LATCH_PIN1_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN1_Latched (0x1UL)

/* PIN2 @Bit 2 : Status on whether PIN2 has met criteria set in PIN_CNF[2].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN2_Pos (2UL)
  #define GPIO_LATCH_PIN2_Msk (0x1UL << GPIO_LATCH_PIN2_Pos)
  #define GPIO_LATCH_PIN2_Min (0x0UL)
  #define GPIO_LATCH_PIN2_Max (0x1UL)
  #define GPIO_LATCH_PIN2_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN2_Latched (0x1UL)

/* PIN3 @Bit 3 : Status on whether PIN3 has met criteria set in PIN_CNF[3].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN3_Pos (3UL)
  #define GPIO_LATCH_PIN3_Msk (0x1UL << GPIO_LATCH_PIN3_Pos)
  #define GPIO_LATCH_PIN3_Min (0x0UL)
  #define GPIO_LATCH_PIN3_Max (0x1UL)
  #define GPIO_LATCH_PIN3_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN3_Latched (0x1UL)

/* PIN4 @Bit 4 : Status on whether PIN4 has met criteria set in PIN_CNF[4].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN4_Pos (4UL)
  #define GPIO_LATCH_PIN4_Msk (0x1UL << GPIO_LATCH_PIN4_Pos)
  #define GPIO_LATCH_PIN4_Min (0x0UL)
  #define GPIO_LATCH_PIN4_Max (0x1UL)
  #define GPIO_LATCH_PIN4_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN4_Latched (0x1UL)

/* PIN5 @Bit 5 : Status on whether PIN5 has met criteria set in PIN_CNF[5].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN5_Pos (5UL)
  #define GPIO_LATCH_PIN5_Msk (0x1UL << GPIO_LATCH_PIN5_Pos)
  #define GPIO_LATCH_PIN5_Min (0x0UL)
  #define GPIO_LATCH_PIN5_Max (0x1UL)
  #define GPIO_LATCH_PIN5_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN5_Latched (0x1UL)

/* PIN6 @Bit 6 : Status on whether PIN6 has met criteria set in PIN_CNF[6].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN6_Pos (6UL)
  #define GPIO_LATCH_PIN6_Msk (0x1UL << GPIO_LATCH_PIN6_Pos)
  #define GPIO_LATCH_PIN6_Min (0x0UL)
  #define GPIO_LATCH_PIN6_Max (0x1UL)
  #define GPIO_LATCH_PIN6_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN6_Latched (0x1UL)

/* PIN7 @Bit 7 : Status on whether PIN7 has met criteria set in PIN_CNF[7].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN7_Pos (7UL)
  #define GPIO_LATCH_PIN7_Msk (0x1UL << GPIO_LATCH_PIN7_Pos)
  #define GPIO_LATCH_PIN7_Min (0x0UL)
  #define GPIO_LATCH_PIN7_Max (0x1UL)
  #define GPIO_LATCH_PIN7_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN7_Latched (0x1UL)

/* PIN8 @Bit 8 : Status on whether PIN8 has met criteria set in PIN_CNF[8].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN8_Pos (8UL)
  #define GPIO_LATCH_PIN8_Msk (0x1UL << GPIO_LATCH_PIN8_Pos)
  #define GPIO_LATCH_PIN8_Min (0x0UL)
  #define GPIO_LATCH_PIN8_Max (0x1UL)
  #define GPIO_LATCH_PIN8_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN8_Latched (0x1UL)

/* PIN9 @Bit 9 : Status on whether PIN9 has met criteria set in PIN_CNF[9].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN9_Pos (9UL)
  #define GPIO_LATCH_PIN9_Msk (0x1UL << GPIO_LATCH_PIN9_Pos)
  #define GPIO_LATCH_PIN9_Min (0x0UL)
  #define GPIO_LATCH_PIN9_Max (0x1UL)
  #define GPIO_LATCH_PIN9_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN9_Latched (0x1UL)

/* PIN10 @Bit 10 : Status on whether PIN10 has met criteria set in PIN_CNF[10].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN10_Pos (10UL)
  #define GPIO_LATCH_PIN10_Msk (0x1UL << GPIO_LATCH_PIN10_Pos)
  #define GPIO_LATCH_PIN10_Min (0x0UL)
  #define GPIO_LATCH_PIN10_Max (0x1UL)
  #define GPIO_LATCH_PIN10_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN10_Latched (0x1UL)

/* PIN11 @Bit 11 : Status on whether PIN11 has met criteria set in PIN_CNF[11].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN11_Pos (11UL)
  #define GPIO_LATCH_PIN11_Msk (0x1UL << GPIO_LATCH_PIN11_Pos)
  #define GPIO_LATCH_PIN11_Min (0x0UL)
  #define GPIO_LATCH_PIN11_Max (0x1UL)
  #define GPIO_LATCH_PIN11_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN11_Latched (0x1UL)

/* PIN12 @Bit 12 : Status on whether PIN12 has met criteria set in PIN_CNF[12].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN12_Pos (12UL)
  #define GPIO_LATCH_PIN12_Msk (0x1UL << GPIO_LATCH_PIN12_Pos)
  #define GPIO_LATCH_PIN12_Min (0x0UL)
  #define GPIO_LATCH_PIN12_Max (0x1UL)
  #define GPIO_LATCH_PIN12_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN12_Latched (0x1UL)

/* PIN13 @Bit 13 : Status on whether PIN13 has met criteria set in PIN_CNF[13].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN13_Pos (13UL)
  #define GPIO_LATCH_PIN13_Msk (0x1UL << GPIO_LATCH_PIN13_Pos)
  #define GPIO_LATCH_PIN13_Min (0x0UL)
  #define GPIO_LATCH_PIN13_Max (0x1UL)
  #define GPIO_LATCH_PIN13_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN13_Latched (0x1UL)

/* PIN14 @Bit 14 : Status on whether PIN14 has met criteria set in PIN_CNF[14].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN14_Pos (14UL)
  #define GPIO_LATCH_PIN14_Msk (0x1UL << GPIO_LATCH_PIN14_Pos)
  #define GPIO_LATCH_PIN14_Min (0x0UL)
  #define GPIO_LATCH_PIN14_Max (0x1UL)
  #define GPIO_LATCH_PIN14_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN14_Latched (0x1UL)

/* PIN15 @Bit 15 : Status on whether PIN15 has met criteria set in PIN_CNF[15].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN15_Pos (15UL)
  #define GPIO_LATCH_PIN15_Msk (0x1UL << GPIO_LATCH_PIN15_Pos)
  #define GPIO_LATCH_PIN15_Min (0x0UL)
  #define GPIO_LATCH_PIN15_Max (0x1UL)
  #define GPIO_LATCH_PIN15_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN15_Latched (0x1UL)

/* PIN16 @Bit 16 : Status on whether PIN16 has met criteria set in PIN_CNF[16].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN16_Pos (16UL)
  #define GPIO_LATCH_PIN16_Msk (0x1UL << GPIO_LATCH_PIN16_Pos)
  #define GPIO_LATCH_PIN16_Min (0x0UL)
  #define GPIO_LATCH_PIN16_Max (0x1UL)
  #define GPIO_LATCH_PIN16_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN16_Latched (0x1UL)

/* PIN17 @Bit 17 : Status on whether PIN17 has met criteria set in PIN_CNF[17].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN17_Pos (17UL)
  #define GPIO_LATCH_PIN17_Msk (0x1UL << GPIO_LATCH_PIN17_Pos)
  #define GPIO_LATCH_PIN17_Min (0x0UL)
  #define GPIO_LATCH_PIN17_Max (0x1UL)
  #define GPIO_LATCH_PIN17_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN17_Latched (0x1UL)

/* PIN18 @Bit 18 : Status on whether PIN18 has met criteria set in PIN_CNF[18].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN18_Pos (18UL)
  #define GPIO_LATCH_PIN18_Msk (0x1UL << GPIO_LATCH_PIN18_Pos)
  #define GPIO_LATCH_PIN18_Min (0x0UL)
  #define GPIO_LATCH_PIN18_Max (0x1UL)
  #define GPIO_LATCH_PIN18_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN18_Latched (0x1UL)

/* PIN19 @Bit 19 : Status on whether PIN19 has met criteria set in PIN_CNF[19].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN19_Pos (19UL)
  #define GPIO_LATCH_PIN19_Msk (0x1UL << GPIO_LATCH_PIN19_Pos)
  #define GPIO_LATCH_PIN19_Min (0x0UL)
  #define GPIO_LATCH_PIN19_Max (0x1UL)
  #define GPIO_LATCH_PIN19_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN19_Latched (0x1UL)

/* PIN20 @Bit 20 : Status on whether PIN20 has met criteria set in PIN_CNF[20].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN20_Pos (20UL)
  #define GPIO_LATCH_PIN20_Msk (0x1UL << GPIO_LATCH_PIN20_Pos)
  #define GPIO_LATCH_PIN20_Min (0x0UL)
  #define GPIO_LATCH_PIN20_Max (0x1UL)
  #define GPIO_LATCH_PIN20_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN20_Latched (0x1UL)

/* PIN21 @Bit 21 : Status on whether PIN21 has met criteria set in PIN_CNF[21].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN21_Pos (21UL)
  #define GPIO_LATCH_PIN21_Msk (0x1UL << GPIO_LATCH_PIN21_Pos)
  #define GPIO_LATCH_PIN21_Min (0x0UL)
  #define GPIO_LATCH_PIN21_Max (0x1UL)
  #define GPIO_LATCH_PIN21_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN21_Latched (0x1UL)

/* PIN22 @Bit 22 : Status on whether PIN22 has met criteria set in PIN_CNF[22].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN22_Pos (22UL)
  #define GPIO_LATCH_PIN22_Msk (0x1UL << GPIO_LATCH_PIN22_Pos)
  #define GPIO_LATCH_PIN22_Min (0x0UL)
  #define GPIO_LATCH_PIN22_Max (0x1UL)
  #define GPIO_LATCH_PIN22_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN22_Latched (0x1UL)

/* PIN23 @Bit 23 : Status on whether PIN23 has met criteria set in PIN_CNF[23].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN23_Pos (23UL)
  #define GPIO_LATCH_PIN23_Msk (0x1UL << GPIO_LATCH_PIN23_Pos)
  #define GPIO_LATCH_PIN23_Min (0x0UL)
  #define GPIO_LATCH_PIN23_Max (0x1UL)
  #define GPIO_LATCH_PIN23_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN23_Latched (0x1UL)

/* PIN24 @Bit 24 : Status on whether PIN24 has met criteria set in PIN_CNF[24].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN24_Pos (24UL)
  #define GPIO_LATCH_PIN24_Msk (0x1UL << GPIO_LATCH_PIN24_Pos)
  #define GPIO_LATCH_PIN24_Min (0x0UL)
  #define GPIO_LATCH_PIN24_Max (0x1UL)
  #define GPIO_LATCH_PIN24_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN24_Latched (0x1UL)

/* PIN25 @Bit 25 : Status on whether PIN25 has met criteria set in PIN_CNF[25].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN25_Pos (25UL)
  #define GPIO_LATCH_PIN25_Msk (0x1UL << GPIO_LATCH_PIN25_Pos)
  #define GPIO_LATCH_PIN25_Min (0x0UL)
  #define GPIO_LATCH_PIN25_Max (0x1UL)
  #define GPIO_LATCH_PIN25_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN25_Latched (0x1UL)

/* PIN26 @Bit 26 : Status on whether PIN26 has met criteria set in PIN_CNF[26].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN26_Pos (26UL)
  #define GPIO_LATCH_PIN26_Msk (0x1UL << GPIO_LATCH_PIN26_Pos)
  #define GPIO_LATCH_PIN26_Min (0x0UL)
  #define GPIO_LATCH_PIN26_Max (0x1UL)
  #define GPIO_LATCH_PIN26_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN26_Latched (0x1UL)

/* PIN27 @Bit 27 : Status on whether PIN27 has met criteria set in PIN_CNF[27].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN27_Pos (27UL)
  #define GPIO_LATCH_PIN27_Msk (0x1UL << GPIO_LATCH_PIN27_Pos)
  #define GPIO_LATCH_PIN27_Min (0x0UL)
  #define GPIO_LATCH_PIN27_Max (0x1UL)
  #define GPIO_LATCH_PIN27_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN27_Latched (0x1UL)

/* PIN28 @Bit 28 : Status on whether PIN28 has met criteria set in PIN_CNF[28].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN28_Pos (28UL)
  #define GPIO_LATCH_PIN28_Msk (0x1UL << GPIO_LATCH_PIN28_Pos)
  #define GPIO_LATCH_PIN28_Min (0x0UL)
  #define GPIO_LATCH_PIN28_Max (0x1UL)
  #define GPIO_LATCH_PIN28_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN28_Latched (0x1UL)

/* PIN29 @Bit 29 : Status on whether PIN29 has met criteria set in PIN_CNF[29].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN29_Pos (29UL)
  #define GPIO_LATCH_PIN29_Msk (0x1UL << GPIO_LATCH_PIN29_Pos)
  #define GPIO_LATCH_PIN29_Min (0x0UL)
  #define GPIO_LATCH_PIN29_Max (0x1UL)
  #define GPIO_LATCH_PIN29_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN29_Latched (0x1UL)

/* PIN30 @Bit 30 : Status on whether PIN30 has met criteria set in PIN_CNF[30].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN30_Pos (30UL)
  #define GPIO_LATCH_PIN30_Msk (0x1UL << GPIO_LATCH_PIN30_Pos)
  #define GPIO_LATCH_PIN30_Min (0x0UL)
  #define GPIO_LATCH_PIN30_Max (0x1UL)
  #define GPIO_LATCH_PIN30_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN30_Latched (0x1UL)

/* PIN31 @Bit 31 : Status on whether PIN31 has met criteria set in PIN_CNF[31].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN31_Pos (31UL)
  #define GPIO_LATCH_PIN31_Msk (0x1UL << GPIO_LATCH_PIN31_Pos)
  #define GPIO_LATCH_PIN31_Min (0x0UL)
  #define GPIO_LATCH_PIN31_Max (0x1UL)
  #define GPIO_LATCH_PIN31_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN31_Latched (0x1UL)


/* GPIO_DETECTMODE: Select between default DETECT signal behavior and LDETECT mode */
  #define GPIO_DETECTMODE_ResetValue (0x00000000UL)

/* DETECTMODE @Bit 0 : Select between default DETECT signal behavior and LDETECT mode */
  #define GPIO_DETECTMODE_DETECTMODE_Pos (0UL)
  #define GPIO_DETECTMODE_DETECTMODE_Msk (0x1UL << GPIO_DETECTMODE_DETECTMODE_Pos)
  #define GPIO_DETECTMODE_DETECTMODE_Min (0x0UL)
  #define GPIO_DETECTMODE_DETECTMODE_Max (0x1UL)
  #define GPIO_DETECTMODE_DETECTMODE_Default (0x0UL)
  #define GPIO_DETECTMODE_DETECTMODE_LDETECT (0x1UL)


/* GPIO_PIN_CNF: Pin n configuration of GPIO pin */
  #define GPIO_PIN_CNF_MaxCount (32UL)
  #define GPIO_PIN_CNF_MaxIndex (31UL)
  #define GPIO_PIN_CNF_MinIndex (0UL)
  #define GPIO_PIN_CNF_ResetValue (0x00000002UL)

/* DIR @Bit 0 : Pin direction. Same physical register as DIR register */
  #define GPIO_PIN_CNF_DIR_Pos (0UL)
  #define GPIO_PIN_CNF_DIR_Msk (0x1UL << GPIO_PIN_CNF_DIR_Pos)
  #define GPIO_PIN_CNF_DIR_Min (0x0UL)
  #define GPIO_PIN_CNF_DIR_Max (0x1UL)
  #define GPIO_PIN_CNF_DIR_Input (0x0UL)
  #define GPIO_PIN_CNF_DIR_Output (0x1UL)

/* INPUT @Bit 1 : Connect or disconnect input buffer */
  #define GPIO_PIN_CNF_INPUT_Pos (1UL)
  #define GPIO_PIN_CNF_INPUT_Msk (0x1UL << GPIO_PIN_CNF_INPUT_Pos)
  #define GPIO_PIN_CNF_INPUT_Min (0x0UL)
  #define GPIO_PIN_CNF_INPUT_Max (0x1UL)
  #define GPIO_PIN_CNF_INPUT_Connect (0x0UL)
  #define GPIO_PIN_CNF_INPUT_Disconnect (0x1UL)

/* PULL @Bits 2..3 : Pull configuration */
  #define GPIO_PIN_CNF_PULL_Pos (2UL)
  #define GPIO_PIN_CNF_PULL_Msk (0x3UL << GPIO_PIN_CNF_PULL_Pos)
  #define GPIO_PIN_CNF_PULL_Min (0x0UL)
  #define GPIO_PIN_CNF_PULL_Max (0x3UL)
  #define GPIO_PIN_CNF_PULL_Disabled (0x0UL)
  #define GPIO_PIN_CNF_PULL_Pulldown (0x1UL)
  #define GPIO_PIN_CNF_PULL_Pullup (0x3UL)

/* DRIVE0 @Bits 8..9 : Drive configuration for '0' */
  #define GPIO_PIN_CNF_DRIVE0_Pos (8UL)
  #define GPIO_PIN_CNF_DRIVE0_Msk (0x3UL << GPIO_PIN_CNF_DRIVE0_Pos)
  #define GPIO_PIN_CNF_DRIVE0_Min (0x0UL)
  #define GPIO_PIN_CNF_DRIVE0_Max (0x3UL)
  #define GPIO_PIN_CNF_DRIVE0_S0 (0x0UL)
  #define GPIO_PIN_CNF_DRIVE0_H0 (0x1UL)
  #define GPIO_PIN_CNF_DRIVE0_D0 (0x2UL)
  #define GPIO_PIN_CNF_DRIVE0_E0 (0x3UL)

/* DRIVE1 @Bits 10..11 : Drive configuration for '1' */
  #define GPIO_PIN_CNF_DRIVE1_Pos (10UL)
  #define GPIO_PIN_CNF_DRIVE1_Msk (0x3UL << GPIO_PIN_CNF_DRIVE1_Pos)
  #define GPIO_PIN_CNF_DRIVE1_Min (0x0UL)
  #define GPIO_PIN_CNF_DRIVE1_Max (0x3UL)
  #define GPIO_PIN_CNF_DRIVE1_S1 (0x0UL)
  #define GPIO_PIN_CNF_DRIVE1_H1 (0x1UL)
  #define GPIO_PIN_CNF_DRIVE1_D1 (0x2UL)
  #define GPIO_PIN_CNF_DRIVE1_E1 (0x3UL)

/* SENSE @Bits 16..17 : Pin sensing mechanism */
  #define GPIO_PIN_CNF_SENSE_Pos (16UL)
  #define GPIO_PIN_CNF_SENSE_Msk (0x3UL << GPIO_PIN_CNF_SENSE_Pos)
  #define GPIO_PIN_CNF_SENSE_Min (0x0UL)
  #define GPIO_PIN_CNF_SENSE_Max (0x3UL)
  #define GPIO_PIN_CNF_SENSE_Disabled (0x0UL)
  #define GPIO_PIN_CNF_SENSE_High (0x2UL)
  #define GPIO_PIN_CNF_SENSE_Low (0x3UL)

/* CTRLSEL @Bits 28..30 : Select which module has direct control over this pin */
  #define GPIO_PIN_CNF_CTRLSEL_Pos (28UL)
  #define GPIO_PIN_CNF_CTRLSEL_Msk (0x7UL << GPIO_PIN_CNF_CTRLSEL_Pos)
  #define GPIO_PIN_CNF_CTRLSEL_Min (0x0UL)
  #define GPIO_PIN_CNF_CTRLSEL_Max (0x4UL)
  #define GPIO_PIN_CNF_CTRLSEL_GPIO (0x0UL)
  #define GPIO_PIN_CNF_CTRLSEL_VPR (0x1UL)
  #define GPIO_PIN_CNF_CTRLSEL_GRTC (0x4UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                       GPIOHSPADCTRL                                       ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ================================================== Struct GPIOHSPADCTRL =================================================== */
/**
  * @brief GPIO high-speed pad control
  */
  typedef struct {
    __IM uint32_t RESERVED[12];
    __IOM uint32_t BIAS;
    __IOM uint32_t OVERRIDE;
    __IOM uint32_t CTRL;
  } NRF_GPIOHSPADCTRL_Type;

/* GPIOHSPADCTRL_BIAS: Bias control */
  #define GPIOHSPADCTRL_BIAS_ResetValue (0x00000000UL)

/* HSBIAS @Bits 0..1 : Bias setting for high-speed pad */
  #define GPIOHSPADCTRL_BIAS_HSBIAS_Pos (0UL)
  #define GPIOHSPADCTRL_BIAS_HSBIAS_Msk (0x3UL << GPIOHSPADCTRL_BIAS_HSBIAS_Pos)

/* REPLICABIAS @Bit 2 : Bias setting for replica pad */
  #define GPIOHSPADCTRL_BIAS_REPLICABIAS_Pos (2UL)
  #define GPIOHSPADCTRL_BIAS_REPLICABIAS_Msk (0x1UL << GPIOHSPADCTRL_BIAS_REPLICABIAS_Pos)


/* GPIOHSPADCTRL_OVERRIDE: Override control */
  #define GPIOHSPADCTRL_OVERRIDE_ResetValue (0x00000000UL)

/* FORCEON @Bit 0 : Force on */
  #define GPIOHSPADCTRL_OVERRIDE_FORCEON_Pos (0UL)
  #define GPIOHSPADCTRL_OVERRIDE_FORCEON_Msk (0x1UL << GPIOHSPADCTRL_OVERRIDE_FORCEON_Pos)

/* ATB0 @Bits 1..3 : ATB0 settings */
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_Pos (1UL)
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_Msk (0x7UL << GPIOHSPADCTRL_OVERRIDE_ATB0_Pos)
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_Min (0x5UL)
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_Max (0x7UL)
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_BiasTrim (0x7UL)
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_BiasSupply (0x6UL)
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_BiasPTAT (0x5UL)

/* DUALDRIVE @Bit 4 : Drive pad from both high-speed pad and regular pad (when highspeed is enabled) */
  #define GPIOHSPADCTRL_OVERRIDE_DUALDRIVE_Pos (4UL)
  #define GPIOHSPADCTRL_OVERRIDE_DUALDRIVE_Msk (0x1UL << GPIOHSPADCTRL_OVERRIDE_DUALDRIVE_Pos) /*!< Bit mask of DUALDRIVE
                                                                            field.*/


/* GPIOHSPADCTRL_CTRL: HS pad control register */
  #define GPIOHSPADCTRL_CTRL_ResetValue (0x00000000UL)

/* RXDELAY @Bits 0..2 : RXDELAY setting */
  #define GPIOHSPADCTRL_CTRL_RXDELAY_Pos (0UL)
  #define GPIOHSPADCTRL_CTRL_RXDELAY_Msk (0x7UL << GPIOHSPADCTRL_CTRL_RXDELAY_Pos)

/* SCKEN @Bit 3 : Enable SCK */
  #define GPIOHSPADCTRL_CTRL_SCKEN_Pos (3UL)
  #define GPIOHSPADCTRL_CTRL_SCKEN_Msk (0x1UL << GPIOHSPADCTRL_CTRL_SCKEN_Pos)

/* SCKPHASE @Bit 4 : SCK phase */
  #define GPIOHSPADCTRL_CTRL_SCKPHASE_Pos (4UL)
  #define GPIOHSPADCTRL_CTRL_SCKPHASE_Msk (0x1UL << GPIOHSPADCTRL_CTRL_SCKPHASE_Pos)

/* CSNEN @Bit 5 : CSN enable */
  #define GPIOHSPADCTRL_CTRL_CSNEN_Pos (5UL)
  #define GPIOHSPADCTRL_CTRL_CSNEN_Msk (0x1UL << GPIOHSPADCTRL_CTRL_CSNEN_Pos)

/* DATAENABLE @Bits 6..9 : Enable re-clocking for data bit 0-3 through pad-sync module */
  #define GPIOHSPADCTRL_CTRL_DATAENABLE_Pos (6UL)
  #define GPIOHSPADCTRL_CTRL_DATAENABLE_Msk (0xFUL << GPIOHSPADCTRL_CTRL_DATAENABLE_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                       GPIOINTERNAL                                       ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* =================================================== Struct GPIOINTERNAL =================================================== */
/**
  * @brief GPIO Internal
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_GPIOINTERNAL_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          GPIOTE                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct GPIOTE_EVENTS_PORT ================================================ */
/**
  * @brief EVENTS_PORT [GPIOTE_EVENTS_PORT] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  NONSECURE;
  __IOM uint32_t  SECURE;
} NRF_GPIOTE_EVENTS_PORT_Type;
  #define GPIOTE_EVENTS_PORT_MaxCount (1UL)
  #define GPIOTE_EVENTS_PORT_MaxIndex (0UL)
  #define GPIOTE_EVENTS_PORT_MinIndex (0UL)

/* GPIOTE_EVENTS_PORT_NONSECURE: Non-secure port event from owner n */
  #define GPIOTE_EVENTS_PORT_NONSECURE_ResetValue (0x00000000UL)

/* NONSECURE @Bit 0 : Non-secure port event from owner n */
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Pos (0UL)
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Msk (0x1UL << GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Pos) /*!< Bit mask of
                                                                            NONSECURE field.*/
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Min (0x0UL)
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Max (0x1UL)
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_NotGenerated (0x0UL)
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Generated (0x1UL)


/* GPIOTE_EVENTS_PORT_SECURE: Secure port event from owner n */
  #define GPIOTE_EVENTS_PORT_SECURE_ResetValue (0x00000000UL)

/* SECURE @Bit 0 : Secure port event from owner n */
  #define GPIOTE_EVENTS_PORT_SECURE_SECURE_Pos (0UL)
  #define GPIOTE_EVENTS_PORT_SECURE_SECURE_Msk (0x1UL << GPIOTE_EVENTS_PORT_SECURE_SECURE_Pos)
  #define GPIOTE_EVENTS_PORT_SECURE_SECURE_Min (0x0UL)
  #define GPIOTE_EVENTS_PORT_SECURE_SECURE_Max (0x1UL)
  #define GPIOTE_EVENTS_PORT_SECURE_SECURE_NotGenerated (0x0UL)
  #define GPIOTE_EVENTS_PORT_SECURE_SECURE_Generated (0x1UL)



/* =============================================== Struct GPIOTE_PUBLISH_PORT ================================================ */
/**
  * @brief PUBLISH_PORT [GPIOTE_PUBLISH_PORT] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  NONSECURE;
  __IOM uint32_t  SECURE;
} NRF_GPIOTE_PUBLISH_PORT_Type;
  #define GPIOTE_PUBLISH_PORT_MaxCount (1UL)
  #define GPIOTE_PUBLISH_PORT_MaxIndex (0UL)
  #define GPIOTE_PUBLISH_PORT_MinIndex (0UL)

/* GPIOTE_PUBLISH_PORT_NONSECURE: Publish configuration for event PORT[n].NONSECURE */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event PORT[n].NONSECURE will publish to */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Pos (0UL)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Msk (0xFFUL << GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Min (0x00UL)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Pos (31UL)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Msk (0x1UL << GPIOTE_PUBLISH_PORT_NONSECURE_EN_Pos)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Min (0x0UL)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Max (0x1UL)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Disabled (0x0UL)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Enabled (0x1UL)


/* GPIOTE_PUBLISH_PORT_SECURE: Publish configuration for event PORT[n].SECURE */
  #define GPIOTE_PUBLISH_PORT_SECURE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event PORT[n].SECURE will publish to */
  #define GPIOTE_PUBLISH_PORT_SECURE_CHIDX_Pos (0UL)
  #define GPIOTE_PUBLISH_PORT_SECURE_CHIDX_Msk (0xFFUL << GPIOTE_PUBLISH_PORT_SECURE_CHIDX_Pos)
  #define GPIOTE_PUBLISH_PORT_SECURE_CHIDX_Min (0x00UL)
  #define GPIOTE_PUBLISH_PORT_SECURE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_PUBLISH_PORT_SECURE_EN_Pos (31UL)
  #define GPIOTE_PUBLISH_PORT_SECURE_EN_Msk (0x1UL << GPIOTE_PUBLISH_PORT_SECURE_EN_Pos)
  #define GPIOTE_PUBLISH_PORT_SECURE_EN_Min (0x0UL)
  #define GPIOTE_PUBLISH_PORT_SECURE_EN_Max (0x1UL)
  #define GPIOTE_PUBLISH_PORT_SECURE_EN_Disabled (0x0UL)
  #define GPIOTE_PUBLISH_PORT_SECURE_EN_Enabled (0x1UL)


/* ====================================================== Struct GPIOTE ====================================================== */
/**
  * @brief GPIO Tasks and Events
  */
  typedef struct {
    __OM uint32_t TASKS_OUT[8];                      /*!< (@ 0x00000000) Task for writing to pin specified in CONFIG[n].PSEL.
                                                                         Action on pin is configured in CONFIG[n].POLARITY.*/
    __IM uint32_t RESERVED[4];
    __OM uint32_t TASKS_SET[8];                      /*!< (@ 0x00000030) Task for writing to pin specified in CONFIG[n].PSEL.
                                                                         Action on pin is to set it high.*/
    __IM uint32_t RESERVED1[4];
    __OM uint32_t TASKS_CLR[8];                      /*!< (@ 0x00000060) Task for writing to pin specified in CONFIG[n].PSEL.
                                                                         Action on pin is to set it low.*/
    __IOM uint32_t SUBSCRIBE_OUT[8];
    __IM uint32_t RESERVED2[4];
    __IOM uint32_t SUBSCRIBE_SET[8];
    __IM uint32_t RESERVED3[4];
    __IOM uint32_t SUBSCRIBE_CLR[8];
    __IOM uint32_t EVENTS_IN[8];
    __IM uint32_t RESERVED4[8];
    __IOM NRF_GPIOTE_EVENTS_PORT_Type EVENTS_PORT[1];
    __IM uint32_t RESERVED5[14];
    __IOM uint32_t PUBLISH_IN[8];
    __IM uint32_t RESERVED6[8];
    __IOM NRF_GPIOTE_PUBLISH_PORT_Type PUBLISH_PORT[1];
    __IM uint32_t RESERVED7[79];
    __IOM uint32_t INTENSET0;
    __IOM uint32_t INTENCLR0;
    __IM uint32_t RESERVED8[2];
    __IOM uint32_t INTENSET1;
    __IOM uint32_t INTENCLR1;
    __IM uint32_t RESERVED9[125];
    __IOM uint32_t CONFIG[8];                        /*!< (@ 0x00000510) Configuration for OUT[n], SET[n], and CLR[n] tasks and
                                                                         IN[n] event*/
  } NRF_GPIOTE_Type;

/* GPIOTE_TASKS_OUT: Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is configured in CONFIG[n].POLARITY. */
  #define GPIOTE_TASKS_OUT_MaxCount (8UL)
  #define GPIOTE_TASKS_OUT_MaxIndex (7UL)
  #define GPIOTE_TASKS_OUT_MinIndex (0UL)
  #define GPIOTE_TASKS_OUT_ResetValue (0x00000000UL)

/* TASKS_OUT @Bit 0 : Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is configured in CONFIG[n].POLARITY. */
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Pos (0UL)
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Msk (0x1UL << GPIOTE_TASKS_OUT_TASKS_OUT_Pos)
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Min (0x1UL)
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Max (0x1UL)
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Trigger (0x1UL)


/* GPIOTE_TASKS_SET: Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it high. */
  #define GPIOTE_TASKS_SET_MaxCount (8UL)
  #define GPIOTE_TASKS_SET_MaxIndex (7UL)
  #define GPIOTE_TASKS_SET_MinIndex (0UL)
  #define GPIOTE_TASKS_SET_ResetValue (0x00000000UL)

/* TASKS_SET @Bit 0 : Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it high. */
  #define GPIOTE_TASKS_SET_TASKS_SET_Pos (0UL)
  #define GPIOTE_TASKS_SET_TASKS_SET_Msk (0x1UL << GPIOTE_TASKS_SET_TASKS_SET_Pos)
  #define GPIOTE_TASKS_SET_TASKS_SET_Min (0x1UL)
  #define GPIOTE_TASKS_SET_TASKS_SET_Max (0x1UL)
  #define GPIOTE_TASKS_SET_TASKS_SET_Trigger (0x1UL)


/* GPIOTE_TASKS_CLR: Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it low. */
  #define GPIOTE_TASKS_CLR_MaxCount (8UL)
  #define GPIOTE_TASKS_CLR_MaxIndex (7UL)
  #define GPIOTE_TASKS_CLR_MinIndex (0UL)
  #define GPIOTE_TASKS_CLR_ResetValue (0x00000000UL)

/* TASKS_CLR @Bit 0 : Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it low. */
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Pos (0UL)
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Msk (0x1UL << GPIOTE_TASKS_CLR_TASKS_CLR_Pos)
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Min (0x1UL)
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Max (0x1UL)
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Trigger (0x1UL)


/* GPIOTE_SUBSCRIBE_OUT: Subscribe configuration for task OUT[n] */
  #define GPIOTE_SUBSCRIBE_OUT_MaxCount (8UL)
  #define GPIOTE_SUBSCRIBE_OUT_MaxIndex (7UL)
  #define GPIOTE_SUBSCRIBE_OUT_MinIndex (0UL)
  #define GPIOTE_SUBSCRIBE_OUT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task OUT[n] will subscribe to */
  #define GPIOTE_SUBSCRIBE_OUT_CHIDX_Pos (0UL)
  #define GPIOTE_SUBSCRIBE_OUT_CHIDX_Msk (0xFFUL << GPIOTE_SUBSCRIBE_OUT_CHIDX_Pos)
  #define GPIOTE_SUBSCRIBE_OUT_CHIDX_Min (0x00UL)
  #define GPIOTE_SUBSCRIBE_OUT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_SUBSCRIBE_OUT_EN_Pos (31UL)
  #define GPIOTE_SUBSCRIBE_OUT_EN_Msk (0x1UL << GPIOTE_SUBSCRIBE_OUT_EN_Pos)
  #define GPIOTE_SUBSCRIBE_OUT_EN_Min (0x0UL)
  #define GPIOTE_SUBSCRIBE_OUT_EN_Max (0x1UL)
  #define GPIOTE_SUBSCRIBE_OUT_EN_Disabled (0x0UL)
  #define GPIOTE_SUBSCRIBE_OUT_EN_Enabled (0x1UL)


/* GPIOTE_SUBSCRIBE_SET: Subscribe configuration for task SET[n] */
  #define GPIOTE_SUBSCRIBE_SET_MaxCount (8UL)
  #define GPIOTE_SUBSCRIBE_SET_MaxIndex (7UL)
  #define GPIOTE_SUBSCRIBE_SET_MinIndex (0UL)
  #define GPIOTE_SUBSCRIBE_SET_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SET[n] will subscribe to */
  #define GPIOTE_SUBSCRIBE_SET_CHIDX_Pos (0UL)
  #define GPIOTE_SUBSCRIBE_SET_CHIDX_Msk (0xFFUL << GPIOTE_SUBSCRIBE_SET_CHIDX_Pos)
  #define GPIOTE_SUBSCRIBE_SET_CHIDX_Min (0x00UL)
  #define GPIOTE_SUBSCRIBE_SET_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_SUBSCRIBE_SET_EN_Pos (31UL)
  #define GPIOTE_SUBSCRIBE_SET_EN_Msk (0x1UL << GPIOTE_SUBSCRIBE_SET_EN_Pos)
  #define GPIOTE_SUBSCRIBE_SET_EN_Min (0x0UL)
  #define GPIOTE_SUBSCRIBE_SET_EN_Max (0x1UL)
  #define GPIOTE_SUBSCRIBE_SET_EN_Disabled (0x0UL)
  #define GPIOTE_SUBSCRIBE_SET_EN_Enabled (0x1UL)


/* GPIOTE_SUBSCRIBE_CLR: Subscribe configuration for task CLR[n] */
  #define GPIOTE_SUBSCRIBE_CLR_MaxCount (8UL)
  #define GPIOTE_SUBSCRIBE_CLR_MaxIndex (7UL)
  #define GPIOTE_SUBSCRIBE_CLR_MinIndex (0UL)
  #define GPIOTE_SUBSCRIBE_CLR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CLR[n] will subscribe to */
  #define GPIOTE_SUBSCRIBE_CLR_CHIDX_Pos (0UL)
  #define GPIOTE_SUBSCRIBE_CLR_CHIDX_Msk (0xFFUL << GPIOTE_SUBSCRIBE_CLR_CHIDX_Pos)
  #define GPIOTE_SUBSCRIBE_CLR_CHIDX_Min (0x00UL)
  #define GPIOTE_SUBSCRIBE_CLR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_SUBSCRIBE_CLR_EN_Pos (31UL)
  #define GPIOTE_SUBSCRIBE_CLR_EN_Msk (0x1UL << GPIOTE_SUBSCRIBE_CLR_EN_Pos)
  #define GPIOTE_SUBSCRIBE_CLR_EN_Min (0x0UL)
  #define GPIOTE_SUBSCRIBE_CLR_EN_Max (0x1UL)
  #define GPIOTE_SUBSCRIBE_CLR_EN_Disabled (0x0UL)
  #define GPIOTE_SUBSCRIBE_CLR_EN_Enabled (0x1UL)


/* GPIOTE_EVENTS_IN: Event from pin specified in CONFIG[n].PSEL */
  #define GPIOTE_EVENTS_IN_MaxCount (8UL)
  #define GPIOTE_EVENTS_IN_MaxIndex (7UL)
  #define GPIOTE_EVENTS_IN_MinIndex (0UL)
  #define GPIOTE_EVENTS_IN_ResetValue (0x00000000UL)

/* EVENTS_IN @Bit 0 : Event from pin specified in CONFIG[n].PSEL */
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Pos (0UL)
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Msk (0x1UL << GPIOTE_EVENTS_IN_EVENTS_IN_Pos)
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Min (0x0UL)
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Max (0x1UL)
  #define GPIOTE_EVENTS_IN_EVENTS_IN_NotGenerated (0x0UL)
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Generated (0x1UL)


/* GPIOTE_PUBLISH_IN: Publish configuration for event IN[n] */
  #define GPIOTE_PUBLISH_IN_MaxCount (8UL)
  #define GPIOTE_PUBLISH_IN_MaxIndex (7UL)
  #define GPIOTE_PUBLISH_IN_MinIndex (0UL)
  #define GPIOTE_PUBLISH_IN_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event IN[n] will publish to */
  #define GPIOTE_PUBLISH_IN_CHIDX_Pos (0UL)
  #define GPIOTE_PUBLISH_IN_CHIDX_Msk (0xFFUL << GPIOTE_PUBLISH_IN_CHIDX_Pos)
  #define GPIOTE_PUBLISH_IN_CHIDX_Min (0x00UL)
  #define GPIOTE_PUBLISH_IN_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_PUBLISH_IN_EN_Pos (31UL)
  #define GPIOTE_PUBLISH_IN_EN_Msk (0x1UL << GPIOTE_PUBLISH_IN_EN_Pos)
  #define GPIOTE_PUBLISH_IN_EN_Min (0x0UL)
  #define GPIOTE_PUBLISH_IN_EN_Max (0x1UL)
  #define GPIOTE_PUBLISH_IN_EN_Disabled (0x0UL)
  #define GPIOTE_PUBLISH_IN_EN_Enabled (0x1UL)


/* GPIOTE_INTENSET0: Enable interrupt */
  #define GPIOTE_INTENSET0_ResetValue (0x00000000UL)

/* IN0 @Bit 0 : Write '1' to enable interrupt for event IN[0] */
  #define GPIOTE_INTENSET0_IN0_Pos (0UL)
  #define GPIOTE_INTENSET0_IN0_Msk (0x1UL << GPIOTE_INTENSET0_IN0_Pos)
  #define GPIOTE_INTENSET0_IN0_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN0_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN0_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN0_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN0_Enabled (0x1UL)

/* IN1 @Bit 1 : Write '1' to enable interrupt for event IN[1] */
  #define GPIOTE_INTENSET0_IN1_Pos (1UL)
  #define GPIOTE_INTENSET0_IN1_Msk (0x1UL << GPIOTE_INTENSET0_IN1_Pos)
  #define GPIOTE_INTENSET0_IN1_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN1_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN1_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN1_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN1_Enabled (0x1UL)

/* IN2 @Bit 2 : Write '1' to enable interrupt for event IN[2] */
  #define GPIOTE_INTENSET0_IN2_Pos (2UL)
  #define GPIOTE_INTENSET0_IN2_Msk (0x1UL << GPIOTE_INTENSET0_IN2_Pos)
  #define GPIOTE_INTENSET0_IN2_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN2_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN2_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN2_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN2_Enabled (0x1UL)

/* IN3 @Bit 3 : Write '1' to enable interrupt for event IN[3] */
  #define GPIOTE_INTENSET0_IN3_Pos (3UL)
  #define GPIOTE_INTENSET0_IN3_Msk (0x1UL << GPIOTE_INTENSET0_IN3_Pos)
  #define GPIOTE_INTENSET0_IN3_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN3_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN3_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN3_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN3_Enabled (0x1UL)

/* IN4 @Bit 4 : Write '1' to enable interrupt for event IN[4] */
  #define GPIOTE_INTENSET0_IN4_Pos (4UL)
  #define GPIOTE_INTENSET0_IN4_Msk (0x1UL << GPIOTE_INTENSET0_IN4_Pos)
  #define GPIOTE_INTENSET0_IN4_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN4_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN4_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN4_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN4_Enabled (0x1UL)

/* IN5 @Bit 5 : Write '1' to enable interrupt for event IN[5] */
  #define GPIOTE_INTENSET0_IN5_Pos (5UL)
  #define GPIOTE_INTENSET0_IN5_Msk (0x1UL << GPIOTE_INTENSET0_IN5_Pos)
  #define GPIOTE_INTENSET0_IN5_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN5_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN5_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN5_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN5_Enabled (0x1UL)

/* IN6 @Bit 6 : Write '1' to enable interrupt for event IN[6] */
  #define GPIOTE_INTENSET0_IN6_Pos (6UL)
  #define GPIOTE_INTENSET0_IN6_Msk (0x1UL << GPIOTE_INTENSET0_IN6_Pos)
  #define GPIOTE_INTENSET0_IN6_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN6_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN6_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN6_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN6_Enabled (0x1UL)

/* IN7 @Bit 7 : Write '1' to enable interrupt for event IN[7] */
  #define GPIOTE_INTENSET0_IN7_Pos (7UL)
  #define GPIOTE_INTENSET0_IN7_Msk (0x1UL << GPIOTE_INTENSET0_IN7_Pos)
  #define GPIOTE_INTENSET0_IN7_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN7_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN7_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN7_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN7_Enabled (0x1UL)

/* PORT0NONSECURE @Bit 16 : Write '1' to enable interrupt for event PORT0NONSECURE */
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Pos (16UL)
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Msk (0x1UL << GPIOTE_INTENSET0_PORT0NONSECURE_Pos) /*!< Bit mask of PORT0NONSECURE
                                                                            field.*/
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Min (0x0UL)
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Max (0x1UL)
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Set (0x1UL)
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Enabled (0x1UL)

/* PORT0SECURE @Bit 17 : Write '1' to enable interrupt for event PORT0SECURE */
  #define GPIOTE_INTENSET0_PORT0SECURE_Pos (17UL)
  #define GPIOTE_INTENSET0_PORT0SECURE_Msk (0x1UL << GPIOTE_INTENSET0_PORT0SECURE_Pos)
  #define GPIOTE_INTENSET0_PORT0SECURE_Min (0x0UL)
  #define GPIOTE_INTENSET0_PORT0SECURE_Max (0x1UL)
  #define GPIOTE_INTENSET0_PORT0SECURE_Set (0x1UL)
  #define GPIOTE_INTENSET0_PORT0SECURE_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_PORT0SECURE_Enabled (0x1UL)


/* GPIOTE_INTENCLR0: Disable interrupt */
  #define GPIOTE_INTENCLR0_ResetValue (0x00000000UL)

/* IN0 @Bit 0 : Write '1' to disable interrupt for event IN[0] */
  #define GPIOTE_INTENCLR0_IN0_Pos (0UL)
  #define GPIOTE_INTENCLR0_IN0_Msk (0x1UL << GPIOTE_INTENCLR0_IN0_Pos)
  #define GPIOTE_INTENCLR0_IN0_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN0_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN0_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN0_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN0_Enabled (0x1UL)

/* IN1 @Bit 1 : Write '1' to disable interrupt for event IN[1] */
  #define GPIOTE_INTENCLR0_IN1_Pos (1UL)
  #define GPIOTE_INTENCLR0_IN1_Msk (0x1UL << GPIOTE_INTENCLR0_IN1_Pos)
  #define GPIOTE_INTENCLR0_IN1_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN1_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN1_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN1_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN1_Enabled (0x1UL)

/* IN2 @Bit 2 : Write '1' to disable interrupt for event IN[2] */
  #define GPIOTE_INTENCLR0_IN2_Pos (2UL)
  #define GPIOTE_INTENCLR0_IN2_Msk (0x1UL << GPIOTE_INTENCLR0_IN2_Pos)
  #define GPIOTE_INTENCLR0_IN2_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN2_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN2_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN2_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN2_Enabled (0x1UL)

/* IN3 @Bit 3 : Write '1' to disable interrupt for event IN[3] */
  #define GPIOTE_INTENCLR0_IN3_Pos (3UL)
  #define GPIOTE_INTENCLR0_IN3_Msk (0x1UL << GPIOTE_INTENCLR0_IN3_Pos)
  #define GPIOTE_INTENCLR0_IN3_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN3_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN3_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN3_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN3_Enabled (0x1UL)

/* IN4 @Bit 4 : Write '1' to disable interrupt for event IN[4] */
  #define GPIOTE_INTENCLR0_IN4_Pos (4UL)
  #define GPIOTE_INTENCLR0_IN4_Msk (0x1UL << GPIOTE_INTENCLR0_IN4_Pos)
  #define GPIOTE_INTENCLR0_IN4_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN4_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN4_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN4_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN4_Enabled (0x1UL)

/* IN5 @Bit 5 : Write '1' to disable interrupt for event IN[5] */
  #define GPIOTE_INTENCLR0_IN5_Pos (5UL)
  #define GPIOTE_INTENCLR0_IN5_Msk (0x1UL << GPIOTE_INTENCLR0_IN5_Pos)
  #define GPIOTE_INTENCLR0_IN5_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN5_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN5_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN5_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN5_Enabled (0x1UL)

/* IN6 @Bit 6 : Write '1' to disable interrupt for event IN[6] */
  #define GPIOTE_INTENCLR0_IN6_Pos (6UL)
  #define GPIOTE_INTENCLR0_IN6_Msk (0x1UL << GPIOTE_INTENCLR0_IN6_Pos)
  #define GPIOTE_INTENCLR0_IN6_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN6_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN6_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN6_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN6_Enabled (0x1UL)

/* IN7 @Bit 7 : Write '1' to disable interrupt for event IN[7] */
  #define GPIOTE_INTENCLR0_IN7_Pos (7UL)
  #define GPIOTE_INTENCLR0_IN7_Msk (0x1UL << GPIOTE_INTENCLR0_IN7_Pos)
  #define GPIOTE_INTENCLR0_IN7_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN7_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN7_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN7_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN7_Enabled (0x1UL)

/* PORT0NONSECURE @Bit 16 : Write '1' to disable interrupt for event PORT0NONSECURE */
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Pos (16UL)
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Msk (0x1UL << GPIOTE_INTENCLR0_PORT0NONSECURE_Pos) /*!< Bit mask of PORT0NONSECURE
                                                                            field.*/
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Min (0x0UL)
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Max (0x1UL)
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Enabled (0x1UL)

/* PORT0SECURE @Bit 17 : Write '1' to disable interrupt for event PORT0SECURE */
  #define GPIOTE_INTENCLR0_PORT0SECURE_Pos (17UL)
  #define GPIOTE_INTENCLR0_PORT0SECURE_Msk (0x1UL << GPIOTE_INTENCLR0_PORT0SECURE_Pos)
  #define GPIOTE_INTENCLR0_PORT0SECURE_Min (0x0UL)
  #define GPIOTE_INTENCLR0_PORT0SECURE_Max (0x1UL)
  #define GPIOTE_INTENCLR0_PORT0SECURE_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_PORT0SECURE_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_PORT0SECURE_Enabled (0x1UL)


/* GPIOTE_INTENSET1: Enable interrupt */
  #define GPIOTE_INTENSET1_ResetValue (0x00000000UL)

/* IN0 @Bit 0 : Write '1' to enable interrupt for event IN[0] */
  #define GPIOTE_INTENSET1_IN0_Pos (0UL)
  #define GPIOTE_INTENSET1_IN0_Msk (0x1UL << GPIOTE_INTENSET1_IN0_Pos)
  #define GPIOTE_INTENSET1_IN0_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN0_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN0_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN0_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN0_Enabled (0x1UL)

/* IN1 @Bit 1 : Write '1' to enable interrupt for event IN[1] */
  #define GPIOTE_INTENSET1_IN1_Pos (1UL)
  #define GPIOTE_INTENSET1_IN1_Msk (0x1UL << GPIOTE_INTENSET1_IN1_Pos)
  #define GPIOTE_INTENSET1_IN1_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN1_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN1_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN1_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN1_Enabled (0x1UL)

/* IN2 @Bit 2 : Write '1' to enable interrupt for event IN[2] */
  #define GPIOTE_INTENSET1_IN2_Pos (2UL)
  #define GPIOTE_INTENSET1_IN2_Msk (0x1UL << GPIOTE_INTENSET1_IN2_Pos)
  #define GPIOTE_INTENSET1_IN2_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN2_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN2_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN2_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN2_Enabled (0x1UL)

/* IN3 @Bit 3 : Write '1' to enable interrupt for event IN[3] */
  #define GPIOTE_INTENSET1_IN3_Pos (3UL)
  #define GPIOTE_INTENSET1_IN3_Msk (0x1UL << GPIOTE_INTENSET1_IN3_Pos)
  #define GPIOTE_INTENSET1_IN3_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN3_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN3_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN3_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN3_Enabled (0x1UL)

/* IN4 @Bit 4 : Write '1' to enable interrupt for event IN[4] */
  #define GPIOTE_INTENSET1_IN4_Pos (4UL)
  #define GPIOTE_INTENSET1_IN4_Msk (0x1UL << GPIOTE_INTENSET1_IN4_Pos)
  #define GPIOTE_INTENSET1_IN4_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN4_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN4_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN4_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN4_Enabled (0x1UL)

/* IN5 @Bit 5 : Write '1' to enable interrupt for event IN[5] */
  #define GPIOTE_INTENSET1_IN5_Pos (5UL)
  #define GPIOTE_INTENSET1_IN5_Msk (0x1UL << GPIOTE_INTENSET1_IN5_Pos)
  #define GPIOTE_INTENSET1_IN5_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN5_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN5_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN5_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN5_Enabled (0x1UL)

/* IN6 @Bit 6 : Write '1' to enable interrupt for event IN[6] */
  #define GPIOTE_INTENSET1_IN6_Pos (6UL)
  #define GPIOTE_INTENSET1_IN6_Msk (0x1UL << GPIOTE_INTENSET1_IN6_Pos)
  #define GPIOTE_INTENSET1_IN6_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN6_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN6_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN6_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN6_Enabled (0x1UL)

/* IN7 @Bit 7 : Write '1' to enable interrupt for event IN[7] */
  #define GPIOTE_INTENSET1_IN7_Pos (7UL)
  #define GPIOTE_INTENSET1_IN7_Msk (0x1UL << GPIOTE_INTENSET1_IN7_Pos)
  #define GPIOTE_INTENSET1_IN7_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN7_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN7_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN7_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN7_Enabled (0x1UL)

/* PORT0NONSECURE @Bit 16 : Write '1' to enable interrupt for event PORT0NONSECURE */
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Pos (16UL)
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Msk (0x1UL << GPIOTE_INTENSET1_PORT0NONSECURE_Pos) /*!< Bit mask of PORT0NONSECURE
                                                                            field.*/
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Min (0x0UL)
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Max (0x1UL)
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Set (0x1UL)
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Enabled (0x1UL)

/* PORT0SECURE @Bit 17 : Write '1' to enable interrupt for event PORT0SECURE */
  #define GPIOTE_INTENSET1_PORT0SECURE_Pos (17UL)
  #define GPIOTE_INTENSET1_PORT0SECURE_Msk (0x1UL << GPIOTE_INTENSET1_PORT0SECURE_Pos)
  #define GPIOTE_INTENSET1_PORT0SECURE_Min (0x0UL)
  #define GPIOTE_INTENSET1_PORT0SECURE_Max (0x1UL)
  #define GPIOTE_INTENSET1_PORT0SECURE_Set (0x1UL)
  #define GPIOTE_INTENSET1_PORT0SECURE_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_PORT0SECURE_Enabled (0x1UL)


/* GPIOTE_INTENCLR1: Disable interrupt */
  #define GPIOTE_INTENCLR1_ResetValue (0x00000000UL)

/* IN0 @Bit 0 : Write '1' to disable interrupt for event IN[0] */
  #define GPIOTE_INTENCLR1_IN0_Pos (0UL)
  #define GPIOTE_INTENCLR1_IN0_Msk (0x1UL << GPIOTE_INTENCLR1_IN0_Pos)
  #define GPIOTE_INTENCLR1_IN0_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN0_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN0_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN0_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN0_Enabled (0x1UL)

/* IN1 @Bit 1 : Write '1' to disable interrupt for event IN[1] */
  #define GPIOTE_INTENCLR1_IN1_Pos (1UL)
  #define GPIOTE_INTENCLR1_IN1_Msk (0x1UL << GPIOTE_INTENCLR1_IN1_Pos)
  #define GPIOTE_INTENCLR1_IN1_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN1_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN1_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN1_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN1_Enabled (0x1UL)

/* IN2 @Bit 2 : Write '1' to disable interrupt for event IN[2] */
  #define GPIOTE_INTENCLR1_IN2_Pos (2UL)
  #define GPIOTE_INTENCLR1_IN2_Msk (0x1UL << GPIOTE_INTENCLR1_IN2_Pos)
  #define GPIOTE_INTENCLR1_IN2_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN2_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN2_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN2_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN2_Enabled (0x1UL)

/* IN3 @Bit 3 : Write '1' to disable interrupt for event IN[3] */
  #define GPIOTE_INTENCLR1_IN3_Pos (3UL)
  #define GPIOTE_INTENCLR1_IN3_Msk (0x1UL << GPIOTE_INTENCLR1_IN3_Pos)
  #define GPIOTE_INTENCLR1_IN3_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN3_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN3_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN3_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN3_Enabled (0x1UL)

/* IN4 @Bit 4 : Write '1' to disable interrupt for event IN[4] */
  #define GPIOTE_INTENCLR1_IN4_Pos (4UL)
  #define GPIOTE_INTENCLR1_IN4_Msk (0x1UL << GPIOTE_INTENCLR1_IN4_Pos)
  #define GPIOTE_INTENCLR1_IN4_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN4_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN4_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN4_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN4_Enabled (0x1UL)

/* IN5 @Bit 5 : Write '1' to disable interrupt for event IN[5] */
  #define GPIOTE_INTENCLR1_IN5_Pos (5UL)
  #define GPIOTE_INTENCLR1_IN5_Msk (0x1UL << GPIOTE_INTENCLR1_IN5_Pos)
  #define GPIOTE_INTENCLR1_IN5_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN5_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN5_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN5_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN5_Enabled (0x1UL)

/* IN6 @Bit 6 : Write '1' to disable interrupt for event IN[6] */
  #define GPIOTE_INTENCLR1_IN6_Pos (6UL)
  #define GPIOTE_INTENCLR1_IN6_Msk (0x1UL << GPIOTE_INTENCLR1_IN6_Pos)
  #define GPIOTE_INTENCLR1_IN6_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN6_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN6_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN6_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN6_Enabled (0x1UL)

/* IN7 @Bit 7 : Write '1' to disable interrupt for event IN[7] */
  #define GPIOTE_INTENCLR1_IN7_Pos (7UL)
  #define GPIOTE_INTENCLR1_IN7_Msk (0x1UL << GPIOTE_INTENCLR1_IN7_Pos)
  #define GPIOTE_INTENCLR1_IN7_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN7_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN7_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN7_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN7_Enabled (0x1UL)

/* PORT0NONSECURE @Bit 16 : Write '1' to disable interrupt for event PORT0NONSECURE */
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Pos (16UL)
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Msk (0x1UL << GPIOTE_INTENCLR1_PORT0NONSECURE_Pos) /*!< Bit mask of PORT0NONSECURE
                                                                            field.*/
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Min (0x0UL)
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Max (0x1UL)
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Enabled (0x1UL)

/* PORT0SECURE @Bit 17 : Write '1' to disable interrupt for event PORT0SECURE */
  #define GPIOTE_INTENCLR1_PORT0SECURE_Pos (17UL)
  #define GPIOTE_INTENCLR1_PORT0SECURE_Msk (0x1UL << GPIOTE_INTENCLR1_PORT0SECURE_Pos)
  #define GPIOTE_INTENCLR1_PORT0SECURE_Min (0x0UL)
  #define GPIOTE_INTENCLR1_PORT0SECURE_Max (0x1UL)
  #define GPIOTE_INTENCLR1_PORT0SECURE_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_PORT0SECURE_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_PORT0SECURE_Enabled (0x1UL)


/* GPIOTE_CONFIG: Configuration for OUT[n], SET[n], and CLR[n] tasks and IN[n] event */
  #define GPIOTE_CONFIG_MaxCount (8UL)
  #define GPIOTE_CONFIG_MaxIndex (7UL)
  #define GPIOTE_CONFIG_MinIndex (0UL)
  #define GPIOTE_CONFIG_ResetValue (0x00000000UL)

/* MODE @Bits 0..1 : Mode */
  #define GPIOTE_CONFIG_MODE_Pos (0UL)
  #define GPIOTE_CONFIG_MODE_Msk (0x3UL << GPIOTE_CONFIG_MODE_Pos)
  #define GPIOTE_CONFIG_MODE_Min (0x0UL)
  #define GPIOTE_CONFIG_MODE_Max (0x3UL)
  #define GPIOTE_CONFIG_MODE_Disabled (0x0UL)        /*!< Disabled. Pin specified by PSEL will not be acquired by the GPIOTE
                                                          module.*/
  #define GPIOTE_CONFIG_MODE_Event (0x1UL)
  #define GPIOTE_CONFIG_MODE_Task (0x3UL)

/* PSEL @Bits 4..8 : GPIO number associated with SET[n], CLR[n], and OUT[n] tasks and IN[n] event */
  #define GPIOTE_CONFIG_PSEL_Pos (4UL)
  #define GPIOTE_CONFIG_PSEL_Msk (0x1FUL << GPIOTE_CONFIG_PSEL_Pos)
  #define GPIOTE_CONFIG_PSEL_Min (0x00UL)
  #define GPIOTE_CONFIG_PSEL_Max (0x1FUL)

/* PORT @Bits 9..12 : Port number */
  #define GPIOTE_CONFIG_PORT_Pos (9UL)
  #define GPIOTE_CONFIG_PORT_Msk (0xFUL << GPIOTE_CONFIG_PORT_Pos)
  #define GPIOTE_CONFIG_PORT_Min (0x0UL)
  #define GPIOTE_CONFIG_PORT_Max (0xFUL)

/* POLARITY @Bits 16..17 : When In task mode: Operation to be performed on output when OUT[n] task is triggered. When In event
                           mode: Operation on input that shall trigger IN[n] event. */

  #define GPIOTE_CONFIG_POLARITY_Pos (16UL)
  #define GPIOTE_CONFIG_POLARITY_Msk (0x3UL << GPIOTE_CONFIG_POLARITY_Pos)
  #define GPIOTE_CONFIG_POLARITY_Min (0x0UL)
  #define GPIOTE_CONFIG_POLARITY_Max (0x3UL)
  #define GPIOTE_CONFIG_POLARITY_None (0x0UL)        /*!< Task mode: No effect on pin from OUT[n] task. Event mode: no IN[n]
                                                          event generated on pin activity.*/
  #define GPIOTE_CONFIG_POLARITY_LoToHi (0x1UL)      /*!< Task mode: Set pin from OUT[n] task. Event mode: Generate IN[n] event
                                                          when rising edge on pin.*/
  #define GPIOTE_CONFIG_POLARITY_HiToLo (0x2UL)      /*!< Task mode: Clear pin from OUT[n] task. Event mode: Generate IN[n]
                                                          event when falling edge on pin.*/
  #define GPIOTE_CONFIG_POLARITY_Toggle (0x3UL)      /*!< Task mode: Toggle pin from OUT[n]. Event mode: Generate IN[n] when any
                                                          change on pin.*/

/* OUTINIT @Bit 20 : When in task mode: Initial value of the output when the GPIOTE channel is configured. When in event mode:
                     No effect. */

  #define GPIOTE_CONFIG_OUTINIT_Pos (20UL)
  #define GPIOTE_CONFIG_OUTINIT_Msk (0x1UL << GPIOTE_CONFIG_OUTINIT_Pos)
  #define GPIOTE_CONFIG_OUTINIT_Min (0x0UL)
  #define GPIOTE_CONFIG_OUTINIT_Max (0x1UL)
  #define GPIOTE_CONFIG_OUTINIT_Low (0x0UL)
  #define GPIOTE_CONFIG_OUTINIT_High (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           GRTC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ===================================================== Struct GRTC_CC ====================================================== */
/**
  * @brief CC [GRTC_CC] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CCL;
  __IOM uint32_t  CCH;
  __IOM uint32_t  CCADD;
  __IOM uint32_t  CCEN;
} NRF_GRTC_CC_Type;
  #define GRTC_CC_MaxCount (12UL)
  #define GRTC_CC_MaxIndex (11UL)
  #define GRTC_CC_MinIndex (0UL)

/* GRTC_CC_CCL: The lower 32-bits of Capture/Compare register CC[n] */
  #define GRTC_CC_CCL_ResetValue (0x00000000UL)

/* CCL @Bits 0..31 : Capture/Compare low value in 1 us */
  #define GRTC_CC_CCL_CCL_Pos (0UL)
  #define GRTC_CC_CCL_CCL_Msk (0xFFFFFFFFUL << GRTC_CC_CCL_CCL_Pos)


/* GRTC_CC_CCH: The higher 32-bits of Capture/Compare register CC[n] */
  #define GRTC_CC_CCH_ResetValue (0x00000000UL)

/* CCH @Bits 0..19 : Capture/Compare high value in 1 us */
  #define GRTC_CC_CCH_CCH_Pos (0UL)
  #define GRTC_CC_CCH_CCH_Msk (0xFFFFFUL << GRTC_CC_CCH_CCH_Pos)


/* GRTC_CC_CCADD: Count to add to CC[n] when this register is written. */
  #define GRTC_CC_CCADD_ResetValue (0x00000000UL)

/* VALUE @Bits 0..30 : Count to add to CC[n] */
  #define GRTC_CC_CCADD_VALUE_Pos (0UL)
  #define GRTC_CC_CCADD_VALUE_Msk (0x7FFFFFFFUL << GRTC_CC_CCADD_VALUE_Pos)

/* REFERENCE @Bit 31 : Configure the Capture/Compare register */
  #define GRTC_CC_CCADD_REFERENCE_Pos (31UL)
  #define GRTC_CC_CCADD_REFERENCE_Msk (0x1UL << GRTC_CC_CCADD_REFERENCE_Pos)
  #define GRTC_CC_CCADD_REFERENCE_Min (0x0UL)
  #define GRTC_CC_CCADD_REFERENCE_Max (0x1UL)
  #define GRTC_CC_CCADD_REFERENCE_SYSCOUNTER (0x0UL)
  #define GRTC_CC_CCADD_REFERENCE_CC (0x1UL)


/* GRTC_CC_CCEN: Configure Capture/Compare register CC[n] */
  #define GRTC_CC_CCEN_ResetValue (0x00000000UL)

/* ACTIVE @Bit 0 : Configure the Capture/Compare register */
  #define GRTC_CC_CCEN_ACTIVE_Pos (0UL)
  #define GRTC_CC_CCEN_ACTIVE_Msk (0x1UL << GRTC_CC_CCEN_ACTIVE_Pos)
  #define GRTC_CC_CCEN_ACTIVE_Min (0x0UL)
  #define GRTC_CC_CCEN_ACTIVE_Max (0x1UL)
  #define GRTC_CC_CCEN_ACTIVE_Disable (0x0UL)
  #define GRTC_CC_CCEN_ACTIVE_Enable (0x1UL)

/* PASTCC @Bit 1 : Status of event EVENTS_COMPARE[n] caused by the configured CC value is in past */
  #define GRTC_CC_CCEN_PASTCC_Pos (1UL)
  #define GRTC_CC_CCEN_PASTCC_Msk (0x1UL << GRTC_CC_CCEN_PASTCC_Pos)
  #define GRTC_CC_CCEN_PASTCC_Min (0x0UL)
  #define GRTC_CC_CCEN_PASTCC_Max (0x1UL)
  #define GRTC_CC_CCEN_PASTCC_Inactive (0x0UL)
  #define GRTC_CC_CCEN_PASTCC_Active (0x1UL)



/* ================================================= Struct GRTC_SYSCOUNTER ================================================== */
/**
  * @brief SYSCOUNTER [GRTC_SYSCOUNTER] (unspecified)
  */
typedef struct {
  __IM  uint32_t  SYSCOUNTERL;
  __IM  uint32_t  SYSCOUNTERH;
  __IOM uint32_t  ACTIVE;                            /*!< (@ 0x00000008) Request to keep the SYSCOUNTER in the active state and
                                                                         prevent going to sleep for index [n]*/
  __IM  uint32_t  RESERVED;
} NRF_GRTC_SYSCOUNTER_Type;
  #define GRTC_SYSCOUNTER_MaxCount (4UL)
  #define GRTC_SYSCOUNTER_MaxIndex (3UL)
  #define GRTC_SYSCOUNTER_MinIndex (0UL)

/* GRTC_SYSCOUNTER_SYSCOUNTERL: The lower 32-bits of the SYSCOUNTER for index [n] */
  #define GRTC_SYSCOUNTER_SYSCOUNTERL_ResetValue (0x00000000UL)

/* VALUE @Bits 0..31 : The lower 32-bits of the SYSCOUNTER value. */
  #define GRTC_SYSCOUNTER_SYSCOUNTERL_VALUE_Pos (0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERL_VALUE_Msk (0xFFFFFFFFUL << GRTC_SYSCOUNTER_SYSCOUNTERL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/


/* GRTC_SYSCOUNTER_SYSCOUNTERH: The higher 20-bits of the SYSCOUNTER for index [n] */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_ResetValue (0x60000000UL)

/* VALUE @Bits 0..19 : The higher 20-bits of the SYSCOUNTER value. */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_VALUE_Pos (0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_VALUE_Msk (0xFFFFFUL << GRTC_SYSCOUNTER_SYSCOUNTERH_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/

/* LOADED @Bit 29 : SYSCOUNTER loaded status */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Pos (29UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Msk (0x1UL << GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Pos) /*!< Bit mask of LOADED
                                                                            field.*/
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Min (0x0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Max (0x1UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_NotLoaded (0x0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Loaded (0x1UL)

/* BUSY @Bit 30 : SYSCOUNTER busy status */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Pos (30UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Msk (0x1UL << GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Pos)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Min (0x0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Max (0x1UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Ready (0x0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Busy (0x1UL) /*!< SYSCOUNTER is busy, so not ready for read (value returned in the
                                                             VALUE field of this register is not valid)*/

/* OVERFLOW @Bit 31 : The SYSCOUNTERL overflow indication after reading it. */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Pos (31UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Msk (0x1UL << GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Pos) /*!< Bit mask of OVERFLOW
                                                                            field.*/
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Min (0x0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Max (0x1UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_NoOverflow (0x0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Overflow (0x1UL)


/* GRTC_SYSCOUNTER_ACTIVE: Request to keep the SYSCOUNTER in the active state and prevent going to sleep for index [n] */
  #define GRTC_SYSCOUNTER_ACTIVE_ResetValue (0x00000000UL)

/* ACTIVE @Bit 0 : Keep SYSCOUNTER in active state */
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Pos (0UL)
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Msk (0x1UL << GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Pos)
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Min (0x0UL)
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Max (0x1UL)
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_NotActive (0x0UL)
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Active (0x1UL)


/* ======================================================= Struct GRTC ======================================================= */
/**
  * @brief Global Real-time counter
  */
  typedef struct {
    __OM uint32_t TASKS_CAPTURE[12];
    __IM uint32_t RESERVED[12];
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_CLEAR;
    __OM uint32_t TASKS_PWMSTART;
    __OM uint32_t TASKS_PWMSTOP;
    __IM uint32_t RESERVED1[3];
    __IOM uint32_t SUBSCRIBE_CAPTURE[12];
    __IM uint32_t RESERVED2[20];
    __IOM uint32_t EVENTS_COMPARE[12];
    __IM uint32_t RESERVED3[13];
    __IOM uint32_t EVENTS_RTCOMPARESYNC;             /*!< (@ 0x00000164) The GRTC low frequency timer is synchronized with the
                                                                         SYSCOUNTER*/
    __IM uint32_t RESERVED4;
    __IOM uint32_t EVENTS_PWMPERIODEND;
    __IM uint32_t RESERVED5[4];
    __IOM uint32_t PUBLISH_COMPARE[12];
    __IM uint32_t RESERVED6[20];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED7[63];
    __IOM uint32_t INTEN0;
    __IOM uint32_t INTENSET0;
    __IOM uint32_t INTENCLR0;
    __IM uint32_t INTPEND0;
    __IOM uint32_t INTEN1;
    __IOM uint32_t INTENSET1;
    __IOM uint32_t INTENCLR1;
    __IM uint32_t INTPEND1;
    __IOM uint32_t INTEN2;
    __IOM uint32_t INTENSET2;
    __IOM uint32_t INTENCLR2;
    __IM uint32_t INTPEND2;
    __IOM uint32_t INTEN3;
    __IOM uint32_t INTENSET3;
    __IOM uint32_t INTENCLR3;
    __IM uint32_t INTPEND3;
    __IM uint32_t RESERVED8[48];
    __IOM uint32_t EVTEN;
    __IOM uint32_t EVTENSET;
    __IOM uint32_t EVTENCLR;
    __IM uint32_t RESERVED9[65];
    __IOM uint32_t MODE;
    __IM uint32_t RESERVED10[3];
    __IOM NRF_GRTC_CC_Type CC[12];
    __IM uint32_t RESERVED11[49];
    __IOM uint32_t TIMEOUT;                          /*!< (@ 0x000006A4) Timeout after all CPUs gone into sleep state to stop
                                                                         the SYSCOUNTER*/
    __IOM uint32_t INTERVAL;                         /*!< (@ 0x000006A8) Count to add to CC[0] when the event EVENTS_COMPARE[0]
                                                                         triggers.*/
    __IOM uint32_t WAKETIME;
    __IM uint32_t RESERVED12[24];
    __IOM uint32_t PWMCONFIG;
    __IOM uint32_t CLKOUT;
    __IOM uint32_t CLKCFG;
    __IM uint32_t RESERVED13;
    __IOM NRF_GRTC_SYSCOUNTER_Type SYSCOUNTER[4];
  } NRF_GRTC_Type;

/* GRTC_TASKS_CAPTURE: Capture the counter value to CC[n] register */
  #define GRTC_TASKS_CAPTURE_MaxCount (12UL)
  #define GRTC_TASKS_CAPTURE_MaxIndex (11UL)
  #define GRTC_TASKS_CAPTURE_MinIndex (0UL)
  #define GRTC_TASKS_CAPTURE_ResetValue (0x00000000UL)

/* TASKS_CAPTURE @Bit 0 : Capture the counter value to CC[n] register */
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Pos (0UL)
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Msk (0x1UL << GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Pos) /*!< Bit mask of TASKS_CAPTURE
                                                                            field.*/
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Min (0x1UL)
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Max (0x1UL)
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Trigger (0x1UL)


/* GRTC_TASKS_START: Start the counter */
  #define GRTC_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start the counter */
  #define GRTC_TASKS_START_TASKS_START_Pos (0UL)
  #define GRTC_TASKS_START_TASKS_START_Msk (0x1UL << GRTC_TASKS_START_TASKS_START_Pos)
  #define GRTC_TASKS_START_TASKS_START_Min (0x1UL)
  #define GRTC_TASKS_START_TASKS_START_Max (0x1UL)
  #define GRTC_TASKS_START_TASKS_START_Trigger (0x1UL)


/* GRTC_TASKS_STOP: Stop the counter */
  #define GRTC_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop the counter */
  #define GRTC_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define GRTC_TASKS_STOP_TASKS_STOP_Msk (0x1UL << GRTC_TASKS_STOP_TASKS_STOP_Pos)
  #define GRTC_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define GRTC_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define GRTC_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* GRTC_TASKS_CLEAR: Clear the counter */
  #define GRTC_TASKS_CLEAR_ResetValue (0x00000000UL)

/* TASKS_CLEAR @Bit 0 : Clear the counter */
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Pos (0UL)
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Msk (0x1UL << GRTC_TASKS_CLEAR_TASKS_CLEAR_Pos)
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Min (0x1UL)
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Max (0x1UL)
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Trigger (0x1UL)


/* GRTC_TASKS_PWMSTART: Start the PWM */
  #define GRTC_TASKS_PWMSTART_ResetValue (0x00000000UL)

/* TASKS_PWMSTART @Bit 0 : Start the PWM */
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Pos (0UL)
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Msk (0x1UL << GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Pos) /*!< Bit mask of
                                                                            TASKS_PWMSTART field.*/
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Min (0x1UL)
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Max (0x1UL)
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Trigger (0x1UL)


/* GRTC_TASKS_PWMSTOP: Stop the PWM */
  #define GRTC_TASKS_PWMSTOP_ResetValue (0x00000000UL)

/* TASKS_PWMSTOP @Bit 0 : Stop the PWM */
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Pos (0UL)
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Msk (0x1UL << GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Pos) /*!< Bit mask of TASKS_PWMSTOP
                                                                            field.*/
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Min (0x1UL)
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Max (0x1UL)
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Trigger (0x1UL)


/* GRTC_SUBSCRIBE_CAPTURE: Subscribe configuration for task CAPTURE[n] */
  #define GRTC_SUBSCRIBE_CAPTURE_MaxCount (12UL)
  #define GRTC_SUBSCRIBE_CAPTURE_MaxIndex (11UL)
  #define GRTC_SUBSCRIBE_CAPTURE_MinIndex (0UL)
  #define GRTC_SUBSCRIBE_CAPTURE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CAPTURE[n] will subscribe to */
  #define GRTC_SUBSCRIBE_CAPTURE_CHIDX_Pos (0UL)
  #define GRTC_SUBSCRIBE_CAPTURE_CHIDX_Msk (0xFFUL << GRTC_SUBSCRIBE_CAPTURE_CHIDX_Pos)
  #define GRTC_SUBSCRIBE_CAPTURE_CHIDX_Min (0x00UL)
  #define GRTC_SUBSCRIBE_CAPTURE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Pos (31UL)
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Msk (0x1UL << GRTC_SUBSCRIBE_CAPTURE_EN_Pos)
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Min (0x0UL)
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Max (0x1UL)
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Disabled (0x0UL)
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Enabled (0x1UL)


/* GRTC_EVENTS_COMPARE: Compare event on CC[n] match */
  #define GRTC_EVENTS_COMPARE_MaxCount (12UL)
  #define GRTC_EVENTS_COMPARE_MaxIndex (11UL)
  #define GRTC_EVENTS_COMPARE_MinIndex (0UL)
  #define GRTC_EVENTS_COMPARE_ResetValue (0x00000000UL)

/* EVENTS_COMPARE @Bit 0 : Compare event on CC[n] match */
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Pos (0UL)
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Msk (0x1UL << GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Pos) /*!< Bit mask of
                                                                            EVENTS_COMPARE field.*/
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Min (0x0UL)
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Max (0x1UL)
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_NotGenerated (0x0UL)
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Generated (0x1UL)


/* GRTC_EVENTS_RTCOMPARESYNC: The GRTC low frequency timer is synchronized with the SYSCOUNTER */
  #define GRTC_EVENTS_RTCOMPARESYNC_ResetValue (0x00000000UL)

/* EVENTS_RTCOMPARESYNC @Bit 0 : The GRTC low frequency timer is synchronized with the SYSCOUNTER */
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Pos (0UL)
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Msk (0x1UL << GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Pos) /*!<
                                                                            Bit mask of EVENTS_RTCOMPARESYNC field.*/
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_NotGenerated (0x0UL)
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Generated (0x1UL)


/* GRTC_EVENTS_PWMPERIODEND: Event on end of each PWM period */
  #define GRTC_EVENTS_PWMPERIODEND_ResetValue (0x00000000UL)

/* EVENTS_PWMPERIODEND @Bit 0 : Event on end of each PWM period */
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos (0UL)
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Msk (0x1UL << GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos) /*!< Bit
                                                                            mask of EVENTS_PWMPERIODEND field.*/
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Min (0x0UL)
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Max (0x1UL)
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_NotGenerated (0x0UL)
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Generated (0x1UL)


/* GRTC_PUBLISH_COMPARE: Publish configuration for event COMPARE[n] */
  #define GRTC_PUBLISH_COMPARE_MaxCount (12UL)
  #define GRTC_PUBLISH_COMPARE_MaxIndex (11UL)
  #define GRTC_PUBLISH_COMPARE_MinIndex (0UL)
  #define GRTC_PUBLISH_COMPARE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event COMPARE[n] will publish to */
  #define GRTC_PUBLISH_COMPARE_CHIDX_Pos (0UL)
  #define GRTC_PUBLISH_COMPARE_CHIDX_Msk (0xFFUL << GRTC_PUBLISH_COMPARE_CHIDX_Pos)
  #define GRTC_PUBLISH_COMPARE_CHIDX_Min (0x00UL)
  #define GRTC_PUBLISH_COMPARE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GRTC_PUBLISH_COMPARE_EN_Pos (31UL)
  #define GRTC_PUBLISH_COMPARE_EN_Msk (0x1UL << GRTC_PUBLISH_COMPARE_EN_Pos)
  #define GRTC_PUBLISH_COMPARE_EN_Min (0x0UL)
  #define GRTC_PUBLISH_COMPARE_EN_Max (0x1UL)
  #define GRTC_PUBLISH_COMPARE_EN_Disabled (0x0UL)
  #define GRTC_PUBLISH_COMPARE_EN_Enabled (0x1UL)


/* GRTC_SHORTS: Shortcuts between local events and tasks */
  #define GRTC_SHORTS_ResetValue (0x00000000UL)

/* RTCOMPARE_CLEAR @Bit 0 : Shortcut between event RTCOMPARE and task CLEAR */
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Pos (0UL)
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Msk (0x1UL << GRTC_SHORTS_RTCOMPARE_CLEAR_Pos)
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Min (0x0UL)
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Max (0x1UL)
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Disabled (0x0UL)
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Enabled (0x1UL)


/* GRTC_INTEN0: Enable or disable interrupt */
  #define GRTC_INTEN0_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN0_COMPARE0_Pos (0UL)
  #define GRTC_INTEN0_COMPARE0_Msk (0x1UL << GRTC_INTEN0_COMPARE0_Pos)
  #define GRTC_INTEN0_COMPARE0_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE0_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN0_COMPARE1_Pos (1UL)
  #define GRTC_INTEN0_COMPARE1_Msk (0x1UL << GRTC_INTEN0_COMPARE1_Pos)
  #define GRTC_INTEN0_COMPARE1_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE1_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN0_COMPARE2_Pos (2UL)
  #define GRTC_INTEN0_COMPARE2_Msk (0x1UL << GRTC_INTEN0_COMPARE2_Pos)
  #define GRTC_INTEN0_COMPARE2_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE2_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN0_COMPARE3_Pos (3UL)
  #define GRTC_INTEN0_COMPARE3_Msk (0x1UL << GRTC_INTEN0_COMPARE3_Pos)
  #define GRTC_INTEN0_COMPARE3_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE3_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN0_COMPARE4_Pos (4UL)
  #define GRTC_INTEN0_COMPARE4_Msk (0x1UL << GRTC_INTEN0_COMPARE4_Pos)
  #define GRTC_INTEN0_COMPARE4_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE4_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN0_COMPARE5_Pos (5UL)
  #define GRTC_INTEN0_COMPARE5_Msk (0x1UL << GRTC_INTEN0_COMPARE5_Pos)
  #define GRTC_INTEN0_COMPARE5_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE5_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN0_COMPARE6_Pos (6UL)
  #define GRTC_INTEN0_COMPARE6_Msk (0x1UL << GRTC_INTEN0_COMPARE6_Pos)
  #define GRTC_INTEN0_COMPARE6_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE6_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN0_COMPARE7_Pos (7UL)
  #define GRTC_INTEN0_COMPARE7_Msk (0x1UL << GRTC_INTEN0_COMPARE7_Pos)
  #define GRTC_INTEN0_COMPARE7_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE7_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN0_COMPARE8_Pos (8UL)
  #define GRTC_INTEN0_COMPARE8_Msk (0x1UL << GRTC_INTEN0_COMPARE8_Pos)
  #define GRTC_INTEN0_COMPARE8_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE8_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN0_COMPARE9_Pos (9UL)
  #define GRTC_INTEN0_COMPARE9_Msk (0x1UL << GRTC_INTEN0_COMPARE9_Pos)
  #define GRTC_INTEN0_COMPARE9_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE9_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN0_COMPARE10_Pos (10UL)
  #define GRTC_INTEN0_COMPARE10_Msk (0x1UL << GRTC_INTEN0_COMPARE10_Pos)
  #define GRTC_INTEN0_COMPARE10_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE10_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN0_COMPARE11_Pos (11UL)
  #define GRTC_INTEN0_COMPARE11_Msk (0x1UL << GRTC_INTEN0_COMPARE11_Pos)
  #define GRTC_INTEN0_COMPARE11_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE11_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE11_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN0_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTEN0_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN0_RTCOMPARESYNC_Pos)
  #define GRTC_INTEN0_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTEN0_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTEN0_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTEN0_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN0_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTEN0_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN0_PWMPERIODEND_Pos)
  #define GRTC_INTEN0_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTEN0_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTEN0_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTEN0_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENSET0: Enable interrupt */
  #define GRTC_INTENSET0_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET0_COMPARE0_Pos (0UL)
  #define GRTC_INTENSET0_COMPARE0_Msk (0x1UL << GRTC_INTENSET0_COMPARE0_Pos)
  #define GRTC_INTENSET0_COMPARE0_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE0_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE0_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET0_COMPARE1_Pos (1UL)
  #define GRTC_INTENSET0_COMPARE1_Msk (0x1UL << GRTC_INTENSET0_COMPARE1_Pos)
  #define GRTC_INTENSET0_COMPARE1_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE1_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE1_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET0_COMPARE2_Pos (2UL)
  #define GRTC_INTENSET0_COMPARE2_Msk (0x1UL << GRTC_INTENSET0_COMPARE2_Pos)
  #define GRTC_INTENSET0_COMPARE2_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE2_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE2_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET0_COMPARE3_Pos (3UL)
  #define GRTC_INTENSET0_COMPARE3_Msk (0x1UL << GRTC_INTENSET0_COMPARE3_Pos)
  #define GRTC_INTENSET0_COMPARE3_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE3_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE3_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET0_COMPARE4_Pos (4UL)
  #define GRTC_INTENSET0_COMPARE4_Msk (0x1UL << GRTC_INTENSET0_COMPARE4_Pos)
  #define GRTC_INTENSET0_COMPARE4_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE4_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE4_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET0_COMPARE5_Pos (5UL)
  #define GRTC_INTENSET0_COMPARE5_Msk (0x1UL << GRTC_INTENSET0_COMPARE5_Pos)
  #define GRTC_INTENSET0_COMPARE5_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE5_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE5_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET0_COMPARE6_Pos (6UL)
  #define GRTC_INTENSET0_COMPARE6_Msk (0x1UL << GRTC_INTENSET0_COMPARE6_Pos)
  #define GRTC_INTENSET0_COMPARE6_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE6_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE6_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET0_COMPARE7_Pos (7UL)
  #define GRTC_INTENSET0_COMPARE7_Msk (0x1UL << GRTC_INTENSET0_COMPARE7_Pos)
  #define GRTC_INTENSET0_COMPARE7_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE7_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE7_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET0_COMPARE8_Pos (8UL)
  #define GRTC_INTENSET0_COMPARE8_Msk (0x1UL << GRTC_INTENSET0_COMPARE8_Pos)
  #define GRTC_INTENSET0_COMPARE8_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE8_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE8_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET0_COMPARE9_Pos (9UL)
  #define GRTC_INTENSET0_COMPARE9_Msk (0x1UL << GRTC_INTENSET0_COMPARE9_Pos)
  #define GRTC_INTENSET0_COMPARE9_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE9_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE9_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET0_COMPARE10_Pos (10UL)
  #define GRTC_INTENSET0_COMPARE10_Msk (0x1UL << GRTC_INTENSET0_COMPARE10_Pos)
  #define GRTC_INTENSET0_COMPARE10_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE10_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE10_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET0_COMPARE11_Pos (11UL)
  #define GRTC_INTENSET0_COMPARE11_Msk (0x1UL << GRTC_INTENSET0_COMPARE11_Pos)
  #define GRTC_INTENSET0_COMPARE11_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE11_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE11_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE11_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET0_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENSET0_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET0_RTCOMPARESYNC_Pos)
  #define GRTC_INTENSET0_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENSET0_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENSET0_RTCOMPARESYNC_Set (0x1UL)
  #define GRTC_INTENSET0_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENSET0_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET0_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENSET0_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET0_PWMPERIODEND_Pos)
  #define GRTC_INTENSET0_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENSET0_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENSET0_PWMPERIODEND_Set (0x1UL)
  #define GRTC_INTENSET0_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENSET0_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENCLR0: Disable interrupt */
  #define GRTC_INTENCLR0_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR0_COMPARE0_Pos (0UL)
  #define GRTC_INTENCLR0_COMPARE0_Msk (0x1UL << GRTC_INTENCLR0_COMPARE0_Pos)
  #define GRTC_INTENCLR0_COMPARE0_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE0_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE0_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR0_COMPARE1_Pos (1UL)
  #define GRTC_INTENCLR0_COMPARE1_Msk (0x1UL << GRTC_INTENCLR0_COMPARE1_Pos)
  #define GRTC_INTENCLR0_COMPARE1_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE1_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE1_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR0_COMPARE2_Pos (2UL)
  #define GRTC_INTENCLR0_COMPARE2_Msk (0x1UL << GRTC_INTENCLR0_COMPARE2_Pos)
  #define GRTC_INTENCLR0_COMPARE2_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE2_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE2_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR0_COMPARE3_Pos (3UL)
  #define GRTC_INTENCLR0_COMPARE3_Msk (0x1UL << GRTC_INTENCLR0_COMPARE3_Pos)
  #define GRTC_INTENCLR0_COMPARE3_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE3_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE3_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR0_COMPARE4_Pos (4UL)
  #define GRTC_INTENCLR0_COMPARE4_Msk (0x1UL << GRTC_INTENCLR0_COMPARE4_Pos)
  #define GRTC_INTENCLR0_COMPARE4_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE4_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE4_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR0_COMPARE5_Pos (5UL)
  #define GRTC_INTENCLR0_COMPARE5_Msk (0x1UL << GRTC_INTENCLR0_COMPARE5_Pos)
  #define GRTC_INTENCLR0_COMPARE5_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE5_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE5_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR0_COMPARE6_Pos (6UL)
  #define GRTC_INTENCLR0_COMPARE6_Msk (0x1UL << GRTC_INTENCLR0_COMPARE6_Pos)
  #define GRTC_INTENCLR0_COMPARE6_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE6_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE6_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR0_COMPARE7_Pos (7UL)
  #define GRTC_INTENCLR0_COMPARE7_Msk (0x1UL << GRTC_INTENCLR0_COMPARE7_Pos)
  #define GRTC_INTENCLR0_COMPARE7_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE7_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE7_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR0_COMPARE8_Pos (8UL)
  #define GRTC_INTENCLR0_COMPARE8_Msk (0x1UL << GRTC_INTENCLR0_COMPARE8_Pos)
  #define GRTC_INTENCLR0_COMPARE8_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE8_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE8_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR0_COMPARE9_Pos (9UL)
  #define GRTC_INTENCLR0_COMPARE9_Msk (0x1UL << GRTC_INTENCLR0_COMPARE9_Pos)
  #define GRTC_INTENCLR0_COMPARE9_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE9_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE9_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR0_COMPARE10_Pos (10UL)
  #define GRTC_INTENCLR0_COMPARE10_Msk (0x1UL << GRTC_INTENCLR0_COMPARE10_Pos)
  #define GRTC_INTENCLR0_COMPARE10_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE10_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE10_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR0_COMPARE11_Pos (11UL)
  #define GRTC_INTENCLR0_COMPARE11_Msk (0x1UL << GRTC_INTENCLR0_COMPARE11_Pos)
  #define GRTC_INTENCLR0_COMPARE11_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE11_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE11_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE11_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR0_RTCOMPARESYNC_Pos)
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Clear (0x1UL)
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR0_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENCLR0_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR0_PWMPERIODEND_Pos)
  #define GRTC_INTENCLR0_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENCLR0_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENCLR0_PWMPERIODEND_Clear (0x1UL)
  #define GRTC_INTENCLR0_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENCLR0_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTPEND0: Pending interrupts */
  #define GRTC_INTPEND0_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND0_COMPARE0_Pos (0UL)
  #define GRTC_INTPEND0_COMPARE0_Msk (0x1UL << GRTC_INTPEND0_COMPARE0_Pos)
  #define GRTC_INTPEND0_COMPARE0_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE0_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE0_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE0_Pending (0x1UL)

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND0_COMPARE1_Pos (1UL)
  #define GRTC_INTPEND0_COMPARE1_Msk (0x1UL << GRTC_INTPEND0_COMPARE1_Pos)
  #define GRTC_INTPEND0_COMPARE1_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE1_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE1_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE1_Pending (0x1UL)

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND0_COMPARE2_Pos (2UL)
  #define GRTC_INTPEND0_COMPARE2_Msk (0x1UL << GRTC_INTPEND0_COMPARE2_Pos)
  #define GRTC_INTPEND0_COMPARE2_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE2_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE2_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE2_Pending (0x1UL)

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND0_COMPARE3_Pos (3UL)
  #define GRTC_INTPEND0_COMPARE3_Msk (0x1UL << GRTC_INTPEND0_COMPARE3_Pos)
  #define GRTC_INTPEND0_COMPARE3_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE3_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE3_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE3_Pending (0x1UL)

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND0_COMPARE4_Pos (4UL)
  #define GRTC_INTPEND0_COMPARE4_Msk (0x1UL << GRTC_INTPEND0_COMPARE4_Pos)
  #define GRTC_INTPEND0_COMPARE4_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE4_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE4_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE4_Pending (0x1UL)

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND0_COMPARE5_Pos (5UL)
  #define GRTC_INTPEND0_COMPARE5_Msk (0x1UL << GRTC_INTPEND0_COMPARE5_Pos)
  #define GRTC_INTPEND0_COMPARE5_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE5_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE5_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE5_Pending (0x1UL)

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND0_COMPARE6_Pos (6UL)
  #define GRTC_INTPEND0_COMPARE6_Msk (0x1UL << GRTC_INTPEND0_COMPARE6_Pos)
  #define GRTC_INTPEND0_COMPARE6_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE6_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE6_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE6_Pending (0x1UL)

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND0_COMPARE7_Pos (7UL)
  #define GRTC_INTPEND0_COMPARE7_Msk (0x1UL << GRTC_INTPEND0_COMPARE7_Pos)
  #define GRTC_INTPEND0_COMPARE7_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE7_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE7_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE7_Pending (0x1UL)

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND0_COMPARE8_Pos (8UL)
  #define GRTC_INTPEND0_COMPARE8_Msk (0x1UL << GRTC_INTPEND0_COMPARE8_Pos)
  #define GRTC_INTPEND0_COMPARE8_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE8_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE8_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE8_Pending (0x1UL)

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND0_COMPARE9_Pos (9UL)
  #define GRTC_INTPEND0_COMPARE9_Msk (0x1UL << GRTC_INTPEND0_COMPARE9_Pos)
  #define GRTC_INTPEND0_COMPARE9_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE9_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE9_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE9_Pending (0x1UL)

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND0_COMPARE10_Pos (10UL)
  #define GRTC_INTPEND0_COMPARE10_Msk (0x1UL << GRTC_INTPEND0_COMPARE10_Pos)
  #define GRTC_INTPEND0_COMPARE10_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE10_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE10_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE10_Pending (0x1UL)

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND0_COMPARE11_Pos (11UL)
  #define GRTC_INTPEND0_COMPARE11_Msk (0x1UL << GRTC_INTPEND0_COMPARE11_Pos)
  #define GRTC_INTPEND0_COMPARE11_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE11_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE11_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE11_Pending (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND0_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTPEND0_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND0_RTCOMPARESYNC_Pos)
  #define GRTC_INTPEND0_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTPEND0_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTPEND0_RTCOMPARESYNC_NotPending (0x0UL)
  #define GRTC_INTPEND0_RTCOMPARESYNC_Pending (0x1UL)

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND0_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTPEND0_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND0_PWMPERIODEND_Pos)
  #define GRTC_INTPEND0_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTPEND0_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTPEND0_PWMPERIODEND_NotPending (0x0UL)
  #define GRTC_INTPEND0_PWMPERIODEND_Pending (0x1UL)


/* GRTC_INTEN1: Enable or disable interrupt */
  #define GRTC_INTEN1_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN1_COMPARE0_Pos (0UL)
  #define GRTC_INTEN1_COMPARE0_Msk (0x1UL << GRTC_INTEN1_COMPARE0_Pos)
  #define GRTC_INTEN1_COMPARE0_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE0_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN1_COMPARE1_Pos (1UL)
  #define GRTC_INTEN1_COMPARE1_Msk (0x1UL << GRTC_INTEN1_COMPARE1_Pos)
  #define GRTC_INTEN1_COMPARE1_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE1_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN1_COMPARE2_Pos (2UL)
  #define GRTC_INTEN1_COMPARE2_Msk (0x1UL << GRTC_INTEN1_COMPARE2_Pos)
  #define GRTC_INTEN1_COMPARE2_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE2_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN1_COMPARE3_Pos (3UL)
  #define GRTC_INTEN1_COMPARE3_Msk (0x1UL << GRTC_INTEN1_COMPARE3_Pos)
  #define GRTC_INTEN1_COMPARE3_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE3_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN1_COMPARE4_Pos (4UL)
  #define GRTC_INTEN1_COMPARE4_Msk (0x1UL << GRTC_INTEN1_COMPARE4_Pos)
  #define GRTC_INTEN1_COMPARE4_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE4_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN1_COMPARE5_Pos (5UL)
  #define GRTC_INTEN1_COMPARE5_Msk (0x1UL << GRTC_INTEN1_COMPARE5_Pos)
  #define GRTC_INTEN1_COMPARE5_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE5_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN1_COMPARE6_Pos (6UL)
  #define GRTC_INTEN1_COMPARE6_Msk (0x1UL << GRTC_INTEN1_COMPARE6_Pos)
  #define GRTC_INTEN1_COMPARE6_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE6_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN1_COMPARE7_Pos (7UL)
  #define GRTC_INTEN1_COMPARE7_Msk (0x1UL << GRTC_INTEN1_COMPARE7_Pos)
  #define GRTC_INTEN1_COMPARE7_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE7_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN1_COMPARE8_Pos (8UL)
  #define GRTC_INTEN1_COMPARE8_Msk (0x1UL << GRTC_INTEN1_COMPARE8_Pos)
  #define GRTC_INTEN1_COMPARE8_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE8_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN1_COMPARE9_Pos (9UL)
  #define GRTC_INTEN1_COMPARE9_Msk (0x1UL << GRTC_INTEN1_COMPARE9_Pos)
  #define GRTC_INTEN1_COMPARE9_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE9_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN1_COMPARE10_Pos (10UL)
  #define GRTC_INTEN1_COMPARE10_Msk (0x1UL << GRTC_INTEN1_COMPARE10_Pos)
  #define GRTC_INTEN1_COMPARE10_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE10_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN1_COMPARE11_Pos (11UL)
  #define GRTC_INTEN1_COMPARE11_Msk (0x1UL << GRTC_INTEN1_COMPARE11_Pos)
  #define GRTC_INTEN1_COMPARE11_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE11_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE11_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN1_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTEN1_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN1_RTCOMPARESYNC_Pos)
  #define GRTC_INTEN1_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTEN1_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTEN1_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTEN1_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN1_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTEN1_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN1_PWMPERIODEND_Pos)
  #define GRTC_INTEN1_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTEN1_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTEN1_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTEN1_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENSET1: Enable interrupt */
  #define GRTC_INTENSET1_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET1_COMPARE0_Pos (0UL)
  #define GRTC_INTENSET1_COMPARE0_Msk (0x1UL << GRTC_INTENSET1_COMPARE0_Pos)
  #define GRTC_INTENSET1_COMPARE0_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE0_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE0_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET1_COMPARE1_Pos (1UL)
  #define GRTC_INTENSET1_COMPARE1_Msk (0x1UL << GRTC_INTENSET1_COMPARE1_Pos)
  #define GRTC_INTENSET1_COMPARE1_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE1_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE1_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET1_COMPARE2_Pos (2UL)
  #define GRTC_INTENSET1_COMPARE2_Msk (0x1UL << GRTC_INTENSET1_COMPARE2_Pos)
  #define GRTC_INTENSET1_COMPARE2_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE2_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE2_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET1_COMPARE3_Pos (3UL)
  #define GRTC_INTENSET1_COMPARE3_Msk (0x1UL << GRTC_INTENSET1_COMPARE3_Pos)
  #define GRTC_INTENSET1_COMPARE3_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE3_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE3_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET1_COMPARE4_Pos (4UL)
  #define GRTC_INTENSET1_COMPARE4_Msk (0x1UL << GRTC_INTENSET1_COMPARE4_Pos)
  #define GRTC_INTENSET1_COMPARE4_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE4_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE4_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET1_COMPARE5_Pos (5UL)
  #define GRTC_INTENSET1_COMPARE5_Msk (0x1UL << GRTC_INTENSET1_COMPARE5_Pos)
  #define GRTC_INTENSET1_COMPARE5_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE5_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE5_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET1_COMPARE6_Pos (6UL)
  #define GRTC_INTENSET1_COMPARE6_Msk (0x1UL << GRTC_INTENSET1_COMPARE6_Pos)
  #define GRTC_INTENSET1_COMPARE6_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE6_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE6_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET1_COMPARE7_Pos (7UL)
  #define GRTC_INTENSET1_COMPARE7_Msk (0x1UL << GRTC_INTENSET1_COMPARE7_Pos)
  #define GRTC_INTENSET1_COMPARE7_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE7_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE7_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET1_COMPARE8_Pos (8UL)
  #define GRTC_INTENSET1_COMPARE8_Msk (0x1UL << GRTC_INTENSET1_COMPARE8_Pos)
  #define GRTC_INTENSET1_COMPARE8_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE8_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE8_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET1_COMPARE9_Pos (9UL)
  #define GRTC_INTENSET1_COMPARE9_Msk (0x1UL << GRTC_INTENSET1_COMPARE9_Pos)
  #define GRTC_INTENSET1_COMPARE9_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE9_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE9_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET1_COMPARE10_Pos (10UL)
  #define GRTC_INTENSET1_COMPARE10_Msk (0x1UL << GRTC_INTENSET1_COMPARE10_Pos)
  #define GRTC_INTENSET1_COMPARE10_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE10_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE10_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET1_COMPARE11_Pos (11UL)
  #define GRTC_INTENSET1_COMPARE11_Msk (0x1UL << GRTC_INTENSET1_COMPARE11_Pos)
  #define GRTC_INTENSET1_COMPARE11_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE11_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE11_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE11_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET1_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENSET1_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET1_RTCOMPARESYNC_Pos)
  #define GRTC_INTENSET1_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENSET1_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENSET1_RTCOMPARESYNC_Set (0x1UL)
  #define GRTC_INTENSET1_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENSET1_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET1_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENSET1_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET1_PWMPERIODEND_Pos)
  #define GRTC_INTENSET1_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENSET1_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENSET1_PWMPERIODEND_Set (0x1UL)
  #define GRTC_INTENSET1_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENSET1_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENCLR1: Disable interrupt */
  #define GRTC_INTENCLR1_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR1_COMPARE0_Pos (0UL)
  #define GRTC_INTENCLR1_COMPARE0_Msk (0x1UL << GRTC_INTENCLR1_COMPARE0_Pos)
  #define GRTC_INTENCLR1_COMPARE0_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE0_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE0_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR1_COMPARE1_Pos (1UL)
  #define GRTC_INTENCLR1_COMPARE1_Msk (0x1UL << GRTC_INTENCLR1_COMPARE1_Pos)
  #define GRTC_INTENCLR1_COMPARE1_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE1_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE1_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR1_COMPARE2_Pos (2UL)
  #define GRTC_INTENCLR1_COMPARE2_Msk (0x1UL << GRTC_INTENCLR1_COMPARE2_Pos)
  #define GRTC_INTENCLR1_COMPARE2_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE2_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE2_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR1_COMPARE3_Pos (3UL)
  #define GRTC_INTENCLR1_COMPARE3_Msk (0x1UL << GRTC_INTENCLR1_COMPARE3_Pos)
  #define GRTC_INTENCLR1_COMPARE3_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE3_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE3_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR1_COMPARE4_Pos (4UL)
  #define GRTC_INTENCLR1_COMPARE4_Msk (0x1UL << GRTC_INTENCLR1_COMPARE4_Pos)
  #define GRTC_INTENCLR1_COMPARE4_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE4_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE4_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR1_COMPARE5_Pos (5UL)
  #define GRTC_INTENCLR1_COMPARE5_Msk (0x1UL << GRTC_INTENCLR1_COMPARE5_Pos)
  #define GRTC_INTENCLR1_COMPARE5_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE5_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE5_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR1_COMPARE6_Pos (6UL)
  #define GRTC_INTENCLR1_COMPARE6_Msk (0x1UL << GRTC_INTENCLR1_COMPARE6_Pos)
  #define GRTC_INTENCLR1_COMPARE6_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE6_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE6_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR1_COMPARE7_Pos (7UL)
  #define GRTC_INTENCLR1_COMPARE7_Msk (0x1UL << GRTC_INTENCLR1_COMPARE7_Pos)
  #define GRTC_INTENCLR1_COMPARE7_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE7_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE7_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR1_COMPARE8_Pos (8UL)
  #define GRTC_INTENCLR1_COMPARE8_Msk (0x1UL << GRTC_INTENCLR1_COMPARE8_Pos)
  #define GRTC_INTENCLR1_COMPARE8_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE8_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE8_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR1_COMPARE9_Pos (9UL)
  #define GRTC_INTENCLR1_COMPARE9_Msk (0x1UL << GRTC_INTENCLR1_COMPARE9_Pos)
  #define GRTC_INTENCLR1_COMPARE9_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE9_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE9_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR1_COMPARE10_Pos (10UL)
  #define GRTC_INTENCLR1_COMPARE10_Msk (0x1UL << GRTC_INTENCLR1_COMPARE10_Pos)
  #define GRTC_INTENCLR1_COMPARE10_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE10_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE10_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR1_COMPARE11_Pos (11UL)
  #define GRTC_INTENCLR1_COMPARE11_Msk (0x1UL << GRTC_INTENCLR1_COMPARE11_Pos)
  #define GRTC_INTENCLR1_COMPARE11_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE11_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE11_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE11_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR1_RTCOMPARESYNC_Pos)
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Clear (0x1UL)
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR1_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENCLR1_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR1_PWMPERIODEND_Pos)
  #define GRTC_INTENCLR1_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENCLR1_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENCLR1_PWMPERIODEND_Clear (0x1UL)
  #define GRTC_INTENCLR1_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENCLR1_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTPEND1: Pending interrupts */
  #define GRTC_INTPEND1_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND1_COMPARE0_Pos (0UL)
  #define GRTC_INTPEND1_COMPARE0_Msk (0x1UL << GRTC_INTPEND1_COMPARE0_Pos)
  #define GRTC_INTPEND1_COMPARE0_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE0_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE0_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE0_Pending (0x1UL)

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND1_COMPARE1_Pos (1UL)
  #define GRTC_INTPEND1_COMPARE1_Msk (0x1UL << GRTC_INTPEND1_COMPARE1_Pos)
  #define GRTC_INTPEND1_COMPARE1_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE1_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE1_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE1_Pending (0x1UL)

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND1_COMPARE2_Pos (2UL)
  #define GRTC_INTPEND1_COMPARE2_Msk (0x1UL << GRTC_INTPEND1_COMPARE2_Pos)
  #define GRTC_INTPEND1_COMPARE2_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE2_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE2_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE2_Pending (0x1UL)

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND1_COMPARE3_Pos (3UL)
  #define GRTC_INTPEND1_COMPARE3_Msk (0x1UL << GRTC_INTPEND1_COMPARE3_Pos)
  #define GRTC_INTPEND1_COMPARE3_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE3_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE3_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE3_Pending (0x1UL)

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND1_COMPARE4_Pos (4UL)
  #define GRTC_INTPEND1_COMPARE4_Msk (0x1UL << GRTC_INTPEND1_COMPARE4_Pos)
  #define GRTC_INTPEND1_COMPARE4_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE4_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE4_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE4_Pending (0x1UL)

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND1_COMPARE5_Pos (5UL)
  #define GRTC_INTPEND1_COMPARE5_Msk (0x1UL << GRTC_INTPEND1_COMPARE5_Pos)
  #define GRTC_INTPEND1_COMPARE5_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE5_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE5_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE5_Pending (0x1UL)

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND1_COMPARE6_Pos (6UL)
  #define GRTC_INTPEND1_COMPARE6_Msk (0x1UL << GRTC_INTPEND1_COMPARE6_Pos)
  #define GRTC_INTPEND1_COMPARE6_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE6_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE6_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE6_Pending (0x1UL)

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND1_COMPARE7_Pos (7UL)
  #define GRTC_INTPEND1_COMPARE7_Msk (0x1UL << GRTC_INTPEND1_COMPARE7_Pos)
  #define GRTC_INTPEND1_COMPARE7_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE7_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE7_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE7_Pending (0x1UL)

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND1_COMPARE8_Pos (8UL)
  #define GRTC_INTPEND1_COMPARE8_Msk (0x1UL << GRTC_INTPEND1_COMPARE8_Pos)
  #define GRTC_INTPEND1_COMPARE8_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE8_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE8_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE8_Pending (0x1UL)

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND1_COMPARE9_Pos (9UL)
  #define GRTC_INTPEND1_COMPARE9_Msk (0x1UL << GRTC_INTPEND1_COMPARE9_Pos)
  #define GRTC_INTPEND1_COMPARE9_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE9_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE9_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE9_Pending (0x1UL)

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND1_COMPARE10_Pos (10UL)
  #define GRTC_INTPEND1_COMPARE10_Msk (0x1UL << GRTC_INTPEND1_COMPARE10_Pos)
  #define GRTC_INTPEND1_COMPARE10_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE10_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE10_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE10_Pending (0x1UL)

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND1_COMPARE11_Pos (11UL)
  #define GRTC_INTPEND1_COMPARE11_Msk (0x1UL << GRTC_INTPEND1_COMPARE11_Pos)
  #define GRTC_INTPEND1_COMPARE11_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE11_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE11_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE11_Pending (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND1_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTPEND1_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND1_RTCOMPARESYNC_Pos)
  #define GRTC_INTPEND1_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTPEND1_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTPEND1_RTCOMPARESYNC_NotPending (0x0UL)
  #define GRTC_INTPEND1_RTCOMPARESYNC_Pending (0x1UL)

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND1_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTPEND1_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND1_PWMPERIODEND_Pos)
  #define GRTC_INTPEND1_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTPEND1_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTPEND1_PWMPERIODEND_NotPending (0x0UL)
  #define GRTC_INTPEND1_PWMPERIODEND_Pending (0x1UL)


/* GRTC_INTEN2: Enable or disable interrupt */
  #define GRTC_INTEN2_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN2_COMPARE0_Pos (0UL)
  #define GRTC_INTEN2_COMPARE0_Msk (0x1UL << GRTC_INTEN2_COMPARE0_Pos)
  #define GRTC_INTEN2_COMPARE0_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE0_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN2_COMPARE1_Pos (1UL)
  #define GRTC_INTEN2_COMPARE1_Msk (0x1UL << GRTC_INTEN2_COMPARE1_Pos)
  #define GRTC_INTEN2_COMPARE1_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE1_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN2_COMPARE2_Pos (2UL)
  #define GRTC_INTEN2_COMPARE2_Msk (0x1UL << GRTC_INTEN2_COMPARE2_Pos)
  #define GRTC_INTEN2_COMPARE2_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE2_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN2_COMPARE3_Pos (3UL)
  #define GRTC_INTEN2_COMPARE3_Msk (0x1UL << GRTC_INTEN2_COMPARE3_Pos)
  #define GRTC_INTEN2_COMPARE3_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE3_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN2_COMPARE4_Pos (4UL)
  #define GRTC_INTEN2_COMPARE4_Msk (0x1UL << GRTC_INTEN2_COMPARE4_Pos)
  #define GRTC_INTEN2_COMPARE4_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE4_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN2_COMPARE5_Pos (5UL)
  #define GRTC_INTEN2_COMPARE5_Msk (0x1UL << GRTC_INTEN2_COMPARE5_Pos)
  #define GRTC_INTEN2_COMPARE5_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE5_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN2_COMPARE6_Pos (6UL)
  #define GRTC_INTEN2_COMPARE6_Msk (0x1UL << GRTC_INTEN2_COMPARE6_Pos)
  #define GRTC_INTEN2_COMPARE6_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE6_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN2_COMPARE7_Pos (7UL)
  #define GRTC_INTEN2_COMPARE7_Msk (0x1UL << GRTC_INTEN2_COMPARE7_Pos)
  #define GRTC_INTEN2_COMPARE7_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE7_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN2_COMPARE8_Pos (8UL)
  #define GRTC_INTEN2_COMPARE8_Msk (0x1UL << GRTC_INTEN2_COMPARE8_Pos)
  #define GRTC_INTEN2_COMPARE8_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE8_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN2_COMPARE9_Pos (9UL)
  #define GRTC_INTEN2_COMPARE9_Msk (0x1UL << GRTC_INTEN2_COMPARE9_Pos)
  #define GRTC_INTEN2_COMPARE9_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE9_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN2_COMPARE10_Pos (10UL)
  #define GRTC_INTEN2_COMPARE10_Msk (0x1UL << GRTC_INTEN2_COMPARE10_Pos)
  #define GRTC_INTEN2_COMPARE10_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE10_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN2_COMPARE11_Pos (11UL)
  #define GRTC_INTEN2_COMPARE11_Msk (0x1UL << GRTC_INTEN2_COMPARE11_Pos)
  #define GRTC_INTEN2_COMPARE11_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE11_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE11_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN2_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTEN2_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN2_RTCOMPARESYNC_Pos)
  #define GRTC_INTEN2_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTEN2_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTEN2_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTEN2_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN2_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTEN2_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN2_PWMPERIODEND_Pos)
  #define GRTC_INTEN2_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTEN2_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTEN2_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTEN2_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENSET2: Enable interrupt */
  #define GRTC_INTENSET2_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET2_COMPARE0_Pos (0UL)
  #define GRTC_INTENSET2_COMPARE0_Msk (0x1UL << GRTC_INTENSET2_COMPARE0_Pos)
  #define GRTC_INTENSET2_COMPARE0_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE0_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE0_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET2_COMPARE1_Pos (1UL)
  #define GRTC_INTENSET2_COMPARE1_Msk (0x1UL << GRTC_INTENSET2_COMPARE1_Pos)
  #define GRTC_INTENSET2_COMPARE1_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE1_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE1_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET2_COMPARE2_Pos (2UL)
  #define GRTC_INTENSET2_COMPARE2_Msk (0x1UL << GRTC_INTENSET2_COMPARE2_Pos)
  #define GRTC_INTENSET2_COMPARE2_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE2_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE2_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET2_COMPARE3_Pos (3UL)
  #define GRTC_INTENSET2_COMPARE3_Msk (0x1UL << GRTC_INTENSET2_COMPARE3_Pos)
  #define GRTC_INTENSET2_COMPARE3_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE3_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE3_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET2_COMPARE4_Pos (4UL)
  #define GRTC_INTENSET2_COMPARE4_Msk (0x1UL << GRTC_INTENSET2_COMPARE4_Pos)
  #define GRTC_INTENSET2_COMPARE4_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE4_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE4_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET2_COMPARE5_Pos (5UL)
  #define GRTC_INTENSET2_COMPARE5_Msk (0x1UL << GRTC_INTENSET2_COMPARE5_Pos)
  #define GRTC_INTENSET2_COMPARE5_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE5_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE5_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET2_COMPARE6_Pos (6UL)
  #define GRTC_INTENSET2_COMPARE6_Msk (0x1UL << GRTC_INTENSET2_COMPARE6_Pos)
  #define GRTC_INTENSET2_COMPARE6_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE6_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE6_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET2_COMPARE7_Pos (7UL)
  #define GRTC_INTENSET2_COMPARE7_Msk (0x1UL << GRTC_INTENSET2_COMPARE7_Pos)
  #define GRTC_INTENSET2_COMPARE7_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE7_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE7_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET2_COMPARE8_Pos (8UL)
  #define GRTC_INTENSET2_COMPARE8_Msk (0x1UL << GRTC_INTENSET2_COMPARE8_Pos)
  #define GRTC_INTENSET2_COMPARE8_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE8_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE8_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET2_COMPARE9_Pos (9UL)
  #define GRTC_INTENSET2_COMPARE9_Msk (0x1UL << GRTC_INTENSET2_COMPARE9_Pos)
  #define GRTC_INTENSET2_COMPARE9_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE9_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE9_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET2_COMPARE10_Pos (10UL)
  #define GRTC_INTENSET2_COMPARE10_Msk (0x1UL << GRTC_INTENSET2_COMPARE10_Pos)
  #define GRTC_INTENSET2_COMPARE10_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE10_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE10_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET2_COMPARE11_Pos (11UL)
  #define GRTC_INTENSET2_COMPARE11_Msk (0x1UL << GRTC_INTENSET2_COMPARE11_Pos)
  #define GRTC_INTENSET2_COMPARE11_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE11_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE11_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE11_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET2_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENSET2_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET2_RTCOMPARESYNC_Pos)
  #define GRTC_INTENSET2_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENSET2_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENSET2_RTCOMPARESYNC_Set (0x1UL)
  #define GRTC_INTENSET2_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENSET2_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET2_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENSET2_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET2_PWMPERIODEND_Pos)
  #define GRTC_INTENSET2_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENSET2_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENSET2_PWMPERIODEND_Set (0x1UL)
  #define GRTC_INTENSET2_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENSET2_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENCLR2: Disable interrupt */
  #define GRTC_INTENCLR2_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR2_COMPARE0_Pos (0UL)
  #define GRTC_INTENCLR2_COMPARE0_Msk (0x1UL << GRTC_INTENCLR2_COMPARE0_Pos)
  #define GRTC_INTENCLR2_COMPARE0_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE0_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE0_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR2_COMPARE1_Pos (1UL)
  #define GRTC_INTENCLR2_COMPARE1_Msk (0x1UL << GRTC_INTENCLR2_COMPARE1_Pos)
  #define GRTC_INTENCLR2_COMPARE1_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE1_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE1_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR2_COMPARE2_Pos (2UL)
  #define GRTC_INTENCLR2_COMPARE2_Msk (0x1UL << GRTC_INTENCLR2_COMPARE2_Pos)
  #define GRTC_INTENCLR2_COMPARE2_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE2_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE2_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR2_COMPARE3_Pos (3UL)
  #define GRTC_INTENCLR2_COMPARE3_Msk (0x1UL << GRTC_INTENCLR2_COMPARE3_Pos)
  #define GRTC_INTENCLR2_COMPARE3_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE3_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE3_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR2_COMPARE4_Pos (4UL)
  #define GRTC_INTENCLR2_COMPARE4_Msk (0x1UL << GRTC_INTENCLR2_COMPARE4_Pos)
  #define GRTC_INTENCLR2_COMPARE4_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE4_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE4_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR2_COMPARE5_Pos (5UL)
  #define GRTC_INTENCLR2_COMPARE5_Msk (0x1UL << GRTC_INTENCLR2_COMPARE5_Pos)
  #define GRTC_INTENCLR2_COMPARE5_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE5_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE5_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR2_COMPARE6_Pos (6UL)
  #define GRTC_INTENCLR2_COMPARE6_Msk (0x1UL << GRTC_INTENCLR2_COMPARE6_Pos)
  #define GRTC_INTENCLR2_COMPARE6_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE6_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE6_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR2_COMPARE7_Pos (7UL)
  #define GRTC_INTENCLR2_COMPARE7_Msk (0x1UL << GRTC_INTENCLR2_COMPARE7_Pos)
  #define GRTC_INTENCLR2_COMPARE7_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE7_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE7_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR2_COMPARE8_Pos (8UL)
  #define GRTC_INTENCLR2_COMPARE8_Msk (0x1UL << GRTC_INTENCLR2_COMPARE8_Pos)
  #define GRTC_INTENCLR2_COMPARE8_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE8_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE8_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR2_COMPARE9_Pos (9UL)
  #define GRTC_INTENCLR2_COMPARE9_Msk (0x1UL << GRTC_INTENCLR2_COMPARE9_Pos)
  #define GRTC_INTENCLR2_COMPARE9_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE9_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE9_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR2_COMPARE10_Pos (10UL)
  #define GRTC_INTENCLR2_COMPARE10_Msk (0x1UL << GRTC_INTENCLR2_COMPARE10_Pos)
  #define GRTC_INTENCLR2_COMPARE10_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE10_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE10_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR2_COMPARE11_Pos (11UL)
  #define GRTC_INTENCLR2_COMPARE11_Msk (0x1UL << GRTC_INTENCLR2_COMPARE11_Pos)
  #define GRTC_INTENCLR2_COMPARE11_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE11_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE11_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE11_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR2_RTCOMPARESYNC_Pos)
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Clear (0x1UL)
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR2_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENCLR2_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR2_PWMPERIODEND_Pos)
  #define GRTC_INTENCLR2_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENCLR2_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENCLR2_PWMPERIODEND_Clear (0x1UL)
  #define GRTC_INTENCLR2_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENCLR2_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTPEND2: Pending interrupts */
  #define GRTC_INTPEND2_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND2_COMPARE0_Pos (0UL)
  #define GRTC_INTPEND2_COMPARE0_Msk (0x1UL << GRTC_INTPEND2_COMPARE0_Pos)
  #define GRTC_INTPEND2_COMPARE0_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE0_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE0_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE0_Pending (0x1UL)

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND2_COMPARE1_Pos (1UL)
  #define GRTC_INTPEND2_COMPARE1_Msk (0x1UL << GRTC_INTPEND2_COMPARE1_Pos)
  #define GRTC_INTPEND2_COMPARE1_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE1_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE1_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE1_Pending (0x1UL)

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND2_COMPARE2_Pos (2UL)
  #define GRTC_INTPEND2_COMPARE2_Msk (0x1UL << GRTC_INTPEND2_COMPARE2_Pos)
  #define GRTC_INTPEND2_COMPARE2_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE2_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE2_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE2_Pending (0x1UL)

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND2_COMPARE3_Pos (3UL)
  #define GRTC_INTPEND2_COMPARE3_Msk (0x1UL << GRTC_INTPEND2_COMPARE3_Pos)
  #define GRTC_INTPEND2_COMPARE3_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE3_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE3_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE3_Pending (0x1UL)

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND2_COMPARE4_Pos (4UL)
  #define GRTC_INTPEND2_COMPARE4_Msk (0x1UL << GRTC_INTPEND2_COMPARE4_Pos)
  #define GRTC_INTPEND2_COMPARE4_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE4_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE4_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE4_Pending (0x1UL)

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND2_COMPARE5_Pos (5UL)
  #define GRTC_INTPEND2_COMPARE5_Msk (0x1UL << GRTC_INTPEND2_COMPARE5_Pos)
  #define GRTC_INTPEND2_COMPARE5_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE5_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE5_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE5_Pending (0x1UL)

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND2_COMPARE6_Pos (6UL)
  #define GRTC_INTPEND2_COMPARE6_Msk (0x1UL << GRTC_INTPEND2_COMPARE6_Pos)
  #define GRTC_INTPEND2_COMPARE6_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE6_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE6_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE6_Pending (0x1UL)

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND2_COMPARE7_Pos (7UL)
  #define GRTC_INTPEND2_COMPARE7_Msk (0x1UL << GRTC_INTPEND2_COMPARE7_Pos)
  #define GRTC_INTPEND2_COMPARE7_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE7_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE7_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE7_Pending (0x1UL)

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND2_COMPARE8_Pos (8UL)
  #define GRTC_INTPEND2_COMPARE8_Msk (0x1UL << GRTC_INTPEND2_COMPARE8_Pos)
  #define GRTC_INTPEND2_COMPARE8_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE8_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE8_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE8_Pending (0x1UL)

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND2_COMPARE9_Pos (9UL)
  #define GRTC_INTPEND2_COMPARE9_Msk (0x1UL << GRTC_INTPEND2_COMPARE9_Pos)
  #define GRTC_INTPEND2_COMPARE9_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE9_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE9_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE9_Pending (0x1UL)

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND2_COMPARE10_Pos (10UL)
  #define GRTC_INTPEND2_COMPARE10_Msk (0x1UL << GRTC_INTPEND2_COMPARE10_Pos)
  #define GRTC_INTPEND2_COMPARE10_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE10_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE10_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE10_Pending (0x1UL)

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND2_COMPARE11_Pos (11UL)
  #define GRTC_INTPEND2_COMPARE11_Msk (0x1UL << GRTC_INTPEND2_COMPARE11_Pos)
  #define GRTC_INTPEND2_COMPARE11_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE11_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE11_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE11_Pending (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND2_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTPEND2_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND2_RTCOMPARESYNC_Pos)
  #define GRTC_INTPEND2_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTPEND2_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTPEND2_RTCOMPARESYNC_NotPending (0x0UL)
  #define GRTC_INTPEND2_RTCOMPARESYNC_Pending (0x1UL)

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND2_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTPEND2_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND2_PWMPERIODEND_Pos)
  #define GRTC_INTPEND2_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTPEND2_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTPEND2_PWMPERIODEND_NotPending (0x0UL)
  #define GRTC_INTPEND2_PWMPERIODEND_Pending (0x1UL)


/* GRTC_INTEN3: Enable or disable interrupt */
  #define GRTC_INTEN3_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN3_COMPARE0_Pos (0UL)
  #define GRTC_INTEN3_COMPARE0_Msk (0x1UL << GRTC_INTEN3_COMPARE0_Pos)
  #define GRTC_INTEN3_COMPARE0_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE0_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN3_COMPARE1_Pos (1UL)
  #define GRTC_INTEN3_COMPARE1_Msk (0x1UL << GRTC_INTEN3_COMPARE1_Pos)
  #define GRTC_INTEN3_COMPARE1_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE1_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN3_COMPARE2_Pos (2UL)
  #define GRTC_INTEN3_COMPARE2_Msk (0x1UL << GRTC_INTEN3_COMPARE2_Pos)
  #define GRTC_INTEN3_COMPARE2_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE2_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN3_COMPARE3_Pos (3UL)
  #define GRTC_INTEN3_COMPARE3_Msk (0x1UL << GRTC_INTEN3_COMPARE3_Pos)
  #define GRTC_INTEN3_COMPARE3_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE3_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN3_COMPARE4_Pos (4UL)
  #define GRTC_INTEN3_COMPARE4_Msk (0x1UL << GRTC_INTEN3_COMPARE4_Pos)
  #define GRTC_INTEN3_COMPARE4_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE4_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN3_COMPARE5_Pos (5UL)
  #define GRTC_INTEN3_COMPARE5_Msk (0x1UL << GRTC_INTEN3_COMPARE5_Pos)
  #define GRTC_INTEN3_COMPARE5_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE5_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN3_COMPARE6_Pos (6UL)
  #define GRTC_INTEN3_COMPARE6_Msk (0x1UL << GRTC_INTEN3_COMPARE6_Pos)
  #define GRTC_INTEN3_COMPARE6_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE6_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN3_COMPARE7_Pos (7UL)
  #define GRTC_INTEN3_COMPARE7_Msk (0x1UL << GRTC_INTEN3_COMPARE7_Pos)
  #define GRTC_INTEN3_COMPARE7_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE7_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN3_COMPARE8_Pos (8UL)
  #define GRTC_INTEN3_COMPARE8_Msk (0x1UL << GRTC_INTEN3_COMPARE8_Pos)
  #define GRTC_INTEN3_COMPARE8_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE8_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN3_COMPARE9_Pos (9UL)
  #define GRTC_INTEN3_COMPARE9_Msk (0x1UL << GRTC_INTEN3_COMPARE9_Pos)
  #define GRTC_INTEN3_COMPARE9_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE9_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN3_COMPARE10_Pos (10UL)
  #define GRTC_INTEN3_COMPARE10_Msk (0x1UL << GRTC_INTEN3_COMPARE10_Pos)
  #define GRTC_INTEN3_COMPARE10_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE10_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN3_COMPARE11_Pos (11UL)
  #define GRTC_INTEN3_COMPARE11_Msk (0x1UL << GRTC_INTEN3_COMPARE11_Pos)
  #define GRTC_INTEN3_COMPARE11_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE11_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE11_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN3_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTEN3_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN3_RTCOMPARESYNC_Pos)
  #define GRTC_INTEN3_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTEN3_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTEN3_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTEN3_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN3_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTEN3_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN3_PWMPERIODEND_Pos)
  #define GRTC_INTEN3_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTEN3_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTEN3_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTEN3_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENSET3: Enable interrupt */
  #define GRTC_INTENSET3_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET3_COMPARE0_Pos (0UL)
  #define GRTC_INTENSET3_COMPARE0_Msk (0x1UL << GRTC_INTENSET3_COMPARE0_Pos)
  #define GRTC_INTENSET3_COMPARE0_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE0_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE0_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET3_COMPARE1_Pos (1UL)
  #define GRTC_INTENSET3_COMPARE1_Msk (0x1UL << GRTC_INTENSET3_COMPARE1_Pos)
  #define GRTC_INTENSET3_COMPARE1_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE1_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE1_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET3_COMPARE2_Pos (2UL)
  #define GRTC_INTENSET3_COMPARE2_Msk (0x1UL << GRTC_INTENSET3_COMPARE2_Pos)
  #define GRTC_INTENSET3_COMPARE2_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE2_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE2_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET3_COMPARE3_Pos (3UL)
  #define GRTC_INTENSET3_COMPARE3_Msk (0x1UL << GRTC_INTENSET3_COMPARE3_Pos)
  #define GRTC_INTENSET3_COMPARE3_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE3_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE3_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET3_COMPARE4_Pos (4UL)
  #define GRTC_INTENSET3_COMPARE4_Msk (0x1UL << GRTC_INTENSET3_COMPARE4_Pos)
  #define GRTC_INTENSET3_COMPARE4_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE4_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE4_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET3_COMPARE5_Pos (5UL)
  #define GRTC_INTENSET3_COMPARE5_Msk (0x1UL << GRTC_INTENSET3_COMPARE5_Pos)
  #define GRTC_INTENSET3_COMPARE5_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE5_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE5_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET3_COMPARE6_Pos (6UL)
  #define GRTC_INTENSET3_COMPARE6_Msk (0x1UL << GRTC_INTENSET3_COMPARE6_Pos)
  #define GRTC_INTENSET3_COMPARE6_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE6_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE6_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET3_COMPARE7_Pos (7UL)
  #define GRTC_INTENSET3_COMPARE7_Msk (0x1UL << GRTC_INTENSET3_COMPARE7_Pos)
  #define GRTC_INTENSET3_COMPARE7_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE7_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE7_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET3_COMPARE8_Pos (8UL)
  #define GRTC_INTENSET3_COMPARE8_Msk (0x1UL << GRTC_INTENSET3_COMPARE8_Pos)
  #define GRTC_INTENSET3_COMPARE8_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE8_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE8_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET3_COMPARE9_Pos (9UL)
  #define GRTC_INTENSET3_COMPARE9_Msk (0x1UL << GRTC_INTENSET3_COMPARE9_Pos)
  #define GRTC_INTENSET3_COMPARE9_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE9_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE9_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET3_COMPARE10_Pos (10UL)
  #define GRTC_INTENSET3_COMPARE10_Msk (0x1UL << GRTC_INTENSET3_COMPARE10_Pos)
  #define GRTC_INTENSET3_COMPARE10_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE10_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE10_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET3_COMPARE11_Pos (11UL)
  #define GRTC_INTENSET3_COMPARE11_Msk (0x1UL << GRTC_INTENSET3_COMPARE11_Pos)
  #define GRTC_INTENSET3_COMPARE11_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE11_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE11_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE11_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET3_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENSET3_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET3_RTCOMPARESYNC_Pos)
  #define GRTC_INTENSET3_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENSET3_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENSET3_RTCOMPARESYNC_Set (0x1UL)
  #define GRTC_INTENSET3_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENSET3_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET3_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENSET3_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET3_PWMPERIODEND_Pos)
  #define GRTC_INTENSET3_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENSET3_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENSET3_PWMPERIODEND_Set (0x1UL)
  #define GRTC_INTENSET3_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENSET3_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENCLR3: Disable interrupt */
  #define GRTC_INTENCLR3_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR3_COMPARE0_Pos (0UL)
  #define GRTC_INTENCLR3_COMPARE0_Msk (0x1UL << GRTC_INTENCLR3_COMPARE0_Pos)
  #define GRTC_INTENCLR3_COMPARE0_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE0_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE0_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR3_COMPARE1_Pos (1UL)
  #define GRTC_INTENCLR3_COMPARE1_Msk (0x1UL << GRTC_INTENCLR3_COMPARE1_Pos)
  #define GRTC_INTENCLR3_COMPARE1_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE1_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE1_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR3_COMPARE2_Pos (2UL)
  #define GRTC_INTENCLR3_COMPARE2_Msk (0x1UL << GRTC_INTENCLR3_COMPARE2_Pos)
  #define GRTC_INTENCLR3_COMPARE2_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE2_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE2_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR3_COMPARE3_Pos (3UL)
  #define GRTC_INTENCLR3_COMPARE3_Msk (0x1UL << GRTC_INTENCLR3_COMPARE3_Pos)
  #define GRTC_INTENCLR3_COMPARE3_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE3_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE3_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR3_COMPARE4_Pos (4UL)
  #define GRTC_INTENCLR3_COMPARE4_Msk (0x1UL << GRTC_INTENCLR3_COMPARE4_Pos)
  #define GRTC_INTENCLR3_COMPARE4_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE4_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE4_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR3_COMPARE5_Pos (5UL)
  #define GRTC_INTENCLR3_COMPARE5_Msk (0x1UL << GRTC_INTENCLR3_COMPARE5_Pos)
  #define GRTC_INTENCLR3_COMPARE5_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE5_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE5_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR3_COMPARE6_Pos (6UL)
  #define GRTC_INTENCLR3_COMPARE6_Msk (0x1UL << GRTC_INTENCLR3_COMPARE6_Pos)
  #define GRTC_INTENCLR3_COMPARE6_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE6_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE6_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR3_COMPARE7_Pos (7UL)
  #define GRTC_INTENCLR3_COMPARE7_Msk (0x1UL << GRTC_INTENCLR3_COMPARE7_Pos)
  #define GRTC_INTENCLR3_COMPARE7_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE7_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE7_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR3_COMPARE8_Pos (8UL)
  #define GRTC_INTENCLR3_COMPARE8_Msk (0x1UL << GRTC_INTENCLR3_COMPARE8_Pos)
  #define GRTC_INTENCLR3_COMPARE8_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE8_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE8_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR3_COMPARE9_Pos (9UL)
  #define GRTC_INTENCLR3_COMPARE9_Msk (0x1UL << GRTC_INTENCLR3_COMPARE9_Pos)
  #define GRTC_INTENCLR3_COMPARE9_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE9_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE9_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR3_COMPARE10_Pos (10UL)
  #define GRTC_INTENCLR3_COMPARE10_Msk (0x1UL << GRTC_INTENCLR3_COMPARE10_Pos)
  #define GRTC_INTENCLR3_COMPARE10_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE10_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE10_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR3_COMPARE11_Pos (11UL)
  #define GRTC_INTENCLR3_COMPARE11_Msk (0x1UL << GRTC_INTENCLR3_COMPARE11_Pos)
  #define GRTC_INTENCLR3_COMPARE11_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE11_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE11_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE11_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR3_RTCOMPARESYNC_Pos)
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Clear (0x1UL)
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR3_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENCLR3_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR3_PWMPERIODEND_Pos)
  #define GRTC_INTENCLR3_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENCLR3_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENCLR3_PWMPERIODEND_Clear (0x1UL)
  #define GRTC_INTENCLR3_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENCLR3_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTPEND3: Pending interrupts */
  #define GRTC_INTPEND3_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND3_COMPARE0_Pos (0UL)
  #define GRTC_INTPEND3_COMPARE0_Msk (0x1UL << GRTC_INTPEND3_COMPARE0_Pos)
  #define GRTC_INTPEND3_COMPARE0_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE0_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE0_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE0_Pending (0x1UL)

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND3_COMPARE1_Pos (1UL)
  #define GRTC_INTPEND3_COMPARE1_Msk (0x1UL << GRTC_INTPEND3_COMPARE1_Pos)
  #define GRTC_INTPEND3_COMPARE1_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE1_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE1_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE1_Pending (0x1UL)

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND3_COMPARE2_Pos (2UL)
  #define GRTC_INTPEND3_COMPARE2_Msk (0x1UL << GRTC_INTPEND3_COMPARE2_Pos)
  #define GRTC_INTPEND3_COMPARE2_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE2_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE2_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE2_Pending (0x1UL)

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND3_COMPARE3_Pos (3UL)
  #define GRTC_INTPEND3_COMPARE3_Msk (0x1UL << GRTC_INTPEND3_COMPARE3_Pos)
  #define GRTC_INTPEND3_COMPARE3_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE3_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE3_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE3_Pending (0x1UL)

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND3_COMPARE4_Pos (4UL)
  #define GRTC_INTPEND3_COMPARE4_Msk (0x1UL << GRTC_INTPEND3_COMPARE4_Pos)
  #define GRTC_INTPEND3_COMPARE4_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE4_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE4_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE4_Pending (0x1UL)

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND3_COMPARE5_Pos (5UL)
  #define GRTC_INTPEND3_COMPARE5_Msk (0x1UL << GRTC_INTPEND3_COMPARE5_Pos)
  #define GRTC_INTPEND3_COMPARE5_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE5_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE5_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE5_Pending (0x1UL)

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND3_COMPARE6_Pos (6UL)
  #define GRTC_INTPEND3_COMPARE6_Msk (0x1UL << GRTC_INTPEND3_COMPARE6_Pos)
  #define GRTC_INTPEND3_COMPARE6_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE6_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE6_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE6_Pending (0x1UL)

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND3_COMPARE7_Pos (7UL)
  #define GRTC_INTPEND3_COMPARE7_Msk (0x1UL << GRTC_INTPEND3_COMPARE7_Pos)
  #define GRTC_INTPEND3_COMPARE7_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE7_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE7_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE7_Pending (0x1UL)

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND3_COMPARE8_Pos (8UL)
  #define GRTC_INTPEND3_COMPARE8_Msk (0x1UL << GRTC_INTPEND3_COMPARE8_Pos)
  #define GRTC_INTPEND3_COMPARE8_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE8_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE8_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE8_Pending (0x1UL)

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND3_COMPARE9_Pos (9UL)
  #define GRTC_INTPEND3_COMPARE9_Msk (0x1UL << GRTC_INTPEND3_COMPARE9_Pos)
  #define GRTC_INTPEND3_COMPARE9_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE9_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE9_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE9_Pending (0x1UL)

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND3_COMPARE10_Pos (10UL)
  #define GRTC_INTPEND3_COMPARE10_Msk (0x1UL << GRTC_INTPEND3_COMPARE10_Pos)
  #define GRTC_INTPEND3_COMPARE10_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE10_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE10_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE10_Pending (0x1UL)

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND3_COMPARE11_Pos (11UL)
  #define GRTC_INTPEND3_COMPARE11_Msk (0x1UL << GRTC_INTPEND3_COMPARE11_Pos)
  #define GRTC_INTPEND3_COMPARE11_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE11_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE11_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE11_Pending (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND3_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTPEND3_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND3_RTCOMPARESYNC_Pos)
  #define GRTC_INTPEND3_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTPEND3_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTPEND3_RTCOMPARESYNC_NotPending (0x0UL)
  #define GRTC_INTPEND3_RTCOMPARESYNC_Pending (0x1UL)

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND3_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTPEND3_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND3_PWMPERIODEND_Pos)
  #define GRTC_INTPEND3_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTPEND3_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTPEND3_PWMPERIODEND_NotPending (0x0UL)
  #define GRTC_INTPEND3_PWMPERIODEND_Pending (0x1UL)


/* GRTC_EVTEN: Enable or disable event routing */
  #define GRTC_EVTEN_ResetValue (0x00000000UL)

/* PWMPERIODEND @Bit 27 : Enable or disable event routing for event PWMPERIODEND */
  #define GRTC_EVTEN_PWMPERIODEND_Pos (27UL)
  #define GRTC_EVTEN_PWMPERIODEND_Msk (0x1UL << GRTC_EVTEN_PWMPERIODEND_Pos)
  #define GRTC_EVTEN_PWMPERIODEND_Min (0x0UL)
  #define GRTC_EVTEN_PWMPERIODEND_Max (0x1UL)
  #define GRTC_EVTEN_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_EVTEN_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_EVTENSET: Enable event routing */
  #define GRTC_EVTENSET_ResetValue (0x00000000UL)

/* PWMPERIODEND @Bit 27 : Write '1' to enable event routing for event PWMPERIODEND */
  #define GRTC_EVTENSET_PWMPERIODEND_Pos (27UL)
  #define GRTC_EVTENSET_PWMPERIODEND_Msk (0x1UL << GRTC_EVTENSET_PWMPERIODEND_Pos)
  #define GRTC_EVTENSET_PWMPERIODEND_Min (0x0UL)
  #define GRTC_EVTENSET_PWMPERIODEND_Max (0x1UL)
  #define GRTC_EVTENSET_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_EVTENSET_PWMPERIODEND_Enabled (0x1UL)
  #define GRTC_EVTENSET_PWMPERIODEND_Set (0x1UL)


/* GRTC_EVTENCLR: Disable event routing */
  #define GRTC_EVTENCLR_ResetValue (0x00000000UL)

/* PWMPERIODEND @Bit 27 : Write '1' to disable event routing for event PWMPERIODEND */
  #define GRTC_EVTENCLR_PWMPERIODEND_Pos (27UL)
  #define GRTC_EVTENCLR_PWMPERIODEND_Msk (0x1UL << GRTC_EVTENCLR_PWMPERIODEND_Pos)
  #define GRTC_EVTENCLR_PWMPERIODEND_Min (0x0UL)
  #define GRTC_EVTENCLR_PWMPERIODEND_Max (0x1UL)
  #define GRTC_EVTENCLR_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_EVTENCLR_PWMPERIODEND_Enabled (0x1UL)
  #define GRTC_EVTENCLR_PWMPERIODEND_Clear (0x1UL)


/* GRTC_MODE: Counter mode selection */
  #define GRTC_MODE_ResetValue (0x00000000UL)

/* AUTOEN @Bit 0 : Automatic enable to keep the SYSCOUNTER active. */
  #define GRTC_MODE_AUTOEN_Pos (0UL)
  #define GRTC_MODE_AUTOEN_Msk (0x1UL << GRTC_MODE_AUTOEN_Pos)
  #define GRTC_MODE_AUTOEN_Min (0x0UL)
  #define GRTC_MODE_AUTOEN_Max (0x1UL)
  #define GRTC_MODE_AUTOEN_Default (0x0UL)
  #define GRTC_MODE_AUTOEN_CpuActive (0x1UL)         /*!< In addition to the above mode, any local CPU that is not sleeping keep
                                                          the SYSCOUNTER active.*/

/* SYSCOUNTEREN @Bit 1 : Enable the SYSCOUNTER */
  #define GRTC_MODE_SYSCOUNTEREN_Pos (1UL)
  #define GRTC_MODE_SYSCOUNTEREN_Msk (0x1UL << GRTC_MODE_SYSCOUNTEREN_Pos)
  #define GRTC_MODE_SYSCOUNTEREN_Min (0x0UL)
  #define GRTC_MODE_SYSCOUNTEREN_Max (0x1UL)
  #define GRTC_MODE_SYSCOUNTEREN_Disabled (0x0UL)
  #define GRTC_MODE_SYSCOUNTEREN_Enabled (0x1UL)


/* GRTC_TIMEOUT: Timeout after all CPUs gone into sleep state to stop the SYSCOUNTER */
  #define GRTC_TIMEOUT_ResetValue (0x00000000UL)

/* VALUE @Bits 0..15 : Number of 32Ki cycles */
  #define GRTC_TIMEOUT_VALUE_Pos (0UL)
  #define GRTC_TIMEOUT_VALUE_Msk (0xFFFFUL << GRTC_TIMEOUT_VALUE_Pos)


/* GRTC_INTERVAL: Count to add to CC[0] when the event EVENTS_COMPARE[0] triggers. */
  #define GRTC_INTERVAL_ResetValue (0x00000000UL)

/* VALUE @Bits 0..15 : Count to add to CC[0] */
  #define GRTC_INTERVAL_VALUE_Pos (0UL)
  #define GRTC_INTERVAL_VALUE_Msk (0xFFFFUL << GRTC_INTERVAL_VALUE_Pos)


/* GRTC_WAKETIME: GRTC wake up time. */
  #define GRTC_WAKETIME_ResetValue (0x00000001UL)

/* VALUE @Bits 0..7 : Number of LFCLK clock cycles to wake up before the next scheduled EVENTS_COMPARE event */
  #define GRTC_WAKETIME_VALUE_Pos (0UL)
  #define GRTC_WAKETIME_VALUE_Msk (0xFFUL << GRTC_WAKETIME_VALUE_Pos)


/* GRTC_PWMCONFIG: PWM configuration. */
  #define GRTC_PWMCONFIG_ResetValue (0x00000000UL)

/* COMPAREVALUE @Bits 0..7 : The PWM compare value */
  #define GRTC_PWMCONFIG_COMPAREVALUE_Pos (0UL)
  #define GRTC_PWMCONFIG_COMPAREVALUE_Msk (0xFFUL << GRTC_PWMCONFIG_COMPAREVALUE_Pos)


/* GRTC_CLKOUT: Configuration of clock output */
  #define GRTC_CLKOUT_ResetValue (0x00000000UL)

/* CLKOUT32K @Bit 0 : Enable 32Ki clock output on pin */
  #define GRTC_CLKOUT_CLKOUT32K_Pos (0UL)
  #define GRTC_CLKOUT_CLKOUT32K_Msk (0x1UL << GRTC_CLKOUT_CLKOUT32K_Pos)
  #define GRTC_CLKOUT_CLKOUT32K_Min (0x0UL)
  #define GRTC_CLKOUT_CLKOUT32K_Max (0x1UL)
  #define GRTC_CLKOUT_CLKOUT32K_Disabled (0x0UL)
  #define GRTC_CLKOUT_CLKOUT32K_Enabled (0x1UL)

/* CLKOUTFAST @Bit 1 : Enable fast clock output on pin */
  #define GRTC_CLKOUT_CLKOUTFAST_Pos (1UL)
  #define GRTC_CLKOUT_CLKOUTFAST_Msk (0x1UL << GRTC_CLKOUT_CLKOUTFAST_Pos)
  #define GRTC_CLKOUT_CLKOUTFAST_Min (0x0UL)
  #define GRTC_CLKOUT_CLKOUTFAST_Max (0x1UL)
  #define GRTC_CLKOUT_CLKOUTFAST_Disabled (0x0UL)
  #define GRTC_CLKOUT_CLKOUTFAST_Enabled (0x1UL)


/* GRTC_CLKCFG: Clock Configuration */
  #define GRTC_CLKCFG_ResetValue (0x00010001UL)

/* CLKFASTDIV @Bits 0..7 : Fast clock divisor value of clock output */
  #define GRTC_CLKCFG_CLKFASTDIV_Pos (0UL)
  #define GRTC_CLKCFG_CLKFASTDIV_Msk (0xFFUL << GRTC_CLKCFG_CLKFASTDIV_Pos)
  #define GRTC_CLKCFG_CLKFASTDIV_Min (0x01UL)
  #define GRTC_CLKCFG_CLKFASTDIV_Max (0xFFUL)

/* CLKSEL @Bits 16..17 : GRTC LFCLK clock source selection */
  #define GRTC_CLKCFG_CLKSEL_Pos (16UL)
  #define GRTC_CLKCFG_CLKSEL_Msk (0x3UL << GRTC_CLKCFG_CLKSEL_Pos)
  #define GRTC_CLKCFG_CLKSEL_Min (0x0UL)
  #define GRTC_CLKCFG_CLKSEL_Max (0x2UL)
  #define GRTC_CLKCFG_CLKSEL_LFXO (0x0UL)
  #define GRTC_CLKCFG_CLKSEL_SystemLFCLK (0x1UL)
  #define GRTC_CLKCFG_CLKSEL_LFLPRC (0x2UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            KMU                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct KMU ======================================================== */
/**
  * @brief Key management unit
  */
  typedef struct {
    __OM uint32_t TASKS_PROVISION;
    __OM uint32_t TASKS_PUSH;
    __OM uint32_t TASKS_REVOKE;
    __OM uint32_t TASKS_READMETADATA;
    __OM uint32_t TASKS_PUSHBLOCK;                   /*!< (@ 0x00000010) Block only the PUSH operation of a key slot, preventing
                                                                         the key slot from being PUSHED until next reset. The
                                                                         task is kept for backwards compatibility.*/
    __OM uint32_t TASKS_BLOCK;                       /*!< (@ 0x00000014) Block the PROVISION, PUSH, and REVOKE operations of a
                                                                         key slot, preventing the key slot from being
                                                                         PROVISIONED, PUSHED, or REVOKED until next reset*/
    __IM uint32_t RESERVED[58];
    __IOM uint32_t EVENTS_PROVISIONED;
    __IOM uint32_t EVENTS_PUSHED;
    __IOM uint32_t EVENTS_REVOKED;
    __IOM uint32_t EVENTS_ERROR;                     /*!< (@ 0x0000010C) Error generated during PROVISION, PUSH, READMETADATA or
                                                                         REVOKE operations. Triggering the PROVISION, PUSH and
                                                                         REVOKE tasks on a BLOCKED keyslot will also generate
                                                                         this event.*/
    __IOM uint32_t EVENTS_METADATAREAD;
    __IOM uint32_t EVENTS_PUSHBLOCKED;               /*!< (@ 0x00000114) The PUSHBLOCK operation was successful. The event is
                                                                         kept for backwards compatibility.*/
    __IOM uint32_t EVENTS_BLOCKED;
    __IM uint32_t RESERVED1[185];
    __IM uint32_t STATUS;
    __IM uint32_t RESERVED2[63];
    __IOM uint32_t KEYSLOT;
    __IOM uint32_t SRC;
    __IOM uint32_t METADATA;
  } NRF_KMU_Type;

/* KMU_TASKS_PROVISION: Provision key slot */
  #define KMU_TASKS_PROVISION_ResetValue (0x00000000UL)

/* TASKS_PROVISION @Bit 0 : Provision key slot */
  #define KMU_TASKS_PROVISION_TASKS_PROVISION_Pos (0UL)
  #define KMU_TASKS_PROVISION_TASKS_PROVISION_Msk (0x1UL << KMU_TASKS_PROVISION_TASKS_PROVISION_Pos) /*!< Bit mask of
                                                                            TASKS_PROVISION field.*/
  #define KMU_TASKS_PROVISION_TASKS_PROVISION_Min (0x1UL)
  #define KMU_TASKS_PROVISION_TASKS_PROVISION_Max (0x1UL)
  #define KMU_TASKS_PROVISION_TASKS_PROVISION_Trigger (0x1UL)


/* KMU_TASKS_PUSH: Push key slot */
  #define KMU_TASKS_PUSH_ResetValue (0x00000000UL)

/* TASKS_PUSH @Bit 0 : Push key slot */
  #define KMU_TASKS_PUSH_TASKS_PUSH_Pos (0UL)
  #define KMU_TASKS_PUSH_TASKS_PUSH_Msk (0x1UL << KMU_TASKS_PUSH_TASKS_PUSH_Pos)
  #define KMU_TASKS_PUSH_TASKS_PUSH_Min (0x1UL)
  #define KMU_TASKS_PUSH_TASKS_PUSH_Max (0x1UL)
  #define KMU_TASKS_PUSH_TASKS_PUSH_Trigger (0x1UL)


/* KMU_TASKS_REVOKE: Revoke key slot */
  #define KMU_TASKS_REVOKE_ResetValue (0x00000000UL)

/* TASKS_REVOKE @Bit 0 : Revoke key slot */
  #define KMU_TASKS_REVOKE_TASKS_REVOKE_Pos (0UL)
  #define KMU_TASKS_REVOKE_TASKS_REVOKE_Msk (0x1UL << KMU_TASKS_REVOKE_TASKS_REVOKE_Pos)
  #define KMU_TASKS_REVOKE_TASKS_REVOKE_Min (0x1UL)
  #define KMU_TASKS_REVOKE_TASKS_REVOKE_Max (0x1UL)
  #define KMU_TASKS_REVOKE_TASKS_REVOKE_Trigger (0x1UL)


/* KMU_TASKS_READMETADATA: Read key slot metadata into METADATA register */
  #define KMU_TASKS_READMETADATA_ResetValue (0x00000000UL)

/* TASKS_READMETADATA @Bit 0 : Read key slot metadata into METADATA register */
  #define KMU_TASKS_READMETADATA_TASKS_READMETADATA_Pos (0UL)
  #define KMU_TASKS_READMETADATA_TASKS_READMETADATA_Msk (0x1UL << KMU_TASKS_READMETADATA_TASKS_READMETADATA_Pos) /*!< Bit mask
                                                                            of TASKS_READMETADATA field.*/
  #define KMU_TASKS_READMETADATA_TASKS_READMETADATA_Min (0x1UL)
  #define KMU_TASKS_READMETADATA_TASKS_READMETADATA_Max (0x1UL)
  #define KMU_TASKS_READMETADATA_TASKS_READMETADATA_Trigger (0x1UL)


/* KMU_TASKS_PUSHBLOCK: Block only the PUSH operation of a key slot, preventing the key slot from being PUSHED until next reset.
                         The task is kept for backwards compatibility. */

  #define KMU_TASKS_PUSHBLOCK_ResetValue (0x00000000UL)

/* TASKS_PUSHBLOCK @Bit 0 : Block only the PUSH operation of a key slot, preventing the key slot from being PUSHED until next
                            reset. The task is kept for backwards compatibility. */

  #define KMU_TASKS_PUSHBLOCK_TASKS_PUSHBLOCK_Pos (0UL)
  #define KMU_TASKS_PUSHBLOCK_TASKS_PUSHBLOCK_Msk (0x1UL << KMU_TASKS_PUSHBLOCK_TASKS_PUSHBLOCK_Pos) /*!< Bit mask of
                                                                            TASKS_PUSHBLOCK field.*/
  #define KMU_TASKS_PUSHBLOCK_TASKS_PUSHBLOCK_Min (0x1UL)
  #define KMU_TASKS_PUSHBLOCK_TASKS_PUSHBLOCK_Max (0x1UL)
  #define KMU_TASKS_PUSHBLOCK_TASKS_PUSHBLOCK_Trigger (0x1UL)


/* KMU_TASKS_BLOCK: Block the PROVISION, PUSH, and REVOKE operations of a key slot, preventing the key slot from being
                     PROVISIONED, PUSHED, or REVOKED until next reset */

  #define KMU_TASKS_BLOCK_ResetValue (0x00000000UL)

/* TASKS_BLOCK @Bit 0 : Block the PROVISION, PUSH, and REVOKE operations of a key slot, preventing the key slot from being
                        PROVISIONED, PUSHED, or REVOKED until next reset */

  #define KMU_TASKS_BLOCK_TASKS_BLOCK_Pos (0UL)
  #define KMU_TASKS_BLOCK_TASKS_BLOCK_Msk (0x1UL << KMU_TASKS_BLOCK_TASKS_BLOCK_Pos)
  #define KMU_TASKS_BLOCK_TASKS_BLOCK_Min (0x1UL)
  #define KMU_TASKS_BLOCK_TASKS_BLOCK_Max (0x1UL)
  #define KMU_TASKS_BLOCK_TASKS_BLOCK_Trigger (0x1UL)


/* KMU_EVENTS_PROVISIONED: Key slot successfully provisioned */
  #define KMU_EVENTS_PROVISIONED_ResetValue (0x00000000UL)

/* EVENTS_PROVISIONED @Bit 0 : Key slot successfully provisioned */
  #define KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_Pos (0UL)
  #define KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_Msk (0x1UL << KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_Pos) /*!< Bit mask
                                                                            of EVENTS_PROVISIONED field.*/
  #define KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_Min (0x0UL)
  #define KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_Max (0x1UL)
  #define KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_NotGenerated (0x0UL)
  #define KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_Generated (0x1UL)


/* KMU_EVENTS_PUSHED: Key slot successfully pushed */
  #define KMU_EVENTS_PUSHED_ResetValue (0x00000000UL)

/* EVENTS_PUSHED @Bit 0 : Key slot successfully pushed */
  #define KMU_EVENTS_PUSHED_EVENTS_PUSHED_Pos (0UL)
  #define KMU_EVENTS_PUSHED_EVENTS_PUSHED_Msk (0x1UL << KMU_EVENTS_PUSHED_EVENTS_PUSHED_Pos) /*!< Bit mask of EVENTS_PUSHED
                                                                            field.*/
  #define KMU_EVENTS_PUSHED_EVENTS_PUSHED_Min (0x0UL)
  #define KMU_EVENTS_PUSHED_EVENTS_PUSHED_Max (0x1UL)
  #define KMU_EVENTS_PUSHED_EVENTS_PUSHED_NotGenerated (0x0UL)
  #define KMU_EVENTS_PUSHED_EVENTS_PUSHED_Generated (0x1UL)


/* KMU_EVENTS_REVOKED: Key slot has been revoked and can no longer be used */
  #define KMU_EVENTS_REVOKED_ResetValue (0x00000000UL)

/* EVENTS_REVOKED @Bit 0 : Key slot has been revoked and can no longer be used */
  #define KMU_EVENTS_REVOKED_EVENTS_REVOKED_Pos (0UL)
  #define KMU_EVENTS_REVOKED_EVENTS_REVOKED_Msk (0x1UL << KMU_EVENTS_REVOKED_EVENTS_REVOKED_Pos) /*!< Bit mask of EVENTS_REVOKED
                                                                            field.*/
  #define KMU_EVENTS_REVOKED_EVENTS_REVOKED_Min (0x0UL)
  #define KMU_EVENTS_REVOKED_EVENTS_REVOKED_Max (0x1UL)
  #define KMU_EVENTS_REVOKED_EVENTS_REVOKED_NotGenerated (0x0UL)
  #define KMU_EVENTS_REVOKED_EVENTS_REVOKED_Generated (0x1UL)


/* KMU_EVENTS_ERROR: Error generated during PROVISION, PUSH, READMETADATA or REVOKE operations. Triggering the PROVISION, PUSH
                      and REVOKE tasks on a BLOCKED keyslot will also generate this event. */

  #define KMU_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : Error generated during PROVISION, PUSH, READMETADATA or REVOKE operations. Triggering the PROVISION,
                         PUSH and REVOKE tasks on a BLOCKED keyslot will also generate this event. */

  #define KMU_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define KMU_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << KMU_EVENTS_ERROR_EVENTS_ERROR_Pos)
  #define KMU_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define KMU_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define KMU_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define KMU_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* KMU_EVENTS_METADATAREAD: Key slot metadata has been read into METADATA register */
  #define KMU_EVENTS_METADATAREAD_ResetValue (0x00000000UL)

/* EVENTS_METADATAREAD @Bit 0 : Key slot metadata has been read into METADATA register */
  #define KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_Pos (0UL)
  #define KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_Msk (0x1UL << KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_Pos) /*!< Bit
                                                                            mask of EVENTS_METADATAREAD field.*/
  #define KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_Min (0x0UL)
  #define KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_Max (0x1UL)
  #define KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_NotGenerated (0x0UL)
  #define KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_Generated (0x1UL)


/* KMU_EVENTS_PUSHBLOCKED: The PUSHBLOCK operation was successful. The event is kept for backwards compatibility. */
  #define KMU_EVENTS_PUSHBLOCKED_ResetValue (0x00000000UL)

/* EVENTS_PUSHBLOCKED @Bit 0 : The PUSHBLOCK operation was successful. The event is kept for backwards compatibility. */
  #define KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_Pos (0UL)
  #define KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_Msk (0x1UL << KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_Pos) /*!< Bit mask
                                                                            of EVENTS_PUSHBLOCKED field.*/
  #define KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_Min (0x0UL)
  #define KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_Max (0x1UL)
  #define KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_NotGenerated (0x0UL)
  #define KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_Generated (0x1UL)


/* KMU_EVENTS_BLOCKED: The BLOCK operation was successful */
  #define KMU_EVENTS_BLOCKED_ResetValue (0x00000000UL)

/* EVENTS_BLOCKED @Bit 0 : The BLOCK operation was successful */
  #define KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_Pos (0UL)
  #define KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_Msk (0x1UL << KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_Pos) /*!< Bit mask of EVENTS_BLOCKED
                                                                            field.*/
  #define KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_Min (0x0UL)
  #define KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_Max (0x1UL)
  #define KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_NotGenerated (0x0UL)
  #define KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_Generated (0x1UL)


/* KMU_STATUS: KMU status register */
  #define KMU_STATUS_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : KMU status */
  #define KMU_STATUS_STATUS_Pos (0UL)
  #define KMU_STATUS_STATUS_Msk (0x1UL << KMU_STATUS_STATUS_Pos)
  #define KMU_STATUS_STATUS_Min (0x0UL)
  #define KMU_STATUS_STATUS_Max (0x1UL)
  #define KMU_STATUS_STATUS_Ready (0x0UL)
  #define KMU_STATUS_STATUS_Busy (0x1UL)


/* KMU_KEYSLOT: Select key slot to operate on */
  #define KMU_KEYSLOT_ResetValue (0x00000000UL)

/* ID @Bits 0..7 : Select key slot ID to provision, push, read METADATA, revoke or block when the corresponding task is
                   triggered. */

  #define KMU_KEYSLOT_ID_Pos (0UL)
  #define KMU_KEYSLOT_ID_Msk (0xFFUL << KMU_KEYSLOT_ID_Pos)
  #define KMU_KEYSLOT_ID_Min (0x00UL)
  #define KMU_KEYSLOT_ID_Max (0xF9UL)


/* KMU_SRC: Source address for provisioning */
  #define KMU_SRC_ResetValue (0x00000000UL)

/* SRC @Bits 0..31 : Source address for TASKS_PROVISION. */
  #define KMU_SRC_SRC_Pos (0UL)
  #define KMU_SRC_SRC_Msk (0xFFFFFFFFUL << KMU_SRC_SRC_Pos)


/* KMU_METADATA: Key slot metadata as read by TASKS_READMETADATA. */
  #define KMU_METADATA_ResetValue (0x00000000UL)

/* METADATA @Bits 0..31 : Read metadata. */
  #define KMU_METADATA_METADATA_Pos (0UL)
  #define KMU_METADATA_METADATA_Msk (0xFFFFFFFFUL << KMU_METADATA_METADATA_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          LPCOMP                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct LPCOMP ====================================================== */
/**
  * @brief Low-power comparator
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_SAMPLE;                      /*!< (@ 0x00000008) Sample comparator value. This task requires that LPCOMP
                                                                         has been started by the START task.*/
    __IM uint32_t RESERVED[29];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_SAMPLE;
    __IM uint32_t RESERVED1[29];
    __IOM uint32_t EVENTS_READY;
    __IOM uint32_t EVENTS_DOWN;
    __IOM uint32_t EVENTS_UP;
    __IOM uint32_t EVENTS_CROSS;
    __IM uint32_t RESERVED2[28];
    __IOM uint32_t PUBLISH_READY;
    __IOM uint32_t PUBLISH_DOWN;
    __IOM uint32_t PUBLISH_UP;
    __IOM uint32_t PUBLISH_CROSS;
    __IM uint32_t RESERVED3[28];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED4[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED5[60];
    __IM uint32_t RESULT;
    __IM uint32_t RESERVED6[63];
    __IOM uint32_t ENABLE;
    __IOM uint32_t PSEL;
    __IOM uint32_t REFSEL;
    __IOM uint32_t EXTREFSEL;
    __IM uint32_t RESERVED7[4];
    __IOM uint32_t ANADETECT;
    __IM uint32_t RESERVED8[5];
    __IOM uint32_t HYST;
  } NRF_LPCOMP_Type;

/* LPCOMP_TASKS_START: Start comparator */
  #define LPCOMP_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start comparator */
  #define LPCOMP_TASKS_START_TASKS_START_Pos (0UL)
  #define LPCOMP_TASKS_START_TASKS_START_Msk (0x1UL << LPCOMP_TASKS_START_TASKS_START_Pos)
  #define LPCOMP_TASKS_START_TASKS_START_Min (0x1UL)
  #define LPCOMP_TASKS_START_TASKS_START_Max (0x1UL)
  #define LPCOMP_TASKS_START_TASKS_START_Trigger (0x1UL)


/* LPCOMP_TASKS_STOP: Stop comparator */
  #define LPCOMP_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop comparator */
  #define LPCOMP_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define LPCOMP_TASKS_STOP_TASKS_STOP_Msk (0x1UL << LPCOMP_TASKS_STOP_TASKS_STOP_Pos)
  #define LPCOMP_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define LPCOMP_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define LPCOMP_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* LPCOMP_TASKS_SAMPLE: Sample comparator value. This task requires that LPCOMP has been started by the START task. */
  #define LPCOMP_TASKS_SAMPLE_ResetValue (0x00000000UL)

/* TASKS_SAMPLE @Bit 0 : Sample comparator value. This task requires that LPCOMP has been started by the START task. */
  #define LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos (0UL)
  #define LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Msk (0x1UL << LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos) /*!< Bit mask of TASKS_SAMPLE
                                                                            field.*/
  #define LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Min (0x1UL)
  #define LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Max (0x1UL)
  #define LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Trigger (0x1UL)


/* LPCOMP_SUBSCRIBE_START: Subscribe configuration for task START */
  #define LPCOMP_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define LPCOMP_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define LPCOMP_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << LPCOMP_SUBSCRIBE_START_CHIDX_Pos)
  #define LPCOMP_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define LPCOMP_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_SUBSCRIBE_START_EN_Pos (31UL)
  #define LPCOMP_SUBSCRIBE_START_EN_Msk (0x1UL << LPCOMP_SUBSCRIBE_START_EN_Pos)
  #define LPCOMP_SUBSCRIBE_START_EN_Min (0x0UL)
  #define LPCOMP_SUBSCRIBE_START_EN_Max (0x1UL)
  #define LPCOMP_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define LPCOMP_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* LPCOMP_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define LPCOMP_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define LPCOMP_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define LPCOMP_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << LPCOMP_SUBSCRIBE_STOP_CHIDX_Pos)
  #define LPCOMP_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define LPCOMP_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define LPCOMP_SUBSCRIBE_STOP_EN_Msk (0x1UL << LPCOMP_SUBSCRIBE_STOP_EN_Pos)
  #define LPCOMP_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define LPCOMP_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define LPCOMP_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define LPCOMP_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* LPCOMP_SUBSCRIBE_SAMPLE: Subscribe configuration for task SAMPLE */
  #define LPCOMP_SUBSCRIBE_SAMPLE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SAMPLE will subscribe to */
  #define LPCOMP_SUBSCRIBE_SAMPLE_CHIDX_Pos (0UL)
  #define LPCOMP_SUBSCRIBE_SAMPLE_CHIDX_Msk (0xFFUL << LPCOMP_SUBSCRIBE_SAMPLE_CHIDX_Pos)
  #define LPCOMP_SUBSCRIBE_SAMPLE_CHIDX_Min (0x00UL)
  #define LPCOMP_SUBSCRIBE_SAMPLE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_SUBSCRIBE_SAMPLE_EN_Pos (31UL)
  #define LPCOMP_SUBSCRIBE_SAMPLE_EN_Msk (0x1UL << LPCOMP_SUBSCRIBE_SAMPLE_EN_Pos)
  #define LPCOMP_SUBSCRIBE_SAMPLE_EN_Min (0x0UL)
  #define LPCOMP_SUBSCRIBE_SAMPLE_EN_Max (0x1UL)
  #define LPCOMP_SUBSCRIBE_SAMPLE_EN_Disabled (0x0UL)
  #define LPCOMP_SUBSCRIBE_SAMPLE_EN_Enabled (0x1UL)


/* LPCOMP_EVENTS_READY: LPCOMP is ready and output is valid */
  #define LPCOMP_EVENTS_READY_ResetValue (0x00000000UL)

/* EVENTS_READY @Bit 0 : LPCOMP is ready and output is valid */
  #define LPCOMP_EVENTS_READY_EVENTS_READY_Pos (0UL)
  #define LPCOMP_EVENTS_READY_EVENTS_READY_Msk (0x1UL << LPCOMP_EVENTS_READY_EVENTS_READY_Pos) /*!< Bit mask of EVENTS_READY
                                                                            field.*/
  #define LPCOMP_EVENTS_READY_EVENTS_READY_Min (0x0UL)
  #define LPCOMP_EVENTS_READY_EVENTS_READY_Max (0x1UL)
  #define LPCOMP_EVENTS_READY_EVENTS_READY_NotGenerated (0x0UL)
  #define LPCOMP_EVENTS_READY_EVENTS_READY_Generated (0x1UL)


/* LPCOMP_EVENTS_DOWN: Downward crossing */
  #define LPCOMP_EVENTS_DOWN_ResetValue (0x00000000UL)

/* EVENTS_DOWN @Bit 0 : Downward crossing */
  #define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Pos (0UL)
  #define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Msk (0x1UL << LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Pos)
  #define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Min (0x0UL)
  #define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Max (0x1UL)
  #define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_NotGenerated (0x0UL)
  #define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Generated (0x1UL)


/* LPCOMP_EVENTS_UP: Upward crossing */
  #define LPCOMP_EVENTS_UP_ResetValue (0x00000000UL)

/* EVENTS_UP @Bit 0 : Upward crossing */
  #define LPCOMP_EVENTS_UP_EVENTS_UP_Pos (0UL)
  #define LPCOMP_EVENTS_UP_EVENTS_UP_Msk (0x1UL << LPCOMP_EVENTS_UP_EVENTS_UP_Pos)
  #define LPCOMP_EVENTS_UP_EVENTS_UP_Min (0x0UL)
  #define LPCOMP_EVENTS_UP_EVENTS_UP_Max (0x1UL)
  #define LPCOMP_EVENTS_UP_EVENTS_UP_NotGenerated (0x0UL)
  #define LPCOMP_EVENTS_UP_EVENTS_UP_Generated (0x1UL)


/* LPCOMP_EVENTS_CROSS: Downward or upward crossing */
  #define LPCOMP_EVENTS_CROSS_ResetValue (0x00000000UL)

/* EVENTS_CROSS @Bit 0 : Downward or upward crossing */
  #define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Pos (0UL)
  #define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Msk (0x1UL << LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Pos) /*!< Bit mask of EVENTS_CROSS
                                                                            field.*/
  #define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Min (0x0UL)
  #define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Max (0x1UL)
  #define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_NotGenerated (0x0UL)
  #define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Generated (0x1UL)


/* LPCOMP_PUBLISH_READY: Publish configuration for event READY */
  #define LPCOMP_PUBLISH_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define LPCOMP_PUBLISH_READY_CHIDX_Pos (0UL)
  #define LPCOMP_PUBLISH_READY_CHIDX_Msk (0xFFUL << LPCOMP_PUBLISH_READY_CHIDX_Pos)
  #define LPCOMP_PUBLISH_READY_CHIDX_Min (0x00UL)
  #define LPCOMP_PUBLISH_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_PUBLISH_READY_EN_Pos (31UL)
  #define LPCOMP_PUBLISH_READY_EN_Msk (0x1UL << LPCOMP_PUBLISH_READY_EN_Pos)
  #define LPCOMP_PUBLISH_READY_EN_Min (0x0UL)
  #define LPCOMP_PUBLISH_READY_EN_Max (0x1UL)
  #define LPCOMP_PUBLISH_READY_EN_Disabled (0x0UL)
  #define LPCOMP_PUBLISH_READY_EN_Enabled (0x1UL)


/* LPCOMP_PUBLISH_DOWN: Publish configuration for event DOWN */
  #define LPCOMP_PUBLISH_DOWN_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DOWN will publish to */
  #define LPCOMP_PUBLISH_DOWN_CHIDX_Pos (0UL)
  #define LPCOMP_PUBLISH_DOWN_CHIDX_Msk (0xFFUL << LPCOMP_PUBLISH_DOWN_CHIDX_Pos)
  #define LPCOMP_PUBLISH_DOWN_CHIDX_Min (0x00UL)
  #define LPCOMP_PUBLISH_DOWN_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_PUBLISH_DOWN_EN_Pos (31UL)
  #define LPCOMP_PUBLISH_DOWN_EN_Msk (0x1UL << LPCOMP_PUBLISH_DOWN_EN_Pos)
  #define LPCOMP_PUBLISH_DOWN_EN_Min (0x0UL)
  #define LPCOMP_PUBLISH_DOWN_EN_Max (0x1UL)
  #define LPCOMP_PUBLISH_DOWN_EN_Disabled (0x0UL)
  #define LPCOMP_PUBLISH_DOWN_EN_Enabled (0x1UL)


/* LPCOMP_PUBLISH_UP: Publish configuration for event UP */
  #define LPCOMP_PUBLISH_UP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event UP will publish to */
  #define LPCOMP_PUBLISH_UP_CHIDX_Pos (0UL)
  #define LPCOMP_PUBLISH_UP_CHIDX_Msk (0xFFUL << LPCOMP_PUBLISH_UP_CHIDX_Pos)
  #define LPCOMP_PUBLISH_UP_CHIDX_Min (0x00UL)
  #define LPCOMP_PUBLISH_UP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_PUBLISH_UP_EN_Pos (31UL)
  #define LPCOMP_PUBLISH_UP_EN_Msk (0x1UL << LPCOMP_PUBLISH_UP_EN_Pos)
  #define LPCOMP_PUBLISH_UP_EN_Min (0x0UL)
  #define LPCOMP_PUBLISH_UP_EN_Max (0x1UL)
  #define LPCOMP_PUBLISH_UP_EN_Disabled (0x0UL)
  #define LPCOMP_PUBLISH_UP_EN_Enabled (0x1UL)


/* LPCOMP_PUBLISH_CROSS: Publish configuration for event CROSS */
  #define LPCOMP_PUBLISH_CROSS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CROSS will publish to */
  #define LPCOMP_PUBLISH_CROSS_CHIDX_Pos (0UL)
  #define LPCOMP_PUBLISH_CROSS_CHIDX_Msk (0xFFUL << LPCOMP_PUBLISH_CROSS_CHIDX_Pos)
  #define LPCOMP_PUBLISH_CROSS_CHIDX_Min (0x00UL)
  #define LPCOMP_PUBLISH_CROSS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_PUBLISH_CROSS_EN_Pos (31UL)
  #define LPCOMP_PUBLISH_CROSS_EN_Msk (0x1UL << LPCOMP_PUBLISH_CROSS_EN_Pos)
  #define LPCOMP_PUBLISH_CROSS_EN_Min (0x0UL)
  #define LPCOMP_PUBLISH_CROSS_EN_Max (0x1UL)
  #define LPCOMP_PUBLISH_CROSS_EN_Disabled (0x0UL)
  #define LPCOMP_PUBLISH_CROSS_EN_Enabled (0x1UL)


/* LPCOMP_SHORTS: Shortcuts between local events and tasks */
  #define LPCOMP_SHORTS_ResetValue (0x00000000UL)

/* READY_SAMPLE @Bit 0 : Shortcut between event READY and task SAMPLE */
  #define LPCOMP_SHORTS_READY_SAMPLE_Pos (0UL)
  #define LPCOMP_SHORTS_READY_SAMPLE_Msk (0x1UL << LPCOMP_SHORTS_READY_SAMPLE_Pos)
  #define LPCOMP_SHORTS_READY_SAMPLE_Min (0x0UL)
  #define LPCOMP_SHORTS_READY_SAMPLE_Max (0x1UL)
  #define LPCOMP_SHORTS_READY_SAMPLE_Disabled (0x0UL)
  #define LPCOMP_SHORTS_READY_SAMPLE_Enabled (0x1UL)

/* READY_STOP @Bit 1 : Shortcut between event READY and task STOP */
  #define LPCOMP_SHORTS_READY_STOP_Pos (1UL)
  #define LPCOMP_SHORTS_READY_STOP_Msk (0x1UL << LPCOMP_SHORTS_READY_STOP_Pos)
  #define LPCOMP_SHORTS_READY_STOP_Min (0x0UL)
  #define LPCOMP_SHORTS_READY_STOP_Max (0x1UL)
  #define LPCOMP_SHORTS_READY_STOP_Disabled (0x0UL)
  #define LPCOMP_SHORTS_READY_STOP_Enabled (0x1UL)

/* DOWN_STOP @Bit 2 : Shortcut between event DOWN and task STOP */
  #define LPCOMP_SHORTS_DOWN_STOP_Pos (2UL)
  #define LPCOMP_SHORTS_DOWN_STOP_Msk (0x1UL << LPCOMP_SHORTS_DOWN_STOP_Pos)
  #define LPCOMP_SHORTS_DOWN_STOP_Min (0x0UL)
  #define LPCOMP_SHORTS_DOWN_STOP_Max (0x1UL)
  #define LPCOMP_SHORTS_DOWN_STOP_Disabled (0x0UL)
  #define LPCOMP_SHORTS_DOWN_STOP_Enabled (0x1UL)

/* UP_STOP @Bit 3 : Shortcut between event UP and task STOP */
  #define LPCOMP_SHORTS_UP_STOP_Pos (3UL)
  #define LPCOMP_SHORTS_UP_STOP_Msk (0x1UL << LPCOMP_SHORTS_UP_STOP_Pos)
  #define LPCOMP_SHORTS_UP_STOP_Min (0x0UL)
  #define LPCOMP_SHORTS_UP_STOP_Max (0x1UL)
  #define LPCOMP_SHORTS_UP_STOP_Disabled (0x0UL)
  #define LPCOMP_SHORTS_UP_STOP_Enabled (0x1UL)

/* CROSS_STOP @Bit 4 : Shortcut between event CROSS and task STOP */
  #define LPCOMP_SHORTS_CROSS_STOP_Pos (4UL)
  #define LPCOMP_SHORTS_CROSS_STOP_Msk (0x1UL << LPCOMP_SHORTS_CROSS_STOP_Pos)
  #define LPCOMP_SHORTS_CROSS_STOP_Min (0x0UL)
  #define LPCOMP_SHORTS_CROSS_STOP_Max (0x1UL)
  #define LPCOMP_SHORTS_CROSS_STOP_Disabled (0x0UL)
  #define LPCOMP_SHORTS_CROSS_STOP_Enabled (0x1UL)


/* LPCOMP_INTEN: Enable or disable interrupt */
  #define LPCOMP_INTEN_ResetValue (0x00000000UL)

/* READY @Bit 0 : Enable or disable interrupt for event READY */
  #define LPCOMP_INTEN_READY_Pos (0UL)
  #define LPCOMP_INTEN_READY_Msk (0x1UL << LPCOMP_INTEN_READY_Pos)
  #define LPCOMP_INTEN_READY_Min (0x0UL)
  #define LPCOMP_INTEN_READY_Max (0x1UL)
  #define LPCOMP_INTEN_READY_Disabled (0x0UL)
  #define LPCOMP_INTEN_READY_Enabled (0x1UL)

/* DOWN @Bit 1 : Enable or disable interrupt for event DOWN */
  #define LPCOMP_INTEN_DOWN_Pos (1UL)
  #define LPCOMP_INTEN_DOWN_Msk (0x1UL << LPCOMP_INTEN_DOWN_Pos)
  #define LPCOMP_INTEN_DOWN_Min (0x0UL)
  #define LPCOMP_INTEN_DOWN_Max (0x1UL)
  #define LPCOMP_INTEN_DOWN_Disabled (0x0UL)
  #define LPCOMP_INTEN_DOWN_Enabled (0x1UL)

/* UP @Bit 2 : Enable or disable interrupt for event UP */
  #define LPCOMP_INTEN_UP_Pos (2UL)
  #define LPCOMP_INTEN_UP_Msk (0x1UL << LPCOMP_INTEN_UP_Pos)
  #define LPCOMP_INTEN_UP_Min (0x0UL)
  #define LPCOMP_INTEN_UP_Max (0x1UL)
  #define LPCOMP_INTEN_UP_Disabled (0x0UL)
  #define LPCOMP_INTEN_UP_Enabled (0x1UL)

/* CROSS @Bit 3 : Enable or disable interrupt for event CROSS */
  #define LPCOMP_INTEN_CROSS_Pos (3UL)
  #define LPCOMP_INTEN_CROSS_Msk (0x1UL << LPCOMP_INTEN_CROSS_Pos)
  #define LPCOMP_INTEN_CROSS_Min (0x0UL)
  #define LPCOMP_INTEN_CROSS_Max (0x1UL)
  #define LPCOMP_INTEN_CROSS_Disabled (0x0UL)
  #define LPCOMP_INTEN_CROSS_Enabled (0x1UL)


/* LPCOMP_INTENSET: Enable interrupt */
  #define LPCOMP_INTENSET_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to enable interrupt for event READY */
  #define LPCOMP_INTENSET_READY_Pos (0UL)
  #define LPCOMP_INTENSET_READY_Msk (0x1UL << LPCOMP_INTENSET_READY_Pos)
  #define LPCOMP_INTENSET_READY_Min (0x0UL)
  #define LPCOMP_INTENSET_READY_Max (0x1UL)
  #define LPCOMP_INTENSET_READY_Set (0x1UL)
  #define LPCOMP_INTENSET_READY_Disabled (0x0UL)
  #define LPCOMP_INTENSET_READY_Enabled (0x1UL)

/* DOWN @Bit 1 : Write '1' to enable interrupt for event DOWN */
  #define LPCOMP_INTENSET_DOWN_Pos (1UL)
  #define LPCOMP_INTENSET_DOWN_Msk (0x1UL << LPCOMP_INTENSET_DOWN_Pos)
  #define LPCOMP_INTENSET_DOWN_Min (0x0UL)
  #define LPCOMP_INTENSET_DOWN_Max (0x1UL)
  #define LPCOMP_INTENSET_DOWN_Set (0x1UL)
  #define LPCOMP_INTENSET_DOWN_Disabled (0x0UL)
  #define LPCOMP_INTENSET_DOWN_Enabled (0x1UL)

/* UP @Bit 2 : Write '1' to enable interrupt for event UP */
  #define LPCOMP_INTENSET_UP_Pos (2UL)
  #define LPCOMP_INTENSET_UP_Msk (0x1UL << LPCOMP_INTENSET_UP_Pos)
  #define LPCOMP_INTENSET_UP_Min (0x0UL)
  #define LPCOMP_INTENSET_UP_Max (0x1UL)
  #define LPCOMP_INTENSET_UP_Set (0x1UL)
  #define LPCOMP_INTENSET_UP_Disabled (0x0UL)
  #define LPCOMP_INTENSET_UP_Enabled (0x1UL)

/* CROSS @Bit 3 : Write '1' to enable interrupt for event CROSS */
  #define LPCOMP_INTENSET_CROSS_Pos (3UL)
  #define LPCOMP_INTENSET_CROSS_Msk (0x1UL << LPCOMP_INTENSET_CROSS_Pos)
  #define LPCOMP_INTENSET_CROSS_Min (0x0UL)
  #define LPCOMP_INTENSET_CROSS_Max (0x1UL)
  #define LPCOMP_INTENSET_CROSS_Set (0x1UL)
  #define LPCOMP_INTENSET_CROSS_Disabled (0x0UL)
  #define LPCOMP_INTENSET_CROSS_Enabled (0x1UL)


/* LPCOMP_INTENCLR: Disable interrupt */
  #define LPCOMP_INTENCLR_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to disable interrupt for event READY */
  #define LPCOMP_INTENCLR_READY_Pos (0UL)
  #define LPCOMP_INTENCLR_READY_Msk (0x1UL << LPCOMP_INTENCLR_READY_Pos)
  #define LPCOMP_INTENCLR_READY_Min (0x0UL)
  #define LPCOMP_INTENCLR_READY_Max (0x1UL)
  #define LPCOMP_INTENCLR_READY_Clear (0x1UL)
  #define LPCOMP_INTENCLR_READY_Disabled (0x0UL)
  #define LPCOMP_INTENCLR_READY_Enabled (0x1UL)

/* DOWN @Bit 1 : Write '1' to disable interrupt for event DOWN */
  #define LPCOMP_INTENCLR_DOWN_Pos (1UL)
  #define LPCOMP_INTENCLR_DOWN_Msk (0x1UL << LPCOMP_INTENCLR_DOWN_Pos)
  #define LPCOMP_INTENCLR_DOWN_Min (0x0UL)
  #define LPCOMP_INTENCLR_DOWN_Max (0x1UL)
  #define LPCOMP_INTENCLR_DOWN_Clear (0x1UL)
  #define LPCOMP_INTENCLR_DOWN_Disabled (0x0UL)
  #define LPCOMP_INTENCLR_DOWN_Enabled (0x1UL)

/* UP @Bit 2 : Write '1' to disable interrupt for event UP */
  #define LPCOMP_INTENCLR_UP_Pos (2UL)
  #define LPCOMP_INTENCLR_UP_Msk (0x1UL << LPCOMP_INTENCLR_UP_Pos)
  #define LPCOMP_INTENCLR_UP_Min (0x0UL)
  #define LPCOMP_INTENCLR_UP_Max (0x1UL)
  #define LPCOMP_INTENCLR_UP_Clear (0x1UL)
  #define LPCOMP_INTENCLR_UP_Disabled (0x0UL)
  #define LPCOMP_INTENCLR_UP_Enabled (0x1UL)

/* CROSS @Bit 3 : Write '1' to disable interrupt for event CROSS */
  #define LPCOMP_INTENCLR_CROSS_Pos (3UL)
  #define LPCOMP_INTENCLR_CROSS_Msk (0x1UL << LPCOMP_INTENCLR_CROSS_Pos)
  #define LPCOMP_INTENCLR_CROSS_Min (0x0UL)
  #define LPCOMP_INTENCLR_CROSS_Max (0x1UL)
  #define LPCOMP_INTENCLR_CROSS_Clear (0x1UL)
  #define LPCOMP_INTENCLR_CROSS_Disabled (0x0UL)
  #define LPCOMP_INTENCLR_CROSS_Enabled (0x1UL)


/* LPCOMP_INTPEND: Pending interrupts */
  #define LPCOMP_INTPEND_ResetValue (0x00000000UL)

/* READY @Bit 0 : Read pending status of interrupt for event READY */
  #define LPCOMP_INTPEND_READY_Pos (0UL)
  #define LPCOMP_INTPEND_READY_Msk (0x1UL << LPCOMP_INTPEND_READY_Pos)
  #define LPCOMP_INTPEND_READY_Min (0x0UL)
  #define LPCOMP_INTPEND_READY_Max (0x1UL)
  #define LPCOMP_INTPEND_READY_NotPending (0x0UL)
  #define LPCOMP_INTPEND_READY_Pending (0x1UL)

/* DOWN @Bit 1 : Read pending status of interrupt for event DOWN */
  #define LPCOMP_INTPEND_DOWN_Pos (1UL)
  #define LPCOMP_INTPEND_DOWN_Msk (0x1UL << LPCOMP_INTPEND_DOWN_Pos)
  #define LPCOMP_INTPEND_DOWN_Min (0x0UL)
  #define LPCOMP_INTPEND_DOWN_Max (0x1UL)
  #define LPCOMP_INTPEND_DOWN_NotPending (0x0UL)
  #define LPCOMP_INTPEND_DOWN_Pending (0x1UL)

/* UP @Bit 2 : Read pending status of interrupt for event UP */
  #define LPCOMP_INTPEND_UP_Pos (2UL)
  #define LPCOMP_INTPEND_UP_Msk (0x1UL << LPCOMP_INTPEND_UP_Pos)
  #define LPCOMP_INTPEND_UP_Min (0x0UL)
  #define LPCOMP_INTPEND_UP_Max (0x1UL)
  #define LPCOMP_INTPEND_UP_NotPending (0x0UL)
  #define LPCOMP_INTPEND_UP_Pending (0x1UL)

/* CROSS @Bit 3 : Read pending status of interrupt for event CROSS */
  #define LPCOMP_INTPEND_CROSS_Pos (3UL)
  #define LPCOMP_INTPEND_CROSS_Msk (0x1UL << LPCOMP_INTPEND_CROSS_Pos)
  #define LPCOMP_INTPEND_CROSS_Min (0x0UL)
  #define LPCOMP_INTPEND_CROSS_Max (0x1UL)
  #define LPCOMP_INTPEND_CROSS_NotPending (0x0UL)
  #define LPCOMP_INTPEND_CROSS_Pending (0x1UL)


/* LPCOMP_RESULT: Compare result */
  #define LPCOMP_RESULT_ResetValue (0x00000000UL)

/* RESULT @Bit 0 : Result of last compare. Decision point SAMPLE task. */
  #define LPCOMP_RESULT_RESULT_Pos (0UL)
  #define LPCOMP_RESULT_RESULT_Msk (0x1UL << LPCOMP_RESULT_RESULT_Pos)
  #define LPCOMP_RESULT_RESULT_Min (0x0UL)
  #define LPCOMP_RESULT_RESULT_Max (0x1UL)
  #define LPCOMP_RESULT_RESULT_Below (0x0UL)
  #define LPCOMP_RESULT_RESULT_Above (0x1UL)


/* LPCOMP_ENABLE: Enable LPCOMP */
  #define LPCOMP_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..1 : Enable or disable LPCOMP */
  #define LPCOMP_ENABLE_ENABLE_Pos (0UL)
  #define LPCOMP_ENABLE_ENABLE_Msk (0x3UL << LPCOMP_ENABLE_ENABLE_Pos)
  #define LPCOMP_ENABLE_ENABLE_Min (0x0UL)
  #define LPCOMP_ENABLE_ENABLE_Max (0x1UL)
  #define LPCOMP_ENABLE_ENABLE_Disabled (0x0UL)
  #define LPCOMP_ENABLE_ENABLE_Enabled (0x1UL)


/* LPCOMP_PSEL: Input pin select */
  #define LPCOMP_PSEL_ResetValue (0x00000000UL)

/* PIN @Bits 0..4 : Analog pin select */
  #define LPCOMP_PSEL_PIN_Pos (0UL)
  #define LPCOMP_PSEL_PIN_Msk (0x1FUL << LPCOMP_PSEL_PIN_Pos)

/* PORT @Bits 8..11 : GPIO Port selection */
  #define LPCOMP_PSEL_PORT_Pos (8UL)
  #define LPCOMP_PSEL_PORT_Msk (0xFUL << LPCOMP_PSEL_PORT_Pos)


/* LPCOMP_REFSEL: Reference select */
  #define LPCOMP_REFSEL_ResetValue (0x00000004UL)

/* REFSEL @Bits 0..3 : Reference select */
  #define LPCOMP_REFSEL_REFSEL_Pos (0UL)
  #define LPCOMP_REFSEL_REFSEL_Msk (0xFUL << LPCOMP_REFSEL_REFSEL_Pos)
  #define LPCOMP_REFSEL_REFSEL_Min (0x0UL)
  #define LPCOMP_REFSEL_REFSEL_Max (0xFUL)
  #define LPCOMP_REFSEL_REFSEL_Ref1_8Vdd (0x0UL)
  #define LPCOMP_REFSEL_REFSEL_Ref2_8Vdd (0x1UL)
  #define LPCOMP_REFSEL_REFSEL_Ref3_8Vdd (0x2UL)
  #define LPCOMP_REFSEL_REFSEL_Ref4_8Vdd (0x3UL)
  #define LPCOMP_REFSEL_REFSEL_Ref5_8Vdd (0x4UL)
  #define LPCOMP_REFSEL_REFSEL_Ref6_8Vdd (0x5UL)
  #define LPCOMP_REFSEL_REFSEL_Ref7_8Vdd (0x6UL)
  #define LPCOMP_REFSEL_REFSEL_ARef (0x7UL)
  #define LPCOMP_REFSEL_REFSEL_Ref1_16Vdd (0x8UL)
  #define LPCOMP_REFSEL_REFSEL_Ref3_16Vdd (0x9UL)
  #define LPCOMP_REFSEL_REFSEL_Ref5_16Vdd (0xAUL)
  #define LPCOMP_REFSEL_REFSEL_Ref7_16Vdd (0xBUL)
  #define LPCOMP_REFSEL_REFSEL_Ref9_16Vdd (0xCUL)
  #define LPCOMP_REFSEL_REFSEL_Ref11_16Vdd (0xDUL)
  #define LPCOMP_REFSEL_REFSEL_Ref13_16Vdd (0xEUL)
  #define LPCOMP_REFSEL_REFSEL_Ref15_16Vdd (0xFUL)


/* LPCOMP_EXTREFSEL: External reference select */
  #define LPCOMP_EXTREFSEL_ResetValue (0x00000000UL)

/* PIN @Bits 0..4 : External analog reference pin select */
  #define LPCOMP_EXTREFSEL_PIN_Pos (0UL)
  #define LPCOMP_EXTREFSEL_PIN_Msk (0x1FUL << LPCOMP_EXTREFSEL_PIN_Pos)

/* PORT @Bits 8..11 : GPIO Port selection */
  #define LPCOMP_EXTREFSEL_PORT_Pos (8UL)
  #define LPCOMP_EXTREFSEL_PORT_Msk (0xFUL << LPCOMP_EXTREFSEL_PORT_Pos)


/* LPCOMP_ANADETECT: Analog detect configuration */
  #define LPCOMP_ANADETECT_ResetValue (0x00000000UL)

/* ANADETECT @Bits 0..1 : Analog detect configuration */
  #define LPCOMP_ANADETECT_ANADETECT_Pos (0UL)
  #define LPCOMP_ANADETECT_ANADETECT_Msk (0x3UL << LPCOMP_ANADETECT_ANADETECT_Pos)
  #define LPCOMP_ANADETECT_ANADETECT_Min (0x0UL)
  #define LPCOMP_ANADETECT_ANADETECT_Max (0x2UL)
  #define LPCOMP_ANADETECT_ANADETECT_Cross (0x0UL)   /*!< Generate ANADETECT on crossing, both upward crossing and downward
                                                          crossing*/
  #define LPCOMP_ANADETECT_ANADETECT_Up (0x1UL)
  #define LPCOMP_ANADETECT_ANADETECT_Down (0x2UL)


/* LPCOMP_HYST: Comparator hysteresis enable */
  #define LPCOMP_HYST_ResetValue (0x00000000UL)

/* HYST @Bit 0 : Comparator hysteresis enable */
  #define LPCOMP_HYST_HYST_Pos (0UL)
  #define LPCOMP_HYST_HYST_Msk (0x1UL << LPCOMP_HYST_HYST_Pos)
  #define LPCOMP_HYST_HYST_Min (0x0UL)
  #define LPCOMP_HYST_HYST_Max (0x1UL)
  #define LPCOMP_HYST_HYST_Disabled (0x0UL)
  #define LPCOMP_HYST_HYST_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          MEMCONF                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct MEMCONF_POWER =================================================== */
/**
  * @brief POWER [MEMCONF_POWER] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CONTROL;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  RET;
  __IM  uint32_t  RESERVED1;
} NRF_MEMCONF_POWER_Type;
  #define MEMCONF_POWER_MaxCount (2UL)
  #define MEMCONF_POWER_MaxIndex (1UL)
  #define MEMCONF_POWER_MinIndex (0UL)

/* MEMCONF_POWER_CONTROL: Control memory block power. */
  #define MEMCONF_POWER_CONTROL_ResetValue (0xFFFFFFFFUL)

/* MEM0 @Bit 0 : Keep the memory block MEM[0] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM0_Pos (0UL)
  #define MEMCONF_POWER_CONTROL_MEM0_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM0_Pos)
  #define MEMCONF_POWER_CONTROL_MEM0_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM0_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM0_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM0_On (0x1UL)

/* MEM1 @Bit 1 : Keep the memory block MEM[1] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM1_Pos (1UL)
  #define MEMCONF_POWER_CONTROL_MEM1_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM1_Pos)
  #define MEMCONF_POWER_CONTROL_MEM1_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM1_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM1_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM1_On (0x1UL)

/* MEM2 @Bit 2 : Keep the memory block MEM[2] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM2_Pos (2UL)
  #define MEMCONF_POWER_CONTROL_MEM2_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM2_Pos)
  #define MEMCONF_POWER_CONTROL_MEM2_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM2_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM2_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM2_On (0x1UL)

/* MEM3 @Bit 3 : Keep the memory block MEM[3] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM3_Pos (3UL)
  #define MEMCONF_POWER_CONTROL_MEM3_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM3_Pos)
  #define MEMCONF_POWER_CONTROL_MEM3_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM3_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM3_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM3_On (0x1UL)

/* MEM4 @Bit 4 : Keep the memory block MEM[4] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM4_Pos (4UL)
  #define MEMCONF_POWER_CONTROL_MEM4_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM4_Pos)
  #define MEMCONF_POWER_CONTROL_MEM4_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM4_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM4_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM4_On (0x1UL)

/* MEM5 @Bit 5 : Keep the memory block MEM[5] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM5_Pos (5UL)
  #define MEMCONF_POWER_CONTROL_MEM5_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM5_Pos)
  #define MEMCONF_POWER_CONTROL_MEM5_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM5_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM5_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM5_On (0x1UL)

/* MEM6 @Bit 6 : Keep the memory block MEM[6] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM6_Pos (6UL)
  #define MEMCONF_POWER_CONTROL_MEM6_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM6_Pos)
  #define MEMCONF_POWER_CONTROL_MEM6_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM6_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM6_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM6_On (0x1UL)

/* MEM7 @Bit 7 : Keep the memory block MEM[7] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM7_Pos (7UL)
  #define MEMCONF_POWER_CONTROL_MEM7_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM7_Pos)
  #define MEMCONF_POWER_CONTROL_MEM7_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM7_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM7_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM7_On (0x1UL)

/* MEM8 @Bit 8 : Keep the memory block MEM[8] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM8_Pos (8UL)
  #define MEMCONF_POWER_CONTROL_MEM8_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM8_Pos)
  #define MEMCONF_POWER_CONTROL_MEM8_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM8_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM8_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM8_On (0x1UL)

/* MEM9 @Bit 9 : Keep the memory block MEM[9] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM9_Pos (9UL)
  #define MEMCONF_POWER_CONTROL_MEM9_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM9_Pos)
  #define MEMCONF_POWER_CONTROL_MEM9_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM9_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM9_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM9_On (0x1UL)

/* MEM10 @Bit 10 : Keep the memory block MEM[10] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM10_Pos (10UL)
  #define MEMCONF_POWER_CONTROL_MEM10_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM10_Pos)
  #define MEMCONF_POWER_CONTROL_MEM10_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM10_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM10_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM10_On (0x1UL)

/* MEM11 @Bit 11 : Keep the memory block MEM[11] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM11_Pos (11UL)
  #define MEMCONF_POWER_CONTROL_MEM11_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM11_Pos)
  #define MEMCONF_POWER_CONTROL_MEM11_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM11_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM11_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM11_On (0x1UL)

/* MEM12 @Bit 12 : Keep the memory block MEM[12] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM12_Pos (12UL)
  #define MEMCONF_POWER_CONTROL_MEM12_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM12_Pos)
  #define MEMCONF_POWER_CONTROL_MEM12_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM12_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM12_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM12_On (0x1UL)

/* MEM13 @Bit 13 : Keep the memory block MEM[13] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM13_Pos (13UL)
  #define MEMCONF_POWER_CONTROL_MEM13_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM13_Pos)
  #define MEMCONF_POWER_CONTROL_MEM13_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM13_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM13_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM13_On (0x1UL)

/* MEM14 @Bit 14 : Keep the memory block MEM[14] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM14_Pos (14UL)
  #define MEMCONF_POWER_CONTROL_MEM14_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM14_Pos)
  #define MEMCONF_POWER_CONTROL_MEM14_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM14_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM14_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM14_On (0x1UL)

/* MEM15 @Bit 15 : Keep the memory block MEM[15] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM15_Pos (15UL)
  #define MEMCONF_POWER_CONTROL_MEM15_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM15_Pos)
  #define MEMCONF_POWER_CONTROL_MEM15_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM15_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM15_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM15_On (0x1UL)

/* MEM16 @Bit 16 : Keep the memory block MEM[16] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM16_Pos (16UL)
  #define MEMCONF_POWER_CONTROL_MEM16_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM16_Pos)
  #define MEMCONF_POWER_CONTROL_MEM16_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM16_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM16_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM16_On (0x1UL)

/* MEM17 @Bit 17 : Keep the memory block MEM[17] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM17_Pos (17UL)
  #define MEMCONF_POWER_CONTROL_MEM17_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM17_Pos)
  #define MEMCONF_POWER_CONTROL_MEM17_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM17_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM17_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM17_On (0x1UL)

/* MEM18 @Bit 18 : Keep the memory block MEM[18] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM18_Pos (18UL)
  #define MEMCONF_POWER_CONTROL_MEM18_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM18_Pos)
  #define MEMCONF_POWER_CONTROL_MEM18_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM18_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM18_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM18_On (0x1UL)

/* MEM19 @Bit 19 : Keep the memory block MEM[19] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM19_Pos (19UL)
  #define MEMCONF_POWER_CONTROL_MEM19_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM19_Pos)
  #define MEMCONF_POWER_CONTROL_MEM19_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM19_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM19_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM19_On (0x1UL)

/* MEM20 @Bit 20 : Keep the memory block MEM[20] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM20_Pos (20UL)
  #define MEMCONF_POWER_CONTROL_MEM20_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM20_Pos)
  #define MEMCONF_POWER_CONTROL_MEM20_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM20_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM20_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM20_On (0x1UL)

/* MEM21 @Bit 21 : Keep the memory block MEM[21] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM21_Pos (21UL)
  #define MEMCONF_POWER_CONTROL_MEM21_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM21_Pos)
  #define MEMCONF_POWER_CONTROL_MEM21_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM21_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM21_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM21_On (0x1UL)

/* MEM22 @Bit 22 : Keep the memory block MEM[22] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM22_Pos (22UL)
  #define MEMCONF_POWER_CONTROL_MEM22_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM22_Pos)
  #define MEMCONF_POWER_CONTROL_MEM22_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM22_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM22_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM22_On (0x1UL)

/* MEM23 @Bit 23 : Keep the memory block MEM[23] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM23_Pos (23UL)
  #define MEMCONF_POWER_CONTROL_MEM23_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM23_Pos)
  #define MEMCONF_POWER_CONTROL_MEM23_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM23_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM23_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM23_On (0x1UL)

/* MEM24 @Bit 24 : Keep the memory block MEM[24] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM24_Pos (24UL)
  #define MEMCONF_POWER_CONTROL_MEM24_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM24_Pos)
  #define MEMCONF_POWER_CONTROL_MEM24_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM24_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM24_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM24_On (0x1UL)

/* MEM25 @Bit 25 : Keep the memory block MEM[25] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM25_Pos (25UL)
  #define MEMCONF_POWER_CONTROL_MEM25_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM25_Pos)
  #define MEMCONF_POWER_CONTROL_MEM25_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM25_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM25_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM25_On (0x1UL)

/* MEM26 @Bit 26 : Keep the memory block MEM[26] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM26_Pos (26UL)
  #define MEMCONF_POWER_CONTROL_MEM26_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM26_Pos)
  #define MEMCONF_POWER_CONTROL_MEM26_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM26_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM26_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM26_On (0x1UL)

/* MEM27 @Bit 27 : Keep the memory block MEM[27] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM27_Pos (27UL)
  #define MEMCONF_POWER_CONTROL_MEM27_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM27_Pos)
  #define MEMCONF_POWER_CONTROL_MEM27_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM27_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM27_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM27_On (0x1UL)

/* MEM28 @Bit 28 : Keep the memory block MEM[28] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM28_Pos (28UL)
  #define MEMCONF_POWER_CONTROL_MEM28_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM28_Pos)
  #define MEMCONF_POWER_CONTROL_MEM28_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM28_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM28_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM28_On (0x1UL)

/* MEM29 @Bit 29 : Keep the memory block MEM[29] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM29_Pos (29UL)
  #define MEMCONF_POWER_CONTROL_MEM29_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM29_Pos)
  #define MEMCONF_POWER_CONTROL_MEM29_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM29_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM29_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM29_On (0x1UL)

/* MEM30 @Bit 30 : Keep the memory block MEM[30] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM30_Pos (30UL)
  #define MEMCONF_POWER_CONTROL_MEM30_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM30_Pos)
  #define MEMCONF_POWER_CONTROL_MEM30_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM30_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM30_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM30_On (0x1UL)

/* MEM31 @Bit 31 : Keep the memory block MEM[31] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM31_Pos (31UL)
  #define MEMCONF_POWER_CONTROL_MEM31_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM31_Pos)
  #define MEMCONF_POWER_CONTROL_MEM31_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM31_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM31_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM31_On (0x1UL)


/* MEMCONF_POWER_RET: RAM retention for RAM [n]. */
  #define MEMCONF_POWER_RET_ResetValue (0xFFFFFFFFUL)

/* MEM0 @Bit 0 : Keep the RAM block MEM[0] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM0_Pos (0UL)
  #define MEMCONF_POWER_RET_MEM0_Msk (0x1UL << MEMCONF_POWER_RET_MEM0_Pos)
  #define MEMCONF_POWER_RET_MEM0_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM0_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM0_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM0_On (0x1UL)

/* MEM1 @Bit 1 : Keep the RAM block MEM[1] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM1_Pos (1UL)
  #define MEMCONF_POWER_RET_MEM1_Msk (0x1UL << MEMCONF_POWER_RET_MEM1_Pos)
  #define MEMCONF_POWER_RET_MEM1_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM1_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM1_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM1_On (0x1UL)

/* MEM2 @Bit 2 : Keep the RAM block MEM[2] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM2_Pos (2UL)
  #define MEMCONF_POWER_RET_MEM2_Msk (0x1UL << MEMCONF_POWER_RET_MEM2_Pos)
  #define MEMCONF_POWER_RET_MEM2_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM2_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM2_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM2_On (0x1UL)

/* MEM3 @Bit 3 : Keep the RAM block MEM[3] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM3_Pos (3UL)
  #define MEMCONF_POWER_RET_MEM3_Msk (0x1UL << MEMCONF_POWER_RET_MEM3_Pos)
  #define MEMCONF_POWER_RET_MEM3_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM3_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM3_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM3_On (0x1UL)

/* MEM4 @Bit 4 : Keep the RAM block MEM[4] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM4_Pos (4UL)
  #define MEMCONF_POWER_RET_MEM4_Msk (0x1UL << MEMCONF_POWER_RET_MEM4_Pos)
  #define MEMCONF_POWER_RET_MEM4_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM4_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM4_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM4_On (0x1UL)

/* MEM5 @Bit 5 : Keep the RAM block MEM[5] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM5_Pos (5UL)
  #define MEMCONF_POWER_RET_MEM5_Msk (0x1UL << MEMCONF_POWER_RET_MEM5_Pos)
  #define MEMCONF_POWER_RET_MEM5_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM5_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM5_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM5_On (0x1UL)

/* MEM6 @Bit 6 : Keep the RAM block MEM[6] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM6_Pos (6UL)
  #define MEMCONF_POWER_RET_MEM6_Msk (0x1UL << MEMCONF_POWER_RET_MEM6_Pos)
  #define MEMCONF_POWER_RET_MEM6_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM6_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM6_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM6_On (0x1UL)

/* MEM7 @Bit 7 : Keep the RAM block MEM[7] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM7_Pos (7UL)
  #define MEMCONF_POWER_RET_MEM7_Msk (0x1UL << MEMCONF_POWER_RET_MEM7_Pos)
  #define MEMCONF_POWER_RET_MEM7_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM7_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM7_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM7_On (0x1UL)

/* MEM8 @Bit 8 : Keep the RAM block MEM[8] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM8_Pos (8UL)
  #define MEMCONF_POWER_RET_MEM8_Msk (0x1UL << MEMCONF_POWER_RET_MEM8_Pos)
  #define MEMCONF_POWER_RET_MEM8_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM8_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM8_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM8_On (0x1UL)

/* MEM9 @Bit 9 : Keep the RAM block MEM[9] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM9_Pos (9UL)
  #define MEMCONF_POWER_RET_MEM9_Msk (0x1UL << MEMCONF_POWER_RET_MEM9_Pos)
  #define MEMCONF_POWER_RET_MEM9_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM9_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM9_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM9_On (0x1UL)

/* MEM10 @Bit 10 : Keep the RAM block MEM[10] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM10_Pos (10UL)
  #define MEMCONF_POWER_RET_MEM10_Msk (0x1UL << MEMCONF_POWER_RET_MEM10_Pos)
  #define MEMCONF_POWER_RET_MEM10_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM10_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM10_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM10_On (0x1UL)

/* MEM11 @Bit 11 : Keep the RAM block MEM[11] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM11_Pos (11UL)
  #define MEMCONF_POWER_RET_MEM11_Msk (0x1UL << MEMCONF_POWER_RET_MEM11_Pos)
  #define MEMCONF_POWER_RET_MEM11_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM11_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM11_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM11_On (0x1UL)

/* MEM12 @Bit 12 : Keep the RAM block MEM[12] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM12_Pos (12UL)
  #define MEMCONF_POWER_RET_MEM12_Msk (0x1UL << MEMCONF_POWER_RET_MEM12_Pos)
  #define MEMCONF_POWER_RET_MEM12_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM12_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM12_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM12_On (0x1UL)

/* MEM13 @Bit 13 : Keep the RAM block MEM[13] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM13_Pos (13UL)
  #define MEMCONF_POWER_RET_MEM13_Msk (0x1UL << MEMCONF_POWER_RET_MEM13_Pos)
  #define MEMCONF_POWER_RET_MEM13_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM13_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM13_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM13_On (0x1UL)

/* MEM14 @Bit 14 : Keep the RAM block MEM[14] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM14_Pos (14UL)
  #define MEMCONF_POWER_RET_MEM14_Msk (0x1UL << MEMCONF_POWER_RET_MEM14_Pos)
  #define MEMCONF_POWER_RET_MEM14_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM14_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM14_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM14_On (0x1UL)

/* MEM15 @Bit 15 : Keep the RAM block MEM[15] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM15_Pos (15UL)
  #define MEMCONF_POWER_RET_MEM15_Msk (0x1UL << MEMCONF_POWER_RET_MEM15_Pos)
  #define MEMCONF_POWER_RET_MEM15_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM15_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM15_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM15_On (0x1UL)

/* MEM16 @Bit 16 : Keep the RAM block MEM[16] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM16_Pos (16UL)
  #define MEMCONF_POWER_RET_MEM16_Msk (0x1UL << MEMCONF_POWER_RET_MEM16_Pos)
  #define MEMCONF_POWER_RET_MEM16_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM16_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM16_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM16_On (0x1UL)

/* MEM17 @Bit 17 : Keep the RAM block MEM[17] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM17_Pos (17UL)
  #define MEMCONF_POWER_RET_MEM17_Msk (0x1UL << MEMCONF_POWER_RET_MEM17_Pos)
  #define MEMCONF_POWER_RET_MEM17_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM17_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM17_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM17_On (0x1UL)

/* MEM18 @Bit 18 : Keep the RAM block MEM[18] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM18_Pos (18UL)
  #define MEMCONF_POWER_RET_MEM18_Msk (0x1UL << MEMCONF_POWER_RET_MEM18_Pos)
  #define MEMCONF_POWER_RET_MEM18_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM18_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM18_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM18_On (0x1UL)

/* MEM19 @Bit 19 : Keep the RAM block MEM[19] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM19_Pos (19UL)
  #define MEMCONF_POWER_RET_MEM19_Msk (0x1UL << MEMCONF_POWER_RET_MEM19_Pos)
  #define MEMCONF_POWER_RET_MEM19_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM19_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM19_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM19_On (0x1UL)

/* MEM20 @Bit 20 : Keep the RAM block MEM[20] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM20_Pos (20UL)
  #define MEMCONF_POWER_RET_MEM20_Msk (0x1UL << MEMCONF_POWER_RET_MEM20_Pos)
  #define MEMCONF_POWER_RET_MEM20_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM20_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM20_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM20_On (0x1UL)

/* MEM21 @Bit 21 : Keep the RAM block MEM[21] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM21_Pos (21UL)
  #define MEMCONF_POWER_RET_MEM21_Msk (0x1UL << MEMCONF_POWER_RET_MEM21_Pos)
  #define MEMCONF_POWER_RET_MEM21_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM21_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM21_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM21_On (0x1UL)

/* MEM22 @Bit 22 : Keep the RAM block MEM[22] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM22_Pos (22UL)
  #define MEMCONF_POWER_RET_MEM22_Msk (0x1UL << MEMCONF_POWER_RET_MEM22_Pos)
  #define MEMCONF_POWER_RET_MEM22_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM22_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM22_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM22_On (0x1UL)

/* MEM23 @Bit 23 : Keep the RAM block MEM[23] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM23_Pos (23UL)
  #define MEMCONF_POWER_RET_MEM23_Msk (0x1UL << MEMCONF_POWER_RET_MEM23_Pos)
  #define MEMCONF_POWER_RET_MEM23_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM23_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM23_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM23_On (0x1UL)

/* MEM24 @Bit 24 : Keep the RAM block MEM[24] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM24_Pos (24UL)
  #define MEMCONF_POWER_RET_MEM24_Msk (0x1UL << MEMCONF_POWER_RET_MEM24_Pos)
  #define MEMCONF_POWER_RET_MEM24_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM24_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM24_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM24_On (0x1UL)

/* MEM25 @Bit 25 : Keep the RAM block MEM[25] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM25_Pos (25UL)
  #define MEMCONF_POWER_RET_MEM25_Msk (0x1UL << MEMCONF_POWER_RET_MEM25_Pos)
  #define MEMCONF_POWER_RET_MEM25_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM25_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM25_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM25_On (0x1UL)

/* MEM26 @Bit 26 : Keep the RAM block MEM[26] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM26_Pos (26UL)
  #define MEMCONF_POWER_RET_MEM26_Msk (0x1UL << MEMCONF_POWER_RET_MEM26_Pos)
  #define MEMCONF_POWER_RET_MEM26_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM26_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM26_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM26_On (0x1UL)

/* MEM27 @Bit 27 : Keep the RAM block MEM[27] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM27_Pos (27UL)
  #define MEMCONF_POWER_RET_MEM27_Msk (0x1UL << MEMCONF_POWER_RET_MEM27_Pos)
  #define MEMCONF_POWER_RET_MEM27_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM27_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM27_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM27_On (0x1UL)

/* MEM28 @Bit 28 : Keep the RAM block MEM[28] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM28_Pos (28UL)
  #define MEMCONF_POWER_RET_MEM28_Msk (0x1UL << MEMCONF_POWER_RET_MEM28_Pos)
  #define MEMCONF_POWER_RET_MEM28_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM28_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM28_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM28_On (0x1UL)

/* MEM29 @Bit 29 : Keep the RAM block MEM[29] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM29_Pos (29UL)
  #define MEMCONF_POWER_RET_MEM29_Msk (0x1UL << MEMCONF_POWER_RET_MEM29_Pos)
  #define MEMCONF_POWER_RET_MEM29_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM29_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM29_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM29_On (0x1UL)

/* MEM30 @Bit 30 : Keep the RAM block MEM[30] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM30_Pos (30UL)
  #define MEMCONF_POWER_RET_MEM30_Msk (0x1UL << MEMCONF_POWER_RET_MEM30_Pos)
  #define MEMCONF_POWER_RET_MEM30_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM30_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM30_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM30_On (0x1UL)

/* MEM31 @Bit 31 : Keep the RAM block MEM[31] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM31_Pos (31UL)
  #define MEMCONF_POWER_RET_MEM31_Msk (0x1UL << MEMCONF_POWER_RET_MEM31_Pos)
  #define MEMCONF_POWER_RET_MEM31_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM31_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM31_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM31_On (0x1UL)


/* ===================================================== Struct MEMCONF ====================================================== */
/**
  * @brief Memory configuration
  */
  typedef struct {
    __IM uint32_t RESERVED[320];
    __IOM NRF_MEMCONF_POWER_Type POWER[2];
  } NRF_MEMCONF_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            MPC                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct MPC_MEMACCERR =================================================== */
/**
  * @brief MEMACCERR [MPC_MEMACCERR] Memory Access Error status registers
  */
typedef struct {
  __IM  uint32_t  ADDRESS;                           /*!< (@ 0x00000000) Target Address of Memory Access Error. Register content
                                                                         won't be changed as long as MEMACCERR event is active.*/
  __IM  uint32_t  INFO;                              /*!< (@ 0x00000004) Access information for the transaction that triggered a
                                                                         memory access error. Register content won't be changed
                                                                         as long as MEMACCERR event is active.*/
} NRF_MPC_MEMACCERR_Type;

/* MPC_MEMACCERR_ADDRESS: Target Address of Memory Access Error. Register content won't be changed as long as MEMACCERR event is
                           active. */

  #define MPC_MEMACCERR_ADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Target address for erroneous access */
  #define MPC_MEMACCERR_ADDRESS_ADDRESS_Pos (0UL)
  #define MPC_MEMACCERR_ADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << MPC_MEMACCERR_ADDRESS_ADDRESS_Pos)


/* MPC_MEMACCERR_INFO: Access information for the transaction that triggered a memory access error. Register content won't be
                        changed as long as MEMACCERR event is active. */

  #define MPC_MEMACCERR_INFO_ResetValue (0x00000000UL)

/* READ @Bit 12 : Read bit of bus access */
  #define MPC_MEMACCERR_INFO_READ_Pos (12UL)
  #define MPC_MEMACCERR_INFO_READ_Msk (0x1UL << MPC_MEMACCERR_INFO_READ_Pos)
  #define MPC_MEMACCERR_INFO_READ_Min (0x0UL)
  #define MPC_MEMACCERR_INFO_READ_Max (0x1UL)
  #define MPC_MEMACCERR_INFO_READ_Set (0x1UL)
  #define MPC_MEMACCERR_INFO_READ_NotSet (0x0UL)

/* WRITE @Bit 13 : Write bit of bus access */
  #define MPC_MEMACCERR_INFO_WRITE_Pos (13UL)
  #define MPC_MEMACCERR_INFO_WRITE_Msk (0x1UL << MPC_MEMACCERR_INFO_WRITE_Pos)
  #define MPC_MEMACCERR_INFO_WRITE_Min (0x0UL)
  #define MPC_MEMACCERR_INFO_WRITE_Max (0x1UL)
  #define MPC_MEMACCERR_INFO_WRITE_Set (0x1UL)
  #define MPC_MEMACCERR_INFO_WRITE_NotSet (0x0UL)

/* EXECUTE @Bit 14 : Execute bit of bus access */
  #define MPC_MEMACCERR_INFO_EXECUTE_Pos (14UL)
  #define MPC_MEMACCERR_INFO_EXECUTE_Msk (0x1UL << MPC_MEMACCERR_INFO_EXECUTE_Pos)
  #define MPC_MEMACCERR_INFO_EXECUTE_Min (0x0UL)
  #define MPC_MEMACCERR_INFO_EXECUTE_Max (0x1UL)
  #define MPC_MEMACCERR_INFO_EXECUTE_Set (0x1UL)
  #define MPC_MEMACCERR_INFO_EXECUTE_NotSet (0x0UL)

/* SECURE @Bit 15 : Secure bit of bus access */
  #define MPC_MEMACCERR_INFO_SECURE_Pos (15UL)
  #define MPC_MEMACCERR_INFO_SECURE_Msk (0x1UL << MPC_MEMACCERR_INFO_SECURE_Pos)
  #define MPC_MEMACCERR_INFO_SECURE_Min (0x0UL)
  #define MPC_MEMACCERR_INFO_SECURE_Max (0x1UL)
  #define MPC_MEMACCERR_INFO_SECURE_Set (0x1UL)
  #define MPC_MEMACCERR_INFO_SECURE_NotSet (0x0UL)

/* ERRORSOURCE @Bit 16 : Source of memory access error */
  #define MPC_MEMACCERR_INFO_ERRORSOURCE_Pos (16UL)
  #define MPC_MEMACCERR_INFO_ERRORSOURCE_Msk (0x1UL << MPC_MEMACCERR_INFO_ERRORSOURCE_Pos)
  #define MPC_MEMACCERR_INFO_ERRORSOURCE_Min (0x0UL)
  #define MPC_MEMACCERR_INFO_ERRORSOURCE_Max (0x1UL)
  #define MPC_MEMACCERR_INFO_ERRORSOURCE_MPC (0x1UL)
  #define MPC_MEMACCERR_INFO_ERRORSOURCE_Slave (0x0UL)



/* =================================================== Struct MPC_OVERRIDE =================================================== */
/**
  * @brief OVERRIDE [MPC_OVERRIDE] Special privilege tables
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  STARTADDR;
  __IOM uint32_t  ENDADDR;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PERM;
  __IOM uint32_t  PERMMASK;                          /*!< (@ 0x00000014) Masks permission setting fields from register
                                                                         OVERRIDE.PERM*/
  __IM  uint32_t  RESERVED1[2];
} NRF_MPC_OVERRIDE_Type;
  #define MPC_OVERRIDE_MaxCount (12UL)
  #define MPC_OVERRIDE_MaxIndex (11UL)
  #define MPC_OVERRIDE_MinIndex (0UL)

/* MPC_OVERRIDE_CONFIG: Override region n Configuration register */
  #define MPC_OVERRIDE_CONFIG_ResetValue (0x00000000UL)

/* LOCK @Bit 8 : Lock Override region n */
  #define MPC_OVERRIDE_CONFIG_LOCK_Pos (8UL)
  #define MPC_OVERRIDE_CONFIG_LOCK_Msk (0x1UL << MPC_OVERRIDE_CONFIG_LOCK_Pos)
  #define MPC_OVERRIDE_CONFIG_LOCK_Min (0x0UL)
  #define MPC_OVERRIDE_CONFIG_LOCK_Max (0x1UL)
  #define MPC_OVERRIDE_CONFIG_LOCK_Unlocked (0x0UL)
  #define MPC_OVERRIDE_CONFIG_LOCK_Locked (0x1UL)

/* ENABLE @Bit 9 : Enable Override region n */
  #define MPC_OVERRIDE_CONFIG_ENABLE_Pos (9UL)
  #define MPC_OVERRIDE_CONFIG_ENABLE_Msk (0x1UL << MPC_OVERRIDE_CONFIG_ENABLE_Pos)
  #define MPC_OVERRIDE_CONFIG_ENABLE_Min (0x0UL)
  #define MPC_OVERRIDE_CONFIG_ENABLE_Max (0x1UL)
  #define MPC_OVERRIDE_CONFIG_ENABLE_Disabled (0x0UL)
  #define MPC_OVERRIDE_CONFIG_ENABLE_Enabled (0x1UL)


/* MPC_OVERRIDE_STARTADDR: Override region n Start Address */
  #define MPC_OVERRIDE_STARTADDR_ResetValue (0x00000000UL)

/* STARTADDR @Bits 0..31 : Start address for override region n */
  #define MPC_OVERRIDE_STARTADDR_STARTADDR_Pos (0UL)
  #define MPC_OVERRIDE_STARTADDR_STARTADDR_Msk (0xFFFFFFFFUL << MPC_OVERRIDE_STARTADDR_STARTADDR_Pos) /*!< Bit mask of STARTADDR
                                                                            field.*/


/* MPC_OVERRIDE_ENDADDR: Override region n End Address */
  #define MPC_OVERRIDE_ENDADDR_ResetValue (0x00000000UL)

/* ENDADDR @Bits 0..31 : End address for override region n */
  #define MPC_OVERRIDE_ENDADDR_ENDADDR_Pos (0UL)
  #define MPC_OVERRIDE_ENDADDR_ENDADDR_Msk (0xFFFFFFFFUL << MPC_OVERRIDE_ENDADDR_ENDADDR_Pos)


/* MPC_OVERRIDE_PERM: Permission settings for override region n */
  #define MPC_OVERRIDE_PERM_ResetValue (0x00000000UL)

/* READ @Bit 0 : Read access */
  #define MPC_OVERRIDE_PERM_READ_Pos (0UL)
  #define MPC_OVERRIDE_PERM_READ_Msk (0x1UL << MPC_OVERRIDE_PERM_READ_Pos)
  #define MPC_OVERRIDE_PERM_READ_Min (0x0UL)
  #define MPC_OVERRIDE_PERM_READ_Max (0x1UL)
  #define MPC_OVERRIDE_PERM_READ_NotAllowed (0x0UL)
  #define MPC_OVERRIDE_PERM_READ_Allowed (0x1UL)

/* WRITE @Bit 1 : Write access */
  #define MPC_OVERRIDE_PERM_WRITE_Pos (1UL)
  #define MPC_OVERRIDE_PERM_WRITE_Msk (0x1UL << MPC_OVERRIDE_PERM_WRITE_Pos)
  #define MPC_OVERRIDE_PERM_WRITE_Min (0x0UL)
  #define MPC_OVERRIDE_PERM_WRITE_Max (0x1UL)
  #define MPC_OVERRIDE_PERM_WRITE_NotAllowed (0x0UL)
  #define MPC_OVERRIDE_PERM_WRITE_Allowed (0x1UL)

/* EXECUTE @Bit 2 : Software execute */
  #define MPC_OVERRIDE_PERM_EXECUTE_Pos (2UL)
  #define MPC_OVERRIDE_PERM_EXECUTE_Msk (0x1UL << MPC_OVERRIDE_PERM_EXECUTE_Pos)
  #define MPC_OVERRIDE_PERM_EXECUTE_Min (0x0UL)
  #define MPC_OVERRIDE_PERM_EXECUTE_Max (0x1UL)
  #define MPC_OVERRIDE_PERM_EXECUTE_NotAllowed (0x0UL)
  #define MPC_OVERRIDE_PERM_EXECUTE_Allowed (0x1UL)

/* SECATTR @Bit 3 : Security mapping */
  #define MPC_OVERRIDE_PERM_SECATTR_Pos (3UL)
  #define MPC_OVERRIDE_PERM_SECATTR_Msk (0x1UL << MPC_OVERRIDE_PERM_SECATTR_Pos)
  #define MPC_OVERRIDE_PERM_SECATTR_Min (0x0UL)
  #define MPC_OVERRIDE_PERM_SECATTR_Max (0x1UL)
  #define MPC_OVERRIDE_PERM_SECATTR_Secure (0x1UL)
  #define MPC_OVERRIDE_PERM_SECATTR_NonSecure (0x0UL)


/* MPC_OVERRIDE_PERMMASK: Masks permission setting fields from register OVERRIDE.PERM */
  #define MPC_OVERRIDE_PERMMASK_ResetValue (0x00000000UL)

/* READ @Bit 0 : Read mask */
  #define MPC_OVERRIDE_PERMMASK_READ_Pos (0UL)
  #define MPC_OVERRIDE_PERMMASK_READ_Msk (0x1UL << MPC_OVERRIDE_PERMMASK_READ_Pos)
  #define MPC_OVERRIDE_PERMMASK_READ_Min (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_READ_Max (0x1UL)
  #define MPC_OVERRIDE_PERMMASK_READ_Masked (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_READ_UnMasked (0x1UL)

/* WRITE @Bit 1 : Write mask */
  #define MPC_OVERRIDE_PERMMASK_WRITE_Pos (1UL)
  #define MPC_OVERRIDE_PERMMASK_WRITE_Msk (0x1UL << MPC_OVERRIDE_PERMMASK_WRITE_Pos)
  #define MPC_OVERRIDE_PERMMASK_WRITE_Min (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_WRITE_Max (0x1UL)
  #define MPC_OVERRIDE_PERMMASK_WRITE_Masked (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_WRITE_UnMasked (0x1UL)

/* EXECUTE @Bit 2 : Execute mask */
  #define MPC_OVERRIDE_PERMMASK_EXECUTE_Pos (2UL)
  #define MPC_OVERRIDE_PERMMASK_EXECUTE_Msk (0x1UL << MPC_OVERRIDE_PERMMASK_EXECUTE_Pos)
  #define MPC_OVERRIDE_PERMMASK_EXECUTE_Min (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_EXECUTE_Max (0x1UL)
  #define MPC_OVERRIDE_PERMMASK_EXECUTE_Masked (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_EXECUTE_UnMasked (0x1UL)

/* SECATTR @Bit 3 : Security mapping mask */
  #define MPC_OVERRIDE_PERMMASK_SECATTR_Pos (3UL)
  #define MPC_OVERRIDE_PERMMASK_SECATTR_Msk (0x1UL << MPC_OVERRIDE_PERMMASK_SECATTR_Pos)
  #define MPC_OVERRIDE_PERMMASK_SECATTR_Min (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_SECATTR_Max (0x1UL)
  #define MPC_OVERRIDE_PERMMASK_SECATTR_Masked (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_SECATTR_UnMasked (0x1UL)


/* ======================================================= Struct MPC ======================================================== */
/**
  * @brief Memory Privilege Controller
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_MEMACCERR;
    __IM uint32_t RESERVED1[127];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED2[61];
    __IOM NRF_MPC_MEMACCERR_Type MEMACCERR;
    __IM uint32_t RESERVED3[254];
    __IOM NRF_MPC_OVERRIDE_Type OVERRIDE[12];
  } NRF_MPC_Type;

/* MPC_EVENTS_MEMACCERR: Memory Access Error event */
  #define MPC_EVENTS_MEMACCERR_ResetValue (0x00000000UL)

/* EVENTS_MEMACCERR @Bit 0 : Memory Access Error event */
  #define MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_Pos (0UL)
  #define MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_Msk (0x1UL << MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_Pos) /*!< Bit mask of
                                                                            EVENTS_MEMACCERR field.*/
  #define MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_Min (0x0UL)
  #define MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_Max (0x1UL)
  #define MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_NotGenerated (0x0UL)
  #define MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_Generated (0x1UL)


/* MPC_INTEN: Enable or disable interrupt */
  #define MPC_INTEN_ResetValue (0x00000000UL)

/* MEMACCERR @Bit 0 : Enable or disable interrupt for event MEMACCERR */
  #define MPC_INTEN_MEMACCERR_Pos (0UL)
  #define MPC_INTEN_MEMACCERR_Msk (0x1UL << MPC_INTEN_MEMACCERR_Pos)
  #define MPC_INTEN_MEMACCERR_Min (0x0UL)
  #define MPC_INTEN_MEMACCERR_Max (0x1UL)
  #define MPC_INTEN_MEMACCERR_Disabled (0x0UL)
  #define MPC_INTEN_MEMACCERR_Enabled (0x1UL)


/* MPC_INTENSET: Enable interrupt */
  #define MPC_INTENSET_ResetValue (0x00000000UL)

/* MEMACCERR @Bit 0 : Write '1' to enable interrupt for event MEMACCERR */
  #define MPC_INTENSET_MEMACCERR_Pos (0UL)
  #define MPC_INTENSET_MEMACCERR_Msk (0x1UL << MPC_INTENSET_MEMACCERR_Pos)
  #define MPC_INTENSET_MEMACCERR_Min (0x0UL)
  #define MPC_INTENSET_MEMACCERR_Max (0x1UL)
  #define MPC_INTENSET_MEMACCERR_Set (0x1UL)
  #define MPC_INTENSET_MEMACCERR_Disabled (0x0UL)
  #define MPC_INTENSET_MEMACCERR_Enabled (0x1UL)


/* MPC_INTENCLR: Disable interrupt */
  #define MPC_INTENCLR_ResetValue (0x00000000UL)

/* MEMACCERR @Bit 0 : Write '1' to disable interrupt for event MEMACCERR */
  #define MPC_INTENCLR_MEMACCERR_Pos (0UL)
  #define MPC_INTENCLR_MEMACCERR_Msk (0x1UL << MPC_INTENCLR_MEMACCERR_Pos)
  #define MPC_INTENCLR_MEMACCERR_Min (0x0UL)
  #define MPC_INTENCLR_MEMACCERR_Max (0x1UL)
  #define MPC_INTENCLR_MEMACCERR_Clear (0x1UL)
  #define MPC_INTENCLR_MEMACCERR_Disabled (0x0UL)
  #define MPC_INTENCLR_MEMACCERR_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                        OSCILLATORS                                        ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ============================================ Struct OSCILLATORS_XOSC32M_CONFIG ============================================ */
/**
  * @brief CONFIG [OSCILLATORS_XOSC32M_CONFIG] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  INTCAP;                            /*!< (@ 0x00000008) Crystal load capacitor as seen by the crystal across
                                                                         its terminals, including pin capacitance but excluding
                                                                         PCB stray capacitance.*/
} NRF_OSCILLATORS_XOSC32M_CONFIG_Type;

/* OSCILLATORS_XOSC32M_CONFIG_INTCAP: Crystal load capacitor as seen by the crystal across its terminals, including pin
                                       capacitance but excluding PCB stray capacitance. */

  #define OSCILLATORS_XOSC32M_CONFIG_INTCAP_ResetValue (0x00000020UL)

/* VAL @Bits 0..5 : Crystal load capacitor value */
  #define OSCILLATORS_XOSC32M_CONFIG_INTCAP_VAL_Pos (0UL)
  #define OSCILLATORS_XOSC32M_CONFIG_INTCAP_VAL_Msk (0x3FUL << OSCILLATORS_XOSC32M_CONFIG_INTCAP_VAL_Pos) /*!< Bit mask of VAL
                                                                            field.*/



/* =============================================== Struct OSCILLATORS_XOSC32M ================================================ */
/**
  * @brief XOSC32M [OSCILLATORS_XOSC32M] 32 MHz oscillator control
  */
typedef struct {
  __IM  uint32_t  RESERVED[5];
  __IOM NRF_OSCILLATORS_XOSC32M_CONFIG_Type CONFIG;
} NRF_OSCILLATORS_XOSC32M_Type;


/* ================================================= Struct OSCILLATORS_PLL ================================================== */
/**
  * @brief PLL [OSCILLATORS_PLL] Oscillator control
  */
typedef struct {
  __IOM uint32_t  FREQ;
  __IM  uint32_t  CURRENTFREQ;
} NRF_OSCILLATORS_PLL_Type;

/* OSCILLATORS_PLL_FREQ: Set speed of MCU power domain, including CPU */
  #define OSCILLATORS_PLL_FREQ_ResetValue (0x00000003UL)

/* FREQ @Bits 0..1 : Select CPU speed */
  #define OSCILLATORS_PLL_FREQ_FREQ_Pos (0UL)
  #define OSCILLATORS_PLL_FREQ_FREQ_Msk (0x3UL << OSCILLATORS_PLL_FREQ_FREQ_Pos)
  #define OSCILLATORS_PLL_FREQ_FREQ_Min (0x1UL)
  #define OSCILLATORS_PLL_FREQ_FREQ_Max (0x3UL)
  #define OSCILLATORS_PLL_FREQ_FREQ_CK128M (0x1UL)
  #define OSCILLATORS_PLL_FREQ_FREQ_CK64M (0x3UL)


/* OSCILLATORS_PLL_CURRENTFREQ: Current speed of MCU power domain, including CPU */
  #define OSCILLATORS_PLL_CURRENTFREQ_ResetValue (0x00000003UL)

/* CURRENTFREQ @Bits 0..1 : Active CPU speed */
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Pos (0UL)
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Msk (0x3UL << OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Pos) /*!< Bit mask of
                                                                            CURRENTFREQ field.*/
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Min (0x1UL)
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Max (0x3UL)
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_CK128M (0x1UL)
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_CK64M (0x3UL)



/* =============================================== Struct OSCILLATORS_XOSC32KI =============================================== */
/**
  * @brief XOSC32KI [OSCILLATORS_XOSC32KI] 32.768 kHz oscillator control
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  INTCAP;
} NRF_OSCILLATORS_XOSC32KI_Type;

/* OSCILLATORS_XOSC32KI_INTCAP: Programmable capacitance of XL1 and XL2 */
  #define OSCILLATORS_XOSC32KI_INTCAP_ResetValue (0x00000017UL)

/* VAL @Bits 0..4 : Crystal load capacitor as seen by the crystal across its terminals, including pin capacitance but excluding
                    PCB stray capacitance. */

  #define OSCILLATORS_XOSC32KI_INTCAP_VAL_Pos (0UL)
  #define OSCILLATORS_XOSC32KI_INTCAP_VAL_Msk (0x1FUL << OSCILLATORS_XOSC32KI_INTCAP_VAL_Pos)


/* =================================================== Struct OSCILLATORS ==================================================== */
/**
  * @brief Oscillator control
  */
  typedef struct {
    __IM uint32_t RESERVED[448];
    __IOM NRF_OSCILLATORS_XOSC32M_Type XOSC32M;
    __IM uint32_t RESERVED1[56];
    __IOM NRF_OSCILLATORS_PLL_Type PLL;
    __IM uint32_t RESERVED2[62];
    __IOM NRF_OSCILLATORS_XOSC32KI_Type XOSC32KI;
  } NRF_OSCILLATORS_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           POWER                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct POWER ======================================================= */
/**
  * @brief Power control
  */
  typedef struct {
    __IM uint32_t RESERVED[12];
    __OM uint32_t TASKS_CONSTLAT;
    __OM uint32_t TASKS_LOWPWR;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t SUBSCRIBE_CONSTLAT;
    __IOM uint32_t SUBSCRIBE_LOWPWR;
    __IM uint32_t RESERVED2[30];
    __IOM uint32_t EVENTS_POFWARN;
    __IOM uint32_t EVENTS_SLEEPENTER;
    __IOM uint32_t EVENTS_SLEEPEXIT;
    __IM uint32_t RESERVED3[30];
    __IOM uint32_t PUBLISH_SLEEPENTER;
    __IOM uint32_t PUBLISH_SLEEPEXIT;
    __IM uint32_t RESERVED4[81];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED5[125];
    __IOM uint32_t GPREGRET[2];
    __IM uint32_t RESERVED6[6];
    __IM uint32_t CONSTLATSTAT;
  } NRF_POWER_Type;

/* POWER_TASKS_CONSTLAT: Enable Constant Latency mode */
  #define POWER_TASKS_CONSTLAT_ResetValue (0x00000000UL)

/* TASKS_CONSTLAT @Bit 0 : Enable Constant Latency mode */
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Pos (0UL)
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Msk (0x1UL << POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Pos) /*!< Bit mask of
                                                                            TASKS_CONSTLAT field.*/
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Min (0x1UL)
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Max (0x1UL)
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Trigger (0x1UL)


/* POWER_TASKS_LOWPWR: Enable Low-power mode (variable latency) */
  #define POWER_TASKS_LOWPWR_ResetValue (0x00000000UL)

/* TASKS_LOWPWR @Bit 0 : Enable Low-power mode (variable latency) */
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Pos (0UL)
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Msk (0x1UL << POWER_TASKS_LOWPWR_TASKS_LOWPWR_Pos) /*!< Bit mask of TASKS_LOWPWR
                                                                            field.*/
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Min (0x1UL)
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Max (0x1UL)
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Trigger (0x1UL)


/* POWER_SUBSCRIBE_CONSTLAT: Subscribe configuration for task CONSTLAT */
  #define POWER_SUBSCRIBE_CONSTLAT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CONSTLAT will subscribe to */
  #define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Pos (0UL)
  #define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Msk (0xFFUL << POWER_SUBSCRIBE_CONSTLAT_CHIDX_Pos)
  #define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Min (0x00UL)
  #define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Pos (31UL)
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Msk (0x1UL << POWER_SUBSCRIBE_CONSTLAT_EN_Pos)
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Min (0x0UL)
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Max (0x1UL)
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Disabled (0x0UL)
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Enabled (0x1UL)


/* POWER_SUBSCRIBE_LOWPWR: Subscribe configuration for task LOWPWR */
  #define POWER_SUBSCRIBE_LOWPWR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task LOWPWR will subscribe to */
  #define POWER_SUBSCRIBE_LOWPWR_CHIDX_Pos (0UL)
  #define POWER_SUBSCRIBE_LOWPWR_CHIDX_Msk (0xFFUL << POWER_SUBSCRIBE_LOWPWR_CHIDX_Pos)
  #define POWER_SUBSCRIBE_LOWPWR_CHIDX_Min (0x00UL)
  #define POWER_SUBSCRIBE_LOWPWR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define POWER_SUBSCRIBE_LOWPWR_EN_Pos (31UL)
  #define POWER_SUBSCRIBE_LOWPWR_EN_Msk (0x1UL << POWER_SUBSCRIBE_LOWPWR_EN_Pos)
  #define POWER_SUBSCRIBE_LOWPWR_EN_Min (0x0UL)
  #define POWER_SUBSCRIBE_LOWPWR_EN_Max (0x1UL)
  #define POWER_SUBSCRIBE_LOWPWR_EN_Disabled (0x0UL)
  #define POWER_SUBSCRIBE_LOWPWR_EN_Enabled (0x1UL)


/* POWER_EVENTS_POFWARN: Power failure warning */
  #define POWER_EVENTS_POFWARN_ResetValue (0x00000000UL)

/* EVENTS_POFWARN @Bit 0 : Power failure warning */
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Pos (0UL)
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Msk (0x1UL << POWER_EVENTS_POFWARN_EVENTS_POFWARN_Pos) /*!< Bit mask of
                                                                            EVENTS_POFWARN field.*/
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Min (0x0UL)
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Max (0x1UL)
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_NotGenerated (0x0UL)
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Generated (0x1UL)


/* POWER_EVENTS_SLEEPENTER: CPU entered WFI/WFE sleep */
  #define POWER_EVENTS_SLEEPENTER_ResetValue (0x00000000UL)

/* EVENTS_SLEEPENTER @Bit 0 : CPU entered WFI/WFE sleep */
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos (0UL)
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Msk (0x1UL << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos) /*!< Bit mask
                                                                            of EVENTS_SLEEPENTER field.*/
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Min (0x0UL)
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Max (0x1UL)
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated (0x0UL)
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Generated (0x1UL)


/* POWER_EVENTS_SLEEPEXIT: CPU exited WFI/WFE sleep */
  #define POWER_EVENTS_SLEEPEXIT_ResetValue (0x00000000UL)

/* EVENTS_SLEEPEXIT @Bit 0 : CPU exited WFI/WFE sleep */
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos (0UL)
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Msk (0x1UL << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos) /*!< Bit mask of
                                                                            EVENTS_SLEEPEXIT field.*/
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Min (0x0UL)
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Max (0x1UL)
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated (0x0UL)
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Generated (0x1UL)


/* POWER_PUBLISH_SLEEPENTER: Publish configuration for event SLEEPENTER */
  #define POWER_PUBLISH_SLEEPENTER_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SLEEPENTER will publish to */
  #define POWER_PUBLISH_SLEEPENTER_CHIDX_Pos (0UL)
  #define POWER_PUBLISH_SLEEPENTER_CHIDX_Msk (0xFFUL << POWER_PUBLISH_SLEEPENTER_CHIDX_Pos)
  #define POWER_PUBLISH_SLEEPENTER_CHIDX_Min (0x00UL)
  #define POWER_PUBLISH_SLEEPENTER_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define POWER_PUBLISH_SLEEPENTER_EN_Pos (31UL)
  #define POWER_PUBLISH_SLEEPENTER_EN_Msk (0x1UL << POWER_PUBLISH_SLEEPENTER_EN_Pos)
  #define POWER_PUBLISH_SLEEPENTER_EN_Min (0x0UL)
  #define POWER_PUBLISH_SLEEPENTER_EN_Max (0x1UL)
  #define POWER_PUBLISH_SLEEPENTER_EN_Disabled (0x0UL)
  #define POWER_PUBLISH_SLEEPENTER_EN_Enabled (0x1UL)


/* POWER_PUBLISH_SLEEPEXIT: Publish configuration for event SLEEPEXIT */
  #define POWER_PUBLISH_SLEEPEXIT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SLEEPEXIT will publish to */
  #define POWER_PUBLISH_SLEEPEXIT_CHIDX_Pos (0UL)
  #define POWER_PUBLISH_SLEEPEXIT_CHIDX_Msk (0xFFUL << POWER_PUBLISH_SLEEPEXIT_CHIDX_Pos)
  #define POWER_PUBLISH_SLEEPEXIT_CHIDX_Min (0x00UL)
  #define POWER_PUBLISH_SLEEPEXIT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define POWER_PUBLISH_SLEEPEXIT_EN_Pos (31UL)
  #define POWER_PUBLISH_SLEEPEXIT_EN_Msk (0x1UL << POWER_PUBLISH_SLEEPEXIT_EN_Pos)
  #define POWER_PUBLISH_SLEEPEXIT_EN_Min (0x0UL)
  #define POWER_PUBLISH_SLEEPEXIT_EN_Max (0x1UL)
  #define POWER_PUBLISH_SLEEPEXIT_EN_Disabled (0x0UL)
  #define POWER_PUBLISH_SLEEPEXIT_EN_Enabled (0x1UL)


/* POWER_INTEN: Enable or disable interrupt */
  #define POWER_INTEN_ResetValue (0x00000000UL)

/* POFWARN @Bit 12 : Enable or disable interrupt for event POFWARN */
  #define POWER_INTEN_POFWARN_Pos (12UL)
  #define POWER_INTEN_POFWARN_Msk (0x1UL << POWER_INTEN_POFWARN_Pos)
  #define POWER_INTEN_POFWARN_Min (0x0UL)
  #define POWER_INTEN_POFWARN_Max (0x1UL)
  #define POWER_INTEN_POFWARN_Disabled (0x0UL)
  #define POWER_INTEN_POFWARN_Enabled (0x1UL)

/* SLEEPENTER @Bit 13 : Enable or disable interrupt for event SLEEPENTER */
  #define POWER_INTEN_SLEEPENTER_Pos (13UL)
  #define POWER_INTEN_SLEEPENTER_Msk (0x1UL << POWER_INTEN_SLEEPENTER_Pos)
  #define POWER_INTEN_SLEEPENTER_Min (0x0UL)
  #define POWER_INTEN_SLEEPENTER_Max (0x1UL)
  #define POWER_INTEN_SLEEPENTER_Disabled (0x0UL)
  #define POWER_INTEN_SLEEPENTER_Enabled (0x1UL)

/* SLEEPEXIT @Bit 14 : Enable or disable interrupt for event SLEEPEXIT */
  #define POWER_INTEN_SLEEPEXIT_Pos (14UL)
  #define POWER_INTEN_SLEEPEXIT_Msk (0x1UL << POWER_INTEN_SLEEPEXIT_Pos)
  #define POWER_INTEN_SLEEPEXIT_Min (0x0UL)
  #define POWER_INTEN_SLEEPEXIT_Max (0x1UL)
  #define POWER_INTEN_SLEEPEXIT_Disabled (0x0UL)
  #define POWER_INTEN_SLEEPEXIT_Enabled (0x1UL)


/* POWER_INTENSET: Enable interrupt */
  #define POWER_INTENSET_ResetValue (0x00000000UL)

/* POFWARN @Bit 12 : Write '1' to enable interrupt for event POFWARN */
  #define POWER_INTENSET_POFWARN_Pos (12UL)
  #define POWER_INTENSET_POFWARN_Msk (0x1UL << POWER_INTENSET_POFWARN_Pos)
  #define POWER_INTENSET_POFWARN_Min (0x0UL)
  #define POWER_INTENSET_POFWARN_Max (0x1UL)
  #define POWER_INTENSET_POFWARN_Set (0x1UL)
  #define POWER_INTENSET_POFWARN_Disabled (0x0UL)
  #define POWER_INTENSET_POFWARN_Enabled (0x1UL)

/* SLEEPENTER @Bit 13 : Write '1' to enable interrupt for event SLEEPENTER */
  #define POWER_INTENSET_SLEEPENTER_Pos (13UL)
  #define POWER_INTENSET_SLEEPENTER_Msk (0x1UL << POWER_INTENSET_SLEEPENTER_Pos)
  #define POWER_INTENSET_SLEEPENTER_Min (0x0UL)
  #define POWER_INTENSET_SLEEPENTER_Max (0x1UL)
  #define POWER_INTENSET_SLEEPENTER_Set (0x1UL)
  #define POWER_INTENSET_SLEEPENTER_Disabled (0x0UL)
  #define POWER_INTENSET_SLEEPENTER_Enabled (0x1UL)

/* SLEEPEXIT @Bit 14 : Write '1' to enable interrupt for event SLEEPEXIT */
  #define POWER_INTENSET_SLEEPEXIT_Pos (14UL)
  #define POWER_INTENSET_SLEEPEXIT_Msk (0x1UL << POWER_INTENSET_SLEEPEXIT_Pos)
  #define POWER_INTENSET_SLEEPEXIT_Min (0x0UL)
  #define POWER_INTENSET_SLEEPEXIT_Max (0x1UL)
  #define POWER_INTENSET_SLEEPEXIT_Set (0x1UL)
  #define POWER_INTENSET_SLEEPEXIT_Disabled (0x0UL)
  #define POWER_INTENSET_SLEEPEXIT_Enabled (0x1UL)


/* POWER_INTENCLR: Disable interrupt */
  #define POWER_INTENCLR_ResetValue (0x00000000UL)

/* POFWARN @Bit 12 : Write '1' to disable interrupt for event POFWARN */
  #define POWER_INTENCLR_POFWARN_Pos (12UL)
  #define POWER_INTENCLR_POFWARN_Msk (0x1UL << POWER_INTENCLR_POFWARN_Pos)
  #define POWER_INTENCLR_POFWARN_Min (0x0UL)
  #define POWER_INTENCLR_POFWARN_Max (0x1UL)
  #define POWER_INTENCLR_POFWARN_Clear (0x1UL)
  #define POWER_INTENCLR_POFWARN_Disabled (0x0UL)
  #define POWER_INTENCLR_POFWARN_Enabled (0x1UL)

/* SLEEPENTER @Bit 13 : Write '1' to disable interrupt for event SLEEPENTER */
  #define POWER_INTENCLR_SLEEPENTER_Pos (13UL)
  #define POWER_INTENCLR_SLEEPENTER_Msk (0x1UL << POWER_INTENCLR_SLEEPENTER_Pos)
  #define POWER_INTENCLR_SLEEPENTER_Min (0x0UL)
  #define POWER_INTENCLR_SLEEPENTER_Max (0x1UL)
  #define POWER_INTENCLR_SLEEPENTER_Clear (0x1UL)
  #define POWER_INTENCLR_SLEEPENTER_Disabled (0x0UL)
  #define POWER_INTENCLR_SLEEPENTER_Enabled (0x1UL)

/* SLEEPEXIT @Bit 14 : Write '1' to disable interrupt for event SLEEPEXIT */
  #define POWER_INTENCLR_SLEEPEXIT_Pos (14UL)
  #define POWER_INTENCLR_SLEEPEXIT_Msk (0x1UL << POWER_INTENCLR_SLEEPEXIT_Pos)
  #define POWER_INTENCLR_SLEEPEXIT_Min (0x0UL)
  #define POWER_INTENCLR_SLEEPEXIT_Max (0x1UL)
  #define POWER_INTENCLR_SLEEPEXIT_Clear (0x1UL)
  #define POWER_INTENCLR_SLEEPEXIT_Disabled (0x0UL)
  #define POWER_INTENCLR_SLEEPEXIT_Enabled (0x1UL)


/* POWER_GPREGRET: General purpose retention register */
  #define POWER_GPREGRET_MaxCount (2UL)
  #define POWER_GPREGRET_MaxIndex (1UL)
  #define POWER_GPREGRET_MinIndex (0UL)
  #define POWER_GPREGRET_ResetValue (0x00000000UL)

/* GPREGRET @Bits 0..7 : General purpose retention register */
  #define POWER_GPREGRET_GPREGRET_Pos (0UL)
  #define POWER_GPREGRET_GPREGRET_Msk (0xFFUL << POWER_GPREGRET_GPREGRET_Pos)


/* POWER_CONSTLATSTAT: Status of constant latency */
  #define POWER_CONSTLATSTAT_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : Status */
  #define POWER_CONSTLATSTAT_STATUS_Pos (0UL)
  #define POWER_CONSTLATSTAT_STATUS_Msk (0x1UL << POWER_CONSTLATSTAT_STATUS_Pos)
  #define POWER_CONSTLATSTAT_STATUS_Min (0x0UL)
  #define POWER_CONSTLATSTAT_STATUS_Max (0x1UL)
  #define POWER_CONSTLATSTAT_STATUS_Disable (0x0UL)
  #define POWER_CONSTLATSTAT_STATUS_Enable (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           PPIB                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct PPIB_OVERFLOW =================================================== */
/**
  * @brief OVERFLOW [PPIB_OVERFLOW] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SEND;                              /*!< (@ 0x00000000) The task overflow for SEND tasks using SUBSCRIBE_SEND.
                                                                         Write 0 to clear.*/
} NRF_PPIB_OVERFLOW_Type;

/* PPIB_OVERFLOW_SEND: The task overflow for SEND tasks using SUBSCRIBE_SEND. Write 0 to clear. */
  #define PPIB_OVERFLOW_SEND_ResetValue (0x00000000UL)

/* SEND0 @Bit 0 : The status for tasks overflow at SUBSCRIBE_SEND[0]. */
  #define PPIB_OVERFLOW_SEND_SEND0_Pos (0UL)
  #define PPIB_OVERFLOW_SEND_SEND0_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND0_Pos)
  #define PPIB_OVERFLOW_SEND_SEND0_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND0_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND0_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND0_NoOverflow (0x0UL)

/* SEND1 @Bit 1 : The status for tasks overflow at SUBSCRIBE_SEND[1]. */
  #define PPIB_OVERFLOW_SEND_SEND1_Pos (1UL)
  #define PPIB_OVERFLOW_SEND_SEND1_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND1_Pos)
  #define PPIB_OVERFLOW_SEND_SEND1_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND1_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND1_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND1_NoOverflow (0x0UL)

/* SEND2 @Bit 2 : The status for tasks overflow at SUBSCRIBE_SEND[2]. */
  #define PPIB_OVERFLOW_SEND_SEND2_Pos (2UL)
  #define PPIB_OVERFLOW_SEND_SEND2_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND2_Pos)
  #define PPIB_OVERFLOW_SEND_SEND2_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND2_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND2_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND2_NoOverflow (0x0UL)

/* SEND3 @Bit 3 : The status for tasks overflow at SUBSCRIBE_SEND[3]. */
  #define PPIB_OVERFLOW_SEND_SEND3_Pos (3UL)
  #define PPIB_OVERFLOW_SEND_SEND3_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND3_Pos)
  #define PPIB_OVERFLOW_SEND_SEND3_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND3_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND3_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND3_NoOverflow (0x0UL)

/* SEND4 @Bit 4 : The status for tasks overflow at SUBSCRIBE_SEND[4]. */
  #define PPIB_OVERFLOW_SEND_SEND4_Pos (4UL)
  #define PPIB_OVERFLOW_SEND_SEND4_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND4_Pos)
  #define PPIB_OVERFLOW_SEND_SEND4_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND4_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND4_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND4_NoOverflow (0x0UL)

/* SEND5 @Bit 5 : The status for tasks overflow at SUBSCRIBE_SEND[5]. */
  #define PPIB_OVERFLOW_SEND_SEND5_Pos (5UL)
  #define PPIB_OVERFLOW_SEND_SEND5_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND5_Pos)
  #define PPIB_OVERFLOW_SEND_SEND5_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND5_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND5_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND5_NoOverflow (0x0UL)

/* SEND6 @Bit 6 : The status for tasks overflow at SUBSCRIBE_SEND[6]. */
  #define PPIB_OVERFLOW_SEND_SEND6_Pos (6UL)
  #define PPIB_OVERFLOW_SEND_SEND6_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND6_Pos)
  #define PPIB_OVERFLOW_SEND_SEND6_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND6_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND6_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND6_NoOverflow (0x0UL)

/* SEND7 @Bit 7 : The status for tasks overflow at SUBSCRIBE_SEND[7]. */
  #define PPIB_OVERFLOW_SEND_SEND7_Pos (7UL)
  #define PPIB_OVERFLOW_SEND_SEND7_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND7_Pos)
  #define PPIB_OVERFLOW_SEND_SEND7_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND7_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND7_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND7_NoOverflow (0x0UL)

/* SEND8 @Bit 8 : The status for tasks overflow at SUBSCRIBE_SEND[8]. */
  #define PPIB_OVERFLOW_SEND_SEND8_Pos (8UL)
  #define PPIB_OVERFLOW_SEND_SEND8_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND8_Pos)
  #define PPIB_OVERFLOW_SEND_SEND8_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND8_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND8_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND8_NoOverflow (0x0UL)

/* SEND9 @Bit 9 : The status for tasks overflow at SUBSCRIBE_SEND[9]. */
  #define PPIB_OVERFLOW_SEND_SEND9_Pos (9UL)
  #define PPIB_OVERFLOW_SEND_SEND9_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND9_Pos)
  #define PPIB_OVERFLOW_SEND_SEND9_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND9_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND9_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND9_NoOverflow (0x0UL)

/* SEND10 @Bit 10 : The status for tasks overflow at SUBSCRIBE_SEND[10]. */
  #define PPIB_OVERFLOW_SEND_SEND10_Pos (10UL)
  #define PPIB_OVERFLOW_SEND_SEND10_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND10_Pos)
  #define PPIB_OVERFLOW_SEND_SEND10_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND10_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND10_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND10_NoOverflow (0x0UL)

/* SEND11 @Bit 11 : The status for tasks overflow at SUBSCRIBE_SEND[11]. */
  #define PPIB_OVERFLOW_SEND_SEND11_Pos (11UL)
  #define PPIB_OVERFLOW_SEND_SEND11_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND11_Pos)
  #define PPIB_OVERFLOW_SEND_SEND11_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND11_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND11_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND11_NoOverflow (0x0UL)

/* SEND12 @Bit 12 : The status for tasks overflow at SUBSCRIBE_SEND[12]. */
  #define PPIB_OVERFLOW_SEND_SEND12_Pos (12UL)
  #define PPIB_OVERFLOW_SEND_SEND12_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND12_Pos)
  #define PPIB_OVERFLOW_SEND_SEND12_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND12_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND12_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND12_NoOverflow (0x0UL)

/* SEND13 @Bit 13 : The status for tasks overflow at SUBSCRIBE_SEND[13]. */
  #define PPIB_OVERFLOW_SEND_SEND13_Pos (13UL)
  #define PPIB_OVERFLOW_SEND_SEND13_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND13_Pos)
  #define PPIB_OVERFLOW_SEND_SEND13_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND13_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND13_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND13_NoOverflow (0x0UL)

/* SEND14 @Bit 14 : The status for tasks overflow at SUBSCRIBE_SEND[14]. */
  #define PPIB_OVERFLOW_SEND_SEND14_Pos (14UL)
  #define PPIB_OVERFLOW_SEND_SEND14_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND14_Pos)
  #define PPIB_OVERFLOW_SEND_SEND14_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND14_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND14_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND14_NoOverflow (0x0UL)

/* SEND15 @Bit 15 : The status for tasks overflow at SUBSCRIBE_SEND[15]. */
  #define PPIB_OVERFLOW_SEND_SEND15_Pos (15UL)
  #define PPIB_OVERFLOW_SEND_SEND15_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND15_Pos)
  #define PPIB_OVERFLOW_SEND_SEND15_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND15_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND15_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND15_NoOverflow (0x0UL)

/* SEND16 @Bit 16 : The status for tasks overflow at SUBSCRIBE_SEND[16]. */
  #define PPIB_OVERFLOW_SEND_SEND16_Pos (16UL)
  #define PPIB_OVERFLOW_SEND_SEND16_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND16_Pos)
  #define PPIB_OVERFLOW_SEND_SEND16_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND16_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND16_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND16_NoOverflow (0x0UL)

/* SEND17 @Bit 17 : The status for tasks overflow at SUBSCRIBE_SEND[17]. */
  #define PPIB_OVERFLOW_SEND_SEND17_Pos (17UL)
  #define PPIB_OVERFLOW_SEND_SEND17_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND17_Pos)
  #define PPIB_OVERFLOW_SEND_SEND17_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND17_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND17_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND17_NoOverflow (0x0UL)

/* SEND18 @Bit 18 : The status for tasks overflow at SUBSCRIBE_SEND[18]. */
  #define PPIB_OVERFLOW_SEND_SEND18_Pos (18UL)
  #define PPIB_OVERFLOW_SEND_SEND18_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND18_Pos)
  #define PPIB_OVERFLOW_SEND_SEND18_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND18_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND18_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND18_NoOverflow (0x0UL)

/* SEND19 @Bit 19 : The status for tasks overflow at SUBSCRIBE_SEND[19]. */
  #define PPIB_OVERFLOW_SEND_SEND19_Pos (19UL)
  #define PPIB_OVERFLOW_SEND_SEND19_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND19_Pos)
  #define PPIB_OVERFLOW_SEND_SEND19_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND19_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND19_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND19_NoOverflow (0x0UL)

/* SEND20 @Bit 20 : The status for tasks overflow at SUBSCRIBE_SEND[20]. */
  #define PPIB_OVERFLOW_SEND_SEND20_Pos (20UL)
  #define PPIB_OVERFLOW_SEND_SEND20_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND20_Pos)
  #define PPIB_OVERFLOW_SEND_SEND20_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND20_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND20_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND20_NoOverflow (0x0UL)

/* SEND21 @Bit 21 : The status for tasks overflow at SUBSCRIBE_SEND[21]. */
  #define PPIB_OVERFLOW_SEND_SEND21_Pos (21UL)
  #define PPIB_OVERFLOW_SEND_SEND21_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND21_Pos)
  #define PPIB_OVERFLOW_SEND_SEND21_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND21_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND21_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND21_NoOverflow (0x0UL)

/* SEND22 @Bit 22 : The status for tasks overflow at SUBSCRIBE_SEND[22]. */
  #define PPIB_OVERFLOW_SEND_SEND22_Pos (22UL)
  #define PPIB_OVERFLOW_SEND_SEND22_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND22_Pos)
  #define PPIB_OVERFLOW_SEND_SEND22_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND22_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND22_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND22_NoOverflow (0x0UL)

/* SEND23 @Bit 23 : The status for tasks overflow at SUBSCRIBE_SEND[23]. */
  #define PPIB_OVERFLOW_SEND_SEND23_Pos (23UL)
  #define PPIB_OVERFLOW_SEND_SEND23_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND23_Pos)
  #define PPIB_OVERFLOW_SEND_SEND23_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND23_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND23_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND23_NoOverflow (0x0UL)

/* SEND24 @Bit 24 : The status for tasks overflow at SUBSCRIBE_SEND[24]. */
  #define PPIB_OVERFLOW_SEND_SEND24_Pos (24UL)
  #define PPIB_OVERFLOW_SEND_SEND24_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND24_Pos)
  #define PPIB_OVERFLOW_SEND_SEND24_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND24_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND24_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND24_NoOverflow (0x0UL)

/* SEND25 @Bit 25 : The status for tasks overflow at SUBSCRIBE_SEND[25]. */
  #define PPIB_OVERFLOW_SEND_SEND25_Pos (25UL)
  #define PPIB_OVERFLOW_SEND_SEND25_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND25_Pos)
  #define PPIB_OVERFLOW_SEND_SEND25_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND25_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND25_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND25_NoOverflow (0x0UL)

/* SEND26 @Bit 26 : The status for tasks overflow at SUBSCRIBE_SEND[26]. */
  #define PPIB_OVERFLOW_SEND_SEND26_Pos (26UL)
  #define PPIB_OVERFLOW_SEND_SEND26_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND26_Pos)
  #define PPIB_OVERFLOW_SEND_SEND26_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND26_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND26_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND26_NoOverflow (0x0UL)

/* SEND27 @Bit 27 : The status for tasks overflow at SUBSCRIBE_SEND[27]. */
  #define PPIB_OVERFLOW_SEND_SEND27_Pos (27UL)
  #define PPIB_OVERFLOW_SEND_SEND27_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND27_Pos)
  #define PPIB_OVERFLOW_SEND_SEND27_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND27_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND27_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND27_NoOverflow (0x0UL)

/* SEND28 @Bit 28 : The status for tasks overflow at SUBSCRIBE_SEND[28]. */
  #define PPIB_OVERFLOW_SEND_SEND28_Pos (28UL)
  #define PPIB_OVERFLOW_SEND_SEND28_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND28_Pos)
  #define PPIB_OVERFLOW_SEND_SEND28_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND28_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND28_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND28_NoOverflow (0x0UL)

/* SEND29 @Bit 29 : The status for tasks overflow at SUBSCRIBE_SEND[29]. */
  #define PPIB_OVERFLOW_SEND_SEND29_Pos (29UL)
  #define PPIB_OVERFLOW_SEND_SEND29_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND29_Pos)
  #define PPIB_OVERFLOW_SEND_SEND29_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND29_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND29_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND29_NoOverflow (0x0UL)

/* SEND30 @Bit 30 : The status for tasks overflow at SUBSCRIBE_SEND[30]. */
  #define PPIB_OVERFLOW_SEND_SEND30_Pos (30UL)
  #define PPIB_OVERFLOW_SEND_SEND30_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND30_Pos)
  #define PPIB_OVERFLOW_SEND_SEND30_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND30_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND30_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND30_NoOverflow (0x0UL)

/* SEND31 @Bit 31 : The status for tasks overflow at SUBSCRIBE_SEND[31]. */
  #define PPIB_OVERFLOW_SEND_SEND31_Pos (31UL)
  #define PPIB_OVERFLOW_SEND_SEND31_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND31_Pos)
  #define PPIB_OVERFLOW_SEND_SEND31_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND31_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND31_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND31_NoOverflow (0x0UL)


/* ======================================================= Struct PPIB ======================================================= */
/**
  * @brief PPIB APB registers
  */
  typedef struct {
    __OM uint32_t TASKS_SEND[32];                    /*!< (@ 0x00000000) This task is unused, but the PPIB provides the
                                                                         SUBSCRIBE task to connect SEND [n] task.*/
    __IOM uint32_t SUBSCRIBE_SEND[32];
    __IOM uint32_t EVENTS_RECEIVE[32];               /*!< (@ 0x00000100) This event is unused, but the PPIB provides the PUBLISH
                                                                         event to connect RECEIVE [n] event.*/
    __IOM uint32_t PUBLISH_RECEIVE[32];
    __IM uint32_t RESERVED[128];
    __IOM NRF_PPIB_OVERFLOW_Type OVERFLOW;
  } NRF_PPIB_Type;

/* PPIB_TASKS_SEND: This task is unused, but the PPIB provides the SUBSCRIBE task to connect SEND [n] task. */
  #define PPIB_TASKS_SEND_MaxCount (32UL)
  #define PPIB_TASKS_SEND_MaxIndex (31UL)
  #define PPIB_TASKS_SEND_MinIndex (0UL)
  #define PPIB_TASKS_SEND_ResetValue (0x00000000UL)

/* TASKS_SEND @Bit 0 : This task is unused, but the PPIB provides the SUBSCRIBE task to connect SEND [n] task. */
  #define PPIB_TASKS_SEND_TASKS_SEND_Pos (0UL)
  #define PPIB_TASKS_SEND_TASKS_SEND_Msk (0x1UL << PPIB_TASKS_SEND_TASKS_SEND_Pos)
  #define PPIB_TASKS_SEND_TASKS_SEND_Min (0x1UL)
  #define PPIB_TASKS_SEND_TASKS_SEND_Max (0x1UL)
  #define PPIB_TASKS_SEND_TASKS_SEND_Trigger (0x1UL)


/* PPIB_SUBSCRIBE_SEND: Subscribe configuration for task SEND[n] */
  #define PPIB_SUBSCRIBE_SEND_MaxCount (32UL)
  #define PPIB_SUBSCRIBE_SEND_MaxIndex (31UL)
  #define PPIB_SUBSCRIBE_SEND_MinIndex (0UL)
  #define PPIB_SUBSCRIBE_SEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SEND[n] will subscribe to */
  #define PPIB_SUBSCRIBE_SEND_CHIDX_Pos (0UL)
  #define PPIB_SUBSCRIBE_SEND_CHIDX_Msk (0xFFUL << PPIB_SUBSCRIBE_SEND_CHIDX_Pos)
  #define PPIB_SUBSCRIBE_SEND_CHIDX_Min (0x00UL)
  #define PPIB_SUBSCRIBE_SEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PPIB_SUBSCRIBE_SEND_EN_Pos (31UL)
  #define PPIB_SUBSCRIBE_SEND_EN_Msk (0x1UL << PPIB_SUBSCRIBE_SEND_EN_Pos)
  #define PPIB_SUBSCRIBE_SEND_EN_Min (0x0UL)
  #define PPIB_SUBSCRIBE_SEND_EN_Max (0x1UL)
  #define PPIB_SUBSCRIBE_SEND_EN_Disabled (0x0UL)
  #define PPIB_SUBSCRIBE_SEND_EN_Enabled (0x1UL)


/* PPIB_EVENTS_RECEIVE: This event is unused, but the PPIB provides the PUBLISH event to connect RECEIVE [n] event. */
  #define PPIB_EVENTS_RECEIVE_MaxCount (32UL)
  #define PPIB_EVENTS_RECEIVE_MaxIndex (31UL)
  #define PPIB_EVENTS_RECEIVE_MinIndex (0UL)
  #define PPIB_EVENTS_RECEIVE_ResetValue (0x00000000UL)

/* EVENTS_RECEIVE @Bit 0 : This event is unused, but the PPIB provides the PUBLISH event to connect RECEIVE [n] event. */
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Pos (0UL)
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Msk (0x1UL << PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Pos) /*!< Bit mask of
                                                                            EVENTS_RECEIVE field.*/
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Min (0x0UL)
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Max (0x1UL)
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_NotGenerated (0x0UL)
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Generated (0x1UL)


/* PPIB_PUBLISH_RECEIVE: Publish configuration for event RECEIVE[n] */
  #define PPIB_PUBLISH_RECEIVE_MaxCount (32UL)
  #define PPIB_PUBLISH_RECEIVE_MaxIndex (31UL)
  #define PPIB_PUBLISH_RECEIVE_MinIndex (0UL)
  #define PPIB_PUBLISH_RECEIVE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RECEIVE[n] will publish to */
  #define PPIB_PUBLISH_RECEIVE_CHIDX_Pos (0UL)
  #define PPIB_PUBLISH_RECEIVE_CHIDX_Msk (0xFFUL << PPIB_PUBLISH_RECEIVE_CHIDX_Pos)
  #define PPIB_PUBLISH_RECEIVE_CHIDX_Min (0x00UL)
  #define PPIB_PUBLISH_RECEIVE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PPIB_PUBLISH_RECEIVE_EN_Pos (31UL)
  #define PPIB_PUBLISH_RECEIVE_EN_Msk (0x1UL << PPIB_PUBLISH_RECEIVE_EN_Pos)
  #define PPIB_PUBLISH_RECEIVE_EN_Min (0x0UL)
  #define PPIB_PUBLISH_RECEIVE_EN_Max (0x1UL)
  #define PPIB_PUBLISH_RECEIVE_EN_Disabled (0x0UL)
  #define PPIB_PUBLISH_RECEIVE_EN_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           RADIO                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ==================================================== Struct RADIO_PSEL ==================================================== */
/**
  * @brief PSEL [RADIO_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DFEGPIO[8];
} NRF_RADIO_PSEL_Type;

/* RADIO_PSEL_DFEGPIO: Pin select for DFE pin n */
  #define RADIO_PSEL_DFEGPIO_MaxCount (8UL)
  #define RADIO_PSEL_DFEGPIO_MaxIndex (7UL)
  #define RADIO_PSEL_DFEGPIO_MinIndex (0UL)
  #define RADIO_PSEL_DFEGPIO_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define RADIO_PSEL_DFEGPIO_PIN_Pos (0UL)
  #define RADIO_PSEL_DFEGPIO_PIN_Msk (0x1FUL << RADIO_PSEL_DFEGPIO_PIN_Pos)
  #define RADIO_PSEL_DFEGPIO_PIN_Min (0x00UL)
  #define RADIO_PSEL_DFEGPIO_PIN_Max (0x1FUL)

/* PORT @Bits 5..8 : Port number */
  #define RADIO_PSEL_DFEGPIO_PORT_Pos (5UL)
  #define RADIO_PSEL_DFEGPIO_PORT_Msk (0xFUL << RADIO_PSEL_DFEGPIO_PORT_Pos)
  #define RADIO_PSEL_DFEGPIO_PORT_Min (0x0UL)
  #define RADIO_PSEL_DFEGPIO_PORT_Max (0x1UL)

/* CONNECT @Bit 31 : Connection */
  #define RADIO_PSEL_DFEGPIO_CONNECT_Pos (31UL)
  #define RADIO_PSEL_DFEGPIO_CONNECT_Msk (0x1UL << RADIO_PSEL_DFEGPIO_CONNECT_Pos)
  #define RADIO_PSEL_DFEGPIO_CONNECT_Min (0x0UL)
  #define RADIO_PSEL_DFEGPIO_CONNECT_Max (0x1UL)
  #define RADIO_PSEL_DFEGPIO_CONNECT_Disconnected (0x1UL)
  #define RADIO_PSEL_DFEGPIO_CONNECT_Connected (0x0UL)



/* ================================================= Struct RADIO_DFEPACKET ================================================== */
/**
  * @brief DFEPACKET [RADIO_DFEPACKET] DFE packet EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;
  __IM  uint32_t  CURRENTAMOUNT;
} NRF_RADIO_DFEPACKET_Type;

/* RADIO_DFEPACKET_PTR: Data pointer */
  #define RADIO_DFEPACKET_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Data pointer */
  #define RADIO_DFEPACKET_PTR_PTR_Pos (0UL)
  #define RADIO_DFEPACKET_PTR_PTR_Msk (0xFFFFFFFFUL << RADIO_DFEPACKET_PTR_PTR_Pos)


/* RADIO_DFEPACKET_MAXCNT: Maximum number of bytes to transfer */
  #define RADIO_DFEPACKET_MAXCNT_ResetValue (0x00004000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes to transfer */
  #define RADIO_DFEPACKET_MAXCNT_MAXCNT_Pos (0UL)
  #define RADIO_DFEPACKET_MAXCNT_MAXCNT_Msk (0xFFFFUL << RADIO_DFEPACKET_MAXCNT_MAXCNT_Pos)


/* RADIO_DFEPACKET_AMOUNT: Number of bytes transferred in the last transaction */
  #define RADIO_DFEPACKET_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction */
  #define RADIO_DFEPACKET_AMOUNT_AMOUNT_Pos (0UL)
  #define RADIO_DFEPACKET_AMOUNT_AMOUNT_Msk (0xFFFFUL << RADIO_DFEPACKET_AMOUNT_AMOUNT_Pos)


/* RADIO_DFEPACKET_CURRENTAMOUNT: Number of bytes transferred in the current transaction */
  #define RADIO_DFEPACKET_CURRENTAMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the current transaction. Continuously updated. */
  #define RADIO_DFEPACKET_CURRENTAMOUNT_AMOUNT_Pos (0UL)
  #define RADIO_DFEPACKET_CURRENTAMOUNT_AMOUNT_Msk (0xFFFFUL << RADIO_DFEPACKET_CURRENTAMOUNT_AMOUNT_Pos) /*!< Bit mask of
                                                                            AMOUNT field.*/



/* ================================================== Struct RADIO_CSTONES =================================================== */
/**
  * @brief CSTONES [RADIO_CSTONES] (unspecified)
  */
typedef struct {
  __IOM uint32_t  MODE;                              /*!< (@ 0x00000000) Selects the mode(s) that are activated on the start
                                                                         signal*/
  __IOM uint32_t  NUMSAMPLES;
  __IOM uint32_t  NEXTFREQUENCY;                     /*!< (@ 0x00000008) The value of FREQUENCY that will be used in the next
                                                                         step*/
  __IOM uint32_t  FFOIN;                             /*!< (@ 0x0000000C) Override value of FFO (Fractional Frequency Offset) if
                                                                         not to be based on the frequency estimate derived from
                                                                         CnAcc (autocorrelation of the scaled input signal)
                                                                         value*/
  __IOM uint32_t  FFOSOURCE;
  __IOM uint32_t  FAEPEER;                           /*!< (@ 0x00000014) FAEPEER (Frequency Actuation Error) of peer if known.
                                                                         Used during Mode 0 steps.*/
  __IOM uint32_t  PHASESHIFT;
  __IOM uint32_t  NUMSAMPLESCOEFF;
  __IM  uint32_t  PCT16;
  __IM  uint32_t  MAGPHASEMEAN;                      /*!< (@ 0x00000024) Mean magnitude and phase of the signal before it is
                                                                         converted to PCT16*/
  __IM  uint32_t  IQRAWMEAN;
  __IM  uint32_t  MAGSTD;
  __IM  uint32_t  CNACC;                             /*!< (@ 0x00000030) Output of the autocorrelation of the accumulated IQ
                                                                         signal*/
  __IM  uint32_t  FFOEST;
  __IOM uint32_t  DOWNSAMPLE;
  __IM  uint32_t  FINETUNENEXT;
  __IM  uint32_t  CFOPHASE;
  __IM  uint32_t  FREQOFFSET;
  __IM  uint32_t  PCT11;                             /*!< (@ 0x00000048) Mean magnitude and mean phase converted to IQ. IQ
                                                                         values limited to [-1024,1023].*/
  __IM  uint32_t  LFAENEXT;                          /*!< (@ 0x0000004C) Quantization error between ADPLL frequency and the
                                                                         desired value of FFO * RF Frequency. Values limited to
                                                                         [-64,63] with units 7.6294 Hz.*/
} NRF_RADIO_CSTONES_Type;

/* RADIO_CSTONES_MODE: Selects the mode(s) that are activated on the start signal */
  #define RADIO_CSTONES_MODE_ResetValue (0x00000003UL)

/* TPM @Bit 0 : Enable or disable TPM */
  #define RADIO_CSTONES_MODE_TPM_Pos (0UL)
  #define RADIO_CSTONES_MODE_TPM_Msk (0x1UL << RADIO_CSTONES_MODE_TPM_Pos)
  #define RADIO_CSTONES_MODE_TPM_Min (0x0UL)
  #define RADIO_CSTONES_MODE_TPM_Max (0x1UL)
  #define RADIO_CSTONES_MODE_TPM_Disabled (0x0UL)
  #define RADIO_CSTONES_MODE_TPM_Enabled (0x1UL)

/* TFM @Bit 1 : Enable or disable TFM */
  #define RADIO_CSTONES_MODE_TFM_Pos (1UL)
  #define RADIO_CSTONES_MODE_TFM_Msk (0x1UL << RADIO_CSTONES_MODE_TFM_Pos)
  #define RADIO_CSTONES_MODE_TFM_Min (0x0UL)
  #define RADIO_CSTONES_MODE_TFM_Max (0x1UL)
  #define RADIO_CSTONES_MODE_TFM_Disabled (0x0UL)
  #define RADIO_CSTONES_MODE_TFM_Enabled (0x1UL)


/* RADIO_CSTONES_NUMSAMPLES: Number of input samples at 2MHz sample rate */
  #define RADIO_CSTONES_NUMSAMPLES_ResetValue (0x000000A0UL)

/* NUMSAMPLES @Bits 0..7 : Maximum value supported is 160 */
  #define RADIO_CSTONES_NUMSAMPLES_NUMSAMPLES_Pos (0UL)
  #define RADIO_CSTONES_NUMSAMPLES_NUMSAMPLES_Msk (0xFFUL << RADIO_CSTONES_NUMSAMPLES_NUMSAMPLES_Pos) /*!< Bit mask of
                                                                            NUMSAMPLES field.*/


/* RADIO_CSTONES_NEXTFREQUENCY: The value of FREQUENCY that will be used in the next step */
  #define RADIO_CSTONES_NEXTFREQUENCY_ResetValue (0x00000000UL)

/* NEXTFREQUENCY @Bits 0..6 : Frequency = 2400 + FREQUENCY (MHz) */
  #define RADIO_CSTONES_NEXTFREQUENCY_NEXTFREQUENCY_Pos (0UL)
  #define RADIO_CSTONES_NEXTFREQUENCY_NEXTFREQUENCY_Msk (0x7FUL << RADIO_CSTONES_NEXTFREQUENCY_NEXTFREQUENCY_Pos) /*!< Bit mask
                                                                            of NEXTFREQUENCY field.*/


/* RADIO_CSTONES_FFOIN: Override value of FFO (Fractional Frequency Offset) if not to be based on the frequency estimate derived
                         from CnAcc (autocorrelation of the scaled input signal) value */

  #define RADIO_CSTONES_FFOIN_ResetValue (0x00000000UL)

/* FFFIN @Bits 0..11 : Units 62.5 ppb. Max range +/-100 ppm plus margin. */
  #define RADIO_CSTONES_FFOIN_FFFIN_Pos (0UL)
  #define RADIO_CSTONES_FFOIN_FFFIN_Msk (0xFFFUL << RADIO_CSTONES_FFOIN_FFFIN_Pos)


/* RADIO_CSTONES_FFOSOURCE: Source of FFO */
  #define RADIO_CSTONES_FFOSOURCE_ResetValue (0x00000001UL)

/* FFOSOURCE @Bit 0 : Use external or internal FFOSOURCE */
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Pos (0UL)
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Msk (0x1UL << RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Pos) /*!< Bit mask of FFOSOURCE
                                                                            field.*/
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Min (0x0UL)
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Max (0x1UL)
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_External (0x0UL)
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Internal (0x1UL)


/* RADIO_CSTONES_FAEPEER: FAEPEER (Frequency Actuation Error) of peer if known. Used during Mode 0 steps. */
  #define RADIO_CSTONES_FAEPEER_ResetValue (0x00000000UL)

/* FAEPEER @Bits 0..7 : Units 31.25 ppb. */
  #define RADIO_CSTONES_FAEPEER_FAEPEER_Pos (0UL)
  #define RADIO_CSTONES_FAEPEER_FAEPEER_Msk (0xFFUL << RADIO_CSTONES_FAEPEER_FAEPEER_Pos)


/* RADIO_CSTONES_PHASESHIFT: Parameter used in TPM, provided by software */
  #define RADIO_CSTONES_PHASESHIFT_ResetValue (0x00000000UL)

/* PHASESHIFT @Bits 0..15 : Phase shift used in TPM calculation */
  #define RADIO_CSTONES_PHASESHIFT_PHASESHIFT_Pos (0UL)
  #define RADIO_CSTONES_PHASESHIFT_PHASESHIFT_Msk (0xFFFFUL << RADIO_CSTONES_PHASESHIFT_PHASESHIFT_Pos) /*!< Bit mask of
                                                                            PHASESHIFT field.*/


/* RADIO_CSTONES_NUMSAMPLESCOEFF: Parameter used in TPM, provided by software */
  #define RADIO_CSTONES_NUMSAMPLESCOEFF_ResetValue (0x0000199AUL)

/* NUMSAMPLESCOEFF @Bits 0..15 : Coefficient 2**16/(numSamples/16) in Q1.15 format (Default numsamples value is 160) */
  #define RADIO_CSTONES_NUMSAMPLESCOEFF_NUMSAMPLESCOEFF_Pos (0UL)
  #define RADIO_CSTONES_NUMSAMPLESCOEFF_NUMSAMPLESCOEFF_Msk (0xFFFFUL << RADIO_CSTONES_NUMSAMPLESCOEFF_NUMSAMPLESCOEFF_Pos) /*!<
                                                                            Bit mask of NUMSAMPLESCOEFF field.*/


/* RADIO_CSTONES_PCT16: Mean magnitude and mean phase converted to IQ */
  #define RADIO_CSTONES_PCT16_ResetValue (0x00000000UL)

/* PCT16I @Bits 0..15 : Inphase */
  #define RADIO_CSTONES_PCT16_PCT16I_Pos (0UL)
  #define RADIO_CSTONES_PCT16_PCT16I_Msk (0xFFFFUL << RADIO_CSTONES_PCT16_PCT16I_Pos)

/* PCT16Q @Bits 16..31 : Quadrature */
  #define RADIO_CSTONES_PCT16_PCT16Q_Pos (16UL)
  #define RADIO_CSTONES_PCT16_PCT16Q_Msk (0xFFFFUL << RADIO_CSTONES_PCT16_PCT16Q_Pos)


/* RADIO_CSTONES_MAGPHASEMEAN: Mean magnitude and phase of the signal before it is converted to PCT16 */
  #define RADIO_CSTONES_MAGPHASEMEAN_ResetValue (0x00000000UL)

/* PHASE @Bits 0..15 : Mean phase */
  #define RADIO_CSTONES_MAGPHASEMEAN_PHASE_Pos (0UL)
  #define RADIO_CSTONES_MAGPHASEMEAN_PHASE_Msk (0xFFFFUL << RADIO_CSTONES_MAGPHASEMEAN_PHASE_Pos)

/* MAG @Bits 16..31 : Mean magnitude */
  #define RADIO_CSTONES_MAGPHASEMEAN_MAG_Pos (16UL)
  #define RADIO_CSTONES_MAGPHASEMEAN_MAG_Msk (0xFFFFUL << RADIO_CSTONES_MAGPHASEMEAN_MAG_Pos)


/* RADIO_CSTONES_IQRAWMEAN: Mean of IQ values */
  #define RADIO_CSTONES_IQRAWMEAN_ResetValue (0x00000000UL)

/* IQRAWMEANI @Bits 0..15 : Inphase */
  #define RADIO_CSTONES_IQRAWMEAN_IQRAWMEANI_Pos (0UL)
  #define RADIO_CSTONES_IQRAWMEAN_IQRAWMEANI_Msk (0xFFFFUL << RADIO_CSTONES_IQRAWMEAN_IQRAWMEANI_Pos) /*!< Bit mask of
                                                                            IQRAWMEANI field.*/

/* IQRAWMEANQ @Bits 16..31 : Quadrature */
  #define RADIO_CSTONES_IQRAWMEAN_IQRAWMEANQ_Pos (16UL)
  #define RADIO_CSTONES_IQRAWMEAN_IQRAWMEANQ_Msk (0xFFFFUL << RADIO_CSTONES_IQRAWMEAN_IQRAWMEANQ_Pos) /*!< Bit mask of
                                                                            IQRAWMEANQ field.*/


/* RADIO_CSTONES_MAGSTD: Magnitude standard deviation approximation */
  #define RADIO_CSTONES_MAGSTD_ResetValue (0x00000000UL)

/* MAGSTD @Bits 0..15 : Magnitude standard deviation approximation */
  #define RADIO_CSTONES_MAGSTD_MAGSTD_Pos (0UL)
  #define RADIO_CSTONES_MAGSTD_MAGSTD_Msk (0xFFFFUL << RADIO_CSTONES_MAGSTD_MAGSTD_Pos)


/* RADIO_CSTONES_CNACC: Output of the autocorrelation of the accumulated IQ signal */
  #define RADIO_CSTONES_CNACC_ResetValue (0x00000000UL)

/* CNACCI @Bits 0..15 : (unspecified) */
  #define RADIO_CSTONES_CNACC_CNACCI_Pos (0UL)
  #define RADIO_CSTONES_CNACC_CNACCI_Msk (0xFFFFUL << RADIO_CSTONES_CNACC_CNACCI_Pos)

/* CNACCQ @Bits 16..31 : (unspecified) */
  #define RADIO_CSTONES_CNACC_CNACCQ_Pos (16UL)
  #define RADIO_CSTONES_CNACC_CNACCQ_Msk (0xFFFFUL << RADIO_CSTONES_CNACC_CNACCQ_Pos)


/* RADIO_CSTONES_FFOEST: FFO estimate */
  #define RADIO_CSTONES_FFOEST_ResetValue (0x00000000UL)

/* FFOEST @Bits 0..11 : Units 62.5 ppb. Max range +/-100 ppm plus margin. */
  #define RADIO_CSTONES_FFOEST_FFOEST_Pos (0UL)
  #define RADIO_CSTONES_FFOEST_FFOEST_Msk (0xFFFUL << RADIO_CSTONES_FFOEST_FFOEST_Pos)


/* RADIO_CSTONES_DOWNSAMPLE: Turn on/off down sample of input IQ-signals */
  #define RADIO_CSTONES_DOWNSAMPLE_ResetValue (0x00000000UL)

/* ENABLEFILTER @Bit 0 : Turn on/off down sample of input IQ-signals */
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Pos (0UL)
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Msk (0x1UL << RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Pos) /*!< Bit mask of
                                                                            ENABLEFILTER field.*/
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Min (0x0UL)
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Max (0x1UL)
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_OFF (0x0UL)
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_ON (0x1UL)

/* RATE @Bit 1 : Indicating if BLE1M or BLE2M is used */
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_Pos (1UL)
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_Msk (0x1UL << RADIO_CSTONES_DOWNSAMPLE_RATE_Pos)
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_Min (0x0UL)
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_Max (0x1UL)
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_BLE1M (0x0UL)
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_BLE2m (0x1UL)


/* RADIO_CSTONES_FINETUNENEXT: Number of full ADPLL finetune steps */
  #define RADIO_CSTONES_FINETUNENEXT_ResetValue (0x00000000UL)

/* FINETUNENEXT @Bits 0..12 : Units of 488.28125 Hz */
  #define RADIO_CSTONES_FINETUNENEXT_FINETUNENEXT_Pos (0UL)
  #define RADIO_CSTONES_FINETUNENEXT_FINETUNENEXT_Msk (0x1FFFUL << RADIO_CSTONES_FINETUNENEXT_FINETUNENEXT_Pos) /*!< Bit mask of
                                                                            FINETUNENEXT field.*/


/* RADIO_CSTONES_CFOPHASE: Cordic output of CnAcc */
  #define RADIO_CSTONES_CFOPHASE_ResetValue (0x00000000UL)

/* CFOPHASE @Bits 0..15 : (unspecified) */
  #define RADIO_CSTONES_CFOPHASE_CFOPHASE_Pos (0UL)
  #define RADIO_CSTONES_CFOPHASE_CFOPHASE_Msk (0xFFFFUL << RADIO_CSTONES_CFOPHASE_CFOPHASE_Pos) /*!< Bit mask of CFOPHASE
                                                                            field.*/


/* RADIO_CSTONES_FREQOFFSET: Frequency offset estimate */
  #define RADIO_CSTONES_FREQOFFSET_ResetValue (0x00000000UL)

/* FREQOFFSET @Bits 0..13 : (unspecified) */
  #define RADIO_CSTONES_FREQOFFSET_FREQOFFSET_Pos (0UL)
  #define RADIO_CSTONES_FREQOFFSET_FREQOFFSET_Msk (0x3FFFUL << RADIO_CSTONES_FREQOFFSET_FREQOFFSET_Pos) /*!< Bit mask of
                                                                            FREQOFFSET field.*/


/* RADIO_CSTONES_PCT11: Mean magnitude and mean phase converted to IQ. IQ values limited to [-1024,1023]. */
  #define RADIO_CSTONES_PCT11_ResetValue (0x00000000UL)

/* PCT11I @Bits 0..10 : Inphase */
  #define RADIO_CSTONES_PCT11_PCT11I_Pos (0UL)
  #define RADIO_CSTONES_PCT11_PCT11I_Msk (0x7FFUL << RADIO_CSTONES_PCT11_PCT11I_Pos)

/* PCT11Q @Bits 11..21 : Quadrature */
  #define RADIO_CSTONES_PCT11_PCT11Q_Pos (11UL)
  #define RADIO_CSTONES_PCT11_PCT11Q_Msk (0x7FFUL << RADIO_CSTONES_PCT11_PCT11Q_Pos)


/* RADIO_CSTONES_LFAENEXT: Quantization error between ADPLL frequency and the desired value of FFO * RF Frequency. Values
                            limited to [-64,63] with units 7.6294 Hz. */

  #define RADIO_CSTONES_LFAENEXT_ResetValue (0x00000000UL)

/* LFAENEXT @Bits 0..6 : Inphase */
  #define RADIO_CSTONES_LFAENEXT_LFAENEXT_Pos (0UL)
  #define RADIO_CSTONES_LFAENEXT_LFAENEXT_Msk (0x7FUL << RADIO_CSTONES_LFAENEXT_LFAENEXT_Pos)



/* ==================================================== Struct RADIO_RTT ===================================================== */
/**
  * @brief RTT [RADIO_RTT] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  SEGMENT01;
  __IOM uint32_t  SEGMENT23;
  __IOM uint32_t  SEGMENT45;
  __IOM uint32_t  SEGMENT67;
} NRF_RADIO_RTT_Type;

/* RADIO_RTT_CONFIG: RTT Config. */
  #define RADIO_RTT_CONFIG_ResetValue (0x00000000UL)

/* EN @Bit 0 : Enable RTT Functionality. Only valid for BLE 1MBPS and 2MBPS mode */
  #define RADIO_RTT_CONFIG_EN_Pos (0UL)
  #define RADIO_RTT_CONFIG_EN_Msk (0x1UL << RADIO_RTT_CONFIG_EN_Pos)
  #define RADIO_RTT_CONFIG_EN_Min (0x0UL)
  #define RADIO_RTT_CONFIG_EN_Max (0x1UL)
  #define RADIO_RTT_CONFIG_EN_Disabled (0x0UL)
  #define RADIO_RTT_CONFIG_EN_Enabled (0x1UL)

/* ENFULLAA @Bit 1 : Enabling/Disable ping over the entire access address. */
  #define RADIO_RTT_CONFIG_ENFULLAA_Pos (1UL)
  #define RADIO_RTT_CONFIG_ENFULLAA_Msk (0x1UL << RADIO_RTT_CONFIG_ENFULLAA_Pos)
  #define RADIO_RTT_CONFIG_ENFULLAA_Min (0x0UL)
  #define RADIO_RTT_CONFIG_ENFULLAA_Max (0x1UL)
  #define RADIO_RTT_CONFIG_ENFULLAA_Disabled (0x0UL) /*!< Disable ping over the entire access address, i.e., enable only over
                                                          the first 16-bit access address*/
  #define RADIO_RTT_CONFIG_ENFULLAA_Enabled (0x1UL)

/* ROLE @Bit 2 : Role as a Initiator or Reflector. */
  #define RADIO_RTT_CONFIG_ROLE_Pos (2UL)
  #define RADIO_RTT_CONFIG_ROLE_Msk (0x1UL << RADIO_RTT_CONFIG_ROLE_Pos)
  #define RADIO_RTT_CONFIG_ROLE_Min (0x0UL)
  #define RADIO_RTT_CONFIG_ROLE_Max (0x1UL)
  #define RADIO_RTT_CONFIG_ROLE_Initiator (0x0UL)
  #define RADIO_RTT_CONFIG_ROLE_Reflector (0x1UL)

/* NUMSEGMENTS @Bits 3..6 : Number of 16bit payload segments available for ToA detection. Allowed values are 0, 2, 4, 6 and 8. */
  #define RADIO_RTT_CONFIG_NUMSEGMENTS_Pos (3UL)
  #define RADIO_RTT_CONFIG_NUMSEGMENTS_Msk (0xFUL << RADIO_RTT_CONFIG_NUMSEGMENTS_Pos)

/* EFSDELAY @Bits 8..16 : Early Frame Sync Delay, i.e., number of cycles to wait for access address to anchor correctly. For
                          2MBPSBLE mode, the EFSDELAY value is 64 (2us) and for 1MBPSBLE mode, it can be 256 (8us). */

  #define RADIO_RTT_CONFIG_EFSDELAY_Pos (8UL)
  #define RADIO_RTT_CONFIG_EFSDELAY_Msk (0x1FFUL << RADIO_RTT_CONFIG_EFSDELAY_Pos)


/* RADIO_RTT_SEGMENT01: RTT segments 0 and 1 */
  #define RADIO_RTT_SEGMENT01_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data Bits 31 - 0 */
  #define RADIO_RTT_SEGMENT01_DATA_Pos (0UL)
  #define RADIO_RTT_SEGMENT01_DATA_Msk (0xFFFFFFFFUL << RADIO_RTT_SEGMENT01_DATA_Pos)


/* RADIO_RTT_SEGMENT23: RTT segments 2 and 3 */
  #define RADIO_RTT_SEGMENT23_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data Bits 63 - 32 */
  #define RADIO_RTT_SEGMENT23_DATA_Pos (0UL)
  #define RADIO_RTT_SEGMENT23_DATA_Msk (0xFFFFFFFFUL << RADIO_RTT_SEGMENT23_DATA_Pos)


/* RADIO_RTT_SEGMENT45: RTT segments 4 and 5 */
  #define RADIO_RTT_SEGMENT45_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data Bits 95 - 64 */
  #define RADIO_RTT_SEGMENT45_DATA_Pos (0UL)
  #define RADIO_RTT_SEGMENT45_DATA_Msk (0xFFFFFFFFUL << RADIO_RTT_SEGMENT45_DATA_Pos)


/* RADIO_RTT_SEGMENT67: RTT segments 6 and 7 */
  #define RADIO_RTT_SEGMENT67_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data Bits 127 - 96 */
  #define RADIO_RTT_SEGMENT67_DATA_Pos (0UL)
  #define RADIO_RTT_SEGMENT67_DATA_Msk (0xFFFFFFFFUL << RADIO_RTT_SEGMENT67_DATA_Pos)


/* ====================================================== Struct RADIO ======================================================= */
/**
  * @brief 2.4 GHz radio
  */
  typedef struct {
    __OM uint32_t TASKS_TXEN;
    __OM uint32_t TASKS_RXEN;
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_DISABLE;
    __OM uint32_t TASKS_RSSISTART;                   /*!< (@ 0x00000014) Start the RSSI and take one single sample of the
                                                                         receive signal strength*/
    __OM uint32_t TASKS_BCSTART;
    __OM uint32_t TASKS_BCSTOP;
    __OM uint32_t TASKS_EDSTART;                     /*!< (@ 0x00000020) Start the energy detect measurement used in IEEE
                                                                         802.15.4 mode*/
    __OM uint32_t TASKS_EDSTOP;
    __OM uint32_t TASKS_CCASTART;                    /*!< (@ 0x00000028) Start the clear channel assessment used in IEEE
                                                                         802.15.4 mode*/
    __OM uint32_t TASKS_CCASTOP;
    __IM uint32_t RESERVED[29];
    __OM uint32_t TASKS_SOFTRESET;                   /*!< (@ 0x000000A4) Reset all public registers, but with these exceptions:
                                                                         DMA registers and EVENT/INTEN/SUBSCRIBE/PUBLISH
                                                                         registers. Only to be used in DISABLED state.*/
    __IM uint32_t RESERVED1[22];
    __IOM uint32_t SUBSCRIBE_TXEN;
    __IOM uint32_t SUBSCRIBE_RXEN;
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_DISABLE;
    __IOM uint32_t SUBSCRIBE_RSSISTART;
    __IOM uint32_t SUBSCRIBE_BCSTART;
    __IOM uint32_t SUBSCRIBE_BCSTOP;
    __IOM uint32_t SUBSCRIBE_EDSTART;
    __IOM uint32_t SUBSCRIBE_EDSTOP;
    __IOM uint32_t SUBSCRIBE_CCASTART;
    __IOM uint32_t SUBSCRIBE_CCASTOP;
    __IM uint32_t RESERVED2[29];
    __IOM uint32_t SUBSCRIBE_SOFTRESET;
    __IM uint32_t RESERVED3[22];
    __IOM uint32_t EVENTS_READY;
    __IOM uint32_t EVENTS_TXREADY;
    __IOM uint32_t EVENTS_RXREADY;
    __IOM uint32_t EVENTS_ADDRESS;
    __IOM uint32_t EVENTS_FRAMESTART;
    __IOM uint32_t EVENTS_PAYLOAD;
    __IOM uint32_t EVENTS_END;
    __IOM uint32_t EVENTS_PHYEND;
    __IOM uint32_t EVENTS_DISABLED;
    __IOM uint32_t EVENTS_DEVMATCH;                  /*!< (@ 0x00000224) A device address match occurred on the last received
                                                                         packet*/
    __IOM uint32_t EVENTS_DEVMISS;                   /*!< (@ 0x00000228) No device address match occurred on the last received
                                                                         packet*/
    __IOM uint32_t EVENTS_CRCOK;
    __IOM uint32_t EVENTS_CRCERROR;
    __IM uint32_t RESERVED4;
    __IOM uint32_t EVENTS_BCMATCH;
    __IOM uint32_t EVENTS_EDEND;                     /*!< (@ 0x0000023C) Sampling of energy detection complete (a new ED sample
                                                                         is ready for readout from the RADIO.EDSAMPLE register)*/
    __IOM uint32_t EVENTS_EDSTOPPED;
    __IOM uint32_t EVENTS_CCAIDLE;
    __IOM uint32_t EVENTS_CCABUSY;
    __IOM uint32_t EVENTS_CCASTOPPED;
    __IOM uint32_t EVENTS_RATEBOOST;                 /*!< (@ 0x00000250) Ble_LR CI field received, receive mode is changed from
                                                                         Ble_LR125Kbit to Ble_LR500Kbit*/
    __IOM uint32_t EVENTS_MHRMATCH;
    __IOM uint32_t EVENTS_SYNC;
    __IOM uint32_t EVENTS_CTEPRESENT;
    __IM uint32_t RESERVED5[40];
    __IOM uint32_t PUBLISH_READY;
    __IOM uint32_t PUBLISH_TXREADY;
    __IOM uint32_t PUBLISH_RXREADY;
    __IOM uint32_t PUBLISH_ADDRESS;
    __IOM uint32_t PUBLISH_FRAMESTART;
    __IOM uint32_t PUBLISH_PAYLOAD;
    __IOM uint32_t PUBLISH_END;
    __IOM uint32_t PUBLISH_PHYEND;
    __IOM uint32_t PUBLISH_DISABLED;
    __IOM uint32_t PUBLISH_DEVMATCH;
    __IOM uint32_t PUBLISH_DEVMISS;
    __IOM uint32_t PUBLISH_CRCOK;
    __IOM uint32_t PUBLISH_CRCERROR;
    __IM uint32_t RESERVED6;
    __IOM uint32_t PUBLISH_BCMATCH;
    __IOM uint32_t PUBLISH_EDEND;
    __IOM uint32_t PUBLISH_EDSTOPPED;
    __IOM uint32_t PUBLISH_CCAIDLE;
    __IOM uint32_t PUBLISH_CCABUSY;
    __IOM uint32_t PUBLISH_CCASTOPPED;
    __IOM uint32_t PUBLISH_RATEBOOST;
    __IOM uint32_t PUBLISH_MHRMATCH;
    __IOM uint32_t PUBLISH_SYNC;
    __IOM uint32_t PUBLISH_CTEPRESENT;
    __IM uint32_t RESERVED7[40];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED8[33];
    __IOM uint32_t INTENSET00;
    __IM uint32_t RESERVED9;
    __IOM uint32_t INTENCLR00;
    __IM uint32_t RESERVED10[5];
    __IOM uint32_t INTENSET10;
    __IM uint32_t RESERVED11;
    __IOM uint32_t INTENCLR10;
    __IM uint32_t RESERVED12[19];
    __IOM uint32_t MODE;
    __IM uint32_t RESERVED13[7];
    __IM uint32_t STATE;
    __IM uint32_t RESERVED14[3];
    __IOM uint32_t EDCTRL;
    __IM uint32_t EDSAMPLE;
    __IOM uint32_t CCACTRL;
    __IM uint32_t RESERVED15;
    __IOM uint32_t DATAWHITE;
    __IM uint32_t RESERVED16[112];
    __IOM uint32_t TIMING;
    __IOM uint32_t FREQUENCY;
    __IM uint32_t RESERVED17;
    __IOM uint32_t TXPOWER;
    __IOM uint32_t TIFS;
    __IM uint32_t RSSISAMPLE;
    __IM uint32_t RESERVED18[123];
    __IOM uint32_t FECONFIG;
    __IM uint32_t RESERVED19[253];
    __IOM uint32_t DFEMODE;                          /*!< (@ 0x00000D00) Whether to use Angle-of-Arrival (AOA) or
                                                                         Angle-of-Departure (AOD)*/
    __IM uint32_t DFESTATUS;
    __IM uint32_t RESERVED20[2];
    __IOM uint32_t DFECTRL1;
    __IOM uint32_t DFECTRL2;
    __IM uint32_t RESERVED21[4];
    __IOM uint32_t SWITCHPATTERN;
    __OM uint32_t CLEARPATTERN;
    __IOM NRF_RADIO_PSEL_Type PSEL;
    __IOM NRF_RADIO_DFEPACKET_Type DFEPACKET;
    __IM uint32_t RESERVED22[43];
    __IM uint32_t CRCSTATUS;
    __IM uint32_t RXMATCH;
    __IM uint32_t RXCRC;
    __IM uint32_t DAI;
    __IM uint32_t PDUSTAT;
    __IOM uint32_t PCNF0;
    __IM uint32_t RESERVED23;
    __IOM uint32_t PCNF1;
    __IOM uint32_t BASE0;
    __IOM uint32_t BASE1;
    __IOM uint32_t PREFIX0;
    __IOM uint32_t PREFIX1;
    __IOM uint32_t TXADDRESS;
    __IOM uint32_t RXADDRESSES;
    __IOM uint32_t CRCCNF;
    __IOM uint32_t CRCPOLY;
    __IOM uint32_t CRCINIT;
    __IOM uint32_t DAB[8];
    __IOM uint32_t DAP[8];
    __IOM uint32_t DACNF;
    __IOM uint32_t BCC;
    __IM uint32_t RESERVED24[3];
    __IM uint32_t CTESTATUS;
    __IM uint32_t RESERVED25[3];
    __IOM uint32_t MHRMATCHCONF;
    __IOM uint32_t MHRMATCHMASK;
    __IOM uint32_t SFD;
    __IOM uint32_t CTEINLINECONF;
    __IM uint32_t RESERVED26[3];
    __IOM uint32_t PACKETPTR;
    __IM uint32_t RESERVED27[75];
    __IOM NRF_RADIO_CSTONES_Type CSTONES;
    __IOM NRF_RADIO_RTT_Type RTT;
  } NRF_RADIO_Type;

/* RADIO_TASKS_TXEN: Enable RADIO in TX mode */
  #define RADIO_TASKS_TXEN_ResetValue (0x00000000UL)

/* TASKS_TXEN @Bit 0 : Enable RADIO in TX mode */
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Pos (0UL)
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Msk (0x1UL << RADIO_TASKS_TXEN_TASKS_TXEN_Pos)
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Min (0x1UL)
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Max (0x1UL)
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Trigger (0x1UL)


/* RADIO_TASKS_RXEN: Enable RADIO in RX mode */
  #define RADIO_TASKS_RXEN_ResetValue (0x00000000UL)

/* TASKS_RXEN @Bit 0 : Enable RADIO in RX mode */
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Pos (0UL)
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Msk (0x1UL << RADIO_TASKS_RXEN_TASKS_RXEN_Pos)
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Min (0x1UL)
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Max (0x1UL)
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Trigger (0x1UL)


/* RADIO_TASKS_START: Start RADIO */
  #define RADIO_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start RADIO */
  #define RADIO_TASKS_START_TASKS_START_Pos (0UL)
  #define RADIO_TASKS_START_TASKS_START_Msk (0x1UL << RADIO_TASKS_START_TASKS_START_Pos)
  #define RADIO_TASKS_START_TASKS_START_Min (0x1UL)
  #define RADIO_TASKS_START_TASKS_START_Max (0x1UL)
  #define RADIO_TASKS_START_TASKS_START_Trigger (0x1UL)


/* RADIO_TASKS_STOP: Stop RADIO */
  #define RADIO_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop RADIO */
  #define RADIO_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define RADIO_TASKS_STOP_TASKS_STOP_Msk (0x1UL << RADIO_TASKS_STOP_TASKS_STOP_Pos)
  #define RADIO_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define RADIO_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define RADIO_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* RADIO_TASKS_DISABLE: Disable RADIO */
  #define RADIO_TASKS_DISABLE_ResetValue (0x00000000UL)

/* TASKS_DISABLE @Bit 0 : Disable RADIO */
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Pos (0UL)
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Msk (0x1UL << RADIO_TASKS_DISABLE_TASKS_DISABLE_Pos) /*!< Bit mask of TASKS_DISABLE
                                                                            field.*/
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Min (0x1UL)
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Max (0x1UL)
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Trigger (0x1UL)


/* RADIO_TASKS_RSSISTART: Start the RSSI and take one single sample of the receive signal strength */
  #define RADIO_TASKS_RSSISTART_ResetValue (0x00000000UL)

/* TASKS_RSSISTART @Bit 0 : Start the RSSI and take one single sample of the receive signal strength */
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Pos (0UL)
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Msk (0x1UL << RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Pos) /*!< Bit mask of
                                                                            TASKS_RSSISTART field.*/
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Min (0x1UL)
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Max (0x1UL)
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Trigger (0x1UL)


/* RADIO_TASKS_BCSTART: Start the bit counter */
  #define RADIO_TASKS_BCSTART_ResetValue (0x00000000UL)

/* TASKS_BCSTART @Bit 0 : Start the bit counter */
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Pos (0UL)
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Msk (0x1UL << RADIO_TASKS_BCSTART_TASKS_BCSTART_Pos) /*!< Bit mask of TASKS_BCSTART
                                                                            field.*/
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Min (0x1UL)
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Max (0x1UL)
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Trigger (0x1UL)


/* RADIO_TASKS_BCSTOP: Stop the bit counter */
  #define RADIO_TASKS_BCSTOP_ResetValue (0x00000000UL)

/* TASKS_BCSTOP @Bit 0 : Stop the bit counter */
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Pos (0UL)
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Msk (0x1UL << RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Pos) /*!< Bit mask of TASKS_BCSTOP
                                                                            field.*/
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Min (0x1UL)
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Max (0x1UL)
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Trigger (0x1UL)


/* RADIO_TASKS_EDSTART: Start the energy detect measurement used in IEEE 802.15.4 mode */
  #define RADIO_TASKS_EDSTART_ResetValue (0x00000000UL)

/* TASKS_EDSTART @Bit 0 : Start the energy detect measurement used in IEEE 802.15.4 mode */
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Pos (0UL)
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Msk (0x1UL << RADIO_TASKS_EDSTART_TASKS_EDSTART_Pos) /*!< Bit mask of TASKS_EDSTART
                                                                            field.*/
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Min (0x1UL)
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Max (0x1UL)
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Trigger (0x1UL)


/* RADIO_TASKS_EDSTOP: Stop the energy detect measurement */
  #define RADIO_TASKS_EDSTOP_ResetValue (0x00000000UL)

/* TASKS_EDSTOP @Bit 0 : Stop the energy detect measurement */
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Pos (0UL)
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Msk (0x1UL << RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Pos) /*!< Bit mask of TASKS_EDSTOP
                                                                            field.*/
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Min (0x1UL)
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Max (0x1UL)
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Trigger (0x1UL)


/* RADIO_TASKS_CCASTART: Start the clear channel assessment used in IEEE 802.15.4 mode */
  #define RADIO_TASKS_CCASTART_ResetValue (0x00000000UL)

/* TASKS_CCASTART @Bit 0 : Start the clear channel assessment used in IEEE 802.15.4 mode */
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Pos (0UL)
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Msk (0x1UL << RADIO_TASKS_CCASTART_TASKS_CCASTART_Pos) /*!< Bit mask of
                                                                            TASKS_CCASTART field.*/
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Min (0x1UL)
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Max (0x1UL)
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Trigger (0x1UL)


/* RADIO_TASKS_CCASTOP: Stop the clear channel assessment */
  #define RADIO_TASKS_CCASTOP_ResetValue (0x00000000UL)

/* TASKS_CCASTOP @Bit 0 : Stop the clear channel assessment */
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Pos (0UL)
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Msk (0x1UL << RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Pos) /*!< Bit mask of TASKS_CCASTOP
                                                                            field.*/
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Min (0x1UL)
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Max (0x1UL)
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Trigger (0x1UL)


/* RADIO_TASKS_SOFTRESET: Reset all public registers, but with these exceptions: DMA registers and EVENT/INTEN/SUBSCRIBE/PUBLISH
                           registers. Only to be used in DISABLED state. */

  #define RADIO_TASKS_SOFTRESET_ResetValue (0x00000000UL)

/* TASKS_SOFTRESET @Bit 0 : Reset all public registers, but with these exceptions: DMA registers and
                            EVENT/INTEN/SUBSCRIBE/PUBLISH registers. Only to be used in DISABLED state. */

  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Pos (0UL)
  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Msk (0x1UL << RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Pos) /*!< Bit mask of
                                                                            TASKS_SOFTRESET field.*/
  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Min (0x1UL)
  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Max (0x1UL)
  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Trigger (0x1UL)


/* RADIO_SUBSCRIBE_TXEN: Subscribe configuration for task TXEN */
  #define RADIO_SUBSCRIBE_TXEN_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task TXEN will subscribe to */
  #define RADIO_SUBSCRIBE_TXEN_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_TXEN_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_TXEN_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_TXEN_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_TXEN_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_TXEN_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_TXEN_EN_Msk (0x1UL << RADIO_SUBSCRIBE_TXEN_EN_Pos)
  #define RADIO_SUBSCRIBE_TXEN_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_TXEN_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_TXEN_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_TXEN_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_RXEN: Subscribe configuration for task RXEN */
  #define RADIO_SUBSCRIBE_RXEN_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RXEN will subscribe to */
  #define RADIO_SUBSCRIBE_RXEN_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_RXEN_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_RXEN_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_RXEN_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_RXEN_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_RXEN_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_RXEN_EN_Msk (0x1UL << RADIO_SUBSCRIBE_RXEN_EN_Pos)
  #define RADIO_SUBSCRIBE_RXEN_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_RXEN_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_RXEN_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_RXEN_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_START: Subscribe configuration for task START */
  #define RADIO_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define RADIO_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_START_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_START_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_START_EN_Msk (0x1UL << RADIO_SUBSCRIBE_START_EN_Pos)
  #define RADIO_SUBSCRIBE_START_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_START_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define RADIO_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define RADIO_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_STOP_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_STOP_EN_Msk (0x1UL << RADIO_SUBSCRIBE_STOP_EN_Pos)
  #define RADIO_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_DISABLE: Subscribe configuration for task DISABLE */
  #define RADIO_SUBSCRIBE_DISABLE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLE will subscribe to */
  #define RADIO_SUBSCRIBE_DISABLE_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_DISABLE_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_DISABLE_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_DISABLE_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_DISABLE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_DISABLE_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_DISABLE_EN_Msk (0x1UL << RADIO_SUBSCRIBE_DISABLE_EN_Pos)
  #define RADIO_SUBSCRIBE_DISABLE_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_DISABLE_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_DISABLE_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_DISABLE_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_RSSISTART: Subscribe configuration for task RSSISTART */
  #define RADIO_SUBSCRIBE_RSSISTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RSSISTART will subscribe to */
  #define RADIO_SUBSCRIBE_RSSISTART_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_RSSISTART_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_RSSISTART_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_RSSISTART_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_RSSISTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Msk (0x1UL << RADIO_SUBSCRIBE_RSSISTART_EN_Pos)
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_BCSTART: Subscribe configuration for task BCSTART */
  #define RADIO_SUBSCRIBE_BCSTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task BCSTART will subscribe to */
  #define RADIO_SUBSCRIBE_BCSTART_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_BCSTART_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_BCSTART_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_BCSTART_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_BCSTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_BCSTART_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_BCSTART_EN_Msk (0x1UL << RADIO_SUBSCRIBE_BCSTART_EN_Pos)
  #define RADIO_SUBSCRIBE_BCSTART_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_BCSTART_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_BCSTART_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_BCSTART_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_BCSTOP: Subscribe configuration for task BCSTOP */
  #define RADIO_SUBSCRIBE_BCSTOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task BCSTOP will subscribe to */
  #define RADIO_SUBSCRIBE_BCSTOP_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_BCSTOP_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_BCSTOP_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_BCSTOP_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_BCSTOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Msk (0x1UL << RADIO_SUBSCRIBE_BCSTOP_EN_Pos)
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_EDSTART: Subscribe configuration for task EDSTART */
  #define RADIO_SUBSCRIBE_EDSTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task EDSTART will subscribe to */
  #define RADIO_SUBSCRIBE_EDSTART_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_EDSTART_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_EDSTART_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_EDSTART_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_EDSTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_EDSTART_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_EDSTART_EN_Msk (0x1UL << RADIO_SUBSCRIBE_EDSTART_EN_Pos)
  #define RADIO_SUBSCRIBE_EDSTART_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_EDSTART_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_EDSTART_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_EDSTART_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_EDSTOP: Subscribe configuration for task EDSTOP */
  #define RADIO_SUBSCRIBE_EDSTOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task EDSTOP will subscribe to */
  #define RADIO_SUBSCRIBE_EDSTOP_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_EDSTOP_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_EDSTOP_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_EDSTOP_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_EDSTOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Msk (0x1UL << RADIO_SUBSCRIBE_EDSTOP_EN_Pos)
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_CCASTART: Subscribe configuration for task CCASTART */
  #define RADIO_SUBSCRIBE_CCASTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CCASTART will subscribe to */
  #define RADIO_SUBSCRIBE_CCASTART_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_CCASTART_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_CCASTART_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_CCASTART_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_CCASTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_CCASTART_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_CCASTART_EN_Msk (0x1UL << RADIO_SUBSCRIBE_CCASTART_EN_Pos)
  #define RADIO_SUBSCRIBE_CCASTART_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_CCASTART_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_CCASTART_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_CCASTART_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_CCASTOP: Subscribe configuration for task CCASTOP */
  #define RADIO_SUBSCRIBE_CCASTOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CCASTOP will subscribe to */
  #define RADIO_SUBSCRIBE_CCASTOP_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_CCASTOP_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_CCASTOP_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_CCASTOP_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_CCASTOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Msk (0x1UL << RADIO_SUBSCRIBE_CCASTOP_EN_Pos)
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_SOFTRESET: Subscribe configuration for task SOFTRESET */
  #define RADIO_SUBSCRIBE_SOFTRESET_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SOFTRESET will subscribe to */
  #define RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Msk (0x1UL << RADIO_SUBSCRIBE_SOFTRESET_EN_Pos)
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Enabled (0x1UL)


/* RADIO_EVENTS_READY: RADIO has ramped up and is ready to be started */
  #define RADIO_EVENTS_READY_ResetValue (0x00000000UL)

/* EVENTS_READY @Bit 0 : RADIO has ramped up and is ready to be started */
  #define RADIO_EVENTS_READY_EVENTS_READY_Pos (0UL)
  #define RADIO_EVENTS_READY_EVENTS_READY_Msk (0x1UL << RADIO_EVENTS_READY_EVENTS_READY_Pos) /*!< Bit mask of EVENTS_READY
                                                                            field.*/
  #define RADIO_EVENTS_READY_EVENTS_READY_Min (0x0UL)
  #define RADIO_EVENTS_READY_EVENTS_READY_Max (0x1UL)
  #define RADIO_EVENTS_READY_EVENTS_READY_NotGenerated (0x0UL)
  #define RADIO_EVENTS_READY_EVENTS_READY_Generated (0x1UL)


/* RADIO_EVENTS_TXREADY: RADIO has ramped up and is ready to be started TX path */
  #define RADIO_EVENTS_TXREADY_ResetValue (0x00000000UL)

/* EVENTS_TXREADY @Bit 0 : RADIO has ramped up and is ready to be started TX path */
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Pos (0UL)
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Msk (0x1UL << RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Pos) /*!< Bit mask of
                                                                            EVENTS_TXREADY field.*/
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Min (0x0UL)
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Max (0x1UL)
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_NotGenerated (0x0UL)
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Generated (0x1UL)


/* RADIO_EVENTS_RXREADY: RADIO has ramped up and is ready to be started RX path */
  #define RADIO_EVENTS_RXREADY_ResetValue (0x00000000UL)

/* EVENTS_RXREADY @Bit 0 : RADIO has ramped up and is ready to be started RX path */
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Pos (0UL)
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Msk (0x1UL << RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Pos) /*!< Bit mask of
                                                                            EVENTS_RXREADY field.*/
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Min (0x0UL)
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Max (0x1UL)
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_NotGenerated (0x0UL)
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Generated (0x1UL)


/* RADIO_EVENTS_ADDRESS: Address sent or received */
  #define RADIO_EVENTS_ADDRESS_ResetValue (0x00000000UL)

/* EVENTS_ADDRESS @Bit 0 : Address sent or received */
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Pos (0UL)
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Msk (0x1UL << RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Pos) /*!< Bit mask of
                                                                            EVENTS_ADDRESS field.*/
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Min (0x0UL)
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Max (0x1UL)
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_NotGenerated (0x0UL)
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Generated (0x1UL)


/* RADIO_EVENTS_FRAMESTART: IEEE 802.15.4 length field received */
  #define RADIO_EVENTS_FRAMESTART_ResetValue (0x00000000UL)

/* EVENTS_FRAMESTART @Bit 0 : IEEE 802.15.4 length field received */
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Pos (0UL)
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Msk (0x1UL << RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Pos) /*!< Bit mask
                                                                            of EVENTS_FRAMESTART field.*/
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Min (0x0UL)
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Max (0x1UL)
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_NotGenerated (0x0UL)
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Generated (0x1UL)


/* RADIO_EVENTS_PAYLOAD: Packet payload sent or received */
  #define RADIO_EVENTS_PAYLOAD_ResetValue (0x00000000UL)

/* EVENTS_PAYLOAD @Bit 0 : Packet payload sent or received */
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Pos (0UL)
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Msk (0x1UL << RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Pos) /*!< Bit mask of
                                                                            EVENTS_PAYLOAD field.*/
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Min (0x0UL)
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Max (0x1UL)
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_NotGenerated (0x0UL)
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Generated (0x1UL)


/* RADIO_EVENTS_END: Memory access for packet data has been completed */
  #define RADIO_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : Memory access for packet data has been completed */
  #define RADIO_EVENTS_END_EVENTS_END_Pos (0UL)
  #define RADIO_EVENTS_END_EVENTS_END_Msk (0x1UL << RADIO_EVENTS_END_EVENTS_END_Pos)
  #define RADIO_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define RADIO_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define RADIO_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define RADIO_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* RADIO_EVENTS_PHYEND: The last bit is sent on air or last bit is received */
  #define RADIO_EVENTS_PHYEND_ResetValue (0x00000000UL)

/* EVENTS_PHYEND @Bit 0 : The last bit is sent on air or last bit is received */
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Pos (0UL)
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Msk (0x1UL << RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Pos) /*!< Bit mask of EVENTS_PHYEND
                                                                            field.*/
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Min (0x0UL)
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Max (0x1UL)
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_NotGenerated (0x0UL)
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Generated (0x1UL)


/* RADIO_EVENTS_DISABLED: RADIO has been disabled */
  #define RADIO_EVENTS_DISABLED_ResetValue (0x00000000UL)

/* EVENTS_DISABLED @Bit 0 : RADIO has been disabled */
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Pos (0UL)
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Msk (0x1UL << RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Pos) /*!< Bit mask of
                                                                            EVENTS_DISABLED field.*/
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Min (0x0UL)
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Max (0x1UL)
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_NotGenerated (0x0UL)
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Generated (0x1UL)


/* RADIO_EVENTS_DEVMATCH: A device address match occurred on the last received packet */
  #define RADIO_EVENTS_DEVMATCH_ResetValue (0x00000000UL)

/* EVENTS_DEVMATCH @Bit 0 : A device address match occurred on the last received packet */
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Pos (0UL)
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Msk (0x1UL << RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Pos) /*!< Bit mask of
                                                                            EVENTS_DEVMATCH field.*/
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Min (0x0UL)
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Max (0x1UL)
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_NotGenerated (0x0UL)
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Generated (0x1UL)


/* RADIO_EVENTS_DEVMISS: No device address match occurred on the last received packet */
  #define RADIO_EVENTS_DEVMISS_ResetValue (0x00000000UL)

/* EVENTS_DEVMISS @Bit 0 : No device address match occurred on the last received packet */
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Pos (0UL)
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Msk (0x1UL << RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Pos) /*!< Bit mask of
                                                                            EVENTS_DEVMISS field.*/
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Min (0x0UL)
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Max (0x1UL)
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_NotGenerated (0x0UL)
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Generated (0x1UL)


/* RADIO_EVENTS_CRCOK: Packet received with CRC ok */
  #define RADIO_EVENTS_CRCOK_ResetValue (0x00000000UL)

/* EVENTS_CRCOK @Bit 0 : Packet received with CRC ok */
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Pos (0UL)
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Msk (0x1UL << RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Pos) /*!< Bit mask of EVENTS_CRCOK
                                                                            field.*/
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Min (0x0UL)
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Max (0x1UL)
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_NotGenerated (0x0UL)
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Generated (0x1UL)


/* RADIO_EVENTS_CRCERROR: Packet received with CRC error */
  #define RADIO_EVENTS_CRCERROR_ResetValue (0x00000000UL)

/* EVENTS_CRCERROR @Bit 0 : Packet received with CRC error */
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Pos (0UL)
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Msk (0x1UL << RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Pos) /*!< Bit mask of
                                                                            EVENTS_CRCERROR field.*/
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Min (0x0UL)
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Max (0x1UL)
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_NotGenerated (0x0UL)
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Generated (0x1UL)


/* RADIO_EVENTS_BCMATCH: Bit counter reached bit count value */
  #define RADIO_EVENTS_BCMATCH_ResetValue (0x00000000UL)

/* EVENTS_BCMATCH @Bit 0 : Bit counter reached bit count value */
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Pos (0UL)
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Msk (0x1UL << RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Pos) /*!< Bit mask of
                                                                            EVENTS_BCMATCH field.*/
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Min (0x0UL)
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Max (0x1UL)
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_NotGenerated (0x0UL)
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Generated (0x1UL)


/* RADIO_EVENTS_EDEND: Sampling of energy detection complete (a new ED sample is ready for readout from the RADIO.EDSAMPLE
                        register) */

  #define RADIO_EVENTS_EDEND_ResetValue (0x00000000UL)

/* EVENTS_EDEND @Bit 0 : Sampling of energy detection complete (a new ED sample is ready for readout from the RADIO.EDSAMPLE
                         register) */

  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Pos (0UL)
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Msk (0x1UL << RADIO_EVENTS_EDEND_EVENTS_EDEND_Pos) /*!< Bit mask of EVENTS_EDEND
                                                                            field.*/
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Min (0x0UL)
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Max (0x1UL)
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_NotGenerated (0x0UL)
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Generated (0x1UL)


/* RADIO_EVENTS_EDSTOPPED: The sampling of energy detection has stopped */
  #define RADIO_EVENTS_EDSTOPPED_ResetValue (0x00000000UL)

/* EVENTS_EDSTOPPED @Bit 0 : The sampling of energy detection has stopped */
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Pos (0UL)
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Msk (0x1UL << RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_EDSTOPPED field.*/
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Min (0x0UL)
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Max (0x1UL)
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_NotGenerated (0x0UL)
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Generated (0x1UL)


/* RADIO_EVENTS_CCAIDLE: Wireless medium in idle - clear to send */
  #define RADIO_EVENTS_CCAIDLE_ResetValue (0x00000000UL)

/* EVENTS_CCAIDLE @Bit 0 : Wireless medium in idle - clear to send */
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Pos (0UL)
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Msk (0x1UL << RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Pos) /*!< Bit mask of
                                                                            EVENTS_CCAIDLE field.*/
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Min (0x0UL)
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Max (0x1UL)
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_NotGenerated (0x0UL)
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Generated (0x1UL)


/* RADIO_EVENTS_CCABUSY: Wireless medium busy - do not send */
  #define RADIO_EVENTS_CCABUSY_ResetValue (0x00000000UL)

/* EVENTS_CCABUSY @Bit 0 : Wireless medium busy - do not send */
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Pos (0UL)
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Msk (0x1UL << RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Pos) /*!< Bit mask of
                                                                            EVENTS_CCABUSY field.*/
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Min (0x0UL)
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Max (0x1UL)
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_NotGenerated (0x0UL)
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Generated (0x1UL)


/* RADIO_EVENTS_CCASTOPPED: The CCA has stopped */
  #define RADIO_EVENTS_CCASTOPPED_ResetValue (0x00000000UL)

/* EVENTS_CCASTOPPED @Bit 0 : The CCA has stopped */
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Pos (0UL)
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Msk (0x1UL << RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Pos) /*!< Bit mask
                                                                            of EVENTS_CCASTOPPED field.*/
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Min (0x0UL)
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Max (0x1UL)
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_NotGenerated (0x0UL)
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Generated (0x1UL)


/* RADIO_EVENTS_RATEBOOST: Ble_LR CI field received, receive mode is changed from Ble_LR125Kbit to Ble_LR500Kbit */
  #define RADIO_EVENTS_RATEBOOST_ResetValue (0x00000000UL)

/* EVENTS_RATEBOOST @Bit 0 : Ble_LR CI field received, receive mode is changed from Ble_LR125Kbit to Ble_LR500Kbit */
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Pos (0UL)
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Msk (0x1UL << RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Pos) /*!< Bit mask of
                                                                            EVENTS_RATEBOOST field.*/
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Min (0x0UL)
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Max (0x1UL)
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_NotGenerated (0x0UL)
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Generated (0x1UL)


/* RADIO_EVENTS_MHRMATCH: MAC header match found */
  #define RADIO_EVENTS_MHRMATCH_ResetValue (0x00000000UL)

/* EVENTS_MHRMATCH @Bit 0 : MAC header match found */
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Pos (0UL)
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Msk (0x1UL << RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Pos) /*!< Bit mask of
                                                                            EVENTS_MHRMATCH field.*/
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Min (0x0UL)
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Max (0x1UL)
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_NotGenerated (0x0UL)
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Generated (0x1UL)


/* RADIO_EVENTS_SYNC: Initial sync detected */
  #define RADIO_EVENTS_SYNC_ResetValue (0x00000000UL)

/* EVENTS_SYNC @Bit 0 : Initial sync detected */
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Pos (0UL)
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Msk (0x1UL << RADIO_EVENTS_SYNC_EVENTS_SYNC_Pos)
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Min (0x0UL)
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Max (0x1UL)
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_NotGenerated (0x0UL)
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Generated (0x1UL)


/* RADIO_EVENTS_CTEPRESENT: CTEInfo byte is received */
  #define RADIO_EVENTS_CTEPRESENT_ResetValue (0x00000000UL)

/* EVENTS_CTEPRESENT @Bit 0 : CTEInfo byte is received */
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Pos (0UL)
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Msk (0x1UL << RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Pos) /*!< Bit mask
                                                                            of EVENTS_CTEPRESENT field.*/
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Min (0x0UL)
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Max (0x1UL)
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_NotGenerated (0x0UL)
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Generated (0x1UL)


/* RADIO_PUBLISH_READY: Publish configuration for event READY */
  #define RADIO_PUBLISH_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define RADIO_PUBLISH_READY_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_READY_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_READY_CHIDX_Pos)
  #define RADIO_PUBLISH_READY_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_READY_EN_Pos (31UL)
  #define RADIO_PUBLISH_READY_EN_Msk (0x1UL << RADIO_PUBLISH_READY_EN_Pos)
  #define RADIO_PUBLISH_READY_EN_Min (0x0UL)
  #define RADIO_PUBLISH_READY_EN_Max (0x1UL)
  #define RADIO_PUBLISH_READY_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_READY_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_TXREADY: Publish configuration for event TXREADY */
  #define RADIO_PUBLISH_TXREADY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event TXREADY will publish to */
  #define RADIO_PUBLISH_TXREADY_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_TXREADY_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_TXREADY_CHIDX_Pos)
  #define RADIO_PUBLISH_TXREADY_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_TXREADY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_TXREADY_EN_Pos (31UL)
  #define RADIO_PUBLISH_TXREADY_EN_Msk (0x1UL << RADIO_PUBLISH_TXREADY_EN_Pos)
  #define RADIO_PUBLISH_TXREADY_EN_Min (0x0UL)
  #define RADIO_PUBLISH_TXREADY_EN_Max (0x1UL)
  #define RADIO_PUBLISH_TXREADY_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_TXREADY_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_RXREADY: Publish configuration for event RXREADY */
  #define RADIO_PUBLISH_RXREADY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RXREADY will publish to */
  #define RADIO_PUBLISH_RXREADY_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_RXREADY_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_RXREADY_CHIDX_Pos)
  #define RADIO_PUBLISH_RXREADY_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_RXREADY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_RXREADY_EN_Pos (31UL)
  #define RADIO_PUBLISH_RXREADY_EN_Msk (0x1UL << RADIO_PUBLISH_RXREADY_EN_Pos)
  #define RADIO_PUBLISH_RXREADY_EN_Min (0x0UL)
  #define RADIO_PUBLISH_RXREADY_EN_Max (0x1UL)
  #define RADIO_PUBLISH_RXREADY_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_RXREADY_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_ADDRESS: Publish configuration for event ADDRESS */
  #define RADIO_PUBLISH_ADDRESS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ADDRESS will publish to */
  #define RADIO_PUBLISH_ADDRESS_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_ADDRESS_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_ADDRESS_CHIDX_Pos)
  #define RADIO_PUBLISH_ADDRESS_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_ADDRESS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_ADDRESS_EN_Pos (31UL)
  #define RADIO_PUBLISH_ADDRESS_EN_Msk (0x1UL << RADIO_PUBLISH_ADDRESS_EN_Pos)
  #define RADIO_PUBLISH_ADDRESS_EN_Min (0x0UL)
  #define RADIO_PUBLISH_ADDRESS_EN_Max (0x1UL)
  #define RADIO_PUBLISH_ADDRESS_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_ADDRESS_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_FRAMESTART: Publish configuration for event FRAMESTART */
  #define RADIO_PUBLISH_FRAMESTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event FRAMESTART will publish to */
  #define RADIO_PUBLISH_FRAMESTART_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_FRAMESTART_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_FRAMESTART_CHIDX_Pos)
  #define RADIO_PUBLISH_FRAMESTART_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_FRAMESTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_FRAMESTART_EN_Pos (31UL)
  #define RADIO_PUBLISH_FRAMESTART_EN_Msk (0x1UL << RADIO_PUBLISH_FRAMESTART_EN_Pos)
  #define RADIO_PUBLISH_FRAMESTART_EN_Min (0x0UL)
  #define RADIO_PUBLISH_FRAMESTART_EN_Max (0x1UL)
  #define RADIO_PUBLISH_FRAMESTART_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_FRAMESTART_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_PAYLOAD: Publish configuration for event PAYLOAD */
  #define RADIO_PUBLISH_PAYLOAD_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event PAYLOAD will publish to */
  #define RADIO_PUBLISH_PAYLOAD_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_PAYLOAD_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_PAYLOAD_CHIDX_Pos)
  #define RADIO_PUBLISH_PAYLOAD_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_PAYLOAD_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_PAYLOAD_EN_Pos (31UL)
  #define RADIO_PUBLISH_PAYLOAD_EN_Msk (0x1UL << RADIO_PUBLISH_PAYLOAD_EN_Pos)
  #define RADIO_PUBLISH_PAYLOAD_EN_Min (0x0UL)
  #define RADIO_PUBLISH_PAYLOAD_EN_Max (0x1UL)
  #define RADIO_PUBLISH_PAYLOAD_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_PAYLOAD_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_END: Publish configuration for event END */
  #define RADIO_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define RADIO_PUBLISH_END_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_END_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_END_CHIDX_Pos)
  #define RADIO_PUBLISH_END_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_END_EN_Pos (31UL)
  #define RADIO_PUBLISH_END_EN_Msk (0x1UL << RADIO_PUBLISH_END_EN_Pos)
  #define RADIO_PUBLISH_END_EN_Min (0x0UL)
  #define RADIO_PUBLISH_END_EN_Max (0x1UL)
  #define RADIO_PUBLISH_END_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_END_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_PHYEND: Publish configuration for event PHYEND */
  #define RADIO_PUBLISH_PHYEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event PHYEND will publish to */
  #define RADIO_PUBLISH_PHYEND_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_PHYEND_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_PHYEND_CHIDX_Pos)
  #define RADIO_PUBLISH_PHYEND_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_PHYEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_PHYEND_EN_Pos (31UL)
  #define RADIO_PUBLISH_PHYEND_EN_Msk (0x1UL << RADIO_PUBLISH_PHYEND_EN_Pos)
  #define RADIO_PUBLISH_PHYEND_EN_Min (0x0UL)
  #define RADIO_PUBLISH_PHYEND_EN_Max (0x1UL)
  #define RADIO_PUBLISH_PHYEND_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_PHYEND_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_DISABLED: Publish configuration for event DISABLED */
  #define RADIO_PUBLISH_DISABLED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DISABLED will publish to */
  #define RADIO_PUBLISH_DISABLED_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_DISABLED_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_DISABLED_CHIDX_Pos)
  #define RADIO_PUBLISH_DISABLED_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_DISABLED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_DISABLED_EN_Pos (31UL)
  #define RADIO_PUBLISH_DISABLED_EN_Msk (0x1UL << RADIO_PUBLISH_DISABLED_EN_Pos)
  #define RADIO_PUBLISH_DISABLED_EN_Min (0x0UL)
  #define RADIO_PUBLISH_DISABLED_EN_Max (0x1UL)
  #define RADIO_PUBLISH_DISABLED_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_DISABLED_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_DEVMATCH: Publish configuration for event DEVMATCH */
  #define RADIO_PUBLISH_DEVMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DEVMATCH will publish to */
  #define RADIO_PUBLISH_DEVMATCH_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_DEVMATCH_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_DEVMATCH_CHIDX_Pos)
  #define RADIO_PUBLISH_DEVMATCH_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_DEVMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_DEVMATCH_EN_Pos (31UL)
  #define RADIO_PUBLISH_DEVMATCH_EN_Msk (0x1UL << RADIO_PUBLISH_DEVMATCH_EN_Pos)
  #define RADIO_PUBLISH_DEVMATCH_EN_Min (0x0UL)
  #define RADIO_PUBLISH_DEVMATCH_EN_Max (0x1UL)
  #define RADIO_PUBLISH_DEVMATCH_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_DEVMATCH_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_DEVMISS: Publish configuration for event DEVMISS */
  #define RADIO_PUBLISH_DEVMISS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DEVMISS will publish to */
  #define RADIO_PUBLISH_DEVMISS_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_DEVMISS_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_DEVMISS_CHIDX_Pos)
  #define RADIO_PUBLISH_DEVMISS_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_DEVMISS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_DEVMISS_EN_Pos (31UL)
  #define RADIO_PUBLISH_DEVMISS_EN_Msk (0x1UL << RADIO_PUBLISH_DEVMISS_EN_Pos)
  #define RADIO_PUBLISH_DEVMISS_EN_Min (0x0UL)
  #define RADIO_PUBLISH_DEVMISS_EN_Max (0x1UL)
  #define RADIO_PUBLISH_DEVMISS_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_DEVMISS_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_CRCOK: Publish configuration for event CRCOK */
  #define RADIO_PUBLISH_CRCOK_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CRCOK will publish to */
  #define RADIO_PUBLISH_CRCOK_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_CRCOK_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CRCOK_CHIDX_Pos)
  #define RADIO_PUBLISH_CRCOK_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_CRCOK_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CRCOK_EN_Pos (31UL)
  #define RADIO_PUBLISH_CRCOK_EN_Msk (0x1UL << RADIO_PUBLISH_CRCOK_EN_Pos)
  #define RADIO_PUBLISH_CRCOK_EN_Min (0x0UL)
  #define RADIO_PUBLISH_CRCOK_EN_Max (0x1UL)
  #define RADIO_PUBLISH_CRCOK_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_CRCOK_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_CRCERROR: Publish configuration for event CRCERROR */
  #define RADIO_PUBLISH_CRCERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CRCERROR will publish to */
  #define RADIO_PUBLISH_CRCERROR_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_CRCERROR_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CRCERROR_CHIDX_Pos)
  #define RADIO_PUBLISH_CRCERROR_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_CRCERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CRCERROR_EN_Pos (31UL)
  #define RADIO_PUBLISH_CRCERROR_EN_Msk (0x1UL << RADIO_PUBLISH_CRCERROR_EN_Pos)
  #define RADIO_PUBLISH_CRCERROR_EN_Min (0x0UL)
  #define RADIO_PUBLISH_CRCERROR_EN_Max (0x1UL)
  #define RADIO_PUBLISH_CRCERROR_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_CRCERROR_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_BCMATCH: Publish configuration for event BCMATCH */
  #define RADIO_PUBLISH_BCMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BCMATCH will publish to */
  #define RADIO_PUBLISH_BCMATCH_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_BCMATCH_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_BCMATCH_CHIDX_Pos)
  #define RADIO_PUBLISH_BCMATCH_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_BCMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_BCMATCH_EN_Pos (31UL)
  #define RADIO_PUBLISH_BCMATCH_EN_Msk (0x1UL << RADIO_PUBLISH_BCMATCH_EN_Pos)
  #define RADIO_PUBLISH_BCMATCH_EN_Min (0x0UL)
  #define RADIO_PUBLISH_BCMATCH_EN_Max (0x1UL)
  #define RADIO_PUBLISH_BCMATCH_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_BCMATCH_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_EDEND: Publish configuration for event EDEND */
  #define RADIO_PUBLISH_EDEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event EDEND will publish to */
  #define RADIO_PUBLISH_EDEND_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_EDEND_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_EDEND_CHIDX_Pos)
  #define RADIO_PUBLISH_EDEND_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_EDEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_EDEND_EN_Pos (31UL)
  #define RADIO_PUBLISH_EDEND_EN_Msk (0x1UL << RADIO_PUBLISH_EDEND_EN_Pos)
  #define RADIO_PUBLISH_EDEND_EN_Min (0x0UL)
  #define RADIO_PUBLISH_EDEND_EN_Max (0x1UL)
  #define RADIO_PUBLISH_EDEND_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_EDEND_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_EDSTOPPED: Publish configuration for event EDSTOPPED */
  #define RADIO_PUBLISH_EDSTOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event EDSTOPPED will publish to */
  #define RADIO_PUBLISH_EDSTOPPED_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_EDSTOPPED_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_EDSTOPPED_CHIDX_Pos)
  #define RADIO_PUBLISH_EDSTOPPED_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_EDSTOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_EDSTOPPED_EN_Pos (31UL)
  #define RADIO_PUBLISH_EDSTOPPED_EN_Msk (0x1UL << RADIO_PUBLISH_EDSTOPPED_EN_Pos)
  #define RADIO_PUBLISH_EDSTOPPED_EN_Min (0x0UL)
  #define RADIO_PUBLISH_EDSTOPPED_EN_Max (0x1UL)
  #define RADIO_PUBLISH_EDSTOPPED_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_EDSTOPPED_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_CCAIDLE: Publish configuration for event CCAIDLE */
  #define RADIO_PUBLISH_CCAIDLE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CCAIDLE will publish to */
  #define RADIO_PUBLISH_CCAIDLE_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_CCAIDLE_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CCAIDLE_CHIDX_Pos)
  #define RADIO_PUBLISH_CCAIDLE_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_CCAIDLE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CCAIDLE_EN_Pos (31UL)
  #define RADIO_PUBLISH_CCAIDLE_EN_Msk (0x1UL << RADIO_PUBLISH_CCAIDLE_EN_Pos)
  #define RADIO_PUBLISH_CCAIDLE_EN_Min (0x0UL)
  #define RADIO_PUBLISH_CCAIDLE_EN_Max (0x1UL)
  #define RADIO_PUBLISH_CCAIDLE_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_CCAIDLE_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_CCABUSY: Publish configuration for event CCABUSY */
  #define RADIO_PUBLISH_CCABUSY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CCABUSY will publish to */
  #define RADIO_PUBLISH_CCABUSY_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_CCABUSY_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CCABUSY_CHIDX_Pos)
  #define RADIO_PUBLISH_CCABUSY_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_CCABUSY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CCABUSY_EN_Pos (31UL)
  #define RADIO_PUBLISH_CCABUSY_EN_Msk (0x1UL << RADIO_PUBLISH_CCABUSY_EN_Pos)
  #define RADIO_PUBLISH_CCABUSY_EN_Min (0x0UL)
  #define RADIO_PUBLISH_CCABUSY_EN_Max (0x1UL)
  #define RADIO_PUBLISH_CCABUSY_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_CCABUSY_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_CCASTOPPED: Publish configuration for event CCASTOPPED */
  #define RADIO_PUBLISH_CCASTOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CCASTOPPED will publish to */
  #define RADIO_PUBLISH_CCASTOPPED_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_CCASTOPPED_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CCASTOPPED_CHIDX_Pos)
  #define RADIO_PUBLISH_CCASTOPPED_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_CCASTOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CCASTOPPED_EN_Pos (31UL)
  #define RADIO_PUBLISH_CCASTOPPED_EN_Msk (0x1UL << RADIO_PUBLISH_CCASTOPPED_EN_Pos)
  #define RADIO_PUBLISH_CCASTOPPED_EN_Min (0x0UL)
  #define RADIO_PUBLISH_CCASTOPPED_EN_Max (0x1UL)
  #define RADIO_PUBLISH_CCASTOPPED_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_CCASTOPPED_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_RATEBOOST: Publish configuration for event RATEBOOST */
  #define RADIO_PUBLISH_RATEBOOST_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RATEBOOST will publish to */
  #define RADIO_PUBLISH_RATEBOOST_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_RATEBOOST_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_RATEBOOST_CHIDX_Pos)
  #define RADIO_PUBLISH_RATEBOOST_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_RATEBOOST_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_RATEBOOST_EN_Pos (31UL)
  #define RADIO_PUBLISH_RATEBOOST_EN_Msk (0x1UL << RADIO_PUBLISH_RATEBOOST_EN_Pos)
  #define RADIO_PUBLISH_RATEBOOST_EN_Min (0x0UL)
  #define RADIO_PUBLISH_RATEBOOST_EN_Max (0x1UL)
  #define RADIO_PUBLISH_RATEBOOST_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_RATEBOOST_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_MHRMATCH: Publish configuration for event MHRMATCH */
  #define RADIO_PUBLISH_MHRMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event MHRMATCH will publish to */
  #define RADIO_PUBLISH_MHRMATCH_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_MHRMATCH_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_MHRMATCH_CHIDX_Pos)
  #define RADIO_PUBLISH_MHRMATCH_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_MHRMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_MHRMATCH_EN_Pos (31UL)
  #define RADIO_PUBLISH_MHRMATCH_EN_Msk (0x1UL << RADIO_PUBLISH_MHRMATCH_EN_Pos)
  #define RADIO_PUBLISH_MHRMATCH_EN_Min (0x0UL)
  #define RADIO_PUBLISH_MHRMATCH_EN_Max (0x1UL)
  #define RADIO_PUBLISH_MHRMATCH_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_MHRMATCH_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_SYNC: Publish configuration for event SYNC */
  #define RADIO_PUBLISH_SYNC_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SYNC will publish to */
  #define RADIO_PUBLISH_SYNC_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_SYNC_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_SYNC_CHIDX_Pos)
  #define RADIO_PUBLISH_SYNC_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_SYNC_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_SYNC_EN_Pos (31UL)
  #define RADIO_PUBLISH_SYNC_EN_Msk (0x1UL << RADIO_PUBLISH_SYNC_EN_Pos)
  #define RADIO_PUBLISH_SYNC_EN_Min (0x0UL)
  #define RADIO_PUBLISH_SYNC_EN_Max (0x1UL)
  #define RADIO_PUBLISH_SYNC_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_SYNC_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_CTEPRESENT: Publish configuration for event CTEPRESENT */
  #define RADIO_PUBLISH_CTEPRESENT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CTEPRESENT will publish to */
  #define RADIO_PUBLISH_CTEPRESENT_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_CTEPRESENT_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CTEPRESENT_CHIDX_Pos)
  #define RADIO_PUBLISH_CTEPRESENT_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_CTEPRESENT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CTEPRESENT_EN_Pos (31UL)
  #define RADIO_PUBLISH_CTEPRESENT_EN_Msk (0x1UL << RADIO_PUBLISH_CTEPRESENT_EN_Pos)
  #define RADIO_PUBLISH_CTEPRESENT_EN_Min (0x0UL)
  #define RADIO_PUBLISH_CTEPRESENT_EN_Max (0x1UL)
  #define RADIO_PUBLISH_CTEPRESENT_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_CTEPRESENT_EN_Enabled (0x1UL)


/* RADIO_SHORTS: Shortcuts between local events and tasks */
  #define RADIO_SHORTS_ResetValue (0x00000000UL)

/* READY_START @Bit 0 : Shortcut between event READY and task START */
  #define RADIO_SHORTS_READY_START_Pos (0UL)
  #define RADIO_SHORTS_READY_START_Msk (0x1UL << RADIO_SHORTS_READY_START_Pos)
  #define RADIO_SHORTS_READY_START_Min (0x0UL)
  #define RADIO_SHORTS_READY_START_Max (0x1UL)
  #define RADIO_SHORTS_READY_START_Disabled (0x0UL)
  #define RADIO_SHORTS_READY_START_Enabled (0x1UL)

/* DISABLED_TXEN @Bit 2 : Shortcut between event DISABLED and task TXEN */
  #define RADIO_SHORTS_DISABLED_TXEN_Pos (2UL)
  #define RADIO_SHORTS_DISABLED_TXEN_Msk (0x1UL << RADIO_SHORTS_DISABLED_TXEN_Pos)
  #define RADIO_SHORTS_DISABLED_TXEN_Min (0x0UL)
  #define RADIO_SHORTS_DISABLED_TXEN_Max (0x1UL)
  #define RADIO_SHORTS_DISABLED_TXEN_Disabled (0x0UL)
  #define RADIO_SHORTS_DISABLED_TXEN_Enabled (0x1UL)

/* DISABLED_RXEN @Bit 3 : Shortcut between event DISABLED and task RXEN */
  #define RADIO_SHORTS_DISABLED_RXEN_Pos (3UL)
  #define RADIO_SHORTS_DISABLED_RXEN_Msk (0x1UL << RADIO_SHORTS_DISABLED_RXEN_Pos)
  #define RADIO_SHORTS_DISABLED_RXEN_Min (0x0UL)
  #define RADIO_SHORTS_DISABLED_RXEN_Max (0x1UL)
  #define RADIO_SHORTS_DISABLED_RXEN_Disabled (0x0UL)
  #define RADIO_SHORTS_DISABLED_RXEN_Enabled (0x1UL)

/* ADDRESS_RSSISTART @Bit 4 : Shortcut between event ADDRESS and task RSSISTART */
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Pos (4UL)
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Msk (0x1UL << RADIO_SHORTS_ADDRESS_RSSISTART_Pos) /*!< Bit mask of ADDRESS_RSSISTART
                                                                            field.*/
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Min (0x0UL)
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Max (0x1UL)
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Disabled (0x0UL)
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Enabled (0x1UL)

/* END_START @Bit 5 : Shortcut between event END and task START */
  #define RADIO_SHORTS_END_START_Pos (5UL)
  #define RADIO_SHORTS_END_START_Msk (0x1UL << RADIO_SHORTS_END_START_Pos)
  #define RADIO_SHORTS_END_START_Min (0x0UL)
  #define RADIO_SHORTS_END_START_Max (0x1UL)
  #define RADIO_SHORTS_END_START_Disabled (0x0UL)
  #define RADIO_SHORTS_END_START_Enabled (0x1UL)

/* ADDRESS_BCSTART @Bit 6 : Shortcut between event ADDRESS and task BCSTART */
  #define RADIO_SHORTS_ADDRESS_BCSTART_Pos (6UL)
  #define RADIO_SHORTS_ADDRESS_BCSTART_Msk (0x1UL << RADIO_SHORTS_ADDRESS_BCSTART_Pos)
  #define RADIO_SHORTS_ADDRESS_BCSTART_Min (0x0UL)
  #define RADIO_SHORTS_ADDRESS_BCSTART_Max (0x1UL)
  #define RADIO_SHORTS_ADDRESS_BCSTART_Disabled (0x0UL)
  #define RADIO_SHORTS_ADDRESS_BCSTART_Enabled (0x1UL)

/* RXREADY_CCASTART @Bit 10 : Shortcut between event RXREADY and task CCASTART */
  #define RADIO_SHORTS_RXREADY_CCASTART_Pos (10UL)
  #define RADIO_SHORTS_RXREADY_CCASTART_Msk (0x1UL << RADIO_SHORTS_RXREADY_CCASTART_Pos) /*!< Bit mask of RXREADY_CCASTART
                                                                            field.*/
  #define RADIO_SHORTS_RXREADY_CCASTART_Min (0x0UL)
  #define RADIO_SHORTS_RXREADY_CCASTART_Max (0x1UL)
  #define RADIO_SHORTS_RXREADY_CCASTART_Disabled (0x0UL)
  #define RADIO_SHORTS_RXREADY_CCASTART_Enabled (0x1UL)

/* CCAIDLE_TXEN @Bit 11 : Shortcut between event CCAIDLE and task TXEN */
  #define RADIO_SHORTS_CCAIDLE_TXEN_Pos (11UL)
  #define RADIO_SHORTS_CCAIDLE_TXEN_Msk (0x1UL << RADIO_SHORTS_CCAIDLE_TXEN_Pos)
  #define RADIO_SHORTS_CCAIDLE_TXEN_Min (0x0UL)
  #define RADIO_SHORTS_CCAIDLE_TXEN_Max (0x1UL)
  #define RADIO_SHORTS_CCAIDLE_TXEN_Disabled (0x0UL)
  #define RADIO_SHORTS_CCAIDLE_TXEN_Enabled (0x1UL)

/* CCABUSY_DISABLE @Bit 12 : Shortcut between event CCABUSY and task DISABLE */
  #define RADIO_SHORTS_CCABUSY_DISABLE_Pos (12UL)
  #define RADIO_SHORTS_CCABUSY_DISABLE_Msk (0x1UL << RADIO_SHORTS_CCABUSY_DISABLE_Pos)
  #define RADIO_SHORTS_CCABUSY_DISABLE_Min (0x0UL)
  #define RADIO_SHORTS_CCABUSY_DISABLE_Max (0x1UL)
  #define RADIO_SHORTS_CCABUSY_DISABLE_Disabled (0x0UL)
  #define RADIO_SHORTS_CCABUSY_DISABLE_Enabled (0x1UL)

/* FRAMESTART_BCSTART @Bit 13 : Shortcut between event FRAMESTART and task BCSTART */
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Pos (13UL)
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Msk (0x1UL << RADIO_SHORTS_FRAMESTART_BCSTART_Pos) /*!< Bit mask of FRAMESTART_BCSTART
                                                                            field.*/
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Min (0x0UL)
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Max (0x1UL)
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Disabled (0x0UL)
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Enabled (0x1UL)

/* READY_EDSTART @Bit 14 : Shortcut between event READY and task EDSTART */
  #define RADIO_SHORTS_READY_EDSTART_Pos (14UL)
  #define RADIO_SHORTS_READY_EDSTART_Msk (0x1UL << RADIO_SHORTS_READY_EDSTART_Pos)
  #define RADIO_SHORTS_READY_EDSTART_Min (0x0UL)
  #define RADIO_SHORTS_READY_EDSTART_Max (0x1UL)
  #define RADIO_SHORTS_READY_EDSTART_Disabled (0x0UL)
  #define RADIO_SHORTS_READY_EDSTART_Enabled (0x1UL)

/* EDEND_DISABLE @Bit 15 : Shortcut between event EDEND and task DISABLE */
  #define RADIO_SHORTS_EDEND_DISABLE_Pos (15UL)
  #define RADIO_SHORTS_EDEND_DISABLE_Msk (0x1UL << RADIO_SHORTS_EDEND_DISABLE_Pos)
  #define RADIO_SHORTS_EDEND_DISABLE_Min (0x0UL)
  #define RADIO_SHORTS_EDEND_DISABLE_Max (0x1UL)
  #define RADIO_SHORTS_EDEND_DISABLE_Disabled (0x0UL)
  #define RADIO_SHORTS_EDEND_DISABLE_Enabled (0x1UL)

/* CCAIDLE_STOP @Bit 16 : Shortcut between event CCAIDLE and task STOP */
  #define RADIO_SHORTS_CCAIDLE_STOP_Pos (16UL)
  #define RADIO_SHORTS_CCAIDLE_STOP_Msk (0x1UL << RADIO_SHORTS_CCAIDLE_STOP_Pos)
  #define RADIO_SHORTS_CCAIDLE_STOP_Min (0x0UL)
  #define RADIO_SHORTS_CCAIDLE_STOP_Max (0x1UL)
  #define RADIO_SHORTS_CCAIDLE_STOP_Disabled (0x0UL)
  #define RADIO_SHORTS_CCAIDLE_STOP_Enabled (0x1UL)

/* TXREADY_START @Bit 17 : Shortcut between event TXREADY and task START */
  #define RADIO_SHORTS_TXREADY_START_Pos (17UL)
  #define RADIO_SHORTS_TXREADY_START_Msk (0x1UL << RADIO_SHORTS_TXREADY_START_Pos)
  #define RADIO_SHORTS_TXREADY_START_Min (0x0UL)
  #define RADIO_SHORTS_TXREADY_START_Max (0x1UL)
  #define RADIO_SHORTS_TXREADY_START_Disabled (0x0UL)
  #define RADIO_SHORTS_TXREADY_START_Enabled (0x1UL)

/* RXREADY_START @Bit 18 : Shortcut between event RXREADY and task START */
  #define RADIO_SHORTS_RXREADY_START_Pos (18UL)
  #define RADIO_SHORTS_RXREADY_START_Msk (0x1UL << RADIO_SHORTS_RXREADY_START_Pos)
  #define RADIO_SHORTS_RXREADY_START_Min (0x0UL)
  #define RADIO_SHORTS_RXREADY_START_Max (0x1UL)
  #define RADIO_SHORTS_RXREADY_START_Disabled (0x0UL)
  #define RADIO_SHORTS_RXREADY_START_Enabled (0x1UL)

/* PHYEND_DISABLE @Bit 19 : Shortcut between event PHYEND and task DISABLE */
  #define RADIO_SHORTS_PHYEND_DISABLE_Pos (19UL)
  #define RADIO_SHORTS_PHYEND_DISABLE_Msk (0x1UL << RADIO_SHORTS_PHYEND_DISABLE_Pos)
  #define RADIO_SHORTS_PHYEND_DISABLE_Min (0x0UL)
  #define RADIO_SHORTS_PHYEND_DISABLE_Max (0x1UL)
  #define RADIO_SHORTS_PHYEND_DISABLE_Disabled (0x0UL)
  #define RADIO_SHORTS_PHYEND_DISABLE_Enabled (0x1UL)

/* PHYEND_START @Bit 20 : Shortcut between event PHYEND and task START */
  #define RADIO_SHORTS_PHYEND_START_Pos (20UL)
  #define RADIO_SHORTS_PHYEND_START_Msk (0x1UL << RADIO_SHORTS_PHYEND_START_Pos)
  #define RADIO_SHORTS_PHYEND_START_Min (0x0UL)
  #define RADIO_SHORTS_PHYEND_START_Max (0x1UL)
  #define RADIO_SHORTS_PHYEND_START_Disabled (0x0UL)
  #define RADIO_SHORTS_PHYEND_START_Enabled (0x1UL)


/* RADIO_INTENSET00: Enable interrupt */
  #define RADIO_INTENSET00_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to enable interrupt for event READY */
  #define RADIO_INTENSET00_READY_Pos (0UL)
  #define RADIO_INTENSET00_READY_Msk (0x1UL << RADIO_INTENSET00_READY_Pos)
  #define RADIO_INTENSET00_READY_Min (0x0UL)
  #define RADIO_INTENSET00_READY_Max (0x1UL)
  #define RADIO_INTENSET00_READY_Set (0x1UL)
  #define RADIO_INTENSET00_READY_Disabled (0x0UL)
  #define RADIO_INTENSET00_READY_Enabled (0x1UL)

/* TXREADY @Bit 1 : Write '1' to enable interrupt for event TXREADY */
  #define RADIO_INTENSET00_TXREADY_Pos (1UL)
  #define RADIO_INTENSET00_TXREADY_Msk (0x1UL << RADIO_INTENSET00_TXREADY_Pos)
  #define RADIO_INTENSET00_TXREADY_Min (0x0UL)
  #define RADIO_INTENSET00_TXREADY_Max (0x1UL)
  #define RADIO_INTENSET00_TXREADY_Set (0x1UL)
  #define RADIO_INTENSET00_TXREADY_Disabled (0x0UL)
  #define RADIO_INTENSET00_TXREADY_Enabled (0x1UL)

/* RXREADY @Bit 2 : Write '1' to enable interrupt for event RXREADY */
  #define RADIO_INTENSET00_RXREADY_Pos (2UL)
  #define RADIO_INTENSET00_RXREADY_Msk (0x1UL << RADIO_INTENSET00_RXREADY_Pos)
  #define RADIO_INTENSET00_RXREADY_Min (0x0UL)
  #define RADIO_INTENSET00_RXREADY_Max (0x1UL)
  #define RADIO_INTENSET00_RXREADY_Set (0x1UL)
  #define RADIO_INTENSET00_RXREADY_Disabled (0x0UL)
  #define RADIO_INTENSET00_RXREADY_Enabled (0x1UL)

/* ADDRESS @Bit 3 : Write '1' to enable interrupt for event ADDRESS */
  #define RADIO_INTENSET00_ADDRESS_Pos (3UL)
  #define RADIO_INTENSET00_ADDRESS_Msk (0x1UL << RADIO_INTENSET00_ADDRESS_Pos)
  #define RADIO_INTENSET00_ADDRESS_Min (0x0UL)
  #define RADIO_INTENSET00_ADDRESS_Max (0x1UL)
  #define RADIO_INTENSET00_ADDRESS_Set (0x1UL)
  #define RADIO_INTENSET00_ADDRESS_Disabled (0x0UL)
  #define RADIO_INTENSET00_ADDRESS_Enabled (0x1UL)

/* FRAMESTART @Bit 4 : Write '1' to enable interrupt for event FRAMESTART */
  #define RADIO_INTENSET00_FRAMESTART_Pos (4UL)
  #define RADIO_INTENSET00_FRAMESTART_Msk (0x1UL << RADIO_INTENSET00_FRAMESTART_Pos)
  #define RADIO_INTENSET00_FRAMESTART_Min (0x0UL)
  #define RADIO_INTENSET00_FRAMESTART_Max (0x1UL)
  #define RADIO_INTENSET00_FRAMESTART_Set (0x1UL)
  #define RADIO_INTENSET00_FRAMESTART_Disabled (0x0UL)
  #define RADIO_INTENSET00_FRAMESTART_Enabled (0x1UL)

/* PAYLOAD @Bit 5 : Write '1' to enable interrupt for event PAYLOAD */
  #define RADIO_INTENSET00_PAYLOAD_Pos (5UL)
  #define RADIO_INTENSET00_PAYLOAD_Msk (0x1UL << RADIO_INTENSET00_PAYLOAD_Pos)
  #define RADIO_INTENSET00_PAYLOAD_Min (0x0UL)
  #define RADIO_INTENSET00_PAYLOAD_Max (0x1UL)
  #define RADIO_INTENSET00_PAYLOAD_Set (0x1UL)
  #define RADIO_INTENSET00_PAYLOAD_Disabled (0x0UL)
  #define RADIO_INTENSET00_PAYLOAD_Enabled (0x1UL)

/* END @Bit 6 : Write '1' to enable interrupt for event END */
  #define RADIO_INTENSET00_END_Pos (6UL)
  #define RADIO_INTENSET00_END_Msk (0x1UL << RADIO_INTENSET00_END_Pos)
  #define RADIO_INTENSET00_END_Min (0x0UL)
  #define RADIO_INTENSET00_END_Max (0x1UL)
  #define RADIO_INTENSET00_END_Set (0x1UL)
  #define RADIO_INTENSET00_END_Disabled (0x0UL)
  #define RADIO_INTENSET00_END_Enabled (0x1UL)

/* PHYEND @Bit 7 : Write '1' to enable interrupt for event PHYEND */
  #define RADIO_INTENSET00_PHYEND_Pos (7UL)
  #define RADIO_INTENSET00_PHYEND_Msk (0x1UL << RADIO_INTENSET00_PHYEND_Pos)
  #define RADIO_INTENSET00_PHYEND_Min (0x0UL)
  #define RADIO_INTENSET00_PHYEND_Max (0x1UL)
  #define RADIO_INTENSET00_PHYEND_Set (0x1UL)
  #define RADIO_INTENSET00_PHYEND_Disabled (0x0UL)
  #define RADIO_INTENSET00_PHYEND_Enabled (0x1UL)

/* DISABLED @Bit 8 : Write '1' to enable interrupt for event DISABLED */
  #define RADIO_INTENSET00_DISABLED_Pos (8UL)
  #define RADIO_INTENSET00_DISABLED_Msk (0x1UL << RADIO_INTENSET00_DISABLED_Pos)
  #define RADIO_INTENSET00_DISABLED_Min (0x0UL)
  #define RADIO_INTENSET00_DISABLED_Max (0x1UL)
  #define RADIO_INTENSET00_DISABLED_Set (0x1UL)
  #define RADIO_INTENSET00_DISABLED_Disabled (0x0UL)
  #define RADIO_INTENSET00_DISABLED_Enabled (0x1UL)

/* DEVMATCH @Bit 9 : Write '1' to enable interrupt for event DEVMATCH */
  #define RADIO_INTENSET00_DEVMATCH_Pos (9UL)
  #define RADIO_INTENSET00_DEVMATCH_Msk (0x1UL << RADIO_INTENSET00_DEVMATCH_Pos)
  #define RADIO_INTENSET00_DEVMATCH_Min (0x0UL)
  #define RADIO_INTENSET00_DEVMATCH_Max (0x1UL)
  #define RADIO_INTENSET00_DEVMATCH_Set (0x1UL)
  #define RADIO_INTENSET00_DEVMATCH_Disabled (0x0UL)
  #define RADIO_INTENSET00_DEVMATCH_Enabled (0x1UL)

/* DEVMISS @Bit 10 : Write '1' to enable interrupt for event DEVMISS */
  #define RADIO_INTENSET00_DEVMISS_Pos (10UL)
  #define RADIO_INTENSET00_DEVMISS_Msk (0x1UL << RADIO_INTENSET00_DEVMISS_Pos)
  #define RADIO_INTENSET00_DEVMISS_Min (0x0UL)
  #define RADIO_INTENSET00_DEVMISS_Max (0x1UL)
  #define RADIO_INTENSET00_DEVMISS_Set (0x1UL)
  #define RADIO_INTENSET00_DEVMISS_Disabled (0x0UL)
  #define RADIO_INTENSET00_DEVMISS_Enabled (0x1UL)

/* CRCOK @Bit 11 : Write '1' to enable interrupt for event CRCOK */
  #define RADIO_INTENSET00_CRCOK_Pos (11UL)
  #define RADIO_INTENSET00_CRCOK_Msk (0x1UL << RADIO_INTENSET00_CRCOK_Pos)
  #define RADIO_INTENSET00_CRCOK_Min (0x0UL)
  #define RADIO_INTENSET00_CRCOK_Max (0x1UL)
  #define RADIO_INTENSET00_CRCOK_Set (0x1UL)
  #define RADIO_INTENSET00_CRCOK_Disabled (0x0UL)
  #define RADIO_INTENSET00_CRCOK_Enabled (0x1UL)

/* CRCERROR @Bit 12 : Write '1' to enable interrupt for event CRCERROR */
  #define RADIO_INTENSET00_CRCERROR_Pos (12UL)
  #define RADIO_INTENSET00_CRCERROR_Msk (0x1UL << RADIO_INTENSET00_CRCERROR_Pos)
  #define RADIO_INTENSET00_CRCERROR_Min (0x0UL)
  #define RADIO_INTENSET00_CRCERROR_Max (0x1UL)
  #define RADIO_INTENSET00_CRCERROR_Set (0x1UL)
  #define RADIO_INTENSET00_CRCERROR_Disabled (0x0UL)
  #define RADIO_INTENSET00_CRCERROR_Enabled (0x1UL)

/* BCMATCH @Bit 14 : Write '1' to enable interrupt for event BCMATCH */
  #define RADIO_INTENSET00_BCMATCH_Pos (14UL)
  #define RADIO_INTENSET00_BCMATCH_Msk (0x1UL << RADIO_INTENSET00_BCMATCH_Pos)
  #define RADIO_INTENSET00_BCMATCH_Min (0x0UL)
  #define RADIO_INTENSET00_BCMATCH_Max (0x1UL)
  #define RADIO_INTENSET00_BCMATCH_Set (0x1UL)
  #define RADIO_INTENSET00_BCMATCH_Disabled (0x0UL)
  #define RADIO_INTENSET00_BCMATCH_Enabled (0x1UL)

/* EDEND @Bit 15 : Write '1' to enable interrupt for event EDEND */
  #define RADIO_INTENSET00_EDEND_Pos (15UL)
  #define RADIO_INTENSET00_EDEND_Msk (0x1UL << RADIO_INTENSET00_EDEND_Pos)
  #define RADIO_INTENSET00_EDEND_Min (0x0UL)
  #define RADIO_INTENSET00_EDEND_Max (0x1UL)
  #define RADIO_INTENSET00_EDEND_Set (0x1UL)
  #define RADIO_INTENSET00_EDEND_Disabled (0x0UL)
  #define RADIO_INTENSET00_EDEND_Enabled (0x1UL)

/* EDSTOPPED @Bit 16 : Write '1' to enable interrupt for event EDSTOPPED */
  #define RADIO_INTENSET00_EDSTOPPED_Pos (16UL)
  #define RADIO_INTENSET00_EDSTOPPED_Msk (0x1UL << RADIO_INTENSET00_EDSTOPPED_Pos)
  #define RADIO_INTENSET00_EDSTOPPED_Min (0x0UL)
  #define RADIO_INTENSET00_EDSTOPPED_Max (0x1UL)
  #define RADIO_INTENSET00_EDSTOPPED_Set (0x1UL)
  #define RADIO_INTENSET00_EDSTOPPED_Disabled (0x0UL)
  #define RADIO_INTENSET00_EDSTOPPED_Enabled (0x1UL)

/* CCAIDLE @Bit 17 : Write '1' to enable interrupt for event CCAIDLE */
  #define RADIO_INTENSET00_CCAIDLE_Pos (17UL)
  #define RADIO_INTENSET00_CCAIDLE_Msk (0x1UL << RADIO_INTENSET00_CCAIDLE_Pos)
  #define RADIO_INTENSET00_CCAIDLE_Min (0x0UL)
  #define RADIO_INTENSET00_CCAIDLE_Max (0x1UL)
  #define RADIO_INTENSET00_CCAIDLE_Set (0x1UL)
  #define RADIO_INTENSET00_CCAIDLE_Disabled (0x0UL)
  #define RADIO_INTENSET00_CCAIDLE_Enabled (0x1UL)

/* CCABUSY @Bit 18 : Write '1' to enable interrupt for event CCABUSY */
  #define RADIO_INTENSET00_CCABUSY_Pos (18UL)
  #define RADIO_INTENSET00_CCABUSY_Msk (0x1UL << RADIO_INTENSET00_CCABUSY_Pos)
  #define RADIO_INTENSET00_CCABUSY_Min (0x0UL)
  #define RADIO_INTENSET00_CCABUSY_Max (0x1UL)
  #define RADIO_INTENSET00_CCABUSY_Set (0x1UL)
  #define RADIO_INTENSET00_CCABUSY_Disabled (0x0UL)
  #define RADIO_INTENSET00_CCABUSY_Enabled (0x1UL)

/* CCASTOPPED @Bit 19 : Write '1' to enable interrupt for event CCASTOPPED */
  #define RADIO_INTENSET00_CCASTOPPED_Pos (19UL)
  #define RADIO_INTENSET00_CCASTOPPED_Msk (0x1UL << RADIO_INTENSET00_CCASTOPPED_Pos)
  #define RADIO_INTENSET00_CCASTOPPED_Min (0x0UL)
  #define RADIO_INTENSET00_CCASTOPPED_Max (0x1UL)
  #define RADIO_INTENSET00_CCASTOPPED_Set (0x1UL)
  #define RADIO_INTENSET00_CCASTOPPED_Disabled (0x0UL)
  #define RADIO_INTENSET00_CCASTOPPED_Enabled (0x1UL)

/* RATEBOOST @Bit 20 : Write '1' to enable interrupt for event RATEBOOST */
  #define RADIO_INTENSET00_RATEBOOST_Pos (20UL)
  #define RADIO_INTENSET00_RATEBOOST_Msk (0x1UL << RADIO_INTENSET00_RATEBOOST_Pos)
  #define RADIO_INTENSET00_RATEBOOST_Min (0x0UL)
  #define RADIO_INTENSET00_RATEBOOST_Max (0x1UL)
  #define RADIO_INTENSET00_RATEBOOST_Set (0x1UL)
  #define RADIO_INTENSET00_RATEBOOST_Disabled (0x0UL)
  #define RADIO_INTENSET00_RATEBOOST_Enabled (0x1UL)

/* MHRMATCH @Bit 21 : Write '1' to enable interrupt for event MHRMATCH */
  #define RADIO_INTENSET00_MHRMATCH_Pos (21UL)
  #define RADIO_INTENSET00_MHRMATCH_Msk (0x1UL << RADIO_INTENSET00_MHRMATCH_Pos)
  #define RADIO_INTENSET00_MHRMATCH_Min (0x0UL)
  #define RADIO_INTENSET00_MHRMATCH_Max (0x1UL)
  #define RADIO_INTENSET00_MHRMATCH_Set (0x1UL)
  #define RADIO_INTENSET00_MHRMATCH_Disabled (0x0UL)
  #define RADIO_INTENSET00_MHRMATCH_Enabled (0x1UL)

/* SYNC @Bit 22 : Write '1' to enable interrupt for event SYNC */
  #define RADIO_INTENSET00_SYNC_Pos (22UL)
  #define RADIO_INTENSET00_SYNC_Msk (0x1UL << RADIO_INTENSET00_SYNC_Pos)
  #define RADIO_INTENSET00_SYNC_Min (0x0UL)
  #define RADIO_INTENSET00_SYNC_Max (0x1UL)
  #define RADIO_INTENSET00_SYNC_Set (0x1UL)
  #define RADIO_INTENSET00_SYNC_Disabled (0x0UL)
  #define RADIO_INTENSET00_SYNC_Enabled (0x1UL)

/* CTEPRESENT @Bit 23 : Write '1' to enable interrupt for event CTEPRESENT */
  #define RADIO_INTENSET00_CTEPRESENT_Pos (23UL)
  #define RADIO_INTENSET00_CTEPRESENT_Msk (0x1UL << RADIO_INTENSET00_CTEPRESENT_Pos)
  #define RADIO_INTENSET00_CTEPRESENT_Min (0x0UL)
  #define RADIO_INTENSET00_CTEPRESENT_Max (0x1UL)
  #define RADIO_INTENSET00_CTEPRESENT_Set (0x1UL)
  #define RADIO_INTENSET00_CTEPRESENT_Disabled (0x0UL)
  #define RADIO_INTENSET00_CTEPRESENT_Enabled (0x1UL)


/* RADIO_INTENCLR00: Disable interrupt */
  #define RADIO_INTENCLR00_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to disable interrupt for event READY */
  #define RADIO_INTENCLR00_READY_Pos (0UL)
  #define RADIO_INTENCLR00_READY_Msk (0x1UL << RADIO_INTENCLR00_READY_Pos)
  #define RADIO_INTENCLR00_READY_Min (0x0UL)
  #define RADIO_INTENCLR00_READY_Max (0x1UL)
  #define RADIO_INTENCLR00_READY_Clear (0x1UL)
  #define RADIO_INTENCLR00_READY_Disabled (0x0UL)
  #define RADIO_INTENCLR00_READY_Enabled (0x1UL)

/* TXREADY @Bit 1 : Write '1' to disable interrupt for event TXREADY */
  #define RADIO_INTENCLR00_TXREADY_Pos (1UL)
  #define RADIO_INTENCLR00_TXREADY_Msk (0x1UL << RADIO_INTENCLR00_TXREADY_Pos)
  #define RADIO_INTENCLR00_TXREADY_Min (0x0UL)
  #define RADIO_INTENCLR00_TXREADY_Max (0x1UL)
  #define RADIO_INTENCLR00_TXREADY_Clear (0x1UL)
  #define RADIO_INTENCLR00_TXREADY_Disabled (0x0UL)
  #define RADIO_INTENCLR00_TXREADY_Enabled (0x1UL)

/* RXREADY @Bit 2 : Write '1' to disable interrupt for event RXREADY */
  #define RADIO_INTENCLR00_RXREADY_Pos (2UL)
  #define RADIO_INTENCLR00_RXREADY_Msk (0x1UL << RADIO_INTENCLR00_RXREADY_Pos)
  #define RADIO_INTENCLR00_RXREADY_Min (0x0UL)
  #define RADIO_INTENCLR00_RXREADY_Max (0x1UL)
  #define RADIO_INTENCLR00_RXREADY_Clear (0x1UL)
  #define RADIO_INTENCLR00_RXREADY_Disabled (0x0UL)
  #define RADIO_INTENCLR00_RXREADY_Enabled (0x1UL)

/* ADDRESS @Bit 3 : Write '1' to disable interrupt for event ADDRESS */
  #define RADIO_INTENCLR00_ADDRESS_Pos (3UL)
  #define RADIO_INTENCLR00_ADDRESS_Msk (0x1UL << RADIO_INTENCLR00_ADDRESS_Pos)
  #define RADIO_INTENCLR00_ADDRESS_Min (0x0UL)
  #define RADIO_INTENCLR00_ADDRESS_Max (0x1UL)
  #define RADIO_INTENCLR00_ADDRESS_Clear (0x1UL)
  #define RADIO_INTENCLR00_ADDRESS_Disabled (0x0UL)
  #define RADIO_INTENCLR00_ADDRESS_Enabled (0x1UL)

/* FRAMESTART @Bit 4 : Write '1' to disable interrupt for event FRAMESTART */
  #define RADIO_INTENCLR00_FRAMESTART_Pos (4UL)
  #define RADIO_INTENCLR00_FRAMESTART_Msk (0x1UL << RADIO_INTENCLR00_FRAMESTART_Pos)
  #define RADIO_INTENCLR00_FRAMESTART_Min (0x0UL)
  #define RADIO_INTENCLR00_FRAMESTART_Max (0x1UL)
  #define RADIO_INTENCLR00_FRAMESTART_Clear (0x1UL)
  #define RADIO_INTENCLR00_FRAMESTART_Disabled (0x0UL)
  #define RADIO_INTENCLR00_FRAMESTART_Enabled (0x1UL)

/* PAYLOAD @Bit 5 : Write '1' to disable interrupt for event PAYLOAD */
  #define RADIO_INTENCLR00_PAYLOAD_Pos (5UL)
  #define RADIO_INTENCLR00_PAYLOAD_Msk (0x1UL << RADIO_INTENCLR00_PAYLOAD_Pos)
  #define RADIO_INTENCLR00_PAYLOAD_Min (0x0UL)
  #define RADIO_INTENCLR00_PAYLOAD_Max (0x1UL)
  #define RADIO_INTENCLR00_PAYLOAD_Clear (0x1UL)
  #define RADIO_INTENCLR00_PAYLOAD_Disabled (0x0UL)
  #define RADIO_INTENCLR00_PAYLOAD_Enabled (0x1UL)

/* END @Bit 6 : Write '1' to disable interrupt for event END */
  #define RADIO_INTENCLR00_END_Pos (6UL)
  #define RADIO_INTENCLR00_END_Msk (0x1UL << RADIO_INTENCLR00_END_Pos)
  #define RADIO_INTENCLR00_END_Min (0x0UL)
  #define RADIO_INTENCLR00_END_Max (0x1UL)
  #define RADIO_INTENCLR00_END_Clear (0x1UL)
  #define RADIO_INTENCLR00_END_Disabled (0x0UL)
  #define RADIO_INTENCLR00_END_Enabled (0x1UL)

/* PHYEND @Bit 7 : Write '1' to disable interrupt for event PHYEND */
  #define RADIO_INTENCLR00_PHYEND_Pos (7UL)
  #define RADIO_INTENCLR00_PHYEND_Msk (0x1UL << RADIO_INTENCLR00_PHYEND_Pos)
  #define RADIO_INTENCLR00_PHYEND_Min (0x0UL)
  #define RADIO_INTENCLR00_PHYEND_Max (0x1UL)
  #define RADIO_INTENCLR00_PHYEND_Clear (0x1UL)
  #define RADIO_INTENCLR00_PHYEND_Disabled (0x0UL)
  #define RADIO_INTENCLR00_PHYEND_Enabled (0x1UL)

/* DISABLED @Bit 8 : Write '1' to disable interrupt for event DISABLED */
  #define RADIO_INTENCLR00_DISABLED_Pos (8UL)
  #define RADIO_INTENCLR00_DISABLED_Msk (0x1UL << RADIO_INTENCLR00_DISABLED_Pos)
  #define RADIO_INTENCLR00_DISABLED_Min (0x0UL)
  #define RADIO_INTENCLR00_DISABLED_Max (0x1UL)
  #define RADIO_INTENCLR00_DISABLED_Clear (0x1UL)
  #define RADIO_INTENCLR00_DISABLED_Disabled (0x0UL)
  #define RADIO_INTENCLR00_DISABLED_Enabled (0x1UL)

/* DEVMATCH @Bit 9 : Write '1' to disable interrupt for event DEVMATCH */
  #define RADIO_INTENCLR00_DEVMATCH_Pos (9UL)
  #define RADIO_INTENCLR00_DEVMATCH_Msk (0x1UL << RADIO_INTENCLR00_DEVMATCH_Pos)
  #define RADIO_INTENCLR00_DEVMATCH_Min (0x0UL)
  #define RADIO_INTENCLR00_DEVMATCH_Max (0x1UL)
  #define RADIO_INTENCLR00_DEVMATCH_Clear (0x1UL)
  #define RADIO_INTENCLR00_DEVMATCH_Disabled (0x0UL)
  #define RADIO_INTENCLR00_DEVMATCH_Enabled (0x1UL)

/* DEVMISS @Bit 10 : Write '1' to disable interrupt for event DEVMISS */
  #define RADIO_INTENCLR00_DEVMISS_Pos (10UL)
  #define RADIO_INTENCLR00_DEVMISS_Msk (0x1UL << RADIO_INTENCLR00_DEVMISS_Pos)
  #define RADIO_INTENCLR00_DEVMISS_Min (0x0UL)
  #define RADIO_INTENCLR00_DEVMISS_Max (0x1UL)
  #define RADIO_INTENCLR00_DEVMISS_Clear (0x1UL)
  #define RADIO_INTENCLR00_DEVMISS_Disabled (0x0UL)
  #define RADIO_INTENCLR00_DEVMISS_Enabled (0x1UL)

/* CRCOK @Bit 11 : Write '1' to disable interrupt for event CRCOK */
  #define RADIO_INTENCLR00_CRCOK_Pos (11UL)
  #define RADIO_INTENCLR00_CRCOK_Msk (0x1UL << RADIO_INTENCLR00_CRCOK_Pos)
  #define RADIO_INTENCLR00_CRCOK_Min (0x0UL)
  #define RADIO_INTENCLR00_CRCOK_Max (0x1UL)
  #define RADIO_INTENCLR00_CRCOK_Clear (0x1UL)
  #define RADIO_INTENCLR00_CRCOK_Disabled (0x0UL)
  #define RADIO_INTENCLR00_CRCOK_Enabled (0x1UL)

/* CRCERROR @Bit 12 : Write '1' to disable interrupt for event CRCERROR */
  #define RADIO_INTENCLR00_CRCERROR_Pos (12UL)
  #define RADIO_INTENCLR00_CRCERROR_Msk (0x1UL << RADIO_INTENCLR00_CRCERROR_Pos)
  #define RADIO_INTENCLR00_CRCERROR_Min (0x0UL)
  #define RADIO_INTENCLR00_CRCERROR_Max (0x1UL)
  #define RADIO_INTENCLR00_CRCERROR_Clear (0x1UL)
  #define RADIO_INTENCLR00_CRCERROR_Disabled (0x0UL)
  #define RADIO_INTENCLR00_CRCERROR_Enabled (0x1UL)

/* BCMATCH @Bit 14 : Write '1' to disable interrupt for event BCMATCH */
  #define RADIO_INTENCLR00_BCMATCH_Pos (14UL)
  #define RADIO_INTENCLR00_BCMATCH_Msk (0x1UL << RADIO_INTENCLR00_BCMATCH_Pos)
  #define RADIO_INTENCLR00_BCMATCH_Min (0x0UL)
  #define RADIO_INTENCLR00_BCMATCH_Max (0x1UL)
  #define RADIO_INTENCLR00_BCMATCH_Clear (0x1UL)
  #define RADIO_INTENCLR00_BCMATCH_Disabled (0x0UL)
  #define RADIO_INTENCLR00_BCMATCH_Enabled (0x1UL)

/* EDEND @Bit 15 : Write '1' to disable interrupt for event EDEND */
  #define RADIO_INTENCLR00_EDEND_Pos (15UL)
  #define RADIO_INTENCLR00_EDEND_Msk (0x1UL << RADIO_INTENCLR00_EDEND_Pos)
  #define RADIO_INTENCLR00_EDEND_Min (0x0UL)
  #define RADIO_INTENCLR00_EDEND_Max (0x1UL)
  #define RADIO_INTENCLR00_EDEND_Clear (0x1UL)
  #define RADIO_INTENCLR00_EDEND_Disabled (0x0UL)
  #define RADIO_INTENCLR00_EDEND_Enabled (0x1UL)

/* EDSTOPPED @Bit 16 : Write '1' to disable interrupt for event EDSTOPPED */
  #define RADIO_INTENCLR00_EDSTOPPED_Pos (16UL)
  #define RADIO_INTENCLR00_EDSTOPPED_Msk (0x1UL << RADIO_INTENCLR00_EDSTOPPED_Pos)
  #define RADIO_INTENCLR00_EDSTOPPED_Min (0x0UL)
  #define RADIO_INTENCLR00_EDSTOPPED_Max (0x1UL)
  #define RADIO_INTENCLR00_EDSTOPPED_Clear (0x1UL)
  #define RADIO_INTENCLR00_EDSTOPPED_Disabled (0x0UL)
  #define RADIO_INTENCLR00_EDSTOPPED_Enabled (0x1UL)

/* CCAIDLE @Bit 17 : Write '1' to disable interrupt for event CCAIDLE */
  #define RADIO_INTENCLR00_CCAIDLE_Pos (17UL)
  #define RADIO_INTENCLR00_CCAIDLE_Msk (0x1UL << RADIO_INTENCLR00_CCAIDLE_Pos)
  #define RADIO_INTENCLR00_CCAIDLE_Min (0x0UL)
  #define RADIO_INTENCLR00_CCAIDLE_Max (0x1UL)
  #define RADIO_INTENCLR00_CCAIDLE_Clear (0x1UL)
  #define RADIO_INTENCLR00_CCAIDLE_Disabled (0x0UL)
  #define RADIO_INTENCLR00_CCAIDLE_Enabled (0x1UL)

/* CCABUSY @Bit 18 : Write '1' to disable interrupt for event CCABUSY */
  #define RADIO_INTENCLR00_CCABUSY_Pos (18UL)
  #define RADIO_INTENCLR00_CCABUSY_Msk (0x1UL << RADIO_INTENCLR00_CCABUSY_Pos)
  #define RADIO_INTENCLR00_CCABUSY_Min (0x0UL)
  #define RADIO_INTENCLR00_CCABUSY_Max (0x1UL)
  #define RADIO_INTENCLR00_CCABUSY_Clear (0x1UL)
  #define RADIO_INTENCLR00_CCABUSY_Disabled (0x0UL)
  #define RADIO_INTENCLR00_CCABUSY_Enabled (0x1UL)

/* CCASTOPPED @Bit 19 : Write '1' to disable interrupt for event CCASTOPPED */
  #define RADIO_INTENCLR00_CCASTOPPED_Pos (19UL)
  #define RADIO_INTENCLR00_CCASTOPPED_Msk (0x1UL << RADIO_INTENCLR00_CCASTOPPED_Pos)
  #define RADIO_INTENCLR00_CCASTOPPED_Min (0x0UL)
  #define RADIO_INTENCLR00_CCASTOPPED_Max (0x1UL)
  #define RADIO_INTENCLR00_CCASTOPPED_Clear (0x1UL)
  #define RADIO_INTENCLR00_CCASTOPPED_Disabled (0x0UL)
  #define RADIO_INTENCLR00_CCASTOPPED_Enabled (0x1UL)

/* RATEBOOST @Bit 20 : Write '1' to disable interrupt for event RATEBOOST */
  #define RADIO_INTENCLR00_RATEBOOST_Pos (20UL)
  #define RADIO_INTENCLR00_RATEBOOST_Msk (0x1UL << RADIO_INTENCLR00_RATEBOOST_Pos)
  #define RADIO_INTENCLR00_RATEBOOST_Min (0x0UL)
  #define RADIO_INTENCLR00_RATEBOOST_Max (0x1UL)
  #define RADIO_INTENCLR00_RATEBOOST_Clear (0x1UL)
  #define RADIO_INTENCLR00_RATEBOOST_Disabled (0x0UL)
  #define RADIO_INTENCLR00_RATEBOOST_Enabled (0x1UL)

/* MHRMATCH @Bit 21 : Write '1' to disable interrupt for event MHRMATCH */
  #define RADIO_INTENCLR00_MHRMATCH_Pos (21UL)
  #define RADIO_INTENCLR00_MHRMATCH_Msk (0x1UL << RADIO_INTENCLR00_MHRMATCH_Pos)
  #define RADIO_INTENCLR00_MHRMATCH_Min (0x0UL)
  #define RADIO_INTENCLR00_MHRMATCH_Max (0x1UL)
  #define RADIO_INTENCLR00_MHRMATCH_Clear (0x1UL)
  #define RADIO_INTENCLR00_MHRMATCH_Disabled (0x0UL)
  #define RADIO_INTENCLR00_MHRMATCH_Enabled (0x1UL)

/* SYNC @Bit 22 : Write '1' to disable interrupt for event SYNC */
  #define RADIO_INTENCLR00_SYNC_Pos (22UL)
  #define RADIO_INTENCLR00_SYNC_Msk (0x1UL << RADIO_INTENCLR00_SYNC_Pos)
  #define RADIO_INTENCLR00_SYNC_Min (0x0UL)
  #define RADIO_INTENCLR00_SYNC_Max (0x1UL)
  #define RADIO_INTENCLR00_SYNC_Clear (0x1UL)
  #define RADIO_INTENCLR00_SYNC_Disabled (0x0UL)
  #define RADIO_INTENCLR00_SYNC_Enabled (0x1UL)

/* CTEPRESENT @Bit 23 : Write '1' to disable interrupt for event CTEPRESENT */
  #define RADIO_INTENCLR00_CTEPRESENT_Pos (23UL)
  #define RADIO_INTENCLR00_CTEPRESENT_Msk (0x1UL << RADIO_INTENCLR00_CTEPRESENT_Pos)
  #define RADIO_INTENCLR00_CTEPRESENT_Min (0x0UL)
  #define RADIO_INTENCLR00_CTEPRESENT_Max (0x1UL)
  #define RADIO_INTENCLR00_CTEPRESENT_Clear (0x1UL)
  #define RADIO_INTENCLR00_CTEPRESENT_Disabled (0x0UL)
  #define RADIO_INTENCLR00_CTEPRESENT_Enabled (0x1UL)


/* RADIO_INTENSET10: Enable interrupt */
  #define RADIO_INTENSET10_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to enable interrupt for event READY */
  #define RADIO_INTENSET10_READY_Pos (0UL)
  #define RADIO_INTENSET10_READY_Msk (0x1UL << RADIO_INTENSET10_READY_Pos)
  #define RADIO_INTENSET10_READY_Min (0x0UL)
  #define RADIO_INTENSET10_READY_Max (0x1UL)
  #define RADIO_INTENSET10_READY_Set (0x1UL)
  #define RADIO_INTENSET10_READY_Disabled (0x0UL)
  #define RADIO_INTENSET10_READY_Enabled (0x1UL)

/* TXREADY @Bit 1 : Write '1' to enable interrupt for event TXREADY */
  #define RADIO_INTENSET10_TXREADY_Pos (1UL)
  #define RADIO_INTENSET10_TXREADY_Msk (0x1UL << RADIO_INTENSET10_TXREADY_Pos)
  #define RADIO_INTENSET10_TXREADY_Min (0x0UL)
  #define RADIO_INTENSET10_TXREADY_Max (0x1UL)
  #define RADIO_INTENSET10_TXREADY_Set (0x1UL)
  #define RADIO_INTENSET10_TXREADY_Disabled (0x0UL)
  #define RADIO_INTENSET10_TXREADY_Enabled (0x1UL)

/* RXREADY @Bit 2 : Write '1' to enable interrupt for event RXREADY */
  #define RADIO_INTENSET10_RXREADY_Pos (2UL)
  #define RADIO_INTENSET10_RXREADY_Msk (0x1UL << RADIO_INTENSET10_RXREADY_Pos)
  #define RADIO_INTENSET10_RXREADY_Min (0x0UL)
  #define RADIO_INTENSET10_RXREADY_Max (0x1UL)
  #define RADIO_INTENSET10_RXREADY_Set (0x1UL)
  #define RADIO_INTENSET10_RXREADY_Disabled (0x0UL)
  #define RADIO_INTENSET10_RXREADY_Enabled (0x1UL)

/* ADDRESS @Bit 3 : Write '1' to enable interrupt for event ADDRESS */
  #define RADIO_INTENSET10_ADDRESS_Pos (3UL)
  #define RADIO_INTENSET10_ADDRESS_Msk (0x1UL << RADIO_INTENSET10_ADDRESS_Pos)
  #define RADIO_INTENSET10_ADDRESS_Min (0x0UL)
  #define RADIO_INTENSET10_ADDRESS_Max (0x1UL)
  #define RADIO_INTENSET10_ADDRESS_Set (0x1UL)
  #define RADIO_INTENSET10_ADDRESS_Disabled (0x0UL)
  #define RADIO_INTENSET10_ADDRESS_Enabled (0x1UL)

/* FRAMESTART @Bit 4 : Write '1' to enable interrupt for event FRAMESTART */
  #define RADIO_INTENSET10_FRAMESTART_Pos (4UL)
  #define RADIO_INTENSET10_FRAMESTART_Msk (0x1UL << RADIO_INTENSET10_FRAMESTART_Pos)
  #define RADIO_INTENSET10_FRAMESTART_Min (0x0UL)
  #define RADIO_INTENSET10_FRAMESTART_Max (0x1UL)
  #define RADIO_INTENSET10_FRAMESTART_Set (0x1UL)
  #define RADIO_INTENSET10_FRAMESTART_Disabled (0x0UL)
  #define RADIO_INTENSET10_FRAMESTART_Enabled (0x1UL)

/* PAYLOAD @Bit 5 : Write '1' to enable interrupt for event PAYLOAD */
  #define RADIO_INTENSET10_PAYLOAD_Pos (5UL)
  #define RADIO_INTENSET10_PAYLOAD_Msk (0x1UL << RADIO_INTENSET10_PAYLOAD_Pos)
  #define RADIO_INTENSET10_PAYLOAD_Min (0x0UL)
  #define RADIO_INTENSET10_PAYLOAD_Max (0x1UL)
  #define RADIO_INTENSET10_PAYLOAD_Set (0x1UL)
  #define RADIO_INTENSET10_PAYLOAD_Disabled (0x0UL)
  #define RADIO_INTENSET10_PAYLOAD_Enabled (0x1UL)

/* END @Bit 6 : Write '1' to enable interrupt for event END */
  #define RADIO_INTENSET10_END_Pos (6UL)
  #define RADIO_INTENSET10_END_Msk (0x1UL << RADIO_INTENSET10_END_Pos)
  #define RADIO_INTENSET10_END_Min (0x0UL)
  #define RADIO_INTENSET10_END_Max (0x1UL)
  #define RADIO_INTENSET10_END_Set (0x1UL)
  #define RADIO_INTENSET10_END_Disabled (0x0UL)
  #define RADIO_INTENSET10_END_Enabled (0x1UL)

/* PHYEND @Bit 7 : Write '1' to enable interrupt for event PHYEND */
  #define RADIO_INTENSET10_PHYEND_Pos (7UL)
  #define RADIO_INTENSET10_PHYEND_Msk (0x1UL << RADIO_INTENSET10_PHYEND_Pos)
  #define RADIO_INTENSET10_PHYEND_Min (0x0UL)
  #define RADIO_INTENSET10_PHYEND_Max (0x1UL)
  #define RADIO_INTENSET10_PHYEND_Set (0x1UL)
  #define RADIO_INTENSET10_PHYEND_Disabled (0x0UL)
  #define RADIO_INTENSET10_PHYEND_Enabled (0x1UL)

/* DISABLED @Bit 8 : Write '1' to enable interrupt for event DISABLED */
  #define RADIO_INTENSET10_DISABLED_Pos (8UL)
  #define RADIO_INTENSET10_DISABLED_Msk (0x1UL << RADIO_INTENSET10_DISABLED_Pos)
  #define RADIO_INTENSET10_DISABLED_Min (0x0UL)
  #define RADIO_INTENSET10_DISABLED_Max (0x1UL)
  #define RADIO_INTENSET10_DISABLED_Set (0x1UL)
  #define RADIO_INTENSET10_DISABLED_Disabled (0x0UL)
  #define RADIO_INTENSET10_DISABLED_Enabled (0x1UL)

/* DEVMATCH @Bit 9 : Write '1' to enable interrupt for event DEVMATCH */
  #define RADIO_INTENSET10_DEVMATCH_Pos (9UL)
  #define RADIO_INTENSET10_DEVMATCH_Msk (0x1UL << RADIO_INTENSET10_DEVMATCH_Pos)
  #define RADIO_INTENSET10_DEVMATCH_Min (0x0UL)
  #define RADIO_INTENSET10_DEVMATCH_Max (0x1UL)
  #define RADIO_INTENSET10_DEVMATCH_Set (0x1UL)
  #define RADIO_INTENSET10_DEVMATCH_Disabled (0x0UL)
  #define RADIO_INTENSET10_DEVMATCH_Enabled (0x1UL)

/* DEVMISS @Bit 10 : Write '1' to enable interrupt for event DEVMISS */
  #define RADIO_INTENSET10_DEVMISS_Pos (10UL)
  #define RADIO_INTENSET10_DEVMISS_Msk (0x1UL << RADIO_INTENSET10_DEVMISS_Pos)
  #define RADIO_INTENSET10_DEVMISS_Min (0x0UL)
  #define RADIO_INTENSET10_DEVMISS_Max (0x1UL)
  #define RADIO_INTENSET10_DEVMISS_Set (0x1UL)
  #define RADIO_INTENSET10_DEVMISS_Disabled (0x0UL)
  #define RADIO_INTENSET10_DEVMISS_Enabled (0x1UL)

/* CRCOK @Bit 11 : Write '1' to enable interrupt for event CRCOK */
  #define RADIO_INTENSET10_CRCOK_Pos (11UL)
  #define RADIO_INTENSET10_CRCOK_Msk (0x1UL << RADIO_INTENSET10_CRCOK_Pos)
  #define RADIO_INTENSET10_CRCOK_Min (0x0UL)
  #define RADIO_INTENSET10_CRCOK_Max (0x1UL)
  #define RADIO_INTENSET10_CRCOK_Set (0x1UL)
  #define RADIO_INTENSET10_CRCOK_Disabled (0x0UL)
  #define RADIO_INTENSET10_CRCOK_Enabled (0x1UL)

/* CRCERROR @Bit 12 : Write '1' to enable interrupt for event CRCERROR */
  #define RADIO_INTENSET10_CRCERROR_Pos (12UL)
  #define RADIO_INTENSET10_CRCERROR_Msk (0x1UL << RADIO_INTENSET10_CRCERROR_Pos)
  #define RADIO_INTENSET10_CRCERROR_Min (0x0UL)
  #define RADIO_INTENSET10_CRCERROR_Max (0x1UL)
  #define RADIO_INTENSET10_CRCERROR_Set (0x1UL)
  #define RADIO_INTENSET10_CRCERROR_Disabled (0x0UL)
  #define RADIO_INTENSET10_CRCERROR_Enabled (0x1UL)

/* BCMATCH @Bit 14 : Write '1' to enable interrupt for event BCMATCH */
  #define RADIO_INTENSET10_BCMATCH_Pos (14UL)
  #define RADIO_INTENSET10_BCMATCH_Msk (0x1UL << RADIO_INTENSET10_BCMATCH_Pos)
  #define RADIO_INTENSET10_BCMATCH_Min (0x0UL)
  #define RADIO_INTENSET10_BCMATCH_Max (0x1UL)
  #define RADIO_INTENSET10_BCMATCH_Set (0x1UL)
  #define RADIO_INTENSET10_BCMATCH_Disabled (0x0UL)
  #define RADIO_INTENSET10_BCMATCH_Enabled (0x1UL)

/* EDEND @Bit 15 : Write '1' to enable interrupt for event EDEND */
  #define RADIO_INTENSET10_EDEND_Pos (15UL)
  #define RADIO_INTENSET10_EDEND_Msk (0x1UL << RADIO_INTENSET10_EDEND_Pos)
  #define RADIO_INTENSET10_EDEND_Min (0x0UL)
  #define RADIO_INTENSET10_EDEND_Max (0x1UL)
  #define RADIO_INTENSET10_EDEND_Set (0x1UL)
  #define RADIO_INTENSET10_EDEND_Disabled (0x0UL)
  #define RADIO_INTENSET10_EDEND_Enabled (0x1UL)

/* EDSTOPPED @Bit 16 : Write '1' to enable interrupt for event EDSTOPPED */
  #define RADIO_INTENSET10_EDSTOPPED_Pos (16UL)
  #define RADIO_INTENSET10_EDSTOPPED_Msk (0x1UL << RADIO_INTENSET10_EDSTOPPED_Pos)
  #define RADIO_INTENSET10_EDSTOPPED_Min (0x0UL)
  #define RADIO_INTENSET10_EDSTOPPED_Max (0x1UL)
  #define RADIO_INTENSET10_EDSTOPPED_Set (0x1UL)
  #define RADIO_INTENSET10_EDSTOPPED_Disabled (0x0UL)
  #define RADIO_INTENSET10_EDSTOPPED_Enabled (0x1UL)

/* CCAIDLE @Bit 17 : Write '1' to enable interrupt for event CCAIDLE */
  #define RADIO_INTENSET10_CCAIDLE_Pos (17UL)
  #define RADIO_INTENSET10_CCAIDLE_Msk (0x1UL << RADIO_INTENSET10_CCAIDLE_Pos)
  #define RADIO_INTENSET10_CCAIDLE_Min (0x0UL)
  #define RADIO_INTENSET10_CCAIDLE_Max (0x1UL)
  #define RADIO_INTENSET10_CCAIDLE_Set (0x1UL)
  #define RADIO_INTENSET10_CCAIDLE_Disabled (0x0UL)
  #define RADIO_INTENSET10_CCAIDLE_Enabled (0x1UL)

/* CCABUSY @Bit 18 : Write '1' to enable interrupt for event CCABUSY */
  #define RADIO_INTENSET10_CCABUSY_Pos (18UL)
  #define RADIO_INTENSET10_CCABUSY_Msk (0x1UL << RADIO_INTENSET10_CCABUSY_Pos)
  #define RADIO_INTENSET10_CCABUSY_Min (0x0UL)
  #define RADIO_INTENSET10_CCABUSY_Max (0x1UL)
  #define RADIO_INTENSET10_CCABUSY_Set (0x1UL)
  #define RADIO_INTENSET10_CCABUSY_Disabled (0x0UL)
  #define RADIO_INTENSET10_CCABUSY_Enabled (0x1UL)

/* CCASTOPPED @Bit 19 : Write '1' to enable interrupt for event CCASTOPPED */
  #define RADIO_INTENSET10_CCASTOPPED_Pos (19UL)
  #define RADIO_INTENSET10_CCASTOPPED_Msk (0x1UL << RADIO_INTENSET10_CCASTOPPED_Pos)
  #define RADIO_INTENSET10_CCASTOPPED_Min (0x0UL)
  #define RADIO_INTENSET10_CCASTOPPED_Max (0x1UL)
  #define RADIO_INTENSET10_CCASTOPPED_Set (0x1UL)
  #define RADIO_INTENSET10_CCASTOPPED_Disabled (0x0UL)
  #define RADIO_INTENSET10_CCASTOPPED_Enabled (0x1UL)

/* RATEBOOST @Bit 20 : Write '1' to enable interrupt for event RATEBOOST */
  #define RADIO_INTENSET10_RATEBOOST_Pos (20UL)
  #define RADIO_INTENSET10_RATEBOOST_Msk (0x1UL << RADIO_INTENSET10_RATEBOOST_Pos)
  #define RADIO_INTENSET10_RATEBOOST_Min (0x0UL)
  #define RADIO_INTENSET10_RATEBOOST_Max (0x1UL)
  #define RADIO_INTENSET10_RATEBOOST_Set (0x1UL)
  #define RADIO_INTENSET10_RATEBOOST_Disabled (0x0UL)
  #define RADIO_INTENSET10_RATEBOOST_Enabled (0x1UL)

/* MHRMATCH @Bit 21 : Write '1' to enable interrupt for event MHRMATCH */
  #define RADIO_INTENSET10_MHRMATCH_Pos (21UL)
  #define RADIO_INTENSET10_MHRMATCH_Msk (0x1UL << RADIO_INTENSET10_MHRMATCH_Pos)
  #define RADIO_INTENSET10_MHRMATCH_Min (0x0UL)
  #define RADIO_INTENSET10_MHRMATCH_Max (0x1UL)
  #define RADIO_INTENSET10_MHRMATCH_Set (0x1UL)
  #define RADIO_INTENSET10_MHRMATCH_Disabled (0x0UL)
  #define RADIO_INTENSET10_MHRMATCH_Enabled (0x1UL)

/* SYNC @Bit 22 : Write '1' to enable interrupt for event SYNC */
  #define RADIO_INTENSET10_SYNC_Pos (22UL)
  #define RADIO_INTENSET10_SYNC_Msk (0x1UL << RADIO_INTENSET10_SYNC_Pos)
  #define RADIO_INTENSET10_SYNC_Min (0x0UL)
  #define RADIO_INTENSET10_SYNC_Max (0x1UL)
  #define RADIO_INTENSET10_SYNC_Set (0x1UL)
  #define RADIO_INTENSET10_SYNC_Disabled (0x0UL)
  #define RADIO_INTENSET10_SYNC_Enabled (0x1UL)

/* CTEPRESENT @Bit 23 : Write '1' to enable interrupt for event CTEPRESENT */
  #define RADIO_INTENSET10_CTEPRESENT_Pos (23UL)
  #define RADIO_INTENSET10_CTEPRESENT_Msk (0x1UL << RADIO_INTENSET10_CTEPRESENT_Pos)
  #define RADIO_INTENSET10_CTEPRESENT_Min (0x0UL)
  #define RADIO_INTENSET10_CTEPRESENT_Max (0x1UL)
  #define RADIO_INTENSET10_CTEPRESENT_Set (0x1UL)
  #define RADIO_INTENSET10_CTEPRESENT_Disabled (0x0UL)
  #define RADIO_INTENSET10_CTEPRESENT_Enabled (0x1UL)


/* RADIO_INTENCLR10: Disable interrupt */
  #define RADIO_INTENCLR10_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to disable interrupt for event READY */
  #define RADIO_INTENCLR10_READY_Pos (0UL)
  #define RADIO_INTENCLR10_READY_Msk (0x1UL << RADIO_INTENCLR10_READY_Pos)
  #define RADIO_INTENCLR10_READY_Min (0x0UL)
  #define RADIO_INTENCLR10_READY_Max (0x1UL)
  #define RADIO_INTENCLR10_READY_Clear (0x1UL)
  #define RADIO_INTENCLR10_READY_Disabled (0x0UL)
  #define RADIO_INTENCLR10_READY_Enabled (0x1UL)

/* TXREADY @Bit 1 : Write '1' to disable interrupt for event TXREADY */
  #define RADIO_INTENCLR10_TXREADY_Pos (1UL)
  #define RADIO_INTENCLR10_TXREADY_Msk (0x1UL << RADIO_INTENCLR10_TXREADY_Pos)
  #define RADIO_INTENCLR10_TXREADY_Min (0x0UL)
  #define RADIO_INTENCLR10_TXREADY_Max (0x1UL)
  #define RADIO_INTENCLR10_TXREADY_Clear (0x1UL)
  #define RADIO_INTENCLR10_TXREADY_Disabled (0x0UL)
  #define RADIO_INTENCLR10_TXREADY_Enabled (0x1UL)

/* RXREADY @Bit 2 : Write '1' to disable interrupt for event RXREADY */
  #define RADIO_INTENCLR10_RXREADY_Pos (2UL)
  #define RADIO_INTENCLR10_RXREADY_Msk (0x1UL << RADIO_INTENCLR10_RXREADY_Pos)
  #define RADIO_INTENCLR10_RXREADY_Min (0x0UL)
  #define RADIO_INTENCLR10_RXREADY_Max (0x1UL)
  #define RADIO_INTENCLR10_RXREADY_Clear (0x1UL)
  #define RADIO_INTENCLR10_RXREADY_Disabled (0x0UL)
  #define RADIO_INTENCLR10_RXREADY_Enabled (0x1UL)

/* ADDRESS @Bit 3 : Write '1' to disable interrupt for event ADDRESS */
  #define RADIO_INTENCLR10_ADDRESS_Pos (3UL)
  #define RADIO_INTENCLR10_ADDRESS_Msk (0x1UL << RADIO_INTENCLR10_ADDRESS_Pos)
  #define RADIO_INTENCLR10_ADDRESS_Min (0x0UL)
  #define RADIO_INTENCLR10_ADDRESS_Max (0x1UL)
  #define RADIO_INTENCLR10_ADDRESS_Clear (0x1UL)
  #define RADIO_INTENCLR10_ADDRESS_Disabled (0x0UL)
  #define RADIO_INTENCLR10_ADDRESS_Enabled (0x1UL)

/* FRAMESTART @Bit 4 : Write '1' to disable interrupt for event FRAMESTART */
  #define RADIO_INTENCLR10_FRAMESTART_Pos (4UL)
  #define RADIO_INTENCLR10_FRAMESTART_Msk (0x1UL << RADIO_INTENCLR10_FRAMESTART_Pos)
  #define RADIO_INTENCLR10_FRAMESTART_Min (0x0UL)
  #define RADIO_INTENCLR10_FRAMESTART_Max (0x1UL)
  #define RADIO_INTENCLR10_FRAMESTART_Clear (0x1UL)
  #define RADIO_INTENCLR10_FRAMESTART_Disabled (0x0UL)
  #define RADIO_INTENCLR10_FRAMESTART_Enabled (0x1UL)

/* PAYLOAD @Bit 5 : Write '1' to disable interrupt for event PAYLOAD */
  #define RADIO_INTENCLR10_PAYLOAD_Pos (5UL)
  #define RADIO_INTENCLR10_PAYLOAD_Msk (0x1UL << RADIO_INTENCLR10_PAYLOAD_Pos)
  #define RADIO_INTENCLR10_PAYLOAD_Min (0x0UL)
  #define RADIO_INTENCLR10_PAYLOAD_Max (0x1UL)
  #define RADIO_INTENCLR10_PAYLOAD_Clear (0x1UL)
  #define RADIO_INTENCLR10_PAYLOAD_Disabled (0x0UL)
  #define RADIO_INTENCLR10_PAYLOAD_Enabled (0x1UL)

/* END @Bit 6 : Write '1' to disable interrupt for event END */
  #define RADIO_INTENCLR10_END_Pos (6UL)
  #define RADIO_INTENCLR10_END_Msk (0x1UL << RADIO_INTENCLR10_END_Pos)
  #define RADIO_INTENCLR10_END_Min (0x0UL)
  #define RADIO_INTENCLR10_END_Max (0x1UL)
  #define RADIO_INTENCLR10_END_Clear (0x1UL)
  #define RADIO_INTENCLR10_END_Disabled (0x0UL)
  #define RADIO_INTENCLR10_END_Enabled (0x1UL)

/* PHYEND @Bit 7 : Write '1' to disable interrupt for event PHYEND */
  #define RADIO_INTENCLR10_PHYEND_Pos (7UL)
  #define RADIO_INTENCLR10_PHYEND_Msk (0x1UL << RADIO_INTENCLR10_PHYEND_Pos)
  #define RADIO_INTENCLR10_PHYEND_Min (0x0UL)
  #define RADIO_INTENCLR10_PHYEND_Max (0x1UL)
  #define RADIO_INTENCLR10_PHYEND_Clear (0x1UL)
  #define RADIO_INTENCLR10_PHYEND_Disabled (0x0UL)
  #define RADIO_INTENCLR10_PHYEND_Enabled (0x1UL)

/* DISABLED @Bit 8 : Write '1' to disable interrupt for event DISABLED */
  #define RADIO_INTENCLR10_DISABLED_Pos (8UL)
  #define RADIO_INTENCLR10_DISABLED_Msk (0x1UL << RADIO_INTENCLR10_DISABLED_Pos)
  #define RADIO_INTENCLR10_DISABLED_Min (0x0UL)
  #define RADIO_INTENCLR10_DISABLED_Max (0x1UL)
  #define RADIO_INTENCLR10_DISABLED_Clear (0x1UL)
  #define RADIO_INTENCLR10_DISABLED_Disabled (0x0UL)
  #define RADIO_INTENCLR10_DISABLED_Enabled (0x1UL)

/* DEVMATCH @Bit 9 : Write '1' to disable interrupt for event DEVMATCH */
  #define RADIO_INTENCLR10_DEVMATCH_Pos (9UL)
  #define RADIO_INTENCLR10_DEVMATCH_Msk (0x1UL << RADIO_INTENCLR10_DEVMATCH_Pos)
  #define RADIO_INTENCLR10_DEVMATCH_Min (0x0UL)
  #define RADIO_INTENCLR10_DEVMATCH_Max (0x1UL)
  #define RADIO_INTENCLR10_DEVMATCH_Clear (0x1UL)
  #define RADIO_INTENCLR10_DEVMATCH_Disabled (0x0UL)
  #define RADIO_INTENCLR10_DEVMATCH_Enabled (0x1UL)

/* DEVMISS @Bit 10 : Write '1' to disable interrupt for event DEVMISS */
  #define RADIO_INTENCLR10_DEVMISS_Pos (10UL)
  #define RADIO_INTENCLR10_DEVMISS_Msk (0x1UL << RADIO_INTENCLR10_DEVMISS_Pos)
  #define RADIO_INTENCLR10_DEVMISS_Min (0x0UL)
  #define RADIO_INTENCLR10_DEVMISS_Max (0x1UL)
  #define RADIO_INTENCLR10_DEVMISS_Clear (0x1UL)
  #define RADIO_INTENCLR10_DEVMISS_Disabled (0x0UL)
  #define RADIO_INTENCLR10_DEVMISS_Enabled (0x1UL)

/* CRCOK @Bit 11 : Write '1' to disable interrupt for event CRCOK */
  #define RADIO_INTENCLR10_CRCOK_Pos (11UL)
  #define RADIO_INTENCLR10_CRCOK_Msk (0x1UL << RADIO_INTENCLR10_CRCOK_Pos)
  #define RADIO_INTENCLR10_CRCOK_Min (0x0UL)
  #define RADIO_INTENCLR10_CRCOK_Max (0x1UL)
  #define RADIO_INTENCLR10_CRCOK_Clear (0x1UL)
  #define RADIO_INTENCLR10_CRCOK_Disabled (0x0UL)
  #define RADIO_INTENCLR10_CRCOK_Enabled (0x1UL)

/* CRCERROR @Bit 12 : Write '1' to disable interrupt for event CRCERROR */
  #define RADIO_INTENCLR10_CRCERROR_Pos (12UL)
  #define RADIO_INTENCLR10_CRCERROR_Msk (0x1UL << RADIO_INTENCLR10_CRCERROR_Pos)
  #define RADIO_INTENCLR10_CRCERROR_Min (0x0UL)
  #define RADIO_INTENCLR10_CRCERROR_Max (0x1UL)
  #define RADIO_INTENCLR10_CRCERROR_Clear (0x1UL)
  #define RADIO_INTENCLR10_CRCERROR_Disabled (0x0UL)
  #define RADIO_INTENCLR10_CRCERROR_Enabled (0x1UL)

/* BCMATCH @Bit 14 : Write '1' to disable interrupt for event BCMATCH */
  #define RADIO_INTENCLR10_BCMATCH_Pos (14UL)
  #define RADIO_INTENCLR10_BCMATCH_Msk (0x1UL << RADIO_INTENCLR10_BCMATCH_Pos)
  #define RADIO_INTENCLR10_BCMATCH_Min (0x0UL)
  #define RADIO_INTENCLR10_BCMATCH_Max (0x1UL)
  #define RADIO_INTENCLR10_BCMATCH_Clear (0x1UL)
  #define RADIO_INTENCLR10_BCMATCH_Disabled (0x0UL)
  #define RADIO_INTENCLR10_BCMATCH_Enabled (0x1UL)

/* EDEND @Bit 15 : Write '1' to disable interrupt for event EDEND */
  #define RADIO_INTENCLR10_EDEND_Pos (15UL)
  #define RADIO_INTENCLR10_EDEND_Msk (0x1UL << RADIO_INTENCLR10_EDEND_Pos)
  #define RADIO_INTENCLR10_EDEND_Min (0x0UL)
  #define RADIO_INTENCLR10_EDEND_Max (0x1UL)
  #define RADIO_INTENCLR10_EDEND_Clear (0x1UL)
  #define RADIO_INTENCLR10_EDEND_Disabled (0x0UL)
  #define RADIO_INTENCLR10_EDEND_Enabled (0x1UL)

/* EDSTOPPED @Bit 16 : Write '1' to disable interrupt for event EDSTOPPED */
  #define RADIO_INTENCLR10_EDSTOPPED_Pos (16UL)
  #define RADIO_INTENCLR10_EDSTOPPED_Msk (0x1UL << RADIO_INTENCLR10_EDSTOPPED_Pos)
  #define RADIO_INTENCLR10_EDSTOPPED_Min (0x0UL)
  #define RADIO_INTENCLR10_EDSTOPPED_Max (0x1UL)
  #define RADIO_INTENCLR10_EDSTOPPED_Clear (0x1UL)
  #define RADIO_INTENCLR10_EDSTOPPED_Disabled (0x0UL)
  #define RADIO_INTENCLR10_EDSTOPPED_Enabled (0x1UL)

/* CCAIDLE @Bit 17 : Write '1' to disable interrupt for event CCAIDLE */
  #define RADIO_INTENCLR10_CCAIDLE_Pos (17UL)
  #define RADIO_INTENCLR10_CCAIDLE_Msk (0x1UL << RADIO_INTENCLR10_CCAIDLE_Pos)
  #define RADIO_INTENCLR10_CCAIDLE_Min (0x0UL)
  #define RADIO_INTENCLR10_CCAIDLE_Max (0x1UL)
  #define RADIO_INTENCLR10_CCAIDLE_Clear (0x1UL)
  #define RADIO_INTENCLR10_CCAIDLE_Disabled (0x0UL)
  #define RADIO_INTENCLR10_CCAIDLE_Enabled (0x1UL)

/* CCABUSY @Bit 18 : Write '1' to disable interrupt for event CCABUSY */
  #define RADIO_INTENCLR10_CCABUSY_Pos (18UL)
  #define RADIO_INTENCLR10_CCABUSY_Msk (0x1UL << RADIO_INTENCLR10_CCABUSY_Pos)
  #define RADIO_INTENCLR10_CCABUSY_Min (0x0UL)
  #define RADIO_INTENCLR10_CCABUSY_Max (0x1UL)
  #define RADIO_INTENCLR10_CCABUSY_Clear (0x1UL)
  #define RADIO_INTENCLR10_CCABUSY_Disabled (0x0UL)
  #define RADIO_INTENCLR10_CCABUSY_Enabled (0x1UL)

/* CCASTOPPED @Bit 19 : Write '1' to disable interrupt for event CCASTOPPED */
  #define RADIO_INTENCLR10_CCASTOPPED_Pos (19UL)
  #define RADIO_INTENCLR10_CCASTOPPED_Msk (0x1UL << RADIO_INTENCLR10_CCASTOPPED_Pos)
  #define RADIO_INTENCLR10_CCASTOPPED_Min (0x0UL)
  #define RADIO_INTENCLR10_CCASTOPPED_Max (0x1UL)
  #define RADIO_INTENCLR10_CCASTOPPED_Clear (0x1UL)
  #define RADIO_INTENCLR10_CCASTOPPED_Disabled (0x0UL)
  #define RADIO_INTENCLR10_CCASTOPPED_Enabled (0x1UL)

/* RATEBOOST @Bit 20 : Write '1' to disable interrupt for event RATEBOOST */
  #define RADIO_INTENCLR10_RATEBOOST_Pos (20UL)
  #define RADIO_INTENCLR10_RATEBOOST_Msk (0x1UL << RADIO_INTENCLR10_RATEBOOST_Pos)
  #define RADIO_INTENCLR10_RATEBOOST_Min (0x0UL)
  #define RADIO_INTENCLR10_RATEBOOST_Max (0x1UL)
  #define RADIO_INTENCLR10_RATEBOOST_Clear (0x1UL)
  #define RADIO_INTENCLR10_RATEBOOST_Disabled (0x0UL)
  #define RADIO_INTENCLR10_RATEBOOST_Enabled (0x1UL)

/* MHRMATCH @Bit 21 : Write '1' to disable interrupt for event MHRMATCH */
  #define RADIO_INTENCLR10_MHRMATCH_Pos (21UL)
  #define RADIO_INTENCLR10_MHRMATCH_Msk (0x1UL << RADIO_INTENCLR10_MHRMATCH_Pos)
  #define RADIO_INTENCLR10_MHRMATCH_Min (0x0UL)
  #define RADIO_INTENCLR10_MHRMATCH_Max (0x1UL)
  #define RADIO_INTENCLR10_MHRMATCH_Clear (0x1UL)
  #define RADIO_INTENCLR10_MHRMATCH_Disabled (0x0UL)
  #define RADIO_INTENCLR10_MHRMATCH_Enabled (0x1UL)

/* SYNC @Bit 22 : Write '1' to disable interrupt for event SYNC */
  #define RADIO_INTENCLR10_SYNC_Pos (22UL)
  #define RADIO_INTENCLR10_SYNC_Msk (0x1UL << RADIO_INTENCLR10_SYNC_Pos)
  #define RADIO_INTENCLR10_SYNC_Min (0x0UL)
  #define RADIO_INTENCLR10_SYNC_Max (0x1UL)
  #define RADIO_INTENCLR10_SYNC_Clear (0x1UL)
  #define RADIO_INTENCLR10_SYNC_Disabled (0x0UL)
  #define RADIO_INTENCLR10_SYNC_Enabled (0x1UL)

/* CTEPRESENT @Bit 23 : Write '1' to disable interrupt for event CTEPRESENT */
  #define RADIO_INTENCLR10_CTEPRESENT_Pos (23UL)
  #define RADIO_INTENCLR10_CTEPRESENT_Msk (0x1UL << RADIO_INTENCLR10_CTEPRESENT_Pos)
  #define RADIO_INTENCLR10_CTEPRESENT_Min (0x0UL)
  #define RADIO_INTENCLR10_CTEPRESENT_Max (0x1UL)
  #define RADIO_INTENCLR10_CTEPRESENT_Clear (0x1UL)
  #define RADIO_INTENCLR10_CTEPRESENT_Disabled (0x0UL)
  #define RADIO_INTENCLR10_CTEPRESENT_Enabled (0x1UL)


/* RADIO_MODE: Data rate and modulation */
  #define RADIO_MODE_ResetValue (0x00000000UL)

/* MODE @Bits 0..3 : Radio data rate and modulation setting. The radio supports frequency-shift keying (FSK) modulation. */
  #define RADIO_MODE_MODE_Pos (0UL)
  #define RADIO_MODE_MODE_Msk (0xFUL << RADIO_MODE_MODE_Pos)
  #define RADIO_MODE_MODE_Min (0x0UL)
  #define RADIO_MODE_MODE_Max (0xFUL)
  #define RADIO_MODE_MODE_Nrf_1Mbit (0x0UL)
  #define RADIO_MODE_MODE_Nrf_2Mbit (0x1UL)
  #define RADIO_MODE_MODE_Ble_1Mbit (0x3UL)
  #define RADIO_MODE_MODE_Ble_2Mbit (0x4UL)
  #define RADIO_MODE_MODE_Ble_LR125Kbit (0x5UL)
  #define RADIO_MODE_MODE_Ble_LR500Kbit (0x6UL)
  #define RADIO_MODE_MODE_Nrf_4Mbit_0BT6 (0x9UL)
  #define RADIO_MODE_MODE_Nrf_4Mbit_0BT4 (0xAUL)
  #define RADIO_MODE_MODE_Ieee802154_250Kbit (0xFUL)


/* RADIO_STATE: Current radio state */
  #define RADIO_STATE_ResetValue (0x00000000UL)

/* STATE @Bits 0..3 : Current radio state */
  #define RADIO_STATE_STATE_Pos (0UL)
  #define RADIO_STATE_STATE_Msk (0xFUL << RADIO_STATE_STATE_Pos)
  #define RADIO_STATE_STATE_Min (0x0UL)
  #define RADIO_STATE_STATE_Max (0xCUL)
  #define RADIO_STATE_STATE_Disabled (0x0UL)
  #define RADIO_STATE_STATE_RxRu (0x1UL)
  #define RADIO_STATE_STATE_RxIdle (0x2UL)
  #define RADIO_STATE_STATE_Rx (0x3UL)
  #define RADIO_STATE_STATE_RxDisable (0x4UL)
  #define RADIO_STATE_STATE_TxRu (0x9UL)
  #define RADIO_STATE_STATE_TxIdle (0xAUL)
  #define RADIO_STATE_STATE_Tx (0xBUL)
  #define RADIO_STATE_STATE_TxDisable (0xCUL)


/* RADIO_EDCTRL: IEEE 802.15.4 energy detect control */
  #define RADIO_EDCTRL_ResetValue (0x20000000UL)

/* EDCNT @Bits 0..20 : IEEE 802.15.4 energy detect loop count */
  #define RADIO_EDCTRL_EDCNT_Pos (0UL)
  #define RADIO_EDCTRL_EDCNT_Msk (0x1FFFFFUL << RADIO_EDCTRL_EDCNT_Pos)

/* EDPERIOD @Bits 24..29 : IEEE 802.15.4 energy detect period, 4us resolution, no averaging except the IEEE 802.15.4 ED range
                           128us (32) */

  #define RADIO_EDCTRL_EDPERIOD_Pos (24UL)
  #define RADIO_EDCTRL_EDPERIOD_Msk (0x3FUL << RADIO_EDCTRL_EDPERIOD_Pos)
  #define RADIO_EDCTRL_EDPERIOD_Min (0x20UL)
  #define RADIO_EDCTRL_EDPERIOD_Max (0x20UL)
  #define RADIO_EDCTRL_EDPERIOD_Default (0x20UL)


/* RADIO_EDSAMPLE: IEEE 802.15.4 energy detect level */
  #define RADIO_EDSAMPLE_ResetValue (0x00000000UL)

/* EDLVL @Bits 0..7 : IEEE 802.15.4 energy detect level */
  #define RADIO_EDSAMPLE_EDLVL_Pos (0UL)
  #define RADIO_EDSAMPLE_EDLVL_Msk (0xFFUL << RADIO_EDSAMPLE_EDLVL_Pos)
  #define RADIO_EDSAMPLE_EDLVL_Min (0x00UL)
  #define RADIO_EDSAMPLE_EDLVL_Max (0x7FUL)


/* RADIO_CCACTRL: IEEE 802.15.4 clear channel assessment control */
  #define RADIO_CCACTRL_ResetValue (0x052D0000UL)

/* CCAMODE @Bits 0..2 : CCA mode of operation */
  #define RADIO_CCACTRL_CCAMODE_Pos (0UL)
  #define RADIO_CCACTRL_CCAMODE_Msk (0x7UL << RADIO_CCACTRL_CCAMODE_Pos)
  #define RADIO_CCACTRL_CCAMODE_Min (0x0UL)
  #define RADIO_CCACTRL_CCAMODE_Max (0x4UL)
  #define RADIO_CCACTRL_CCAMODE_EdMode (0x0UL)
  #define RADIO_CCACTRL_CCAMODE_CarrierMode (0x1UL)
  #define RADIO_CCACTRL_CCAMODE_CarrierAndEdMode (0x2UL)
  #define RADIO_CCACTRL_CCAMODE_CarrierOrEdMode (0x3UL)
  #define RADIO_CCACTRL_CCAMODE_EdModeTest1 (0x4UL)  /*!< Energy above threshold test mode that will abort when first ED
                                                          measurement over threshold is seen. No averaging.*/

/* CCAEDTHRES @Bits 8..15 : CCA energy busy threshold. Used in all the CCA modes except CarrierMode. */
  #define RADIO_CCACTRL_CCAEDTHRES_Pos (8UL)
  #define RADIO_CCACTRL_CCAEDTHRES_Msk (0xFFUL << RADIO_CCACTRL_CCAEDTHRES_Pos)

/* CCACORRTHRES @Bits 16..23 : CCA correlator busy threshold. Only relevant to CarrierMode, CarrierAndEdMode, and
                               CarrierOrEdMode. */

  #define RADIO_CCACTRL_CCACORRTHRES_Pos (16UL)
  #define RADIO_CCACTRL_CCACORRTHRES_Msk (0xFFUL << RADIO_CCACTRL_CCACORRTHRES_Pos)

/* CCACORRCNT @Bits 24..31 : Limit for occurances above CCACORRTHRES. When not equal to zero the corrolator based signal detect
                             is enabled. */

  #define RADIO_CCACTRL_CCACORRCNT_Pos (24UL)
  #define RADIO_CCACTRL_CCACORRCNT_Msk (0xFFUL << RADIO_CCACTRL_CCACORRCNT_Pos)


/* RADIO_DATAWHITE: Data whitening configuration */
  #define RADIO_DATAWHITE_ResetValue (0x00890040UL)

/* IV @Bits 0..8 : Whitening initial value */
  #define RADIO_DATAWHITE_IV_Pos (0UL)
  #define RADIO_DATAWHITE_IV_Msk (0x1FFUL << RADIO_DATAWHITE_IV_Pos)

/* POLY @Bits 16..25 : Whitening polynomial */
  #define RADIO_DATAWHITE_POLY_Pos (16UL)
  #define RADIO_DATAWHITE_POLY_Msk (0x3FFUL << RADIO_DATAWHITE_POLY_Pos)


/* RADIO_TIMING: Timing */
  #define RADIO_TIMING_ResetValue (0x00000001UL)

/* RU @Bit 0 : Ramp-up time */
  #define RADIO_TIMING_RU_Pos (0UL)
  #define RADIO_TIMING_RU_Msk (0x1UL << RADIO_TIMING_RU_Pos)
  #define RADIO_TIMING_RU_Min (0x0UL)
  #define RADIO_TIMING_RU_Max (0x1UL)
  #define RADIO_TIMING_RU_Legacy (0x0UL)
  #define RADIO_TIMING_RU_Fast (0x1UL)


/* RADIO_FREQUENCY: Frequency */
  #define RADIO_FREQUENCY_ResetValue (0x00000002UL)

/* FREQUENCY @Bits 0..6 : Radio channel frequency. Frequency = 2400 + FREQUENCY (MHz). */
  #define RADIO_FREQUENCY_FREQUENCY_Pos (0UL)
  #define RADIO_FREQUENCY_FREQUENCY_Msk (0x7FUL << RADIO_FREQUENCY_FREQUENCY_Pos)

/* MAP @Bit 8 : Channel map selection. 0: Channel map between 2400 MHZ to 2500 MHz, Frequency = 2400 + FREQUENCY (MHz). 1:
                Channel map between 2360 MHZ to 2460 MHz, Frequency = 2360 + FREQUENCY (MHz). */

  #define RADIO_FREQUENCY_MAP_Pos (8UL)
  #define RADIO_FREQUENCY_MAP_Msk (0x1UL << RADIO_FREQUENCY_MAP_Pos)


/* RADIO_TXPOWER: Output power */
  #define RADIO_TXPOWER_ResetValue (0x00000013UL)

/* TXPOWER @Bits 0..10 : RADIO output power */
  #define RADIO_TXPOWER_TXPOWER_Pos (0UL)
  #define RADIO_TXPOWER_TXPOWER_Msk (0x7FFUL << RADIO_TXPOWER_TXPOWER_Pos)
  #define RADIO_TXPOWER_TXPOWER_Min (0x1UL)
  #define RADIO_TXPOWER_TXPOWER_Max (0x130UL)
  #define RADIO_TXPOWER_TXPOWER_MaxdBm (0x03FUL)
  #define RADIO_TXPOWER_TXPOWER_Pos8dBm (0x03FUL)
  #define RADIO_TXPOWER_TXPOWER_Pos7dBm (0x039UL)
  #define RADIO_TXPOWER_TXPOWER_Pos6dBm (0x033UL)
  #define RADIO_TXPOWER_TXPOWER_Pos5dBm (0x02DUL)
  #define RADIO_TXPOWER_TXPOWER_Pos4dBm (0x028UL)
  #define RADIO_TXPOWER_TXPOWER_Pos3dBm (0x023UL)
  #define RADIO_TXPOWER_TXPOWER_Pos2dBm (0x01FUL)
  #define RADIO_TXPOWER_TXPOWER_Pos1dBm (0x01BUL)
  #define RADIO_TXPOWER_TXPOWER_0dBm (0x018UL)
  #define RADIO_TXPOWER_TXPOWER_Neg1dBm (0x015UL)
  #define RADIO_TXPOWER_TXPOWER_Neg2dBm (0x013UL)
  #define RADIO_TXPOWER_TXPOWER_Neg3dBm (0x011UL)
  #define RADIO_TXPOWER_TXPOWER_Neg4dBm (0x00FUL)
  #define RADIO_TXPOWER_TXPOWER_Neg5dBm (0x00DUL)
  #define RADIO_TXPOWER_TXPOWER_Neg6dBm (0x00BUL)
  #define RADIO_TXPOWER_TXPOWER_Neg7dBm (0x00AUL)
  #define RADIO_TXPOWER_TXPOWER_Neg8dBm (0x009UL)
  #define RADIO_TXPOWER_TXPOWER_Neg9dBm (0x008UL)
  #define RADIO_TXPOWER_TXPOWER_Neg10dBm (0x007UL)
  #define RADIO_TXPOWER_TXPOWER_Neg12dBm (0x006UL)
  #define RADIO_TXPOWER_TXPOWER_Neg14dBm (0x005UL)
  #define RADIO_TXPOWER_TXPOWER_Neg16dBm (0x004UL)
  #define RADIO_TXPOWER_TXPOWER_Neg18dBm (0x003UL)
  #define RADIO_TXPOWER_TXPOWER_Neg20dBm (0x002UL)
  #define RADIO_TXPOWER_TXPOWER_Neg22dBm (0x002UL)
  #define RADIO_TXPOWER_TXPOWER_Neg28dBm (0x001UL)
  #define RADIO_TXPOWER_TXPOWER_Neg40dBm (0x130UL)
  #define RADIO_TXPOWER_TXPOWER_Neg46dBm (0x110UL)
  #define RADIO_TXPOWER_TXPOWER_MindBm (0x110UL)


/* RADIO_TIFS: Interframe spacing in us */
  #define RADIO_TIFS_ResetValue (0x00000000UL)

/* TIFS @Bits 0..9 : Interframe spacing in us. Interframe space is the time interval between two consecutive packets. It is
                     defined as the time, in microseconds, from the end of the last bit of the previous packet to the start of
                     the first bit of the subsequent packet. */

  #define RADIO_TIFS_TIFS_Pos (0UL)
  #define RADIO_TIFS_TIFS_Msk (0x3FFUL << RADIO_TIFS_TIFS_Pos)


/* RADIO_RSSISAMPLE: RSSI sample */
  #define RADIO_RSSISAMPLE_ResetValue (0x0000007FUL)

/* RSSISAMPLE @Bits 0..6 : RSSI sample result. The value of this register is read as a positive value while the actual received
                           signal strength is a negative value. Actual received signal strength is therefore as follows:
                           received signal strength = -A dBm. */

  #define RADIO_RSSISAMPLE_RSSISAMPLE_Pos (0UL)
  #define RADIO_RSSISAMPLE_RSSISAMPLE_Msk (0x7FUL << RADIO_RSSISAMPLE_RSSISAMPLE_Pos)


/* RADIO_FECONFIG: Config register */
  #define RADIO_FECONFIG_ResetValue (0x10800005UL)

/* SCALERMODE @Bit 20 : Mode for narrow scaling output. */
  #define RADIO_FECONFIG_SCALERMODE_Pos (20UL)
  #define RADIO_FECONFIG_SCALERMODE_Msk (0x1UL << RADIO_FECONFIG_SCALERMODE_Pos)
  #define RADIO_FECONFIG_SCALERMODE_Min (0x0UL)
  #define RADIO_FECONFIG_SCALERMODE_Max (0x1UL)
  #define RADIO_FECONFIG_SCALERMODE_Disabled (0x0UL)
  #define RADIO_FECONFIG_SCALERMODE_Enabled (0x1UL)


/* RADIO_DFEMODE: Whether to use Angle-of-Arrival (AOA) or Angle-of-Departure (AOD) */
  #define RADIO_DFEMODE_ResetValue (0x00000000UL)

/* DFEOPMODE @Bits 0..1 : Direction finding operation mode */
  #define RADIO_DFEMODE_DFEOPMODE_Pos (0UL)
  #define RADIO_DFEMODE_DFEOPMODE_Msk (0x3UL << RADIO_DFEMODE_DFEOPMODE_Pos)
  #define RADIO_DFEMODE_DFEOPMODE_Min (0x0UL)
  #define RADIO_DFEMODE_DFEOPMODE_Max (0x3UL)
  #define RADIO_DFEMODE_DFEOPMODE_Disabled (0x0UL)
  #define RADIO_DFEMODE_DFEOPMODE_AoD (0x2UL)
  #define RADIO_DFEMODE_DFEOPMODE_AoA (0x3UL)


/* RADIO_DFESTATUS: DFE status information */
  #define RADIO_DFESTATUS_ResetValue (0x00000000UL)

/* SWITCHINGSTATE @Bits 0..2 : Internal state of switching state machine */
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Pos (0UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Msk (0x7UL << RADIO_DFESTATUS_SWITCHINGSTATE_Pos) /*!< Bit mask of SWITCHINGSTATE
                                                                            field.*/
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Min (0x0UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Max (0x5UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Idle (0x0UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Offset (0x1UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Guard (0x2UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Ref (0x3UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Switching (0x4UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Ending (0x5UL)

/* SAMPLINGSTATE @Bit 4 : Internal state of sampling state machine */
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Pos (4UL)
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Msk (0x1UL << RADIO_DFESTATUS_SAMPLINGSTATE_Pos)
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Min (0x0UL)
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Max (0x1UL)
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Idle (0x0UL)
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Sampling (0x1UL)


/* RADIO_DFECTRL1: Various configuration for Direction finding */
  #define RADIO_DFECTRL1_ResetValue (0x00023282UL)

/* NUMBEROF8US @Bits 0..5 : Length of the AoA/AoD procedure in number of 8 us units */
  #define RADIO_DFECTRL1_NUMBEROF8US_Pos (0UL)
  #define RADIO_DFECTRL1_NUMBEROF8US_Msk (0x3FUL << RADIO_DFECTRL1_NUMBEROF8US_Pos)

/* DFEINEXTENSION @Bit 7 : Add CTE extension and do antenna switching/sampling in this extension */
  #define RADIO_DFECTRL1_DFEINEXTENSION_Pos (7UL)
  #define RADIO_DFECTRL1_DFEINEXTENSION_Msk (0x1UL << RADIO_DFECTRL1_DFEINEXTENSION_Pos)
  #define RADIO_DFECTRL1_DFEINEXTENSION_Min (0x0UL)
  #define RADIO_DFECTRL1_DFEINEXTENSION_Max (0x1UL)
  #define RADIO_DFECTRL1_DFEINEXTENSION_CRC (0x1UL)
  #define RADIO_DFECTRL1_DFEINEXTENSION_Payload (0x0UL)

/* TSWITCHSPACING @Bits 8..10 : Interval between every time the antenna is changed in the SWITCHING state */
  #define RADIO_DFECTRL1_TSWITCHSPACING_Pos (8UL)
  #define RADIO_DFECTRL1_TSWITCHSPACING_Msk (0x7UL << RADIO_DFECTRL1_TSWITCHSPACING_Pos)
  #define RADIO_DFECTRL1_TSWITCHSPACING_Min (0x1UL)
  #define RADIO_DFECTRL1_TSWITCHSPACING_Max (0x3UL)
  #define RADIO_DFECTRL1_TSWITCHSPACING_4us (0x1UL)
  #define RADIO_DFECTRL1_TSWITCHSPACING_2us (0x2UL)
  #define RADIO_DFECTRL1_TSWITCHSPACING_1us (0x3UL)

/* TSAMPLESPACINGREF @Bits 12..14 : Interval between samples in the REFERENCE period */
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_Pos (12UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_Msk (0x7UL << RADIO_DFECTRL1_TSAMPLESPACINGREF_Pos) /*!< Bit mask of
                                                                            TSAMPLESPACINGREF field.*/
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_Min (0x1UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_Max (0x6UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_4us (0x1UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_2us (0x2UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_1us (0x3UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_500ns (0x4UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_250ns (0x5UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_125ns (0x6UL)

/* SAMPLETYPE @Bit 15 : Whether to sample I/Q or magnitude/phase */
  #define RADIO_DFECTRL1_SAMPLETYPE_Pos (15UL)
  #define RADIO_DFECTRL1_SAMPLETYPE_Msk (0x1UL << RADIO_DFECTRL1_SAMPLETYPE_Pos)
  #define RADIO_DFECTRL1_SAMPLETYPE_Min (0x0UL)
  #define RADIO_DFECTRL1_SAMPLETYPE_Max (0x1UL)
  #define RADIO_DFECTRL1_SAMPLETYPE_IQ (0x0UL)
  #define RADIO_DFECTRL1_SAMPLETYPE_MagPhase (0x1UL)

/* TSAMPLESPACING @Bits 16..18 : Interval between samples in the SWITCHING period when CTEINLINECTRLEN is 0 */
  #define RADIO_DFECTRL1_TSAMPLESPACING_Pos (16UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_Msk (0x7UL << RADIO_DFECTRL1_TSAMPLESPACING_Pos)
  #define RADIO_DFECTRL1_TSAMPLESPACING_Min (0x1UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_Max (0x6UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_4us (0x1UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_2us (0x2UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_1us (0x3UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_500ns (0x4UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_250ns (0x5UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_125ns (0x6UL)

/* REPEATPATTERN @Bits 20..23 : Repeat every antenna pattern N times. */
  #define RADIO_DFECTRL1_REPEATPATTERN_Pos (20UL)
  #define RADIO_DFECTRL1_REPEATPATTERN_Msk (0xFUL << RADIO_DFECTRL1_REPEATPATTERN_Pos)
  #define RADIO_DFECTRL1_REPEATPATTERN_Min (0x0UL)
  #define RADIO_DFECTRL1_REPEATPATTERN_Max (0x0UL)
  #define RADIO_DFECTRL1_REPEATPATTERN_NoRepeat (0x0UL)

/* AGCBACKOFFGAIN @Bits 24..27 : Gain will be lowered by the specified number of gain steps at the start of CTE */
  #define RADIO_DFECTRL1_AGCBACKOFFGAIN_Pos (24UL)
  #define RADIO_DFECTRL1_AGCBACKOFFGAIN_Msk (0xFUL << RADIO_DFECTRL1_AGCBACKOFFGAIN_Pos)


/* RADIO_DFECTRL2: Start offset for Direction finding */
  #define RADIO_DFECTRL2_ResetValue (0x00000000UL)

/* TSWITCHOFFSET @Bits 0..12 : Signed value offset after the end of the CRC before starting switching in number of 16M cycles */
  #define RADIO_DFECTRL2_TSWITCHOFFSET_Pos (0UL)
  #define RADIO_DFECTRL2_TSWITCHOFFSET_Msk (0x1FFFUL << RADIO_DFECTRL2_TSWITCHOFFSET_Pos)

/* TSAMPLEOFFSET @Bits 16..27 : Signed value offset before starting sampling in number of 16M cycles relative to the beginning
                                of the REFERENCE state - 12 us after switching start */

  #define RADIO_DFECTRL2_TSAMPLEOFFSET_Pos (16UL)
  #define RADIO_DFECTRL2_TSAMPLEOFFSET_Msk (0xFFFUL << RADIO_DFECTRL2_TSAMPLEOFFSET_Pos)


/* RADIO_SWITCHPATTERN: GPIO patterns to be used for each antenna */
  #define RADIO_SWITCHPATTERN_ResetValue (0x00000000UL)

/* SWITCHPATTERN @Bits 0..7 : Fill array of GPIO patterns for antenna control */
  #define RADIO_SWITCHPATTERN_SWITCHPATTERN_Pos (0UL)
  #define RADIO_SWITCHPATTERN_SWITCHPATTERN_Msk (0xFFUL << RADIO_SWITCHPATTERN_SWITCHPATTERN_Pos) /*!< Bit mask of SWITCHPATTERN
                                                                            field.*/


/* RADIO_CLEARPATTERN: Clear the GPIO pattern array for antenna control */
  #define RADIO_CLEARPATTERN_ResetValue (0x00000000UL)

/* CLEARPATTERN @Bit 0 : Clear the GPIO pattern array for antenna control Behaves as a task register, but does not have PPI nor
                         IRQ */

  #define RADIO_CLEARPATTERN_CLEARPATTERN_Pos (0UL)
  #define RADIO_CLEARPATTERN_CLEARPATTERN_Msk (0x1UL << RADIO_CLEARPATTERN_CLEARPATTERN_Pos) /*!< Bit mask of CLEARPATTERN
                                                                            field.*/


/* RADIO_CRCSTATUS: CRC status */
  #define RADIO_CRCSTATUS_ResetValue (0x00000000UL)

/* CRCSTATUS @Bit 0 : CRC status of packet received */
  #define RADIO_CRCSTATUS_CRCSTATUS_Pos (0UL)
  #define RADIO_CRCSTATUS_CRCSTATUS_Msk (0x1UL << RADIO_CRCSTATUS_CRCSTATUS_Pos)
  #define RADIO_CRCSTATUS_CRCSTATUS_Min (0x0UL)
  #define RADIO_CRCSTATUS_CRCSTATUS_Max (0x1UL)
  #define RADIO_CRCSTATUS_CRCSTATUS_CRCError (0x0UL)
  #define RADIO_CRCSTATUS_CRCSTATUS_CRCOk (0x1UL)


/* RADIO_RXMATCH: Received address */
  #define RADIO_RXMATCH_ResetValue (0x00000000UL)

/* RXMATCH @Bits 0..2 : Received address */
  #define RADIO_RXMATCH_RXMATCH_Pos (0UL)
  #define RADIO_RXMATCH_RXMATCH_Msk (0x7UL << RADIO_RXMATCH_RXMATCH_Pos)


/* RADIO_RXCRC: CRC field of previously received packet */
  #define RADIO_RXCRC_ResetValue (0x00000000UL)

/* RXCRC @Bits 0..23 : CRC field of previously received packet */
  #define RADIO_RXCRC_RXCRC_Pos (0UL)
  #define RADIO_RXCRC_RXCRC_Msk (0xFFFFFFUL << RADIO_RXCRC_RXCRC_Pos)


/* RADIO_DAI: Device address match index */
  #define RADIO_DAI_ResetValue (0x00000000UL)

/* DAI @Bits 0..2 : Device address match index */
  #define RADIO_DAI_DAI_Pos (0UL)
  #define RADIO_DAI_DAI_Msk (0x7UL << RADIO_DAI_DAI_Pos)


/* RADIO_PDUSTAT: Payload status */
  #define RADIO_PDUSTAT_ResetValue (0x00000000UL)

/* PDUSTAT @Bit 0 : Status on payload length vs. PCNF1.MAXLEN */
  #define RADIO_PDUSTAT_PDUSTAT_Pos (0UL)
  #define RADIO_PDUSTAT_PDUSTAT_Msk (0x1UL << RADIO_PDUSTAT_PDUSTAT_Pos)
  #define RADIO_PDUSTAT_PDUSTAT_Min (0x0UL)
  #define RADIO_PDUSTAT_PDUSTAT_Max (0x1UL)
  #define RADIO_PDUSTAT_PDUSTAT_LessThan (0x0UL)
  #define RADIO_PDUSTAT_PDUSTAT_GreaterThan (0x1UL)

/* CISTAT @Bits 1..2 : Status on what rate packet is received with in Long Range */
  #define RADIO_PDUSTAT_CISTAT_Pos (1UL)
  #define RADIO_PDUSTAT_CISTAT_Msk (0x3UL << RADIO_PDUSTAT_CISTAT_Pos)
  #define RADIO_PDUSTAT_CISTAT_Min (0x0UL)
  #define RADIO_PDUSTAT_CISTAT_Max (0x1UL)
  #define RADIO_PDUSTAT_CISTAT_LR125kbit (0x0UL)
  #define RADIO_PDUSTAT_CISTAT_LR500kbit (0x1UL)


/* RADIO_PCNF0: Packet configuration register 0 */
  #define RADIO_PCNF0_ResetValue (0x00000000UL)

/* LFLEN @Bits 0..3 : Length on air of LENGTH field in number of bits. */
  #define RADIO_PCNF0_LFLEN_Pos (0UL)
  #define RADIO_PCNF0_LFLEN_Msk (0xFUL << RADIO_PCNF0_LFLEN_Pos)

/* S0LEN @Bit 8 : Length on air of S0 field in number of bytes. */
  #define RADIO_PCNF0_S0LEN_Pos (8UL)
  #define RADIO_PCNF0_S0LEN_Msk (0x1UL << RADIO_PCNF0_S0LEN_Pos)

/* S1LEN @Bits 16..19 : Length on air of S1 field in number of bits. */
  #define RADIO_PCNF0_S1LEN_Pos (16UL)
  #define RADIO_PCNF0_S1LEN_Msk (0xFUL << RADIO_PCNF0_S1LEN_Pos)

/* S1INCL @Bits 20..21 : Include or exclude S1 field in RAM */
  #define RADIO_PCNF0_S1INCL_Pos (20UL)
  #define RADIO_PCNF0_S1INCL_Msk (0x3UL << RADIO_PCNF0_S1INCL_Pos)
  #define RADIO_PCNF0_S1INCL_Min (0x0UL)
  #define RADIO_PCNF0_S1INCL_Max (0x1UL)
  #define RADIO_PCNF0_S1INCL_Automatic (0x0UL)
  #define RADIO_PCNF0_S1INCL_Include (0x1UL)

/* CILEN @Bits 22..23 : Length of code indicator - long range */
  #define RADIO_PCNF0_CILEN_Pos (22UL)
  #define RADIO_PCNF0_CILEN_Msk (0x3UL << RADIO_PCNF0_CILEN_Pos)

/* PLEN @Bits 24..25 : Length of preamble on air. Decision point: TASKS_START task */
  #define RADIO_PCNF0_PLEN_Pos (24UL)
  #define RADIO_PCNF0_PLEN_Msk (0x3UL << RADIO_PCNF0_PLEN_Pos)
  #define RADIO_PCNF0_PLEN_Min (0x0UL)
  #define RADIO_PCNF0_PLEN_Max (0x3UL)
  #define RADIO_PCNF0_PLEN_8bit (0x0UL)
  #define RADIO_PCNF0_PLEN_16bit (0x1UL)
  #define RADIO_PCNF0_PLEN_32bitZero (0x2UL)
  #define RADIO_PCNF0_PLEN_LongRange (0x3UL)

/* CRCINC @Bit 26 : Indicates if LENGTH field contains CRC or not */
  #define RADIO_PCNF0_CRCINC_Pos (26UL)
  #define RADIO_PCNF0_CRCINC_Msk (0x1UL << RADIO_PCNF0_CRCINC_Pos)
  #define RADIO_PCNF0_CRCINC_Min (0x0UL)
  #define RADIO_PCNF0_CRCINC_Max (0x1UL)
  #define RADIO_PCNF0_CRCINC_Exclude (0x0UL)
  #define RADIO_PCNF0_CRCINC_Include (0x1UL)

/* TERMLEN @Bits 29..30 : Length of TERM field in Long Range operation */
  #define RADIO_PCNF0_TERMLEN_Pos (29UL)
  #define RADIO_PCNF0_TERMLEN_Msk (0x3UL << RADIO_PCNF0_TERMLEN_Pos)


/* RADIO_PCNF1: Packet configuration register 1 */
  #define RADIO_PCNF1_ResetValue (0x00000000UL)

/* MAXLEN @Bits 0..7 : Maximum length of packet payload. If the packet payload is larger than MAXLEN, the radio will truncate
                       the payload to MAXLEN. */

  #define RADIO_PCNF1_MAXLEN_Pos (0UL)
  #define RADIO_PCNF1_MAXLEN_Msk (0xFFUL << RADIO_PCNF1_MAXLEN_Pos)
  #define RADIO_PCNF1_MAXLEN_Min (0x00UL)
  #define RADIO_PCNF1_MAXLEN_Max (0xFFUL)

/* STATLEN @Bits 8..15 : Static length in number of bytes */
  #define RADIO_PCNF1_STATLEN_Pos (8UL)
  #define RADIO_PCNF1_STATLEN_Msk (0xFFUL << RADIO_PCNF1_STATLEN_Pos)
  #define RADIO_PCNF1_STATLEN_Min (0x00UL)
  #define RADIO_PCNF1_STATLEN_Max (0xFFUL)

/* BALEN @Bits 16..18 : Base address length in number of bytes */
  #define RADIO_PCNF1_BALEN_Pos (16UL)
  #define RADIO_PCNF1_BALEN_Msk (0x7UL << RADIO_PCNF1_BALEN_Pos)
  #define RADIO_PCNF1_BALEN_Min (0x1UL)
  #define RADIO_PCNF1_BALEN_Max (0x1UL)

/* ENDIAN @Bit 24 : On-air endianness of packet, this applies to the S0, LENGTH, S1, and the PAYLOAD fields. */
  #define RADIO_PCNF1_ENDIAN_Pos (24UL)
  #define RADIO_PCNF1_ENDIAN_Msk (0x1UL << RADIO_PCNF1_ENDIAN_Pos)
  #define RADIO_PCNF1_ENDIAN_Min (0x0UL)
  #define RADIO_PCNF1_ENDIAN_Max (0x1UL)
  #define RADIO_PCNF1_ENDIAN_Little (0x0UL)
  #define RADIO_PCNF1_ENDIAN_Big (0x1UL)

/* WHITEEN @Bit 25 : Enable or disable packet whitening */
  #define RADIO_PCNF1_WHITEEN_Pos (25UL)
  #define RADIO_PCNF1_WHITEEN_Msk (0x1UL << RADIO_PCNF1_WHITEEN_Pos)
  #define RADIO_PCNF1_WHITEEN_Min (0x0UL)
  #define RADIO_PCNF1_WHITEEN_Max (0x1UL)
  #define RADIO_PCNF1_WHITEEN_Disabled (0x0UL)
  #define RADIO_PCNF1_WHITEEN_Enabled (0x1UL)

/* WHITEOFFSET @Bit 26 : If whitening is enabled S0 can be configured to be excluded from whitening */
  #define RADIO_PCNF1_WHITEOFFSET_Pos (26UL)
  #define RADIO_PCNF1_WHITEOFFSET_Msk (0x1UL << RADIO_PCNF1_WHITEOFFSET_Pos)
  #define RADIO_PCNF1_WHITEOFFSET_Min (0x0UL)
  #define RADIO_PCNF1_WHITEOFFSET_Max (0x1UL)
  #define RADIO_PCNF1_WHITEOFFSET_Include (0x0UL)
  #define RADIO_PCNF1_WHITEOFFSET_Exclude (0x1UL)


/* RADIO_BASE0: Base address 0 */
  #define RADIO_BASE0_ResetValue (0x00000000UL)

/* BASE0 @Bits 0..31 : Base address 0 */
  #define RADIO_BASE0_BASE0_Pos (0UL)
  #define RADIO_BASE0_BASE0_Msk (0xFFFFFFFFUL << RADIO_BASE0_BASE0_Pos)


/* RADIO_BASE1: Base address 1 */
  #define RADIO_BASE1_ResetValue (0x00000000UL)

/* BASE1 @Bits 0..31 : Base address 1 */
  #define RADIO_BASE1_BASE1_Pos (0UL)
  #define RADIO_BASE1_BASE1_Msk (0xFFFFFFFFUL << RADIO_BASE1_BASE1_Pos)


/* RADIO_PREFIX0: Prefixes bytes for logical addresses 0-3 */
  #define RADIO_PREFIX0_ResetValue (0x00000000UL)

/* AP0 @Bits 0..7 : Address prefix 0 */
  #define RADIO_PREFIX0_AP0_Pos (0UL)
  #define RADIO_PREFIX0_AP0_Msk (0xFFUL << RADIO_PREFIX0_AP0_Pos)

/* AP1 @Bits 8..15 : Address prefix 1 */
  #define RADIO_PREFIX0_AP1_Pos (8UL)
  #define RADIO_PREFIX0_AP1_Msk (0xFFUL << RADIO_PREFIX0_AP1_Pos)

/* AP2 @Bits 16..23 : Address prefix 2 */
  #define RADIO_PREFIX0_AP2_Pos (16UL)
  #define RADIO_PREFIX0_AP2_Msk (0xFFUL << RADIO_PREFIX0_AP2_Pos)

/* AP3 @Bits 24..31 : Address prefix 3 */
  #define RADIO_PREFIX0_AP3_Pos (24UL)
  #define RADIO_PREFIX0_AP3_Msk (0xFFUL << RADIO_PREFIX0_AP3_Pos)


/* RADIO_PREFIX1: Prefixes bytes for logical addresses 4-7 */
  #define RADIO_PREFIX1_ResetValue (0x00000000UL)

/* AP4 @Bits 0..7 : Address prefix 4 */
  #define RADIO_PREFIX1_AP4_Pos (0UL)
  #define RADIO_PREFIX1_AP4_Msk (0xFFUL << RADIO_PREFIX1_AP4_Pos)

/* AP5 @Bits 8..15 : Address prefix 5 */
  #define RADIO_PREFIX1_AP5_Pos (8UL)
  #define RADIO_PREFIX1_AP5_Msk (0xFFUL << RADIO_PREFIX1_AP5_Pos)

/* AP6 @Bits 16..23 : Address prefix 6 */
  #define RADIO_PREFIX1_AP6_Pos (16UL)
  #define RADIO_PREFIX1_AP6_Msk (0xFFUL << RADIO_PREFIX1_AP6_Pos)

/* AP7 @Bits 24..31 : Address prefix 7 */
  #define RADIO_PREFIX1_AP7_Pos (24UL)
  #define RADIO_PREFIX1_AP7_Msk (0xFFUL << RADIO_PREFIX1_AP7_Pos)


/* RADIO_TXADDRESS: Transmit address select */
  #define RADIO_TXADDRESS_ResetValue (0x00000000UL)

/* TXADDRESS @Bits 0..2 : Transmit address select */
  #define RADIO_TXADDRESS_TXADDRESS_Pos (0UL)
  #define RADIO_TXADDRESS_TXADDRESS_Msk (0x7UL << RADIO_TXADDRESS_TXADDRESS_Pos)


/* RADIO_RXADDRESSES: Receive address select */
  #define RADIO_RXADDRESSES_ResetValue (0x00000000UL)

/* ADDR0 @Bit 0 : Enable or disable reception on logical address 0 */
  #define RADIO_RXADDRESSES_ADDR0_Pos (0UL)
  #define RADIO_RXADDRESSES_ADDR0_Msk (0x1UL << RADIO_RXADDRESSES_ADDR0_Pos)
  #define RADIO_RXADDRESSES_ADDR0_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR0_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR0_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR0_Enabled (0x1UL)

/* ADDR1 @Bit 1 : Enable or disable reception on logical address 1 */
  #define RADIO_RXADDRESSES_ADDR1_Pos (1UL)
  #define RADIO_RXADDRESSES_ADDR1_Msk (0x1UL << RADIO_RXADDRESSES_ADDR1_Pos)
  #define RADIO_RXADDRESSES_ADDR1_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR1_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR1_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR1_Enabled (0x1UL)

/* ADDR2 @Bit 2 : Enable or disable reception on logical address 2 */
  #define RADIO_RXADDRESSES_ADDR2_Pos (2UL)
  #define RADIO_RXADDRESSES_ADDR2_Msk (0x1UL << RADIO_RXADDRESSES_ADDR2_Pos)
  #define RADIO_RXADDRESSES_ADDR2_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR2_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR2_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR2_Enabled (0x1UL)

/* ADDR3 @Bit 3 : Enable or disable reception on logical address 3 */
  #define RADIO_RXADDRESSES_ADDR3_Pos (3UL)
  #define RADIO_RXADDRESSES_ADDR3_Msk (0x1UL << RADIO_RXADDRESSES_ADDR3_Pos)
  #define RADIO_RXADDRESSES_ADDR3_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR3_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR3_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR3_Enabled (0x1UL)

/* ADDR4 @Bit 4 : Enable or disable reception on logical address 4 */
  #define RADIO_RXADDRESSES_ADDR4_Pos (4UL)
  #define RADIO_RXADDRESSES_ADDR4_Msk (0x1UL << RADIO_RXADDRESSES_ADDR4_Pos)
  #define RADIO_RXADDRESSES_ADDR4_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR4_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR4_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR4_Enabled (0x1UL)

/* ADDR5 @Bit 5 : Enable or disable reception on logical address 5 */
  #define RADIO_RXADDRESSES_ADDR5_Pos (5UL)
  #define RADIO_RXADDRESSES_ADDR5_Msk (0x1UL << RADIO_RXADDRESSES_ADDR5_Pos)
  #define RADIO_RXADDRESSES_ADDR5_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR5_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR5_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR5_Enabled (0x1UL)

/* ADDR6 @Bit 6 : Enable or disable reception on logical address 6 */
  #define RADIO_RXADDRESSES_ADDR6_Pos (6UL)
  #define RADIO_RXADDRESSES_ADDR6_Msk (0x1UL << RADIO_RXADDRESSES_ADDR6_Pos)
  #define RADIO_RXADDRESSES_ADDR6_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR6_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR6_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR6_Enabled (0x1UL)

/* ADDR7 @Bit 7 : Enable or disable reception on logical address 7 */
  #define RADIO_RXADDRESSES_ADDR7_Pos (7UL)
  #define RADIO_RXADDRESSES_ADDR7_Msk (0x1UL << RADIO_RXADDRESSES_ADDR7_Pos)
  #define RADIO_RXADDRESSES_ADDR7_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR7_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR7_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR7_Enabled (0x1UL)


/* RADIO_CRCCNF: CRC configuration */
  #define RADIO_CRCCNF_ResetValue (0x00000000UL)

/* LEN @Bits 0..1 : CRC length in number of bytes. */
  #define RADIO_CRCCNF_LEN_Pos (0UL)
  #define RADIO_CRCCNF_LEN_Msk (0x3UL << RADIO_CRCCNF_LEN_Pos)
  #define RADIO_CRCCNF_LEN_Min (0x0UL)
  #define RADIO_CRCCNF_LEN_Max (0x3UL)
  #define RADIO_CRCCNF_LEN_Disabled (0x0UL)
  #define RADIO_CRCCNF_LEN_One (0x1UL)
  #define RADIO_CRCCNF_LEN_Two (0x2UL)
  #define RADIO_CRCCNF_LEN_Three (0x3UL)

/* SKIPADDR @Bits 8..10 : Control whether CRC calculation skips the address field. Other fields can also be skipped. */
  #define RADIO_CRCCNF_SKIPADDR_Pos (8UL)
  #define RADIO_CRCCNF_SKIPADDR_Msk (0x7UL << RADIO_CRCCNF_SKIPADDR_Pos)
  #define RADIO_CRCCNF_SKIPADDR_Min (0x0UL)
  #define RADIO_CRCCNF_SKIPADDR_Max (0x4UL)
  #define RADIO_CRCCNF_SKIPADDR_Include (0x0UL)
  #define RADIO_CRCCNF_SKIPADDR_Skip (0x1UL)
  #define RADIO_CRCCNF_SKIPADDR_Ieee802154 (0x2UL)   /*!< CRC calculation starting at first byte after length field (as per
                                                          802.15.4 standard).*/
  #define RADIO_CRCCNF_SKIPADDR_SkipS0 (0x3UL)
  #define RADIO_CRCCNF_SKIPADDR_SkipS1 (0x4UL)


/* RADIO_CRCPOLY: CRC polynomial */
  #define RADIO_CRCPOLY_ResetValue (0x00000000UL)

/* CRCPOLY @Bits 0..23 : CRC polynomial */
  #define RADIO_CRCPOLY_CRCPOLY_Pos (0UL)
  #define RADIO_CRCPOLY_CRCPOLY_Msk (0xFFFFFFUL << RADIO_CRCPOLY_CRCPOLY_Pos)


/* RADIO_CRCINIT: CRC initial value */
  #define RADIO_CRCINIT_ResetValue (0x00000000UL)

/* CRCINIT @Bits 0..23 : CRC initial value */
  #define RADIO_CRCINIT_CRCINIT_Pos (0UL)
  #define RADIO_CRCINIT_CRCINIT_Msk (0xFFFFFFUL << RADIO_CRCINIT_CRCINIT_Pos)


/* RADIO_DAB: Device address base segment n */
  #define RADIO_DAB_MaxCount (8UL)
  #define RADIO_DAB_MaxIndex (7UL)
  #define RADIO_DAB_MinIndex (0UL)
  #define RADIO_DAB_ResetValue (0x00000000UL)

/* DAB @Bits 0..31 : Device address base segment n */
  #define RADIO_DAB_DAB_Pos (0UL)
  #define RADIO_DAB_DAB_Msk (0xFFFFFFFFUL << RADIO_DAB_DAB_Pos)


/* RADIO_DAP: Device address prefix n */
  #define RADIO_DAP_MaxCount (8UL)
  #define RADIO_DAP_MaxIndex (7UL)
  #define RADIO_DAP_MinIndex (0UL)
  #define RADIO_DAP_ResetValue (0x00000000UL)

/* DAP @Bits 0..15 : Device address prefix n */
  #define RADIO_DAP_DAP_Pos (0UL)
  #define RADIO_DAP_DAP_Msk (0xFFFFUL << RADIO_DAP_DAP_Pos)


/* RADIO_DACNF: Device address match configuration */
  #define RADIO_DACNF_ResetValue (0x00000000UL)

/* ENA0 @Bit 0 : Enable or disable device address matching using device address 0 */
  #define RADIO_DACNF_ENA0_Pos (0UL)
  #define RADIO_DACNF_ENA0_Msk (0x1UL << RADIO_DACNF_ENA0_Pos)
  #define RADIO_DACNF_ENA0_Min (0x0UL)
  #define RADIO_DACNF_ENA0_Max (0x1UL)
  #define RADIO_DACNF_ENA0_Disabled (0x0UL)
  #define RADIO_DACNF_ENA0_Enabled (0x1UL)

/* ENA1 @Bit 1 : Enable or disable device address matching using device address 1 */
  #define RADIO_DACNF_ENA1_Pos (1UL)
  #define RADIO_DACNF_ENA1_Msk (0x1UL << RADIO_DACNF_ENA1_Pos)
  #define RADIO_DACNF_ENA1_Min (0x0UL)
  #define RADIO_DACNF_ENA1_Max (0x1UL)
  #define RADIO_DACNF_ENA1_Disabled (0x0UL)
  #define RADIO_DACNF_ENA1_Enabled (0x1UL)

/* ENA2 @Bit 2 : Enable or disable device address matching using device address 2 */
  #define RADIO_DACNF_ENA2_Pos (2UL)
  #define RADIO_DACNF_ENA2_Msk (0x1UL << RADIO_DACNF_ENA2_Pos)
  #define RADIO_DACNF_ENA2_Min (0x0UL)
  #define RADIO_DACNF_ENA2_Max (0x1UL)
  #define RADIO_DACNF_ENA2_Disabled (0x0UL)
  #define RADIO_DACNF_ENA2_Enabled (0x1UL)

/* ENA3 @Bit 3 : Enable or disable device address matching using device address 3 */
  #define RADIO_DACNF_ENA3_Pos (3UL)
  #define RADIO_DACNF_ENA3_Msk (0x1UL << RADIO_DACNF_ENA3_Pos)
  #define RADIO_DACNF_ENA3_Min (0x0UL)
  #define RADIO_DACNF_ENA3_Max (0x1UL)
  #define RADIO_DACNF_ENA3_Disabled (0x0UL)
  #define RADIO_DACNF_ENA3_Enabled (0x1UL)

/* ENA4 @Bit 4 : Enable or disable device address matching using device address 4 */
  #define RADIO_DACNF_ENA4_Pos (4UL)
  #define RADIO_DACNF_ENA4_Msk (0x1UL << RADIO_DACNF_ENA4_Pos)
  #define RADIO_DACNF_ENA4_Min (0x0UL)
  #define RADIO_DACNF_ENA4_Max (0x1UL)
  #define RADIO_DACNF_ENA4_Disabled (0x0UL)
  #define RADIO_DACNF_ENA4_Enabled (0x1UL)

/* ENA5 @Bit 5 : Enable or disable device address matching using device address 5 */
  #define RADIO_DACNF_ENA5_Pos (5UL)
  #define RADIO_DACNF_ENA5_Msk (0x1UL << RADIO_DACNF_ENA5_Pos)
  #define RADIO_DACNF_ENA5_Min (0x0UL)
  #define RADIO_DACNF_ENA5_Max (0x1UL)
  #define RADIO_DACNF_ENA5_Disabled (0x0UL)
  #define RADIO_DACNF_ENA5_Enabled (0x1UL)

/* ENA6 @Bit 6 : Enable or disable device address matching using device address 6 */
  #define RADIO_DACNF_ENA6_Pos (6UL)
  #define RADIO_DACNF_ENA6_Msk (0x1UL << RADIO_DACNF_ENA6_Pos)
  #define RADIO_DACNF_ENA6_Min (0x0UL)
  #define RADIO_DACNF_ENA6_Max (0x1UL)
  #define RADIO_DACNF_ENA6_Disabled (0x0UL)
  #define RADIO_DACNF_ENA6_Enabled (0x1UL)

/* ENA7 @Bit 7 : Enable or disable device address matching using device address 7 */
  #define RADIO_DACNF_ENA7_Pos (7UL)
  #define RADIO_DACNF_ENA7_Msk (0x1UL << RADIO_DACNF_ENA7_Pos)
  #define RADIO_DACNF_ENA7_Min (0x0UL)
  #define RADIO_DACNF_ENA7_Max (0x1UL)
  #define RADIO_DACNF_ENA7_Disabled (0x0UL)
  #define RADIO_DACNF_ENA7_Enabled (0x1UL)

/* TXADD0 @Bit 8 : TxAdd for device address 0 */
  #define RADIO_DACNF_TXADD0_Pos (8UL)
  #define RADIO_DACNF_TXADD0_Msk (0x1UL << RADIO_DACNF_TXADD0_Pos)

/* TXADD1 @Bit 9 : TxAdd for device address 1 */
  #define RADIO_DACNF_TXADD1_Pos (9UL)
  #define RADIO_DACNF_TXADD1_Msk (0x1UL << RADIO_DACNF_TXADD1_Pos)

/* TXADD2 @Bit 10 : TxAdd for device address 2 */
  #define RADIO_DACNF_TXADD2_Pos (10UL)
  #define RADIO_DACNF_TXADD2_Msk (0x1UL << RADIO_DACNF_TXADD2_Pos)

/* TXADD3 @Bit 11 : TxAdd for device address 3 */
  #define RADIO_DACNF_TXADD3_Pos (11UL)
  #define RADIO_DACNF_TXADD3_Msk (0x1UL << RADIO_DACNF_TXADD3_Pos)

/* TXADD4 @Bit 12 : TxAdd for device address 4 */
  #define RADIO_DACNF_TXADD4_Pos (12UL)
  #define RADIO_DACNF_TXADD4_Msk (0x1UL << RADIO_DACNF_TXADD4_Pos)

/* TXADD5 @Bit 13 : TxAdd for device address 5 */
  #define RADIO_DACNF_TXADD5_Pos (13UL)
  #define RADIO_DACNF_TXADD5_Msk (0x1UL << RADIO_DACNF_TXADD5_Pos)

/* TXADD6 @Bit 14 : TxAdd for device address 6 */
  #define RADIO_DACNF_TXADD6_Pos (14UL)
  #define RADIO_DACNF_TXADD6_Msk (0x1UL << RADIO_DACNF_TXADD6_Pos)

/* TXADD7 @Bit 15 : TxAdd for device address 7 */
  #define RADIO_DACNF_TXADD7_Pos (15UL)
  #define RADIO_DACNF_TXADD7_Msk (0x1UL << RADIO_DACNF_TXADD7_Pos)


/* RADIO_BCC: Bit counter compare */
  #define RADIO_BCC_ResetValue (0x00000000UL)

/* BCC @Bits 0..31 : Bit counter compare */
  #define RADIO_BCC_BCC_Pos (0UL)
  #define RADIO_BCC_BCC_Msk (0xFFFFFFFFUL << RADIO_BCC_BCC_Pos)


/* RADIO_CTESTATUS: CTEInfo parsed from received packet */
  #define RADIO_CTESTATUS_ResetValue (0x00000000UL)

/* CTETIME @Bits 0..4 : CTETime parsed from packet */
  #define RADIO_CTESTATUS_CTETIME_Pos (0UL)
  #define RADIO_CTESTATUS_CTETIME_Msk (0x1FUL << RADIO_CTESTATUS_CTETIME_Pos)

/* RFU @Bit 5 : RFU parsed from packet */
  #define RADIO_CTESTATUS_RFU_Pos (5UL)
  #define RADIO_CTESTATUS_RFU_Msk (0x1UL << RADIO_CTESTATUS_RFU_Pos)

/* CTETYPE @Bits 6..7 : CTEType parsed from packet */
  #define RADIO_CTESTATUS_CTETYPE_Pos (6UL)
  #define RADIO_CTESTATUS_CTETYPE_Msk (0x3UL << RADIO_CTESTATUS_CTETYPE_Pos)


/* RADIO_MHRMATCHCONF: Search pattern configuration */
  #define RADIO_MHRMATCHCONF_ResetValue (0x00000000UL)

/* MHRMATCHCONF @Bits 0..31 : Search pattern configuration */
  #define RADIO_MHRMATCHCONF_MHRMATCHCONF_Pos (0UL)
  #define RADIO_MHRMATCHCONF_MHRMATCHCONF_Msk (0xFFFFFFFFUL << RADIO_MHRMATCHCONF_MHRMATCHCONF_Pos) /*!< Bit mask of
                                                                            MHRMATCHCONF field.*/


/* RADIO_MHRMATCHMASK: Pattern mask */
  #define RADIO_MHRMATCHMASK_ResetValue (0x00000000UL)

/* MHRMATCHMASK @Bits 0..31 : Pattern mask */
  #define RADIO_MHRMATCHMASK_MHRMATCHMASK_Pos (0UL)
  #define RADIO_MHRMATCHMASK_MHRMATCHMASK_Msk (0xFFFFFFFFUL << RADIO_MHRMATCHMASK_MHRMATCHMASK_Pos) /*!< Bit mask of
                                                                            MHRMATCHMASK field.*/


/* RADIO_SFD: IEEE 802.15.4 start of frame delimiter */
  #define RADIO_SFD_ResetValue (0x000000A7UL)

/* SFD @Bits 0..7 : IEEE 802.15.4 start of frame delimiter. Note: the least significant 4 bits of the SFD cannot all be zeros. */
  #define RADIO_SFD_SFD_Pos (0UL)
  #define RADIO_SFD_SFD_Msk (0xFFUL << RADIO_SFD_SFD_Pos)


/* RADIO_CTEINLINECONF: Configuration for CTE inline mode */
  #define RADIO_CTEINLINECONF_ResetValue (0x00002800UL)

/* CTEINLINECTRLEN @Bit 0 : Enable parsing of CTEInfo from received packet in BLE modes */
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Pos (0UL)
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Msk (0x1UL << RADIO_CTEINLINECONF_CTEINLINECTRLEN_Pos) /*!< Bit mask of
                                                                            CTEINLINECTRLEN field.*/
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Min (0x0UL)
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Max (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Enabled (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Disabled (0x0UL)

/* CTEINFOINS1 @Bit 3 : CTEInfo is S1 byte or not */
  #define RADIO_CTEINLINECONF_CTEINFOINS1_Pos (3UL)
  #define RADIO_CTEINLINECONF_CTEINFOINS1_Msk (0x1UL << RADIO_CTEINLINECONF_CTEINFOINS1_Pos) /*!< Bit mask of CTEINFOINS1
                                                                            field.*/
  #define RADIO_CTEINLINECONF_CTEINFOINS1_Min (0x0UL)
  #define RADIO_CTEINLINECONF_CTEINFOINS1_Max (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINFOINS1_InS1 (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINFOINS1_NotInS1 (0x0UL)

/* CTEERRORHANDLING @Bit 4 : Sampling/switching if CRC is not OK */
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Pos (4UL)
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Msk (0x1UL << RADIO_CTEINLINECONF_CTEERRORHANDLING_Pos) /*!< Bit mask of
                                                                            CTEERRORHANDLING field.*/
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Min (0x0UL)
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Max (0x1UL)
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Yes (0x1UL)
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_No (0x0UL)

/* CTETIMEVALIDRANGE @Bits 6..7 : Max range of CTETime */
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Pos (6UL)
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Msk (0x3UL << RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Pos) /*!< Bit mask of
                                                                            CTETIMEVALIDRANGE field.*/
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Min (0x0UL)
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Max (0x2UL)
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_20 (0x0UL) /*!< 20 in 8us unit (default) Set to 20 if parsed CTETime is larger
                                                                han 20*/
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_31 (0x1UL)
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_63 (0x2UL)

/* CTEINLINERXMODE1US @Bits 10..12 : Spacing between samples for the samples in the SWITCHING period when CTEINLINEMODE is set */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Pos (10UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Msk (0x7UL << RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Pos) /*!< Bit mask of
                                                                            CTEINLINERXMODE1US field.*/
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Min (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Max (0x6UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_4us (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_2us (0x2UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_1us (0x3UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_500ns (0x4UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_250ns (0x5UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_125ns (0x6UL)

/* CTEINLINERXMODE2US @Bits 13..15 : Spacing between samples for the samples in the SWITCHING period when CTEINLINEMODE is set */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Pos (13UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Msk (0x7UL << RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Pos) /*!< Bit mask of
                                                                            CTEINLINERXMODE2US field.*/
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Min (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Max (0x6UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_4us (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_2us (0x2UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_1us (0x3UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_500ns (0x4UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_250ns (0x5UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_125ns (0x6UL)

/* S0CONF @Bits 16..23 : S0 bit pattern to match */
  #define RADIO_CTEINLINECONF_S0CONF_Pos (16UL)
  #define RADIO_CTEINLINECONF_S0CONF_Msk (0xFFUL << RADIO_CTEINLINECONF_S0CONF_Pos)

/* S0MASK @Bits 24..31 : S0 bit mask to set which bit to match */
  #define RADIO_CTEINLINECONF_S0MASK_Pos (24UL)
  #define RADIO_CTEINLINECONF_S0MASK_Msk (0xFFUL << RADIO_CTEINLINECONF_S0MASK_Pos)


/* RADIO_PACKETPTR: Packet pointer */
  #define RADIO_PACKETPTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Data pointer */
  #define RADIO_PACKETPTR_PTR_Pos (0UL)
  #define RADIO_PACKETPTR_PTR_Msk (0xFFFFFFFFUL << RADIO_PACKETPTR_PTR_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                        REGULATORS                                        ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ============================================== Struct REGULATORS_HIBERNATOR =============================================== */
/**
  * @brief HIBERNATOR [REGULATORS_HIBERNATOR] Hibernator interface
  */
typedef struct {
  __OM  uint32_t  SYSTEMHIBERNATE;                   /*!< (@ 0x00000000) Enter System hibernation mode for extreme low power
                                                                         consumption*/
  __IOM uint32_t  GPIORETENTIONRELEASE;              /*!< (@ 0x00000004) Release GPIO retention on wake up from hibernation
                                                                         mode.*/
  __IM  uint32_t  GPIORETENTIONSTATUS;
} NRF_REGULATORS_HIBERNATOR_Type;

/* REGULATORS_HIBERNATOR_SYSTEMHIBERNATE: Enter System hibernation mode for extreme low power consumption */
  #define REGULATORS_HIBERNATOR_SYSTEMHIBERNATE_ResetValue (0x00000000UL)

/* SYSTEMHIBERNATE @Bit 0 : Enter hibernation mode */
  #define REGULATORS_HIBERNATOR_SYSTEMHIBERNATE_SYSTEMHIBERNATE_Pos (0UL)
  #define REGULATORS_HIBERNATOR_SYSTEMHIBERNATE_SYSTEMHIBERNATE_Msk (0x1UL << REGULATORS_HIBERNATOR_SYSTEMHIBERNATE_SYSTEMHIBERNATE_Pos)
                                                                            /*!< Bit mask of SYSTEMHIBERNATE field.*/
  #define REGULATORS_HIBERNATOR_SYSTEMHIBERNATE_SYSTEMHIBERNATE_Min (0x1UL)
  #define REGULATORS_HIBERNATOR_SYSTEMHIBERNATE_SYSTEMHIBERNATE_Max (0x1UL)
  #define REGULATORS_HIBERNATOR_SYSTEMHIBERNATE_SYSTEMHIBERNATE_Enter (0x1UL)


/* REGULATORS_HIBERNATOR_GPIORETENTIONRELEASE: Release GPIO retention on wake up from hibernation mode. */
  #define REGULATORS_HIBERNATOR_GPIORETENTIONRELEASE_ResetValue (0x00000000UL) /*!< Reset value of GPIORETENTIONRELEASE
                                                                            register.*/

/* GPIORETENTIONRELEASE @Bit 0 : Release GPIO retention */
  #define REGULATORS_HIBERNATOR_GPIORETENTIONRELEASE_GPIORETENTIONRELEASE_Pos (0UL) /*!< Position of GPIORETENTIONRELEASE
                                                                            field.*/
  #define REGULATORS_HIBERNATOR_GPIORETENTIONRELEASE_GPIORETENTIONRELEASE_Msk (0x1UL << REGULATORS_HIBERNATOR_GPIORETENTIONRELEASE_GPIORETENTIONRELEASE_Pos)
                                                                            /*!< Bit mask of GPIORETENTIONRELEASE field.*/
  #define REGULATORS_HIBERNATOR_GPIORETENTIONRELEASE_GPIORETENTIONRELEASE_Min (0x0UL) /*!< Min enumerator value of
                                                                            GPIORETENTIONRELEASE field.*/
  #define REGULATORS_HIBERNATOR_GPIORETENTIONRELEASE_GPIORETENTIONRELEASE_Max (0x1UL) /*!< Max enumerator value of
                                                                            GPIORETENTIONRELEASE field.*/
  #define REGULATORS_HIBERNATOR_GPIORETENTIONRELEASE_GPIORETENTIONRELEASE_NoRelease (0x0UL)
  #define REGULATORS_HIBERNATOR_GPIORETENTIONRELEASE_GPIORETENTIONRELEASE_Release (0x1UL)


/* REGULATORS_HIBERNATOR_GPIORETENTIONSTATUS: Read out if GPIO retention is active. */
  #define REGULATORS_HIBERNATOR_GPIORETENTIONSTATUS_ResetValue (0x00000000UL)

/* GPIORETENTIONSTATUS @Bit 0 : Read out if GPIO retention is active. */
  #define REGULATORS_HIBERNATOR_GPIORETENTIONSTATUS_GPIORETENTIONSTATUS_Pos (0UL)
  #define REGULATORS_HIBERNATOR_GPIORETENTIONSTATUS_GPIORETENTIONSTATUS_Msk (0x1UL << REGULATORS_HIBERNATOR_GPIORETENTIONSTATUS_GPIORETENTIONSTATUS_Pos)
                                                                            /*!< Bit mask of GPIORETENTIONSTATUS field.*/
  #define REGULATORS_HIBERNATOR_GPIORETENTIONSTATUS_GPIORETENTIONSTATUS_Min (0x0UL) /*!< Min enumerator value of
                                                                            GPIORETENTIONSTATUS field.*/
  #define REGULATORS_HIBERNATOR_GPIORETENTIONSTATUS_GPIORETENTIONSTATUS_Max (0x1UL) /*!< Max enumerator value of
                                                                            GPIORETENTIONSTATUS field.*/
  #define REGULATORS_HIBERNATOR_GPIORETENTIONSTATUS_GPIORETENTIONSTATUS_NotActive (0x0UL)
  #define REGULATORS_HIBERNATOR_GPIORETENTIONSTATUS_GPIORETENTIONSTATUS_Active (0x1UL)



/* =============================================== Struct REGULATORS_VREGMAIN ================================================ */
/**
  * @brief VREGMAIN [REGULATORS_VREGMAIN] Register interface for main voltage regulator.
  */
typedef struct {
  __IOM uint32_t  DCDCEN;
  __IM  uint32_t  INDUCTORDET;
} NRF_REGULATORS_VREGMAIN_Type;

/* REGULATORS_VREGMAIN_DCDCEN: Enable DC/DC converter for better power efficiency */
  #define REGULATORS_VREGMAIN_DCDCEN_ResetValue (0x00000000UL)

/* VAL @Bit 0 : Enable DC/DC buck converter */
  #define REGULATORS_VREGMAIN_DCDCEN_VAL_Pos (0UL)
  #define REGULATORS_VREGMAIN_DCDCEN_VAL_Msk (0x1UL << REGULATORS_VREGMAIN_DCDCEN_VAL_Pos)
  #define REGULATORS_VREGMAIN_DCDCEN_VAL_Min (0x0UL)
  #define REGULATORS_VREGMAIN_DCDCEN_VAL_Max (0x1UL)
  #define REGULATORS_VREGMAIN_DCDCEN_VAL_Disabled (0x0UL)
  #define REGULATORS_VREGMAIN_DCDCEN_VAL_Enabled (0x1UL)


/* REGULATORS_VREGMAIN_INDUCTORDET: VREGMAIN inductor detection */
  #define REGULATORS_VREGMAIN_INDUCTORDET_ResetValue (0x00000000UL)

/* DETECTED @Bit 0 : (unspecified) */
  #define REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_Pos (0UL)
  #define REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_Msk (0x1UL << REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_Pos) /*!< Bit mask of
                                                                            DETECTED field.*/
  #define REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_Min (0x0UL)
  #define REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_Max (0x1UL)
  #define REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_InductorNotDetected (0x0UL)
  #define REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_InductorDetected (0x1UL)


/* ==================================================== Struct REGULATORS ==================================================== */
/**
  * @brief Voltage regulators
  */
  typedef struct {
    __IM uint32_t RESERVED[256];
    __IOM NRF_REGULATORS_HIBERNATOR_Type HIBERNATOR;
    __IM uint32_t RESERVED1[61];
    __OM uint32_t SYSTEMOFF;
    __IM uint32_t RESERVED2[11];
    __IOM uint32_t POFCON;
    __IM uint32_t POFSTAT;
    __IM uint32_t RESERVED3[50];
    __IOM NRF_REGULATORS_VREGMAIN_Type VREGMAIN;
  } NRF_REGULATORS_Type;

/* REGULATORS_SYSTEMOFF: System OFF register */
  #define REGULATORS_SYSTEMOFF_ResetValue (0x00000000UL)

/* SYSTEMOFF @Bit 0 : Enable System OFF mode */
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Pos (0UL)
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk (0x1UL << REGULATORS_SYSTEMOFF_SYSTEMOFF_Pos)
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Min (0x1UL)
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Max (0x1UL)
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Enter (0x1UL)


/* REGULATORS_POFCON: Power-fail comparator configuration */
  #define REGULATORS_POFCON_ResetValue (0x00000000UL)

/* POF @Bit 0 : Enable or disable power-fail comparator */
  #define REGULATORS_POFCON_POF_Pos (0UL)
  #define REGULATORS_POFCON_POF_Msk (0x1UL << REGULATORS_POFCON_POF_Pos)
  #define REGULATORS_POFCON_POF_Min (0x0UL)
  #define REGULATORS_POFCON_POF_Max (0x1UL)
  #define REGULATORS_POFCON_POF_Disabled (0x0UL)
  #define REGULATORS_POFCON_POF_Enabled (0x1UL)

/* THRESHOLD @Bits 1..4 : Power-fail comparator threshold setting */
  #define REGULATORS_POFCON_THRESHOLD_Pos (1UL)
  #define REGULATORS_POFCON_THRESHOLD_Msk (0xFUL << REGULATORS_POFCON_THRESHOLD_Pos)
  #define REGULATORS_POFCON_THRESHOLD_Min (0x0UL)
  #define REGULATORS_POFCON_THRESHOLD_Max (0xBUL)
  #define REGULATORS_POFCON_THRESHOLD_V17 (0x0UL)
  #define REGULATORS_POFCON_THRESHOLD_V18 (0x1UL)
  #define REGULATORS_POFCON_THRESHOLD_V19 (0x2UL)
  #define REGULATORS_POFCON_THRESHOLD_V20 (0x3UL)
  #define REGULATORS_POFCON_THRESHOLD_V21 (0x4UL)
  #define REGULATORS_POFCON_THRESHOLD_V22 (0x5UL)
  #define REGULATORS_POFCON_THRESHOLD_V23 (0x6UL)
  #define REGULATORS_POFCON_THRESHOLD_V24 (0x7UL)
  #define REGULATORS_POFCON_THRESHOLD_V25 (0x8UL)
  #define REGULATORS_POFCON_THRESHOLD_V26 (0x9UL)
  #define REGULATORS_POFCON_THRESHOLD_V27 (0xAUL)
  #define REGULATORS_POFCON_THRESHOLD_V28 (0xBUL)

/* EVENTDISABLE @Bit 7 : Disable the POFWARN power-fail warning event */
  #define REGULATORS_POFCON_EVENTDISABLE_Pos (7UL)
  #define REGULATORS_POFCON_EVENTDISABLE_Msk (0x1UL << REGULATORS_POFCON_EVENTDISABLE_Pos)
  #define REGULATORS_POFCON_EVENTDISABLE_Min (0x0UL)
  #define REGULATORS_POFCON_EVENTDISABLE_Max (0x1UL)
  #define REGULATORS_POFCON_EVENTDISABLE_Enabled (0x0UL)
  #define REGULATORS_POFCON_EVENTDISABLE_Disabled (0x1UL)

/* PSEL @Bit 16 : Power-fail comparator input selector */
  #define REGULATORS_POFCON_PSEL_Pos (16UL)
  #define REGULATORS_POFCON_PSEL_Msk (0x1UL << REGULATORS_POFCON_PSEL_Pos)
  #define REGULATORS_POFCON_PSEL_Min (0x0UL)
  #define REGULATORS_POFCON_PSEL_Max (0x1UL)
  #define REGULATORS_POFCON_PSEL_vddAo3v0Connected (0x0UL)
  #define REGULATORS_POFCON_PSEL_vinLvBatConnected (0x1UL)


/* REGULATORS_POFSTAT: Power-fail comparator status register */
  #define REGULATORS_POFSTAT_ResetValue (0x00000000UL)

/* COMPARATOR @Bit 0 : Power-fail comparator status */
  #define REGULATORS_POFSTAT_COMPARATOR_Pos (0UL)
  #define REGULATORS_POFSTAT_COMPARATOR_Msk (0x1UL << REGULATORS_POFSTAT_COMPARATOR_Pos)
  #define REGULATORS_POFSTAT_COMPARATOR_Min (0x0UL)
  #define REGULATORS_POFSTAT_COMPARATOR_Max (0x1UL)
  #define REGULATORS_POFSTAT_COMPARATOR_Above (0x0UL)
  #define REGULATORS_POFSTAT_COMPARATOR_Below (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           RESET                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct RESET ======================================================= */
/**
  * @brief Reset control
  */
  typedef struct {
    __IM uint32_t RESERVED[384];
    __IOM uint32_t RESETREAS;
  } NRF_RESET_Type;

/* RESET_RESETREAS: Reset reason */
  #define RESET_RESETREAS_ResetValue (0x00000000UL)

/* RESETPIN @Bit 0 : Reset from pin reset detected */
  #define RESET_RESETREAS_RESETPIN_Pos (0UL)
  #define RESET_RESETREAS_RESETPIN_Msk (0x1UL << RESET_RESETREAS_RESETPIN_Pos)
  #define RESET_RESETREAS_RESETPIN_Min (0x0UL)
  #define RESET_RESETREAS_RESETPIN_Max (0x1UL)
  #define RESET_RESETREAS_RESETPIN_NotDetected (0x0UL)
  #define RESET_RESETREAS_RESETPIN_Detected (0x1UL)

/* DOG0 @Bit 1 : Reset from watchdog timer 0 detected */
  #define RESET_RESETREAS_DOG0_Pos (1UL)
  #define RESET_RESETREAS_DOG0_Msk (0x1UL << RESET_RESETREAS_DOG0_Pos)
  #define RESET_RESETREAS_DOG0_Min (0x0UL)
  #define RESET_RESETREAS_DOG0_Max (0x1UL)
  #define RESET_RESETREAS_DOG0_NotDetected (0x0UL)
  #define RESET_RESETREAS_DOG0_Detected (0x1UL)

/* DOG1 @Bit 2 : Reset from watchdog timer 1 detected */
  #define RESET_RESETREAS_DOG1_Pos (2UL)
  #define RESET_RESETREAS_DOG1_Msk (0x1UL << RESET_RESETREAS_DOG1_Pos)
  #define RESET_RESETREAS_DOG1_Min (0x0UL)
  #define RESET_RESETREAS_DOG1_Max (0x1UL)
  #define RESET_RESETREAS_DOG1_NotDetected (0x0UL)
  #define RESET_RESETREAS_DOG1_Detected (0x1UL)

/* CTRLAPSOFT @Bit 3 : Soft reset from CTRL-AP detected */
  #define RESET_RESETREAS_CTRLAPSOFT_Pos (3UL)
  #define RESET_RESETREAS_CTRLAPSOFT_Msk (0x1UL << RESET_RESETREAS_CTRLAPSOFT_Pos)
  #define RESET_RESETREAS_CTRLAPSOFT_Min (0x0UL)
  #define RESET_RESETREAS_CTRLAPSOFT_Max (0x1UL)
  #define RESET_RESETREAS_CTRLAPSOFT_NotDetected (0x0UL)
  #define RESET_RESETREAS_CTRLAPSOFT_Detected (0x1UL)

/* CTRLAPHARD @Bit 4 : Reset due to CTRL-AP hard reset */
  #define RESET_RESETREAS_CTRLAPHARD_Pos (4UL)
  #define RESET_RESETREAS_CTRLAPHARD_Msk (0x1UL << RESET_RESETREAS_CTRLAPHARD_Pos)
  #define RESET_RESETREAS_CTRLAPHARD_Min (0x0UL)
  #define RESET_RESETREAS_CTRLAPHARD_Max (0x1UL)
  #define RESET_RESETREAS_CTRLAPHARD_NotDetected (0x0UL)
  #define RESET_RESETREAS_CTRLAPHARD_Detected (0x1UL)

/* CTRLAPPIN @Bit 5 : Reset due to CTRL-AP pin reset */
  #define RESET_RESETREAS_CTRLAPPIN_Pos (5UL)
  #define RESET_RESETREAS_CTRLAPPIN_Msk (0x1UL << RESET_RESETREAS_CTRLAPPIN_Pos)
  #define RESET_RESETREAS_CTRLAPPIN_Min (0x0UL)
  #define RESET_RESETREAS_CTRLAPPIN_Max (0x1UL)
  #define RESET_RESETREAS_CTRLAPPIN_NotDetected (0x0UL)
  #define RESET_RESETREAS_CTRLAPPIN_Detected (0x1UL)

/* SREQ @Bit 6 : Reset from soft reset detected */
  #define RESET_RESETREAS_SREQ_Pos (6UL)
  #define RESET_RESETREAS_SREQ_Msk (0x1UL << RESET_RESETREAS_SREQ_Pos)
  #define RESET_RESETREAS_SREQ_Min (0x0UL)
  #define RESET_RESETREAS_SREQ_Max (0x1UL)
  #define RESET_RESETREAS_SREQ_NotDetected (0x0UL)
  #define RESET_RESETREAS_SREQ_Detected (0x1UL)

/* LOCKUP @Bit 7 : Reset from CPU lockup detected */
  #define RESET_RESETREAS_LOCKUP_Pos (7UL)
  #define RESET_RESETREAS_LOCKUP_Msk (0x1UL << RESET_RESETREAS_LOCKUP_Pos)
  #define RESET_RESETREAS_LOCKUP_Min (0x0UL)
  #define RESET_RESETREAS_LOCKUP_Max (0x1UL)
  #define RESET_RESETREAS_LOCKUP_NotDetected (0x0UL)
  #define RESET_RESETREAS_LOCKUP_Detected (0x1UL)

/* OFF @Bit 8 : Reset due to wakeup from System OFF mode when wakeup is triggered by DETECT signal from GPIO */
  #define RESET_RESETREAS_OFF_Pos (8UL)
  #define RESET_RESETREAS_OFF_Msk (0x1UL << RESET_RESETREAS_OFF_Pos)
  #define RESET_RESETREAS_OFF_Min (0x0UL)
  #define RESET_RESETREAS_OFF_Max (0x1UL)
  #define RESET_RESETREAS_OFF_NotDetected (0x0UL)
  #define RESET_RESETREAS_OFF_Detected (0x1UL)

/* LPCOMP @Bit 9 : Reset due to wakeup from System OFF mode when wakeup is triggered by ANADETECT signal from LPCOMP */
  #define RESET_RESETREAS_LPCOMP_Pos (9UL)
  #define RESET_RESETREAS_LPCOMP_Msk (0x1UL << RESET_RESETREAS_LPCOMP_Pos)
  #define RESET_RESETREAS_LPCOMP_Min (0x0UL)
  #define RESET_RESETREAS_LPCOMP_Max (0x1UL)
  #define RESET_RESETREAS_LPCOMP_NotDetected (0x0UL)
  #define RESET_RESETREAS_LPCOMP_Detected (0x1UL)

/* DIF @Bit 10 : Reset triggered by Debug Interface */
  #define RESET_RESETREAS_DIF_Pos (10UL)
  #define RESET_RESETREAS_DIF_Msk (0x1UL << RESET_RESETREAS_DIF_Pos)
  #define RESET_RESETREAS_DIF_Min (0x0UL)
  #define RESET_RESETREAS_DIF_Max (0x1UL)
  #define RESET_RESETREAS_DIF_NotDetected (0x0UL)
  #define RESET_RESETREAS_DIF_Detected (0x1UL)

/* GRTC @Bit 11 : Reset due to wakeup from GRTC */
  #define RESET_RESETREAS_GRTC_Pos (11UL)
  #define RESET_RESETREAS_GRTC_Msk (0x1UL << RESET_RESETREAS_GRTC_Pos)
  #define RESET_RESETREAS_GRTC_Min (0x0UL)
  #define RESET_RESETREAS_GRTC_Max (0x1UL)
  #define RESET_RESETREAS_GRTC_NotDetected (0x0UL)
  #define RESET_RESETREAS_GRTC_Detected (0x1UL)

/* NFC @Bit 12 : Reset after wakeup from System OFF mode due to NFC field being detected */
  #define RESET_RESETREAS_NFC_Pos (12UL)
  #define RESET_RESETREAS_NFC_Msk (0x1UL << RESET_RESETREAS_NFC_Pos)
  #define RESET_RESETREAS_NFC_Min (0x0UL)
  #define RESET_RESETREAS_NFC_Max (0x1UL)
  #define RESET_RESETREAS_NFC_NotDetected (0x0UL)
  #define RESET_RESETREAS_NFC_Detected (0x1UL)

/* SECTAMPER @Bit 13 : Reset due to illegal tampering of the device */
  #define RESET_RESETREAS_SECTAMPER_Pos (13UL)
  #define RESET_RESETREAS_SECTAMPER_Msk (0x1UL << RESET_RESETREAS_SECTAMPER_Pos)
  #define RESET_RESETREAS_SECTAMPER_Min (0x0UL)
  #define RESET_RESETREAS_SECTAMPER_Max (0x1UL)
  #define RESET_RESETREAS_SECTAMPER_NotDetected (0x0UL)
  #define RESET_RESETREAS_SECTAMPER_Detected (0x1UL)

/* HIBERNATE @Bit 15 : Reset after wakeup from Hibernate mode */
  #define RESET_RESETREAS_HIBERNATE_Pos (15UL)
  #define RESET_RESETREAS_HIBERNATE_Msk (0x1UL << RESET_RESETREAS_HIBERNATE_Pos)
  #define RESET_RESETREAS_HIBERNATE_Min (0x0UL)
  #define RESET_RESETREAS_HIBERNATE_Max (0x1UL)
  #define RESET_RESETREAS_HIBERNATE_NotDetected (0x0UL)
  #define RESET_RESETREAS_HIBERNATE_Detected (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           RRAMC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct RRAMC_BUFSTATUS ================================================== */
/**
  * @brief BUFSTATUS [RRAMC_BUFSTATUS] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IM  uint32_t  WRITEBUFEMPTY;
} NRF_RRAMC_BUFSTATUS_Type;

/* RRAMC_BUFSTATUS_WRITEBUFEMPTY: Internal write-buffer is empty */
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_ResetValue (0x00000000UL)

/* EMPTY @Bit 0 : (unspecified) */
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Pos (0UL)
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Msk (0x1UL << RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Pos) /*!< Bit mask of EMPTY
                                                                            field.*/
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Min (0x0UL)
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Max (0x1UL)
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_NotEmpty (0x0UL)
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Empty (0x1UL) /*!< The internal write-buffer is empty and has no content that
                                                                 needs to be committed*/



/* ==================================================== Struct RRAMC_ECC ===================================================== */
/**
  * @brief ECC [RRAMC_ECC] (unspecified)
  */
typedef struct {
  __IM  uint32_t  ERRORADDR;                         /*!< (@ 0x00000000) Address of the first ECC error that could not be
                                                                         corrected*/
} NRF_RRAMC_ECC_Type;

/* RRAMC_ECC_ERRORADDR: Address of the first ECC error that could not be corrected */
  #define RRAMC_ECC_ERRORADDR_ResetValue (0x00FFFFFFUL)

/* ADDRESS @Bits 0..31 : ECC error address */
  #define RRAMC_ECC_ERRORADDR_ADDRESS_Pos (0UL)
  #define RRAMC_ECC_ERRORADDR_ADDRESS_Msk (0xFFFFFFFFUL << RRAMC_ECC_ERRORADDR_ADDRESS_Pos)



/* =================================================== Struct RRAMC_POWER ==================================================== */
/**
  * @brief POWER [RRAMC_POWER] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  LOWPOWERCONFIG;
} NRF_RRAMC_POWER_Type;

/* RRAMC_POWER_CONFIG: Power configuration */
  #define RRAMC_POWER_CONFIG_ResetValue (0x00000100UL)

/* ACCESSTIMEOUT @Bits 0..15 : Access timeout, in 31.25 ns units, used for going into standby power mode or remain active on
                               wake up */

  #define RRAMC_POWER_CONFIG_ACCESSTIMEOUT_Pos (0UL)
  #define RRAMC_POWER_CONFIG_ACCESSTIMEOUT_Msk (0xFFFFUL << RRAMC_POWER_CONFIG_ACCESSTIMEOUT_Pos) /*!< Bit mask of ACCESSTIMEOUT
                                                                            field.*/

/* POF @Bit 16 : Power on failure warning handling configuration */
  #define RRAMC_POWER_CONFIG_POF_Pos (16UL)
  #define RRAMC_POWER_CONFIG_POF_Msk (0x1UL << RRAMC_POWER_CONFIG_POF_Pos)
  #define RRAMC_POWER_CONFIG_POF_Min (0x0UL)
  #define RRAMC_POWER_CONFIG_POF_Max (0x1UL)
  #define RRAMC_POWER_CONFIG_POF_Wait (0x0UL)
  #define RRAMC_POWER_CONFIG_POF_Abort (0x1UL)


/* RRAMC_POWER_LOWPOWERCONFIG: Low power mode configuration */
  #define RRAMC_POWER_LOWPOWERCONFIG_ResetValue (0x00000000UL)

/* MODE @Bits 0..1 : RRAM low power mode */
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_Pos (0UL)
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_Msk (0x3UL << RRAMC_POWER_LOWPOWERCONFIG_MODE_Pos)
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_Min (0x0UL)
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_Max (0x3UL)
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_PowerDown (0x0UL)
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_Standby (0x1UL) /*!< The RRAM automatically goes into standby mode while the RRAM is
                                                               not being accessed*/
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_NAP (0x2UL)
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_PowerOff (0x3UL)



/* =================================================== Struct RRAMC_ERASE ==================================================== */
/**
  * @brief ERASE [RRAMC_ERASE] (unspecified)
  */
typedef struct {
  __IOM uint32_t  ERASEALL;                          /*!< (@ 0x00000000) Register for erasing whole RRAM main block, that
                                                                         includes the SICR and the UICR*/
} NRF_RRAMC_ERASE_Type;

/* RRAMC_ERASE_ERASEALL: Register for erasing whole RRAM main block, that includes the SICR and the UICR */
  #define RRAMC_ERASE_ERASEALL_ResetValue (0x00000000UL)

/* ERASE @Bit 0 : Erase whole RRAM main block */
  #define RRAMC_ERASE_ERASEALL_ERASE_Pos (0UL)
  #define RRAMC_ERASE_ERASEALL_ERASE_Msk (0x1UL << RRAMC_ERASE_ERASEALL_ERASE_Pos)
  #define RRAMC_ERASE_ERASEALL_ERASE_Min (0x0UL)
  #define RRAMC_ERASE_ERASEALL_ERASE_Max (0x1UL)
  #define RRAMC_ERASE_ERASEALL_ERASE_NoOperation (0x0UL)
  #define RRAMC_ERASE_ERASEALL_ERASE_Erase (0x1UL)



/* =================================================== Struct RRAMC_REGION =================================================== */
/**
  * @brief REGION [RRAMC_REGION] (unspecified)
  */
typedef struct {
  __IOM uint32_t  ADDRESS;
  __IOM uint32_t  CONFIG;
} NRF_RRAMC_REGION_Type;
  #define RRAMC_REGION_MaxCount (6UL)
  #define RRAMC_REGION_MaxIndex (5UL)
  #define RRAMC_REGION_MinIndex (0UL)

/* RRAMC_REGION_ADDRESS: Region address */
  #define RRAMC_REGION_ADDRESS_ResetValue (0x00000000UL)

/* STARTADDR @Bits 0..31 : Start address of the region [n] */
  #define RRAMC_REGION_ADDRESS_STARTADDR_Pos (0UL)
  #define RRAMC_REGION_ADDRESS_STARTADDR_Msk (0xFFFFFFFFUL << RRAMC_REGION_ADDRESS_STARTADDR_Pos) /*!< Bit mask of STARTADDR
                                                                            field.*/


/* RRAMC_REGION_CONFIG: Region configuration */
  #define RRAMC_REGION_CONFIG_ResetValue (0x00000000UL)

/* READ @Bit 0 : Read access */
  #define RRAMC_REGION_CONFIG_READ_Pos (0UL)
  #define RRAMC_REGION_CONFIG_READ_Msk (0x1UL << RRAMC_REGION_CONFIG_READ_Pos)
  #define RRAMC_REGION_CONFIG_READ_Min (0x0UL)
  #define RRAMC_REGION_CONFIG_READ_Max (0x1UL)
  #define RRAMC_REGION_CONFIG_READ_NotAllowed (0x0UL)
  #define RRAMC_REGION_CONFIG_READ_Allowed (0x1UL)

/* WRITE @Bit 1 : Write access */
  #define RRAMC_REGION_CONFIG_WRITE_Pos (1UL)
  #define RRAMC_REGION_CONFIG_WRITE_Msk (0x1UL << RRAMC_REGION_CONFIG_WRITE_Pos)
  #define RRAMC_REGION_CONFIG_WRITE_Min (0x0UL)
  #define RRAMC_REGION_CONFIG_WRITE_Max (0x1UL)
  #define RRAMC_REGION_CONFIG_WRITE_NotAllowed (0x0UL)
  #define RRAMC_REGION_CONFIG_WRITE_Allowed (0x1UL)

/* EXECUTE @Bit 2 : Execute access */
  #define RRAMC_REGION_CONFIG_EXECUTE_Pos (2UL)
  #define RRAMC_REGION_CONFIG_EXECUTE_Msk (0x1UL << RRAMC_REGION_CONFIG_EXECUTE_Pos)
  #define RRAMC_REGION_CONFIG_EXECUTE_Min (0x0UL)
  #define RRAMC_REGION_CONFIG_EXECUTE_Max (0x1UL)
  #define RRAMC_REGION_CONFIG_EXECUTE_NotAllowed (0x0UL)
  #define RRAMC_REGION_CONFIG_EXECUTE_Allowed (0x1UL)

/* SECURE @Bit 3 : Secure access */
  #define RRAMC_REGION_CONFIG_SECURE_Pos (3UL)
  #define RRAMC_REGION_CONFIG_SECURE_Msk (0x1UL << RRAMC_REGION_CONFIG_SECURE_Pos)
  #define RRAMC_REGION_CONFIG_SECURE_Min (0x0UL)
  #define RRAMC_REGION_CONFIG_SECURE_Max (0x1UL)
  #define RRAMC_REGION_CONFIG_SECURE_NonSecure (0x0UL)
  #define RRAMC_REGION_CONFIG_SECURE_Secure (0x1UL)

/* OWNER @Bits 4..7 : Owner ID */
  #define RRAMC_REGION_CONFIG_OWNER_Pos (4UL)
  #define RRAMC_REGION_CONFIG_OWNER_Msk (0xFUL << RRAMC_REGION_CONFIG_OWNER_Pos)
  #define RRAMC_REGION_CONFIG_OWNER_Min (0x0UL)
  #define RRAMC_REGION_CONFIG_OWNER_Max (0x0UL)
  #define RRAMC_REGION_CONFIG_OWNER_NotEnforced (0x0UL)

/* WRITEONCE @Bit 12 : Write-once */
  #define RRAMC_REGION_CONFIG_WRITEONCE_Pos (12UL)
  #define RRAMC_REGION_CONFIG_WRITEONCE_Msk (0x1UL << RRAMC_REGION_CONFIG_WRITEONCE_Pos)
  #define RRAMC_REGION_CONFIG_WRITEONCE_Min (0x0UL)
  #define RRAMC_REGION_CONFIG_WRITEONCE_Max (0x1UL)
  #define RRAMC_REGION_CONFIG_WRITEONCE_Disabled (0x0UL)
  #define RRAMC_REGION_CONFIG_WRITEONCE_Enabled (0x1UL)

/* LOCK @Bit 13 : Enable lock */
  #define RRAMC_REGION_CONFIG_LOCK_Pos (13UL)
  #define RRAMC_REGION_CONFIG_LOCK_Msk (0x1UL << RRAMC_REGION_CONFIG_LOCK_Pos)
  #define RRAMC_REGION_CONFIG_LOCK_Min (0x0UL)
  #define RRAMC_REGION_CONFIG_LOCK_Max (0x1UL)
  #define RRAMC_REGION_CONFIG_LOCK_Disabled (0x0UL)
  #define RRAMC_REGION_CONFIG_LOCK_Enabled (0x1UL)

/* SIZE @Bits 16..20 : Size in KBytes of region [n] */
  #define RRAMC_REGION_CONFIG_SIZE_Pos (16UL)
  #define RRAMC_REGION_CONFIG_SIZE_Msk (0x1FUL << RRAMC_REGION_CONFIG_SIZE_Pos)


/* ====================================================== Struct RRAMC ======================================================= */
/**
  * @brief RRAM controller GLITCH detector
  */
  typedef struct {
    __OM uint32_t TASKS_WAKEUP;
    __IM uint32_t RESERVED;
    __OM uint32_t TASKS_COMMITWRITEBUF;              /*!< (@ 0x00000008) Commits the data stored in internal write-buffer to
                                                                         RRAM*/
    __IM uint32_t RESERVED1[29];
    __IOM uint32_t SUBSCRIBE_WAKEUP;
    __IM uint32_t RESERVED2;
    __IOM uint32_t SUBSCRIBE_COMMITWRITEBUF;
    __IM uint32_t RESERVED3[29];
    __IOM uint32_t EVENTS_WOKENUP;
    __IOM uint32_t EVENTS_READY;
    __IOM uint32_t EVENTS_READYNEXT;
    __IOM uint32_t EVENTS_ACCESSERROR;
    __IM uint32_t RESERVED4[28];
    __IOM uint32_t PUBLISH_WOKENUP;
    __IM uint32_t RESERVED5[95];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED6[60];
    __IM uint32_t READY;
    __IM uint32_t READYNEXT;
    __IM uint32_t ACCESSERRORADDR;
    __IM uint32_t RESERVED7;
    __IOM NRF_RRAMC_BUFSTATUS_Type BUFSTATUS;
    __IM uint32_t RESERVED8;
    __IOM NRF_RRAMC_ECC_Type ECC;
    __IM uint32_t RESERVED9[55];
    __IOM uint32_t CONFIG;
    __IM uint32_t RESERVED10[2];
    __IOM uint32_t READYNEXTTIMEOUT;                 /*!< (@ 0x0000050C) Configuration for ready next timeout counter, in units
                                                                         of AXI clock frequency*/
    __IOM NRF_RRAMC_POWER_Type POWER;
    __IM uint32_t RESERVED11[9];
    __IOM NRF_RRAMC_ERASE_Type ERASE;
    __IM uint32_t RESERVED12[3];
    __IOM NRF_RRAMC_REGION_Type REGION[6];
  } NRF_RRAMC_Type;

/* RRAMC_TASKS_WAKEUP: Wakeup the RRAM from low power mode */
  #define RRAMC_TASKS_WAKEUP_ResetValue (0x00000000UL)

/* TASKS_WAKEUP @Bit 0 : Wakeup the RRAM from low power mode */
  #define RRAMC_TASKS_WAKEUP_TASKS_WAKEUP_Pos (0UL)
  #define RRAMC_TASKS_WAKEUP_TASKS_WAKEUP_Msk (0x1UL << RRAMC_TASKS_WAKEUP_TASKS_WAKEUP_Pos) /*!< Bit mask of TASKS_WAKEUP
                                                                            field.*/
  #define RRAMC_TASKS_WAKEUP_TASKS_WAKEUP_Min (0x1UL)
  #define RRAMC_TASKS_WAKEUP_TASKS_WAKEUP_Max (0x1UL)
  #define RRAMC_TASKS_WAKEUP_TASKS_WAKEUP_Trigger (0x1UL)


/* RRAMC_TASKS_COMMITWRITEBUF: Commits the data stored in internal write-buffer to RRAM */
  #define RRAMC_TASKS_COMMITWRITEBUF_ResetValue (0x00000000UL)

/* TASKS_COMMITWRITEBUF @Bit 0 : Commits the data stored in internal write-buffer to RRAM */
  #define RRAMC_TASKS_COMMITWRITEBUF_TASKS_COMMITWRITEBUF_Pos (0UL)
  #define RRAMC_TASKS_COMMITWRITEBUF_TASKS_COMMITWRITEBUF_Msk (0x1UL << RRAMC_TASKS_COMMITWRITEBUF_TASKS_COMMITWRITEBUF_Pos)
                                                                            /*!< Bit mask of TASKS_COMMITWRITEBUF field.*/
  #define RRAMC_TASKS_COMMITWRITEBUF_TASKS_COMMITWRITEBUF_Min (0x1UL)
  #define RRAMC_TASKS_COMMITWRITEBUF_TASKS_COMMITWRITEBUF_Max (0x1UL)
  #define RRAMC_TASKS_COMMITWRITEBUF_TASKS_COMMITWRITEBUF_Trigger (0x1UL)


/* RRAMC_SUBSCRIBE_WAKEUP: Subscribe configuration for task WAKEUP */
  #define RRAMC_SUBSCRIBE_WAKEUP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task WAKEUP will subscribe to */
  #define RRAMC_SUBSCRIBE_WAKEUP_CHIDX_Pos (0UL)
  #define RRAMC_SUBSCRIBE_WAKEUP_CHIDX_Msk (0xFFUL << RRAMC_SUBSCRIBE_WAKEUP_CHIDX_Pos)
  #define RRAMC_SUBSCRIBE_WAKEUP_CHIDX_Min (0x00UL)
  #define RRAMC_SUBSCRIBE_WAKEUP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RRAMC_SUBSCRIBE_WAKEUP_EN_Pos (31UL)
  #define RRAMC_SUBSCRIBE_WAKEUP_EN_Msk (0x1UL << RRAMC_SUBSCRIBE_WAKEUP_EN_Pos)
  #define RRAMC_SUBSCRIBE_WAKEUP_EN_Min (0x0UL)
  #define RRAMC_SUBSCRIBE_WAKEUP_EN_Max (0x1UL)
  #define RRAMC_SUBSCRIBE_WAKEUP_EN_Disabled (0x0UL)
  #define RRAMC_SUBSCRIBE_WAKEUP_EN_Enabled (0x1UL)


/* RRAMC_SUBSCRIBE_COMMITWRITEBUF: Subscribe configuration for task COMMITWRITEBUF */
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task COMMITWRITEBUF will subscribe to */
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_CHIDX_Pos (0UL)
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_CHIDX_Msk (0xFFUL << RRAMC_SUBSCRIBE_COMMITWRITEBUF_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_CHIDX_Min (0x00UL)
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Pos (31UL)
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Msk (0x1UL << RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Pos)
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Min (0x0UL)
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Max (0x1UL)
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Disabled (0x0UL)
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Enabled (0x1UL)


/* RRAMC_EVENTS_WOKENUP: RRAMC is woken up from low power mode */
  #define RRAMC_EVENTS_WOKENUP_ResetValue (0x00000000UL)

/* EVENTS_WOKENUP @Bit 0 : RRAMC is woken up from low power mode */
  #define RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_Pos (0UL)
  #define RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_Msk (0x1UL << RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_Pos) /*!< Bit mask of
                                                                            EVENTS_WOKENUP field.*/
  #define RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_Min (0x0UL)
  #define RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_Max (0x1UL)
  #define RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_NotGenerated (0x0UL)
  #define RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_Generated (0x1UL)


/* RRAMC_EVENTS_READY: RRAMC is ready */
  #define RRAMC_EVENTS_READY_ResetValue (0x00000000UL)

/* EVENTS_READY @Bit 0 : RRAMC is ready */
  #define RRAMC_EVENTS_READY_EVENTS_READY_Pos (0UL)
  #define RRAMC_EVENTS_READY_EVENTS_READY_Msk (0x1UL << RRAMC_EVENTS_READY_EVENTS_READY_Pos) /*!< Bit mask of EVENTS_READY
                                                                            field.*/
  #define RRAMC_EVENTS_READY_EVENTS_READY_Min (0x0UL)
  #define RRAMC_EVENTS_READY_EVENTS_READY_Max (0x1UL)
  #define RRAMC_EVENTS_READY_EVENTS_READY_NotGenerated (0x0UL)
  #define RRAMC_EVENTS_READY_EVENTS_READY_Generated (0x1UL)


/* RRAMC_EVENTS_READYNEXT: Ready to accept a new write operation */
  #define RRAMC_EVENTS_READYNEXT_ResetValue (0x00000000UL)

/* EVENTS_READYNEXT @Bit 0 : Ready to accept a new write operation */
  #define RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Pos (0UL)
  #define RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Msk (0x1UL << RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Pos) /*!< Bit mask of
                                                                            EVENTS_READYNEXT field.*/
  #define RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Min (0x0UL)
  #define RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Max (0x1UL)
  #define RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_NotGenerated (0x0UL)
  #define RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Generated (0x1UL)


/* RRAMC_EVENTS_ACCESSERROR: RRAM access error */
  #define RRAMC_EVENTS_ACCESSERROR_ResetValue (0x00000000UL)

/* EVENTS_ACCESSERROR @Bit 0 : RRAM access error */
  #define RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_Pos (0UL)
  #define RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_Msk (0x1UL << RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_Pos) /*!< Bit
                                                                            mask of EVENTS_ACCESSERROR field.*/
  #define RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_Min (0x0UL)
  #define RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_Max (0x1UL)
  #define RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_NotGenerated (0x0UL)
  #define RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_Generated (0x1UL)


/* RRAMC_PUBLISH_WOKENUP: Publish configuration for event WOKENUP */
  #define RRAMC_PUBLISH_WOKENUP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event WOKENUP will publish to */
  #define RRAMC_PUBLISH_WOKENUP_CHIDX_Pos (0UL)
  #define RRAMC_PUBLISH_WOKENUP_CHIDX_Msk (0xFFUL << RRAMC_PUBLISH_WOKENUP_CHIDX_Pos)
  #define RRAMC_PUBLISH_WOKENUP_CHIDX_Min (0x00UL)
  #define RRAMC_PUBLISH_WOKENUP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RRAMC_PUBLISH_WOKENUP_EN_Pos (31UL)
  #define RRAMC_PUBLISH_WOKENUP_EN_Msk (0x1UL << RRAMC_PUBLISH_WOKENUP_EN_Pos)
  #define RRAMC_PUBLISH_WOKENUP_EN_Min (0x0UL)
  #define RRAMC_PUBLISH_WOKENUP_EN_Max (0x1UL)
  #define RRAMC_PUBLISH_WOKENUP_EN_Disabled (0x0UL)
  #define RRAMC_PUBLISH_WOKENUP_EN_Enabled (0x1UL)


/* RRAMC_INTEN: Enable or disable interrupt */
  #define RRAMC_INTEN_ResetValue (0x00000000UL)

/* WOKENUP @Bit 0 : Enable or disable interrupt for event WOKENUP */
  #define RRAMC_INTEN_WOKENUP_Pos (0UL)
  #define RRAMC_INTEN_WOKENUP_Msk (0x1UL << RRAMC_INTEN_WOKENUP_Pos)
  #define RRAMC_INTEN_WOKENUP_Min (0x0UL)
  #define RRAMC_INTEN_WOKENUP_Max (0x1UL)
  #define RRAMC_INTEN_WOKENUP_Disabled (0x0UL)
  #define RRAMC_INTEN_WOKENUP_Enabled (0x1UL)

/* READY @Bit 1 : Enable or disable interrupt for event READY */
  #define RRAMC_INTEN_READY_Pos (1UL)
  #define RRAMC_INTEN_READY_Msk (0x1UL << RRAMC_INTEN_READY_Pos)
  #define RRAMC_INTEN_READY_Min (0x0UL)
  #define RRAMC_INTEN_READY_Max (0x1UL)
  #define RRAMC_INTEN_READY_Disabled (0x0UL)
  #define RRAMC_INTEN_READY_Enabled (0x1UL)

/* READYNEXT @Bit 2 : Enable or disable interrupt for event READYNEXT */
  #define RRAMC_INTEN_READYNEXT_Pos (2UL)
  #define RRAMC_INTEN_READYNEXT_Msk (0x1UL << RRAMC_INTEN_READYNEXT_Pos)
  #define RRAMC_INTEN_READYNEXT_Min (0x0UL)
  #define RRAMC_INTEN_READYNEXT_Max (0x1UL)
  #define RRAMC_INTEN_READYNEXT_Disabled (0x0UL)
  #define RRAMC_INTEN_READYNEXT_Enabled (0x1UL)

/* ACCESSERROR @Bit 3 : Enable or disable interrupt for event ACCESSERROR */
  #define RRAMC_INTEN_ACCESSERROR_Pos (3UL)
  #define RRAMC_INTEN_ACCESSERROR_Msk (0x1UL << RRAMC_INTEN_ACCESSERROR_Pos)
  #define RRAMC_INTEN_ACCESSERROR_Min (0x0UL)
  #define RRAMC_INTEN_ACCESSERROR_Max (0x1UL)
  #define RRAMC_INTEN_ACCESSERROR_Disabled (0x0UL)
  #define RRAMC_INTEN_ACCESSERROR_Enabled (0x1UL)


/* RRAMC_INTENSET: Enable interrupt */
  #define RRAMC_INTENSET_ResetValue (0x00000000UL)

/* WOKENUP @Bit 0 : Write '1' to enable interrupt for event WOKENUP */
  #define RRAMC_INTENSET_WOKENUP_Pos (0UL)
  #define RRAMC_INTENSET_WOKENUP_Msk (0x1UL << RRAMC_INTENSET_WOKENUP_Pos)
  #define RRAMC_INTENSET_WOKENUP_Min (0x0UL)
  #define RRAMC_INTENSET_WOKENUP_Max (0x1UL)
  #define RRAMC_INTENSET_WOKENUP_Set (0x1UL)
  #define RRAMC_INTENSET_WOKENUP_Disabled (0x0UL)
  #define RRAMC_INTENSET_WOKENUP_Enabled (0x1UL)

/* READY @Bit 1 : Write '1' to enable interrupt for event READY */
  #define RRAMC_INTENSET_READY_Pos (1UL)
  #define RRAMC_INTENSET_READY_Msk (0x1UL << RRAMC_INTENSET_READY_Pos)
  #define RRAMC_INTENSET_READY_Min (0x0UL)
  #define RRAMC_INTENSET_READY_Max (0x1UL)
  #define RRAMC_INTENSET_READY_Set (0x1UL)
  #define RRAMC_INTENSET_READY_Disabled (0x0UL)
  #define RRAMC_INTENSET_READY_Enabled (0x1UL)

/* READYNEXT @Bit 2 : Write '1' to enable interrupt for event READYNEXT */
  #define RRAMC_INTENSET_READYNEXT_Pos (2UL)
  #define RRAMC_INTENSET_READYNEXT_Msk (0x1UL << RRAMC_INTENSET_READYNEXT_Pos)
  #define RRAMC_INTENSET_READYNEXT_Min (0x0UL)
  #define RRAMC_INTENSET_READYNEXT_Max (0x1UL)
  #define RRAMC_INTENSET_READYNEXT_Set (0x1UL)
  #define RRAMC_INTENSET_READYNEXT_Disabled (0x0UL)
  #define RRAMC_INTENSET_READYNEXT_Enabled (0x1UL)

/* ACCESSERROR @Bit 3 : Write '1' to enable interrupt for event ACCESSERROR */
  #define RRAMC_INTENSET_ACCESSERROR_Pos (3UL)
  #define RRAMC_INTENSET_ACCESSERROR_Msk (0x1UL << RRAMC_INTENSET_ACCESSERROR_Pos)
  #define RRAMC_INTENSET_ACCESSERROR_Min (0x0UL)
  #define RRAMC_INTENSET_ACCESSERROR_Max (0x1UL)
  #define RRAMC_INTENSET_ACCESSERROR_Set (0x1UL)
  #define RRAMC_INTENSET_ACCESSERROR_Disabled (0x0UL)
  #define RRAMC_INTENSET_ACCESSERROR_Enabled (0x1UL)


/* RRAMC_INTENCLR: Disable interrupt */
  #define RRAMC_INTENCLR_ResetValue (0x00000000UL)

/* WOKENUP @Bit 0 : Write '1' to disable interrupt for event WOKENUP */
  #define RRAMC_INTENCLR_WOKENUP_Pos (0UL)
  #define RRAMC_INTENCLR_WOKENUP_Msk (0x1UL << RRAMC_INTENCLR_WOKENUP_Pos)
  #define RRAMC_INTENCLR_WOKENUP_Min (0x0UL)
  #define RRAMC_INTENCLR_WOKENUP_Max (0x1UL)
  #define RRAMC_INTENCLR_WOKENUP_Clear (0x1UL)
  #define RRAMC_INTENCLR_WOKENUP_Disabled (0x0UL)
  #define RRAMC_INTENCLR_WOKENUP_Enabled (0x1UL)

/* READY @Bit 1 : Write '1' to disable interrupt for event READY */
  #define RRAMC_INTENCLR_READY_Pos (1UL)
  #define RRAMC_INTENCLR_READY_Msk (0x1UL << RRAMC_INTENCLR_READY_Pos)
  #define RRAMC_INTENCLR_READY_Min (0x0UL)
  #define RRAMC_INTENCLR_READY_Max (0x1UL)
  #define RRAMC_INTENCLR_READY_Clear (0x1UL)
  #define RRAMC_INTENCLR_READY_Disabled (0x0UL)
  #define RRAMC_INTENCLR_READY_Enabled (0x1UL)

/* READYNEXT @Bit 2 : Write '1' to disable interrupt for event READYNEXT */
  #define RRAMC_INTENCLR_READYNEXT_Pos (2UL)
  #define RRAMC_INTENCLR_READYNEXT_Msk (0x1UL << RRAMC_INTENCLR_READYNEXT_Pos)
  #define RRAMC_INTENCLR_READYNEXT_Min (0x0UL)
  #define RRAMC_INTENCLR_READYNEXT_Max (0x1UL)
  #define RRAMC_INTENCLR_READYNEXT_Clear (0x1UL)
  #define RRAMC_INTENCLR_READYNEXT_Disabled (0x0UL)
  #define RRAMC_INTENCLR_READYNEXT_Enabled (0x1UL)

/* ACCESSERROR @Bit 3 : Write '1' to disable interrupt for event ACCESSERROR */
  #define RRAMC_INTENCLR_ACCESSERROR_Pos (3UL)
  #define RRAMC_INTENCLR_ACCESSERROR_Msk (0x1UL << RRAMC_INTENCLR_ACCESSERROR_Pos)
  #define RRAMC_INTENCLR_ACCESSERROR_Min (0x0UL)
  #define RRAMC_INTENCLR_ACCESSERROR_Max (0x1UL)
  #define RRAMC_INTENCLR_ACCESSERROR_Clear (0x1UL)
  #define RRAMC_INTENCLR_ACCESSERROR_Disabled (0x0UL)
  #define RRAMC_INTENCLR_ACCESSERROR_Enabled (0x1UL)


/* RRAMC_INTPEND: Pending interrupts */
  #define RRAMC_INTPEND_ResetValue (0x00000000UL)

/* WOKENUP @Bit 0 : Read pending status of interrupt for event WOKENUP */
  #define RRAMC_INTPEND_WOKENUP_Pos (0UL)
  #define RRAMC_INTPEND_WOKENUP_Msk (0x1UL << RRAMC_INTPEND_WOKENUP_Pos)
  #define RRAMC_INTPEND_WOKENUP_Min (0x0UL)
  #define RRAMC_INTPEND_WOKENUP_Max (0x1UL)
  #define RRAMC_INTPEND_WOKENUP_NotPending (0x0UL)
  #define RRAMC_INTPEND_WOKENUP_Pending (0x1UL)

/* READY @Bit 1 : Read pending status of interrupt for event READY */
  #define RRAMC_INTPEND_READY_Pos (1UL)
  #define RRAMC_INTPEND_READY_Msk (0x1UL << RRAMC_INTPEND_READY_Pos)
  #define RRAMC_INTPEND_READY_Min (0x0UL)
  #define RRAMC_INTPEND_READY_Max (0x1UL)
  #define RRAMC_INTPEND_READY_NotPending (0x0UL)
  #define RRAMC_INTPEND_READY_Pending (0x1UL)

/* READYNEXT @Bit 2 : Read pending status of interrupt for event READYNEXT */
  #define RRAMC_INTPEND_READYNEXT_Pos (2UL)
  #define RRAMC_INTPEND_READYNEXT_Msk (0x1UL << RRAMC_INTPEND_READYNEXT_Pos)
  #define RRAMC_INTPEND_READYNEXT_Min (0x0UL)
  #define RRAMC_INTPEND_READYNEXT_Max (0x1UL)
  #define RRAMC_INTPEND_READYNEXT_NotPending (0x0UL)
  #define RRAMC_INTPEND_READYNEXT_Pending (0x1UL)

/* ACCESSERROR @Bit 3 : Read pending status of interrupt for event ACCESSERROR */
  #define RRAMC_INTPEND_ACCESSERROR_Pos (3UL)
  #define RRAMC_INTPEND_ACCESSERROR_Msk (0x1UL << RRAMC_INTPEND_ACCESSERROR_Pos)
  #define RRAMC_INTPEND_ACCESSERROR_Min (0x0UL)
  #define RRAMC_INTPEND_ACCESSERROR_Max (0x1UL)
  #define RRAMC_INTPEND_ACCESSERROR_NotPending (0x0UL)
  #define RRAMC_INTPEND_ACCESSERROR_Pending (0x1UL)


/* RRAMC_READY: RRAMC ready status */
  #define RRAMC_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : RRAMC is ready or busy */
  #define RRAMC_READY_READY_Pos (0UL)
  #define RRAMC_READY_READY_Msk (0x1UL << RRAMC_READY_READY_Pos)
  #define RRAMC_READY_READY_Min (0x0UL)
  #define RRAMC_READY_READY_Max (0x1UL)
  #define RRAMC_READY_READY_Busy (0x0UL)
  #define RRAMC_READY_READY_Ready (0x1UL)


/* RRAMC_READYNEXT: Ready next flag */
  #define RRAMC_READYNEXT_ResetValue (0x00000000UL)

/* READYNEXT @Bit 0 : RRAMC can accept a new write operation */
  #define RRAMC_READYNEXT_READYNEXT_Pos (0UL)
  #define RRAMC_READYNEXT_READYNEXT_Msk (0x1UL << RRAMC_READYNEXT_READYNEXT_Pos)
  #define RRAMC_READYNEXT_READYNEXT_Min (0x0UL)
  #define RRAMC_READYNEXT_READYNEXT_Max (0x1UL)
  #define RRAMC_READYNEXT_READYNEXT_Busy (0x0UL)
  #define RRAMC_READYNEXT_READYNEXT_Ready (0x1UL)


/* RRAMC_ACCESSERRORADDR: Address of the first access error */
  #define RRAMC_ACCESSERRORADDR_ResetValue (0x00FFFFFFUL)

/* ADDRESS @Bits 0..31 : Access error address */
  #define RRAMC_ACCESSERRORADDR_ADDRESS_Pos (0UL)
  #define RRAMC_ACCESSERRORADDR_ADDRESS_Msk (0xFFFFFFFFUL << RRAMC_ACCESSERRORADDR_ADDRESS_Pos)


/* RRAMC_CONFIG: Configuration register */
  #define RRAMC_CONFIG_ResetValue (0x00000000UL)

/* WEN @Bit 0 : Write enable */
  #define RRAMC_CONFIG_WEN_Pos (0UL)
  #define RRAMC_CONFIG_WEN_Msk (0x1UL << RRAMC_CONFIG_WEN_Pos)
  #define RRAMC_CONFIG_WEN_Min (0x0UL)
  #define RRAMC_CONFIG_WEN_Max (0x1UL)
  #define RRAMC_CONFIG_WEN_Disabled (0x0UL)
  #define RRAMC_CONFIG_WEN_Enabled (0x1UL)

/* WRITEBUFSIZE @Bits 8..13 : write-buffer size in number of 128-bit words */
  #define RRAMC_CONFIG_WRITEBUFSIZE_Pos (8UL)
  #define RRAMC_CONFIG_WRITEBUFSIZE_Msk (0x3FUL << RRAMC_CONFIG_WRITEBUFSIZE_Pos)
  #define RRAMC_CONFIG_WRITEBUFSIZE_Min (0x00UL)
  #define RRAMC_CONFIG_WRITEBUFSIZE_Max (0x10UL)
  #define RRAMC_CONFIG_WRITEBUFSIZE_Unbuffered (0x00UL)


/* RRAMC_READYNEXTTIMEOUT: Configuration for ready next timeout counter, in units of AXI clock frequency */
  #define RRAMC_READYNEXTTIMEOUT_ResetValue (0x00000080UL)

/* VALUE @Bits 0..11 : Preload value for waiting for a next write */
  #define RRAMC_READYNEXTTIMEOUT_VALUE_Pos (0UL)
  #define RRAMC_READYNEXTTIMEOUT_VALUE_Msk (0xFFFUL << RRAMC_READYNEXTTIMEOUT_VALUE_Pos)
  #define RRAMC_READYNEXTTIMEOUT_VALUE_Min (0x000UL)
  #define RRAMC_READYNEXTTIMEOUT_VALUE_Max (0xFFFUL)

/* EN @Bit 31 : Enable ready next timeout */
  #define RRAMC_READYNEXTTIMEOUT_EN_Pos (31UL)
  #define RRAMC_READYNEXTTIMEOUT_EN_Msk (0x1UL << RRAMC_READYNEXTTIMEOUT_EN_Pos)
  #define RRAMC_READYNEXTTIMEOUT_EN_Min (0x0UL)
  #define RRAMC_READYNEXTTIMEOUT_EN_Max (0x1UL)
  #define RRAMC_READYNEXTTIMEOUT_EN_Disable (0x0UL)
  #define RRAMC_READYNEXTTIMEOUT_EN_Enable (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           SAADC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct SAADC_EVENTS_CH ================================================== */
/**
  * @brief EVENTS_CH [SAADC_EVENTS_CH] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  LIMITH;
  __IOM uint32_t  LIMITL;
} NRF_SAADC_EVENTS_CH_Type;
  #define SAADC_EVENTS_CH_MaxCount (8UL)
  #define SAADC_EVENTS_CH_MaxIndex (7UL)
  #define SAADC_EVENTS_CH_MinIndex (0UL)

/* SAADC_EVENTS_CH_LIMITH: Last results is equal or above CH[n].LIMIT.HIGH */
  #define SAADC_EVENTS_CH_LIMITH_ResetValue (0x00000000UL)

/* LIMITH @Bit 0 : Last results is equal or above CH[n].LIMIT.HIGH */
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Pos (0UL)
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Msk (0x1UL << SAADC_EVENTS_CH_LIMITH_LIMITH_Pos)
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Min (0x0UL)
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Max (0x1UL)
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_NotGenerated (0x0UL)
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Generated (0x1UL)


/* SAADC_EVENTS_CH_LIMITL: Last results is equal or below CH[n].LIMIT.LOW */
  #define SAADC_EVENTS_CH_LIMITL_ResetValue (0x00000000UL)

/* LIMITL @Bit 0 : Last results is equal or below CH[n].LIMIT.LOW */
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Pos (0UL)
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Msk (0x1UL << SAADC_EVENTS_CH_LIMITL_LIMITL_Pos)
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Min (0x0UL)
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Max (0x1UL)
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_NotGenerated (0x0UL)
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Generated (0x1UL)



/* ================================================= Struct SAADC_PUBLISH_CH ================================================= */
/**
  * @brief PUBLISH_CH [SAADC_PUBLISH_CH] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  LIMITH;
  __IOM uint32_t  LIMITL;
} NRF_SAADC_PUBLISH_CH_Type;
  #define SAADC_PUBLISH_CH_MaxCount (8UL)
  #define SAADC_PUBLISH_CH_MaxIndex (7UL)
  #define SAADC_PUBLISH_CH_MinIndex (0UL)

/* SAADC_PUBLISH_CH_LIMITH: Publish configuration for event CH[n].LIMITH */
  #define SAADC_PUBLISH_CH_LIMITH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CH[n].LIMITH will publish to */
  #define SAADC_PUBLISH_CH_LIMITH_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_CH_LIMITH_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_CH_LIMITH_CHIDX_Pos)
  #define SAADC_PUBLISH_CH_LIMITH_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_CH_LIMITH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_CH_LIMITH_EN_Pos (31UL)
  #define SAADC_PUBLISH_CH_LIMITH_EN_Msk (0x1UL << SAADC_PUBLISH_CH_LIMITH_EN_Pos)
  #define SAADC_PUBLISH_CH_LIMITH_EN_Min (0x0UL)
  #define SAADC_PUBLISH_CH_LIMITH_EN_Max (0x1UL)
  #define SAADC_PUBLISH_CH_LIMITH_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_CH_LIMITH_EN_Enabled (0x1UL)


/* SAADC_PUBLISH_CH_LIMITL: Publish configuration for event CH[n].LIMITL */
  #define SAADC_PUBLISH_CH_LIMITL_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CH[n].LIMITL will publish to */
  #define SAADC_PUBLISH_CH_LIMITL_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_CH_LIMITL_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_CH_LIMITL_CHIDX_Pos)
  #define SAADC_PUBLISH_CH_LIMITL_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_CH_LIMITL_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_CH_LIMITL_EN_Pos (31UL)
  #define SAADC_PUBLISH_CH_LIMITL_EN_Msk (0x1UL << SAADC_PUBLISH_CH_LIMITL_EN_Pos)
  #define SAADC_PUBLISH_CH_LIMITL_EN_Min (0x0UL)
  #define SAADC_PUBLISH_CH_LIMITL_EN_Max (0x1UL)
  #define SAADC_PUBLISH_CH_LIMITL_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_CH_LIMITL_EN_Enabled (0x1UL)



/* ==================================================== Struct SAADC_TRIM ==================================================== */
/**
  * @brief TRIM [SAADC_TRIM] (unspecified)
  */
typedef struct {
  __IOM uint32_t  LINCALCOEFF[6];
} NRF_SAADC_TRIM_Type;

/* SAADC_TRIM_LINCALCOEFF: Linearity calibration coefficient */
  #define SAADC_TRIM_LINCALCOEFF_MaxCount (6UL)
  #define SAADC_TRIM_LINCALCOEFF_MaxIndex (5UL)
  #define SAADC_TRIM_LINCALCOEFF_MinIndex (0UL)
  #define SAADC_TRIM_LINCALCOEFF_ResetValue (0x00000000UL)

/* VAL @Bits 0..15 : value */
  #define SAADC_TRIM_LINCALCOEFF_VAL_Pos (0UL)
  #define SAADC_TRIM_LINCALCOEFF_VAL_Msk (0xFFFFUL << SAADC_TRIM_LINCALCOEFF_VAL_Pos)
  #define SAADC_TRIM_LINCALCOEFF_VAL_Min (0x0000UL)
  #define SAADC_TRIM_LINCALCOEFF_VAL_Max (0xFFFFUL)



/* ===================================================== Struct SAADC_CH ===================================================== */
/**
  * @brief CH [SAADC_CH] (unspecified)
  */
typedef struct {
  __IOM uint32_t  PSELP;
  __IOM uint32_t  PSELN;
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  LIMIT;
} NRF_SAADC_CH_Type;
  #define SAADC_CH_MaxCount (8UL)
  #define SAADC_CH_MaxIndex (7UL)
  #define SAADC_CH_MinIndex (0UL)

/* SAADC_CH_PSELP: Input positive pin selection for CH[n] */
  #define SAADC_CH_PSELP_ResetValue (0x00000000UL)

/* PIN @Bits 0..4 : GPIO pin selection. */
  #define SAADC_CH_PSELP_PIN_Pos (0UL)
  #define SAADC_CH_PSELP_PIN_Msk (0x1FUL << SAADC_CH_PSELP_PIN_Pos)

/* PORT @Bits 8..11 : GPIO port selection */
  #define SAADC_CH_PSELP_PORT_Pos (8UL)
  #define SAADC_CH_PSELP_PORT_Msk (0xFUL << SAADC_CH_PSELP_PORT_Pos)

/* INTERNAL @Bits 12..13 : Internal input selection for analog positive input when CH[n].PSELP.CONNECT = Internal */
  #define SAADC_CH_PSELP_INTERNAL_Pos (12UL)
  #define SAADC_CH_PSELP_INTERNAL_Msk (0x3UL << SAADC_CH_PSELP_INTERNAL_Pos)
  #define SAADC_CH_PSELP_INTERNAL_Min (0x0UL)
  #define SAADC_CH_PSELP_INTERNAL_Max (0x2UL)
  #define SAADC_CH_PSELP_INTERNAL_Avdd (0x0UL)
  #define SAADC_CH_PSELP_INTERNAL_Dvdd (0x1UL)
  #define SAADC_CH_PSELP_INTERNAL_Vdd (0x2UL)

/* CONNECT @Bits 30..31 : Connection */
  #define SAADC_CH_PSELP_CONNECT_Pos (30UL)
  #define SAADC_CH_PSELP_CONNECT_Msk (0x3UL << SAADC_CH_PSELP_CONNECT_Pos)
  #define SAADC_CH_PSELP_CONNECT_Min (0x0UL)
  #define SAADC_CH_PSELP_CONNECT_Max (0x2UL)
  #define SAADC_CH_PSELP_CONNECT_NC (0x0UL)
  #define SAADC_CH_PSELP_CONNECT_AnalogInput (0x1UL)
  #define SAADC_CH_PSELP_CONNECT_Internal (0x2UL)


/* SAADC_CH_PSELN: Input negative pin selection for CH[n] */
  #define SAADC_CH_PSELN_ResetValue (0x00000000UL)

/* PIN @Bits 0..4 : GPIO pin selection. */
  #define SAADC_CH_PSELN_PIN_Pos (0UL)
  #define SAADC_CH_PSELN_PIN_Msk (0x1FUL << SAADC_CH_PSELN_PIN_Pos)

/* PORT @Bits 8..11 : GPIO Port selection */
  #define SAADC_CH_PSELN_PORT_Pos (8UL)
  #define SAADC_CH_PSELN_PORT_Msk (0xFUL << SAADC_CH_PSELN_PORT_Pos)

/* CONNECT @Bits 30..31 : Connection */
  #define SAADC_CH_PSELN_CONNECT_Pos (30UL)
  #define SAADC_CH_PSELN_CONNECT_Msk (0x3UL << SAADC_CH_PSELN_CONNECT_Pos)
  #define SAADC_CH_PSELN_CONNECT_Min (0x0UL)
  #define SAADC_CH_PSELN_CONNECT_Max (0x1UL)
  #define SAADC_CH_PSELN_CONNECT_NC (0x0UL)
  #define SAADC_CH_PSELN_CONNECT_AnalogInput (0x1UL)


/* SAADC_CH_CONFIG: Input configuration for CH[n] */
  #define SAADC_CH_CONFIG_ResetValue (0x00020000UL)

/* GAIN @Bits 8..10 : Gain control */
  #define SAADC_CH_CONFIG_GAIN_Pos (8UL)
  #define SAADC_CH_CONFIG_GAIN_Msk (0x7UL << SAADC_CH_CONFIG_GAIN_Pos)
  #define SAADC_CH_CONFIG_GAIN_Min (0x0UL)
  #define SAADC_CH_CONFIG_GAIN_Max (0x7UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2 (0x0UL)
  #define SAADC_CH_CONFIG_GAIN_Gain1 (0x1UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2_3 (0x2UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2_4 (0x3UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2_5 (0x4UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2_6 (0x5UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2_7 (0x6UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2_8 (0x7UL)

/* BURST @Bit 11 : Enable burst mode */
  #define SAADC_CH_CONFIG_BURST_Pos (11UL)
  #define SAADC_CH_CONFIG_BURST_Msk (0x1UL << SAADC_CH_CONFIG_BURST_Pos)
  #define SAADC_CH_CONFIG_BURST_Min (0x0UL)
  #define SAADC_CH_CONFIG_BURST_Max (0x1UL)
  #define SAADC_CH_CONFIG_BURST_Disabled (0x0UL)
  #define SAADC_CH_CONFIG_BURST_Enabled (0x1UL)      /*!< Burst mode is enabled. SAADC takes 2^OVERSAMPLE number of samples as
                                                          fast as it can, and sends the average to Data RAM.*/

/* REFSEL @Bit 12 : Reference control */
  #define SAADC_CH_CONFIG_REFSEL_Pos (12UL)
  #define SAADC_CH_CONFIG_REFSEL_Msk (0x1UL << SAADC_CH_CONFIG_REFSEL_Pos)
  #define SAADC_CH_CONFIG_REFSEL_Min (0x0UL)
  #define SAADC_CH_CONFIG_REFSEL_Max (0x1UL)
  #define SAADC_CH_CONFIG_REFSEL_Internal (0x0UL)
  #define SAADC_CH_CONFIG_REFSEL_External (0x1UL)

/* MODE @Bit 15 : Enable differential mode */
  #define SAADC_CH_CONFIG_MODE_Pos (15UL)
  #define SAADC_CH_CONFIG_MODE_Msk (0x1UL << SAADC_CH_CONFIG_MODE_Pos)
  #define SAADC_CH_CONFIG_MODE_Min (0x0UL)
  #define SAADC_CH_CONFIG_MODE_Max (0x1UL)
  #define SAADC_CH_CONFIG_MODE_SE (0x0UL)            /*!< Single ended, PSELN will be ignored, negative input to ADC shorted to
                                                          GND*/
  #define SAADC_CH_CONFIG_MODE_Diff (0x1UL)

/* TACQ @Bits 16..24 : Acquisition time, the time the ADC uses to sample the input voltage. Resulting acquistion time is
                       ((TACQ+1) x 125 ns) */

  #define SAADC_CH_CONFIG_TACQ_Pos (16UL)
  #define SAADC_CH_CONFIG_TACQ_Msk (0x1FFUL << SAADC_CH_CONFIG_TACQ_Pos)
  #define SAADC_CH_CONFIG_TACQ_Min (0x001UL)
  #define SAADC_CH_CONFIG_TACQ_Max (0x13FUL)

/* TCONV @Bits 28..30 : Conversion time. Resulting conversion time is ((TCONV+1) x 250 ns) */
  #define SAADC_CH_CONFIG_TCONV_Pos (28UL)
  #define SAADC_CH_CONFIG_TCONV_Msk (0x7UL << SAADC_CH_CONFIG_TCONV_Pos)
  #define SAADC_CH_CONFIG_TCONV_Min (0x1UL)
  #define SAADC_CH_CONFIG_TCONV_Max (0x7UL)


/* SAADC_CH_LIMIT: High/low limits for event monitoring a channel */
  #define SAADC_CH_LIMIT_ResetValue (0x7FFF8000UL)

/* LOW @Bits 0..15 : Low level limit */
  #define SAADC_CH_LIMIT_LOW_Pos (0UL)
  #define SAADC_CH_LIMIT_LOW_Msk (0xFFFFUL << SAADC_CH_LIMIT_LOW_Pos)

/* HIGH @Bits 16..31 : High level limit */
  #define SAADC_CH_LIMIT_HIGH_Pos (16UL)
  #define SAADC_CH_LIMIT_HIGH_Msk (0xFFFFUL << SAADC_CH_LIMIT_HIGH_Pos)



/* =================================================== Struct SAADC_RESULT =================================================== */
/**
  * @brief RESULT [SAADC_RESULT] RESULT EasyDMA channel
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of buffer bytes transferred since last START,
                                                                         updated after the END or STOPPED events*/
  __IM  uint32_t  CURRENTAMOUNT;                     /*!< (@ 0x00000010) Number of buffer bytes transferred since last START,
                                                                         continuously updated*/
} NRF_SAADC_RESULT_Type;

/* SAADC_RESULT_PTR: Data pointer */
  #define SAADC_RESULT_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Data pointer */
  #define SAADC_RESULT_PTR_PTR_Pos (0UL)
  #define SAADC_RESULT_PTR_PTR_Msk (0xFFFFFFFFUL << SAADC_RESULT_PTR_PTR_Pos)


/* SAADC_RESULT_MAXCNT: Maximum number of buffer bytes to transfer */
  #define SAADC_RESULT_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..14 : Maximum number of buffer bytes to transfer */
  #define SAADC_RESULT_MAXCNT_MAXCNT_Pos (0UL)
  #define SAADC_RESULT_MAXCNT_MAXCNT_Msk (0x7FFFUL << SAADC_RESULT_MAXCNT_MAXCNT_Pos)


/* SAADC_RESULT_AMOUNT: Number of buffer bytes transferred since last START, updated after the END or STOPPED events */
  #define SAADC_RESULT_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..14 : Number of buffer bytes transferred since last START, updated after the END or STOPPED events. */
  #define SAADC_RESULT_AMOUNT_AMOUNT_Pos (0UL)
  #define SAADC_RESULT_AMOUNT_AMOUNT_Msk (0x7FFFUL << SAADC_RESULT_AMOUNT_AMOUNT_Pos)


/* SAADC_RESULT_CURRENTAMOUNT: Number of buffer bytes transferred since last START, continuously updated */
  #define SAADC_RESULT_CURRENTAMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..14 : Number of buffer bytes transferred since last START, continuously updated. */
  #define SAADC_RESULT_CURRENTAMOUNT_AMOUNT_Pos (0UL)
  #define SAADC_RESULT_CURRENTAMOUNT_AMOUNT_Msk (0x7FFFUL << SAADC_RESULT_CURRENTAMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT
                                                                            field.*/


/* ====================================================== Struct SAADC ======================================================= */
/**
  * @brief Analog to Digital Converter
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_SAMPLE;                      /*!< (@ 0x00000004) Take one ADC sample, if scan is enabled all channels
                                                                         are sampled. This task requires that SAADC has started,
                                                                         i.e. EVENTS_STARTED was set and EVENTS_STOPPED was
                                                                         not.*/
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_CALIBRATEOFFSET;
    __IM uint32_t RESERVED[28];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_SAMPLE;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_CALIBRATEOFFSET;
    __IM uint32_t RESERVED1[28];
    __IOM uint32_t EVENTS_STARTED;
    __IOM uint32_t EVENTS_END;
    __IOM uint32_t EVENTS_DONE;                      /*!< (@ 0x00000108) A conversion task has been completed. Depending on the
                                                                         mode, multiple conversions might be needed for a result
                                                                         to be transferred to RAM.*/
    __IOM uint32_t EVENTS_RESULTDONE;
    __IOM uint32_t EVENTS_CALIBRATEDONE;
    __IOM uint32_t EVENTS_STOPPED;
    __IOM NRF_SAADC_EVENTS_CH_Type EVENTS_CH[8];
    __IM uint32_t RESERVED2[10];
    __IOM uint32_t PUBLISH_STARTED;
    __IOM uint32_t PUBLISH_END;
    __IOM uint32_t PUBLISH_DONE;
    __IOM uint32_t PUBLISH_RESULTDONE;
    __IOM uint32_t PUBLISH_CALIBRATEDONE;
    __IOM uint32_t PUBLISH_STOPPED;
    __IOM NRF_SAADC_PUBLISH_CH_Type PUBLISH_CH[8];
    __IM uint32_t RESERVED3[74];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED4[61];
    __IM uint32_t STATUS;
    __IM uint32_t RESERVED5[15];
    __IOM NRF_SAADC_TRIM_Type TRIM;
    __IM uint32_t RESERVED6[42];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED7[3];
    __IOM NRF_SAADC_CH_Type CH[8];
    __IM uint32_t RESERVED8[24];
    __IOM uint32_t RESOLUTION;
    __IOM uint32_t OVERSAMPLE;                       /*!< (@ 0x000005F4) Oversampling configuration. OVERSAMPLE should not be
                                                                         combined with SCAN. The RESOLUTION is applied before
                                                                         averaging, thus for high OVERSAMPLE a higher RESOLUTION
                                                                         should be used.*/
    __IOM uint32_t SAMPLERATE;
    __IM uint32_t RESERVED9[11];
    __IOM NRF_SAADC_RESULT_Type RESULT;
    __IM uint32_t RESERVED10[6];
    __IOM uint32_t NOISESHAPE;
  } NRF_SAADC_Type;

/* SAADC_TASKS_START: Start the ADC and prepare the result buffer in RAM */
  #define SAADC_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start the ADC and prepare the result buffer in RAM */
  #define SAADC_TASKS_START_TASKS_START_Pos (0UL)
  #define SAADC_TASKS_START_TASKS_START_Msk (0x1UL << SAADC_TASKS_START_TASKS_START_Pos)
  #define SAADC_TASKS_START_TASKS_START_Min (0x1UL)
  #define SAADC_TASKS_START_TASKS_START_Max (0x1UL)
  #define SAADC_TASKS_START_TASKS_START_Trigger (0x1UL)


/* SAADC_TASKS_SAMPLE: Take one ADC sample, if scan is enabled all channels are sampled. This task requires that SAADC has
                        started, i.e. EVENTS_STARTED was set and EVENTS_STOPPED was not. */

  #define SAADC_TASKS_SAMPLE_ResetValue (0x00000000UL)

/* TASKS_SAMPLE @Bit 0 : Take one ADC sample, if scan is enabled all channels are sampled. This task requires that SAADC has
                         started, i.e. EVENTS_STARTED was set and EVENTS_STOPPED was not. */

  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Pos (0UL)
  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Msk (0x1UL << SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Pos) /*!< Bit mask of TASKS_SAMPLE
                                                                            field.*/
  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Min (0x1UL)
  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Max (0x1UL)
  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Trigger (0x1UL)


/* SAADC_TASKS_STOP: Stop the ADC and terminate any on-going conversion */
  #define SAADC_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop the ADC and terminate any on-going conversion */
  #define SAADC_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define SAADC_TASKS_STOP_TASKS_STOP_Msk (0x1UL << SAADC_TASKS_STOP_TASKS_STOP_Pos)
  #define SAADC_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define SAADC_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define SAADC_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* SAADC_TASKS_CALIBRATEOFFSET: Starts offset auto-calibration */
  #define SAADC_TASKS_CALIBRATEOFFSET_ResetValue (0x00000000UL)

/* TASKS_CALIBRATEOFFSET @Bit 0 : Starts offset auto-calibration */
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Pos (0UL)
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Msk (0x1UL << SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Pos)
                                                                            /*!< Bit mask of TASKS_CALIBRATEOFFSET field.*/
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Min (0x1UL) /*!< Min enumerator value of TASKS_CALIBRATEOFFSET
                                                                            field.*/
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Max (0x1UL) /*!< Max enumerator value of TASKS_CALIBRATEOFFSET
                                                                            field.*/
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Trigger (0x1UL)


/* SAADC_SUBSCRIBE_START: Subscribe configuration for task START */
  #define SAADC_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define SAADC_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define SAADC_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_START_CHIDX_Pos)
  #define SAADC_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define SAADC_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_SUBSCRIBE_START_EN_Pos (31UL)
  #define SAADC_SUBSCRIBE_START_EN_Msk (0x1UL << SAADC_SUBSCRIBE_START_EN_Pos)
  #define SAADC_SUBSCRIBE_START_EN_Min (0x0UL)
  #define SAADC_SUBSCRIBE_START_EN_Max (0x1UL)
  #define SAADC_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define SAADC_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* SAADC_SUBSCRIBE_SAMPLE: Subscribe configuration for task SAMPLE */
  #define SAADC_SUBSCRIBE_SAMPLE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SAMPLE will subscribe to */
  #define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Pos (0UL)
  #define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_SAMPLE_CHIDX_Pos)
  #define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Min (0x00UL)
  #define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Pos (31UL)
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Msk (0x1UL << SAADC_SUBSCRIBE_SAMPLE_EN_Pos)
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Min (0x0UL)
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Max (0x1UL)
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Disabled (0x0UL)
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Enabled (0x1UL)


/* SAADC_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define SAADC_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define SAADC_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define SAADC_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_STOP_CHIDX_Pos)
  #define SAADC_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define SAADC_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define SAADC_SUBSCRIBE_STOP_EN_Msk (0x1UL << SAADC_SUBSCRIBE_STOP_EN_Pos)
  #define SAADC_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define SAADC_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define SAADC_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define SAADC_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* SAADC_SUBSCRIBE_CALIBRATEOFFSET: Subscribe configuration for task CALIBRATEOFFSET */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CALIBRATEOFFSET will subscribe to */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Pos (0UL)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Min (0x00UL)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Pos (31UL)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Msk (0x1UL << SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Pos)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Min (0x0UL)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Max (0x1UL)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Disabled (0x0UL)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Enabled (0x1UL)


/* SAADC_EVENTS_STARTED: The ADC has started */
  #define SAADC_EVENTS_STARTED_ResetValue (0x00000000UL)

/* EVENTS_STARTED @Bit 0 : The ADC has started */
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL)
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << SAADC_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_STARTED field.*/
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Min (0x0UL)
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Max (0x1UL)
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0x0UL)
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Generated (0x1UL)


/* SAADC_EVENTS_END: The ADC has filled up the Result buffer */
  #define SAADC_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : The ADC has filled up the Result buffer */
  #define SAADC_EVENTS_END_EVENTS_END_Pos (0UL)
  #define SAADC_EVENTS_END_EVENTS_END_Msk (0x1UL << SAADC_EVENTS_END_EVENTS_END_Pos)
  #define SAADC_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define SAADC_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define SAADC_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define SAADC_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* SAADC_EVENTS_DONE: A conversion task has been completed. Depending on the mode, multiple conversions might be needed for a
                       result to be transferred to RAM. */

  #define SAADC_EVENTS_DONE_ResetValue (0x00000000UL)

/* EVENTS_DONE @Bit 0 : A conversion task has been completed. Depending on the mode, multiple conversions might be needed for a
                        result to be transferred to RAM. */

  #define SAADC_EVENTS_DONE_EVENTS_DONE_Pos (0UL)
  #define SAADC_EVENTS_DONE_EVENTS_DONE_Msk (0x1UL << SAADC_EVENTS_DONE_EVENTS_DONE_Pos)
  #define SAADC_EVENTS_DONE_EVENTS_DONE_Min (0x0UL)
  #define SAADC_EVENTS_DONE_EVENTS_DONE_Max (0x1UL)
  #define SAADC_EVENTS_DONE_EVENTS_DONE_NotGenerated (0x0UL)
  #define SAADC_EVENTS_DONE_EVENTS_DONE_Generated (0x1UL)


/* SAADC_EVENTS_RESULTDONE: A result is ready to get transferred to RAM. */
  #define SAADC_EVENTS_RESULTDONE_ResetValue (0x00000000UL)

/* EVENTS_RESULTDONE @Bit 0 : A result is ready to get transferred to RAM. */
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Pos (0UL)
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Msk (0x1UL << SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Pos) /*!< Bit mask
                                                                            of EVENTS_RESULTDONE field.*/
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Min (0x0UL)
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Max (0x1UL)
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_NotGenerated (0x0UL)
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Generated (0x1UL)


/* SAADC_EVENTS_CALIBRATEDONE: Calibration is complete */
  #define SAADC_EVENTS_CALIBRATEDONE_ResetValue (0x00000000UL)

/* EVENTS_CALIBRATEDONE @Bit 0 : Calibration is complete */
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Pos (0UL)
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Msk (0x1UL << SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Pos)
                                                                            /*!< Bit mask of EVENTS_CALIBRATEDONE field.*/
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Min (0x0UL)
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Max (0x1UL)
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_NotGenerated (0x0UL)
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Generated (0x1UL)


/* SAADC_EVENTS_STOPPED: The ADC has stopped */
  #define SAADC_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : The ADC has stopped */
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* SAADC_PUBLISH_STARTED: Publish configuration for event STARTED */
  #define SAADC_PUBLISH_STARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STARTED will publish to */
  #define SAADC_PUBLISH_STARTED_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_STARTED_CHIDX_Pos)
  #define SAADC_PUBLISH_STARTED_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_STARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_STARTED_EN_Pos (31UL)
  #define SAADC_PUBLISH_STARTED_EN_Msk (0x1UL << SAADC_PUBLISH_STARTED_EN_Pos)
  #define SAADC_PUBLISH_STARTED_EN_Min (0x0UL)
  #define SAADC_PUBLISH_STARTED_EN_Max (0x1UL)
  #define SAADC_PUBLISH_STARTED_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_STARTED_EN_Enabled (0x1UL)


/* SAADC_PUBLISH_END: Publish configuration for event END */
  #define SAADC_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SAADC_PUBLISH_END_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_END_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_END_CHIDX_Pos)
  #define SAADC_PUBLISH_END_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_END_EN_Pos (31UL)
  #define SAADC_PUBLISH_END_EN_Msk (0x1UL << SAADC_PUBLISH_END_EN_Pos)
  #define SAADC_PUBLISH_END_EN_Min (0x0UL)
  #define SAADC_PUBLISH_END_EN_Max (0x1UL)
  #define SAADC_PUBLISH_END_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_END_EN_Enabled (0x1UL)


/* SAADC_PUBLISH_DONE: Publish configuration for event DONE */
  #define SAADC_PUBLISH_DONE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DONE will publish to */
  #define SAADC_PUBLISH_DONE_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_DONE_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_DONE_CHIDX_Pos)
  #define SAADC_PUBLISH_DONE_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_DONE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_DONE_EN_Pos (31UL)
  #define SAADC_PUBLISH_DONE_EN_Msk (0x1UL << SAADC_PUBLISH_DONE_EN_Pos)
  #define SAADC_PUBLISH_DONE_EN_Min (0x0UL)
  #define SAADC_PUBLISH_DONE_EN_Max (0x1UL)
  #define SAADC_PUBLISH_DONE_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_DONE_EN_Enabled (0x1UL)


/* SAADC_PUBLISH_RESULTDONE: Publish configuration for event RESULTDONE */
  #define SAADC_PUBLISH_RESULTDONE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RESULTDONE will publish to */
  #define SAADC_PUBLISH_RESULTDONE_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_RESULTDONE_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_RESULTDONE_CHIDX_Pos)
  #define SAADC_PUBLISH_RESULTDONE_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_RESULTDONE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_RESULTDONE_EN_Pos (31UL)
  #define SAADC_PUBLISH_RESULTDONE_EN_Msk (0x1UL << SAADC_PUBLISH_RESULTDONE_EN_Pos)
  #define SAADC_PUBLISH_RESULTDONE_EN_Min (0x0UL)
  #define SAADC_PUBLISH_RESULTDONE_EN_Max (0x1UL)
  #define SAADC_PUBLISH_RESULTDONE_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_RESULTDONE_EN_Enabled (0x1UL)


/* SAADC_PUBLISH_CALIBRATEDONE: Publish configuration for event CALIBRATEDONE */
  #define SAADC_PUBLISH_CALIBRATEDONE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CALIBRATEDONE will publish to */
  #define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Pos)
  #define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Pos (31UL)
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Msk (0x1UL << SAADC_PUBLISH_CALIBRATEDONE_EN_Pos)
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Min (0x0UL)
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Max (0x1UL)
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Enabled (0x1UL)


/* SAADC_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define SAADC_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define SAADC_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_STOPPED_CHIDX_Pos)
  #define SAADC_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_STOPPED_EN_Pos (31UL)
  #define SAADC_PUBLISH_STOPPED_EN_Msk (0x1UL << SAADC_PUBLISH_STOPPED_EN_Pos)
  #define SAADC_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define SAADC_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define SAADC_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* SAADC_INTEN: Enable or disable interrupt */
  #define SAADC_INTEN_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Enable or disable interrupt for event STARTED */
  #define SAADC_INTEN_STARTED_Pos (0UL)
  #define SAADC_INTEN_STARTED_Msk (0x1UL << SAADC_INTEN_STARTED_Pos)
  #define SAADC_INTEN_STARTED_Min (0x0UL)
  #define SAADC_INTEN_STARTED_Max (0x1UL)
  #define SAADC_INTEN_STARTED_Disabled (0x0UL)
  #define SAADC_INTEN_STARTED_Enabled (0x1UL)

/* END @Bit 1 : Enable or disable interrupt for event END */
  #define SAADC_INTEN_END_Pos (1UL)
  #define SAADC_INTEN_END_Msk (0x1UL << SAADC_INTEN_END_Pos)
  #define SAADC_INTEN_END_Min (0x0UL)
  #define SAADC_INTEN_END_Max (0x1UL)
  #define SAADC_INTEN_END_Disabled (0x0UL)
  #define SAADC_INTEN_END_Enabled (0x1UL)

/* DONE @Bit 2 : Enable or disable interrupt for event DONE */
  #define SAADC_INTEN_DONE_Pos (2UL)
  #define SAADC_INTEN_DONE_Msk (0x1UL << SAADC_INTEN_DONE_Pos)
  #define SAADC_INTEN_DONE_Min (0x0UL)
  #define SAADC_INTEN_DONE_Max (0x1UL)
  #define SAADC_INTEN_DONE_Disabled (0x0UL)
  #define SAADC_INTEN_DONE_Enabled (0x1UL)

/* RESULTDONE @Bit 3 : Enable or disable interrupt for event RESULTDONE */
  #define SAADC_INTEN_RESULTDONE_Pos (3UL)
  #define SAADC_INTEN_RESULTDONE_Msk (0x1UL << SAADC_INTEN_RESULTDONE_Pos)
  #define SAADC_INTEN_RESULTDONE_Min (0x0UL)
  #define SAADC_INTEN_RESULTDONE_Max (0x1UL)
  #define SAADC_INTEN_RESULTDONE_Disabled (0x0UL)
  #define SAADC_INTEN_RESULTDONE_Enabled (0x1UL)

/* CALIBRATEDONE @Bit 4 : Enable or disable interrupt for event CALIBRATEDONE */
  #define SAADC_INTEN_CALIBRATEDONE_Pos (4UL)
  #define SAADC_INTEN_CALIBRATEDONE_Msk (0x1UL << SAADC_INTEN_CALIBRATEDONE_Pos)
  #define SAADC_INTEN_CALIBRATEDONE_Min (0x0UL)
  #define SAADC_INTEN_CALIBRATEDONE_Max (0x1UL)
  #define SAADC_INTEN_CALIBRATEDONE_Disabled (0x0UL)
  #define SAADC_INTEN_CALIBRATEDONE_Enabled (0x1UL)

/* STOPPED @Bit 5 : Enable or disable interrupt for event STOPPED */
  #define SAADC_INTEN_STOPPED_Pos (5UL)
  #define SAADC_INTEN_STOPPED_Msk (0x1UL << SAADC_INTEN_STOPPED_Pos)
  #define SAADC_INTEN_STOPPED_Min (0x0UL)
  #define SAADC_INTEN_STOPPED_Max (0x1UL)
  #define SAADC_INTEN_STOPPED_Disabled (0x0UL)
  #define SAADC_INTEN_STOPPED_Enabled (0x1UL)

/* CH0LIMITH @Bit 6 : Enable or disable interrupt for event CH0LIMITH */
  #define SAADC_INTEN_CH0LIMITH_Pos (6UL)
  #define SAADC_INTEN_CH0LIMITH_Msk (0x1UL << SAADC_INTEN_CH0LIMITH_Pos)
  #define SAADC_INTEN_CH0LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH0LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH0LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH0LIMITH_Enabled (0x1UL)

/* CH0LIMITL @Bit 7 : Enable or disable interrupt for event CH0LIMITL */
  #define SAADC_INTEN_CH0LIMITL_Pos (7UL)
  #define SAADC_INTEN_CH0LIMITL_Msk (0x1UL << SAADC_INTEN_CH0LIMITL_Pos)
  #define SAADC_INTEN_CH0LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH0LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH0LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH0LIMITL_Enabled (0x1UL)

/* CH1LIMITH @Bit 8 : Enable or disable interrupt for event CH1LIMITH */
  #define SAADC_INTEN_CH1LIMITH_Pos (8UL)
  #define SAADC_INTEN_CH1LIMITH_Msk (0x1UL << SAADC_INTEN_CH1LIMITH_Pos)
  #define SAADC_INTEN_CH1LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH1LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH1LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH1LIMITH_Enabled (0x1UL)

/* CH1LIMITL @Bit 9 : Enable or disable interrupt for event CH1LIMITL */
  #define SAADC_INTEN_CH1LIMITL_Pos (9UL)
  #define SAADC_INTEN_CH1LIMITL_Msk (0x1UL << SAADC_INTEN_CH1LIMITL_Pos)
  #define SAADC_INTEN_CH1LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH1LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH1LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH1LIMITL_Enabled (0x1UL)

/* CH2LIMITH @Bit 10 : Enable or disable interrupt for event CH2LIMITH */
  #define SAADC_INTEN_CH2LIMITH_Pos (10UL)
  #define SAADC_INTEN_CH2LIMITH_Msk (0x1UL << SAADC_INTEN_CH2LIMITH_Pos)
  #define SAADC_INTEN_CH2LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH2LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH2LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH2LIMITH_Enabled (0x1UL)

/* CH2LIMITL @Bit 11 : Enable or disable interrupt for event CH2LIMITL */
  #define SAADC_INTEN_CH2LIMITL_Pos (11UL)
  #define SAADC_INTEN_CH2LIMITL_Msk (0x1UL << SAADC_INTEN_CH2LIMITL_Pos)
  #define SAADC_INTEN_CH2LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH2LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH2LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH2LIMITL_Enabled (0x1UL)

/* CH3LIMITH @Bit 12 : Enable or disable interrupt for event CH3LIMITH */
  #define SAADC_INTEN_CH3LIMITH_Pos (12UL)
  #define SAADC_INTEN_CH3LIMITH_Msk (0x1UL << SAADC_INTEN_CH3LIMITH_Pos)
  #define SAADC_INTEN_CH3LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH3LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH3LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH3LIMITH_Enabled (0x1UL)

/* CH3LIMITL @Bit 13 : Enable or disable interrupt for event CH3LIMITL */
  #define SAADC_INTEN_CH3LIMITL_Pos (13UL)
  #define SAADC_INTEN_CH3LIMITL_Msk (0x1UL << SAADC_INTEN_CH3LIMITL_Pos)
  #define SAADC_INTEN_CH3LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH3LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH3LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH3LIMITL_Enabled (0x1UL)

/* CH4LIMITH @Bit 14 : Enable or disable interrupt for event CH4LIMITH */
  #define SAADC_INTEN_CH4LIMITH_Pos (14UL)
  #define SAADC_INTEN_CH4LIMITH_Msk (0x1UL << SAADC_INTEN_CH4LIMITH_Pos)
  #define SAADC_INTEN_CH4LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH4LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH4LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH4LIMITH_Enabled (0x1UL)

/* CH4LIMITL @Bit 15 : Enable or disable interrupt for event CH4LIMITL */
  #define SAADC_INTEN_CH4LIMITL_Pos (15UL)
  #define SAADC_INTEN_CH4LIMITL_Msk (0x1UL << SAADC_INTEN_CH4LIMITL_Pos)
  #define SAADC_INTEN_CH4LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH4LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH4LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH4LIMITL_Enabled (0x1UL)

/* CH5LIMITH @Bit 16 : Enable or disable interrupt for event CH5LIMITH */
  #define SAADC_INTEN_CH5LIMITH_Pos (16UL)
  #define SAADC_INTEN_CH5LIMITH_Msk (0x1UL << SAADC_INTEN_CH5LIMITH_Pos)
  #define SAADC_INTEN_CH5LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH5LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH5LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH5LIMITH_Enabled (0x1UL)

/* CH5LIMITL @Bit 17 : Enable or disable interrupt for event CH5LIMITL */
  #define SAADC_INTEN_CH5LIMITL_Pos (17UL)
  #define SAADC_INTEN_CH5LIMITL_Msk (0x1UL << SAADC_INTEN_CH5LIMITL_Pos)
  #define SAADC_INTEN_CH5LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH5LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH5LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH5LIMITL_Enabled (0x1UL)

/* CH6LIMITH @Bit 18 : Enable or disable interrupt for event CH6LIMITH */
  #define SAADC_INTEN_CH6LIMITH_Pos (18UL)
  #define SAADC_INTEN_CH6LIMITH_Msk (0x1UL << SAADC_INTEN_CH6LIMITH_Pos)
  #define SAADC_INTEN_CH6LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH6LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH6LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH6LIMITH_Enabled (0x1UL)

/* CH6LIMITL @Bit 19 : Enable or disable interrupt for event CH6LIMITL */
  #define SAADC_INTEN_CH6LIMITL_Pos (19UL)
  #define SAADC_INTEN_CH6LIMITL_Msk (0x1UL << SAADC_INTEN_CH6LIMITL_Pos)
  #define SAADC_INTEN_CH6LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH6LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH6LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH6LIMITL_Enabled (0x1UL)

/* CH7LIMITH @Bit 20 : Enable or disable interrupt for event CH7LIMITH */
  #define SAADC_INTEN_CH7LIMITH_Pos (20UL)
  #define SAADC_INTEN_CH7LIMITH_Msk (0x1UL << SAADC_INTEN_CH7LIMITH_Pos)
  #define SAADC_INTEN_CH7LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH7LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH7LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH7LIMITH_Enabled (0x1UL)

/* CH7LIMITL @Bit 21 : Enable or disable interrupt for event CH7LIMITL */
  #define SAADC_INTEN_CH7LIMITL_Pos (21UL)
  #define SAADC_INTEN_CH7LIMITL_Msk (0x1UL << SAADC_INTEN_CH7LIMITL_Pos)
  #define SAADC_INTEN_CH7LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH7LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH7LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH7LIMITL_Enabled (0x1UL)


/* SAADC_INTENSET: Enable interrupt */
  #define SAADC_INTENSET_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to enable interrupt for event STARTED */
  #define SAADC_INTENSET_STARTED_Pos (0UL)
  #define SAADC_INTENSET_STARTED_Msk (0x1UL << SAADC_INTENSET_STARTED_Pos)
  #define SAADC_INTENSET_STARTED_Min (0x0UL)
  #define SAADC_INTENSET_STARTED_Max (0x1UL)
  #define SAADC_INTENSET_STARTED_Set (0x1UL)
  #define SAADC_INTENSET_STARTED_Disabled (0x0UL)
  #define SAADC_INTENSET_STARTED_Enabled (0x1UL)

/* END @Bit 1 : Write '1' to enable interrupt for event END */
  #define SAADC_INTENSET_END_Pos (1UL)
  #define SAADC_INTENSET_END_Msk (0x1UL << SAADC_INTENSET_END_Pos)
  #define SAADC_INTENSET_END_Min (0x0UL)
  #define SAADC_INTENSET_END_Max (0x1UL)
  #define SAADC_INTENSET_END_Set (0x1UL)
  #define SAADC_INTENSET_END_Disabled (0x0UL)
  #define SAADC_INTENSET_END_Enabled (0x1UL)

/* DONE @Bit 2 : Write '1' to enable interrupt for event DONE */
  #define SAADC_INTENSET_DONE_Pos (2UL)
  #define SAADC_INTENSET_DONE_Msk (0x1UL << SAADC_INTENSET_DONE_Pos)
  #define SAADC_INTENSET_DONE_Min (0x0UL)
  #define SAADC_INTENSET_DONE_Max (0x1UL)
  #define SAADC_INTENSET_DONE_Set (0x1UL)
  #define SAADC_INTENSET_DONE_Disabled (0x0UL)
  #define SAADC_INTENSET_DONE_Enabled (0x1UL)

/* RESULTDONE @Bit 3 : Write '1' to enable interrupt for event RESULTDONE */
  #define SAADC_INTENSET_RESULTDONE_Pos (3UL)
  #define SAADC_INTENSET_RESULTDONE_Msk (0x1UL << SAADC_INTENSET_RESULTDONE_Pos)
  #define SAADC_INTENSET_RESULTDONE_Min (0x0UL)
  #define SAADC_INTENSET_RESULTDONE_Max (0x1UL)
  #define SAADC_INTENSET_RESULTDONE_Set (0x1UL)
  #define SAADC_INTENSET_RESULTDONE_Disabled (0x0UL)
  #define SAADC_INTENSET_RESULTDONE_Enabled (0x1UL)

/* CALIBRATEDONE @Bit 4 : Write '1' to enable interrupt for event CALIBRATEDONE */
  #define SAADC_INTENSET_CALIBRATEDONE_Pos (4UL)
  #define SAADC_INTENSET_CALIBRATEDONE_Msk (0x1UL << SAADC_INTENSET_CALIBRATEDONE_Pos)
  #define SAADC_INTENSET_CALIBRATEDONE_Min (0x0UL)
  #define SAADC_INTENSET_CALIBRATEDONE_Max (0x1UL)
  #define SAADC_INTENSET_CALIBRATEDONE_Set (0x1UL)
  #define SAADC_INTENSET_CALIBRATEDONE_Disabled (0x0UL)
  #define SAADC_INTENSET_CALIBRATEDONE_Enabled (0x1UL)

/* STOPPED @Bit 5 : Write '1' to enable interrupt for event STOPPED */
  #define SAADC_INTENSET_STOPPED_Pos (5UL)
  #define SAADC_INTENSET_STOPPED_Msk (0x1UL << SAADC_INTENSET_STOPPED_Pos)
  #define SAADC_INTENSET_STOPPED_Min (0x0UL)
  #define SAADC_INTENSET_STOPPED_Max (0x1UL)
  #define SAADC_INTENSET_STOPPED_Set (0x1UL)
  #define SAADC_INTENSET_STOPPED_Disabled (0x0UL)
  #define SAADC_INTENSET_STOPPED_Enabled (0x1UL)

/* CH0LIMITH @Bit 6 : Write '1' to enable interrupt for event CH0LIMITH */
  #define SAADC_INTENSET_CH0LIMITH_Pos (6UL)
  #define SAADC_INTENSET_CH0LIMITH_Msk (0x1UL << SAADC_INTENSET_CH0LIMITH_Pos)
  #define SAADC_INTENSET_CH0LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH0LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH0LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH0LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH0LIMITH_Enabled (0x1UL)

/* CH0LIMITL @Bit 7 : Write '1' to enable interrupt for event CH0LIMITL */
  #define SAADC_INTENSET_CH0LIMITL_Pos (7UL)
  #define SAADC_INTENSET_CH0LIMITL_Msk (0x1UL << SAADC_INTENSET_CH0LIMITL_Pos)
  #define SAADC_INTENSET_CH0LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH0LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH0LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH0LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH0LIMITL_Enabled (0x1UL)

/* CH1LIMITH @Bit 8 : Write '1' to enable interrupt for event CH1LIMITH */
  #define SAADC_INTENSET_CH1LIMITH_Pos (8UL)
  #define SAADC_INTENSET_CH1LIMITH_Msk (0x1UL << SAADC_INTENSET_CH1LIMITH_Pos)
  #define SAADC_INTENSET_CH1LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH1LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH1LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH1LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH1LIMITH_Enabled (0x1UL)

/* CH1LIMITL @Bit 9 : Write '1' to enable interrupt for event CH1LIMITL */
  #define SAADC_INTENSET_CH1LIMITL_Pos (9UL)
  #define SAADC_INTENSET_CH1LIMITL_Msk (0x1UL << SAADC_INTENSET_CH1LIMITL_Pos)
  #define SAADC_INTENSET_CH1LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH1LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH1LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH1LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH1LIMITL_Enabled (0x1UL)

/* CH2LIMITH @Bit 10 : Write '1' to enable interrupt for event CH2LIMITH */
  #define SAADC_INTENSET_CH2LIMITH_Pos (10UL)
  #define SAADC_INTENSET_CH2LIMITH_Msk (0x1UL << SAADC_INTENSET_CH2LIMITH_Pos)
  #define SAADC_INTENSET_CH2LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH2LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH2LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH2LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH2LIMITH_Enabled (0x1UL)

/* CH2LIMITL @Bit 11 : Write '1' to enable interrupt for event CH2LIMITL */
  #define SAADC_INTENSET_CH2LIMITL_Pos (11UL)
  #define SAADC_INTENSET_CH2LIMITL_Msk (0x1UL << SAADC_INTENSET_CH2LIMITL_Pos)
  #define SAADC_INTENSET_CH2LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH2LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH2LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH2LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH2LIMITL_Enabled (0x1UL)

/* CH3LIMITH @Bit 12 : Write '1' to enable interrupt for event CH3LIMITH */
  #define SAADC_INTENSET_CH3LIMITH_Pos (12UL)
  #define SAADC_INTENSET_CH3LIMITH_Msk (0x1UL << SAADC_INTENSET_CH3LIMITH_Pos)
  #define SAADC_INTENSET_CH3LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH3LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH3LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH3LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH3LIMITH_Enabled (0x1UL)

/* CH3LIMITL @Bit 13 : Write '1' to enable interrupt for event CH3LIMITL */
  #define SAADC_INTENSET_CH3LIMITL_Pos (13UL)
  #define SAADC_INTENSET_CH3LIMITL_Msk (0x1UL << SAADC_INTENSET_CH3LIMITL_Pos)
  #define SAADC_INTENSET_CH3LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH3LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH3LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH3LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH3LIMITL_Enabled (0x1UL)

/* CH4LIMITH @Bit 14 : Write '1' to enable interrupt for event CH4LIMITH */
  #define SAADC_INTENSET_CH4LIMITH_Pos (14UL)
  #define SAADC_INTENSET_CH4LIMITH_Msk (0x1UL << SAADC_INTENSET_CH4LIMITH_Pos)
  #define SAADC_INTENSET_CH4LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH4LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH4LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH4LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH4LIMITH_Enabled (0x1UL)

/* CH4LIMITL @Bit 15 : Write '1' to enable interrupt for event CH4LIMITL */
  #define SAADC_INTENSET_CH4LIMITL_Pos (15UL)
  #define SAADC_INTENSET_CH4LIMITL_Msk (0x1UL << SAADC_INTENSET_CH4LIMITL_Pos)
  #define SAADC_INTENSET_CH4LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH4LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH4LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH4LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH4LIMITL_Enabled (0x1UL)

/* CH5LIMITH @Bit 16 : Write '1' to enable interrupt for event CH5LIMITH */
  #define SAADC_INTENSET_CH5LIMITH_Pos (16UL)
  #define SAADC_INTENSET_CH5LIMITH_Msk (0x1UL << SAADC_INTENSET_CH5LIMITH_Pos)
  #define SAADC_INTENSET_CH5LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH5LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH5LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH5LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH5LIMITH_Enabled (0x1UL)

/* CH5LIMITL @Bit 17 : Write '1' to enable interrupt for event CH5LIMITL */
  #define SAADC_INTENSET_CH5LIMITL_Pos (17UL)
  #define SAADC_INTENSET_CH5LIMITL_Msk (0x1UL << SAADC_INTENSET_CH5LIMITL_Pos)
  #define SAADC_INTENSET_CH5LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH5LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH5LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH5LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH5LIMITL_Enabled (0x1UL)

/* CH6LIMITH @Bit 18 : Write '1' to enable interrupt for event CH6LIMITH */
  #define SAADC_INTENSET_CH6LIMITH_Pos (18UL)
  #define SAADC_INTENSET_CH6LIMITH_Msk (0x1UL << SAADC_INTENSET_CH6LIMITH_Pos)
  #define SAADC_INTENSET_CH6LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH6LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH6LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH6LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH6LIMITH_Enabled (0x1UL)

/* CH6LIMITL @Bit 19 : Write '1' to enable interrupt for event CH6LIMITL */
  #define SAADC_INTENSET_CH6LIMITL_Pos (19UL)
  #define SAADC_INTENSET_CH6LIMITL_Msk (0x1UL << SAADC_INTENSET_CH6LIMITL_Pos)
  #define SAADC_INTENSET_CH6LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH6LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH6LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH6LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH6LIMITL_Enabled (0x1UL)

/* CH7LIMITH @Bit 20 : Write '1' to enable interrupt for event CH7LIMITH */
  #define SAADC_INTENSET_CH7LIMITH_Pos (20UL)
  #define SAADC_INTENSET_CH7LIMITH_Msk (0x1UL << SAADC_INTENSET_CH7LIMITH_Pos)
  #define SAADC_INTENSET_CH7LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH7LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH7LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH7LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH7LIMITH_Enabled (0x1UL)

/* CH7LIMITL @Bit 21 : Write '1' to enable interrupt for event CH7LIMITL */
  #define SAADC_INTENSET_CH7LIMITL_Pos (21UL)
  #define SAADC_INTENSET_CH7LIMITL_Msk (0x1UL << SAADC_INTENSET_CH7LIMITL_Pos)
  #define SAADC_INTENSET_CH7LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH7LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH7LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH7LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH7LIMITL_Enabled (0x1UL)


/* SAADC_INTENCLR: Disable interrupt */
  #define SAADC_INTENCLR_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to disable interrupt for event STARTED */
  #define SAADC_INTENCLR_STARTED_Pos (0UL)
  #define SAADC_INTENCLR_STARTED_Msk (0x1UL << SAADC_INTENCLR_STARTED_Pos)
  #define SAADC_INTENCLR_STARTED_Min (0x0UL)
  #define SAADC_INTENCLR_STARTED_Max (0x1UL)
  #define SAADC_INTENCLR_STARTED_Clear (0x1UL)
  #define SAADC_INTENCLR_STARTED_Disabled (0x0UL)
  #define SAADC_INTENCLR_STARTED_Enabled (0x1UL)

/* END @Bit 1 : Write '1' to disable interrupt for event END */
  #define SAADC_INTENCLR_END_Pos (1UL)
  #define SAADC_INTENCLR_END_Msk (0x1UL << SAADC_INTENCLR_END_Pos)
  #define SAADC_INTENCLR_END_Min (0x0UL)
  #define SAADC_INTENCLR_END_Max (0x1UL)
  #define SAADC_INTENCLR_END_Clear (0x1UL)
  #define SAADC_INTENCLR_END_Disabled (0x0UL)
  #define SAADC_INTENCLR_END_Enabled (0x1UL)

/* DONE @Bit 2 : Write '1' to disable interrupt for event DONE */
  #define SAADC_INTENCLR_DONE_Pos (2UL)
  #define SAADC_INTENCLR_DONE_Msk (0x1UL << SAADC_INTENCLR_DONE_Pos)
  #define SAADC_INTENCLR_DONE_Min (0x0UL)
  #define SAADC_INTENCLR_DONE_Max (0x1UL)
  #define SAADC_INTENCLR_DONE_Clear (0x1UL)
  #define SAADC_INTENCLR_DONE_Disabled (0x0UL)
  #define SAADC_INTENCLR_DONE_Enabled (0x1UL)

/* RESULTDONE @Bit 3 : Write '1' to disable interrupt for event RESULTDONE */
  #define SAADC_INTENCLR_RESULTDONE_Pos (3UL)
  #define SAADC_INTENCLR_RESULTDONE_Msk (0x1UL << SAADC_INTENCLR_RESULTDONE_Pos)
  #define SAADC_INTENCLR_RESULTDONE_Min (0x0UL)
  #define SAADC_INTENCLR_RESULTDONE_Max (0x1UL)
  #define SAADC_INTENCLR_RESULTDONE_Clear (0x1UL)
  #define SAADC_INTENCLR_RESULTDONE_Disabled (0x0UL)
  #define SAADC_INTENCLR_RESULTDONE_Enabled (0x1UL)

/* CALIBRATEDONE @Bit 4 : Write '1' to disable interrupt for event CALIBRATEDONE */
  #define SAADC_INTENCLR_CALIBRATEDONE_Pos (4UL)
  #define SAADC_INTENCLR_CALIBRATEDONE_Msk (0x1UL << SAADC_INTENCLR_CALIBRATEDONE_Pos)
  #define SAADC_INTENCLR_CALIBRATEDONE_Min (0x0UL)
  #define SAADC_INTENCLR_CALIBRATEDONE_Max (0x1UL)
  #define SAADC_INTENCLR_CALIBRATEDONE_Clear (0x1UL)
  #define SAADC_INTENCLR_CALIBRATEDONE_Disabled (0x0UL)
  #define SAADC_INTENCLR_CALIBRATEDONE_Enabled (0x1UL)

/* STOPPED @Bit 5 : Write '1' to disable interrupt for event STOPPED */
  #define SAADC_INTENCLR_STOPPED_Pos (5UL)
  #define SAADC_INTENCLR_STOPPED_Msk (0x1UL << SAADC_INTENCLR_STOPPED_Pos)
  #define SAADC_INTENCLR_STOPPED_Min (0x0UL)
  #define SAADC_INTENCLR_STOPPED_Max (0x1UL)
  #define SAADC_INTENCLR_STOPPED_Clear (0x1UL)
  #define SAADC_INTENCLR_STOPPED_Disabled (0x0UL)
  #define SAADC_INTENCLR_STOPPED_Enabled (0x1UL)

/* CH0LIMITH @Bit 6 : Write '1' to disable interrupt for event CH0LIMITH */
  #define SAADC_INTENCLR_CH0LIMITH_Pos (6UL)
  #define SAADC_INTENCLR_CH0LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH0LIMITH_Pos)
  #define SAADC_INTENCLR_CH0LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH0LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH0LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH0LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH0LIMITH_Enabled (0x1UL)

/* CH0LIMITL @Bit 7 : Write '1' to disable interrupt for event CH0LIMITL */
  #define SAADC_INTENCLR_CH0LIMITL_Pos (7UL)
  #define SAADC_INTENCLR_CH0LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH0LIMITL_Pos)
  #define SAADC_INTENCLR_CH0LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH0LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH0LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH0LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH0LIMITL_Enabled (0x1UL)

/* CH1LIMITH @Bit 8 : Write '1' to disable interrupt for event CH1LIMITH */
  #define SAADC_INTENCLR_CH1LIMITH_Pos (8UL)
  #define SAADC_INTENCLR_CH1LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH1LIMITH_Pos)
  #define SAADC_INTENCLR_CH1LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH1LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH1LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH1LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH1LIMITH_Enabled (0x1UL)

/* CH1LIMITL @Bit 9 : Write '1' to disable interrupt for event CH1LIMITL */
  #define SAADC_INTENCLR_CH1LIMITL_Pos (9UL)
  #define SAADC_INTENCLR_CH1LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH1LIMITL_Pos)
  #define SAADC_INTENCLR_CH1LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH1LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH1LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH1LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH1LIMITL_Enabled (0x1UL)

/* CH2LIMITH @Bit 10 : Write '1' to disable interrupt for event CH2LIMITH */
  #define SAADC_INTENCLR_CH2LIMITH_Pos (10UL)
  #define SAADC_INTENCLR_CH2LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH2LIMITH_Pos)
  #define SAADC_INTENCLR_CH2LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH2LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH2LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH2LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH2LIMITH_Enabled (0x1UL)

/* CH2LIMITL @Bit 11 : Write '1' to disable interrupt for event CH2LIMITL */
  #define SAADC_INTENCLR_CH2LIMITL_Pos (11UL)
  #define SAADC_INTENCLR_CH2LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH2LIMITL_Pos)
  #define SAADC_INTENCLR_CH2LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH2LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH2LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH2LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH2LIMITL_Enabled (0x1UL)

/* CH3LIMITH @Bit 12 : Write '1' to disable interrupt for event CH3LIMITH */
  #define SAADC_INTENCLR_CH3LIMITH_Pos (12UL)
  #define SAADC_INTENCLR_CH3LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH3LIMITH_Pos)
  #define SAADC_INTENCLR_CH3LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH3LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH3LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH3LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH3LIMITH_Enabled (0x1UL)

/* CH3LIMITL @Bit 13 : Write '1' to disable interrupt for event CH3LIMITL */
  #define SAADC_INTENCLR_CH3LIMITL_Pos (13UL)
  #define SAADC_INTENCLR_CH3LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH3LIMITL_Pos)
  #define SAADC_INTENCLR_CH3LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH3LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH3LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH3LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH3LIMITL_Enabled (0x1UL)

/* CH4LIMITH @Bit 14 : Write '1' to disable interrupt for event CH4LIMITH */
  #define SAADC_INTENCLR_CH4LIMITH_Pos (14UL)
  #define SAADC_INTENCLR_CH4LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH4LIMITH_Pos)
  #define SAADC_INTENCLR_CH4LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH4LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH4LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH4LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH4LIMITH_Enabled (0x1UL)

/* CH4LIMITL @Bit 15 : Write '1' to disable interrupt for event CH4LIMITL */
  #define SAADC_INTENCLR_CH4LIMITL_Pos (15UL)
  #define SAADC_INTENCLR_CH4LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH4LIMITL_Pos)
  #define SAADC_INTENCLR_CH4LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH4LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH4LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH4LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH4LIMITL_Enabled (0x1UL)

/* CH5LIMITH @Bit 16 : Write '1' to disable interrupt for event CH5LIMITH */
  #define SAADC_INTENCLR_CH5LIMITH_Pos (16UL)
  #define SAADC_INTENCLR_CH5LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH5LIMITH_Pos)
  #define SAADC_INTENCLR_CH5LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH5LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH5LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH5LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH5LIMITH_Enabled (0x1UL)

/* CH5LIMITL @Bit 17 : Write '1' to disable interrupt for event CH5LIMITL */
  #define SAADC_INTENCLR_CH5LIMITL_Pos (17UL)
  #define SAADC_INTENCLR_CH5LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH5LIMITL_Pos)
  #define SAADC_INTENCLR_CH5LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH5LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH5LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH5LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH5LIMITL_Enabled (0x1UL)

/* CH6LIMITH @Bit 18 : Write '1' to disable interrupt for event CH6LIMITH */
  #define SAADC_INTENCLR_CH6LIMITH_Pos (18UL)
  #define SAADC_INTENCLR_CH6LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH6LIMITH_Pos)
  #define SAADC_INTENCLR_CH6LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH6LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH6LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH6LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH6LIMITH_Enabled (0x1UL)

/* CH6LIMITL @Bit 19 : Write '1' to disable interrupt for event CH6LIMITL */
  #define SAADC_INTENCLR_CH6LIMITL_Pos (19UL)
  #define SAADC_INTENCLR_CH6LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH6LIMITL_Pos)
  #define SAADC_INTENCLR_CH6LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH6LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH6LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH6LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH6LIMITL_Enabled (0x1UL)

/* CH7LIMITH @Bit 20 : Write '1' to disable interrupt for event CH7LIMITH */
  #define SAADC_INTENCLR_CH7LIMITH_Pos (20UL)
  #define SAADC_INTENCLR_CH7LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH7LIMITH_Pos)
  #define SAADC_INTENCLR_CH7LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH7LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH7LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH7LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH7LIMITH_Enabled (0x1UL)

/* CH7LIMITL @Bit 21 : Write '1' to disable interrupt for event CH7LIMITL */
  #define SAADC_INTENCLR_CH7LIMITL_Pos (21UL)
  #define SAADC_INTENCLR_CH7LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH7LIMITL_Pos)
  #define SAADC_INTENCLR_CH7LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH7LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH7LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH7LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH7LIMITL_Enabled (0x1UL)


/* SAADC_STATUS: Status */
  #define SAADC_STATUS_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : Status */
  #define SAADC_STATUS_STATUS_Pos (0UL)
  #define SAADC_STATUS_STATUS_Msk (0x1UL << SAADC_STATUS_STATUS_Pos)
  #define SAADC_STATUS_STATUS_Min (0x0UL)
  #define SAADC_STATUS_STATUS_Max (0x1UL)
  #define SAADC_STATUS_STATUS_Ready (0x0UL)
  #define SAADC_STATUS_STATUS_Busy (0x1UL)


/* SAADC_ENABLE: Enable or disable ADC */
  #define SAADC_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable or disable ADC */
  #define SAADC_ENABLE_ENABLE_Pos (0UL)
  #define SAADC_ENABLE_ENABLE_Msk (0x1UL << SAADC_ENABLE_ENABLE_Pos)
  #define SAADC_ENABLE_ENABLE_Min (0x0UL)
  #define SAADC_ENABLE_ENABLE_Max (0x1UL)
  #define SAADC_ENABLE_ENABLE_Disabled (0x0UL)
  #define SAADC_ENABLE_ENABLE_Enabled (0x1UL)


/* SAADC_RESOLUTION: Resolution configuration */
  #define SAADC_RESOLUTION_ResetValue (0x00000001UL)

/* VAL @Bits 0..2 : Set the resolution */
  #define SAADC_RESOLUTION_VAL_Pos (0UL)
  #define SAADC_RESOLUTION_VAL_Msk (0x7UL << SAADC_RESOLUTION_VAL_Pos)
  #define SAADC_RESOLUTION_VAL_Min (0x0UL)
  #define SAADC_RESOLUTION_VAL_Max (0x3UL)
  #define SAADC_RESOLUTION_VAL_8bit (0x0UL)
  #define SAADC_RESOLUTION_VAL_10bit (0x1UL)
  #define SAADC_RESOLUTION_VAL_12bit (0x2UL)
  #define SAADC_RESOLUTION_VAL_14bit (0x3UL)


/* SAADC_OVERSAMPLE: Oversampling configuration. OVERSAMPLE should not be combined with SCAN. The RESOLUTION is applied before
                      averaging, thus for high OVERSAMPLE a higher RESOLUTION should be used. */

  #define SAADC_OVERSAMPLE_ResetValue (0x00000000UL)

/* OVERSAMPLE @Bits 0..3 : Oversample control */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Pos (0UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Msk (0xFUL << SAADC_OVERSAMPLE_OVERSAMPLE_Pos)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Min (0x0UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Max (0x8UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Bypass (0x0UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over2x (0x1UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over4x (0x2UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over8x (0x3UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over16x (0x4UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over32x (0x5UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over64x (0x6UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over128x (0x7UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over256x (0x8UL)


/* SAADC_SAMPLERATE: Controls normal or continuous sample rate */
  #define SAADC_SAMPLERATE_ResetValue (0x00000000UL)

/* CC @Bits 0..10 : Capture and compare value. Sample rate is 16 MHz/CC */
  #define SAADC_SAMPLERATE_CC_Pos (0UL)
  #define SAADC_SAMPLERATE_CC_Msk (0x7FFUL << SAADC_SAMPLERATE_CC_Pos)
  #define SAADC_SAMPLERATE_CC_Min (0x008UL)
  #define SAADC_SAMPLERATE_CC_Max (0x7FFUL)

/* MODE @Bit 12 : Select mode for sample rate control */
  #define SAADC_SAMPLERATE_MODE_Pos (12UL)
  #define SAADC_SAMPLERATE_MODE_Msk (0x1UL << SAADC_SAMPLERATE_MODE_Pos)
  #define SAADC_SAMPLERATE_MODE_Min (0x0UL)
  #define SAADC_SAMPLERATE_MODE_Max (0x1UL)
  #define SAADC_SAMPLERATE_MODE_Task (0x0UL)
  #define SAADC_SAMPLERATE_MODE_Timers (0x1UL)


/* SAADC_NOISESHAPE: Enable noise shaping */
  #define SAADC_NOISESHAPE_ResetValue (0x00000000UL)

/* NOISESHAPE @Bits 0..1 : Enable noise shaping */
  #define SAADC_NOISESHAPE_NOISESHAPE_Pos (0UL)
  #define SAADC_NOISESHAPE_NOISESHAPE_Msk (0x3UL << SAADC_NOISESHAPE_NOISESHAPE_Pos)
  #define SAADC_NOISESHAPE_NOISESHAPE_Min (0x0UL)
  #define SAADC_NOISESHAPE_NOISESHAPE_Max (0x2UL)
  #define SAADC_NOISESHAPE_NOISESHAPE_Disable (0x0UL)
  #define SAADC_NOISESHAPE_NOISESHAPE_Audio (0x1UL)  /*!< Noiseshaping and decimating. Larger passband. Provides a 50kS/s cut
                                                          off frequency, 8x the oversampling ratio. See design description for
                                                          more information*/
  #define SAADC_NOISESHAPE_NOISESHAPE_Accuracy (0x2UL) /*!< Noiseshaping and decimating. Smaller passband. Recommended
                                                            resolution setting is 14 bits. Provides a 5kS/s cut off frequency,
                                                            32x the oversampling ratio. See design description for more
                                                            information*/


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           SICR                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct SICR ======================================================= */
/**
  * @brief Factory Information Configuration Registers
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_SICR_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           SPIM                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct SPIM_TASKS_DMA_RX ================================================= */
/**
  * @brief RX [SPIM_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000000) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000010) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_SPIM_TASKS_DMA_RX_Type;

/* SPIM_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL)
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL)
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL)
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL)


/* SPIM_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL)
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL)
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL)
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL)



/* ================================================== Struct SPIM_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [SPIM_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __OM  NRF_SPIM_TASKS_DMA_RX_Type RX;
} NRF_SPIM_TASKS_DMA_Type;


/* ============================================== Struct SPIM_SUBSCRIBE_DMA_RX =============================================== */
/**
  * @brief RX [SPIM_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  ENABLEMATCH[4];
  __IOM uint32_t  DISABLEMATCH[4];
} NRF_SPIM_SUBSCRIBE_DMA_RX_Type;

/* SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL)


/* SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL)



/* ================================================ Struct SPIM_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [SPIM_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IOM NRF_SPIM_SUBSCRIBE_DMA_RX_Type RX;
} NRF_SPIM_SUBSCRIBE_DMA_Type;


/* ================================================ Struct SPIM_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [SPIM_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_SPIM_EVENTS_DMA_RX_Type;

/* SPIM_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define SPIM_EVENTS_DMA_RX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define SPIM_EVENTS_DMA_RX_END_END_Pos (0UL)
  #define SPIM_EVENTS_DMA_RX_END_END_Msk (0x1UL << SPIM_EVENTS_DMA_RX_END_END_Pos)
  #define SPIM_EVENTS_DMA_RX_END_END_Min (0x0UL)
  #define SPIM_EVENTS_DMA_RX_END_END_Max (0x1UL)
  #define SPIM_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_RX_END_END_Generated (0x1UL)


/* SPIM_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define SPIM_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define SPIM_EVENTS_DMA_RX_READY_READY_Pos (0UL)
  #define SPIM_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << SPIM_EVENTS_DMA_RX_READY_READY_Pos)
  #define SPIM_EVENTS_DMA_RX_READY_READY_Min (0x0UL)
  #define SPIM_EVENTS_DMA_RX_READY_READY_Max (0x1UL)
  #define SPIM_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_RX_READY_READY_Generated (0x1UL)


/* SPIM_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define SPIM_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL)
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL)
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL)
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL)


/* SPIM_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define SPIM_EVENTS_DMA_RX_MATCH_MaxCount (4UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_MinIndex (0UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << SPIM_EVENTS_DMA_RX_MATCH_MATCH_Pos)
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL)



/* ================================================ Struct SPIM_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [SPIM_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
} NRF_SPIM_EVENTS_DMA_TX_Type;

/* SPIM_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define SPIM_EVENTS_DMA_TX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define SPIM_EVENTS_DMA_TX_END_END_Pos (0UL)
  #define SPIM_EVENTS_DMA_TX_END_END_Msk (0x1UL << SPIM_EVENTS_DMA_TX_END_END_Pos)
  #define SPIM_EVENTS_DMA_TX_END_END_Min (0x0UL)
  #define SPIM_EVENTS_DMA_TX_END_END_Max (0x1UL)
  #define SPIM_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_TX_END_END_Generated (0x1UL)


/* SPIM_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define SPIM_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define SPIM_EVENTS_DMA_TX_READY_READY_Pos (0UL)
  #define SPIM_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << SPIM_EVENTS_DMA_TX_READY_READY_Pos)
  #define SPIM_EVENTS_DMA_TX_READY_READY_Min (0x0UL)
  #define SPIM_EVENTS_DMA_TX_READY_READY_Max (0x1UL)
  #define SPIM_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_TX_READY_READY_Generated (0x1UL)


/* SPIM_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define SPIM_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL)
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL)
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL)
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL)



/* ================================================= Struct SPIM_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [SPIM_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_SPIM_EVENTS_DMA_RX_Type RX;
  __IOM NRF_SPIM_EVENTS_DMA_TX_Type TX;
} NRF_SPIM_EVENTS_DMA_Type;


/* =============================================== Struct SPIM_PUBLISH_DMA_RX ================================================ */
/**
  * @brief RX [SPIM_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_SPIM_PUBLISH_DMA_RX_Type;

/* SPIM_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define SPIM_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIM_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_RX_END_CHIDX_Pos)
  #define SPIM_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_RX_END_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_RX_END_EN_Pos)
  #define SPIM_PUBLISH_DMA_RX_END_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_END_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define SPIM_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define SPIM_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_RX_READY_CHIDX_Pos)
  #define SPIM_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_RX_READY_EN_Pos)
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Pos)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define SPIM_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Pos)
  #define SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_RX_MATCH_EN_Pos)
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL)



/* =============================================== Struct SPIM_PUBLISH_DMA_TX ================================================ */
/**
  * @brief TX [SPIM_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
} NRF_SPIM_PUBLISH_DMA_TX_Type;

/* SPIM_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define SPIM_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIM_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_TX_END_CHIDX_Pos)
  #define SPIM_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_TX_END_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_TX_END_EN_Pos)
  #define SPIM_PUBLISH_DMA_TX_END_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_TX_END_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define SPIM_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define SPIM_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_TX_READY_CHIDX_Pos)
  #define SPIM_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_TX_READY_EN_Pos)
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Pos)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL)



/* ================================================= Struct SPIM_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [SPIM_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_SPIM_PUBLISH_DMA_RX_Type RX;
  __IOM NRF_SPIM_PUBLISH_DMA_TX_Type TX;
} NRF_SPIM_PUBLISH_DMA_Type;


/* ================================================== Struct SPIM_IFTIMING =================================================== */
/**
  * @brief IFTIMING [SPIM_IFTIMING] (unspecified)
  */
typedef struct {
  __IOM uint32_t  RXDELAY;
  __IOM uint32_t  CSNDUR;                            /*!< (@ 0x00000004) Minimum duration between edge of CSN and edge of SCK.
                                                                         When SHORTS.END_START is used, this is also the minimum
                                                                         duration CSN must stay high between transactions.*/
} NRF_SPIM_IFTIMING_Type;

/* SPIM_IFTIMING_RXDELAY: Sample delay for input serial data on SDI */
  #define SPIM_IFTIMING_RXDELAY_ResetValue (0x00000002UL)

/* RXDELAY @Bits 0..2 : Sample delay for input serial data on SDI. The value specifies the number of SPIM core clock cycles
                        delay from the the sampling edge of SCK (leading edge for CONFIG.CPHA = 0, trailing edge for CONFIG.CPHA
                        = 1) until the input serial data is sampled. As en example, if RXDELAY = 0 and CONFIG.CPHA = 0, the
                        input serial data is sampled on the rising edge of SCK. */

  #define SPIM_IFTIMING_RXDELAY_RXDELAY_Pos (0UL)
  #define SPIM_IFTIMING_RXDELAY_RXDELAY_Msk (0x7UL << SPIM_IFTIMING_RXDELAY_RXDELAY_Pos)
  #define SPIM_IFTIMING_RXDELAY_RXDELAY_Min (0x0UL)
  #define SPIM_IFTIMING_RXDELAY_RXDELAY_Max (0x7UL)


/* SPIM_IFTIMING_CSNDUR: Minimum duration between edge of CSN and edge of SCK. When SHORTS.END_START is used, this is also the
                          minimum duration CSN must stay high between transactions. */

  #define SPIM_IFTIMING_CSNDUR_ResetValue (0x00000002UL)

/* CSNDUR @Bits 0..7 : Minimum duration between edge of CSN and edge of SCK. When SHORTS.END_START is used, this is the minimum
                       duration CSN must stay high between transactions. The value is specified in number of SPIM core clock
                       cycles. */

  #define SPIM_IFTIMING_CSNDUR_CSNDUR_Pos (0UL)
  #define SPIM_IFTIMING_CSNDUR_CSNDUR_Msk (0xFFUL << SPIM_IFTIMING_CSNDUR_CSNDUR_Pos)
  #define SPIM_IFTIMING_CSNDUR_CSNDUR_Min (0x00UL)
  #define SPIM_IFTIMING_CSNDUR_CSNDUR_Max (0xFFUL)



/* ==================================================== Struct SPIM_PSEL ===================================================== */
/**
  * @brief PSEL [SPIM_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SCK;
  __IOM uint32_t  MOSI;
  __IOM uint32_t  MISO;
  __IOM uint32_t  DCX;
  __IOM uint32_t  CSN;
} NRF_SPIM_PSEL_Type;

/* SPIM_PSEL_SCK: Pin select for SCK */
  #define SPIM_PSEL_SCK_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_SCK_PIN_Pos (0UL)
  #define SPIM_PSEL_SCK_PIN_Msk (0x1FUL << SPIM_PSEL_SCK_PIN_Pos)
  #define SPIM_PSEL_SCK_PIN_Min (0x00UL)
  #define SPIM_PSEL_SCK_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_SCK_PORT_Pos (5UL)
  #define SPIM_PSEL_SCK_PORT_Msk (0x7UL << SPIM_PSEL_SCK_PORT_Pos)
  #define SPIM_PSEL_SCK_PORT_Min (0x0UL)
  #define SPIM_PSEL_SCK_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_SCK_CONNECT_Pos (31UL)
  #define SPIM_PSEL_SCK_CONNECT_Msk (0x1UL << SPIM_PSEL_SCK_CONNECT_Pos)
  #define SPIM_PSEL_SCK_CONNECT_Min (0x0UL)
  #define SPIM_PSEL_SCK_CONNECT_Max (0x1UL)
  #define SPIM_PSEL_SCK_CONNECT_Disconnected (0x1UL)
  #define SPIM_PSEL_SCK_CONNECT_Connected (0x0UL)


/* SPIM_PSEL_MOSI: Pin select for SDO signal */
  #define SPIM_PSEL_MOSI_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_MOSI_PIN_Pos (0UL)
  #define SPIM_PSEL_MOSI_PIN_Msk (0x1FUL << SPIM_PSEL_MOSI_PIN_Pos)
  #define SPIM_PSEL_MOSI_PIN_Min (0x00UL)
  #define SPIM_PSEL_MOSI_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_MOSI_PORT_Pos (5UL)
  #define SPIM_PSEL_MOSI_PORT_Msk (0x7UL << SPIM_PSEL_MOSI_PORT_Pos)
  #define SPIM_PSEL_MOSI_PORT_Min (0x0UL)
  #define SPIM_PSEL_MOSI_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_MOSI_CONNECT_Pos (31UL)
  #define SPIM_PSEL_MOSI_CONNECT_Msk (0x1UL << SPIM_PSEL_MOSI_CONNECT_Pos)
  #define SPIM_PSEL_MOSI_CONNECT_Min (0x0UL)
  #define SPIM_PSEL_MOSI_CONNECT_Max (0x1UL)
  #define SPIM_PSEL_MOSI_CONNECT_Disconnected (0x1UL)
  #define SPIM_PSEL_MOSI_CONNECT_Connected (0x0UL)


/* SPIM_PSEL_MISO: Pin select for SDI signal */
  #define SPIM_PSEL_MISO_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_MISO_PIN_Pos (0UL)
  #define SPIM_PSEL_MISO_PIN_Msk (0x1FUL << SPIM_PSEL_MISO_PIN_Pos)
  #define SPIM_PSEL_MISO_PIN_Min (0x00UL)
  #define SPIM_PSEL_MISO_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_MISO_PORT_Pos (5UL)
  #define SPIM_PSEL_MISO_PORT_Msk (0x7UL << SPIM_PSEL_MISO_PORT_Pos)
  #define SPIM_PSEL_MISO_PORT_Min (0x0UL)
  #define SPIM_PSEL_MISO_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_MISO_CONNECT_Pos (31UL)
  #define SPIM_PSEL_MISO_CONNECT_Msk (0x1UL << SPIM_PSEL_MISO_CONNECT_Pos)
  #define SPIM_PSEL_MISO_CONNECT_Min (0x0UL)
  #define SPIM_PSEL_MISO_CONNECT_Max (0x1UL)
  #define SPIM_PSEL_MISO_CONNECT_Disconnected (0x1UL)
  #define SPIM_PSEL_MISO_CONNECT_Connected (0x0UL)


/* SPIM_PSEL_DCX: Pin select for DCX signal */
  #define SPIM_PSEL_DCX_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_DCX_PIN_Pos (0UL)
  #define SPIM_PSEL_DCX_PIN_Msk (0x1FUL << SPIM_PSEL_DCX_PIN_Pos)
  #define SPIM_PSEL_DCX_PIN_Min (0x00UL)
  #define SPIM_PSEL_DCX_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_DCX_PORT_Pos (5UL)
  #define SPIM_PSEL_DCX_PORT_Msk (0x7UL << SPIM_PSEL_DCX_PORT_Pos)
  #define SPIM_PSEL_DCX_PORT_Min (0x0UL)
  #define SPIM_PSEL_DCX_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_DCX_CONNECT_Pos (31UL)
  #define SPIM_PSEL_DCX_CONNECT_Msk (0x1UL << SPIM_PSEL_DCX_CONNECT_Pos)
  #define SPIM_PSEL_DCX_CONNECT_Min (0x0UL)
  #define SPIM_PSEL_DCX_CONNECT_Max (0x1UL)
  #define SPIM_PSEL_DCX_CONNECT_Disconnected (0x1UL)
  #define SPIM_PSEL_DCX_CONNECT_Connected (0x0UL)


/* SPIM_PSEL_CSN: Pin select for CSN */
  #define SPIM_PSEL_CSN_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_CSN_PIN_Pos (0UL)
  #define SPIM_PSEL_CSN_PIN_Msk (0x1FUL << SPIM_PSEL_CSN_PIN_Pos)
  #define SPIM_PSEL_CSN_PIN_Min (0x00UL)
  #define SPIM_PSEL_CSN_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_CSN_PORT_Pos (5UL)
  #define SPIM_PSEL_CSN_PORT_Msk (0x7UL << SPIM_PSEL_CSN_PORT_Pos)
  #define SPIM_PSEL_CSN_PORT_Min (0x0UL)
  #define SPIM_PSEL_CSN_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_CSN_CONNECT_Pos (31UL)
  #define SPIM_PSEL_CSN_CONNECT_Msk (0x1UL << SPIM_PSEL_CSN_CONNECT_Pos)
  #define SPIM_PSEL_CSN_CONNECT_Min (0x0UL)
  #define SPIM_PSEL_CSN_CONNECT_Max (0x1UL)
  #define SPIM_PSEL_CSN_CONNECT_Disconnected (0x1UL)
  #define SPIM_PSEL_CSN_CONNECT_Connected (0x0UL)



/* ================================================ Struct SPIM_DMA_RX_MATCH ================================================= */
/**
  * @brief MATCH [SPIM_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_SPIM_DMA_RX_MATCH_Type;

/* SPIM_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define SPIM_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL)

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL)

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL)

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL)

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL)

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or sticky */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL)

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or sticky */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL)

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or sticky */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL)

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or sticky */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL)


/* SPIM_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define SPIM_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL)
  #define SPIM_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL)
  #define SPIM_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL)
  #define SPIM_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data to look for */
  #define SPIM_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL)
  #define SPIM_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFFFFFFFUL << SPIM_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/



/* =================================================== Struct SPIM_DMA_RX ==================================================== */
/**
  * @brief RX [SPIM_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  LIST;
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_SPIM_DMA_RX_MATCH_Type MATCH;            /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_SPIM_DMA_RX_Type;

/* SPIM_DMA_RX_PTR: RAM buffer start address */
  #define SPIM_DMA_RX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define SPIM_DMA_RX_PTR_PTR_Pos (0UL)
  #define SPIM_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << SPIM_DMA_RX_PTR_PTR_Pos)


/* SPIM_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define SPIM_DMA_RX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define SPIM_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)
  #define SPIM_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIM_DMA_RX_MAXCNT_MAXCNT_Pos)
  #define SPIM_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define SPIM_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* SPIM_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define SPIM_DMA_RX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define SPIM_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)
  #define SPIM_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIM_DMA_RX_AMOUNT_AMOUNT_Pos)
  #define SPIM_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define SPIM_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* SPIM_DMA_RX_LIST: EasyDMA list type */
  #define SPIM_DMA_RX_LIST_ResetValue (0x00000000UL)

/* TYPE @Bits 0..2 : List type */
  #define SPIM_DMA_RX_LIST_TYPE_Pos (0UL)
  #define SPIM_DMA_RX_LIST_TYPE_Msk (0x7UL << SPIM_DMA_RX_LIST_TYPE_Pos)
  #define SPIM_DMA_RX_LIST_TYPE_Min (0x0UL)
  #define SPIM_DMA_RX_LIST_TYPE_Max (0x1UL)
  #define SPIM_DMA_RX_LIST_TYPE_Disabled (0x0UL)
  #define SPIM_DMA_RX_LIST_TYPE_ArrayList (0x1UL)


/* SPIM_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* SPIM_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define SPIM_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define SPIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define SPIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << SPIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct SPIM_DMA_TX ==================================================== */
/**
  * @brief TX [SPIM_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  LIST;
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_SPIM_DMA_TX_Type;

/* SPIM_DMA_TX_PTR: RAM buffer start address */
  #define SPIM_DMA_TX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define SPIM_DMA_TX_PTR_PTR_Pos (0UL)
  #define SPIM_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << SPIM_DMA_TX_PTR_PTR_Pos)


/* SPIM_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define SPIM_DMA_TX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define SPIM_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)
  #define SPIM_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIM_DMA_TX_MAXCNT_MAXCNT_Pos)
  #define SPIM_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define SPIM_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* SPIM_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define SPIM_DMA_TX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define SPIM_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)
  #define SPIM_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIM_DMA_TX_AMOUNT_AMOUNT_Pos)
  #define SPIM_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define SPIM_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* SPIM_DMA_TX_LIST: EasyDMA list type */
  #define SPIM_DMA_TX_LIST_ResetValue (0x00000000UL)

/* TYPE @Bits 0..2 : List type */
  #define SPIM_DMA_TX_LIST_TYPE_Pos (0UL)
  #define SPIM_DMA_TX_LIST_TYPE_Msk (0x7UL << SPIM_DMA_TX_LIST_TYPE_Pos)
  #define SPIM_DMA_TX_LIST_TYPE_Min (0x0UL)
  #define SPIM_DMA_TX_LIST_TYPE_Max (0x1UL)
  #define SPIM_DMA_TX_LIST_TYPE_Disabled (0x0UL)
  #define SPIM_DMA_TX_LIST_TYPE_ArrayList (0x1UL)


/* SPIM_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* SPIM_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define SPIM_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define SPIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define SPIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << SPIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct SPIM_DMA ===================================================== */
/**
  * @brief DMA [SPIM_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_SPIM_DMA_RX_Type RX;
  __IOM NRF_SPIM_DMA_TX_Type TX;
} NRF_SPIM_DMA_Type;

/* ======================================================= Struct SPIM ======================================================= */
/**
  * @brief Serial Peripheral Interface Master with EasyDMA
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED;
    __OM uint32_t TASKS_SUSPEND;
    __OM uint32_t TASKS_RESUME;
    __IM uint32_t RESERVED1[5];
    __OM NRF_SPIM_TASKS_DMA_Type TASKS_DMA;
    __IM uint32_t RESERVED2[12];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED3;
    __IOM uint32_t SUBSCRIBE_SUSPEND;
    __IOM uint32_t SUBSCRIBE_RESUME;
    __IM uint32_t RESERVED4[5];
    __IOM NRF_SPIM_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA;
    __IM uint32_t RESERVED5[12];
    __IOM uint32_t EVENTS_STARTED;
    __IOM uint32_t EVENTS_STOPPED;
    __IOM uint32_t EVENTS_END;
    __IM uint32_t RESERVED6[16];
    __IOM NRF_SPIM_EVENTS_DMA_Type EVENTS_DMA;
    __IM uint32_t RESERVED7[3];
    __IOM uint32_t PUBLISH_STARTED;
    __IOM uint32_t PUBLISH_STOPPED;
    __IOM uint32_t PUBLISH_END;
    __IM uint32_t RESERVED8[16];
    __IOM NRF_SPIM_PUBLISH_DMA_Type PUBLISH_DMA;
    __IM uint32_t RESERVED9[3];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED10[64];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED11[125];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED12[10];
    __IOM uint32_t PRESCALER;
    __IM uint32_t RESERVED13[9];
    __IOM uint32_t CONFIG;
    __IM uint32_t RESERVED14[21];
    __IOM NRF_SPIM_IFTIMING_Type IFTIMING;
    __IOM uint32_t DCXCNT;
    __IOM uint32_t CSNPOL;
    __IM uint32_t RESERVED15;
    __IOM uint32_t ORC;                              /*!< (@ 0x000005C0) Byte transmitted after TXD.MAXCNT bytes have been
                                                                         transmitted in the case when RXD.MAXCNT is greater than
                                                                         TXD.MAXCNT*/
    __IM uint32_t RESERVED16[15];
    __IOM NRF_SPIM_PSEL_Type PSEL;
    __IM uint32_t RESERVED17[59];
    __IOM NRF_SPIM_DMA_Type DMA;
  } NRF_SPIM_Type;

/* SPIM_TASKS_START: Start SPI transaction */
  #define SPIM_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start SPI transaction */
  #define SPIM_TASKS_START_TASKS_START_Pos (0UL)
  #define SPIM_TASKS_START_TASKS_START_Msk (0x1UL << SPIM_TASKS_START_TASKS_START_Pos)
  #define SPIM_TASKS_START_TASKS_START_Min (0x1UL)
  #define SPIM_TASKS_START_TASKS_START_Max (0x1UL)
  #define SPIM_TASKS_START_TASKS_START_Trigger (0x1UL)


/* SPIM_TASKS_STOP: Stop SPI transaction */
  #define SPIM_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop SPI transaction */
  #define SPIM_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define SPIM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << SPIM_TASKS_STOP_TASKS_STOP_Pos)
  #define SPIM_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define SPIM_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define SPIM_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* SPIM_TASKS_SUSPEND: Suspend SPI transaction */
  #define SPIM_TASKS_SUSPEND_ResetValue (0x00000000UL)

/* TASKS_SUSPEND @Bit 0 : Suspend SPI transaction */
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL)
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND
                                                                            field.*/
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Min (0x1UL)
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Max (0x1UL)
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (0x1UL)


/* SPIM_TASKS_RESUME: Resume SPI transaction */
  #define SPIM_TASKS_RESUME_ResetValue (0x00000000UL)

/* TASKS_RESUME @Bit 0 : Resume SPI transaction */
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Pos (0UL)
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << SPIM_TASKS_RESUME_TASKS_RESUME_Pos)
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Min (0x1UL)
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Max (0x1UL)
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Trigger (0x1UL)


/* SPIM_SUBSCRIBE_START: Subscribe configuration for task START */
  #define SPIM_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define SPIM_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define SPIM_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_START_CHIDX_Pos)
  #define SPIM_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define SPIM_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_START_EN_Pos (31UL)
  #define SPIM_SUBSCRIBE_START_EN_Msk (0x1UL << SPIM_SUBSCRIBE_START_EN_Pos)
  #define SPIM_SUBSCRIBE_START_EN_Min (0x0UL)
  #define SPIM_SUBSCRIBE_START_EN_Max (0x1UL)
  #define SPIM_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define SPIM_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* SPIM_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define SPIM_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define SPIM_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define SPIM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_STOP_CHIDX_Pos)
  #define SPIM_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define SPIM_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define SPIM_SUBSCRIBE_STOP_EN_Msk (0x1UL << SPIM_SUBSCRIBE_STOP_EN_Pos)
  #define SPIM_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define SPIM_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define SPIM_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define SPIM_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* SPIM_SUBSCRIBE_SUSPEND: Subscribe configuration for task SUSPEND */
  #define SPIM_SUBSCRIBE_SUSPEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SUSPEND will subscribe to */
  #define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL)
  #define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_SUSPEND_CHIDX_Pos)
  #define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Min (0x00UL)
  #define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Pos (31UL)
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << SPIM_SUBSCRIBE_SUSPEND_EN_Pos)
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Min (0x0UL)
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Max (0x1UL)
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Disabled (0x0UL)
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Enabled (0x1UL)


/* SPIM_SUBSCRIBE_RESUME: Subscribe configuration for task RESUME */
  #define SPIM_SUBSCRIBE_RESUME_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RESUME will subscribe to */
  #define SPIM_SUBSCRIBE_RESUME_CHIDX_Pos (0UL)
  #define SPIM_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_RESUME_CHIDX_Pos)
  #define SPIM_SUBSCRIBE_RESUME_CHIDX_Min (0x00UL)
  #define SPIM_SUBSCRIBE_RESUME_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_RESUME_EN_Pos (31UL)
  #define SPIM_SUBSCRIBE_RESUME_EN_Msk (0x1UL << SPIM_SUBSCRIBE_RESUME_EN_Pos)
  #define SPIM_SUBSCRIBE_RESUME_EN_Min (0x0UL)
  #define SPIM_SUBSCRIBE_RESUME_EN_Max (0x1UL)
  #define SPIM_SUBSCRIBE_RESUME_EN_Disabled (0x0UL)
  #define SPIM_SUBSCRIBE_RESUME_EN_Enabled (0x1UL)


/* SPIM_EVENTS_STARTED: SPI transaction has started */
  #define SPIM_EVENTS_STARTED_ResetValue (0x00000000UL)

/* EVENTS_STARTED @Bit 0 : SPI transaction has started */
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL)
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << SPIM_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_STARTED field.*/
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Min (0x0UL)
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Max (0x1UL)
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0x0UL)
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Generated (0x1UL)


/* SPIM_EVENTS_STOPPED: SPI transaction has stopped */
  #define SPIM_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : SPI transaction has stopped */
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* SPIM_EVENTS_END: End of RXD buffer and TXD buffer reached */
  #define SPIM_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : End of RXD buffer and TXD buffer reached */
  #define SPIM_EVENTS_END_EVENTS_END_Pos (0UL)
  #define SPIM_EVENTS_END_EVENTS_END_Msk (0x1UL << SPIM_EVENTS_END_EVENTS_END_Pos)
  #define SPIM_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define SPIM_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define SPIM_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define SPIM_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* SPIM_PUBLISH_STARTED: Publish configuration for event STARTED */
  #define SPIM_PUBLISH_STARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STARTED will publish to */
  #define SPIM_PUBLISH_STARTED_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_STARTED_CHIDX_Pos)
  #define SPIM_PUBLISH_STARTED_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_STARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_STARTED_EN_Pos (31UL)
  #define SPIM_PUBLISH_STARTED_EN_Msk (0x1UL << SPIM_PUBLISH_STARTED_EN_Pos)
  #define SPIM_PUBLISH_STARTED_EN_Min (0x0UL)
  #define SPIM_PUBLISH_STARTED_EN_Max (0x1UL)
  #define SPIM_PUBLISH_STARTED_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_STARTED_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define SPIM_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define SPIM_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_STOPPED_CHIDX_Pos)
  #define SPIM_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_STOPPED_EN_Pos (31UL)
  #define SPIM_PUBLISH_STOPPED_EN_Msk (0x1UL << SPIM_PUBLISH_STOPPED_EN_Pos)
  #define SPIM_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define SPIM_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define SPIM_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_END: Publish configuration for event END */
  #define SPIM_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIM_PUBLISH_END_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_END_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_END_CHIDX_Pos)
  #define SPIM_PUBLISH_END_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_END_EN_Pos (31UL)
  #define SPIM_PUBLISH_END_EN_Msk (0x1UL << SPIM_PUBLISH_END_EN_Pos)
  #define SPIM_PUBLISH_END_EN_Min (0x0UL)
  #define SPIM_PUBLISH_END_EN_Max (0x1UL)
  #define SPIM_PUBLISH_END_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_END_EN_Enabled (0x1UL)


/* SPIM_SHORTS: Shortcuts between local events and tasks */
  #define SPIM_SHORTS_ResetValue (0x00000000UL)

/* END_START @Bit 17 : Shortcut between event END and task START */
  #define SPIM_SHORTS_END_START_Pos (17UL)
  #define SPIM_SHORTS_END_START_Msk (0x1UL << SPIM_SHORTS_END_START_Pos)
  #define SPIM_SHORTS_END_START_Min (0x0UL)
  #define SPIM_SHORTS_END_START_Max (0x1UL)
  #define SPIM_SHORTS_END_START_Disabled (0x0UL)
  #define SPIM_SHORTS_END_START_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL)
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL)
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL)
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL)
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[0] and task DMA.RX.DISABLEMATCH[0] */
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL)
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[1] and task DMA.RX.DISABLEMATCH[1] */
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL)
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[2] and task DMA.RX.DISABLEMATCH[2] */
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL)
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[3] and task DMA.RX.DISABLEMATCH[3] */
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL)
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL)


/* SPIM_INTENSET: Enable interrupt */
  #define SPIM_INTENSET_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to enable interrupt for event STARTED */
  #define SPIM_INTENSET_STARTED_Pos (0UL)
  #define SPIM_INTENSET_STARTED_Msk (0x1UL << SPIM_INTENSET_STARTED_Pos)
  #define SPIM_INTENSET_STARTED_Min (0x0UL)
  #define SPIM_INTENSET_STARTED_Max (0x1UL)
  #define SPIM_INTENSET_STARTED_Set (0x1UL)
  #define SPIM_INTENSET_STARTED_Disabled (0x0UL)
  #define SPIM_INTENSET_STARTED_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define SPIM_INTENSET_STOPPED_Pos (1UL)
  #define SPIM_INTENSET_STOPPED_Msk (0x1UL << SPIM_INTENSET_STOPPED_Pos)
  #define SPIM_INTENSET_STOPPED_Min (0x0UL)
  #define SPIM_INTENSET_STOPPED_Max (0x1UL)
  #define SPIM_INTENSET_STOPPED_Set (0x1UL)
  #define SPIM_INTENSET_STOPPED_Disabled (0x0UL)
  #define SPIM_INTENSET_STOPPED_Enabled (0x1UL)

/* END @Bit 2 : Write '1' to enable interrupt for event END */
  #define SPIM_INTENSET_END_Pos (2UL)
  #define SPIM_INTENSET_END_Msk (0x1UL << SPIM_INTENSET_END_Pos)
  #define SPIM_INTENSET_END_Min (0x0UL)
  #define SPIM_INTENSET_END_Max (0x1UL)
  #define SPIM_INTENSET_END_Set (0x1UL)
  #define SPIM_INTENSET_END_Disabled (0x0UL)
  #define SPIM_INTENSET_END_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define SPIM_INTENSET_DMARXEND_Pos (19UL)
  #define SPIM_INTENSET_DMARXEND_Msk (0x1UL << SPIM_INTENSET_DMARXEND_Pos)
  #define SPIM_INTENSET_DMARXEND_Min (0x0UL)
  #define SPIM_INTENSET_DMARXEND_Max (0x1UL)
  #define SPIM_INTENSET_DMARXEND_Set (0x1UL)
  #define SPIM_INTENSET_DMARXEND_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define SPIM_INTENSET_DMARXREADY_Pos (20UL)
  #define SPIM_INTENSET_DMARXREADY_Msk (0x1UL << SPIM_INTENSET_DMARXREADY_Pos)
  #define SPIM_INTENSET_DMARXREADY_Min (0x0UL)
  #define SPIM_INTENSET_DMARXREADY_Max (0x1UL)
  #define SPIM_INTENSET_DMARXREADY_Set (0x1UL)
  #define SPIM_INTENSET_DMARXREADY_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define SPIM_INTENSET_DMARXBUSERROR_Pos (21UL)
  #define SPIM_INTENSET_DMARXBUSERROR_Msk (0x1UL << SPIM_INTENSET_DMARXBUSERROR_Pos)
  #define SPIM_INTENSET_DMARXBUSERROR_Min (0x0UL)
  #define SPIM_INTENSET_DMARXBUSERROR_Max (0x1UL)
  #define SPIM_INTENSET_DMARXBUSERROR_Set (0x1UL)
  #define SPIM_INTENSET_DMARXBUSERROR_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define SPIM_INTENSET_DMARXMATCH0_Pos (22UL)
  #define SPIM_INTENSET_DMARXMATCH0_Msk (0x1UL << SPIM_INTENSET_DMARXMATCH0_Pos)
  #define SPIM_INTENSET_DMARXMATCH0_Min (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH0_Max (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH0_Set (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH0_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define SPIM_INTENSET_DMARXMATCH1_Pos (23UL)
  #define SPIM_INTENSET_DMARXMATCH1_Msk (0x1UL << SPIM_INTENSET_DMARXMATCH1_Pos)
  #define SPIM_INTENSET_DMARXMATCH1_Min (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH1_Max (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH1_Set (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH1_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define SPIM_INTENSET_DMARXMATCH2_Pos (24UL)
  #define SPIM_INTENSET_DMARXMATCH2_Msk (0x1UL << SPIM_INTENSET_DMARXMATCH2_Pos)
  #define SPIM_INTENSET_DMARXMATCH2_Min (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH2_Max (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH2_Set (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH2_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define SPIM_INTENSET_DMARXMATCH3_Pos (25UL)
  #define SPIM_INTENSET_DMARXMATCH3_Msk (0x1UL << SPIM_INTENSET_DMARXMATCH3_Pos)
  #define SPIM_INTENSET_DMARXMATCH3_Min (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH3_Max (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH3_Set (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH3_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define SPIM_INTENSET_DMATXEND_Pos (26UL)
  #define SPIM_INTENSET_DMATXEND_Msk (0x1UL << SPIM_INTENSET_DMATXEND_Pos)
  #define SPIM_INTENSET_DMATXEND_Min (0x0UL)
  #define SPIM_INTENSET_DMATXEND_Max (0x1UL)
  #define SPIM_INTENSET_DMATXEND_Set (0x1UL)
  #define SPIM_INTENSET_DMATXEND_Disabled (0x0UL)
  #define SPIM_INTENSET_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define SPIM_INTENSET_DMATXREADY_Pos (27UL)
  #define SPIM_INTENSET_DMATXREADY_Msk (0x1UL << SPIM_INTENSET_DMATXREADY_Pos)
  #define SPIM_INTENSET_DMATXREADY_Min (0x0UL)
  #define SPIM_INTENSET_DMATXREADY_Max (0x1UL)
  #define SPIM_INTENSET_DMATXREADY_Set (0x1UL)
  #define SPIM_INTENSET_DMATXREADY_Disabled (0x0UL)
  #define SPIM_INTENSET_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define SPIM_INTENSET_DMATXBUSERROR_Pos (28UL)
  #define SPIM_INTENSET_DMATXBUSERROR_Msk (0x1UL << SPIM_INTENSET_DMATXBUSERROR_Pos)
  #define SPIM_INTENSET_DMATXBUSERROR_Min (0x0UL)
  #define SPIM_INTENSET_DMATXBUSERROR_Max (0x1UL)
  #define SPIM_INTENSET_DMATXBUSERROR_Set (0x1UL)
  #define SPIM_INTENSET_DMATXBUSERROR_Disabled (0x0UL)
  #define SPIM_INTENSET_DMATXBUSERROR_Enabled (0x1UL)


/* SPIM_INTENCLR: Disable interrupt */
  #define SPIM_INTENCLR_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to disable interrupt for event STARTED */
  #define SPIM_INTENCLR_STARTED_Pos (0UL)
  #define SPIM_INTENCLR_STARTED_Msk (0x1UL << SPIM_INTENCLR_STARTED_Pos)
  #define SPIM_INTENCLR_STARTED_Min (0x0UL)
  #define SPIM_INTENCLR_STARTED_Max (0x1UL)
  #define SPIM_INTENCLR_STARTED_Clear (0x1UL)
  #define SPIM_INTENCLR_STARTED_Disabled (0x0UL)
  #define SPIM_INTENCLR_STARTED_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define SPIM_INTENCLR_STOPPED_Pos (1UL)
  #define SPIM_INTENCLR_STOPPED_Msk (0x1UL << SPIM_INTENCLR_STOPPED_Pos)
  #define SPIM_INTENCLR_STOPPED_Min (0x0UL)
  #define SPIM_INTENCLR_STOPPED_Max (0x1UL)
  #define SPIM_INTENCLR_STOPPED_Clear (0x1UL)
  #define SPIM_INTENCLR_STOPPED_Disabled (0x0UL)
  #define SPIM_INTENCLR_STOPPED_Enabled (0x1UL)

/* END @Bit 2 : Write '1' to disable interrupt for event END */
  #define SPIM_INTENCLR_END_Pos (2UL)
  #define SPIM_INTENCLR_END_Msk (0x1UL << SPIM_INTENCLR_END_Pos)
  #define SPIM_INTENCLR_END_Min (0x0UL)
  #define SPIM_INTENCLR_END_Max (0x1UL)
  #define SPIM_INTENCLR_END_Clear (0x1UL)
  #define SPIM_INTENCLR_END_Disabled (0x0UL)
  #define SPIM_INTENCLR_END_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define SPIM_INTENCLR_DMARXEND_Pos (19UL)
  #define SPIM_INTENCLR_DMARXEND_Msk (0x1UL << SPIM_INTENCLR_DMARXEND_Pos)
  #define SPIM_INTENCLR_DMARXEND_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXEND_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXEND_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXEND_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define SPIM_INTENCLR_DMARXREADY_Pos (20UL)
  #define SPIM_INTENCLR_DMARXREADY_Msk (0x1UL << SPIM_INTENCLR_DMARXREADY_Pos)
  #define SPIM_INTENCLR_DMARXREADY_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXREADY_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXREADY_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXREADY_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define SPIM_INTENCLR_DMARXBUSERROR_Pos (21UL)
  #define SPIM_INTENCLR_DMARXBUSERROR_Msk (0x1UL << SPIM_INTENCLR_DMARXBUSERROR_Pos)
  #define SPIM_INTENCLR_DMARXBUSERROR_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXBUSERROR_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXBUSERROR_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXBUSERROR_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define SPIM_INTENCLR_DMARXMATCH0_Pos (22UL)
  #define SPIM_INTENCLR_DMARXMATCH0_Msk (0x1UL << SPIM_INTENCLR_DMARXMATCH0_Pos)
  #define SPIM_INTENCLR_DMARXMATCH0_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH0_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH0_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH0_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define SPIM_INTENCLR_DMARXMATCH1_Pos (23UL)
  #define SPIM_INTENCLR_DMARXMATCH1_Msk (0x1UL << SPIM_INTENCLR_DMARXMATCH1_Pos)
  #define SPIM_INTENCLR_DMARXMATCH1_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH1_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH1_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH1_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define SPIM_INTENCLR_DMARXMATCH2_Pos (24UL)
  #define SPIM_INTENCLR_DMARXMATCH2_Msk (0x1UL << SPIM_INTENCLR_DMARXMATCH2_Pos)
  #define SPIM_INTENCLR_DMARXMATCH2_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH2_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH2_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH2_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define SPIM_INTENCLR_DMARXMATCH3_Pos (25UL)
  #define SPIM_INTENCLR_DMARXMATCH3_Msk (0x1UL << SPIM_INTENCLR_DMARXMATCH3_Pos)
  #define SPIM_INTENCLR_DMARXMATCH3_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH3_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH3_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH3_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define SPIM_INTENCLR_DMATXEND_Pos (26UL)
  #define SPIM_INTENCLR_DMATXEND_Msk (0x1UL << SPIM_INTENCLR_DMATXEND_Pos)
  #define SPIM_INTENCLR_DMATXEND_Min (0x0UL)
  #define SPIM_INTENCLR_DMATXEND_Max (0x1UL)
  #define SPIM_INTENCLR_DMATXEND_Clear (0x1UL)
  #define SPIM_INTENCLR_DMATXEND_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define SPIM_INTENCLR_DMATXREADY_Pos (27UL)
  #define SPIM_INTENCLR_DMATXREADY_Msk (0x1UL << SPIM_INTENCLR_DMATXREADY_Pos)
  #define SPIM_INTENCLR_DMATXREADY_Min (0x0UL)
  #define SPIM_INTENCLR_DMATXREADY_Max (0x1UL)
  #define SPIM_INTENCLR_DMATXREADY_Clear (0x1UL)
  #define SPIM_INTENCLR_DMATXREADY_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define SPIM_INTENCLR_DMATXBUSERROR_Pos (28UL)
  #define SPIM_INTENCLR_DMATXBUSERROR_Msk (0x1UL << SPIM_INTENCLR_DMATXBUSERROR_Pos)
  #define SPIM_INTENCLR_DMATXBUSERROR_Min (0x0UL)
  #define SPIM_INTENCLR_DMATXBUSERROR_Max (0x1UL)
  #define SPIM_INTENCLR_DMATXBUSERROR_Clear (0x1UL)
  #define SPIM_INTENCLR_DMATXBUSERROR_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMATXBUSERROR_Enabled (0x1UL)


/* SPIM_ENABLE: Enable SPIM */
  #define SPIM_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..3 : Enable or disable SPIM */
  #define SPIM_ENABLE_ENABLE_Pos (0UL)
  #define SPIM_ENABLE_ENABLE_Msk (0xFUL << SPIM_ENABLE_ENABLE_Pos)
  #define SPIM_ENABLE_ENABLE_Min (0x0UL)
  #define SPIM_ENABLE_ENABLE_Max (0x7UL)
  #define SPIM_ENABLE_ENABLE_Disabled (0x0UL)
  #define SPIM_ENABLE_ENABLE_Enabled (0x7UL)


/* SPIM_PRESCALER: The prescaler is used to set the SPI frequency. */
  #define SPIM_PRESCALER_ResetValue (0x00000040UL)

/* DIVISOR @Bits 0..6 : Core clock to SCK divisor */
  #define SPIM_PRESCALER_DIVISOR_Pos (0UL)
  #define SPIM_PRESCALER_DIVISOR_Msk (0x7FUL << SPIM_PRESCALER_DIVISOR_Pos)
  #define SPIM_PRESCALER_DIVISOR_Min (0x02UL)
  #define SPIM_PRESCALER_DIVISOR_Max (0x7EUL)


/* SPIM_CONFIG: Configuration register */
  #define SPIM_CONFIG_ResetValue (0x00000000UL)

/* ORDER @Bit 0 : Bit order */
  #define SPIM_CONFIG_ORDER_Pos (0UL)
  #define SPIM_CONFIG_ORDER_Msk (0x1UL << SPIM_CONFIG_ORDER_Pos)
  #define SPIM_CONFIG_ORDER_Min (0x0UL)
  #define SPIM_CONFIG_ORDER_Max (0x1UL)
  #define SPIM_CONFIG_ORDER_MsbFirst (0x0UL)
  #define SPIM_CONFIG_ORDER_LsbFirst (0x1UL)

/* CPHA @Bit 1 : Serial clock (SCK) phase */
  #define SPIM_CONFIG_CPHA_Pos (1UL)
  #define SPIM_CONFIG_CPHA_Msk (0x1UL << SPIM_CONFIG_CPHA_Pos)
  #define SPIM_CONFIG_CPHA_Min (0x0UL)
  #define SPIM_CONFIG_CPHA_Max (0x1UL)
  #define SPIM_CONFIG_CPHA_Leading (0x0UL)
  #define SPIM_CONFIG_CPHA_Trailing (0x1UL)

/* CPOL @Bit 2 : Serial clock (SCK) polarity */
  #define SPIM_CONFIG_CPOL_Pos (2UL)
  #define SPIM_CONFIG_CPOL_Msk (0x1UL << SPIM_CONFIG_CPOL_Pos)
  #define SPIM_CONFIG_CPOL_Min (0x0UL)
  #define SPIM_CONFIG_CPOL_Max (0x1UL)
  #define SPIM_CONFIG_CPOL_ActiveHigh (0x0UL)
  #define SPIM_CONFIG_CPOL_ActiveLow (0x1UL)


/* SPIM_DCXCNT: DCX configuration */
  #define SPIM_DCXCNT_ResetValue (0x00000000UL)

/* DCXCNT @Bits 0..3 : This register specifies the number of command bytes preceding the data bytes. The PSEL.DCX line will be
                       low during transmission of command bytes and high during transmission of data bytes. Value 0xF indicates
                       that all bytes are command bytes. */

  #define SPIM_DCXCNT_DCXCNT_Pos (0UL)
  #define SPIM_DCXCNT_DCXCNT_Msk (0xFUL << SPIM_DCXCNT_DCXCNT_Pos)
  #define SPIM_DCXCNT_DCXCNT_Min (0x0UL)
  #define SPIM_DCXCNT_DCXCNT_Max (0xFUL)


/* SPIM_CSNPOL: Polarity of CSN output */
  #define SPIM_CSNPOL_ResetValue (0x00000000UL)

/* CSNPOL0 @Bit 0 : Polarity of CSN output */
  #define SPIM_CSNPOL_CSNPOL0_Pos (0UL)
  #define SPIM_CSNPOL_CSNPOL0_Msk (0x1UL << SPIM_CSNPOL_CSNPOL0_Pos)
  #define SPIM_CSNPOL_CSNPOL0_Min (0x0UL)
  #define SPIM_CSNPOL_CSNPOL0_Max (0x1UL)
  #define SPIM_CSNPOL_CSNPOL0_LOW (0x0UL)
  #define SPIM_CSNPOL_CSNPOL0_HIGH (0x1UL)


/* SPIM_ORC: Byte transmitted after TXD.MAXCNT bytes have been transmitted in the case when RXD.MAXCNT is greater than
              TXD.MAXCNT */

  #define SPIM_ORC_ResetValue (0x00000000UL)

/* ORC @Bits 0..7 : Byte transmitted after TXD.MAXCNT bytes have been transmitted in the case when RXD.MAXCNT is greater than
                    TXD.MAXCNT. */

  #define SPIM_ORC_ORC_Pos (0UL)
  #define SPIM_ORC_ORC_Msk (0xFFUL << SPIM_ORC_ORC_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           SPIS                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct SPIS_TASKS_DMA_RX ================================================= */
/**
  * @brief RX [SPIS_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000000) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000010) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_SPIS_TASKS_DMA_RX_Type;

/* SPIS_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL)
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL)
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL)
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL)


/* SPIS_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL)
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL)
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL)
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL)



/* ================================================== Struct SPIS_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [SPIS_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __OM  NRF_SPIS_TASKS_DMA_RX_Type RX;
} NRF_SPIS_TASKS_DMA_Type;


/* ============================================== Struct SPIS_SUBSCRIBE_DMA_RX =============================================== */
/**
  * @brief RX [SPIS_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  ENABLEMATCH[4];
  __IOM uint32_t  DISABLEMATCH[4];
} NRF_SPIS_SUBSCRIBE_DMA_RX_Type;

/* SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL)


/* SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL)



/* ================================================ Struct SPIS_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [SPIS_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IOM NRF_SPIS_SUBSCRIBE_DMA_RX_Type RX;
} NRF_SPIS_SUBSCRIBE_DMA_Type;


/* ================================================ Struct SPIS_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [SPIS_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_SPIS_EVENTS_DMA_RX_Type;

/* SPIS_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define SPIS_EVENTS_DMA_RX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define SPIS_EVENTS_DMA_RX_END_END_Pos (0UL)
  #define SPIS_EVENTS_DMA_RX_END_END_Msk (0x1UL << SPIS_EVENTS_DMA_RX_END_END_Pos)
  #define SPIS_EVENTS_DMA_RX_END_END_Min (0x0UL)
  #define SPIS_EVENTS_DMA_RX_END_END_Max (0x1UL)
  #define SPIS_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_RX_END_END_Generated (0x1UL)


/* SPIS_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define SPIS_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define SPIS_EVENTS_DMA_RX_READY_READY_Pos (0UL)
  #define SPIS_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << SPIS_EVENTS_DMA_RX_READY_READY_Pos)
  #define SPIS_EVENTS_DMA_RX_READY_READY_Min (0x0UL)
  #define SPIS_EVENTS_DMA_RX_READY_READY_Max (0x1UL)
  #define SPIS_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_RX_READY_READY_Generated (0x1UL)


/* SPIS_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define SPIS_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL)
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL)
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL)
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL)


/* SPIS_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define SPIS_EVENTS_DMA_RX_MATCH_MaxCount (4UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_MinIndex (0UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << SPIS_EVENTS_DMA_RX_MATCH_MATCH_Pos)
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL)



/* ================================================ Struct SPIS_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [SPIS_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
} NRF_SPIS_EVENTS_DMA_TX_Type;

/* SPIS_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define SPIS_EVENTS_DMA_TX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define SPIS_EVENTS_DMA_TX_END_END_Pos (0UL)
  #define SPIS_EVENTS_DMA_TX_END_END_Msk (0x1UL << SPIS_EVENTS_DMA_TX_END_END_Pos)
  #define SPIS_EVENTS_DMA_TX_END_END_Min (0x0UL)
  #define SPIS_EVENTS_DMA_TX_END_END_Max (0x1UL)
  #define SPIS_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_TX_END_END_Generated (0x1UL)


/* SPIS_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define SPIS_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define SPIS_EVENTS_DMA_TX_READY_READY_Pos (0UL)
  #define SPIS_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << SPIS_EVENTS_DMA_TX_READY_READY_Pos)
  #define SPIS_EVENTS_DMA_TX_READY_READY_Min (0x0UL)
  #define SPIS_EVENTS_DMA_TX_READY_READY_Max (0x1UL)
  #define SPIS_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_TX_READY_READY_Generated (0x1UL)


/* SPIS_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define SPIS_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL)
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL)
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL)
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL)



/* ================================================= Struct SPIS_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [SPIS_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_SPIS_EVENTS_DMA_RX_Type RX;
  __IOM NRF_SPIS_EVENTS_DMA_TX_Type TX;
} NRF_SPIS_EVENTS_DMA_Type;


/* =============================================== Struct SPIS_PUBLISH_DMA_RX ================================================ */
/**
  * @brief RX [SPIS_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_SPIS_PUBLISH_DMA_RX_Type;

/* SPIS_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define SPIS_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIS_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_RX_END_CHIDX_Pos)
  #define SPIS_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_RX_END_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_RX_END_EN_Pos)
  #define SPIS_PUBLISH_DMA_RX_END_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_END_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL)


/* SPIS_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define SPIS_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define SPIS_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_RX_READY_CHIDX_Pos)
  #define SPIS_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_RX_READY_EN_Pos)
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL)


/* SPIS_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Pos)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL)


/* SPIS_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define SPIS_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Pos)
  #define SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_RX_MATCH_EN_Pos)
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL)



/* =============================================== Struct SPIS_PUBLISH_DMA_TX ================================================ */
/**
  * @brief TX [SPIS_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
} NRF_SPIS_PUBLISH_DMA_TX_Type;

/* SPIS_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define SPIS_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIS_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_TX_END_CHIDX_Pos)
  #define SPIS_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_TX_END_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_TX_END_EN_Pos)
  #define SPIS_PUBLISH_DMA_TX_END_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_TX_END_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL)


/* SPIS_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define SPIS_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define SPIS_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_TX_READY_CHIDX_Pos)
  #define SPIS_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_TX_READY_EN_Pos)
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL)


/* SPIS_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Pos)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL)



/* ================================================= Struct SPIS_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [SPIS_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_SPIS_PUBLISH_DMA_RX_Type RX;
  __IOM NRF_SPIS_PUBLISH_DMA_TX_Type TX;
} NRF_SPIS_PUBLISH_DMA_Type;


/* ==================================================== Struct SPIS_PSEL ===================================================== */
/**
  * @brief PSEL [SPIS_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SCK;
  __IOM uint32_t  MISO;
  __IOM uint32_t  MOSI;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CSN;
} NRF_SPIS_PSEL_Type;

/* SPIS_PSEL_SCK: Pin select for SCK */
  #define SPIS_PSEL_SCK_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIS_PSEL_SCK_PIN_Pos (0UL)
  #define SPIS_PSEL_SCK_PIN_Msk (0x1FUL << SPIS_PSEL_SCK_PIN_Pos)
  #define SPIS_PSEL_SCK_PIN_Min (0x00UL)
  #define SPIS_PSEL_SCK_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIS_PSEL_SCK_PORT_Pos (5UL)
  #define SPIS_PSEL_SCK_PORT_Msk (0x7UL << SPIS_PSEL_SCK_PORT_Pos)
  #define SPIS_PSEL_SCK_PORT_Min (0x0UL)
  #define SPIS_PSEL_SCK_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIS_PSEL_SCK_CONNECT_Pos (31UL)
  #define SPIS_PSEL_SCK_CONNECT_Msk (0x1UL << SPIS_PSEL_SCK_CONNECT_Pos)
  #define SPIS_PSEL_SCK_CONNECT_Min (0x0UL)
  #define SPIS_PSEL_SCK_CONNECT_Max (0x1UL)
  #define SPIS_PSEL_SCK_CONNECT_Disconnected (0x1UL)
  #define SPIS_PSEL_SCK_CONNECT_Connected (0x0UL)


/* SPIS_PSEL_MISO: Pin select for SDO signal */
  #define SPIS_PSEL_MISO_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIS_PSEL_MISO_PIN_Pos (0UL)
  #define SPIS_PSEL_MISO_PIN_Msk (0x1FUL << SPIS_PSEL_MISO_PIN_Pos)
  #define SPIS_PSEL_MISO_PIN_Min (0x00UL)
  #define SPIS_PSEL_MISO_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIS_PSEL_MISO_PORT_Pos (5UL)
  #define SPIS_PSEL_MISO_PORT_Msk (0x7UL << SPIS_PSEL_MISO_PORT_Pos)
  #define SPIS_PSEL_MISO_PORT_Min (0x0UL)
  #define SPIS_PSEL_MISO_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIS_PSEL_MISO_CONNECT_Pos (31UL)
  #define SPIS_PSEL_MISO_CONNECT_Msk (0x1UL << SPIS_PSEL_MISO_CONNECT_Pos)
  #define SPIS_PSEL_MISO_CONNECT_Min (0x0UL)
  #define SPIS_PSEL_MISO_CONNECT_Max (0x1UL)
  #define SPIS_PSEL_MISO_CONNECT_Disconnected (0x1UL)
  #define SPIS_PSEL_MISO_CONNECT_Connected (0x0UL)


/* SPIS_PSEL_MOSI: Pin select for SDI signal */
  #define SPIS_PSEL_MOSI_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIS_PSEL_MOSI_PIN_Pos (0UL)
  #define SPIS_PSEL_MOSI_PIN_Msk (0x1FUL << SPIS_PSEL_MOSI_PIN_Pos)
  #define SPIS_PSEL_MOSI_PIN_Min (0x00UL)
  #define SPIS_PSEL_MOSI_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIS_PSEL_MOSI_PORT_Pos (5UL)
  #define SPIS_PSEL_MOSI_PORT_Msk (0x7UL << SPIS_PSEL_MOSI_PORT_Pos)
  #define SPIS_PSEL_MOSI_PORT_Min (0x0UL)
  #define SPIS_PSEL_MOSI_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIS_PSEL_MOSI_CONNECT_Pos (31UL)
  #define SPIS_PSEL_MOSI_CONNECT_Msk (0x1UL << SPIS_PSEL_MOSI_CONNECT_Pos)
  #define SPIS_PSEL_MOSI_CONNECT_Min (0x0UL)
  #define SPIS_PSEL_MOSI_CONNECT_Max (0x1UL)
  #define SPIS_PSEL_MOSI_CONNECT_Disconnected (0x1UL)
  #define SPIS_PSEL_MOSI_CONNECT_Connected (0x0UL)


/* SPIS_PSEL_CSN: Pin select for CSN signal */
  #define SPIS_PSEL_CSN_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIS_PSEL_CSN_PIN_Pos (0UL)
  #define SPIS_PSEL_CSN_PIN_Msk (0x1FUL << SPIS_PSEL_CSN_PIN_Pos)
  #define SPIS_PSEL_CSN_PIN_Min (0x00UL)
  #define SPIS_PSEL_CSN_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIS_PSEL_CSN_PORT_Pos (5UL)
  #define SPIS_PSEL_CSN_PORT_Msk (0x7UL << SPIS_PSEL_CSN_PORT_Pos)
  #define SPIS_PSEL_CSN_PORT_Min (0x0UL)
  #define SPIS_PSEL_CSN_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIS_PSEL_CSN_CONNECT_Pos (31UL)
  #define SPIS_PSEL_CSN_CONNECT_Msk (0x1UL << SPIS_PSEL_CSN_CONNECT_Pos)
  #define SPIS_PSEL_CSN_CONNECT_Min (0x0UL)
  #define SPIS_PSEL_CSN_CONNECT_Max (0x1UL)
  #define SPIS_PSEL_CSN_CONNECT_Disconnected (0x1UL)
  #define SPIS_PSEL_CSN_CONNECT_Connected (0x0UL)



/* ================================================ Struct SPIS_DMA_RX_MATCH ================================================= */
/**
  * @brief MATCH [SPIS_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_SPIS_DMA_RX_MATCH_Type;

/* SPIS_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define SPIS_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL)

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Pos)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL)

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Pos)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL)

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Pos)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL)

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Pos)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL)

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or sticky */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL)

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or sticky */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL)

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or sticky */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL)

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or sticky */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL)


/* SPIS_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define SPIS_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL)
  #define SPIS_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL)
  #define SPIS_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL)
  #define SPIS_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data to look for */
  #define SPIS_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL)
  #define SPIS_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFFFFFFFUL << SPIS_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/



/* =================================================== Struct SPIS_DMA_RX ==================================================== */
/**
  * @brief RX [SPIS_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_SPIS_DMA_RX_MATCH_Type MATCH;            /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_SPIS_DMA_RX_Type;

/* SPIS_DMA_RX_PTR: RAM buffer start address */
  #define SPIS_DMA_RX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define SPIS_DMA_RX_PTR_PTR_Pos (0UL)
  #define SPIS_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << SPIS_DMA_RX_PTR_PTR_Pos)


/* SPIS_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define SPIS_DMA_RX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define SPIS_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)
  #define SPIS_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIS_DMA_RX_MAXCNT_MAXCNT_Pos)
  #define SPIS_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define SPIS_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* SPIS_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define SPIS_DMA_RX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define SPIS_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)
  #define SPIS_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIS_DMA_RX_AMOUNT_AMOUNT_Pos)
  #define SPIS_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define SPIS_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* SPIS_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* SPIS_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define SPIS_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define SPIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define SPIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << SPIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct SPIS_DMA_TX ==================================================== */
/**
  * @brief TX [SPIS_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_SPIS_DMA_TX_Type;

/* SPIS_DMA_TX_PTR: RAM buffer start address */
  #define SPIS_DMA_TX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define SPIS_DMA_TX_PTR_PTR_Pos (0UL)
  #define SPIS_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << SPIS_DMA_TX_PTR_PTR_Pos)


/* SPIS_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define SPIS_DMA_TX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define SPIS_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)
  #define SPIS_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIS_DMA_TX_MAXCNT_MAXCNT_Pos)
  #define SPIS_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define SPIS_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* SPIS_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define SPIS_DMA_TX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define SPIS_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)
  #define SPIS_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIS_DMA_TX_AMOUNT_AMOUNT_Pos)
  #define SPIS_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define SPIS_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* SPIS_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* SPIS_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define SPIS_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define SPIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define SPIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << SPIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct SPIS_DMA ===================================================== */
/**
  * @brief DMA [SPIS_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_SPIS_DMA_RX_Type RX;
  __IOM NRF_SPIS_DMA_TX_Type TX;
} NRF_SPIS_DMA_Type;

/* ======================================================= Struct SPIS ======================================================= */
/**
  * @brief SPI Slave
  */
  typedef struct {
    __IM uint32_t RESERVED[5];
    __OM uint32_t TASKS_ACQUIRE;
    __OM uint32_t TASKS_RELEASE;                     /*!< (@ 0x00000018) Release SPI semaphore, enabling the SPI slave to
                                                                         acquire it*/
    __IM uint32_t RESERVED1[3];
    __OM NRF_SPIS_TASKS_DMA_Type TASKS_DMA;
    __IM uint32_t RESERVED2[17];
    __IOM uint32_t SUBSCRIBE_ACQUIRE;
    __IOM uint32_t SUBSCRIBE_RELEASE;
    __IM uint32_t RESERVED3[3];
    __IOM NRF_SPIS_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA;
    __IM uint32_t RESERVED4[13];
    __IOM uint32_t EVENTS_END;
    __IM uint32_t RESERVED5[4];
    __IOM uint32_t EVENTS_ACQUIRED;
    __IM uint32_t RESERVED6[12];
    __IOM NRF_SPIS_EVENTS_DMA_Type EVENTS_DMA;
    __IM uint32_t RESERVED7[4];
    __IOM uint32_t PUBLISH_END;
    __IM uint32_t RESERVED8[4];
    __IOM uint32_t PUBLISH_ACQUIRED;
    __IM uint32_t RESERVED9[12];
    __IOM NRF_SPIS_PUBLISH_DMA_Type PUBLISH_DMA;
    __IM uint32_t RESERVED10[3];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED11[64];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED12[61];
    __IM uint32_t SEMSTAT;
    __IM uint32_t RESERVED13[15];
    __IOM uint32_t STATUS;
    __IM uint32_t RESERVED14[47];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED15[20];
    __IOM uint32_t CONFIG;
    __IM uint32_t RESERVED16;
    __IOM uint32_t DEF;                              /*!< (@ 0x0000055C) Default character. Character clocked out in case of an
                                                                         ignored transaction.*/
    __IM uint32_t RESERVED17[24];
    __IOM uint32_t ORC;
    __IM uint32_t RESERVED18[15];
    __IOM NRF_SPIS_PSEL_Type PSEL;
    __IM uint32_t RESERVED19[59];
    __IOM NRF_SPIS_DMA_Type DMA;
  } NRF_SPIS_Type;

/* SPIS_TASKS_ACQUIRE: Acquire SPI semaphore */
  #define SPIS_TASKS_ACQUIRE_ResetValue (0x00000000UL)

/* TASKS_ACQUIRE @Bit 0 : Acquire SPI semaphore */
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Pos (0UL)
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Msk (0x1UL << SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Pos) /*!< Bit mask of TASKS_ACQUIRE
                                                                            field.*/
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Min (0x1UL)
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Max (0x1UL)
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Trigger (0x1UL)


/* SPIS_TASKS_RELEASE: Release SPI semaphore, enabling the SPI slave to acquire it */
  #define SPIS_TASKS_RELEASE_ResetValue (0x00000000UL)

/* TASKS_RELEASE @Bit 0 : Release SPI semaphore, enabling the SPI slave to acquire it */
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Pos (0UL)
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Msk (0x1UL << SPIS_TASKS_RELEASE_TASKS_RELEASE_Pos) /*!< Bit mask of TASKS_RELEASE
                                                                            field.*/
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Min (0x1UL)
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Max (0x1UL)
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Trigger (0x1UL)


/* SPIS_SUBSCRIBE_ACQUIRE: Subscribe configuration for task ACQUIRE */
  #define SPIS_SUBSCRIBE_ACQUIRE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ACQUIRE will subscribe to */
  #define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Pos (0UL)
  #define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Pos)
  #define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Min (0x00UL)
  #define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Pos (31UL)
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Msk (0x1UL << SPIS_SUBSCRIBE_ACQUIRE_EN_Pos)
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Min (0x0UL)
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Max (0x1UL)
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Disabled (0x0UL)
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Enabled (0x1UL)


/* SPIS_SUBSCRIBE_RELEASE: Subscribe configuration for task RELEASE */
  #define SPIS_SUBSCRIBE_RELEASE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RELEASE will subscribe to */
  #define SPIS_SUBSCRIBE_RELEASE_CHIDX_Pos (0UL)
  #define SPIS_SUBSCRIBE_RELEASE_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_RELEASE_CHIDX_Pos)
  #define SPIS_SUBSCRIBE_RELEASE_CHIDX_Min (0x00UL)
  #define SPIS_SUBSCRIBE_RELEASE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_SUBSCRIBE_RELEASE_EN_Pos (31UL)
  #define SPIS_SUBSCRIBE_RELEASE_EN_Msk (0x1UL << SPIS_SUBSCRIBE_RELEASE_EN_Pos)
  #define SPIS_SUBSCRIBE_RELEASE_EN_Min (0x0UL)
  #define SPIS_SUBSCRIBE_RELEASE_EN_Max (0x1UL)
  #define SPIS_SUBSCRIBE_RELEASE_EN_Disabled (0x0UL)
  #define SPIS_SUBSCRIBE_RELEASE_EN_Enabled (0x1UL)


/* SPIS_EVENTS_END: Granted transaction completed */
  #define SPIS_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : Granted transaction completed */
  #define SPIS_EVENTS_END_EVENTS_END_Pos (0UL)
  #define SPIS_EVENTS_END_EVENTS_END_Msk (0x1UL << SPIS_EVENTS_END_EVENTS_END_Pos)
  #define SPIS_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define SPIS_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define SPIS_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define SPIS_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* SPIS_EVENTS_ACQUIRED: Semaphore acquired */
  #define SPIS_EVENTS_ACQUIRED_ResetValue (0x00000000UL)

/* EVENTS_ACQUIRED @Bit 0 : Semaphore acquired */
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Pos (0UL)
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Msk (0x1UL << SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Pos) /*!< Bit mask of
                                                                            EVENTS_ACQUIRED field.*/
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Min (0x0UL)
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Max (0x1UL)
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_NotGenerated (0x0UL)
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Generated (0x1UL)


/* SPIS_PUBLISH_END: Publish configuration for event END */
  #define SPIS_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIS_PUBLISH_END_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_END_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_END_CHIDX_Pos)
  #define SPIS_PUBLISH_END_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_END_EN_Pos (31UL)
  #define SPIS_PUBLISH_END_EN_Msk (0x1UL << SPIS_PUBLISH_END_EN_Pos)
  #define SPIS_PUBLISH_END_EN_Min (0x0UL)
  #define SPIS_PUBLISH_END_EN_Max (0x1UL)
  #define SPIS_PUBLISH_END_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_END_EN_Enabled (0x1UL)


/* SPIS_PUBLISH_ACQUIRED: Publish configuration for event ACQUIRED */
  #define SPIS_PUBLISH_ACQUIRED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ACQUIRED will publish to */
  #define SPIS_PUBLISH_ACQUIRED_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_ACQUIRED_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_ACQUIRED_CHIDX_Pos)
  #define SPIS_PUBLISH_ACQUIRED_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_ACQUIRED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_ACQUIRED_EN_Pos (31UL)
  #define SPIS_PUBLISH_ACQUIRED_EN_Msk (0x1UL << SPIS_PUBLISH_ACQUIRED_EN_Pos)
  #define SPIS_PUBLISH_ACQUIRED_EN_Min (0x0UL)
  #define SPIS_PUBLISH_ACQUIRED_EN_Max (0x1UL)
  #define SPIS_PUBLISH_ACQUIRED_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_ACQUIRED_EN_Enabled (0x1UL)


/* SPIS_SHORTS: Shortcuts between local events and tasks */
  #define SPIS_SHORTS_ResetValue (0x00000000UL)

/* END_ACQUIRE @Bit 2 : Shortcut between event END and task ACQUIRE */
  #define SPIS_SHORTS_END_ACQUIRE_Pos (2UL)
  #define SPIS_SHORTS_END_ACQUIRE_Msk (0x1UL << SPIS_SHORTS_END_ACQUIRE_Pos)
  #define SPIS_SHORTS_END_ACQUIRE_Min (0x0UL)
  #define SPIS_SHORTS_END_ACQUIRE_Max (0x1UL)
  #define SPIS_SHORTS_END_ACQUIRE_Disabled (0x0UL)
  #define SPIS_SHORTS_END_ACQUIRE_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL)
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL)
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL)
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL)
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL)
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL)
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL)
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL)
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL)


/* SPIS_INTENSET: Enable interrupt */
  #define SPIS_INTENSET_ResetValue (0x00000000UL)

/* END @Bit 1 : Write '1' to enable interrupt for event END */
  #define SPIS_INTENSET_END_Pos (1UL)
  #define SPIS_INTENSET_END_Msk (0x1UL << SPIS_INTENSET_END_Pos)
  #define SPIS_INTENSET_END_Min (0x0UL)
  #define SPIS_INTENSET_END_Max (0x1UL)
  #define SPIS_INTENSET_END_Set (0x1UL)
  #define SPIS_INTENSET_END_Disabled (0x0UL)
  #define SPIS_INTENSET_END_Enabled (0x1UL)

/* ACQUIRED @Bit 6 : Write '1' to enable interrupt for event ACQUIRED */
  #define SPIS_INTENSET_ACQUIRED_Pos (6UL)
  #define SPIS_INTENSET_ACQUIRED_Msk (0x1UL << SPIS_INTENSET_ACQUIRED_Pos)
  #define SPIS_INTENSET_ACQUIRED_Min (0x0UL)
  #define SPIS_INTENSET_ACQUIRED_Max (0x1UL)
  #define SPIS_INTENSET_ACQUIRED_Set (0x1UL)
  #define SPIS_INTENSET_ACQUIRED_Disabled (0x0UL)
  #define SPIS_INTENSET_ACQUIRED_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define SPIS_INTENSET_DMARXEND_Pos (19UL)
  #define SPIS_INTENSET_DMARXEND_Msk (0x1UL << SPIS_INTENSET_DMARXEND_Pos)
  #define SPIS_INTENSET_DMARXEND_Min (0x0UL)
  #define SPIS_INTENSET_DMARXEND_Max (0x1UL)
  #define SPIS_INTENSET_DMARXEND_Set (0x1UL)
  #define SPIS_INTENSET_DMARXEND_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define SPIS_INTENSET_DMARXREADY_Pos (20UL)
  #define SPIS_INTENSET_DMARXREADY_Msk (0x1UL << SPIS_INTENSET_DMARXREADY_Pos)
  #define SPIS_INTENSET_DMARXREADY_Min (0x0UL)
  #define SPIS_INTENSET_DMARXREADY_Max (0x1UL)
  #define SPIS_INTENSET_DMARXREADY_Set (0x1UL)
  #define SPIS_INTENSET_DMARXREADY_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define SPIS_INTENSET_DMARXBUSERROR_Pos (21UL)
  #define SPIS_INTENSET_DMARXBUSERROR_Msk (0x1UL << SPIS_INTENSET_DMARXBUSERROR_Pos)
  #define SPIS_INTENSET_DMARXBUSERROR_Min (0x0UL)
  #define SPIS_INTENSET_DMARXBUSERROR_Max (0x1UL)
  #define SPIS_INTENSET_DMARXBUSERROR_Set (0x1UL)
  #define SPIS_INTENSET_DMARXBUSERROR_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define SPIS_INTENSET_DMARXMATCH0_Pos (22UL)
  #define SPIS_INTENSET_DMARXMATCH0_Msk (0x1UL << SPIS_INTENSET_DMARXMATCH0_Pos)
  #define SPIS_INTENSET_DMARXMATCH0_Min (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH0_Max (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH0_Set (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH0_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define SPIS_INTENSET_DMARXMATCH1_Pos (23UL)
  #define SPIS_INTENSET_DMARXMATCH1_Msk (0x1UL << SPIS_INTENSET_DMARXMATCH1_Pos)
  #define SPIS_INTENSET_DMARXMATCH1_Min (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH1_Max (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH1_Set (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH1_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define SPIS_INTENSET_DMARXMATCH2_Pos (24UL)
  #define SPIS_INTENSET_DMARXMATCH2_Msk (0x1UL << SPIS_INTENSET_DMARXMATCH2_Pos)
  #define SPIS_INTENSET_DMARXMATCH2_Min (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH2_Max (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH2_Set (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH2_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define SPIS_INTENSET_DMARXMATCH3_Pos (25UL)
  #define SPIS_INTENSET_DMARXMATCH3_Msk (0x1UL << SPIS_INTENSET_DMARXMATCH3_Pos)
  #define SPIS_INTENSET_DMARXMATCH3_Min (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH3_Max (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH3_Set (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH3_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define SPIS_INTENSET_DMATXEND_Pos (26UL)
  #define SPIS_INTENSET_DMATXEND_Msk (0x1UL << SPIS_INTENSET_DMATXEND_Pos)
  #define SPIS_INTENSET_DMATXEND_Min (0x0UL)
  #define SPIS_INTENSET_DMATXEND_Max (0x1UL)
  #define SPIS_INTENSET_DMATXEND_Set (0x1UL)
  #define SPIS_INTENSET_DMATXEND_Disabled (0x0UL)
  #define SPIS_INTENSET_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define SPIS_INTENSET_DMATXREADY_Pos (27UL)
  #define SPIS_INTENSET_DMATXREADY_Msk (0x1UL << SPIS_INTENSET_DMATXREADY_Pos)
  #define SPIS_INTENSET_DMATXREADY_Min (0x0UL)
  #define SPIS_INTENSET_DMATXREADY_Max (0x1UL)
  #define SPIS_INTENSET_DMATXREADY_Set (0x1UL)
  #define SPIS_INTENSET_DMATXREADY_Disabled (0x0UL)
  #define SPIS_INTENSET_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define SPIS_INTENSET_DMATXBUSERROR_Pos (28UL)
  #define SPIS_INTENSET_DMATXBUSERROR_Msk (0x1UL << SPIS_INTENSET_DMATXBUSERROR_Pos)
  #define SPIS_INTENSET_DMATXBUSERROR_Min (0x0UL)
  #define SPIS_INTENSET_DMATXBUSERROR_Max (0x1UL)
  #define SPIS_INTENSET_DMATXBUSERROR_Set (0x1UL)
  #define SPIS_INTENSET_DMATXBUSERROR_Disabled (0x0UL)
  #define SPIS_INTENSET_DMATXBUSERROR_Enabled (0x1UL)


/* SPIS_INTENCLR: Disable interrupt */
  #define SPIS_INTENCLR_ResetValue (0x00000000UL)

/* END @Bit 1 : Write '1' to disable interrupt for event END */
  #define SPIS_INTENCLR_END_Pos (1UL)
  #define SPIS_INTENCLR_END_Msk (0x1UL << SPIS_INTENCLR_END_Pos)
  #define SPIS_INTENCLR_END_Min (0x0UL)
  #define SPIS_INTENCLR_END_Max (0x1UL)
  #define SPIS_INTENCLR_END_Clear (0x1UL)
  #define SPIS_INTENCLR_END_Disabled (0x0UL)
  #define SPIS_INTENCLR_END_Enabled (0x1UL)

/* ACQUIRED @Bit 6 : Write '1' to disable interrupt for event ACQUIRED */
  #define SPIS_INTENCLR_ACQUIRED_Pos (6UL)
  #define SPIS_INTENCLR_ACQUIRED_Msk (0x1UL << SPIS_INTENCLR_ACQUIRED_Pos)
  #define SPIS_INTENCLR_ACQUIRED_Min (0x0UL)
  #define SPIS_INTENCLR_ACQUIRED_Max (0x1UL)
  #define SPIS_INTENCLR_ACQUIRED_Clear (0x1UL)
  #define SPIS_INTENCLR_ACQUIRED_Disabled (0x0UL)
  #define SPIS_INTENCLR_ACQUIRED_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define SPIS_INTENCLR_DMARXEND_Pos (19UL)
  #define SPIS_INTENCLR_DMARXEND_Msk (0x1UL << SPIS_INTENCLR_DMARXEND_Pos)
  #define SPIS_INTENCLR_DMARXEND_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXEND_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXEND_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXEND_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define SPIS_INTENCLR_DMARXREADY_Pos (20UL)
  #define SPIS_INTENCLR_DMARXREADY_Msk (0x1UL << SPIS_INTENCLR_DMARXREADY_Pos)
  #define SPIS_INTENCLR_DMARXREADY_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXREADY_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXREADY_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXREADY_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define SPIS_INTENCLR_DMARXBUSERROR_Pos (21UL)
  #define SPIS_INTENCLR_DMARXBUSERROR_Msk (0x1UL << SPIS_INTENCLR_DMARXBUSERROR_Pos)
  #define SPIS_INTENCLR_DMARXBUSERROR_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXBUSERROR_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXBUSERROR_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXBUSERROR_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define SPIS_INTENCLR_DMARXMATCH0_Pos (22UL)
  #define SPIS_INTENCLR_DMARXMATCH0_Msk (0x1UL << SPIS_INTENCLR_DMARXMATCH0_Pos)
  #define SPIS_INTENCLR_DMARXMATCH0_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH0_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH0_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH0_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define SPIS_INTENCLR_DMARXMATCH1_Pos (23UL)
  #define SPIS_INTENCLR_DMARXMATCH1_Msk (0x1UL << SPIS_INTENCLR_DMARXMATCH1_Pos)
  #define SPIS_INTENCLR_DMARXMATCH1_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH1_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH1_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH1_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define SPIS_INTENCLR_DMARXMATCH2_Pos (24UL)
  #define SPIS_INTENCLR_DMARXMATCH2_Msk (0x1UL << SPIS_INTENCLR_DMARXMATCH2_Pos)
  #define SPIS_INTENCLR_DMARXMATCH2_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH2_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH2_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH2_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define SPIS_INTENCLR_DMARXMATCH3_Pos (25UL)
  #define SPIS_INTENCLR_DMARXMATCH3_Msk (0x1UL << SPIS_INTENCLR_DMARXMATCH3_Pos)
  #define SPIS_INTENCLR_DMARXMATCH3_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH3_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH3_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH3_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define SPIS_INTENCLR_DMATXEND_Pos (26UL)
  #define SPIS_INTENCLR_DMATXEND_Msk (0x1UL << SPIS_INTENCLR_DMATXEND_Pos)
  #define SPIS_INTENCLR_DMATXEND_Min (0x0UL)
  #define SPIS_INTENCLR_DMATXEND_Max (0x1UL)
  #define SPIS_INTENCLR_DMATXEND_Clear (0x1UL)
  #define SPIS_INTENCLR_DMATXEND_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define SPIS_INTENCLR_DMATXREADY_Pos (27UL)
  #define SPIS_INTENCLR_DMATXREADY_Msk (0x1UL << SPIS_INTENCLR_DMATXREADY_Pos)
  #define SPIS_INTENCLR_DMATXREADY_Min (0x0UL)
  #define SPIS_INTENCLR_DMATXREADY_Max (0x1UL)
  #define SPIS_INTENCLR_DMATXREADY_Clear (0x1UL)
  #define SPIS_INTENCLR_DMATXREADY_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define SPIS_INTENCLR_DMATXBUSERROR_Pos (28UL)
  #define SPIS_INTENCLR_DMATXBUSERROR_Msk (0x1UL << SPIS_INTENCLR_DMATXBUSERROR_Pos)
  #define SPIS_INTENCLR_DMATXBUSERROR_Min (0x0UL)
  #define SPIS_INTENCLR_DMATXBUSERROR_Max (0x1UL)
  #define SPIS_INTENCLR_DMATXBUSERROR_Clear (0x1UL)
  #define SPIS_INTENCLR_DMATXBUSERROR_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMATXBUSERROR_Enabled (0x1UL)


/* SPIS_SEMSTAT: Semaphore status register */
  #define SPIS_SEMSTAT_ResetValue (0x00000001UL)

/* SEMSTAT @Bits 0..1 : Semaphore status */
  #define SPIS_SEMSTAT_SEMSTAT_Pos (0UL)
  #define SPIS_SEMSTAT_SEMSTAT_Msk (0x3UL << SPIS_SEMSTAT_SEMSTAT_Pos)
  #define SPIS_SEMSTAT_SEMSTAT_Min (0x0UL)
  #define SPIS_SEMSTAT_SEMSTAT_Max (0x3UL)
  #define SPIS_SEMSTAT_SEMSTAT_Free (0x0UL)
  #define SPIS_SEMSTAT_SEMSTAT_CPU (0x1UL)
  #define SPIS_SEMSTAT_SEMSTAT_SPIS (0x2UL)
  #define SPIS_SEMSTAT_SEMSTAT_CPUPending (0x3UL)


/* SPIS_STATUS: Status from last transaction */
  #define SPIS_STATUS_ResetValue (0x00000000UL)

/* OVERREAD @Bit 0 : TX buffer over-read detected, and prevented */
  #define SPIS_STATUS_OVERREAD_Pos (0UL)
  #define SPIS_STATUS_OVERREAD_Msk (0x1UL << SPIS_STATUS_OVERREAD_Pos)
  #define SPIS_STATUS_OVERREAD_Min (0x0UL)
  #define SPIS_STATUS_OVERREAD_Max (0x1UL)
  #define SPIS_STATUS_OVERREAD_NotPresent (0x0UL)
  #define SPIS_STATUS_OVERREAD_Present (0x1UL)
  #define SPIS_STATUS_OVERREAD_Clear (0x1UL)

/* OVERFLOW @Bit 1 : RX buffer overflow detected, and prevented */
  #define SPIS_STATUS_OVERFLOW_Pos (1UL)
  #define SPIS_STATUS_OVERFLOW_Msk (0x1UL << SPIS_STATUS_OVERFLOW_Pos)
  #define SPIS_STATUS_OVERFLOW_Min (0x0UL)
  #define SPIS_STATUS_OVERFLOW_Max (0x1UL)
  #define SPIS_STATUS_OVERFLOW_NotPresent (0x0UL)
  #define SPIS_STATUS_OVERFLOW_Present (0x1UL)
  #define SPIS_STATUS_OVERFLOW_Clear (0x1UL)


/* SPIS_ENABLE: Enable SPI slave */
  #define SPIS_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..3 : Enable or disable SPI slave */
  #define SPIS_ENABLE_ENABLE_Pos (0UL)
  #define SPIS_ENABLE_ENABLE_Msk (0xFUL << SPIS_ENABLE_ENABLE_Pos)
  #define SPIS_ENABLE_ENABLE_Min (0x0UL)
  #define SPIS_ENABLE_ENABLE_Max (0x2UL)
  #define SPIS_ENABLE_ENABLE_Disabled (0x0UL)
  #define SPIS_ENABLE_ENABLE_Enabled (0x2UL)


/* SPIS_CONFIG: Configuration register */
  #define SPIS_CONFIG_ResetValue (0x00000000UL)

/* ORDER @Bit 0 : Bit order */
  #define SPIS_CONFIG_ORDER_Pos (0UL)
  #define SPIS_CONFIG_ORDER_Msk (0x1UL << SPIS_CONFIG_ORDER_Pos)
  #define SPIS_CONFIG_ORDER_Min (0x0UL)
  #define SPIS_CONFIG_ORDER_Max (0x1UL)
  #define SPIS_CONFIG_ORDER_MsbFirst (0x0UL)
  #define SPIS_CONFIG_ORDER_LsbFirst (0x1UL)

/* CPHA @Bit 1 : Serial clock (SCK) phase */
  #define SPIS_CONFIG_CPHA_Pos (1UL)
  #define SPIS_CONFIG_CPHA_Msk (0x1UL << SPIS_CONFIG_CPHA_Pos)
  #define SPIS_CONFIG_CPHA_Min (0x0UL)
  #define SPIS_CONFIG_CPHA_Max (0x1UL)
  #define SPIS_CONFIG_CPHA_Leading (0x0UL)
  #define SPIS_CONFIG_CPHA_Trailing (0x1UL)

/* CPOL @Bit 2 : Serial clock (SCK) polarity */
  #define SPIS_CONFIG_CPOL_Pos (2UL)
  #define SPIS_CONFIG_CPOL_Msk (0x1UL << SPIS_CONFIG_CPOL_Pos)
  #define SPIS_CONFIG_CPOL_Min (0x0UL)
  #define SPIS_CONFIG_CPOL_Max (0x1UL)
  #define SPIS_CONFIG_CPOL_ActiveHigh (0x0UL)
  #define SPIS_CONFIG_CPOL_ActiveLow (0x1UL)


/* SPIS_DEF: Default character. Character clocked out in case of an ignored transaction. */
  #define SPIS_DEF_ResetValue (0x00000000UL)

/* DEF @Bits 0..7 : Default character. Character clocked out in case of an ignored transaction. */
  #define SPIS_DEF_DEF_Pos (0UL)
  #define SPIS_DEF_DEF_Msk (0xFFUL << SPIS_DEF_DEF_Pos)


/* SPIS_ORC: Over-read character */
  #define SPIS_ORC_ResetValue (0x00000000UL)

/* ORC @Bits 0..7 : Over-read character. Character clocked out after an over-read of the transmit buffer. */
  #define SPIS_ORC_ORC_Pos (0UL)
  #define SPIS_ORC_ORC_Msk (0xFFUL << SPIS_ORC_ORC_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            SPU                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct SPU_PERIPHACCERR ================================================= */
/**
  * @brief PERIPHACCERR [SPU_PERIPHACCERR] (unspecified)
  */
typedef struct {
  __IM  uint32_t  ADDRESS;
} NRF_SPU_PERIPHACCERR_Type;

/* SPU_PERIPHACCERR_ADDRESS: Address of the transaction that caused first error. */
  #define SPU_PERIPHACCERR_ADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..15 : Address */
  #define SPU_PERIPHACCERR_ADDRESS_ADDRESS_Pos (0UL)
  #define SPU_PERIPHACCERR_ADDRESS_ADDRESS_Msk (0xFFFFUL << SPU_PERIPHACCERR_ADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/



/* ==================================================== Struct SPU_PERIPH ==================================================== */
/**
  * @brief PERIPH [SPU_PERIPH] (unspecified)
  */
typedef struct {
  __IOM uint32_t  PERM;                              /*!< (@ 0x00000000) Get and set the applicable access permissions for the
                                                                         peripheral slave index n*/
} NRF_SPU_PERIPH_Type;
  #define SPU_PERIPH_MaxCount (64UL)
  #define SPU_PERIPH_MaxIndex (63UL)
  #define SPU_PERIPH_MinIndex (0UL)

/* SPU_PERIPH_PERM: Get and set the applicable access permissions for the peripheral slave index n */
  #define SPU_PERIPH_PERM_ResetValue (0x8000000AUL)

/* SECUREMAPPING @Bits 0..1 : Read capabilities for TrustZone Cortex-M secure attribute */
  #define SPU_PERIPH_PERM_SECUREMAPPING_Pos (0UL)
  #define SPU_PERIPH_PERM_SECUREMAPPING_Msk (0x3UL << SPU_PERIPH_PERM_SECUREMAPPING_Pos)
  #define SPU_PERIPH_PERM_SECUREMAPPING_Min (0x0UL)
  #define SPU_PERIPH_PERM_SECUREMAPPING_Max (0x3UL)
  #define SPU_PERIPH_PERM_SECUREMAPPING_NonSecure (0x0UL)
  #define SPU_PERIPH_PERM_SECUREMAPPING_Secure (0x1UL)
  #define SPU_PERIPH_PERM_SECUREMAPPING_UserSelectable (0x2UL) /*!< Non-secure or secure attribute for this peripheral is
                                                                    defined by the PERIPH[n].PERM register*/
  #define SPU_PERIPH_PERM_SECUREMAPPING_Split (0x3UL)

/* DMA @Bits 2..3 : Read the peripheral DMA capabilities */
  #define SPU_PERIPH_PERM_DMA_Pos (2UL)
  #define SPU_PERIPH_PERM_DMA_Msk (0x3UL << SPU_PERIPH_PERM_DMA_Pos)
  #define SPU_PERIPH_PERM_DMA_Min (0x0UL)
  #define SPU_PERIPH_PERM_DMA_Max (0x2UL)
  #define SPU_PERIPH_PERM_DMA_NoDMA (0x0UL)
  #define SPU_PERIPH_PERM_DMA_NoSeparateAttribute (0x1UL) /*!< Peripheral has DMA and DMA transfers always have the same
                                                               security attribute as assigned to the peripheral*/
  #define SPU_PERIPH_PERM_DMA_SeparateAttribute (0x2UL) /*!< Peripheral has DMA and DMA transfers can have a different security
                                                             attribute than the one assigned to the peripheral*/

/* SECATTR @Bit 4 : Peripheral security mapping */
  #define SPU_PERIPH_PERM_SECATTR_Pos (4UL)
  #define SPU_PERIPH_PERM_SECATTR_Msk (0x1UL << SPU_PERIPH_PERM_SECATTR_Pos)
  #define SPU_PERIPH_PERM_SECATTR_Min (0x0UL)
  #define SPU_PERIPH_PERM_SECATTR_Max (0x1UL)
  #define SPU_PERIPH_PERM_SECATTR_Secure (0x1UL)
  #define SPU_PERIPH_PERM_SECATTR_NonSecure (0x0UL)  /*!< If SECUREMAPPING == UserSelectable: Peripheral is mapped in non-secure
                                                          peripheral address space. If SECUREMAPPING == Split: Peripheral is
                                                          mapped in non-secure and secure peripheral address space.*/

/* DMASEC @Bit 5 : Security attribution for the DMA transfer */
  #define SPU_PERIPH_PERM_DMASEC_Pos (5UL)
  #define SPU_PERIPH_PERM_DMASEC_Msk (0x1UL << SPU_PERIPH_PERM_DMASEC_Pos)
  #define SPU_PERIPH_PERM_DMASEC_Min (0x0UL)
  #define SPU_PERIPH_PERM_DMASEC_Max (0x1UL)
  #define SPU_PERIPH_PERM_DMASEC_Secure (0x1UL)      /*!< DMA transfers initiated by this peripheral have the secure attribute
                                                          set*/
  #define SPU_PERIPH_PERM_DMASEC_NonSecure (0x0UL)   /*!< DMA transfers initiated by this peripheral have the non-secure
                                                          attribute set*/

/* LOCK @Bit 8 : Register lock */
  #define SPU_PERIPH_PERM_LOCK_Pos (8UL)
  #define SPU_PERIPH_PERM_LOCK_Msk (0x1UL << SPU_PERIPH_PERM_LOCK_Pos)
  #define SPU_PERIPH_PERM_LOCK_Min (0x0UL)
  #define SPU_PERIPH_PERM_LOCK_Max (0x1UL)
  #define SPU_PERIPH_PERM_LOCK_Unlocked (0x0UL)
  #define SPU_PERIPH_PERM_LOCK_Locked (0x1UL)

/* PRESENT @Bit 31 : Indicates if a peripheral is present with peripheral slave index n */
  #define SPU_PERIPH_PERM_PRESENT_Pos (31UL)
  #define SPU_PERIPH_PERM_PRESENT_Msk (0x1UL << SPU_PERIPH_PERM_PRESENT_Pos)
  #define SPU_PERIPH_PERM_PRESENT_Min (0x0UL)
  #define SPU_PERIPH_PERM_PRESENT_Max (0x1UL)
  #define SPU_PERIPH_PERM_PRESENT_NotPresent (0x0UL)
  #define SPU_PERIPH_PERM_PRESENT_IsPresent (0x1UL)



/* ================================================ Struct SPU_FEATURE_DPPIC ================================================= */
/**
  * @brief DPPIC [SPU_FEATURE_DPPIC] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CH[24];
  __IOM uint32_t  CHG[8];
} NRF_SPU_FEATURE_DPPIC_Type;

/* SPU_FEATURE_DPPIC_CH: Configuration of features for channel n of DPPIC */
  #define SPU_FEATURE_DPPIC_CH_MaxCount (24UL)
  #define SPU_FEATURE_DPPIC_CH_MaxIndex (23UL)
  #define SPU_FEATURE_DPPIC_CH_MinIndex (0UL)
  #define SPU_FEATURE_DPPIC_CH_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_DPPIC_CH_SECATTR_Pos (4UL)
  #define SPU_FEATURE_DPPIC_CH_SECATTR_Msk (0x1UL << SPU_FEATURE_DPPIC_CH_SECATTR_Pos)
  #define SPU_FEATURE_DPPIC_CH_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_DPPIC_CH_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_DPPIC_CH_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_DPPIC_CH_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_DPPIC_CH_LOCK_Pos (8UL)
  #define SPU_FEATURE_DPPIC_CH_LOCK_Msk (0x1UL << SPU_FEATURE_DPPIC_CH_LOCK_Pos)
  #define SPU_FEATURE_DPPIC_CH_LOCK_Min (0x0UL)
  #define SPU_FEATURE_DPPIC_CH_LOCK_Max (0x1UL)
  #define SPU_FEATURE_DPPIC_CH_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_DPPIC_CH_LOCK_Locked (0x1UL)


/* SPU_FEATURE_DPPIC_CHG: Configuration of features for channel group n of DPPIC */
  #define SPU_FEATURE_DPPIC_CHG_MaxCount (8UL)
  #define SPU_FEATURE_DPPIC_CHG_MaxIndex (7UL)
  #define SPU_FEATURE_DPPIC_CHG_MinIndex (0UL)
  #define SPU_FEATURE_DPPIC_CHG_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_DPPIC_CHG_SECATTR_Pos (4UL)
  #define SPU_FEATURE_DPPIC_CHG_SECATTR_Msk (0x1UL << SPU_FEATURE_DPPIC_CHG_SECATTR_Pos)
  #define SPU_FEATURE_DPPIC_CHG_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_DPPIC_CHG_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_DPPIC_CHG_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_DPPIC_CHG_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_DPPIC_CHG_LOCK_Pos (8UL)
  #define SPU_FEATURE_DPPIC_CHG_LOCK_Msk (0x1UL << SPU_FEATURE_DPPIC_CHG_LOCK_Pos)
  #define SPU_FEATURE_DPPIC_CHG_LOCK_Min (0x0UL)
  #define SPU_FEATURE_DPPIC_CHG_LOCK_Max (0x1UL)
  #define SPU_FEATURE_DPPIC_CHG_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_DPPIC_CHG_LOCK_Locked (0x1UL)



/* ================================================ Struct SPU_FEATURE_GPIOTE ================================================ */
/**
  * @brief GPIOTE [SPU_FEATURE_GPIOTE] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CH[8];
  __IOM uint32_t  INTERRUPT[8];
} NRF_SPU_FEATURE_GPIOTE_Type;
  #define SPU_FEATURE_GPIOTE_MaxCount (2UL)
  #define SPU_FEATURE_GPIOTE_MaxIndex (1UL)
  #define SPU_FEATURE_GPIOTE_MinIndex (0UL)

/* SPU_FEATURE_GPIOTE_CH: Configuration of features for channel o of GPIOTE[n] */
  #define SPU_FEATURE_GPIOTE_CH_MaxCount (8UL)
  #define SPU_FEATURE_GPIOTE_CH_MaxIndex (7UL)
  #define SPU_FEATURE_GPIOTE_CH_MinIndex (0UL)
  #define SPU_FEATURE_GPIOTE_CH_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GPIOTE_CH_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GPIOTE_CH_SECATTR_Msk (0x1UL << SPU_FEATURE_GPIOTE_CH_SECATTR_Pos)
  #define SPU_FEATURE_GPIOTE_CH_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GPIOTE_CH_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GPIOTE_CH_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GPIOTE_CH_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GPIOTE_CH_LOCK_Pos (8UL)
  #define SPU_FEATURE_GPIOTE_CH_LOCK_Msk (0x1UL << SPU_FEATURE_GPIOTE_CH_LOCK_Pos)
  #define SPU_FEATURE_GPIOTE_CH_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GPIOTE_CH_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GPIOTE_CH_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GPIOTE_CH_LOCK_Locked (0x1UL)


/* SPU_FEATURE_GPIOTE_INTERRUPT: Configuration of features for interrupt o of GPIOTE[n] */
  #define SPU_FEATURE_GPIOTE_INTERRUPT_MaxCount (8UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_MaxIndex (7UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_MinIndex (0UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_Msk (0x1UL << SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_Pos) /*!< Bit mask of SECATTR
                                                                            field.*/
  #define SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Pos (8UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Msk (0x1UL << SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Pos)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Locked (0x1UL)



/* ================================================= Struct SPU_FEATURE_GPIO ================================================= */
/**
  * @brief GPIO [SPU_FEATURE_GPIO] (unspecified)
  */
typedef struct {
  __IOM uint32_t  PIN[32];
} NRF_SPU_FEATURE_GPIO_Type;
  #define SPU_FEATURE_GPIO_MaxCount (2UL)
  #define SPU_FEATURE_GPIO_MaxIndex (1UL)
  #define SPU_FEATURE_GPIO_MinIndex (0UL)

/* SPU_FEATURE_GPIO_PIN: Configuration of features for GPIO[n] PIN[o] */
  #define SPU_FEATURE_GPIO_PIN_MaxCount (32UL)
  #define SPU_FEATURE_GPIO_PIN_MaxIndex (31UL)
  #define SPU_FEATURE_GPIO_PIN_MinIndex (0UL)
  #define SPU_FEATURE_GPIO_PIN_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GPIO_PIN_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GPIO_PIN_SECATTR_Msk (0x1UL << SPU_FEATURE_GPIO_PIN_SECATTR_Pos)
  #define SPU_FEATURE_GPIO_PIN_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GPIO_PIN_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GPIO_PIN_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GPIO_PIN_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GPIO_PIN_LOCK_Pos (8UL)
  #define SPU_FEATURE_GPIO_PIN_LOCK_Msk (0x1UL << SPU_FEATURE_GPIO_PIN_LOCK_Pos)
  #define SPU_FEATURE_GPIO_PIN_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GPIO_PIN_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GPIO_PIN_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GPIO_PIN_LOCK_Locked (0x1UL)



/* ================================================= Struct SPU_FEATURE_GRTC ================================================= */
/**
  * @brief GRTC [SPU_FEATURE_GRTC] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CC[24];
  __IM  uint32_t  RESERVED[5];
  __IOM uint32_t  PWMCONFIG;
  __IOM uint32_t  CLK;
  __IOM uint32_t  SYSCOUNTER;                        /*!< (@ 0x0000007C) Configuration of features for SYSCOUNTERL/SYSCOUNTERH
                                                                         of GRTC*/
  __IOM uint32_t  INTERRUPT[16];
} NRF_SPU_FEATURE_GRTC_Type;

/* SPU_FEATURE_GRTC_CC: Configuration of features for CC n of GRTC */
  #define SPU_FEATURE_GRTC_CC_MaxCount (24UL)
  #define SPU_FEATURE_GRTC_CC_MaxIndex (23UL)
  #define SPU_FEATURE_GRTC_CC_MinIndex (0UL)
  #define SPU_FEATURE_GRTC_CC_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GRTC_CC_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GRTC_CC_SECATTR_Msk (0x1UL << SPU_FEATURE_GRTC_CC_SECATTR_Pos)
  #define SPU_FEATURE_GRTC_CC_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GRTC_CC_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GRTC_CC_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GRTC_CC_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GRTC_CC_LOCK_Pos (8UL)
  #define SPU_FEATURE_GRTC_CC_LOCK_Msk (0x1UL << SPU_FEATURE_GRTC_CC_LOCK_Pos)
  #define SPU_FEATURE_GRTC_CC_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GRTC_CC_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GRTC_CC_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GRTC_CC_LOCK_Locked (0x1UL)


/* SPU_FEATURE_GRTC_PWMCONFIG: Configuration of feature for PWMCONFIG of GRTC */
  #define SPU_FEATURE_GRTC_PWMCONFIG_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_Msk (0x1UL << SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_Pos) /*!< Bit mask of SECATTR
                                                                            field.*/
  #define SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Pos (8UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Msk (0x1UL << SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Pos)
  #define SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Locked (0x1UL)


/* SPU_FEATURE_GRTC_CLK: Configuration of features for CLKOUT/CLKCFG of GRTC */
  #define SPU_FEATURE_GRTC_CLK_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GRTC_CLK_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GRTC_CLK_SECATTR_Msk (0x1UL << SPU_FEATURE_GRTC_CLK_SECATTR_Pos)
  #define SPU_FEATURE_GRTC_CLK_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GRTC_CLK_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GRTC_CLK_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GRTC_CLK_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GRTC_CLK_LOCK_Pos (8UL)
  #define SPU_FEATURE_GRTC_CLK_LOCK_Msk (0x1UL << SPU_FEATURE_GRTC_CLK_LOCK_Pos)
  #define SPU_FEATURE_GRTC_CLK_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GRTC_CLK_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GRTC_CLK_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GRTC_CLK_LOCK_Locked (0x1UL)


/* SPU_FEATURE_GRTC_SYSCOUNTER: Configuration of features for SYSCOUNTERL/SYSCOUNTERH of GRTC */
  #define SPU_FEATURE_GRTC_SYSCOUNTER_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_Msk (0x1UL << SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_Pos) /*!< Bit mask of SECATTR
                                                                            field.*/
  #define SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Pos (8UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Msk (0x1UL << SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Pos)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Locked (0x1UL)


/* SPU_FEATURE_GRTC_INTERRUPT: Configuration of features for interrupt n of GRTC */
  #define SPU_FEATURE_GRTC_INTERRUPT_MaxCount (16UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_MaxIndex (15UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_MinIndex (0UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GRTC_INTERRUPT_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_SECATTR_Msk (0x1UL << SPU_FEATURE_GRTC_INTERRUPT_SECATTR_Pos) /*!< Bit mask of SECATTR
                                                                            field.*/
  #define SPU_FEATURE_GRTC_INTERRUPT_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GRTC_INTERRUPT_LOCK_Pos (8UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_LOCK_Msk (0x1UL << SPU_FEATURE_GRTC_INTERRUPT_LOCK_Pos)
  #define SPU_FEATURE_GRTC_INTERRUPT_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_LOCK_Locked (0x1UL)



/* =================================================== Struct SPU_FEATURE ==================================================== */
/**
  * @brief FEATURE [SPU_FEATURE] (unspecified)
  */
typedef union {
  struct {
    __IM uint32_t RESERVED[32];
    __IOM NRF_SPU_FEATURE_DPPIC_Type DPPIC;
    __IOM NRF_SPU_FEATURE_GPIOTE_Type GPIOTE[2];
    __IM uint32_t RESERVED1[32];
    __IOM NRF_SPU_FEATURE_GPIO_Type GPIO[2];
    __IM uint32_t RESERVED2[256];
    __IOM NRF_SPU_FEATURE_GRTC_Type GRTC;
  };
} NRF_SPU_FEATURE_Type;

/* ======================================================= Struct SPU ======================================================== */
/**
  * @brief System protection unit
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_PERIPHACCERR;              /*!< (@ 0x00000100) A security violation has been detected on one or
                                                                         several peripherals*/
    __IM uint32_t RESERVED1[127];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED2[61];
    __IOM NRF_SPU_PERIPHACCERR_Type PERIPHACCERR;
    __IM uint32_t RESERVED3[62];
    __IOM NRF_SPU_PERIPH_Type PERIPH[64];
    __IOM NRF_SPU_FEATURE_Type FEATURE;
  } NRF_SPU_Type;

/* SPU_EVENTS_PERIPHACCERR: A security violation has been detected on one or several peripherals */
  #define SPU_EVENTS_PERIPHACCERR_ResetValue (0x00000000UL)

/* EVENTS_PERIPHACCERR @Bit 0 : A security violation has been detected on one or several peripherals */
  #define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Pos (0UL)
  #define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Msk (0x1UL << SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Pos) /*!< Bit
                                                                            mask of EVENTS_PERIPHACCERR field.*/
  #define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Min (0x0UL)
  #define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Max (0x1UL)
  #define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_NotGenerated (0x0UL)
  #define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Generated (0x1UL)


/* SPU_INTEN: Enable or disable interrupt */
  #define SPU_INTEN_ResetValue (0x00000000UL)

/* PERIPHACCERR @Bit 0 : Enable or disable interrupt for event PERIPHACCERR */
  #define SPU_INTEN_PERIPHACCERR_Pos (0UL)
  #define SPU_INTEN_PERIPHACCERR_Msk (0x1UL << SPU_INTEN_PERIPHACCERR_Pos)
  #define SPU_INTEN_PERIPHACCERR_Min (0x0UL)
  #define SPU_INTEN_PERIPHACCERR_Max (0x1UL)
  #define SPU_INTEN_PERIPHACCERR_Disabled (0x0UL)
  #define SPU_INTEN_PERIPHACCERR_Enabled (0x1UL)


/* SPU_INTENSET: Enable interrupt */
  #define SPU_INTENSET_ResetValue (0x00000000UL)

/* PERIPHACCERR @Bit 0 : Write '1' to enable interrupt for event PERIPHACCERR */
  #define SPU_INTENSET_PERIPHACCERR_Pos (0UL)
  #define SPU_INTENSET_PERIPHACCERR_Msk (0x1UL << SPU_INTENSET_PERIPHACCERR_Pos)
  #define SPU_INTENSET_PERIPHACCERR_Min (0x0UL)
  #define SPU_INTENSET_PERIPHACCERR_Max (0x1UL)
  #define SPU_INTENSET_PERIPHACCERR_Set (0x1UL)
  #define SPU_INTENSET_PERIPHACCERR_Disabled (0x0UL)
  #define SPU_INTENSET_PERIPHACCERR_Enabled (0x1UL)


/* SPU_INTENCLR: Disable interrupt */
  #define SPU_INTENCLR_ResetValue (0x00000000UL)

/* PERIPHACCERR @Bit 0 : Write '1' to disable interrupt for event PERIPHACCERR */
  #define SPU_INTENCLR_PERIPHACCERR_Pos (0UL)
  #define SPU_INTENCLR_PERIPHACCERR_Msk (0x1UL << SPU_INTENCLR_PERIPHACCERR_Pos)
  #define SPU_INTENCLR_PERIPHACCERR_Min (0x0UL)
  #define SPU_INTENCLR_PERIPHACCERR_Max (0x1UL)
  #define SPU_INTENCLR_PERIPHACCERR_Clear (0x1UL)
  #define SPU_INTENCLR_PERIPHACCERR_Disabled (0x0UL)
  #define SPU_INTENCLR_PERIPHACCERR_Enabled (0x1UL)


/* SPU_INTPEND: Pending interrupts */
  #define SPU_INTPEND_ResetValue (0x00000000UL)

/* PERIPHACCERR @Bit 0 : Read pending status of interrupt for event PERIPHACCERR */
  #define SPU_INTPEND_PERIPHACCERR_Pos (0UL)
  #define SPU_INTPEND_PERIPHACCERR_Msk (0x1UL << SPU_INTPEND_PERIPHACCERR_Pos)
  #define SPU_INTPEND_PERIPHACCERR_Min (0x0UL)
  #define SPU_INTPEND_PERIPHACCERR_Max (0x1UL)
  #define SPU_INTPEND_PERIPHACCERR_NotPending (0x0UL)
  #define SPU_INTPEND_PERIPHACCERR_Pending (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            SWI                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct SWI ======================================================== */
/**
  * @brief Software interrupt
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_SWI_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            TAD                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct TAD ======================================================== */
/**
  * @brief Trace and debug control
  */
  typedef struct {
    __IM uint32_t RESERVED[256];
    __IOM uint32_t SYSPWRUPREQ;
    __IOM uint32_t DBGPWRUPREQ;
    __IM uint32_t RESERVED1[62];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED2[5];
    __IOM uint32_t TRACEPORTSPEED;
    __IM uint32_t RESERVED3;
    __IOM uint32_t TINSTANCE;
  } NRF_TAD_Type;

/* TAD_SYSPWRUPREQ: System power-up request */
  #define TAD_SYSPWRUPREQ_ResetValue (0x00000000UL)

/* ACTIVE @Bit 0 : Activate power-up request */
  #define TAD_SYSPWRUPREQ_ACTIVE_Pos (0UL)
  #define TAD_SYSPWRUPREQ_ACTIVE_Msk (0x1UL << TAD_SYSPWRUPREQ_ACTIVE_Pos)
  #define TAD_SYSPWRUPREQ_ACTIVE_Min (0x0UL)
  #define TAD_SYSPWRUPREQ_ACTIVE_Max (0x1UL)
  #define TAD_SYSPWRUPREQ_ACTIVE_NotActive (0x0UL)
  #define TAD_SYSPWRUPREQ_ACTIVE_Active (0x1UL)


/* TAD_DBGPWRUPREQ: Debug power-up request */
  #define TAD_DBGPWRUPREQ_ResetValue (0x00000000UL)

/* ACTIVE @Bit 0 : Activate power-up request */
  #define TAD_DBGPWRUPREQ_ACTIVE_Pos (0UL)
  #define TAD_DBGPWRUPREQ_ACTIVE_Msk (0x1UL << TAD_DBGPWRUPREQ_ACTIVE_Pos)
  #define TAD_DBGPWRUPREQ_ACTIVE_Min (0x0UL)
  #define TAD_DBGPWRUPREQ_ACTIVE_Max (0x1UL)
  #define TAD_DBGPWRUPREQ_ACTIVE_NotActive (0x0UL)
  #define TAD_DBGPWRUPREQ_ACTIVE_Active (0x1UL)


/* TAD_ENABLE: Enable debug domain and aquire selected GPIOs */
  #define TAD_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define TAD_ENABLE_ENABLE_Pos (0UL)
  #define TAD_ENABLE_ENABLE_Msk (0x1UL << TAD_ENABLE_ENABLE_Pos)
  #define TAD_ENABLE_ENABLE_Min (0x0UL)
  #define TAD_ENABLE_ENABLE_Max (0x1UL)
  #define TAD_ENABLE_ENABLE_DISABLED (0x0UL)
  #define TAD_ENABLE_ENABLE_ENABLED (0x1UL)


/* TAD_TRACEPORTSPEED: Trace port speed */
  #define TAD_TRACEPORTSPEED_ResetValue (0x00000000UL)

/* TRACEPORTSPEED @Bits 0..1 : Trace port speed is divided from CPU clock. The TRACECLK pin output will be divided again by two
                               from the trace port clock. */

  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Pos (0UL)
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Msk (0x3UL << TAD_TRACEPORTSPEED_TRACEPORTSPEED_Pos) /*!< Bit mask of TRACEPORTSPEED
                                                                            field.*/
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Min (0x0UL)
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Max (0x3UL)
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_DIV1 (0x0UL)
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_DIV2 (0x1UL)
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_DIV4 (0x2UL)
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_DIV32 (0x3UL)


/* TAD_TINSTANCE: SW-DP Target instance */
  #define TAD_TINSTANCE_ResetValue (0x00000000UL)

/* TINSTANCE @Bits 0..3 : TINSTANCE bits are used in the SW-DP DLPIDR.TINSTANCE field. */
  #define TAD_TINSTANCE_TINSTANCE_Pos (0UL)
  #define TAD_TINSTANCE_TINSTANCE_Msk (0xFUL << TAD_TINSTANCE_TINSTANCE_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TAMPC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct TAMPC_ACTIVESHIELD ================================================ */
/**
  * @brief ACTIVESHIELD [TAMPC_ACTIVESHIELD] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CHEN;
} NRF_TAMPC_ACTIVESHIELD_Type;

/* TAMPC_ACTIVESHIELD_CHEN: Active shield detector channel enable register. */
  #define TAMPC_ACTIVESHIELD_CHEN_ResetValue (0x00000000UL)

/* CH0 @Bit 0 : Enable or disable active shield channel 0. */
  #define TAMPC_ACTIVESHIELD_CHEN_CH0_Pos (0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH0_Msk (0x1UL << TAMPC_ACTIVESHIELD_CHEN_CH0_Pos)
  #define TAMPC_ACTIVESHIELD_CHEN_CH0_Min (0x0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH0_Max (0x1UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH0_Disabled (0x0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH0_Enabled (0x1UL)

/* CH1 @Bit 1 : Enable or disable active shield channel 1. */
  #define TAMPC_ACTIVESHIELD_CHEN_CH1_Pos (1UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH1_Msk (0x1UL << TAMPC_ACTIVESHIELD_CHEN_CH1_Pos)
  #define TAMPC_ACTIVESHIELD_CHEN_CH1_Min (0x0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH1_Max (0x1UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH1_Disabled (0x0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH1_Enabled (0x1UL)



/* ============================================ Struct TAMPC_PROTECT_DOMAIN_DBGEN ============================================ */
/**
  * @brief DBGEN [TAMPC_PROTECT_DOMAIN_DBGEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for invasive (halting) debug enable
                                                                         for the local debug components within domain n.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for invasive (halting) debug enable for
                                                                         domain n.*/
} NRF_TAMPC_PROTECT_DOMAIN_DBGEN_Type;

/* TAMPC_PROTECT_DOMAIN_DBGEN_CTRL: Control register for invasive (halting) debug enable for the local debug components within
                                     domain n. */

  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of dbgen signal. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_DOMAIN_DBGEN_STATUS: Status register for invasive (halting) debug enable for domain n. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Pos) /*!< Bit mask of
                                                                            ERROR field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Error (0x1UL)



/* ============================================ Struct TAMPC_PROTECT_DOMAIN_NIDEN ============================================ */
/**
  * @brief NIDEN [TAMPC_PROTECT_DOMAIN_NIDEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for non-invasive debug enable for the
                                                                         local debug components within domain n.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for non-invasive debug enable for
                                                                         domain n.*/
} NRF_TAMPC_PROTECT_DOMAIN_NIDEN_Type;

/* TAMPC_PROTECT_DOMAIN_NIDEN_CTRL: Control register for non-invasive debug enable for the local debug components within domain
                                     n. */

  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of niden signal. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_DOMAIN_NIDEN_STATUS: Status register for non-invasive debug enable for domain n. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Pos) /*!< Bit mask of
                                                                            ERROR field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Error (0x1UL)



/* =========================================== Struct TAMPC_PROTECT_DOMAIN_SPIDEN ============================================ */
/**
  * @brief SPIDEN [TAMPC_PROTECT_DOMAIN_SPIDEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for secure priviliged invasive
                                                                         (halting) debug enable for the local debug components
                                                                         within domain n.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for secure priviliged invasive
                                                                         (halting) debug enable for domain n.*/
} NRF_TAMPC_PROTECT_DOMAIN_SPIDEN_Type;

/* TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL: Control register for secure priviliged invasive (halting) debug enable for the local debug
                                      components within domain n. */

  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of spiden signal. */
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_Pos) /*!< Bit mask of
                                                                            VALUE field.*/
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS: Status register for secure priviliged invasive (halting) debug enable for domain n. */
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_Pos) /*!< Bit mask of
                                                                            ERROR field.*/
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_Error (0x1UL)



/* =========================================== Struct TAMPC_PROTECT_DOMAIN_SPNIDEN =========================================== */
/**
  * @brief SPNIDEN [TAMPC_PROTECT_DOMAIN_SPNIDEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for secure priviliged non-invasive
                                                                         debug enable for the local debug components within
                                                                         domain n.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for secure priviliged non-invasive
                                                                         debug enable for domain n.*/
} NRF_TAMPC_PROTECT_DOMAIN_SPNIDEN_Type;

/* TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL: Control register for secure priviliged non-invasive debug enable for the local debug
                                       components within domain n. */

  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of spniden signal. */
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_Pos) /*!< Bit mask of
                                                                            VALUE field.*/
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS: Status register for secure priviliged non-invasive debug enable for domain n. */
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_Pos) /*!< Bit mask
                                                                            of ERROR field.*/
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_Error (0x1UL)



/* =============================================== Struct TAMPC_PROTECT_DOMAIN =============================================== */
/**
  * @brief DOMAIN [TAMPC_PROTECT_DOMAIN] (unspecified)
  */
typedef struct {
  __IOM NRF_TAMPC_PROTECT_DOMAIN_DBGEN_Type DBGEN;
  __IOM NRF_TAMPC_PROTECT_DOMAIN_NIDEN_Type NIDEN;
  __IOM NRF_TAMPC_PROTECT_DOMAIN_SPIDEN_Type SPIDEN;
  __IOM NRF_TAMPC_PROTECT_DOMAIN_SPNIDEN_Type SPNIDEN;
} NRF_TAMPC_PROTECT_DOMAIN_Type;
  #define TAMPC_PROTECT_DOMAIN_MaxCount (1UL)
  #define TAMPC_PROTECT_DOMAIN_MaxIndex (0UL)
  #define TAMPC_PROTECT_DOMAIN_MinIndex (0UL)


/* ============================================== Struct TAMPC_PROTECT_AP_DBGEN ============================================== */
/**
  * @brief DBGEN [TAMPC_PROTECT_AP_DBGEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register to enable invasive (halting) debug in
                                                                         domain n's access port.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for invasive (halting) debug enable for
                                                                         domain n's access port.*/
} NRF_TAMPC_PROTECT_AP_DBGEN_Type;

/* TAMPC_PROTECT_AP_DBGEN_CTRL: Control register to enable invasive (halting) debug in domain n's access port. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of dbgen signal. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Pos)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Pos)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Pos) /*!< Bit
                                                                            mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Pos)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_AP_DBGEN_STATUS: Status register for invasive (halting) debug enable for domain n's access port. */
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Pos) /*!< Bit mask of ERROR
                                                                            field.*/
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Error (0x1UL)



/* ================================================= Struct TAMPC_PROTECT_AP ================================================= */
/**
  * @brief AP [TAMPC_PROTECT_AP] (unspecified)
  */
typedef struct {
  __IOM NRF_TAMPC_PROTECT_AP_DBGEN_Type DBGEN;
  __IM  uint32_t  RESERVED[2];
} NRF_TAMPC_PROTECT_AP_Type;
  #define TAMPC_PROTECT_AP_MaxCount (1UL)
  #define TAMPC_PROTECT_AP_MaxIndex (0UL)
  #define TAMPC_PROTECT_AP_MinIndex (0UL)


/* ============================================ Struct TAMPC_PROTECT_ACTIVESHIELD ============================================ */
/**
  * @brief ACTIVESHIELD [TAMPC_PROTECT_ACTIVESHIELD] Enable active shield detector.
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for active shield detector enable
                                                                         signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for active shield detector enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_ACTIVESHIELD_Type;

/* TAMPC_PROTECT_ACTIVESHIELD_CTRL: Control register for active shield detector enable signal. */
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of active shield enable signal. */
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_ACTIVESHIELD_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_ACTIVESHIELD_STATUS: Status register for active shield detector enable signal. */
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_Pos) /*!< Bit mask of
                                                                            ERROR field.*/
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_Error (0x1UL)



/* ============================================= Struct TAMPC_PROTECT_CRACENTAMP ============================================= */
/**
  * @brief CRACENTAMP [TAMPC_PROTECT_CRACENTAMP] Enable tamper detector from CRACEN.
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for CRACEN tamper detector enable
                                                                         signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for CRACEN tamper detector enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_CRACENTAMP_Type;

/* TAMPC_PROTECT_CRACENTAMP_CTRL: Control register for CRACEN tamper detector enable signal. */
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_ResetValue (0x00000011UL)

/* VALUE @Bit 0 : Set value of CRACEN tamper detector enable signal. */
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Pos)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Pos) /*!<
                                                                            Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_CRACENTAMP_CTRL_KEY_Pos)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_CRACENTAMP_STATUS: Status register for CRACEN tamper detector enable signal. */
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_Pos) /*!< Bit mask of ERROR
                                                                            field.*/
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_Error (0x1UL)



/* ========================================== Struct TAMPC_PROTECT_GLITCHSLOWDOMAIN ========================================== */
/**
  * @brief GLITCHSLOWDOMAIN [TAMPC_PROTECT_GLITCHSLOWDOMAIN] Enable slow domain glitch detectors.
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for slow domain glitch detectors
                                                                         enable signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for slow domain glitch detectors enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_GLITCHSLOWDOMAIN_Type;

/* TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL: Control register for slow domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_ResetValue (0x00000011UL)

/* VALUE @Bit 0 : Set value of slow domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Pos) /*!< Bit mask
                                                                            of VALUE field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Pos) /*!< Bit mask of
                                                                            LOCK field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Pos) /*!< Bit mask of
                                                                            KEY field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS: Status register for slow domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Pos) /*!< Bit
                                                                            mask of ERROR field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Error (0x1UL)



/* ========================================== Struct TAMPC_PROTECT_GLITCHFASTDOMAIN ========================================== */
/**
  * @brief GLITCHFASTDOMAIN [TAMPC_PROTECT_GLITCHFASTDOMAIN] Enable fast domain glitch detectors.
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for fast domain glitch detectors
                                                                         enable signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for fast domain glitch detectors enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_GLITCHFASTDOMAIN_Type;

/* TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL: Control register for fast domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_ResetValue (0x00000011UL)

/* VALUE @Bit 0 : Set value of fast domain glitch detector's enable signal. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Pos) /*!< Bit mask
                                                                            of VALUE field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Pos) /*!< Bit mask of
                                                                            LOCK field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Pos) /*!< Bit mask of
                                                                            KEY field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS: Status register for fast domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Pos) /*!< Bit
                                                                            mask of ERROR field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Error (0x1UL)



/* ============================================= Struct TAMPC_PROTECT_EXTRESETEN ============================================= */
/**
  * @brief EXTRESETEN [TAMPC_PROTECT_EXTRESETEN] Trigger a reset when tamper is detected by the external tamper detectors.
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for external tamper reset enable
                                                                         signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for external tamper reset enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_EXTRESETEN_Type;

/* TAMPC_PROTECT_EXTRESETEN_CTRL: Control register for external tamper reset enable signal. */
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of external tamper reset enable signal. */
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Pos)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Pos) /*!<
                                                                            Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_EXTRESETEN_CTRL_KEY_Pos)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_EXTRESETEN_STATUS: Status register for external tamper reset enable signal. */
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_Pos) /*!< Bit mask of ERROR
                                                                            field.*/
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_Error (0x1UL)



/* ============================================= Struct TAMPC_PROTECT_INTRESETEN ============================================= */
/**
  * @brief INTRESETEN [TAMPC_PROTECT_INTRESETEN] Trigger a reset when tamper is detected by the glitch detectors, signal
            protector or CRACEN tamper detector.

  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for internal tamper reset enable
                                                                         signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for internal tamper reset enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_INTRESETEN_Type;

/* TAMPC_PROTECT_INTRESETEN_CTRL: Control register for internal tamper reset enable signal. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_ResetValue (0x00000011UL)

/* VALUE @Bit 0 : Set value of internal tamper reset enable signal. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Pos)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Pos) /*!<
                                                                            Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Pos)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_INTRESETEN_STATUS: Status register for internal tamper reset enable signal. */
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Pos) /*!< Bit mask of ERROR
                                                                            field.*/
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Error (0x1UL)



/* ============================================ Struct TAMPC_PROTECT_ERASEPROTECT ============================================ */
/**
  * @brief ERASEPROTECT [TAMPC_PROTECT_ERASEPROTECT] Device erase protection.
  */
typedef struct {
  __IOM uint32_t  CTRL;
  __IOM uint32_t  STATUS;
} NRF_TAMPC_PROTECT_ERASEPROTECT_Type;

/* TAMPC_PROTECT_ERASEPROTECT_CTRL: Control register for erase protection. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of eraseprotect signal. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_ERASEPROTECT_STATUS: Status register for eraseprotect. */
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Pos) /*!< Bit mask of
                                                                            ERROR field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Error (0x1UL)



/* ================================================== Struct TAMPC_PROTECT =================================================== */
/**
  * @brief PROTECT [TAMPC_PROTECT] (unspecified)
  */
typedef union {
  struct {
    __IOM NRF_TAMPC_PROTECT_DOMAIN_Type DOMAIN[1];
    __IM uint32_t RESERVED[120];
    __IOM NRF_TAMPC_PROTECT_AP_Type AP[1];
    __IM uint32_t RESERVED1[124];
    __IOM NRF_TAMPC_PROTECT_ACTIVESHIELD_Type ACTIVESHIELD;
    __IM uint32_t RESERVED2[12];
    __IOM NRF_TAMPC_PROTECT_CRACENTAMP_Type CRACENTAMP;
    __IOM NRF_TAMPC_PROTECT_GLITCHSLOWDOMAIN_Type GLITCHSLOWDOMAIN;
    __IOM NRF_TAMPC_PROTECT_GLITCHFASTDOMAIN_Type GLITCHFASTDOMAIN;
    __IM uint32_t RESERVED3[8];
    __IOM NRF_TAMPC_PROTECT_EXTRESETEN_Type EXTRESETEN; /*!< (@ 0x00000470) Trigger a reset when tamper is detected by the
                                                                            external tamper detectors.*/
    __IOM NRF_TAMPC_PROTECT_INTRESETEN_Type INTRESETEN; /*!< (@ 0x00000478) Trigger a reset when tamper is detected by the
                                                                            glitch detectors, signal protector or CRACEN tamper
                                                                            detector.*/
    __IOM NRF_TAMPC_PROTECT_ERASEPROTECT_Type ERASEPROTECT;
  };
} NRF_TAMPC_PROTECT_Type;

/* ====================================================== Struct TAMPC ======================================================= */
/**
  * @brief Tamper controller
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_TAMPER;
    __IOM uint32_t EVENTS_WRITEERROR;                /*!< (@ 0x00000104) Attempt to write a VALUE in PROTECT registers without
                                                                         clearing the WRITEPROTECT.*/
    __IM uint32_t RESERVED1[126];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED2[60];
    __IOM uint32_t STATUS;
    __IOM NRF_TAMPC_ACTIVESHIELD_Type ACTIVESHIELD;
    __IM uint32_t RESERVED3[62];
    __IOM NRF_TAMPC_PROTECT_Type PROTECT;
  } NRF_TAMPC_Type;

/* TAMPC_EVENTS_TAMPER: Tamper controller detected an error. */
  #define TAMPC_EVENTS_TAMPER_ResetValue (0x00000000UL)

/* EVENTS_TAMPER @Bit 0 : Tamper controller detected an error. */
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Pos (0UL)
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Msk (0x1UL << TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Pos) /*!< Bit mask of EVENTS_TAMPER
                                                                            field.*/
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Min (0x0UL)
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Max (0x1UL)
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_NotGenerated (0x0UL)
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Generated (0x1UL)


/* TAMPC_EVENTS_WRITEERROR: Attempt to write a VALUE in PROTECT registers without clearing the WRITEPROTECT. */
  #define TAMPC_EVENTS_WRITEERROR_ResetValue (0x00000000UL)

/* EVENTS_WRITEERROR @Bit 0 : Attempt to write a VALUE in PROTECT registers without clearing the WRITEPROTECT. */
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Pos (0UL)
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Msk (0x1UL << TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Pos) /*!< Bit mask
                                                                            of EVENTS_WRITEERROR field.*/
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Min (0x0UL)
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Max (0x1UL)
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_NotGenerated (0x0UL)
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Generated (0x1UL)


/* TAMPC_INTEN: Enable or disable interrupt */
  #define TAMPC_INTEN_ResetValue (0x00000000UL)

/* TAMPER @Bit 0 : Enable or disable interrupt for event TAMPER */
  #define TAMPC_INTEN_TAMPER_Pos (0UL)
  #define TAMPC_INTEN_TAMPER_Msk (0x1UL << TAMPC_INTEN_TAMPER_Pos)
  #define TAMPC_INTEN_TAMPER_Min (0x0UL)
  #define TAMPC_INTEN_TAMPER_Max (0x1UL)
  #define TAMPC_INTEN_TAMPER_Disabled (0x0UL)
  #define TAMPC_INTEN_TAMPER_Enabled (0x1UL)

/* WRITEERROR @Bit 1 : Enable or disable interrupt for event WRITEERROR */
  #define TAMPC_INTEN_WRITEERROR_Pos (1UL)
  #define TAMPC_INTEN_WRITEERROR_Msk (0x1UL << TAMPC_INTEN_WRITEERROR_Pos)
  #define TAMPC_INTEN_WRITEERROR_Min (0x0UL)
  #define TAMPC_INTEN_WRITEERROR_Max (0x1UL)
  #define TAMPC_INTEN_WRITEERROR_Disabled (0x0UL)
  #define TAMPC_INTEN_WRITEERROR_Enabled (0x1UL)


/* TAMPC_INTENSET: Enable interrupt */
  #define TAMPC_INTENSET_ResetValue (0x00000000UL)

/* TAMPER @Bit 0 : Write '1' to enable interrupt for event TAMPER */
  #define TAMPC_INTENSET_TAMPER_Pos (0UL)
  #define TAMPC_INTENSET_TAMPER_Msk (0x1UL << TAMPC_INTENSET_TAMPER_Pos)
  #define TAMPC_INTENSET_TAMPER_Min (0x0UL)
  #define TAMPC_INTENSET_TAMPER_Max (0x1UL)
  #define TAMPC_INTENSET_TAMPER_Set (0x1UL)
  #define TAMPC_INTENSET_TAMPER_Disabled (0x0UL)
  #define TAMPC_INTENSET_TAMPER_Enabled (0x1UL)

/* WRITEERROR @Bit 1 : Write '1' to enable interrupt for event WRITEERROR */
  #define TAMPC_INTENSET_WRITEERROR_Pos (1UL)
  #define TAMPC_INTENSET_WRITEERROR_Msk (0x1UL << TAMPC_INTENSET_WRITEERROR_Pos)
  #define TAMPC_INTENSET_WRITEERROR_Min (0x0UL)
  #define TAMPC_INTENSET_WRITEERROR_Max (0x1UL)
  #define TAMPC_INTENSET_WRITEERROR_Set (0x1UL)
  #define TAMPC_INTENSET_WRITEERROR_Disabled (0x0UL)
  #define TAMPC_INTENSET_WRITEERROR_Enabled (0x1UL)


/* TAMPC_INTENCLR: Disable interrupt */
  #define TAMPC_INTENCLR_ResetValue (0x00000000UL)

/* TAMPER @Bit 0 : Write '1' to disable interrupt for event TAMPER */
  #define TAMPC_INTENCLR_TAMPER_Pos (0UL)
  #define TAMPC_INTENCLR_TAMPER_Msk (0x1UL << TAMPC_INTENCLR_TAMPER_Pos)
  #define TAMPC_INTENCLR_TAMPER_Min (0x0UL)
  #define TAMPC_INTENCLR_TAMPER_Max (0x1UL)
  #define TAMPC_INTENCLR_TAMPER_Clear (0x1UL)
  #define TAMPC_INTENCLR_TAMPER_Disabled (0x0UL)
  #define TAMPC_INTENCLR_TAMPER_Enabled (0x1UL)

/* WRITEERROR @Bit 1 : Write '1' to disable interrupt for event WRITEERROR */
  #define TAMPC_INTENCLR_WRITEERROR_Pos (1UL)
  #define TAMPC_INTENCLR_WRITEERROR_Msk (0x1UL << TAMPC_INTENCLR_WRITEERROR_Pos)
  #define TAMPC_INTENCLR_WRITEERROR_Min (0x0UL)
  #define TAMPC_INTENCLR_WRITEERROR_Max (0x1UL)
  #define TAMPC_INTENCLR_WRITEERROR_Clear (0x1UL)
  #define TAMPC_INTENCLR_WRITEERROR_Disabled (0x0UL)
  #define TAMPC_INTENCLR_WRITEERROR_Enabled (0x1UL)


/* TAMPC_INTPEND: Pending interrupts */
  #define TAMPC_INTPEND_ResetValue (0x00000000UL)

/* TAMPER @Bit 0 : Read pending status of interrupt for event TAMPER */
  #define TAMPC_INTPEND_TAMPER_Pos (0UL)
  #define TAMPC_INTPEND_TAMPER_Msk (0x1UL << TAMPC_INTPEND_TAMPER_Pos)
  #define TAMPC_INTPEND_TAMPER_Min (0x0UL)
  #define TAMPC_INTPEND_TAMPER_Max (0x1UL)
  #define TAMPC_INTPEND_TAMPER_NotPending (0x0UL)
  #define TAMPC_INTPEND_TAMPER_Pending (0x1UL)

/* WRITEERROR @Bit 1 : Read pending status of interrupt for event WRITEERROR */
  #define TAMPC_INTPEND_WRITEERROR_Pos (1UL)
  #define TAMPC_INTPEND_WRITEERROR_Msk (0x1UL << TAMPC_INTPEND_WRITEERROR_Pos)
  #define TAMPC_INTPEND_WRITEERROR_Min (0x0UL)
  #define TAMPC_INTPEND_WRITEERROR_Max (0x1UL)
  #define TAMPC_INTPEND_WRITEERROR_NotPending (0x0UL)
  #define TAMPC_INTPEND_WRITEERROR_Pending (0x1UL)


/* TAMPC_STATUS: The tamper controller status. */
  #define TAMPC_STATUS_ResetValue (0x00000000UL)

/* ACTIVESHIELD @Bit 0 : Active shield detector detected an error. */
  #define TAMPC_STATUS_ACTIVESHIELD_Pos (0UL)
  #define TAMPC_STATUS_ACTIVESHIELD_Msk (0x1UL << TAMPC_STATUS_ACTIVESHIELD_Pos)
  #define TAMPC_STATUS_ACTIVESHIELD_Min (0x0UL)
  #define TAMPC_STATUS_ACTIVESHIELD_Max (0x1UL)
  #define TAMPC_STATUS_ACTIVESHIELD_NotDetected (0x0UL)
  #define TAMPC_STATUS_ACTIVESHIELD_Detected (0x1UL)

/* PROTECT @Bit 4 : Error detected for the protected signals. */
  #define TAMPC_STATUS_PROTECT_Pos (4UL)
  #define TAMPC_STATUS_PROTECT_Msk (0x1UL << TAMPC_STATUS_PROTECT_Pos)
  #define TAMPC_STATUS_PROTECT_Min (0x0UL)
  #define TAMPC_STATUS_PROTECT_Max (0x1UL)
  #define TAMPC_STATUS_PROTECT_NotDetected (0x0UL)
  #define TAMPC_STATUS_PROTECT_Detected (0x1UL)

/* CRACENTAMP @Bit 5 : CRACEN detected an error. */
  #define TAMPC_STATUS_CRACENTAMP_Pos (5UL)
  #define TAMPC_STATUS_CRACENTAMP_Msk (0x1UL << TAMPC_STATUS_CRACENTAMP_Pos)
  #define TAMPC_STATUS_CRACENTAMP_Min (0x0UL)
  #define TAMPC_STATUS_CRACENTAMP_Max (0x1UL)
  #define TAMPC_STATUS_CRACENTAMP_NotDetected (0x0UL)
  #define TAMPC_STATUS_CRACENTAMP_Detected (0x1UL)

/* GLITCHSLOWDOMAIN0 @Bit 8 : Slow domain glitch detector 0 detected an error. */
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Pos (8UL)
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Msk (0x1UL << TAMPC_STATUS_GLITCHSLOWDOMAIN0_Pos) /*!< Bit mask of GLITCHSLOWDOMAIN0
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Min (0x0UL)
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Max (0x1UL)
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_NotDetected (0x0UL)
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Detected (0x1UL)

/* GLITCHFASTDOMAIN0 @Bit 12 : Fast domain glitch detector 0 detected an error. */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Pos (12UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Msk (0x1UL << TAMPC_STATUS_GLITCHFASTDOMAIN0_Pos) /*!< Bit mask of GLITCHFASTDOMAIN0
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Min (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Max (0x1UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_NotDetected (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Detected (0x1UL)

/* GLITCHFASTDOMAIN1 @Bit 13 : Fast domain glitch detector 1 detected an error. */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Pos (13UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Msk (0x1UL << TAMPC_STATUS_GLITCHFASTDOMAIN1_Pos) /*!< Bit mask of GLITCHFASTDOMAIN1
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Min (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Max (0x1UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_NotDetected (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Detected (0x1UL)

/* GLITCHFASTDOMAIN2 @Bit 14 : Fast domain glitch detector 2 detected an error. */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Pos (14UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Msk (0x1UL << TAMPC_STATUS_GLITCHFASTDOMAIN2_Pos) /*!< Bit mask of GLITCHFASTDOMAIN2
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Min (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Max (0x1UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_NotDetected (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Detected (0x1UL)

/* GLITCHFASTDOMAIN3 @Bit 15 : Fast domain glitch detector 3 detected an error. */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Pos (15UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Msk (0x1UL << TAMPC_STATUS_GLITCHFASTDOMAIN3_Pos) /*!< Bit mask of GLITCHFASTDOMAIN3
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Min (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Max (0x1UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_NotDetected (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Detected (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TEMP                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct TEMP ======================================================= */
/**
  * @brief Temperature Sensor
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_DATARDY;
    __IM uint32_t RESERVED2[31];
    __IOM uint32_t PUBLISH_DATARDY;
    __IM uint32_t RESERVED3[96];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED4[127];
    __IM int32_t  TEMP;
    __IM uint32_t RESERVED5[5];
    __IOM uint32_t A0;
    __IOM uint32_t A1;
    __IOM uint32_t A2;
    __IOM uint32_t A3;
    __IOM uint32_t A4;
    __IOM uint32_t A5;
    __IOM uint32_t A6;
    __IM uint32_t RESERVED6;
    __IOM uint32_t B0;
    __IOM uint32_t B1;
    __IOM uint32_t B2;
    __IOM uint32_t B3;
    __IOM uint32_t B4;
    __IOM uint32_t B5;
    __IOM uint32_t B6;
    __IM uint32_t RESERVED7;
    __IOM uint32_t T0;
    __IOM uint32_t T1;
    __IOM uint32_t T2;
    __IOM uint32_t T3;
    __IOM uint32_t T4;
    __IOM uint32_t T5;
  } NRF_TEMP_Type;

/* TEMP_TASKS_START: Start temperature measurement */
  #define TEMP_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start temperature measurement */
  #define TEMP_TASKS_START_TASKS_START_Pos (0UL)
  #define TEMP_TASKS_START_TASKS_START_Msk (0x1UL << TEMP_TASKS_START_TASKS_START_Pos)
  #define TEMP_TASKS_START_TASKS_START_Min (0x1UL)
  #define TEMP_TASKS_START_TASKS_START_Max (0x1UL)
  #define TEMP_TASKS_START_TASKS_START_Trigger (0x1UL)


/* TEMP_TASKS_STOP: Stop temperature measurement */
  #define TEMP_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop temperature measurement */
  #define TEMP_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define TEMP_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TEMP_TASKS_STOP_TASKS_STOP_Pos)
  #define TEMP_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define TEMP_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define TEMP_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* TEMP_SUBSCRIBE_START: Subscribe configuration for task START */
  #define TEMP_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define TEMP_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define TEMP_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << TEMP_SUBSCRIBE_START_CHIDX_Pos)
  #define TEMP_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define TEMP_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TEMP_SUBSCRIBE_START_EN_Pos (31UL)
  #define TEMP_SUBSCRIBE_START_EN_Msk (0x1UL << TEMP_SUBSCRIBE_START_EN_Pos)
  #define TEMP_SUBSCRIBE_START_EN_Min (0x0UL)
  #define TEMP_SUBSCRIBE_START_EN_Max (0x1UL)
  #define TEMP_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define TEMP_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* TEMP_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define TEMP_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TEMP_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define TEMP_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TEMP_SUBSCRIBE_STOP_CHIDX_Pos)
  #define TEMP_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define TEMP_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TEMP_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define TEMP_SUBSCRIBE_STOP_EN_Msk (0x1UL << TEMP_SUBSCRIBE_STOP_EN_Pos)
  #define TEMP_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define TEMP_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define TEMP_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define TEMP_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* TEMP_EVENTS_DATARDY: Temperature measurement complete, data ready */
  #define TEMP_EVENTS_DATARDY_ResetValue (0x00000000UL)

/* EVENTS_DATARDY @Bit 0 : Temperature measurement complete, data ready */
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Pos (0UL)
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Msk (0x1UL << TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Pos) /*!< Bit mask of
                                                                            EVENTS_DATARDY field.*/
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Min (0x0UL)
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Max (0x1UL)
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_NotGenerated (0x0UL)
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Generated (0x1UL)


/* TEMP_PUBLISH_DATARDY: Publish configuration for event DATARDY */
  #define TEMP_PUBLISH_DATARDY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DATARDY will publish to */
  #define TEMP_PUBLISH_DATARDY_CHIDX_Pos (0UL)
  #define TEMP_PUBLISH_DATARDY_CHIDX_Msk (0xFFUL << TEMP_PUBLISH_DATARDY_CHIDX_Pos)
  #define TEMP_PUBLISH_DATARDY_CHIDX_Min (0x00UL)
  #define TEMP_PUBLISH_DATARDY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TEMP_PUBLISH_DATARDY_EN_Pos (31UL)
  #define TEMP_PUBLISH_DATARDY_EN_Msk (0x1UL << TEMP_PUBLISH_DATARDY_EN_Pos)
  #define TEMP_PUBLISH_DATARDY_EN_Min (0x0UL)
  #define TEMP_PUBLISH_DATARDY_EN_Max (0x1UL)
  #define TEMP_PUBLISH_DATARDY_EN_Disabled (0x0UL)
  #define TEMP_PUBLISH_DATARDY_EN_Enabled (0x1UL)


/* TEMP_INTENSET: Enable interrupt */
  #define TEMP_INTENSET_ResetValue (0x00000000UL)

/* DATARDY @Bit 0 : Write '1' to enable interrupt for event DATARDY */
  #define TEMP_INTENSET_DATARDY_Pos (0UL)
  #define TEMP_INTENSET_DATARDY_Msk (0x1UL << TEMP_INTENSET_DATARDY_Pos)
  #define TEMP_INTENSET_DATARDY_Min (0x0UL)
  #define TEMP_INTENSET_DATARDY_Max (0x1UL)
  #define TEMP_INTENSET_DATARDY_Set (0x1UL)
  #define TEMP_INTENSET_DATARDY_Disabled (0x0UL)
  #define TEMP_INTENSET_DATARDY_Enabled (0x1UL)


/* TEMP_INTENCLR: Disable interrupt */
  #define TEMP_INTENCLR_ResetValue (0x00000000UL)

/* DATARDY @Bit 0 : Write '1' to disable interrupt for event DATARDY */
  #define TEMP_INTENCLR_DATARDY_Pos (0UL)
  #define TEMP_INTENCLR_DATARDY_Msk (0x1UL << TEMP_INTENCLR_DATARDY_Pos)
  #define TEMP_INTENCLR_DATARDY_Min (0x0UL)
  #define TEMP_INTENCLR_DATARDY_Max (0x1UL)
  #define TEMP_INTENCLR_DATARDY_Clear (0x1UL)
  #define TEMP_INTENCLR_DATARDY_Disabled (0x0UL)
  #define TEMP_INTENCLR_DATARDY_Enabled (0x1UL)


/* TEMP_TEMP: Temperature in degC (0.25deg steps) */
  #define TEMP_TEMP_ResetValue (0x00000000UL)

/* TEMP @Bits 0..31 : Temperature in degC (0.25deg steps) */
  #define TEMP_TEMP_TEMP_Pos (0UL)
  #define TEMP_TEMP_TEMP_Msk (0xFFFFFFFFUL << TEMP_TEMP_TEMP_Pos)


/* TEMP_A0: Slope of 1st piece wise linear function */
  #define TEMP_A0_ResetValue (0x000002D6UL)

/* A0 @Bits 0..11 : Slope of 1st piece wise linear function */
  #define TEMP_A0_A0_Pos (0UL)
  #define TEMP_A0_A0_Msk (0xFFFUL << TEMP_A0_A0_Pos)


/* TEMP_A1: Slope of 2nd piece wise linear function */
  #define TEMP_A1_ResetValue (0x0000032DUL)

/* A1 @Bits 0..11 : Slope of 2nd piece wise linear function */
  #define TEMP_A1_A1_Pos (0UL)
  #define TEMP_A1_A1_Msk (0xFFFUL << TEMP_A1_A1_Pos)


/* TEMP_A2: Slope of 3rd piece wise linear function */
  #define TEMP_A2_ResetValue (0x00000384UL)

/* A2 @Bits 0..11 : Slope of 3rd piece wise linear function */
  #define TEMP_A2_A2_Pos (0UL)
  #define TEMP_A2_A2_Msk (0xFFFUL << TEMP_A2_A2_Pos)


/* TEMP_A3: Slope of 4th piece wise linear function */
  #define TEMP_A3_ResetValue (0x000003E9UL)

/* A3 @Bits 0..11 : Slope of 4th piece wise linear function */
  #define TEMP_A3_A3_Pos (0UL)
  #define TEMP_A3_A3_Msk (0xFFFUL << TEMP_A3_A3_Pos)


/* TEMP_A4: Slope of 5th piece wise linear function */
  #define TEMP_A4_ResetValue (0x0000046FUL)

/* A4 @Bits 0..11 : Slope of 5th piece wise linear function */
  #define TEMP_A4_A4_Pos (0UL)
  #define TEMP_A4_A4_Msk (0xFFFUL << TEMP_A4_A4_Pos)


/* TEMP_A5: Slope of 6th piece wise linear function */
  #define TEMP_A5_ResetValue (0x00000522UL)

/* A5 @Bits 0..11 : Slope of 6th piece wise linear function */
  #define TEMP_A5_A5_Pos (0UL)
  #define TEMP_A5_A5_Msk (0xFFFUL << TEMP_A5_A5_Pos)


/* TEMP_A6: Slope of 7th piece wise linear function */
  #define TEMP_A6_ResetValue (0x000005B7UL)

/* A6 @Bits 0..11 : Slope of 7th piece wise linear function */
  #define TEMP_A6_A6_Pos (0UL)
  #define TEMP_A6_A6_Msk (0xFFFUL << TEMP_A6_A6_Pos)


/* TEMP_B0: y-intercept of 1st piece wise linear function */
  #define TEMP_B0_ResetValue (0x00000FD6UL)

/* B0 @Bits 0..11 : y-intercept of 1st piece wise linear function */
  #define TEMP_B0_B0_Pos (0UL)
  #define TEMP_B0_B0_Msk (0xFFFUL << TEMP_B0_B0_Pos)


/* TEMP_B1: y-intercept of 2nd piece wise linear function */
  #define TEMP_B1_ResetValue (0x00000F76UL)

/* B1 @Bits 0..11 : y-intercept of 2nd piece wise linear function */
  #define TEMP_B1_B1_Pos (0UL)
  #define TEMP_B1_B1_Msk (0xFFFUL << TEMP_B1_B1_Pos)


/* TEMP_B2: y-intercept of 3rd piece wise linear function */
  #define TEMP_B2_ResetValue (0x00000F8AUL)

/* B2 @Bits 0..11 : y-intercept of 3rd piece wise linear function */
  #define TEMP_B2_B2_Pos (0UL)
  #define TEMP_B2_B2_Msk (0xFFFUL << TEMP_B2_B2_Pos)


/* TEMP_B3: y-intercept of 4th piece wise linear function */
  #define TEMP_B3_ResetValue (0x00000FF8UL)

/* B3 @Bits 0..11 : y-intercept of 4th piece wise linear function */
  #define TEMP_B3_B3_Pos (0UL)
  #define TEMP_B3_B3_Msk (0xFFFUL << TEMP_B3_B3_Pos)


/* TEMP_B4: y-intercept of 5th piece wise linear function */
  #define TEMP_B4_ResetValue (0x000000CCUL)

/* B4 @Bits 0..11 : y-intercept of 5th piece wise linear function */
  #define TEMP_B4_B4_Pos (0UL)
  #define TEMP_B4_B4_Msk (0xFFFUL << TEMP_B4_B4_Pos)


/* TEMP_B5: y-intercept of 6th piece wise linear function */
  #define TEMP_B5_ResetValue (0x00000207UL)

/* B5 @Bits 0..11 : y-intercept of 6th piece wise linear function */
  #define TEMP_B5_B5_Pos (0UL)
  #define TEMP_B5_B5_Msk (0xFFFUL << TEMP_B5_B5_Pos)


/* TEMP_B6: y-intercept of 7th piece wise linear function */
  #define TEMP_B6_ResetValue (0x00000558UL)

/* B6 @Bits 0..11 : y-intercept of 7th piece wise linear function */
  #define TEMP_B6_B6_Pos (0UL)
  #define TEMP_B6_B6_Msk (0xFFFUL << TEMP_B6_B6_Pos)


/* TEMP_T0: End point of 1st piece wise linear function */
  #define TEMP_T0_ResetValue (0x000000E2UL)

/* T0 @Bits 0..7 : End point of 1st piece wise linear function */
  #define TEMP_T0_T0_Pos (0UL)
  #define TEMP_T0_T0_Msk (0xFFUL << TEMP_T0_T0_Pos)


/* TEMP_T1: End point of 2nd piece wise linear function */
  #define TEMP_T1_ResetValue (0x00000002UL)

/* T1 @Bits 0..7 : End point of 2nd piece wise linear function */
  #define TEMP_T1_T1_Pos (0UL)
  #define TEMP_T1_T1_Msk (0xFFUL << TEMP_T1_T1_Pos)


/* TEMP_T2: End point of 3rd piece wise linear function */
  #define TEMP_T2_ResetValue (0x0000001FUL)

/* T2 @Bits 0..7 : End point of 3rd piece wise linear function */
  #define TEMP_T2_T2_Pos (0UL)
  #define TEMP_T2_T2_Msk (0xFFUL << TEMP_T2_T2_Pos)


/* TEMP_T3: End point of 4th piece wise linear function */
  #define TEMP_T3_ResetValue (0x00000038UL)

/* T3 @Bits 0..7 : End point of 4th piece wise linear function */
  #define TEMP_T3_T3_Pos (0UL)
  #define TEMP_T3_T3_Msk (0xFFUL << TEMP_T3_T3_Pos)


/* TEMP_T4: End point of 5th piece wise linear function */
  #define TEMP_T4_ResetValue (0x0000004FUL)

/* T4 @Bits 0..7 : End point of 5th piece wise linear function */
  #define TEMP_T4_T4_Pos (0UL)
  #define TEMP_T4_T4_Msk (0xFFUL << TEMP_T4_T4_Pos)


/* TEMP_T5: End point of 6th piece wise linear function */
  #define TEMP_T5_ResetValue (0x00000066UL)

/* T5 @Bits 0..7 : End point of 6th piece wise linear function */
  #define TEMP_T5_T5_Pos (0UL)
  #define TEMP_T5_T5_Msk (0xFFUL << TEMP_T5_T5_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TIMER                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct TIMER ======================================================= */
/**
  * @brief Timer/Counter
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_COUNT;
    __OM uint32_t TASKS_CLEAR;
    __IM uint32_t RESERVED[12];
    __OM uint32_t TASKS_CAPTURE[8];
    __IM uint32_t RESERVED1[8];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_COUNT;
    __IOM uint32_t SUBSCRIBE_CLEAR;
    __IM uint32_t RESERVED2[12];
    __IOM uint32_t SUBSCRIBE_CAPTURE[8];
    __IM uint32_t RESERVED3[24];
    __IOM uint32_t EVENTS_COMPARE[8];
    __IM uint32_t RESERVED4[24];
    __IOM uint32_t PUBLISH_COMPARE[8];
    __IM uint32_t RESERVED5[8];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED6[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED7[126];
    __IOM uint32_t MODE;
    __IOM uint32_t BITMODE;
    __IM uint32_t RESERVED8;
    __IOM uint32_t PRESCALER;
    __IM uint32_t RESERVED9[11];
    __IOM uint32_t CC[8];
    __IM uint32_t RESERVED10[8];
    __IOM uint32_t ONESHOTEN[8];                     /*!< (@ 0x00000580) Enable one-shot operation for Capture/Compare channel
                                                                         n*/
  } NRF_TIMER_Type;

/* TIMER_TASKS_START: Start Timer */
  #define TIMER_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start Timer */
  #define TIMER_TASKS_START_TASKS_START_Pos (0UL)
  #define TIMER_TASKS_START_TASKS_START_Msk (0x1UL << TIMER_TASKS_START_TASKS_START_Pos)
  #define TIMER_TASKS_START_TASKS_START_Min (0x1UL)
  #define TIMER_TASKS_START_TASKS_START_Max (0x1UL)
  #define TIMER_TASKS_START_TASKS_START_Trigger (0x1UL)


/* TIMER_TASKS_STOP: Stop Timer */
  #define TIMER_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop Timer */
  #define TIMER_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define TIMER_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TIMER_TASKS_STOP_TASKS_STOP_Pos)
  #define TIMER_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define TIMER_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define TIMER_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* TIMER_TASKS_COUNT: Increment Timer (Counter mode only) */
  #define TIMER_TASKS_COUNT_ResetValue (0x00000000UL)

/* TASKS_COUNT @Bit 0 : Increment Timer (Counter mode only) */
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Pos (0UL)
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Msk (0x1UL << TIMER_TASKS_COUNT_TASKS_COUNT_Pos)
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Min (0x1UL)
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Max (0x1UL)
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Trigger (0x1UL)


/* TIMER_TASKS_CLEAR: Clear time */
  #define TIMER_TASKS_CLEAR_ResetValue (0x00000000UL)

/* TASKS_CLEAR @Bit 0 : Clear time */
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Pos (0UL)
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Msk (0x1UL << TIMER_TASKS_CLEAR_TASKS_CLEAR_Pos)
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Min (0x1UL)
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Max (0x1UL)
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Trigger (0x1UL)


/* TIMER_TASKS_CAPTURE: Capture Timer value to CC[n] register */
  #define TIMER_TASKS_CAPTURE_MaxCount (8UL)
  #define TIMER_TASKS_CAPTURE_MaxIndex (7UL)
  #define TIMER_TASKS_CAPTURE_MinIndex (0UL)
  #define TIMER_TASKS_CAPTURE_ResetValue (0x00000000UL)

/* TASKS_CAPTURE @Bit 0 : Capture Timer value to CC[n] register */
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Pos (0UL)
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Msk (0x1UL << TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Pos) /*!< Bit mask of TASKS_CAPTURE
                                                                            field.*/
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Min (0x1UL)
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Max (0x1UL)
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Trigger (0x1UL)


/* TIMER_SUBSCRIBE_START: Subscribe configuration for task START */
  #define TIMER_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define TIMER_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define TIMER_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_START_CHIDX_Pos)
  #define TIMER_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define TIMER_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_START_EN_Pos (31UL)
  #define TIMER_SUBSCRIBE_START_EN_Msk (0x1UL << TIMER_SUBSCRIBE_START_EN_Pos)
  #define TIMER_SUBSCRIBE_START_EN_Min (0x0UL)
  #define TIMER_SUBSCRIBE_START_EN_Max (0x1UL)
  #define TIMER_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define TIMER_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* TIMER_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define TIMER_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TIMER_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define TIMER_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_STOP_CHIDX_Pos)
  #define TIMER_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define TIMER_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define TIMER_SUBSCRIBE_STOP_EN_Msk (0x1UL << TIMER_SUBSCRIBE_STOP_EN_Pos)
  #define TIMER_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define TIMER_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define TIMER_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define TIMER_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* TIMER_SUBSCRIBE_COUNT: Subscribe configuration for task COUNT */
  #define TIMER_SUBSCRIBE_COUNT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task COUNT will subscribe to */
  #define TIMER_SUBSCRIBE_COUNT_CHIDX_Pos (0UL)
  #define TIMER_SUBSCRIBE_COUNT_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_COUNT_CHIDX_Pos)
  #define TIMER_SUBSCRIBE_COUNT_CHIDX_Min (0x00UL)
  #define TIMER_SUBSCRIBE_COUNT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_COUNT_EN_Pos (31UL)
  #define TIMER_SUBSCRIBE_COUNT_EN_Msk (0x1UL << TIMER_SUBSCRIBE_COUNT_EN_Pos)
  #define TIMER_SUBSCRIBE_COUNT_EN_Min (0x0UL)
  #define TIMER_SUBSCRIBE_COUNT_EN_Max (0x1UL)
  #define TIMER_SUBSCRIBE_COUNT_EN_Disabled (0x0UL)
  #define TIMER_SUBSCRIBE_COUNT_EN_Enabled (0x1UL)


/* TIMER_SUBSCRIBE_CLEAR: Subscribe configuration for task CLEAR */
  #define TIMER_SUBSCRIBE_CLEAR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CLEAR will subscribe to */
  #define TIMER_SUBSCRIBE_CLEAR_CHIDX_Pos (0UL)
  #define TIMER_SUBSCRIBE_CLEAR_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_CLEAR_CHIDX_Pos)
  #define TIMER_SUBSCRIBE_CLEAR_CHIDX_Min (0x00UL)
  #define TIMER_SUBSCRIBE_CLEAR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_CLEAR_EN_Pos (31UL)
  #define TIMER_SUBSCRIBE_CLEAR_EN_Msk (0x1UL << TIMER_SUBSCRIBE_CLEAR_EN_Pos)
  #define TIMER_SUBSCRIBE_CLEAR_EN_Min (0x0UL)
  #define TIMER_SUBSCRIBE_CLEAR_EN_Max (0x1UL)
  #define TIMER_SUBSCRIBE_CLEAR_EN_Disabled (0x0UL)
  #define TIMER_SUBSCRIBE_CLEAR_EN_Enabled (0x1UL)


/* TIMER_SUBSCRIBE_CAPTURE: Subscribe configuration for task CAPTURE[n] */
  #define TIMER_SUBSCRIBE_CAPTURE_MaxCount (8UL)
  #define TIMER_SUBSCRIBE_CAPTURE_MaxIndex (7UL)
  #define TIMER_SUBSCRIBE_CAPTURE_MinIndex (0UL)
  #define TIMER_SUBSCRIBE_CAPTURE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CAPTURE[n] will subscribe to */
  #define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Pos (0UL)
  #define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_CAPTURE_CHIDX_Pos)
  #define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Min (0x00UL)
  #define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Pos (31UL)
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Msk (0x1UL << TIMER_SUBSCRIBE_CAPTURE_EN_Pos)
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Min (0x0UL)
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Max (0x1UL)
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Disabled (0x0UL)
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Enabled (0x1UL)


/* TIMER_EVENTS_COMPARE: Compare event on CC[n] match */
  #define TIMER_EVENTS_COMPARE_MaxCount (8UL)
  #define TIMER_EVENTS_COMPARE_MaxIndex (7UL)
  #define TIMER_EVENTS_COMPARE_MinIndex (0UL)
  #define TIMER_EVENTS_COMPARE_ResetValue (0x00000000UL)

/* EVENTS_COMPARE @Bit 0 : Compare event on CC[n] match */
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Pos (0UL)
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Msk (0x1UL << TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Pos) /*!< Bit mask of
                                                                            EVENTS_COMPARE field.*/
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Min (0x0UL)
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Max (0x1UL)
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_NotGenerated (0x0UL)
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Generated (0x1UL)


/* TIMER_PUBLISH_COMPARE: Publish configuration for event COMPARE[n] */
  #define TIMER_PUBLISH_COMPARE_MaxCount (8UL)
  #define TIMER_PUBLISH_COMPARE_MaxIndex (7UL)
  #define TIMER_PUBLISH_COMPARE_MinIndex (0UL)
  #define TIMER_PUBLISH_COMPARE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event COMPARE[n] will publish to */
  #define TIMER_PUBLISH_COMPARE_CHIDX_Pos (0UL)
  #define TIMER_PUBLISH_COMPARE_CHIDX_Msk (0xFFUL << TIMER_PUBLISH_COMPARE_CHIDX_Pos)
  #define TIMER_PUBLISH_COMPARE_CHIDX_Min (0x00UL)
  #define TIMER_PUBLISH_COMPARE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TIMER_PUBLISH_COMPARE_EN_Pos (31UL)
  #define TIMER_PUBLISH_COMPARE_EN_Msk (0x1UL << TIMER_PUBLISH_COMPARE_EN_Pos)
  #define TIMER_PUBLISH_COMPARE_EN_Min (0x0UL)
  #define TIMER_PUBLISH_COMPARE_EN_Max (0x1UL)
  #define TIMER_PUBLISH_COMPARE_EN_Disabled (0x0UL)
  #define TIMER_PUBLISH_COMPARE_EN_Enabled (0x1UL)


/* TIMER_SHORTS: Shortcuts between local events and tasks */
  #define TIMER_SHORTS_ResetValue (0x00000000UL)

/* COMPARE0_CLEAR @Bit 0 : Shortcut between event COMPARE[0] and task CLEAR */
  #define TIMER_SHORTS_COMPARE0_CLEAR_Pos (0UL)
  #define TIMER_SHORTS_COMPARE0_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE0_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE0_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE0_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE0_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE0_CLEAR_Enabled (0x1UL)

/* COMPARE1_CLEAR @Bit 1 : Shortcut between event COMPARE[1] and task CLEAR */
  #define TIMER_SHORTS_COMPARE1_CLEAR_Pos (1UL)
  #define TIMER_SHORTS_COMPARE1_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE1_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE1_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE1_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE1_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE1_CLEAR_Enabled (0x1UL)

/* COMPARE2_CLEAR @Bit 2 : Shortcut between event COMPARE[2] and task CLEAR */
  #define TIMER_SHORTS_COMPARE2_CLEAR_Pos (2UL)
  #define TIMER_SHORTS_COMPARE2_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE2_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE2_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE2_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE2_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE2_CLEAR_Enabled (0x1UL)

/* COMPARE3_CLEAR @Bit 3 : Shortcut between event COMPARE[3] and task CLEAR */
  #define TIMER_SHORTS_COMPARE3_CLEAR_Pos (3UL)
  #define TIMER_SHORTS_COMPARE3_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE3_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE3_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE3_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE3_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE3_CLEAR_Enabled (0x1UL)

/* COMPARE4_CLEAR @Bit 4 : Shortcut between event COMPARE[4] and task CLEAR */
  #define TIMER_SHORTS_COMPARE4_CLEAR_Pos (4UL)
  #define TIMER_SHORTS_COMPARE4_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE4_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE4_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE4_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE4_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE4_CLEAR_Enabled (0x1UL)

/* COMPARE5_CLEAR @Bit 5 : Shortcut between event COMPARE[5] and task CLEAR */
  #define TIMER_SHORTS_COMPARE5_CLEAR_Pos (5UL)
  #define TIMER_SHORTS_COMPARE5_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE5_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE5_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE5_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE5_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE5_CLEAR_Enabled (0x1UL)

/* COMPARE6_CLEAR @Bit 6 : Shortcut between event COMPARE[6] and task CLEAR */
  #define TIMER_SHORTS_COMPARE6_CLEAR_Pos (6UL)
  #define TIMER_SHORTS_COMPARE6_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE6_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE6_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE6_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE6_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE6_CLEAR_Enabled (0x1UL)

/* COMPARE7_CLEAR @Bit 7 : Shortcut between event COMPARE[7] and task CLEAR */
  #define TIMER_SHORTS_COMPARE7_CLEAR_Pos (7UL)
  #define TIMER_SHORTS_COMPARE7_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE7_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE7_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE7_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE7_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE7_CLEAR_Enabled (0x1UL)

/* COMPARE0_STOP @Bit 16 : Shortcut between event COMPARE[0] and task STOP */
  #define TIMER_SHORTS_COMPARE0_STOP_Pos (16UL)
  #define TIMER_SHORTS_COMPARE0_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE0_STOP_Pos)
  #define TIMER_SHORTS_COMPARE0_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE0_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE0_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE0_STOP_Enabled (0x1UL)

/* COMPARE1_STOP @Bit 17 : Shortcut between event COMPARE[1] and task STOP */
  #define TIMER_SHORTS_COMPARE1_STOP_Pos (17UL)
  #define TIMER_SHORTS_COMPARE1_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE1_STOP_Pos)
  #define TIMER_SHORTS_COMPARE1_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE1_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE1_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE1_STOP_Enabled (0x1UL)

/* COMPARE2_STOP @Bit 18 : Shortcut between event COMPARE[2] and task STOP */
  #define TIMER_SHORTS_COMPARE2_STOP_Pos (18UL)
  #define TIMER_SHORTS_COMPARE2_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE2_STOP_Pos)
  #define TIMER_SHORTS_COMPARE2_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE2_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE2_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE2_STOP_Enabled (0x1UL)

/* COMPARE3_STOP @Bit 19 : Shortcut between event COMPARE[3] and task STOP */
  #define TIMER_SHORTS_COMPARE3_STOP_Pos (19UL)
  #define TIMER_SHORTS_COMPARE3_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE3_STOP_Pos)
  #define TIMER_SHORTS_COMPARE3_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE3_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE3_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE3_STOP_Enabled (0x1UL)

/* COMPARE4_STOP @Bit 20 : Shortcut between event COMPARE[4] and task STOP */
  #define TIMER_SHORTS_COMPARE4_STOP_Pos (20UL)
  #define TIMER_SHORTS_COMPARE4_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE4_STOP_Pos)
  #define TIMER_SHORTS_COMPARE4_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE4_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE4_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE4_STOP_Enabled (0x1UL)

/* COMPARE5_STOP @Bit 21 : Shortcut between event COMPARE[5] and task STOP */
  #define TIMER_SHORTS_COMPARE5_STOP_Pos (21UL)
  #define TIMER_SHORTS_COMPARE5_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE5_STOP_Pos)
  #define TIMER_SHORTS_COMPARE5_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE5_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE5_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE5_STOP_Enabled (0x1UL)

/* COMPARE6_STOP @Bit 22 : Shortcut between event COMPARE[6] and task STOP */
  #define TIMER_SHORTS_COMPARE6_STOP_Pos (22UL)
  #define TIMER_SHORTS_COMPARE6_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE6_STOP_Pos)
  #define TIMER_SHORTS_COMPARE6_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE6_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE6_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE6_STOP_Enabled (0x1UL)

/* COMPARE7_STOP @Bit 23 : Shortcut between event COMPARE[7] and task STOP */
  #define TIMER_SHORTS_COMPARE7_STOP_Pos (23UL)
  #define TIMER_SHORTS_COMPARE7_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE7_STOP_Pos)
  #define TIMER_SHORTS_COMPARE7_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE7_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE7_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE7_STOP_Enabled (0x1UL)


/* TIMER_INTEN: Enable or disable interrupt */
  #define TIMER_INTEN_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 16 : Enable or disable interrupt for event COMPARE[0] */
  #define TIMER_INTEN_COMPARE0_Pos (16UL)
  #define TIMER_INTEN_COMPARE0_Msk (0x1UL << TIMER_INTEN_COMPARE0_Pos)
  #define TIMER_INTEN_COMPARE0_Min (0x0UL)
  #define TIMER_INTEN_COMPARE0_Max (0x1UL)
  #define TIMER_INTEN_COMPARE0_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 17 : Enable or disable interrupt for event COMPARE[1] */
  #define TIMER_INTEN_COMPARE1_Pos (17UL)
  #define TIMER_INTEN_COMPARE1_Msk (0x1UL << TIMER_INTEN_COMPARE1_Pos)
  #define TIMER_INTEN_COMPARE1_Min (0x0UL)
  #define TIMER_INTEN_COMPARE1_Max (0x1UL)
  #define TIMER_INTEN_COMPARE1_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 18 : Enable or disable interrupt for event COMPARE[2] */
  #define TIMER_INTEN_COMPARE2_Pos (18UL)
  #define TIMER_INTEN_COMPARE2_Msk (0x1UL << TIMER_INTEN_COMPARE2_Pos)
  #define TIMER_INTEN_COMPARE2_Min (0x0UL)
  #define TIMER_INTEN_COMPARE2_Max (0x1UL)
  #define TIMER_INTEN_COMPARE2_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 19 : Enable or disable interrupt for event COMPARE[3] */
  #define TIMER_INTEN_COMPARE3_Pos (19UL)
  #define TIMER_INTEN_COMPARE3_Msk (0x1UL << TIMER_INTEN_COMPARE3_Pos)
  #define TIMER_INTEN_COMPARE3_Min (0x0UL)
  #define TIMER_INTEN_COMPARE3_Max (0x1UL)
  #define TIMER_INTEN_COMPARE3_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 20 : Enable or disable interrupt for event COMPARE[4] */
  #define TIMER_INTEN_COMPARE4_Pos (20UL)
  #define TIMER_INTEN_COMPARE4_Msk (0x1UL << TIMER_INTEN_COMPARE4_Pos)
  #define TIMER_INTEN_COMPARE4_Min (0x0UL)
  #define TIMER_INTEN_COMPARE4_Max (0x1UL)
  #define TIMER_INTEN_COMPARE4_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 21 : Enable or disable interrupt for event COMPARE[5] */
  #define TIMER_INTEN_COMPARE5_Pos (21UL)
  #define TIMER_INTEN_COMPARE5_Msk (0x1UL << TIMER_INTEN_COMPARE5_Pos)
  #define TIMER_INTEN_COMPARE5_Min (0x0UL)
  #define TIMER_INTEN_COMPARE5_Max (0x1UL)
  #define TIMER_INTEN_COMPARE5_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 22 : Enable or disable interrupt for event COMPARE[6] */
  #define TIMER_INTEN_COMPARE6_Pos (22UL)
  #define TIMER_INTEN_COMPARE6_Msk (0x1UL << TIMER_INTEN_COMPARE6_Pos)
  #define TIMER_INTEN_COMPARE6_Min (0x0UL)
  #define TIMER_INTEN_COMPARE6_Max (0x1UL)
  #define TIMER_INTEN_COMPARE6_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 23 : Enable or disable interrupt for event COMPARE[7] */
  #define TIMER_INTEN_COMPARE7_Pos (23UL)
  #define TIMER_INTEN_COMPARE7_Msk (0x1UL << TIMER_INTEN_COMPARE7_Pos)
  #define TIMER_INTEN_COMPARE7_Min (0x0UL)
  #define TIMER_INTEN_COMPARE7_Max (0x1UL)
  #define TIMER_INTEN_COMPARE7_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE7_Enabled (0x1UL)


/* TIMER_INTENSET: Enable interrupt */
  #define TIMER_INTENSET_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 16 : Write '1' to enable interrupt for event COMPARE[0] */
  #define TIMER_INTENSET_COMPARE0_Pos (16UL)
  #define TIMER_INTENSET_COMPARE0_Msk (0x1UL << TIMER_INTENSET_COMPARE0_Pos)
  #define TIMER_INTENSET_COMPARE0_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE0_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE0_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE0_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 17 : Write '1' to enable interrupt for event COMPARE[1] */
  #define TIMER_INTENSET_COMPARE1_Pos (17UL)
  #define TIMER_INTENSET_COMPARE1_Msk (0x1UL << TIMER_INTENSET_COMPARE1_Pos)
  #define TIMER_INTENSET_COMPARE1_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE1_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE1_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE1_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 18 : Write '1' to enable interrupt for event COMPARE[2] */
  #define TIMER_INTENSET_COMPARE2_Pos (18UL)
  #define TIMER_INTENSET_COMPARE2_Msk (0x1UL << TIMER_INTENSET_COMPARE2_Pos)
  #define TIMER_INTENSET_COMPARE2_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE2_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE2_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE2_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 19 : Write '1' to enable interrupt for event COMPARE[3] */
  #define TIMER_INTENSET_COMPARE3_Pos (19UL)
  #define TIMER_INTENSET_COMPARE3_Msk (0x1UL << TIMER_INTENSET_COMPARE3_Pos)
  #define TIMER_INTENSET_COMPARE3_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE3_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE3_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE3_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 20 : Write '1' to enable interrupt for event COMPARE[4] */
  #define TIMER_INTENSET_COMPARE4_Pos (20UL)
  #define TIMER_INTENSET_COMPARE4_Msk (0x1UL << TIMER_INTENSET_COMPARE4_Pos)
  #define TIMER_INTENSET_COMPARE4_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE4_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE4_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE4_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 21 : Write '1' to enable interrupt for event COMPARE[5] */
  #define TIMER_INTENSET_COMPARE5_Pos (21UL)
  #define TIMER_INTENSET_COMPARE5_Msk (0x1UL << TIMER_INTENSET_COMPARE5_Pos)
  #define TIMER_INTENSET_COMPARE5_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE5_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE5_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE5_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 22 : Write '1' to enable interrupt for event COMPARE[6] */
  #define TIMER_INTENSET_COMPARE6_Pos (22UL)
  #define TIMER_INTENSET_COMPARE6_Msk (0x1UL << TIMER_INTENSET_COMPARE6_Pos)
  #define TIMER_INTENSET_COMPARE6_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE6_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE6_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE6_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 23 : Write '1' to enable interrupt for event COMPARE[7] */
  #define TIMER_INTENSET_COMPARE7_Pos (23UL)
  #define TIMER_INTENSET_COMPARE7_Msk (0x1UL << TIMER_INTENSET_COMPARE7_Pos)
  #define TIMER_INTENSET_COMPARE7_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE7_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE7_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE7_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE7_Enabled (0x1UL)


/* TIMER_INTENCLR: Disable interrupt */
  #define TIMER_INTENCLR_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 16 : Write '1' to disable interrupt for event COMPARE[0] */
  #define TIMER_INTENCLR_COMPARE0_Pos (16UL)
  #define TIMER_INTENCLR_COMPARE0_Msk (0x1UL << TIMER_INTENCLR_COMPARE0_Pos)
  #define TIMER_INTENCLR_COMPARE0_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE0_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE0_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE0_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 17 : Write '1' to disable interrupt for event COMPARE[1] */
  #define TIMER_INTENCLR_COMPARE1_Pos (17UL)
  #define TIMER_INTENCLR_COMPARE1_Msk (0x1UL << TIMER_INTENCLR_COMPARE1_Pos)
  #define TIMER_INTENCLR_COMPARE1_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE1_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE1_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE1_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 18 : Write '1' to disable interrupt for event COMPARE[2] */
  #define TIMER_INTENCLR_COMPARE2_Pos (18UL)
  #define TIMER_INTENCLR_COMPARE2_Msk (0x1UL << TIMER_INTENCLR_COMPARE2_Pos)
  #define TIMER_INTENCLR_COMPARE2_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE2_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE2_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE2_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 19 : Write '1' to disable interrupt for event COMPARE[3] */
  #define TIMER_INTENCLR_COMPARE3_Pos (19UL)
  #define TIMER_INTENCLR_COMPARE3_Msk (0x1UL << TIMER_INTENCLR_COMPARE3_Pos)
  #define TIMER_INTENCLR_COMPARE3_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE3_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE3_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE3_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 20 : Write '1' to disable interrupt for event COMPARE[4] */
  #define TIMER_INTENCLR_COMPARE4_Pos (20UL)
  #define TIMER_INTENCLR_COMPARE4_Msk (0x1UL << TIMER_INTENCLR_COMPARE4_Pos)
  #define TIMER_INTENCLR_COMPARE4_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE4_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE4_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE4_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 21 : Write '1' to disable interrupt for event COMPARE[5] */
  #define TIMER_INTENCLR_COMPARE5_Pos (21UL)
  #define TIMER_INTENCLR_COMPARE5_Msk (0x1UL << TIMER_INTENCLR_COMPARE5_Pos)
  #define TIMER_INTENCLR_COMPARE5_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE5_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE5_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE5_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 22 : Write '1' to disable interrupt for event COMPARE[6] */
  #define TIMER_INTENCLR_COMPARE6_Pos (22UL)
  #define TIMER_INTENCLR_COMPARE6_Msk (0x1UL << TIMER_INTENCLR_COMPARE6_Pos)
  #define TIMER_INTENCLR_COMPARE6_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE6_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE6_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE6_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 23 : Write '1' to disable interrupt for event COMPARE[7] */
  #define TIMER_INTENCLR_COMPARE7_Pos (23UL)
  #define TIMER_INTENCLR_COMPARE7_Msk (0x1UL << TIMER_INTENCLR_COMPARE7_Pos)
  #define TIMER_INTENCLR_COMPARE7_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE7_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE7_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE7_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE7_Enabled (0x1UL)


/* TIMER_MODE: Timer mode selection */
  #define TIMER_MODE_ResetValue (0x00000000UL)

/* MODE @Bits 0..1 : Timer mode */
  #define TIMER_MODE_MODE_Pos (0UL)
  #define TIMER_MODE_MODE_Msk (0x3UL << TIMER_MODE_MODE_Pos)
  #define TIMER_MODE_MODE_Min (0x0UL)
  #define TIMER_MODE_MODE_Max (0x2UL)
  #define TIMER_MODE_MODE_Timer (0x0UL)
  #define TIMER_MODE_MODE_Counter (0x1UL)
  #define TIMER_MODE_MODE_LowPowerCounter (0x2UL)


/* TIMER_BITMODE: Configure the number of bits used by the TIMER */
  #define TIMER_BITMODE_ResetValue (0x00000000UL)

/* BITMODE @Bits 0..1 : Timer bit width */
  #define TIMER_BITMODE_BITMODE_Pos (0UL)
  #define TIMER_BITMODE_BITMODE_Msk (0x3UL << TIMER_BITMODE_BITMODE_Pos)
  #define TIMER_BITMODE_BITMODE_Min (0x0UL)
  #define TIMER_BITMODE_BITMODE_Max (0x3UL)
  #define TIMER_BITMODE_BITMODE_16Bit (0x0UL)
  #define TIMER_BITMODE_BITMODE_08Bit (0x1UL)
  #define TIMER_BITMODE_BITMODE_24Bit (0x2UL)
  #define TIMER_BITMODE_BITMODE_32Bit (0x3UL)


/* TIMER_PRESCALER: Timer prescaler register */
  #define TIMER_PRESCALER_ResetValue (0x00000004UL)

/* PRESCALER @Bits 0..3 : Prescaler value */
  #define TIMER_PRESCALER_PRESCALER_Pos (0UL)
  #define TIMER_PRESCALER_PRESCALER_Msk (0xFUL << TIMER_PRESCALER_PRESCALER_Pos)
  #define TIMER_PRESCALER_PRESCALER_Min (0x0UL)
  #define TIMER_PRESCALER_PRESCALER_Max (0x9UL)


/* TIMER_CC: Capture/Compare register n */
  #define TIMER_CC_MaxCount (8UL)
  #define TIMER_CC_MaxIndex (7UL)
  #define TIMER_CC_MinIndex (0UL)
  #define TIMER_CC_ResetValue (0x00000000UL)

/* CC @Bits 0..31 : Capture/Compare value */
  #define TIMER_CC_CC_Pos (0UL)
  #define TIMER_CC_CC_Msk (0xFFFFFFFFUL << TIMER_CC_CC_Pos)


/* TIMER_ONESHOTEN: Enable one-shot operation for Capture/Compare channel n */
  #define TIMER_ONESHOTEN_MaxCount (8UL)
  #define TIMER_ONESHOTEN_MaxIndex (7UL)
  #define TIMER_ONESHOTEN_MinIndex (0UL)
  #define TIMER_ONESHOTEN_ResetValue (0x00000000UL)

/* ONESHOTEN @Bit 0 : Enable one-shot operation */
  #define TIMER_ONESHOTEN_ONESHOTEN_Pos (0UL)
  #define TIMER_ONESHOTEN_ONESHOTEN_Msk (0x1UL << TIMER_ONESHOTEN_ONESHOTEN_Pos)
  #define TIMER_ONESHOTEN_ONESHOTEN_Min (0x0UL)
  #define TIMER_ONESHOTEN_ONESHOTEN_Max (0x1UL)
  #define TIMER_ONESHOTEN_ONESHOTEN_Disable (0x0UL)
  #define TIMER_ONESHOTEN_ONESHOTEN_Enable (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TPIU                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct TPIU ======================================================= */
/**
  * @brief Trace Port Interface Unit
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_TPIU_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TWIM                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct TWIM_TASKS_DMA_RX ================================================= */
/**
  * @brief RX [TWIM_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000008) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000018) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_TWIM_TASKS_DMA_RX_Type;

/* TWIM_TASKS_DMA_RX_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                             easyDMA. */

  #define TWIM_TASKS_DMA_RX_START_ResetValue (0x00000000UL)

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define TWIM_TASKS_DMA_RX_START_START_Pos (0UL)
  #define TWIM_TASKS_DMA_RX_START_START_Msk (0x1UL << TWIM_TASKS_DMA_RX_START_START_Pos)
  #define TWIM_TASKS_DMA_RX_START_START_Min (0x1UL)
  #define TWIM_TASKS_DMA_RX_START_START_Max (0x1UL)
  #define TWIM_TASKS_DMA_RX_START_START_Trigger (0x1UL)


/* TWIM_TASKS_DMA_RX_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define TWIM_TASKS_DMA_RX_STOP_ResetValue (0x00000000UL)

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Pos (0UL)
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Msk (0x1UL << TWIM_TASKS_DMA_RX_STOP_STOP_Pos)
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Min (0x1UL)
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Max (0x1UL)
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Trigger (0x1UL)


/* TWIM_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL)
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL)
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL)
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL)


/* TWIM_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL)
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL)
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL)
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL)



/* ================================================ Struct TWIM_TASKS_DMA_TX ================================================= */
/**
  * @brief TX [TWIM_TASKS_DMA_TX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
} NRF_TWIM_TASKS_DMA_TX_Type;

/* TWIM_TASKS_DMA_TX_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                             easyDMA. */

  #define TWIM_TASKS_DMA_TX_START_ResetValue (0x00000000UL)

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define TWIM_TASKS_DMA_TX_START_START_Pos (0UL)
  #define TWIM_TASKS_DMA_TX_START_START_Msk (0x1UL << TWIM_TASKS_DMA_TX_START_START_Pos)
  #define TWIM_TASKS_DMA_TX_START_START_Min (0x1UL)
  #define TWIM_TASKS_DMA_TX_START_START_Max (0x1UL)
  #define TWIM_TASKS_DMA_TX_START_START_Trigger (0x1UL)


/* TWIM_TASKS_DMA_TX_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define TWIM_TASKS_DMA_TX_STOP_ResetValue (0x00000000UL)

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Pos (0UL)
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Msk (0x1UL << TWIM_TASKS_DMA_TX_STOP_STOP_Pos)
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Min (0x1UL)
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Max (0x1UL)
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Trigger (0x1UL)



/* ================================================== Struct TWIM_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [TWIM_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __OM  NRF_TWIM_TASKS_DMA_RX_Type RX;
  __OM  NRF_TWIM_TASKS_DMA_TX_Type TX;
} NRF_TWIM_TASKS_DMA_Type;


/* ============================================== Struct TWIM_SUBSCRIBE_DMA_RX =============================================== */
/**
  * @brief RX [TWIM_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;
  __IOM uint32_t  STOP;
  __IOM uint32_t  ENABLEMATCH[4];
  __IOM uint32_t  DISABLEMATCH[4];
} NRF_TWIM_SUBSCRIBE_DMA_RX_Type;

/* TWIM_SUBSCRIBE_DMA_RX_START: Subscribe configuration for task START */
  #define TWIM_SUBSCRIBE_DMA_RX_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_RX_START_EN_Pos)
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Enabled (0x1UL)


/* TWIM_SUBSCRIBE_DMA_RX_STOP: Subscribe configuration for task STOP */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Pos)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Enabled (0x1UL)


/* TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL)


/* TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL)



/* ============================================== Struct TWIM_SUBSCRIBE_DMA_TX =============================================== */
/**
  * @brief TX [TWIM_SUBSCRIBE_DMA_TX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;
  __IOM uint32_t  STOP;
} NRF_TWIM_SUBSCRIBE_DMA_TX_Type;

/* TWIM_SUBSCRIBE_DMA_TX_START: Subscribe configuration for task START */
  #define TWIM_SUBSCRIBE_DMA_TX_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_TX_START_EN_Pos)
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Enabled (0x1UL)


/* TWIM_SUBSCRIBE_DMA_TX_STOP: Subscribe configuration for task STOP */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Pos)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Enabled (0x1UL)



/* ================================================ Struct TWIM_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [TWIM_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IOM NRF_TWIM_SUBSCRIBE_DMA_RX_Type RX;
  __IOM NRF_TWIM_SUBSCRIBE_DMA_TX_Type TX;
} NRF_TWIM_SUBSCRIBE_DMA_Type;


/* ================================================ Struct TWIM_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [TWIM_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_TWIM_EVENTS_DMA_RX_Type;

/* TWIM_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define TWIM_EVENTS_DMA_RX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define TWIM_EVENTS_DMA_RX_END_END_Pos (0UL)
  #define TWIM_EVENTS_DMA_RX_END_END_Msk (0x1UL << TWIM_EVENTS_DMA_RX_END_END_Pos)
  #define TWIM_EVENTS_DMA_RX_END_END_Min (0x0UL)
  #define TWIM_EVENTS_DMA_RX_END_END_Max (0x1UL)
  #define TWIM_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_RX_END_END_Generated (0x1UL)


/* TWIM_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define TWIM_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define TWIM_EVENTS_DMA_RX_READY_READY_Pos (0UL)
  #define TWIM_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << TWIM_EVENTS_DMA_RX_READY_READY_Pos)
  #define TWIM_EVENTS_DMA_RX_READY_READY_Min (0x0UL)
  #define TWIM_EVENTS_DMA_RX_READY_READY_Max (0x1UL)
  #define TWIM_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_RX_READY_READY_Generated (0x1UL)


/* TWIM_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define TWIM_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL)
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL)
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL)
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL)


/* TWIM_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define TWIM_EVENTS_DMA_RX_MATCH_MaxCount (4UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_MinIndex (0UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << TWIM_EVENTS_DMA_RX_MATCH_MATCH_Pos)
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL)



/* ================================================ Struct TWIM_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [TWIM_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
} NRF_TWIM_EVENTS_DMA_TX_Type;

/* TWIM_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define TWIM_EVENTS_DMA_TX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define TWIM_EVENTS_DMA_TX_END_END_Pos (0UL)
  #define TWIM_EVENTS_DMA_TX_END_END_Msk (0x1UL << TWIM_EVENTS_DMA_TX_END_END_Pos)
  #define TWIM_EVENTS_DMA_TX_END_END_Min (0x0UL)
  #define TWIM_EVENTS_DMA_TX_END_END_Max (0x1UL)
  #define TWIM_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_TX_END_END_Generated (0x1UL)


/* TWIM_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define TWIM_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define TWIM_EVENTS_DMA_TX_READY_READY_Pos (0UL)
  #define TWIM_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << TWIM_EVENTS_DMA_TX_READY_READY_Pos)
  #define TWIM_EVENTS_DMA_TX_READY_READY_Min (0x0UL)
  #define TWIM_EVENTS_DMA_TX_READY_READY_Max (0x1UL)
  #define TWIM_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_TX_READY_READY_Generated (0x1UL)


/* TWIM_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define TWIM_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL)
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL)
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL)
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL)



/* ================================================= Struct TWIM_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [TWIM_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_TWIM_EVENTS_DMA_RX_Type RX;
  __IOM NRF_TWIM_EVENTS_DMA_TX_Type TX;
} NRF_TWIM_EVENTS_DMA_Type;


/* =============================================== Struct TWIM_PUBLISH_DMA_RX ================================================ */
/**
  * @brief RX [TWIM_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_TWIM_PUBLISH_DMA_RX_Type;

/* TWIM_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define TWIM_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define TWIM_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_RX_END_CHIDX_Pos)
  #define TWIM_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_RX_END_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_RX_END_EN_Pos)
  #define TWIM_PUBLISH_DMA_RX_END_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_END_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define TWIM_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define TWIM_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_RX_READY_CHIDX_Pos)
  #define TWIM_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_RX_READY_EN_Pos)
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Pos)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define TWIM_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Pos)
  #define TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_RX_MATCH_EN_Pos)
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL)



/* =============================================== Struct TWIM_PUBLISH_DMA_TX ================================================ */
/**
  * @brief TX [TWIM_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
} NRF_TWIM_PUBLISH_DMA_TX_Type;

/* TWIM_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define TWIM_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define TWIM_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_TX_END_CHIDX_Pos)
  #define TWIM_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_TX_END_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_TX_END_EN_Pos)
  #define TWIM_PUBLISH_DMA_TX_END_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_TX_END_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define TWIM_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define TWIM_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_TX_READY_CHIDX_Pos)
  #define TWIM_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_TX_READY_EN_Pos)
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Pos)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL)



/* ================================================= Struct TWIM_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [TWIM_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_TWIM_PUBLISH_DMA_RX_Type RX;
  __IOM NRF_TWIM_PUBLISH_DMA_TX_Type TX;
} NRF_TWIM_PUBLISH_DMA_Type;


/* ==================================================== Struct TWIM_PSEL ===================================================== */
/**
  * @brief PSEL [TWIM_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SCL;
  __IOM uint32_t  SDA;
} NRF_TWIM_PSEL_Type;

/* TWIM_PSEL_SCL: Pin select for SCL signal */
  #define TWIM_PSEL_SCL_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define TWIM_PSEL_SCL_PIN_Pos (0UL)
  #define TWIM_PSEL_SCL_PIN_Msk (0x1FUL << TWIM_PSEL_SCL_PIN_Pos)
  #define TWIM_PSEL_SCL_PIN_Min (0x00UL)
  #define TWIM_PSEL_SCL_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define TWIM_PSEL_SCL_PORT_Pos (5UL)
  #define TWIM_PSEL_SCL_PORT_Msk (0x7UL << TWIM_PSEL_SCL_PORT_Pos)
  #define TWIM_PSEL_SCL_PORT_Min (0x0UL)
  #define TWIM_PSEL_SCL_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define TWIM_PSEL_SCL_CONNECT_Pos (31UL)
  #define TWIM_PSEL_SCL_CONNECT_Msk (0x1UL << TWIM_PSEL_SCL_CONNECT_Pos)
  #define TWIM_PSEL_SCL_CONNECT_Min (0x0UL)
  #define TWIM_PSEL_SCL_CONNECT_Max (0x1UL)
  #define TWIM_PSEL_SCL_CONNECT_Disconnected (0x1UL)
  #define TWIM_PSEL_SCL_CONNECT_Connected (0x0UL)


/* TWIM_PSEL_SDA: Pin select for SDA signal */
  #define TWIM_PSEL_SDA_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define TWIM_PSEL_SDA_PIN_Pos (0UL)
  #define TWIM_PSEL_SDA_PIN_Msk (0x1FUL << TWIM_PSEL_SDA_PIN_Pos)
  #define TWIM_PSEL_SDA_PIN_Min (0x00UL)
  #define TWIM_PSEL_SDA_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define TWIM_PSEL_SDA_PORT_Pos (5UL)
  #define TWIM_PSEL_SDA_PORT_Msk (0x7UL << TWIM_PSEL_SDA_PORT_Pos)
  #define TWIM_PSEL_SDA_PORT_Min (0x0UL)
  #define TWIM_PSEL_SDA_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define TWIM_PSEL_SDA_CONNECT_Pos (31UL)
  #define TWIM_PSEL_SDA_CONNECT_Msk (0x1UL << TWIM_PSEL_SDA_CONNECT_Pos)
  #define TWIM_PSEL_SDA_CONNECT_Min (0x0UL)
  #define TWIM_PSEL_SDA_CONNECT_Max (0x1UL)
  #define TWIM_PSEL_SDA_CONNECT_Disconnected (0x1UL)
  #define TWIM_PSEL_SDA_CONNECT_Connected (0x0UL)



/* ================================================ Struct TWIM_DMA_RX_MATCH ================================================= */
/**
  * @brief MATCH [TWIM_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_TWIM_DMA_RX_MATCH_Type;

/* TWIM_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define TWIM_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL)

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL)

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL)

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL)

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL)

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or sticky */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL)

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or sticky */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL)

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or sticky */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL)

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or sticky */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL)


/* TWIM_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define TWIM_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL)
  #define TWIM_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL)
  #define TWIM_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL)
  #define TWIM_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data to look for */
  #define TWIM_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL)
  #define TWIM_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFFFFFFFUL << TWIM_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/



/* =================================================== Struct TWIM_DMA_RX ==================================================== */
/**
  * @brief RX [TWIM_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_TWIM_DMA_RX_MATCH_Type MATCH;            /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_TWIM_DMA_RX_Type;

/* TWIM_DMA_RX_PTR: RAM buffer start address */
  #define TWIM_DMA_RX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TWIM_DMA_RX_PTR_PTR_Pos (0UL)
  #define TWIM_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << TWIM_DMA_RX_PTR_PTR_Pos)


/* TWIM_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define TWIM_DMA_RX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TWIM_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)
  #define TWIM_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIM_DMA_RX_MAXCNT_MAXCNT_Pos)
  #define TWIM_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define TWIM_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* TWIM_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define TWIM_DMA_RX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TWIM_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)
  #define TWIM_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIM_DMA_RX_AMOUNT_AMOUNT_Pos)
  #define TWIM_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define TWIM_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* TWIM_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* TWIM_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TWIM_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TWIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define TWIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TWIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct TWIM_DMA_TX ==================================================== */
/**
  * @brief TX [TWIM_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_TWIM_DMA_TX_Type;

/* TWIM_DMA_TX_PTR: RAM buffer start address */
  #define TWIM_DMA_TX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TWIM_DMA_TX_PTR_PTR_Pos (0UL)
  #define TWIM_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << TWIM_DMA_TX_PTR_PTR_Pos)


/* TWIM_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define TWIM_DMA_TX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TWIM_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)
  #define TWIM_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIM_DMA_TX_MAXCNT_MAXCNT_Pos)
  #define TWIM_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define TWIM_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* TWIM_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define TWIM_DMA_TX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TWIM_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)
  #define TWIM_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIM_DMA_TX_AMOUNT_AMOUNT_Pos)
  #define TWIM_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define TWIM_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* TWIM_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* TWIM_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TWIM_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TWIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define TWIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TWIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct TWIM_DMA ===================================================== */
/**
  * @brief DMA [TWIM_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_TWIM_DMA_RX_Type RX;
  __IOM NRF_TWIM_DMA_TX_Type TX;
} NRF_TWIM_DMA_Type;

/* ======================================================= Struct TWIM ======================================================= */
/**
  * @brief I2C compatible Two-Wire Master Interface with EasyDMA
  */
  typedef struct {
    __IM uint32_t RESERVED;
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Stop TWI transaction. Must be issued while the TWI
                                                                         master is not suspended.*/
    __IM uint32_t RESERVED1;
    __OM uint32_t TASKS_SUSPEND;
    __OM uint32_t TASKS_RESUME;
    __IM uint32_t RESERVED2[5];
    __OM NRF_TWIM_TASKS_DMA_Type TASKS_DMA;
    __IM uint32_t RESERVED3[11];
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED4;
    __IOM uint32_t SUBSCRIBE_SUSPEND;
    __IOM uint32_t SUBSCRIBE_RESUME;
    __IM uint32_t RESERVED5[5];
    __IOM NRF_TWIM_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA;
    __IM uint32_t RESERVED6[11];
    __IOM uint32_t EVENTS_STOPPED;
    __IM uint32_t RESERVED7[3];
    __IOM uint32_t EVENTS_ERROR;
    __IM uint32_t RESERVED8[4];
    __IOM uint32_t EVENTS_SUSPENDED;                 /*!< (@ 0x00000128) SUSPEND task has been issued, TWI traffic is now
                                                                         suspended.*/
    __IM uint32_t RESERVED9[2];
    __IOM uint32_t EVENTS_LASTRX;
    __IOM uint32_t EVENTS_LASTTX;
    __IM uint32_t RESERVED10[4];
    __IOM NRF_TWIM_EVENTS_DMA_Type EVENTS_DMA;
    __IM uint32_t RESERVED11[4];
    __IOM uint32_t PUBLISH_STOPPED;
    __IM uint32_t RESERVED12[3];
    __IOM uint32_t PUBLISH_ERROR;
    __IM uint32_t RESERVED13[4];
    __IOM uint32_t PUBLISH_SUSPENDED;
    __IM uint32_t RESERVED14[2];
    __IOM uint32_t PUBLISH_LASTRX;
    __IOM uint32_t PUBLISH_LASTTX;
    __IM uint32_t RESERVED15[4];
    __IOM NRF_TWIM_PUBLISH_DMA_Type PUBLISH_DMA;
    __IM uint32_t RESERVED16[3];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED17[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED18[110];
    __IOM uint32_t ERRORSRC;
    __IM uint32_t RESERVED19[14];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED20[8];
    __IOM uint32_t FREQUENCY;                        /*!< (@ 0x00000524) TWI frequency. Accuracy depends on the HFCLK source
                                                                         selected.*/
    __IM uint32_t RESERVED21[24];
    __IOM uint32_t ADDRESS;
    __IM uint32_t RESERVED22[29];
    __IOM NRF_TWIM_PSEL_Type PSEL;
    __IM uint32_t RESERVED23[62];
    __IOM NRF_TWIM_DMA_Type DMA;
  } NRF_TWIM_Type;

/* TWIM_TASKS_STOP: Stop TWI transaction. Must be issued while the TWI master is not suspended. */
  #define TWIM_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop TWI transaction. Must be issued while the TWI master is not suspended. */
  #define TWIM_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define TWIM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TWIM_TASKS_STOP_TASKS_STOP_Pos)
  #define TWIM_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define TWIM_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define TWIM_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* TWIM_TASKS_SUSPEND: Suspend TWI transaction */
  #define TWIM_TASKS_SUSPEND_ResetValue (0x00000000UL)

/* TASKS_SUSPEND @Bit 0 : Suspend TWI transaction */
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL)
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND
                                                                            field.*/
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Min (0x1UL)
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Max (0x1UL)
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (0x1UL)


/* TWIM_TASKS_RESUME: Resume TWI transaction */
  #define TWIM_TASKS_RESUME_ResetValue (0x00000000UL)

/* TASKS_RESUME @Bit 0 : Resume TWI transaction */
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Pos (0UL)
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << TWIM_TASKS_RESUME_TASKS_RESUME_Pos)
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Min (0x1UL)
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Max (0x1UL)
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Trigger (0x1UL)


/* TWIM_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define TWIM_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TWIM_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_STOP_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_STOP_EN_Msk (0x1UL << TWIM_SUBSCRIBE_STOP_EN_Pos)
  #define TWIM_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* TWIM_SUBSCRIBE_SUSPEND: Subscribe configuration for task SUSPEND */
  #define TWIM_SUBSCRIBE_SUSPEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SUSPEND will subscribe to */
  #define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_SUSPEND_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << TWIM_SUBSCRIBE_SUSPEND_EN_Pos)
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Enabled (0x1UL)


/* TWIM_SUBSCRIBE_RESUME: Subscribe configuration for task RESUME */
  #define TWIM_SUBSCRIBE_RESUME_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RESUME will subscribe to */
  #define TWIM_SUBSCRIBE_RESUME_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_RESUME_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_RESUME_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_RESUME_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_RESUME_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_RESUME_EN_Msk (0x1UL << TWIM_SUBSCRIBE_RESUME_EN_Pos)
  #define TWIM_SUBSCRIBE_RESUME_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_RESUME_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_RESUME_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_RESUME_EN_Enabled (0x1UL)


/* TWIM_EVENTS_STOPPED: TWI stopped */
  #define TWIM_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : TWI stopped */
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* TWIM_EVENTS_ERROR: TWI error */
  #define TWIM_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : TWI error */
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << TWIM_EVENTS_ERROR_EVENTS_ERROR_Pos)
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* TWIM_EVENTS_SUSPENDED: SUSPEND task has been issued, TWI traffic is now suspended. */
  #define TWIM_EVENTS_SUSPENDED_ResetValue (0x00000000UL)

/* EVENTS_SUSPENDED @Bit 0 : SUSPEND task has been issued, TWI traffic is now suspended. */
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos (0UL)
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Msk (0x1UL << TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos) /*!< Bit mask of
                                                                            EVENTS_SUSPENDED field.*/
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Min (0x0UL)
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Max (0x1UL)
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_NotGenerated (0x0UL)
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Generated (0x1UL)


/* TWIM_EVENTS_LASTRX: Byte boundary, starting to receive the last byte */
  #define TWIM_EVENTS_LASTRX_ResetValue (0x00000000UL)

/* EVENTS_LASTRX @Bit 0 : Byte boundary, starting to receive the last byte */
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Pos (0UL)
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Msk (0x1UL << TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Pos) /*!< Bit mask of EVENTS_LASTRX
                                                                            field.*/
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Min (0x0UL)
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Max (0x1UL)
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_NotGenerated (0x0UL)
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Generated (0x1UL)


/* TWIM_EVENTS_LASTTX: Byte boundary, starting to transmit the last byte */
  #define TWIM_EVENTS_LASTTX_ResetValue (0x00000000UL)

/* EVENTS_LASTTX @Bit 0 : Byte boundary, starting to transmit the last byte */
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Pos (0UL)
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Msk (0x1UL << TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Pos) /*!< Bit mask of EVENTS_LASTTX
                                                                            field.*/
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Min (0x0UL)
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Max (0x1UL)
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_NotGenerated (0x0UL)
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Generated (0x1UL)


/* TWIM_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define TWIM_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define TWIM_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_STOPPED_CHIDX_Pos)
  #define TWIM_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_STOPPED_EN_Pos (31UL)
  #define TWIM_PUBLISH_STOPPED_EN_Msk (0x1UL << TWIM_PUBLISH_STOPPED_EN_Pos)
  #define TWIM_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define TWIM_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define TWIM_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define TWIM_PUBLISH_ERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define TWIM_PUBLISH_ERROR_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_ERROR_CHIDX_Pos)
  #define TWIM_PUBLISH_ERROR_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_ERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_ERROR_EN_Pos (31UL)
  #define TWIM_PUBLISH_ERROR_EN_Msk (0x1UL << TWIM_PUBLISH_ERROR_EN_Pos)
  #define TWIM_PUBLISH_ERROR_EN_Min (0x0UL)
  #define TWIM_PUBLISH_ERROR_EN_Max (0x1UL)
  #define TWIM_PUBLISH_ERROR_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_ERROR_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_SUSPENDED: Publish configuration for event SUSPENDED */
  #define TWIM_PUBLISH_SUSPENDED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SUSPENDED will publish to */
  #define TWIM_PUBLISH_SUSPENDED_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_SUSPENDED_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_SUSPENDED_CHIDX_Pos)
  #define TWIM_PUBLISH_SUSPENDED_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_SUSPENDED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_SUSPENDED_EN_Pos (31UL)
  #define TWIM_PUBLISH_SUSPENDED_EN_Msk (0x1UL << TWIM_PUBLISH_SUSPENDED_EN_Pos)
  #define TWIM_PUBLISH_SUSPENDED_EN_Min (0x0UL)
  #define TWIM_PUBLISH_SUSPENDED_EN_Max (0x1UL)
  #define TWIM_PUBLISH_SUSPENDED_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_SUSPENDED_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_LASTRX: Publish configuration for event LASTRX */
  #define TWIM_PUBLISH_LASTRX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event LASTRX will publish to */
  #define TWIM_PUBLISH_LASTRX_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_LASTRX_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_LASTRX_CHIDX_Pos)
  #define TWIM_PUBLISH_LASTRX_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_LASTRX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_LASTRX_EN_Pos (31UL)
  #define TWIM_PUBLISH_LASTRX_EN_Msk (0x1UL << TWIM_PUBLISH_LASTRX_EN_Pos)
  #define TWIM_PUBLISH_LASTRX_EN_Min (0x0UL)
  #define TWIM_PUBLISH_LASTRX_EN_Max (0x1UL)
  #define TWIM_PUBLISH_LASTRX_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_LASTRX_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_LASTTX: Publish configuration for event LASTTX */
  #define TWIM_PUBLISH_LASTTX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event LASTTX will publish to */
  #define TWIM_PUBLISH_LASTTX_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_LASTTX_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_LASTTX_CHIDX_Pos)
  #define TWIM_PUBLISH_LASTTX_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_LASTTX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_LASTTX_EN_Pos (31UL)
  #define TWIM_PUBLISH_LASTTX_EN_Msk (0x1UL << TWIM_PUBLISH_LASTTX_EN_Pos)
  #define TWIM_PUBLISH_LASTTX_EN_Min (0x0UL)
  #define TWIM_PUBLISH_LASTTX_EN_Max (0x1UL)
  #define TWIM_PUBLISH_LASTTX_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_LASTTX_EN_Enabled (0x1UL)


/* TWIM_SHORTS: Shortcuts between local events and tasks */
  #define TWIM_SHORTS_ResetValue (0x00000000UL)

/* LASTTX_DMA_RX_START @Bit 7 : Shortcut between event LASTTX and task DMA.RX.START */
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Pos (7UL)
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Msk (0x1UL << TWIM_SHORTS_LASTTX_DMA_RX_START_Pos) /*!< Bit mask of
                                                                            LASTTX_DMA_RX_START field.*/
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Min (0x0UL)
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Max (0x1UL)
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Disabled (0x0UL)
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Enabled (0x1UL)

/* LASTTX_SUSPEND @Bit 8 : Shortcut between event LASTTX and task SUSPEND */
  #define TWIM_SHORTS_LASTTX_SUSPEND_Pos (8UL)
  #define TWIM_SHORTS_LASTTX_SUSPEND_Msk (0x1UL << TWIM_SHORTS_LASTTX_SUSPEND_Pos)
  #define TWIM_SHORTS_LASTTX_SUSPEND_Min (0x0UL)
  #define TWIM_SHORTS_LASTTX_SUSPEND_Max (0x1UL)
  #define TWIM_SHORTS_LASTTX_SUSPEND_Disabled (0x0UL)
  #define TWIM_SHORTS_LASTTX_SUSPEND_Enabled (0x1UL)

/* LASTTX_STOP @Bit 9 : Shortcut between event LASTTX and task STOP */
  #define TWIM_SHORTS_LASTTX_STOP_Pos (9UL)
  #define TWIM_SHORTS_LASTTX_STOP_Msk (0x1UL << TWIM_SHORTS_LASTTX_STOP_Pos)
  #define TWIM_SHORTS_LASTTX_STOP_Min (0x0UL)
  #define TWIM_SHORTS_LASTTX_STOP_Max (0x1UL)
  #define TWIM_SHORTS_LASTTX_STOP_Disabled (0x0UL)
  #define TWIM_SHORTS_LASTTX_STOP_Enabled (0x1UL)

/* LASTRX_DMA_TX_START @Bit 10 : Shortcut between event LASTRX and task DMA.TX.START */
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Pos (10UL)
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Msk (0x1UL << TWIM_SHORTS_LASTRX_DMA_TX_START_Pos) /*!< Bit mask of
                                                                            LASTRX_DMA_TX_START field.*/
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Min (0x0UL)
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Max (0x1UL)
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Disabled (0x0UL)
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Enabled (0x1UL)

/* LASTRX_STOP @Bit 12 : Shortcut between event LASTRX and task STOP */
  #define TWIM_SHORTS_LASTRX_STOP_Pos (12UL)
  #define TWIM_SHORTS_LASTRX_STOP_Msk (0x1UL << TWIM_SHORTS_LASTRX_STOP_Pos)
  #define TWIM_SHORTS_LASTRX_STOP_Min (0x0UL)
  #define TWIM_SHORTS_LASTRX_STOP_Max (0x1UL)
  #define TWIM_SHORTS_LASTRX_STOP_Disabled (0x0UL)
  #define TWIM_SHORTS_LASTRX_STOP_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL)
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL)
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL)
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL)
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL)
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL)
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL)
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL)
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL)


/* TWIM_INTEN: Enable or disable interrupt */
  #define TWIM_INTEN_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Enable or disable interrupt for event STOPPED */
  #define TWIM_INTEN_STOPPED_Pos (1UL)
  #define TWIM_INTEN_STOPPED_Msk (0x1UL << TWIM_INTEN_STOPPED_Pos)
  #define TWIM_INTEN_STOPPED_Min (0x0UL)
  #define TWIM_INTEN_STOPPED_Max (0x1UL)
  #define TWIM_INTEN_STOPPED_Disabled (0x0UL)
  #define TWIM_INTEN_STOPPED_Enabled (0x1UL)

/* ERROR @Bit 5 : Enable or disable interrupt for event ERROR */
  #define TWIM_INTEN_ERROR_Pos (5UL)
  #define TWIM_INTEN_ERROR_Msk (0x1UL << TWIM_INTEN_ERROR_Pos)
  #define TWIM_INTEN_ERROR_Min (0x0UL)
  #define TWIM_INTEN_ERROR_Max (0x1UL)
  #define TWIM_INTEN_ERROR_Disabled (0x0UL)
  #define TWIM_INTEN_ERROR_Enabled (0x1UL)

/* SUSPENDED @Bit 10 : Enable or disable interrupt for event SUSPENDED */
  #define TWIM_INTEN_SUSPENDED_Pos (10UL)
  #define TWIM_INTEN_SUSPENDED_Msk (0x1UL << TWIM_INTEN_SUSPENDED_Pos)
  #define TWIM_INTEN_SUSPENDED_Min (0x0UL)
  #define TWIM_INTEN_SUSPENDED_Max (0x1UL)
  #define TWIM_INTEN_SUSPENDED_Disabled (0x0UL)
  #define TWIM_INTEN_SUSPENDED_Enabled (0x1UL)

/* LASTRX @Bit 13 : Enable or disable interrupt for event LASTRX */
  #define TWIM_INTEN_LASTRX_Pos (13UL)
  #define TWIM_INTEN_LASTRX_Msk (0x1UL << TWIM_INTEN_LASTRX_Pos)
  #define TWIM_INTEN_LASTRX_Min (0x0UL)
  #define TWIM_INTEN_LASTRX_Max (0x1UL)
  #define TWIM_INTEN_LASTRX_Disabled (0x0UL)
  #define TWIM_INTEN_LASTRX_Enabled (0x1UL)

/* LASTTX @Bit 14 : Enable or disable interrupt for event LASTTX */
  #define TWIM_INTEN_LASTTX_Pos (14UL)
  #define TWIM_INTEN_LASTTX_Msk (0x1UL << TWIM_INTEN_LASTTX_Pos)
  #define TWIM_INTEN_LASTTX_Min (0x0UL)
  #define TWIM_INTEN_LASTTX_Max (0x1UL)
  #define TWIM_INTEN_LASTTX_Disabled (0x0UL)
  #define TWIM_INTEN_LASTTX_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Enable or disable interrupt for event DMARXEND */
  #define TWIM_INTEN_DMARXEND_Pos (19UL)
  #define TWIM_INTEN_DMARXEND_Msk (0x1UL << TWIM_INTEN_DMARXEND_Pos)
  #define TWIM_INTEN_DMARXEND_Min (0x0UL)
  #define TWIM_INTEN_DMARXEND_Max (0x1UL)
  #define TWIM_INTEN_DMARXEND_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Enable or disable interrupt for event DMARXREADY */
  #define TWIM_INTEN_DMARXREADY_Pos (20UL)
  #define TWIM_INTEN_DMARXREADY_Msk (0x1UL << TWIM_INTEN_DMARXREADY_Pos)
  #define TWIM_INTEN_DMARXREADY_Min (0x0UL)
  #define TWIM_INTEN_DMARXREADY_Max (0x1UL)
  #define TWIM_INTEN_DMARXREADY_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Enable or disable interrupt for event DMARXBUSERROR */
  #define TWIM_INTEN_DMARXBUSERROR_Pos (21UL)
  #define TWIM_INTEN_DMARXBUSERROR_Msk (0x1UL << TWIM_INTEN_DMARXBUSERROR_Pos)
  #define TWIM_INTEN_DMARXBUSERROR_Min (0x0UL)
  #define TWIM_INTEN_DMARXBUSERROR_Max (0x1UL)
  #define TWIM_INTEN_DMARXBUSERROR_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Enable or disable interrupt for event DMARXMATCH[0] */
  #define TWIM_INTEN_DMARXMATCH0_Pos (22UL)
  #define TWIM_INTEN_DMARXMATCH0_Msk (0x1UL << TWIM_INTEN_DMARXMATCH0_Pos)
  #define TWIM_INTEN_DMARXMATCH0_Min (0x0UL)
  #define TWIM_INTEN_DMARXMATCH0_Max (0x1UL)
  #define TWIM_INTEN_DMARXMATCH0_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Enable or disable interrupt for event DMARXMATCH[1] */
  #define TWIM_INTEN_DMARXMATCH1_Pos (23UL)
  #define TWIM_INTEN_DMARXMATCH1_Msk (0x1UL << TWIM_INTEN_DMARXMATCH1_Pos)
  #define TWIM_INTEN_DMARXMATCH1_Min (0x0UL)
  #define TWIM_INTEN_DMARXMATCH1_Max (0x1UL)
  #define TWIM_INTEN_DMARXMATCH1_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Enable or disable interrupt for event DMARXMATCH[2] */
  #define TWIM_INTEN_DMARXMATCH2_Pos (24UL)
  #define TWIM_INTEN_DMARXMATCH2_Msk (0x1UL << TWIM_INTEN_DMARXMATCH2_Pos)
  #define TWIM_INTEN_DMARXMATCH2_Min (0x0UL)
  #define TWIM_INTEN_DMARXMATCH2_Max (0x1UL)
  #define TWIM_INTEN_DMARXMATCH2_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Enable or disable interrupt for event DMARXMATCH[3] */
  #define TWIM_INTEN_DMARXMATCH3_Pos (25UL)
  #define TWIM_INTEN_DMARXMATCH3_Msk (0x1UL << TWIM_INTEN_DMARXMATCH3_Pos)
  #define TWIM_INTEN_DMARXMATCH3_Min (0x0UL)
  #define TWIM_INTEN_DMARXMATCH3_Max (0x1UL)
  #define TWIM_INTEN_DMARXMATCH3_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Enable or disable interrupt for event DMATXEND */
  #define TWIM_INTEN_DMATXEND_Pos (26UL)
  #define TWIM_INTEN_DMATXEND_Msk (0x1UL << TWIM_INTEN_DMATXEND_Pos)
  #define TWIM_INTEN_DMATXEND_Min (0x0UL)
  #define TWIM_INTEN_DMATXEND_Max (0x1UL)
  #define TWIM_INTEN_DMATXEND_Disabled (0x0UL)
  #define TWIM_INTEN_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Enable or disable interrupt for event DMATXREADY */
  #define TWIM_INTEN_DMATXREADY_Pos (27UL)
  #define TWIM_INTEN_DMATXREADY_Msk (0x1UL << TWIM_INTEN_DMATXREADY_Pos)
  #define TWIM_INTEN_DMATXREADY_Min (0x0UL)
  #define TWIM_INTEN_DMATXREADY_Max (0x1UL)
  #define TWIM_INTEN_DMATXREADY_Disabled (0x0UL)
  #define TWIM_INTEN_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Enable or disable interrupt for event DMATXBUSERROR */
  #define TWIM_INTEN_DMATXBUSERROR_Pos (28UL)
  #define TWIM_INTEN_DMATXBUSERROR_Msk (0x1UL << TWIM_INTEN_DMATXBUSERROR_Pos)
  #define TWIM_INTEN_DMATXBUSERROR_Min (0x0UL)
  #define TWIM_INTEN_DMATXBUSERROR_Max (0x1UL)
  #define TWIM_INTEN_DMATXBUSERROR_Disabled (0x0UL)
  #define TWIM_INTEN_DMATXBUSERROR_Enabled (0x1UL)


/* TWIM_INTENSET: Enable interrupt */
  #define TWIM_INTENSET_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define TWIM_INTENSET_STOPPED_Pos (1UL)
  #define TWIM_INTENSET_STOPPED_Msk (0x1UL << TWIM_INTENSET_STOPPED_Pos)
  #define TWIM_INTENSET_STOPPED_Min (0x0UL)
  #define TWIM_INTENSET_STOPPED_Max (0x1UL)
  #define TWIM_INTENSET_STOPPED_Set (0x1UL)
  #define TWIM_INTENSET_STOPPED_Disabled (0x0UL)
  #define TWIM_INTENSET_STOPPED_Enabled (0x1UL)

/* ERROR @Bit 5 : Write '1' to enable interrupt for event ERROR */
  #define TWIM_INTENSET_ERROR_Pos (5UL)
  #define TWIM_INTENSET_ERROR_Msk (0x1UL << TWIM_INTENSET_ERROR_Pos)
  #define TWIM_INTENSET_ERROR_Min (0x0UL)
  #define TWIM_INTENSET_ERROR_Max (0x1UL)
  #define TWIM_INTENSET_ERROR_Set (0x1UL)
  #define TWIM_INTENSET_ERROR_Disabled (0x0UL)
  #define TWIM_INTENSET_ERROR_Enabled (0x1UL)

/* SUSPENDED @Bit 10 : Write '1' to enable interrupt for event SUSPENDED */
  #define TWIM_INTENSET_SUSPENDED_Pos (10UL)
  #define TWIM_INTENSET_SUSPENDED_Msk (0x1UL << TWIM_INTENSET_SUSPENDED_Pos)
  #define TWIM_INTENSET_SUSPENDED_Min (0x0UL)
  #define TWIM_INTENSET_SUSPENDED_Max (0x1UL)
  #define TWIM_INTENSET_SUSPENDED_Set (0x1UL)
  #define TWIM_INTENSET_SUSPENDED_Disabled (0x0UL)
  #define TWIM_INTENSET_SUSPENDED_Enabled (0x1UL)

/* LASTRX @Bit 13 : Write '1' to enable interrupt for event LASTRX */
  #define TWIM_INTENSET_LASTRX_Pos (13UL)
  #define TWIM_INTENSET_LASTRX_Msk (0x1UL << TWIM_INTENSET_LASTRX_Pos)
  #define TWIM_INTENSET_LASTRX_Min (0x0UL)
  #define TWIM_INTENSET_LASTRX_Max (0x1UL)
  #define TWIM_INTENSET_LASTRX_Set (0x1UL)
  #define TWIM_INTENSET_LASTRX_Disabled (0x0UL)
  #define TWIM_INTENSET_LASTRX_Enabled (0x1UL)

/* LASTTX @Bit 14 : Write '1' to enable interrupt for event LASTTX */
  #define TWIM_INTENSET_LASTTX_Pos (14UL)
  #define TWIM_INTENSET_LASTTX_Msk (0x1UL << TWIM_INTENSET_LASTTX_Pos)
  #define TWIM_INTENSET_LASTTX_Min (0x0UL)
  #define TWIM_INTENSET_LASTTX_Max (0x1UL)
  #define TWIM_INTENSET_LASTTX_Set (0x1UL)
  #define TWIM_INTENSET_LASTTX_Disabled (0x0UL)
  #define TWIM_INTENSET_LASTTX_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define TWIM_INTENSET_DMARXEND_Pos (19UL)
  #define TWIM_INTENSET_DMARXEND_Msk (0x1UL << TWIM_INTENSET_DMARXEND_Pos)
  #define TWIM_INTENSET_DMARXEND_Min (0x0UL)
  #define TWIM_INTENSET_DMARXEND_Max (0x1UL)
  #define TWIM_INTENSET_DMARXEND_Set (0x1UL)
  #define TWIM_INTENSET_DMARXEND_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define TWIM_INTENSET_DMARXREADY_Pos (20UL)
  #define TWIM_INTENSET_DMARXREADY_Msk (0x1UL << TWIM_INTENSET_DMARXREADY_Pos)
  #define TWIM_INTENSET_DMARXREADY_Min (0x0UL)
  #define TWIM_INTENSET_DMARXREADY_Max (0x1UL)
  #define TWIM_INTENSET_DMARXREADY_Set (0x1UL)
  #define TWIM_INTENSET_DMARXREADY_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define TWIM_INTENSET_DMARXBUSERROR_Pos (21UL)
  #define TWIM_INTENSET_DMARXBUSERROR_Msk (0x1UL << TWIM_INTENSET_DMARXBUSERROR_Pos)
  #define TWIM_INTENSET_DMARXBUSERROR_Min (0x0UL)
  #define TWIM_INTENSET_DMARXBUSERROR_Max (0x1UL)
  #define TWIM_INTENSET_DMARXBUSERROR_Set (0x1UL)
  #define TWIM_INTENSET_DMARXBUSERROR_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define TWIM_INTENSET_DMARXMATCH0_Pos (22UL)
  #define TWIM_INTENSET_DMARXMATCH0_Msk (0x1UL << TWIM_INTENSET_DMARXMATCH0_Pos)
  #define TWIM_INTENSET_DMARXMATCH0_Min (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH0_Max (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH0_Set (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH0_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define TWIM_INTENSET_DMARXMATCH1_Pos (23UL)
  #define TWIM_INTENSET_DMARXMATCH1_Msk (0x1UL << TWIM_INTENSET_DMARXMATCH1_Pos)
  #define TWIM_INTENSET_DMARXMATCH1_Min (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH1_Max (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH1_Set (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH1_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define TWIM_INTENSET_DMARXMATCH2_Pos (24UL)
  #define TWIM_INTENSET_DMARXMATCH2_Msk (0x1UL << TWIM_INTENSET_DMARXMATCH2_Pos)
  #define TWIM_INTENSET_DMARXMATCH2_Min (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH2_Max (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH2_Set (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH2_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define TWIM_INTENSET_DMARXMATCH3_Pos (25UL)
  #define TWIM_INTENSET_DMARXMATCH3_Msk (0x1UL << TWIM_INTENSET_DMARXMATCH3_Pos)
  #define TWIM_INTENSET_DMARXMATCH3_Min (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH3_Max (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH3_Set (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH3_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define TWIM_INTENSET_DMATXEND_Pos (26UL)
  #define TWIM_INTENSET_DMATXEND_Msk (0x1UL << TWIM_INTENSET_DMATXEND_Pos)
  #define TWIM_INTENSET_DMATXEND_Min (0x0UL)
  #define TWIM_INTENSET_DMATXEND_Max (0x1UL)
  #define TWIM_INTENSET_DMATXEND_Set (0x1UL)
  #define TWIM_INTENSET_DMATXEND_Disabled (0x0UL)
  #define TWIM_INTENSET_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define TWIM_INTENSET_DMATXREADY_Pos (27UL)
  #define TWIM_INTENSET_DMATXREADY_Msk (0x1UL << TWIM_INTENSET_DMATXREADY_Pos)
  #define TWIM_INTENSET_DMATXREADY_Min (0x0UL)
  #define TWIM_INTENSET_DMATXREADY_Max (0x1UL)
  #define TWIM_INTENSET_DMATXREADY_Set (0x1UL)
  #define TWIM_INTENSET_DMATXREADY_Disabled (0x0UL)
  #define TWIM_INTENSET_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define TWIM_INTENSET_DMATXBUSERROR_Pos (28UL)
  #define TWIM_INTENSET_DMATXBUSERROR_Msk (0x1UL << TWIM_INTENSET_DMATXBUSERROR_Pos)
  #define TWIM_INTENSET_DMATXBUSERROR_Min (0x0UL)
  #define TWIM_INTENSET_DMATXBUSERROR_Max (0x1UL)
  #define TWIM_INTENSET_DMATXBUSERROR_Set (0x1UL)
  #define TWIM_INTENSET_DMATXBUSERROR_Disabled (0x0UL)
  #define TWIM_INTENSET_DMATXBUSERROR_Enabled (0x1UL)


/* TWIM_INTENCLR: Disable interrupt */
  #define TWIM_INTENCLR_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define TWIM_INTENCLR_STOPPED_Pos (1UL)
  #define TWIM_INTENCLR_STOPPED_Msk (0x1UL << TWIM_INTENCLR_STOPPED_Pos)
  #define TWIM_INTENCLR_STOPPED_Min (0x0UL)
  #define TWIM_INTENCLR_STOPPED_Max (0x1UL)
  #define TWIM_INTENCLR_STOPPED_Clear (0x1UL)
  #define TWIM_INTENCLR_STOPPED_Disabled (0x0UL)
  #define TWIM_INTENCLR_STOPPED_Enabled (0x1UL)

/* ERROR @Bit 5 : Write '1' to disable interrupt for event ERROR */
  #define TWIM_INTENCLR_ERROR_Pos (5UL)
  #define TWIM_INTENCLR_ERROR_Msk (0x1UL << TWIM_INTENCLR_ERROR_Pos)
  #define TWIM_INTENCLR_ERROR_Min (0x0UL)
  #define TWIM_INTENCLR_ERROR_Max (0x1UL)
  #define TWIM_INTENCLR_ERROR_Clear (0x1UL)
  #define TWIM_INTENCLR_ERROR_Disabled (0x0UL)
  #define TWIM_INTENCLR_ERROR_Enabled (0x1UL)

/* SUSPENDED @Bit 10 : Write '1' to disable interrupt for event SUSPENDED */
  #define TWIM_INTENCLR_SUSPENDED_Pos (10UL)
  #define TWIM_INTENCLR_SUSPENDED_Msk (0x1UL << TWIM_INTENCLR_SUSPENDED_Pos)
  #define TWIM_INTENCLR_SUSPENDED_Min (0x0UL)
  #define TWIM_INTENCLR_SUSPENDED_Max (0x1UL)
  #define TWIM_INTENCLR_SUSPENDED_Clear (0x1UL)
  #define TWIM_INTENCLR_SUSPENDED_Disabled (0x0UL)
  #define TWIM_INTENCLR_SUSPENDED_Enabled (0x1UL)

/* LASTRX @Bit 13 : Write '1' to disable interrupt for event LASTRX */
  #define TWIM_INTENCLR_LASTRX_Pos (13UL)
  #define TWIM_INTENCLR_LASTRX_Msk (0x1UL << TWIM_INTENCLR_LASTRX_Pos)
  #define TWIM_INTENCLR_LASTRX_Min (0x0UL)
  #define TWIM_INTENCLR_LASTRX_Max (0x1UL)
  #define TWIM_INTENCLR_LASTRX_Clear (0x1UL)
  #define TWIM_INTENCLR_LASTRX_Disabled (0x0UL)
  #define TWIM_INTENCLR_LASTRX_Enabled (0x1UL)

/* LASTTX @Bit 14 : Write '1' to disable interrupt for event LASTTX */
  #define TWIM_INTENCLR_LASTTX_Pos (14UL)
  #define TWIM_INTENCLR_LASTTX_Msk (0x1UL << TWIM_INTENCLR_LASTTX_Pos)
  #define TWIM_INTENCLR_LASTTX_Min (0x0UL)
  #define TWIM_INTENCLR_LASTTX_Max (0x1UL)
  #define TWIM_INTENCLR_LASTTX_Clear (0x1UL)
  #define TWIM_INTENCLR_LASTTX_Disabled (0x0UL)
  #define TWIM_INTENCLR_LASTTX_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define TWIM_INTENCLR_DMARXEND_Pos (19UL)
  #define TWIM_INTENCLR_DMARXEND_Msk (0x1UL << TWIM_INTENCLR_DMARXEND_Pos)
  #define TWIM_INTENCLR_DMARXEND_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXEND_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXEND_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXEND_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define TWIM_INTENCLR_DMARXREADY_Pos (20UL)
  #define TWIM_INTENCLR_DMARXREADY_Msk (0x1UL << TWIM_INTENCLR_DMARXREADY_Pos)
  #define TWIM_INTENCLR_DMARXREADY_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXREADY_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXREADY_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXREADY_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define TWIM_INTENCLR_DMARXBUSERROR_Pos (21UL)
  #define TWIM_INTENCLR_DMARXBUSERROR_Msk (0x1UL << TWIM_INTENCLR_DMARXBUSERROR_Pos)
  #define TWIM_INTENCLR_DMARXBUSERROR_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXBUSERROR_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXBUSERROR_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXBUSERROR_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define TWIM_INTENCLR_DMARXMATCH0_Pos (22UL)
  #define TWIM_INTENCLR_DMARXMATCH0_Msk (0x1UL << TWIM_INTENCLR_DMARXMATCH0_Pos)
  #define TWIM_INTENCLR_DMARXMATCH0_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH0_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH0_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH0_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define TWIM_INTENCLR_DMARXMATCH1_Pos (23UL)
  #define TWIM_INTENCLR_DMARXMATCH1_Msk (0x1UL << TWIM_INTENCLR_DMARXMATCH1_Pos)
  #define TWIM_INTENCLR_DMARXMATCH1_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH1_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH1_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH1_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define TWIM_INTENCLR_DMARXMATCH2_Pos (24UL)
  #define TWIM_INTENCLR_DMARXMATCH2_Msk (0x1UL << TWIM_INTENCLR_DMARXMATCH2_Pos)
  #define TWIM_INTENCLR_DMARXMATCH2_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH2_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH2_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH2_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define TWIM_INTENCLR_DMARXMATCH3_Pos (25UL)
  #define TWIM_INTENCLR_DMARXMATCH3_Msk (0x1UL << TWIM_INTENCLR_DMARXMATCH3_Pos)
  #define TWIM_INTENCLR_DMARXMATCH3_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH3_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH3_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH3_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define TWIM_INTENCLR_DMATXEND_Pos (26UL)
  #define TWIM_INTENCLR_DMATXEND_Msk (0x1UL << TWIM_INTENCLR_DMATXEND_Pos)
  #define TWIM_INTENCLR_DMATXEND_Min (0x0UL)
  #define TWIM_INTENCLR_DMATXEND_Max (0x1UL)
  #define TWIM_INTENCLR_DMATXEND_Clear (0x1UL)
  #define TWIM_INTENCLR_DMATXEND_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define TWIM_INTENCLR_DMATXREADY_Pos (27UL)
  #define TWIM_INTENCLR_DMATXREADY_Msk (0x1UL << TWIM_INTENCLR_DMATXREADY_Pos)
  #define TWIM_INTENCLR_DMATXREADY_Min (0x0UL)
  #define TWIM_INTENCLR_DMATXREADY_Max (0x1UL)
  #define TWIM_INTENCLR_DMATXREADY_Clear (0x1UL)
  #define TWIM_INTENCLR_DMATXREADY_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define TWIM_INTENCLR_DMATXBUSERROR_Pos (28UL)
  #define TWIM_INTENCLR_DMATXBUSERROR_Msk (0x1UL << TWIM_INTENCLR_DMATXBUSERROR_Pos)
  #define TWIM_INTENCLR_DMATXBUSERROR_Min (0x0UL)
  #define TWIM_INTENCLR_DMATXBUSERROR_Max (0x1UL)
  #define TWIM_INTENCLR_DMATXBUSERROR_Clear (0x1UL)
  #define TWIM_INTENCLR_DMATXBUSERROR_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMATXBUSERROR_Enabled (0x1UL)


/* TWIM_ERRORSRC: Error source */
  #define TWIM_ERRORSRC_ResetValue (0x00000000UL)

/* OVERRUN @Bit 0 : Overrun error */
  #define TWIM_ERRORSRC_OVERRUN_Pos (0UL)
  #define TWIM_ERRORSRC_OVERRUN_Msk (0x1UL << TWIM_ERRORSRC_OVERRUN_Pos)
  #define TWIM_ERRORSRC_OVERRUN_Min (0x0UL)
  #define TWIM_ERRORSRC_OVERRUN_Max (0x1UL)
  #define TWIM_ERRORSRC_OVERRUN_NotReceived (0x0UL)
  #define TWIM_ERRORSRC_OVERRUN_Received (0x1UL)

/* ANACK @Bit 1 : NACK received after sending the address (write '1' to clear) */
  #define TWIM_ERRORSRC_ANACK_Pos (1UL)
  #define TWIM_ERRORSRC_ANACK_Msk (0x1UL << TWIM_ERRORSRC_ANACK_Pos)
  #define TWIM_ERRORSRC_ANACK_Min (0x0UL)
  #define TWIM_ERRORSRC_ANACK_Max (0x1UL)
  #define TWIM_ERRORSRC_ANACK_NotReceived (0x0UL)
  #define TWIM_ERRORSRC_ANACK_Received (0x1UL)

/* DNACK @Bit 2 : NACK received after sending a data byte (write '1' to clear) */
  #define TWIM_ERRORSRC_DNACK_Pos (2UL)
  #define TWIM_ERRORSRC_DNACK_Msk (0x1UL << TWIM_ERRORSRC_DNACK_Pos)
  #define TWIM_ERRORSRC_DNACK_Min (0x0UL)
  #define TWIM_ERRORSRC_DNACK_Max (0x1UL)
  #define TWIM_ERRORSRC_DNACK_NotReceived (0x0UL)
  #define TWIM_ERRORSRC_DNACK_Received (0x1UL)


/* TWIM_ENABLE: Enable TWIM */
  #define TWIM_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..3 : Enable or disable TWIM */
  #define TWIM_ENABLE_ENABLE_Pos (0UL)
  #define TWIM_ENABLE_ENABLE_Msk (0xFUL << TWIM_ENABLE_ENABLE_Pos)
  #define TWIM_ENABLE_ENABLE_Min (0x0UL)
  #define TWIM_ENABLE_ENABLE_Max (0x6UL)
  #define TWIM_ENABLE_ENABLE_Disabled (0x0UL)
  #define TWIM_ENABLE_ENABLE_Enabled (0x6UL)


/* TWIM_FREQUENCY: TWI frequency. Accuracy depends on the HFCLK source selected. */
  #define TWIM_FREQUENCY_ResetValue (0x04000000UL)

/* FREQUENCY @Bits 0..31 : TWI master clock frequency */
  #define TWIM_FREQUENCY_FREQUENCY_Pos (0UL)
  #define TWIM_FREQUENCY_FREQUENCY_Msk (0xFFFFFFFFUL << TWIM_FREQUENCY_FREQUENCY_Pos)
  #define TWIM_FREQUENCY_FREQUENCY_Min (0x1980000UL)
  #define TWIM_FREQUENCY_FREQUENCY_Max (0x6400000UL)
  #define TWIM_FREQUENCY_FREQUENCY_K100 (0x01980000UL)
  #define TWIM_FREQUENCY_FREQUENCY_K250 (0x04000000UL)
  #define TWIM_FREQUENCY_FREQUENCY_K400 (0x06400000UL)


/* TWIM_ADDRESS: Address used in the TWI transfer */
  #define TWIM_ADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..6 : Address used in the TWI transfer */
  #define TWIM_ADDRESS_ADDRESS_Pos (0UL)
  #define TWIM_ADDRESS_ADDRESS_Msk (0x7FUL << TWIM_ADDRESS_ADDRESS_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TWIS                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct TWIS_TASKS_DMA_RX ================================================= */
/**
  * @brief RX [TWIS_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000000) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000010) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_TWIS_TASKS_DMA_RX_Type;

/* TWIS_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL)
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL)
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL)
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL)


/* TWIS_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL)
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL)
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL)
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL)



/* ================================================== Struct TWIS_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [TWIS_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __OM  NRF_TWIS_TASKS_DMA_RX_Type RX;
} NRF_TWIS_TASKS_DMA_Type;


/* ============================================== Struct TWIS_SUBSCRIBE_DMA_RX =============================================== */
/**
  * @brief RX [TWIS_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  ENABLEMATCH[4];
  __IOM uint32_t  DISABLEMATCH[4];
} NRF_TWIS_SUBSCRIBE_DMA_RX_Type;

/* TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL)


/* TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL)



/* ================================================ Struct TWIS_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [TWIS_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IOM NRF_TWIS_SUBSCRIBE_DMA_RX_Type RX;
} NRF_TWIS_SUBSCRIBE_DMA_Type;


/* ================================================ Struct TWIS_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [TWIS_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_TWIS_EVENTS_DMA_RX_Type;

/* TWIS_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define TWIS_EVENTS_DMA_RX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define TWIS_EVENTS_DMA_RX_END_END_Pos (0UL)
  #define TWIS_EVENTS_DMA_RX_END_END_Msk (0x1UL << TWIS_EVENTS_DMA_RX_END_END_Pos)
  #define TWIS_EVENTS_DMA_RX_END_END_Min (0x0UL)
  #define TWIS_EVENTS_DMA_RX_END_END_Max (0x1UL)
  #define TWIS_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_RX_END_END_Generated (0x1UL)


/* TWIS_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define TWIS_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define TWIS_EVENTS_DMA_RX_READY_READY_Pos (0UL)
  #define TWIS_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << TWIS_EVENTS_DMA_RX_READY_READY_Pos)
  #define TWIS_EVENTS_DMA_RX_READY_READY_Min (0x0UL)
  #define TWIS_EVENTS_DMA_RX_READY_READY_Max (0x1UL)
  #define TWIS_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_RX_READY_READY_Generated (0x1UL)


/* TWIS_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define TWIS_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL)
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL)
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL)
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL)


/* TWIS_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define TWIS_EVENTS_DMA_RX_MATCH_MaxCount (4UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_MinIndex (0UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << TWIS_EVENTS_DMA_RX_MATCH_MATCH_Pos)
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL)



/* ================================================ Struct TWIS_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [TWIS_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
} NRF_TWIS_EVENTS_DMA_TX_Type;

/* TWIS_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define TWIS_EVENTS_DMA_TX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define TWIS_EVENTS_DMA_TX_END_END_Pos (0UL)
  #define TWIS_EVENTS_DMA_TX_END_END_Msk (0x1UL << TWIS_EVENTS_DMA_TX_END_END_Pos)
  #define TWIS_EVENTS_DMA_TX_END_END_Min (0x0UL)
  #define TWIS_EVENTS_DMA_TX_END_END_Max (0x1UL)
  #define TWIS_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_TX_END_END_Generated (0x1UL)


/* TWIS_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define TWIS_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define TWIS_EVENTS_DMA_TX_READY_READY_Pos (0UL)
  #define TWIS_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << TWIS_EVENTS_DMA_TX_READY_READY_Pos)
  #define TWIS_EVENTS_DMA_TX_READY_READY_Min (0x0UL)
  #define TWIS_EVENTS_DMA_TX_READY_READY_Max (0x1UL)
  #define TWIS_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_TX_READY_READY_Generated (0x1UL)


/* TWIS_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define TWIS_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL)
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL)
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL)
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL)



/* ================================================= Struct TWIS_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [TWIS_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_TWIS_EVENTS_DMA_RX_Type RX;
  __IOM NRF_TWIS_EVENTS_DMA_TX_Type TX;
} NRF_TWIS_EVENTS_DMA_Type;


/* =============================================== Struct TWIS_PUBLISH_DMA_RX ================================================ */
/**
  * @brief RX [TWIS_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_TWIS_PUBLISH_DMA_RX_Type;

/* TWIS_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define TWIS_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define TWIS_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_RX_END_CHIDX_Pos)
  #define TWIS_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_RX_END_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_RX_END_EN_Pos)
  #define TWIS_PUBLISH_DMA_RX_END_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_END_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define TWIS_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define TWIS_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_RX_READY_CHIDX_Pos)
  #define TWIS_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_RX_READY_EN_Pos)
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Pos)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define TWIS_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Pos)
  #define TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_RX_MATCH_EN_Pos)
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL)



/* =============================================== Struct TWIS_PUBLISH_DMA_TX ================================================ */
/**
  * @brief TX [TWIS_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
} NRF_TWIS_PUBLISH_DMA_TX_Type;

/* TWIS_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define TWIS_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define TWIS_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_TX_END_CHIDX_Pos)
  #define TWIS_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_TX_END_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_TX_END_EN_Pos)
  #define TWIS_PUBLISH_DMA_TX_END_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_TX_END_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define TWIS_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define TWIS_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_TX_READY_CHIDX_Pos)
  #define TWIS_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_TX_READY_EN_Pos)
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Pos)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL)



/* ================================================= Struct TWIS_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [TWIS_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_TWIS_PUBLISH_DMA_RX_Type RX;
  __IOM NRF_TWIS_PUBLISH_DMA_TX_Type TX;
} NRF_TWIS_PUBLISH_DMA_Type;


/* ==================================================== Struct TWIS_PSEL ===================================================== */
/**
  * @brief PSEL [TWIS_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SCL;
  __IOM uint32_t  SDA;
} NRF_TWIS_PSEL_Type;

/* TWIS_PSEL_SCL: Pin select for SCL signal */
  #define TWIS_PSEL_SCL_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define TWIS_PSEL_SCL_PIN_Pos (0UL)
  #define TWIS_PSEL_SCL_PIN_Msk (0x1FUL << TWIS_PSEL_SCL_PIN_Pos)
  #define TWIS_PSEL_SCL_PIN_Min (0x00UL)
  #define TWIS_PSEL_SCL_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define TWIS_PSEL_SCL_PORT_Pos (5UL)
  #define TWIS_PSEL_SCL_PORT_Msk (0x7UL << TWIS_PSEL_SCL_PORT_Pos)
  #define TWIS_PSEL_SCL_PORT_Min (0x0UL)
  #define TWIS_PSEL_SCL_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define TWIS_PSEL_SCL_CONNECT_Pos (31UL)
  #define TWIS_PSEL_SCL_CONNECT_Msk (0x1UL << TWIS_PSEL_SCL_CONNECT_Pos)
  #define TWIS_PSEL_SCL_CONNECT_Min (0x0UL)
  #define TWIS_PSEL_SCL_CONNECT_Max (0x1UL)
  #define TWIS_PSEL_SCL_CONNECT_Disconnected (0x1UL)
  #define TWIS_PSEL_SCL_CONNECT_Connected (0x0UL)


/* TWIS_PSEL_SDA: Pin select for SDA signal */
  #define TWIS_PSEL_SDA_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define TWIS_PSEL_SDA_PIN_Pos (0UL)
  #define TWIS_PSEL_SDA_PIN_Msk (0x1FUL << TWIS_PSEL_SDA_PIN_Pos)
  #define TWIS_PSEL_SDA_PIN_Min (0x00UL)
  #define TWIS_PSEL_SDA_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define TWIS_PSEL_SDA_PORT_Pos (5UL)
  #define TWIS_PSEL_SDA_PORT_Msk (0x7UL << TWIS_PSEL_SDA_PORT_Pos)
  #define TWIS_PSEL_SDA_PORT_Min (0x0UL)
  #define TWIS_PSEL_SDA_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define TWIS_PSEL_SDA_CONNECT_Pos (31UL)
  #define TWIS_PSEL_SDA_CONNECT_Msk (0x1UL << TWIS_PSEL_SDA_CONNECT_Pos)
  #define TWIS_PSEL_SDA_CONNECT_Min (0x0UL)
  #define TWIS_PSEL_SDA_CONNECT_Max (0x1UL)
  #define TWIS_PSEL_SDA_CONNECT_Disconnected (0x1UL)
  #define TWIS_PSEL_SDA_CONNECT_Connected (0x0UL)



/* ================================================ Struct TWIS_DMA_RX_MATCH ================================================= */
/**
  * @brief MATCH [TWIS_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_TWIS_DMA_RX_MATCH_Type;

/* TWIS_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define TWIS_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL)

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Pos)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL)

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Pos)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL)

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Pos)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL)

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Pos)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL)

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or sticky */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL)

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or sticky */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL)

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or sticky */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL)

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or sticky */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL)


/* TWIS_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define TWIS_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL)
  #define TWIS_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL)
  #define TWIS_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL)
  #define TWIS_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data to look for */
  #define TWIS_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL)
  #define TWIS_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFFFFFFFUL << TWIS_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/



/* =================================================== Struct TWIS_DMA_RX ==================================================== */
/**
  * @brief RX [TWIS_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IOM uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_TWIS_DMA_RX_MATCH_Type MATCH;            /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_TWIS_DMA_RX_Type;

/* TWIS_DMA_RX_PTR: RAM buffer start address */
  #define TWIS_DMA_RX_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TWIS_DMA_RX_PTR_PTR_Pos (0UL)
  #define TWIS_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << TWIS_DMA_RX_PTR_PTR_Pos)


/* TWIS_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define TWIS_DMA_RX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TWIS_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)
  #define TWIS_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIS_DMA_RX_MAXCNT_MAXCNT_Pos)
  #define TWIS_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define TWIS_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* TWIS_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define TWIS_DMA_RX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TWIS_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)
  #define TWIS_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIS_DMA_RX_AMOUNT_AMOUNT_Pos)
  #define TWIS_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define TWIS_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* TWIS_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* TWIS_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TWIS_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TWIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define TWIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TWIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct TWIS_DMA_TX ==================================================== */
/**
  * @brief TX [TWIS_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IOM uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_TWIS_DMA_TX_Type;

/* TWIS_DMA_TX_PTR: RAM buffer start address */
  #define TWIS_DMA_TX_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TWIS_DMA_TX_PTR_PTR_Pos (0UL)
  #define TWIS_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << TWIS_DMA_TX_PTR_PTR_Pos)


/* TWIS_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define TWIS_DMA_TX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TWIS_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)
  #define TWIS_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIS_DMA_TX_MAXCNT_MAXCNT_Pos)
  #define TWIS_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define TWIS_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* TWIS_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define TWIS_DMA_TX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TWIS_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)
  #define TWIS_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIS_DMA_TX_AMOUNT_AMOUNT_Pos)
  #define TWIS_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define TWIS_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* TWIS_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* TWIS_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TWIS_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TWIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define TWIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TWIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct TWIS_DMA ===================================================== */
/**
  * @brief DMA [TWIS_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_TWIS_DMA_RX_Type RX;
  __IOM NRF_TWIS_DMA_TX_Type TX;
} NRF_TWIS_DMA_Type;

/* ======================================================= Struct TWIS ======================================================= */
/**
  * @brief I2C compatible Two-Wire Slave Interface with EasyDMA
  */
  typedef struct {
    __IM uint32_t RESERVED;
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED1;
    __OM uint32_t TASKS_SUSPEND;
    __OM uint32_t TASKS_RESUME;
    __IM uint32_t RESERVED2[3];
    __OM uint32_t TASKS_PREPARERX;
    __OM uint32_t TASKS_PREPARETX;
    __IM uint32_t RESERVED3[2];
    __OM NRF_TWIS_TASKS_DMA_Type TASKS_DMA;
    __IM uint32_t RESERVED4[13];
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED5;
    __IOM uint32_t SUBSCRIBE_SUSPEND;
    __IOM uint32_t SUBSCRIBE_RESUME;
    __IM uint32_t RESERVED6[3];
    __IOM uint32_t SUBSCRIBE_PREPARERX;
    __IOM uint32_t SUBSCRIBE_PREPARETX;
    __IM uint32_t RESERVED7[2];
    __IOM NRF_TWIS_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA;
    __IM uint32_t RESERVED8[13];
    __IOM uint32_t EVENTS_STOPPED;
    __IM uint32_t RESERVED9[3];
    __IOM uint32_t EVENTS_ERROR;
    __IM uint32_t RESERVED10[9];
    __IOM uint32_t EVENTS_WRITE;
    __IOM uint32_t EVENTS_READ;
    __IM uint32_t RESERVED11[2];
    __IOM NRF_TWIS_EVENTS_DMA_Type EVENTS_DMA;
    __IM uint32_t RESERVED12[4];
    __IOM uint32_t PUBLISH_STOPPED;
    __IM uint32_t RESERVED13[3];
    __IOM uint32_t PUBLISH_ERROR;
    __IM uint32_t RESERVED14[9];
    __IOM uint32_t PUBLISH_WRITE;
    __IOM uint32_t PUBLISH_READ;
    __IM uint32_t RESERVED15[2];
    __IOM NRF_TWIS_PUBLISH_DMA_Type PUBLISH_DMA;
    __IM uint32_t RESERVED16[3];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED17[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED18[113];
    __IOM uint32_t ERRORSRC;
    __IM uint32_t MATCH;
    __IM uint32_t RESERVED19[10];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED20[33];
    __IOM uint32_t ADDRESS[2];
    __IM uint32_t RESERVED21;
    __IOM uint32_t CONFIG;
    __IM uint32_t RESERVED22[10];
    __IOM uint32_t ORC;                              /*!< (@ 0x000005C0) Over-read character. Character sent out in case of an
                                                                         over-read of the transmit buffer.*/
    __IM uint32_t RESERVED23[15];
    __IOM NRF_TWIS_PSEL_Type PSEL;
    __IM uint32_t RESERVED24[62];
    __IOM NRF_TWIS_DMA_Type DMA;
  } NRF_TWIS_Type;

/* TWIS_TASKS_STOP: Stop TWI transaction */
  #define TWIS_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop TWI transaction */
  #define TWIS_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define TWIS_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TWIS_TASKS_STOP_TASKS_STOP_Pos)
  #define TWIS_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define TWIS_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define TWIS_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* TWIS_TASKS_SUSPEND: Suspend TWI transaction */
  #define TWIS_TASKS_SUSPEND_ResetValue (0x00000000UL)

/* TASKS_SUSPEND @Bit 0 : Suspend TWI transaction */
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL)
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND
                                                                            field.*/
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Min (0x1UL)
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Max (0x1UL)
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (0x1UL)


/* TWIS_TASKS_RESUME: Resume TWI transaction */
  #define TWIS_TASKS_RESUME_ResetValue (0x00000000UL)

/* TASKS_RESUME @Bit 0 : Resume TWI transaction */
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Pos (0UL)
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << TWIS_TASKS_RESUME_TASKS_RESUME_Pos)
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Min (0x1UL)
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Max (0x1UL)
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Trigger (0x1UL)


/* TWIS_TASKS_PREPARERX: Prepare the TWI slave to respond to a write command */
  #define TWIS_TASKS_PREPARERX_ResetValue (0x00000000UL)

/* TASKS_PREPARERX @Bit 0 : Prepare the TWI slave to respond to a write command */
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Pos (0UL)
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Msk (0x1UL << TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Pos) /*!< Bit mask of
                                                                            TASKS_PREPARERX field.*/
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Min (0x1UL)
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Max (0x1UL)
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Trigger (0x1UL)


/* TWIS_TASKS_PREPARETX: Prepare the TWI slave to respond to a read command */
  #define TWIS_TASKS_PREPARETX_ResetValue (0x00000000UL)

/* TASKS_PREPARETX @Bit 0 : Prepare the TWI slave to respond to a read command */
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Pos (0UL)
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Msk (0x1UL << TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Pos) /*!< Bit mask of
                                                                            TASKS_PREPARETX field.*/
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Min (0x1UL)
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Max (0x1UL)
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Trigger (0x1UL)


/* TWIS_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define TWIS_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TWIS_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_STOP_CHIDX_Pos)
  #define TWIS_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_STOP_EN_Msk (0x1UL << TWIS_SUBSCRIBE_STOP_EN_Pos)
  #define TWIS_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* TWIS_SUBSCRIBE_SUSPEND: Subscribe configuration for task SUSPEND */
  #define TWIS_SUBSCRIBE_SUSPEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SUSPEND will subscribe to */
  #define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_SUSPEND_CHIDX_Pos)
  #define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << TWIS_SUBSCRIBE_SUSPEND_EN_Pos)
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Enabled (0x1UL)


/* TWIS_SUBSCRIBE_RESUME: Subscribe configuration for task RESUME */
  #define TWIS_SUBSCRIBE_RESUME_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RESUME will subscribe to */
  #define TWIS_SUBSCRIBE_RESUME_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_RESUME_CHIDX_Pos)
  #define TWIS_SUBSCRIBE_RESUME_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_RESUME_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_RESUME_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_RESUME_EN_Msk (0x1UL << TWIS_SUBSCRIBE_RESUME_EN_Pos)
  #define TWIS_SUBSCRIBE_RESUME_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_RESUME_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_RESUME_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_RESUME_EN_Enabled (0x1UL)


/* TWIS_SUBSCRIBE_PREPARERX: Subscribe configuration for task PREPARERX */
  #define TWIS_SUBSCRIBE_PREPARERX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task PREPARERX will subscribe to */
  #define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_PREPARERX_CHIDX_Pos)
  #define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Msk (0x1UL << TWIS_SUBSCRIBE_PREPARERX_EN_Pos)
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Enabled (0x1UL)


/* TWIS_SUBSCRIBE_PREPARETX: Subscribe configuration for task PREPARETX */
  #define TWIS_SUBSCRIBE_PREPARETX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task PREPARETX will subscribe to */
  #define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_PREPARETX_CHIDX_Pos)
  #define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Msk (0x1UL << TWIS_SUBSCRIBE_PREPARETX_EN_Pos)
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Enabled (0x1UL)


/* TWIS_EVENTS_STOPPED: TWI stopped */
  #define TWIS_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : TWI stopped */
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* TWIS_EVENTS_ERROR: TWI error */
  #define TWIS_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : TWI error */
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << TWIS_EVENTS_ERROR_EVENTS_ERROR_Pos)
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* TWIS_EVENTS_WRITE: Write command received */
  #define TWIS_EVENTS_WRITE_ResetValue (0x00000000UL)

/* EVENTS_WRITE @Bit 0 : Write command received */
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Pos (0UL)
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Msk (0x1UL << TWIS_EVENTS_WRITE_EVENTS_WRITE_Pos)
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Min (0x0UL)
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Max (0x1UL)
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_NotGenerated (0x0UL)
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Generated (0x1UL)


/* TWIS_EVENTS_READ: Read command received */
  #define TWIS_EVENTS_READ_ResetValue (0x00000000UL)

/* EVENTS_READ @Bit 0 : Read command received */
  #define TWIS_EVENTS_READ_EVENTS_READ_Pos (0UL)
  #define TWIS_EVENTS_READ_EVENTS_READ_Msk (0x1UL << TWIS_EVENTS_READ_EVENTS_READ_Pos)
  #define TWIS_EVENTS_READ_EVENTS_READ_Min (0x0UL)
  #define TWIS_EVENTS_READ_EVENTS_READ_Max (0x1UL)
  #define TWIS_EVENTS_READ_EVENTS_READ_NotGenerated (0x0UL)
  #define TWIS_EVENTS_READ_EVENTS_READ_Generated (0x1UL)


/* TWIS_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define TWIS_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define TWIS_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_STOPPED_CHIDX_Pos)
  #define TWIS_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_STOPPED_EN_Pos (31UL)
  #define TWIS_PUBLISH_STOPPED_EN_Msk (0x1UL << TWIS_PUBLISH_STOPPED_EN_Pos)
  #define TWIS_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define TWIS_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define TWIS_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define TWIS_PUBLISH_ERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define TWIS_PUBLISH_ERROR_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_ERROR_CHIDX_Pos)
  #define TWIS_PUBLISH_ERROR_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_ERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_ERROR_EN_Pos (31UL)
  #define TWIS_PUBLISH_ERROR_EN_Msk (0x1UL << TWIS_PUBLISH_ERROR_EN_Pos)
  #define TWIS_PUBLISH_ERROR_EN_Min (0x0UL)
  #define TWIS_PUBLISH_ERROR_EN_Max (0x1UL)
  #define TWIS_PUBLISH_ERROR_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_ERROR_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_WRITE: Publish configuration for event WRITE */
  #define TWIS_PUBLISH_WRITE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event WRITE will publish to */
  #define TWIS_PUBLISH_WRITE_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_WRITE_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_WRITE_CHIDX_Pos)
  #define TWIS_PUBLISH_WRITE_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_WRITE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_WRITE_EN_Pos (31UL)
  #define TWIS_PUBLISH_WRITE_EN_Msk (0x1UL << TWIS_PUBLISH_WRITE_EN_Pos)
  #define TWIS_PUBLISH_WRITE_EN_Min (0x0UL)
  #define TWIS_PUBLISH_WRITE_EN_Max (0x1UL)
  #define TWIS_PUBLISH_WRITE_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_WRITE_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_READ: Publish configuration for event READ */
  #define TWIS_PUBLISH_READ_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READ will publish to */
  #define TWIS_PUBLISH_READ_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_READ_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_READ_CHIDX_Pos)
  #define TWIS_PUBLISH_READ_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_READ_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_READ_EN_Pos (31UL)
  #define TWIS_PUBLISH_READ_EN_Msk (0x1UL << TWIS_PUBLISH_READ_EN_Pos)
  #define TWIS_PUBLISH_READ_EN_Min (0x0UL)
  #define TWIS_PUBLISH_READ_EN_Max (0x1UL)
  #define TWIS_PUBLISH_READ_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_READ_EN_Enabled (0x1UL)


/* TWIS_SHORTS: Shortcuts between local events and tasks */
  #define TWIS_SHORTS_ResetValue (0x00000000UL)

/* WRITE_SUSPEND @Bit 13 : Shortcut between event WRITE and task SUSPEND */
  #define TWIS_SHORTS_WRITE_SUSPEND_Pos (13UL)
  #define TWIS_SHORTS_WRITE_SUSPEND_Msk (0x1UL << TWIS_SHORTS_WRITE_SUSPEND_Pos)
  #define TWIS_SHORTS_WRITE_SUSPEND_Min (0x0UL)
  #define TWIS_SHORTS_WRITE_SUSPEND_Max (0x1UL)
  #define TWIS_SHORTS_WRITE_SUSPEND_Disabled (0x0UL)
  #define TWIS_SHORTS_WRITE_SUSPEND_Enabled (0x1UL)

/* READ_SUSPEND @Bit 14 : Shortcut between event READ and task SUSPEND */
  #define TWIS_SHORTS_READ_SUSPEND_Pos (14UL)
  #define TWIS_SHORTS_READ_SUSPEND_Msk (0x1UL << TWIS_SHORTS_READ_SUSPEND_Pos)
  #define TWIS_SHORTS_READ_SUSPEND_Min (0x0UL)
  #define TWIS_SHORTS_READ_SUSPEND_Max (0x1UL)
  #define TWIS_SHORTS_READ_SUSPEND_Disabled (0x0UL)
  #define TWIS_SHORTS_READ_SUSPEND_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL)
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL)
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL)
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL)
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL)
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL)
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL)
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL)
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL)


/* TWIS_INTEN: Enable or disable interrupt */
  #define TWIS_INTEN_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Enable or disable interrupt for event STOPPED */
  #define TWIS_INTEN_STOPPED_Pos (1UL)
  #define TWIS_INTEN_STOPPED_Msk (0x1UL << TWIS_INTEN_STOPPED_Pos)
  #define TWIS_INTEN_STOPPED_Min (0x0UL)
  #define TWIS_INTEN_STOPPED_Max (0x1UL)
  #define TWIS_INTEN_STOPPED_Disabled (0x0UL)
  #define TWIS_INTEN_STOPPED_Enabled (0x1UL)

/* ERROR @Bit 5 : Enable or disable interrupt for event ERROR */
  #define TWIS_INTEN_ERROR_Pos (5UL)
  #define TWIS_INTEN_ERROR_Msk (0x1UL << TWIS_INTEN_ERROR_Pos)
  #define TWIS_INTEN_ERROR_Min (0x0UL)
  #define TWIS_INTEN_ERROR_Max (0x1UL)
  #define TWIS_INTEN_ERROR_Disabled (0x0UL)
  #define TWIS_INTEN_ERROR_Enabled (0x1UL)

/* WRITE @Bit 15 : Enable or disable interrupt for event WRITE */
  #define TWIS_INTEN_WRITE_Pos (15UL)
  #define TWIS_INTEN_WRITE_Msk (0x1UL << TWIS_INTEN_WRITE_Pos)
  #define TWIS_INTEN_WRITE_Min (0x0UL)
  #define TWIS_INTEN_WRITE_Max (0x1UL)
  #define TWIS_INTEN_WRITE_Disabled (0x0UL)
  #define TWIS_INTEN_WRITE_Enabled (0x1UL)

/* READ @Bit 16 : Enable or disable interrupt for event READ */
  #define TWIS_INTEN_READ_Pos (16UL)
  #define TWIS_INTEN_READ_Msk (0x1UL << TWIS_INTEN_READ_Pos)
  #define TWIS_INTEN_READ_Min (0x0UL)
  #define TWIS_INTEN_READ_Max (0x1UL)
  #define TWIS_INTEN_READ_Disabled (0x0UL)
  #define TWIS_INTEN_READ_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Enable or disable interrupt for event DMARXEND */
  #define TWIS_INTEN_DMARXEND_Pos (19UL)
  #define TWIS_INTEN_DMARXEND_Msk (0x1UL << TWIS_INTEN_DMARXEND_Pos)
  #define TWIS_INTEN_DMARXEND_Min (0x0UL)
  #define TWIS_INTEN_DMARXEND_Max (0x1UL)
  #define TWIS_INTEN_DMARXEND_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Enable or disable interrupt for event DMARXREADY */
  #define TWIS_INTEN_DMARXREADY_Pos (20UL)
  #define TWIS_INTEN_DMARXREADY_Msk (0x1UL << TWIS_INTEN_DMARXREADY_Pos)
  #define TWIS_INTEN_DMARXREADY_Min (0x0UL)
  #define TWIS_INTEN_DMARXREADY_Max (0x1UL)
  #define TWIS_INTEN_DMARXREADY_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Enable or disable interrupt for event DMARXBUSERROR */
  #define TWIS_INTEN_DMARXBUSERROR_Pos (21UL)
  #define TWIS_INTEN_DMARXBUSERROR_Msk (0x1UL << TWIS_INTEN_DMARXBUSERROR_Pos)
  #define TWIS_INTEN_DMARXBUSERROR_Min (0x0UL)
  #define TWIS_INTEN_DMARXBUSERROR_Max (0x1UL)
  #define TWIS_INTEN_DMARXBUSERROR_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Enable or disable interrupt for event DMARXMATCH[0] */
  #define TWIS_INTEN_DMARXMATCH0_Pos (22UL)
  #define TWIS_INTEN_DMARXMATCH0_Msk (0x1UL << TWIS_INTEN_DMARXMATCH0_Pos)
  #define TWIS_INTEN_DMARXMATCH0_Min (0x0UL)
  #define TWIS_INTEN_DMARXMATCH0_Max (0x1UL)
  #define TWIS_INTEN_DMARXMATCH0_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Enable or disable interrupt for event DMARXMATCH[1] */
  #define TWIS_INTEN_DMARXMATCH1_Pos (23UL)
  #define TWIS_INTEN_DMARXMATCH1_Msk (0x1UL << TWIS_INTEN_DMARXMATCH1_Pos)
  #define TWIS_INTEN_DMARXMATCH1_Min (0x0UL)
  #define TWIS_INTEN_DMARXMATCH1_Max (0x1UL)
  #define TWIS_INTEN_DMARXMATCH1_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Enable or disable interrupt for event DMARXMATCH[2] */
  #define TWIS_INTEN_DMARXMATCH2_Pos (24UL)
  #define TWIS_INTEN_DMARXMATCH2_Msk (0x1UL << TWIS_INTEN_DMARXMATCH2_Pos)
  #define TWIS_INTEN_DMARXMATCH2_Min (0x0UL)
  #define TWIS_INTEN_DMARXMATCH2_Max (0x1UL)
  #define TWIS_INTEN_DMARXMATCH2_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Enable or disable interrupt for event DMARXMATCH[3] */
  #define TWIS_INTEN_DMARXMATCH3_Pos (25UL)
  #define TWIS_INTEN_DMARXMATCH3_Msk (0x1UL << TWIS_INTEN_DMARXMATCH3_Pos)
  #define TWIS_INTEN_DMARXMATCH3_Min (0x0UL)
  #define TWIS_INTEN_DMARXMATCH3_Max (0x1UL)
  #define TWIS_INTEN_DMARXMATCH3_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Enable or disable interrupt for event DMATXEND */
  #define TWIS_INTEN_DMATXEND_Pos (26UL)
  #define TWIS_INTEN_DMATXEND_Msk (0x1UL << TWIS_INTEN_DMATXEND_Pos)
  #define TWIS_INTEN_DMATXEND_Min (0x0UL)
  #define TWIS_INTEN_DMATXEND_Max (0x1UL)
  #define TWIS_INTEN_DMATXEND_Disabled (0x0UL)
  #define TWIS_INTEN_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Enable or disable interrupt for event DMATXREADY */
  #define TWIS_INTEN_DMATXREADY_Pos (27UL)
  #define TWIS_INTEN_DMATXREADY_Msk (0x1UL << TWIS_INTEN_DMATXREADY_Pos)
  #define TWIS_INTEN_DMATXREADY_Min (0x0UL)
  #define TWIS_INTEN_DMATXREADY_Max (0x1UL)
  #define TWIS_INTEN_DMATXREADY_Disabled (0x0UL)
  #define TWIS_INTEN_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Enable or disable interrupt for event DMATXBUSERROR */
  #define TWIS_INTEN_DMATXBUSERROR_Pos (28UL)
  #define TWIS_INTEN_DMATXBUSERROR_Msk (0x1UL << TWIS_INTEN_DMATXBUSERROR_Pos)
  #define TWIS_INTEN_DMATXBUSERROR_Min (0x0UL)
  #define TWIS_INTEN_DMATXBUSERROR_Max (0x1UL)
  #define TWIS_INTEN_DMATXBUSERROR_Disabled (0x0UL)
  #define TWIS_INTEN_DMATXBUSERROR_Enabled (0x1UL)


/* TWIS_INTENSET: Enable interrupt */
  #define TWIS_INTENSET_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define TWIS_INTENSET_STOPPED_Pos (1UL)
  #define TWIS_INTENSET_STOPPED_Msk (0x1UL << TWIS_INTENSET_STOPPED_Pos)
  #define TWIS_INTENSET_STOPPED_Min (0x0UL)
  #define TWIS_INTENSET_STOPPED_Max (0x1UL)
  #define TWIS_INTENSET_STOPPED_Set (0x1UL)
  #define TWIS_INTENSET_STOPPED_Disabled (0x0UL)
  #define TWIS_INTENSET_STOPPED_Enabled (0x1UL)

/* ERROR @Bit 5 : Write '1' to enable interrupt for event ERROR */
  #define TWIS_INTENSET_ERROR_Pos (5UL)
  #define TWIS_INTENSET_ERROR_Msk (0x1UL << TWIS_INTENSET_ERROR_Pos)
  #define TWIS_INTENSET_ERROR_Min (0x0UL)
  #define TWIS_INTENSET_ERROR_Max (0x1UL)
  #define TWIS_INTENSET_ERROR_Set (0x1UL)
  #define TWIS_INTENSET_ERROR_Disabled (0x0UL)
  #define TWIS_INTENSET_ERROR_Enabled (0x1UL)

/* WRITE @Bit 15 : Write '1' to enable interrupt for event WRITE */
  #define TWIS_INTENSET_WRITE_Pos (15UL)
  #define TWIS_INTENSET_WRITE_Msk (0x1UL << TWIS_INTENSET_WRITE_Pos)
  #define TWIS_INTENSET_WRITE_Min (0x0UL)
  #define TWIS_INTENSET_WRITE_Max (0x1UL)
  #define TWIS_INTENSET_WRITE_Set (0x1UL)
  #define TWIS_INTENSET_WRITE_Disabled (0x0UL)
  #define TWIS_INTENSET_WRITE_Enabled (0x1UL)

/* READ @Bit 16 : Write '1' to enable interrupt for event READ */
  #define TWIS_INTENSET_READ_Pos (16UL)
  #define TWIS_INTENSET_READ_Msk (0x1UL << TWIS_INTENSET_READ_Pos)
  #define TWIS_INTENSET_READ_Min (0x0UL)
  #define TWIS_INTENSET_READ_Max (0x1UL)
  #define TWIS_INTENSET_READ_Set (0x1UL)
  #define TWIS_INTENSET_READ_Disabled (0x0UL)
  #define TWIS_INTENSET_READ_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define TWIS_INTENSET_DMARXEND_Pos (19UL)
  #define TWIS_INTENSET_DMARXEND_Msk (0x1UL << TWIS_INTENSET_DMARXEND_Pos)
  #define TWIS_INTENSET_DMARXEND_Min (0x0UL)
  #define TWIS_INTENSET_DMARXEND_Max (0x1UL)
  #define TWIS_INTENSET_DMARXEND_Set (0x1UL)
  #define TWIS_INTENSET_DMARXEND_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define TWIS_INTENSET_DMARXREADY_Pos (20UL)
  #define TWIS_INTENSET_DMARXREADY_Msk (0x1UL << TWIS_INTENSET_DMARXREADY_Pos)
  #define TWIS_INTENSET_DMARXREADY_Min (0x0UL)
  #define TWIS_INTENSET_DMARXREADY_Max (0x1UL)
  #define TWIS_INTENSET_DMARXREADY_Set (0x1UL)
  #define TWIS_INTENSET_DMARXREADY_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define TWIS_INTENSET_DMARXBUSERROR_Pos (21UL)
  #define TWIS_INTENSET_DMARXBUSERROR_Msk (0x1UL << TWIS_INTENSET_DMARXBUSERROR_Pos)
  #define TWIS_INTENSET_DMARXBUSERROR_Min (0x0UL)
  #define TWIS_INTENSET_DMARXBUSERROR_Max (0x1UL)
  #define TWIS_INTENSET_DMARXBUSERROR_Set (0x1UL)
  #define TWIS_INTENSET_DMARXBUSERROR_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define TWIS_INTENSET_DMARXMATCH0_Pos (22UL)
  #define TWIS_INTENSET_DMARXMATCH0_Msk (0x1UL << TWIS_INTENSET_DMARXMATCH0_Pos)
  #define TWIS_INTENSET_DMARXMATCH0_Min (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH0_Max (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH0_Set (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH0_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define TWIS_INTENSET_DMARXMATCH1_Pos (23UL)
  #define TWIS_INTENSET_DMARXMATCH1_Msk (0x1UL << TWIS_INTENSET_DMARXMATCH1_Pos)
  #define TWIS_INTENSET_DMARXMATCH1_Min (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH1_Max (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH1_Set (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH1_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define TWIS_INTENSET_DMARXMATCH2_Pos (24UL)
  #define TWIS_INTENSET_DMARXMATCH2_Msk (0x1UL << TWIS_INTENSET_DMARXMATCH2_Pos)
  #define TWIS_INTENSET_DMARXMATCH2_Min (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH2_Max (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH2_Set (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH2_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define TWIS_INTENSET_DMARXMATCH3_Pos (25UL)
  #define TWIS_INTENSET_DMARXMATCH3_Msk (0x1UL << TWIS_INTENSET_DMARXMATCH3_Pos)
  #define TWIS_INTENSET_DMARXMATCH3_Min (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH3_Max (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH3_Set (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH3_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define TWIS_INTENSET_DMATXEND_Pos (26UL)
  #define TWIS_INTENSET_DMATXEND_Msk (0x1UL << TWIS_INTENSET_DMATXEND_Pos)
  #define TWIS_INTENSET_DMATXEND_Min (0x0UL)
  #define TWIS_INTENSET_DMATXEND_Max (0x1UL)
  #define TWIS_INTENSET_DMATXEND_Set (0x1UL)
  #define TWIS_INTENSET_DMATXEND_Disabled (0x0UL)
  #define TWIS_INTENSET_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define TWIS_INTENSET_DMATXREADY_Pos (27UL)
  #define TWIS_INTENSET_DMATXREADY_Msk (0x1UL << TWIS_INTENSET_DMATXREADY_Pos)
  #define TWIS_INTENSET_DMATXREADY_Min (0x0UL)
  #define TWIS_INTENSET_DMATXREADY_Max (0x1UL)
  #define TWIS_INTENSET_DMATXREADY_Set (0x1UL)
  #define TWIS_INTENSET_DMATXREADY_Disabled (0x0UL)
  #define TWIS_INTENSET_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define TWIS_INTENSET_DMATXBUSERROR_Pos (28UL)
  #define TWIS_INTENSET_DMATXBUSERROR_Msk (0x1UL << TWIS_INTENSET_DMATXBUSERROR_Pos)
  #define TWIS_INTENSET_DMATXBUSERROR_Min (0x0UL)
  #define TWIS_INTENSET_DMATXBUSERROR_Max (0x1UL)
  #define TWIS_INTENSET_DMATXBUSERROR_Set (0x1UL)
  #define TWIS_INTENSET_DMATXBUSERROR_Disabled (0x0UL)
  #define TWIS_INTENSET_DMATXBUSERROR_Enabled (0x1UL)


/* TWIS_INTENCLR: Disable interrupt */
  #define TWIS_INTENCLR_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define TWIS_INTENCLR_STOPPED_Pos (1UL)
  #define TWIS_INTENCLR_STOPPED_Msk (0x1UL << TWIS_INTENCLR_STOPPED_Pos)
  #define TWIS_INTENCLR_STOPPED_Min (0x0UL)
  #define TWIS_INTENCLR_STOPPED_Max (0x1UL)
  #define TWIS_INTENCLR_STOPPED_Clear (0x1UL)
  #define TWIS_INTENCLR_STOPPED_Disabled (0x0UL)
  #define TWIS_INTENCLR_STOPPED_Enabled (0x1UL)

/* ERROR @Bit 5 : Write '1' to disable interrupt for event ERROR */
  #define TWIS_INTENCLR_ERROR_Pos (5UL)
  #define TWIS_INTENCLR_ERROR_Msk (0x1UL << TWIS_INTENCLR_ERROR_Pos)
  #define TWIS_INTENCLR_ERROR_Min (0x0UL)
  #define TWIS_INTENCLR_ERROR_Max (0x1UL)
  #define TWIS_INTENCLR_ERROR_Clear (0x1UL)
  #define TWIS_INTENCLR_ERROR_Disabled (0x0UL)
  #define TWIS_INTENCLR_ERROR_Enabled (0x1UL)

/* WRITE @Bit 15 : Write '1' to disable interrupt for event WRITE */
  #define TWIS_INTENCLR_WRITE_Pos (15UL)
  #define TWIS_INTENCLR_WRITE_Msk (0x1UL << TWIS_INTENCLR_WRITE_Pos)
  #define TWIS_INTENCLR_WRITE_Min (0x0UL)
  #define TWIS_INTENCLR_WRITE_Max (0x1UL)
  #define TWIS_INTENCLR_WRITE_Clear (0x1UL)
  #define TWIS_INTENCLR_WRITE_Disabled (0x0UL)
  #define TWIS_INTENCLR_WRITE_Enabled (0x1UL)

/* READ @Bit 16 : Write '1' to disable interrupt for event READ */
  #define TWIS_INTENCLR_READ_Pos (16UL)
  #define TWIS_INTENCLR_READ_Msk (0x1UL << TWIS_INTENCLR_READ_Pos)
  #define TWIS_INTENCLR_READ_Min (0x0UL)
  #define TWIS_INTENCLR_READ_Max (0x1UL)
  #define TWIS_INTENCLR_READ_Clear (0x1UL)
  #define TWIS_INTENCLR_READ_Disabled (0x0UL)
  #define TWIS_INTENCLR_READ_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define TWIS_INTENCLR_DMARXEND_Pos (19UL)
  #define TWIS_INTENCLR_DMARXEND_Msk (0x1UL << TWIS_INTENCLR_DMARXEND_Pos)
  #define TWIS_INTENCLR_DMARXEND_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXEND_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXEND_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXEND_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define TWIS_INTENCLR_DMARXREADY_Pos (20UL)
  #define TWIS_INTENCLR_DMARXREADY_Msk (0x1UL << TWIS_INTENCLR_DMARXREADY_Pos)
  #define TWIS_INTENCLR_DMARXREADY_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXREADY_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXREADY_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXREADY_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define TWIS_INTENCLR_DMARXBUSERROR_Pos (21UL)
  #define TWIS_INTENCLR_DMARXBUSERROR_Msk (0x1UL << TWIS_INTENCLR_DMARXBUSERROR_Pos)
  #define TWIS_INTENCLR_DMARXBUSERROR_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXBUSERROR_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXBUSERROR_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXBUSERROR_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define TWIS_INTENCLR_DMARXMATCH0_Pos (22UL)
  #define TWIS_INTENCLR_DMARXMATCH0_Msk (0x1UL << TWIS_INTENCLR_DMARXMATCH0_Pos)
  #define TWIS_INTENCLR_DMARXMATCH0_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH0_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH0_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH0_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define TWIS_INTENCLR_DMARXMATCH1_Pos (23UL)
  #define TWIS_INTENCLR_DMARXMATCH1_Msk (0x1UL << TWIS_INTENCLR_DMARXMATCH1_Pos)
  #define TWIS_INTENCLR_DMARXMATCH1_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH1_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH1_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH1_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define TWIS_INTENCLR_DMARXMATCH2_Pos (24UL)
  #define TWIS_INTENCLR_DMARXMATCH2_Msk (0x1UL << TWIS_INTENCLR_DMARXMATCH2_Pos)
  #define TWIS_INTENCLR_DMARXMATCH2_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH2_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH2_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH2_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define TWIS_INTENCLR_DMARXMATCH3_Pos (25UL)
  #define TWIS_INTENCLR_DMARXMATCH3_Msk (0x1UL << TWIS_INTENCLR_DMARXMATCH3_Pos)
  #define TWIS_INTENCLR_DMARXMATCH3_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH3_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH3_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH3_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define TWIS_INTENCLR_DMATXEND_Pos (26UL)
  #define TWIS_INTENCLR_DMATXEND_Msk (0x1UL << TWIS_INTENCLR_DMATXEND_Pos)
  #define TWIS_INTENCLR_DMATXEND_Min (0x0UL)
  #define TWIS_INTENCLR_DMATXEND_Max (0x1UL)
  #define TWIS_INTENCLR_DMATXEND_Clear (0x1UL)
  #define TWIS_INTENCLR_DMATXEND_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define TWIS_INTENCLR_DMATXREADY_Pos (27UL)
  #define TWIS_INTENCLR_DMATXREADY_Msk (0x1UL << TWIS_INTENCLR_DMATXREADY_Pos)
  #define TWIS_INTENCLR_DMATXREADY_Min (0x0UL)
  #define TWIS_INTENCLR_DMATXREADY_Max (0x1UL)
  #define TWIS_INTENCLR_DMATXREADY_Clear (0x1UL)
  #define TWIS_INTENCLR_DMATXREADY_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define TWIS_INTENCLR_DMATXBUSERROR_Pos (28UL)
  #define TWIS_INTENCLR_DMATXBUSERROR_Msk (0x1UL << TWIS_INTENCLR_DMATXBUSERROR_Pos)
  #define TWIS_INTENCLR_DMATXBUSERROR_Min (0x0UL)
  #define TWIS_INTENCLR_DMATXBUSERROR_Max (0x1UL)
  #define TWIS_INTENCLR_DMATXBUSERROR_Clear (0x1UL)
  #define TWIS_INTENCLR_DMATXBUSERROR_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMATXBUSERROR_Enabled (0x1UL)


/* TWIS_ERRORSRC: Error source */
  #define TWIS_ERRORSRC_ResetValue (0x00000000UL)

/* OVERFLOW @Bit 0 : RX buffer overflow detected, and prevented */
  #define TWIS_ERRORSRC_OVERFLOW_Pos (0UL)
  #define TWIS_ERRORSRC_OVERFLOW_Msk (0x1UL << TWIS_ERRORSRC_OVERFLOW_Pos)
  #define TWIS_ERRORSRC_OVERFLOW_Min (0x0UL)
  #define TWIS_ERRORSRC_OVERFLOW_Max (0x1UL)
  #define TWIS_ERRORSRC_OVERFLOW_NotDetected (0x0UL)
  #define TWIS_ERRORSRC_OVERFLOW_Detected (0x1UL)

/* DNACK @Bit 2 : NACK sent after receiving a data byte */
  #define TWIS_ERRORSRC_DNACK_Pos (2UL)
  #define TWIS_ERRORSRC_DNACK_Msk (0x1UL << TWIS_ERRORSRC_DNACK_Pos)
  #define TWIS_ERRORSRC_DNACK_Min (0x0UL)
  #define TWIS_ERRORSRC_DNACK_Max (0x1UL)
  #define TWIS_ERRORSRC_DNACK_NotReceived (0x0UL)
  #define TWIS_ERRORSRC_DNACK_Received (0x1UL)

/* OVERREAD @Bit 3 : TX buffer over-read detected, and prevented */
  #define TWIS_ERRORSRC_OVERREAD_Pos (3UL)
  #define TWIS_ERRORSRC_OVERREAD_Msk (0x1UL << TWIS_ERRORSRC_OVERREAD_Pos)
  #define TWIS_ERRORSRC_OVERREAD_Min (0x0UL)
  #define TWIS_ERRORSRC_OVERREAD_Max (0x1UL)
  #define TWIS_ERRORSRC_OVERREAD_NotDetected (0x0UL)
  #define TWIS_ERRORSRC_OVERREAD_Detected (0x1UL)


/* TWIS_MATCH: Status register indicating which address had a match */
  #define TWIS_MATCH_ResetValue (0x00000000UL)

/* MATCH @Bit 0 : Indication of which address in ADDRESS that matched the incoming address */
  #define TWIS_MATCH_MATCH_Pos (0UL)
  #define TWIS_MATCH_MATCH_Msk (0x1UL << TWIS_MATCH_MATCH_Pos)
  #define TWIS_MATCH_MATCH_Min (0x0UL)
  #define TWIS_MATCH_MATCH_Max (0x1UL)


/* TWIS_ENABLE: Enable TWIS */
  #define TWIS_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..3 : Enable or disable TWIS */
  #define TWIS_ENABLE_ENABLE_Pos (0UL)
  #define TWIS_ENABLE_ENABLE_Msk (0xFUL << TWIS_ENABLE_ENABLE_Pos)
  #define TWIS_ENABLE_ENABLE_Min (0x0UL)
  #define TWIS_ENABLE_ENABLE_Max (0x9UL)
  #define TWIS_ENABLE_ENABLE_Disabled (0x0UL)
  #define TWIS_ENABLE_ENABLE_Enabled (0x9UL)


/* TWIS_ADDRESS: TWI slave address n */
  #define TWIS_ADDRESS_MaxCount (2UL)
  #define TWIS_ADDRESS_MaxIndex (1UL)
  #define TWIS_ADDRESS_MinIndex (0UL)
  #define TWIS_ADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..6 : TWI slave address */
  #define TWIS_ADDRESS_ADDRESS_Pos (0UL)
  #define TWIS_ADDRESS_ADDRESS_Msk (0x7FUL << TWIS_ADDRESS_ADDRESS_Pos)


/* TWIS_CONFIG: Configuration register for the address match mechanism */
  #define TWIS_CONFIG_ResetValue (0x00000001UL)

/* ADDRESS0 @Bit 0 : Enable or disable address matching on ADDRESS[0] */
  #define TWIS_CONFIG_ADDRESS0_Pos (0UL)
  #define TWIS_CONFIG_ADDRESS0_Msk (0x1UL << TWIS_CONFIG_ADDRESS0_Pos)
  #define TWIS_CONFIG_ADDRESS0_Min (0x0UL)
  #define TWIS_CONFIG_ADDRESS0_Max (0x1UL)
  #define TWIS_CONFIG_ADDRESS0_Disabled (0x0UL)
  #define TWIS_CONFIG_ADDRESS0_Enabled (0x1UL)

/* ADDRESS1 @Bit 1 : Enable or disable address matching on ADDRESS[1] */
  #define TWIS_CONFIG_ADDRESS1_Pos (1UL)
  #define TWIS_CONFIG_ADDRESS1_Msk (0x1UL << TWIS_CONFIG_ADDRESS1_Pos)
  #define TWIS_CONFIG_ADDRESS1_Min (0x0UL)
  #define TWIS_CONFIG_ADDRESS1_Max (0x1UL)
  #define TWIS_CONFIG_ADDRESS1_Disabled (0x0UL)
  #define TWIS_CONFIG_ADDRESS1_Enabled (0x1UL)


/* TWIS_ORC: Over-read character. Character sent out in case of an over-read of the transmit buffer. */
  #define TWIS_ORC_ResetValue (0x00000000UL)

/* ORC @Bits 0..7 : Over-read character. Character sent out in case of an over-read of the transmit buffer. */
  #define TWIS_ORC_ORC_Pos (0UL)
  #define TWIS_ORC_ORC_Msk (0xFFUL << TWIS_ORC_ORC_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           UARTE                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct UARTE_TASKS_DMA_RX ================================================ */
/**
  * @brief RX [UARTE_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000008) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000018) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_UARTE_TASKS_DMA_RX_Type;

/* UARTE_TASKS_DMA_RX_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                              easyDMA. */

  #define UARTE_TASKS_DMA_RX_START_ResetValue (0x00000000UL)

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define UARTE_TASKS_DMA_RX_START_START_Pos (0UL)
  #define UARTE_TASKS_DMA_RX_START_START_Msk (0x1UL << UARTE_TASKS_DMA_RX_START_START_Pos)
  #define UARTE_TASKS_DMA_RX_START_START_Min (0x1UL)
  #define UARTE_TASKS_DMA_RX_START_START_Max (0x1UL)
  #define UARTE_TASKS_DMA_RX_START_START_Trigger (0x1UL)


/* UARTE_TASKS_DMA_RX_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define UARTE_TASKS_DMA_RX_STOP_ResetValue (0x00000000UL)

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Pos (0UL)
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Msk (0x1UL << UARTE_TASKS_DMA_RX_STOP_STOP_Pos)
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Min (0x1UL)
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Max (0x1UL)
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Trigger (0x1UL)


/* UARTE_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL)
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL)
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL)
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL)


/* UARTE_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL)
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL)
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL)
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL)



/* ================================================ Struct UARTE_TASKS_DMA_TX ================================================ */
/**
  * @brief TX [UARTE_TASKS_DMA_TX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
} NRF_UARTE_TASKS_DMA_TX_Type;

/* UARTE_TASKS_DMA_TX_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                              easyDMA. */

  #define UARTE_TASKS_DMA_TX_START_ResetValue (0x00000000UL)

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define UARTE_TASKS_DMA_TX_START_START_Pos (0UL)
  #define UARTE_TASKS_DMA_TX_START_START_Msk (0x1UL << UARTE_TASKS_DMA_TX_START_START_Pos)
  #define UARTE_TASKS_DMA_TX_START_START_Min (0x1UL)
  #define UARTE_TASKS_DMA_TX_START_START_Max (0x1UL)
  #define UARTE_TASKS_DMA_TX_START_START_Trigger (0x1UL)


/* UARTE_TASKS_DMA_TX_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define UARTE_TASKS_DMA_TX_STOP_ResetValue (0x00000000UL)

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Pos (0UL)
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Msk (0x1UL << UARTE_TASKS_DMA_TX_STOP_STOP_Pos)
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Min (0x1UL)
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Max (0x1UL)
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Trigger (0x1UL)



/* ================================================= Struct UARTE_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [UARTE_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __OM  NRF_UARTE_TASKS_DMA_RX_Type RX;
  __OM  NRF_UARTE_TASKS_DMA_TX_Type TX;
} NRF_UARTE_TASKS_DMA_Type;


/* ============================================== Struct UARTE_SUBSCRIBE_DMA_RX ============================================== */
/**
  * @brief RX [UARTE_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;
  __IOM uint32_t  STOP;
  __IOM uint32_t  ENABLEMATCH[4];
  __IOM uint32_t  DISABLEMATCH[4];
} NRF_UARTE_SUBSCRIBE_DMA_RX_Type;

/* UARTE_SUBSCRIBE_DMA_RX_START: Subscribe configuration for task START */
  #define UARTE_SUBSCRIBE_DMA_RX_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_RX_START_EN_Pos)
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Enabled (0x1UL)


/* UARTE_SUBSCRIBE_DMA_RX_STOP: Subscribe configuration for task STOP */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Pos)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Pos)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Enabled (0x1UL)


/* UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL)


/* UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask
                                                                            of CHIDX field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL)



/* ============================================== Struct UARTE_SUBSCRIBE_DMA_TX ============================================== */
/**
  * @brief TX [UARTE_SUBSCRIBE_DMA_TX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;
  __IOM uint32_t  STOP;
} NRF_UARTE_SUBSCRIBE_DMA_TX_Type;

/* UARTE_SUBSCRIBE_DMA_TX_START: Subscribe configuration for task START */
  #define UARTE_SUBSCRIBE_DMA_TX_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_TX_START_EN_Pos)
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Enabled (0x1UL)


/* UARTE_SUBSCRIBE_DMA_TX_STOP: Subscribe configuration for task STOP */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Pos)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Pos)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Enabled (0x1UL)



/* =============================================== Struct UARTE_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [UARTE_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IOM NRF_UARTE_SUBSCRIBE_DMA_RX_Type RX;
  __IOM NRF_UARTE_SUBSCRIBE_DMA_TX_Type TX;
} NRF_UARTE_SUBSCRIBE_DMA_Type;


/* =============================================== Struct UARTE_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [UARTE_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_UARTE_EVENTS_DMA_RX_Type;

/* UARTE_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define UARTE_EVENTS_DMA_RX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define UARTE_EVENTS_DMA_RX_END_END_Pos (0UL)
  #define UARTE_EVENTS_DMA_RX_END_END_Msk (0x1UL << UARTE_EVENTS_DMA_RX_END_END_Pos)
  #define UARTE_EVENTS_DMA_RX_END_END_Min (0x0UL)
  #define UARTE_EVENTS_DMA_RX_END_END_Max (0x1UL)
  #define UARTE_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_RX_END_END_Generated (0x1UL)


/* UARTE_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                               to be written to prepare for the next sequence. */

  #define UARTE_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define UARTE_EVENTS_DMA_RX_READY_READY_Pos (0UL)
  #define UARTE_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << UARTE_EVENTS_DMA_RX_READY_READY_Pos)
  #define UARTE_EVENTS_DMA_RX_READY_READY_Min (0x0UL)
  #define UARTE_EVENTS_DMA_RX_READY_READY_Max (0x1UL)
  #define UARTE_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_RX_READY_READY_Generated (0x1UL)


/* UARTE_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define UARTE_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL)
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of
                                                                            BUSERROR field.*/
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL)
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL)
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL)


/* UARTE_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define UARTE_EVENTS_DMA_RX_MATCH_MaxCount (4UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_MinIndex (0UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << UARTE_EVENTS_DMA_RX_MATCH_MATCH_Pos)
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL)



/* =============================================== Struct UARTE_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [UARTE_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
} NRF_UARTE_EVENTS_DMA_TX_Type;

/* UARTE_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define UARTE_EVENTS_DMA_TX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define UARTE_EVENTS_DMA_TX_END_END_Pos (0UL)
  #define UARTE_EVENTS_DMA_TX_END_END_Msk (0x1UL << UARTE_EVENTS_DMA_TX_END_END_Pos)
  #define UARTE_EVENTS_DMA_TX_END_END_Min (0x0UL)
  #define UARTE_EVENTS_DMA_TX_END_END_Max (0x1UL)
  #define UARTE_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_TX_END_END_Generated (0x1UL)


/* UARTE_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                               to be written to prepare for the next sequence. */

  #define UARTE_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define UARTE_EVENTS_DMA_TX_READY_READY_Pos (0UL)
  #define UARTE_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << UARTE_EVENTS_DMA_TX_READY_READY_Pos)
  #define UARTE_EVENTS_DMA_TX_READY_READY_Min (0x0UL)
  #define UARTE_EVENTS_DMA_TX_READY_READY_Max (0x1UL)
  #define UARTE_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_TX_READY_READY_Generated (0x1UL)


/* UARTE_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define UARTE_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL)
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of
                                                                            BUSERROR field.*/
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL)
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL)
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL)



/* ================================================= Struct UARTE_EVENTS_DMA ================================================= */
/**
  * @brief EVENTS_DMA [UARTE_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_UARTE_EVENTS_DMA_RX_Type RX;
  __IOM NRF_UARTE_EVENTS_DMA_TX_Type TX;
} NRF_UARTE_EVENTS_DMA_Type;


/* =============================================== Struct UARTE_PUBLISH_DMA_RX =============================================== */
/**
  * @brief RX [UARTE_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_UARTE_PUBLISH_DMA_RX_Type;

/* UARTE_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define UARTE_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define UARTE_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_RX_END_CHIDX_Pos)
  #define UARTE_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_RX_END_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_RX_END_EN_Pos)
  #define UARTE_PUBLISH_DMA_RX_END_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_END_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define UARTE_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define UARTE_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_RX_READY_CHIDX_Pos)
  #define UARTE_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_RX_READY_EN_Pos)
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Pos)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define UARTE_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Pos)
  #define UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_RX_MATCH_EN_Pos)
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL)



/* =============================================== Struct UARTE_PUBLISH_DMA_TX =============================================== */
/**
  * @brief TX [UARTE_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
} NRF_UARTE_PUBLISH_DMA_TX_Type;

/* UARTE_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define UARTE_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define UARTE_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_TX_END_CHIDX_Pos)
  #define UARTE_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_TX_END_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_TX_END_EN_Pos)
  #define UARTE_PUBLISH_DMA_TX_END_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_TX_END_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define UARTE_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define UARTE_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_TX_READY_CHIDX_Pos)
  #define UARTE_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_TX_READY_EN_Pos)
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Pos)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL)



/* ================================================ Struct UARTE_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [UARTE_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_UARTE_PUBLISH_DMA_RX_Type RX;
  __IOM NRF_UARTE_PUBLISH_DMA_TX_Type TX;
} NRF_UARTE_PUBLISH_DMA_Type;


/* ==================================================== Struct UARTE_PSEL ==================================================== */
/**
  * @brief PSEL [UARTE_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  TXD;
  __IOM uint32_t  CTS;
  __IOM uint32_t  RXD;
  __IOM uint32_t  RTS;
} NRF_UARTE_PSEL_Type;

/* UARTE_PSEL_TXD: Pin select for TXD signal */
  #define UARTE_PSEL_TXD_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define UARTE_PSEL_TXD_PIN_Pos (0UL)
  #define UARTE_PSEL_TXD_PIN_Msk (0x1FUL << UARTE_PSEL_TXD_PIN_Pos)
  #define UARTE_PSEL_TXD_PIN_Min (0x00UL)
  #define UARTE_PSEL_TXD_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define UARTE_PSEL_TXD_PORT_Pos (5UL)
  #define UARTE_PSEL_TXD_PORT_Msk (0x7UL << UARTE_PSEL_TXD_PORT_Pos)
  #define UARTE_PSEL_TXD_PORT_Min (0x0UL)
  #define UARTE_PSEL_TXD_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define UARTE_PSEL_TXD_CONNECT_Pos (31UL)
  #define UARTE_PSEL_TXD_CONNECT_Msk (0x1UL << UARTE_PSEL_TXD_CONNECT_Pos)
  #define UARTE_PSEL_TXD_CONNECT_Min (0x0UL)
  #define UARTE_PSEL_TXD_CONNECT_Max (0x1UL)
  #define UARTE_PSEL_TXD_CONNECT_Disconnected (0x1UL)
  #define UARTE_PSEL_TXD_CONNECT_Connected (0x0UL)


/* UARTE_PSEL_CTS: Pin select for CTS signal */
  #define UARTE_PSEL_CTS_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define UARTE_PSEL_CTS_PIN_Pos (0UL)
  #define UARTE_PSEL_CTS_PIN_Msk (0x1FUL << UARTE_PSEL_CTS_PIN_Pos)
  #define UARTE_PSEL_CTS_PIN_Min (0x00UL)
  #define UARTE_PSEL_CTS_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define UARTE_PSEL_CTS_PORT_Pos (5UL)
  #define UARTE_PSEL_CTS_PORT_Msk (0x7UL << UARTE_PSEL_CTS_PORT_Pos)
  #define UARTE_PSEL_CTS_PORT_Min (0x0UL)
  #define UARTE_PSEL_CTS_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define UARTE_PSEL_CTS_CONNECT_Pos (31UL)
  #define UARTE_PSEL_CTS_CONNECT_Msk (0x1UL << UARTE_PSEL_CTS_CONNECT_Pos)
  #define UARTE_PSEL_CTS_CONNECT_Min (0x0UL)
  #define UARTE_PSEL_CTS_CONNECT_Max (0x1UL)
  #define UARTE_PSEL_CTS_CONNECT_Disconnected (0x1UL)
  #define UARTE_PSEL_CTS_CONNECT_Connected (0x0UL)


/* UARTE_PSEL_RXD: Pin select for RXD signal */
  #define UARTE_PSEL_RXD_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define UARTE_PSEL_RXD_PIN_Pos (0UL)
  #define UARTE_PSEL_RXD_PIN_Msk (0x1FUL << UARTE_PSEL_RXD_PIN_Pos)
  #define UARTE_PSEL_RXD_PIN_Min (0x00UL)
  #define UARTE_PSEL_RXD_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define UARTE_PSEL_RXD_PORT_Pos (5UL)
  #define UARTE_PSEL_RXD_PORT_Msk (0x7UL << UARTE_PSEL_RXD_PORT_Pos)
  #define UARTE_PSEL_RXD_PORT_Min (0x0UL)
  #define UARTE_PSEL_RXD_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define UARTE_PSEL_RXD_CONNECT_Pos (31UL)
  #define UARTE_PSEL_RXD_CONNECT_Msk (0x1UL << UARTE_PSEL_RXD_CONNECT_Pos)
  #define UARTE_PSEL_RXD_CONNECT_Min (0x0UL)
  #define UARTE_PSEL_RXD_CONNECT_Max (0x1UL)
  #define UARTE_PSEL_RXD_CONNECT_Disconnected (0x1UL)
  #define UARTE_PSEL_RXD_CONNECT_Connected (0x0UL)


/* UARTE_PSEL_RTS: Pin select for RTS signal */
  #define UARTE_PSEL_RTS_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define UARTE_PSEL_RTS_PIN_Pos (0UL)
  #define UARTE_PSEL_RTS_PIN_Msk (0x1FUL << UARTE_PSEL_RTS_PIN_Pos)
  #define UARTE_PSEL_RTS_PIN_Min (0x00UL)
  #define UARTE_PSEL_RTS_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define UARTE_PSEL_RTS_PORT_Pos (5UL)
  #define UARTE_PSEL_RTS_PORT_Msk (0x7UL << UARTE_PSEL_RTS_PORT_Pos)
  #define UARTE_PSEL_RTS_PORT_Min (0x0UL)
  #define UARTE_PSEL_RTS_PORT_Max (0x7UL)

/* CONNECT @Bit 31 : Connection */
  #define UARTE_PSEL_RTS_CONNECT_Pos (31UL)
  #define UARTE_PSEL_RTS_CONNECT_Msk (0x1UL << UARTE_PSEL_RTS_CONNECT_Pos)
  #define UARTE_PSEL_RTS_CONNECT_Min (0x0UL)
  #define UARTE_PSEL_RTS_CONNECT_Max (0x1UL)
  #define UARTE_PSEL_RTS_CONNECT_Disconnected (0x1UL)
  #define UARTE_PSEL_RTS_CONNECT_Connected (0x0UL)



/* ================================================ Struct UARTE_DMA_RX_MATCH ================================================ */
/**
  * @brief MATCH [UARTE_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_UARTE_DMA_RX_MATCH_Type;

/* UARTE_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define UARTE_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL)

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Pos) /*!< Bit mask of ENABLE0
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL)

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Pos) /*!< Bit mask of ENABLE1
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL)

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Pos) /*!< Bit mask of ENABLE2
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL)

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Pos) /*!< Bit mask of ENABLE3
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL)

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or continous */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL)

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or continous */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL)

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or continous */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL)

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or continous */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL)


/* UARTE_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define UARTE_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL)
  #define UARTE_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL)
  #define UARTE_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL)
  #define UARTE_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL)

/* DATA @Bits 0..7 : Data to look for */
  #define UARTE_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL)
  #define UARTE_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFUL << UARTE_DMA_RX_MATCH_CANDIDATE_DATA_Pos)



/* =================================================== Struct UARTE_DMA_RX =================================================== */
/**
  * @brief RX [UARTE_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_UARTE_DMA_RX_MATCH_Type MATCH;           /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_UARTE_DMA_RX_Type;

/* UARTE_DMA_RX_PTR: RAM buffer start address */
  #define UARTE_DMA_RX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define UARTE_DMA_RX_PTR_PTR_Pos (0UL)
  #define UARTE_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << UARTE_DMA_RX_PTR_PTR_Pos)


/* UARTE_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define UARTE_DMA_RX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define UARTE_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)
  #define UARTE_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << UARTE_DMA_RX_MAXCNT_MAXCNT_Pos)
  #define UARTE_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define UARTE_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* UARTE_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after
                         each MATCH event. */

  #define UARTE_DMA_RX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define UARTE_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)
  #define UARTE_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << UARTE_DMA_RX_AMOUNT_AMOUNT_Pos)
  #define UARTE_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define UARTE_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* UARTE_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* UARTE_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define UARTE_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define UARTE_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define UARTE_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << UARTE_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct UARTE_DMA_TX =================================================== */
/**
  * @brief TX [UARTE_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_UARTE_DMA_TX_Type;

/* UARTE_DMA_TX_PTR: RAM buffer start address */
  #define UARTE_DMA_TX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define UARTE_DMA_TX_PTR_PTR_Pos (0UL)
  #define UARTE_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << UARTE_DMA_TX_PTR_PTR_Pos)


/* UARTE_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define UARTE_DMA_TX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define UARTE_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)
  #define UARTE_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << UARTE_DMA_TX_MAXCNT_MAXCNT_Pos)
  #define UARTE_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define UARTE_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* UARTE_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after
                         each MATCH event. */

  #define UARTE_DMA_TX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define UARTE_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)
  #define UARTE_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << UARTE_DMA_TX_AMOUNT_AMOUNT_Pos)
  #define UARTE_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define UARTE_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* UARTE_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* UARTE_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define UARTE_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define UARTE_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define UARTE_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << UARTE_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ==================================================== Struct UARTE_DMA ===================================================== */
/**
  * @brief DMA [UARTE_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_UARTE_DMA_RX_Type RX;
  __IOM NRF_UARTE_DMA_TX_Type TX;
} NRF_UARTE_DMA_Type;

/* ====================================================== Struct UARTE ======================================================= */
/**
  * @brief UART with EasyDMA
  */
  typedef struct {
    __IM uint32_t RESERVED[7];
    __OM uint32_t TASKS_FLUSHRX;
    __IM uint32_t RESERVED1[2];
    __OM NRF_UARTE_TASKS_DMA_Type TASKS_DMA;
    __IM uint32_t RESERVED2[17];
    __IOM uint32_t SUBSCRIBE_FLUSHRX;
    __IM uint32_t RESERVED3[2];
    __IOM NRF_UARTE_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA;
    __IM uint32_t RESERVED4[10];
    __IOM uint32_t EVENTS_CTS;
    __IOM uint32_t EVENTS_NCTS;
    __IM uint32_t RESERVED5;
    __IOM uint32_t EVENTS_TXDRDY;
    __IOM uint32_t EVENTS_RXDRDY;                    /*!< (@ 0x00000110) Data received in RXD (but potentially not yet
                                                                         transferred to Data RAM)*/
    __IOM uint32_t EVENTS_ERROR;
    __IM uint32_t RESERVED6[3];
    __IOM uint32_t EVENTS_RXTO;
    __IM uint32_t RESERVED7[2];
    __IOM uint32_t EVENTS_TXSTOPPED;
    __IM uint32_t RESERVED8[6];
    __IOM NRF_UARTE_EVENTS_DMA_Type EVENTS_DMA;
    __IOM uint32_t EVENTS_FRAMETIMEOUT;
    __IM uint32_t RESERVED9[2];
    __IOM uint32_t PUBLISH_CTS;
    __IOM uint32_t PUBLISH_NCTS;
    __IM uint32_t RESERVED10;
    __IOM uint32_t PUBLISH_TXDRDY;
    __IOM uint32_t PUBLISH_RXDRDY;
    __IOM uint32_t PUBLISH_ERROR;
    __IM uint32_t RESERVED11[3];
    __IOM uint32_t PUBLISH_RXTO;
    __IM uint32_t RESERVED12[2];
    __IOM uint32_t PUBLISH_TXSTOPPED;
    __IM uint32_t RESERVED13[6];
    __IOM NRF_UARTE_PUBLISH_DMA_Type PUBLISH_DMA;
    __IOM uint32_t PUBLISH_FRAMETIMEOUT;
    __IM uint32_t RESERVED14[2];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED15[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED16[93];
    __IOM uint32_t ERRORSRC;
    __IM uint32_t RESERVED17[31];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED18[8];
    __IOM uint32_t BAUDRATE;                         /*!< (@ 0x00000524) Baud rate. Accuracy depends on the HFCLK source
                                                                         selected.*/
    __IM uint32_t RESERVED19[17];
    __IOM uint32_t CONFIG;                           /*!< (@ 0x0000056C) Configuration of parity, hardware flow control,
                                                                         framesize, and packet timeout.*/
    __IM uint32_t RESERVED20;
    __IOM uint32_t ADDRESS;                          /*!< (@ 0x00000574) Set the address of the UARTE for RX when used in 9 bit
                                                                         data frame mode.*/
    __IOM uint32_t FRAMETIMEOUT;                     /*!< (@ 0x00000578) Set the number of UARTE bits to count before triggering
                                                                         packet timeout.*/
    __IM uint32_t RESERVED21[34];
    __IOM NRF_UARTE_PSEL_Type PSEL;
    __IM uint32_t RESERVED22[59];
    __IOM NRF_UARTE_DMA_Type DMA;
  } NRF_UARTE_Type;

/* UARTE_TASKS_FLUSHRX: Flush RX FIFO into RX buffer */
  #define UARTE_TASKS_FLUSHRX_ResetValue (0x00000000UL)

/* TASKS_FLUSHRX @Bit 0 : Flush RX FIFO into RX buffer */
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Pos (0UL)
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Msk (0x1UL << UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Pos) /*!< Bit mask of TASKS_FLUSHRX
                                                                            field.*/
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Min (0x1UL)
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Max (0x1UL)
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Trigger (0x1UL)


/* UARTE_SUBSCRIBE_FLUSHRX: Subscribe configuration for task FLUSHRX */
  #define UARTE_SUBSCRIBE_FLUSHRX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task FLUSHRX will subscribe to */
  #define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Pos)
  #define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Msk (0x1UL << UARTE_SUBSCRIBE_FLUSHRX_EN_Pos)
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Enabled (0x1UL)


/* UARTE_EVENTS_CTS: CTS is activated (set low). Clear To Send. */
  #define UARTE_EVENTS_CTS_ResetValue (0x00000000UL)

/* EVENTS_CTS @Bit 0 : CTS is activated (set low). Clear To Send. */
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Pos (0UL)
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Msk (0x1UL << UARTE_EVENTS_CTS_EVENTS_CTS_Pos)
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Min (0x0UL)
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Max (0x1UL)
  #define UARTE_EVENTS_CTS_EVENTS_CTS_NotGenerated (0x0UL)
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Generated (0x1UL)


/* UARTE_EVENTS_NCTS: CTS is deactivated (set high). Not Clear To Send. */
  #define UARTE_EVENTS_NCTS_ResetValue (0x00000000UL)

/* EVENTS_NCTS @Bit 0 : CTS is deactivated (set high). Not Clear To Send. */
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Pos (0UL)
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Msk (0x1UL << UARTE_EVENTS_NCTS_EVENTS_NCTS_Pos)
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Min (0x0UL)
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Max (0x1UL)
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_NotGenerated (0x0UL)
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Generated (0x1UL)


/* UARTE_EVENTS_TXDRDY: Data sent from TXD */
  #define UARTE_EVENTS_TXDRDY_ResetValue (0x00000000UL)

/* EVENTS_TXDRDY @Bit 0 : Data sent from TXD */
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos (0UL)
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Msk (0x1UL << UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos) /*!< Bit mask of EVENTS_TXDRDY
                                                                            field.*/
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Min (0x0UL)
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Max (0x1UL)
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_NotGenerated (0x0UL)
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Generated (0x1UL)


/* UARTE_EVENTS_RXDRDY: Data received in RXD (but potentially not yet transferred to Data RAM) */
  #define UARTE_EVENTS_RXDRDY_ResetValue (0x00000000UL)

/* EVENTS_RXDRDY @Bit 0 : Data received in RXD (but potentially not yet transferred to Data RAM) */
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos (0UL)
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Msk (0x1UL << UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos) /*!< Bit mask of EVENTS_RXDRDY
                                                                            field.*/
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Min (0x0UL)
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Max (0x1UL)
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_NotGenerated (0x0UL)
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Generated (0x1UL)


/* UARTE_EVENTS_ERROR: Error detected */
  #define UARTE_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : Error detected */
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << UARTE_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR
                                                                            field.*/
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* UARTE_EVENTS_RXTO: Receiver timeout */
  #define UARTE_EVENTS_RXTO_ResetValue (0x00000000UL)

/* EVENTS_RXTO @Bit 0 : Receiver timeout */
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Pos (0UL)
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Msk (0x1UL << UARTE_EVENTS_RXTO_EVENTS_RXTO_Pos)
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Min (0x0UL)
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Max (0x1UL)
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_NotGenerated (0x0UL)
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Generated (0x1UL)


/* UARTE_EVENTS_TXSTOPPED: Transmitter stopped */
  #define UARTE_EVENTS_TXSTOPPED_ResetValue (0x00000000UL)

/* EVENTS_TXSTOPPED @Bit 0 : Transmitter stopped */
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Pos (0UL)
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Msk (0x1UL << UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_TXSTOPPED field.*/
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Min (0x0UL)
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Max (0x1UL)
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_NotGenerated (0x0UL)
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Generated (0x1UL)


/* UARTE_EVENTS_FRAMETIMEOUT: Timed out due to bus being idle while receiving data. */
  #define UARTE_EVENTS_FRAMETIMEOUT_ResetValue (0x00000000UL)

/* EVENTS_FRAMETIMEOUT @Bit 0 : Timed out due to bus being idle while receiving data. */
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Pos (0UL)
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Msk (0x1UL << UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Pos) /*!<
                                                                            Bit mask of EVENTS_FRAMETIMEOUT field.*/
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Min (0x0UL)
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Max (0x1UL)
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_NotGenerated (0x0UL)
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Generated (0x1UL)


/* UARTE_PUBLISH_CTS: Publish configuration for event CTS */
  #define UARTE_PUBLISH_CTS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CTS will publish to */
  #define UARTE_PUBLISH_CTS_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_CTS_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_CTS_CHIDX_Pos)
  #define UARTE_PUBLISH_CTS_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_CTS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_CTS_EN_Pos (31UL)
  #define UARTE_PUBLISH_CTS_EN_Msk (0x1UL << UARTE_PUBLISH_CTS_EN_Pos)
  #define UARTE_PUBLISH_CTS_EN_Min (0x0UL)
  #define UARTE_PUBLISH_CTS_EN_Max (0x1UL)
  #define UARTE_PUBLISH_CTS_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_CTS_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_NCTS: Publish configuration for event NCTS */
  #define UARTE_PUBLISH_NCTS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event NCTS will publish to */
  #define UARTE_PUBLISH_NCTS_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_NCTS_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_NCTS_CHIDX_Pos)
  #define UARTE_PUBLISH_NCTS_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_NCTS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_NCTS_EN_Pos (31UL)
  #define UARTE_PUBLISH_NCTS_EN_Msk (0x1UL << UARTE_PUBLISH_NCTS_EN_Pos)
  #define UARTE_PUBLISH_NCTS_EN_Min (0x0UL)
  #define UARTE_PUBLISH_NCTS_EN_Max (0x1UL)
  #define UARTE_PUBLISH_NCTS_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_NCTS_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_TXDRDY: Publish configuration for event TXDRDY */
  #define UARTE_PUBLISH_TXDRDY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event TXDRDY will publish to */
  #define UARTE_PUBLISH_TXDRDY_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_TXDRDY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_TXDRDY_CHIDX_Pos)
  #define UARTE_PUBLISH_TXDRDY_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_TXDRDY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_TXDRDY_EN_Pos (31UL)
  #define UARTE_PUBLISH_TXDRDY_EN_Msk (0x1UL << UARTE_PUBLISH_TXDRDY_EN_Pos)
  #define UARTE_PUBLISH_TXDRDY_EN_Min (0x0UL)
  #define UARTE_PUBLISH_TXDRDY_EN_Max (0x1UL)
  #define UARTE_PUBLISH_TXDRDY_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_TXDRDY_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_RXDRDY: Publish configuration for event RXDRDY */
  #define UARTE_PUBLISH_RXDRDY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RXDRDY will publish to */
  #define UARTE_PUBLISH_RXDRDY_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_RXDRDY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_RXDRDY_CHIDX_Pos)
  #define UARTE_PUBLISH_RXDRDY_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_RXDRDY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_RXDRDY_EN_Pos (31UL)
  #define UARTE_PUBLISH_RXDRDY_EN_Msk (0x1UL << UARTE_PUBLISH_RXDRDY_EN_Pos)
  #define UARTE_PUBLISH_RXDRDY_EN_Min (0x0UL)
  #define UARTE_PUBLISH_RXDRDY_EN_Max (0x1UL)
  #define UARTE_PUBLISH_RXDRDY_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_RXDRDY_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define UARTE_PUBLISH_ERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define UARTE_PUBLISH_ERROR_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_ERROR_CHIDX_Pos)
  #define UARTE_PUBLISH_ERROR_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_ERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_ERROR_EN_Pos (31UL)
  #define UARTE_PUBLISH_ERROR_EN_Msk (0x1UL << UARTE_PUBLISH_ERROR_EN_Pos)
  #define UARTE_PUBLISH_ERROR_EN_Min (0x0UL)
  #define UARTE_PUBLISH_ERROR_EN_Max (0x1UL)
  #define UARTE_PUBLISH_ERROR_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_ERROR_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_RXTO: Publish configuration for event RXTO */
  #define UARTE_PUBLISH_RXTO_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RXTO will publish to */
  #define UARTE_PUBLISH_RXTO_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_RXTO_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_RXTO_CHIDX_Pos)
  #define UARTE_PUBLISH_RXTO_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_RXTO_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_RXTO_EN_Pos (31UL)
  #define UARTE_PUBLISH_RXTO_EN_Msk (0x1UL << UARTE_PUBLISH_RXTO_EN_Pos)
  #define UARTE_PUBLISH_RXTO_EN_Min (0x0UL)
  #define UARTE_PUBLISH_RXTO_EN_Max (0x1UL)
  #define UARTE_PUBLISH_RXTO_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_RXTO_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_TXSTOPPED: Publish configuration for event TXSTOPPED */
  #define UARTE_PUBLISH_TXSTOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event TXSTOPPED will publish to */
  #define UARTE_PUBLISH_TXSTOPPED_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_TXSTOPPED_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_TXSTOPPED_CHIDX_Pos)
  #define UARTE_PUBLISH_TXSTOPPED_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_TXSTOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_TXSTOPPED_EN_Pos (31UL)
  #define UARTE_PUBLISH_TXSTOPPED_EN_Msk (0x1UL << UARTE_PUBLISH_TXSTOPPED_EN_Pos)
  #define UARTE_PUBLISH_TXSTOPPED_EN_Min (0x0UL)
  #define UARTE_PUBLISH_TXSTOPPED_EN_Max (0x1UL)
  #define UARTE_PUBLISH_TXSTOPPED_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_TXSTOPPED_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_FRAMETIMEOUT: Publish configuration for event FRAMETIMEOUT */
  #define UARTE_PUBLISH_FRAMETIMEOUT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event FRAMETIMEOUT will publish to */
  #define UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Pos)
  #define UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Pos (31UL)
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Msk (0x1UL << UARTE_PUBLISH_FRAMETIMEOUT_EN_Pos)
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Min (0x0UL)
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Max (0x1UL)
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Enabled (0x1UL)


/* UARTE_SHORTS: Shortcuts between local events and tasks */
  #define UARTE_SHORTS_ResetValue (0x00000000UL)

/* DMA_RX_END_DMA_RX_START @Bit 5 : Shortcut between event DMA.RX.END and task DMA.RX.START */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Pos (5UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Msk (0x1UL << UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Pos) /*!< Bit mask of
                                                                            DMA_RX_END_DMA_RX_START field.*/
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Min (0x0UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Max (0x1UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Enabled (0x1UL)

/* DMA_RX_END_DMA_RX_STOP @Bit 6 : Shortcut between event DMA.RX.END and task DMA.RX.STOP */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Pos (6UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Msk (0x1UL << UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Pos) /*!< Bit mask of
                                                                            DMA_RX_END_DMA_RX_STOP field.*/
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Min (0x0UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Max (0x1UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Enabled (0x1UL)

/* DMA_TX_END_DMA_TX_STOP @Bit 18 : Shortcut between event DMA.TX.END and task DMA.TX.STOP */
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Pos (18UL)
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Msk (0x1UL << UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Pos) /*!< Bit mask of
                                                                            DMA_TX_END_DMA_TX_STOP field.*/
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Min (0x0UL)
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Max (0x1UL)
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL)
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL)
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL)
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL)
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL)
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos)
                                                                            /*!< Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                           DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                           DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL)
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos)
                                                                            /*!< Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                           DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                           DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL)
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos)
                                                                            /*!< Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                           DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                           DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL)
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos)
                                                                            /*!< Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                           DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                           DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL)

/* FRAMETIMEOUT_DMA_RX_STOP @Bit 29 : Shortcut between event FRAMETIMEOUT and task DMA.RX.STOP */
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Pos (29UL)
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Msk (0x1UL << UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Pos) /*!< Bit mask of
                                                                            FRAMETIMEOUT_DMA_RX_STOP field.*/
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Min (0x0UL)
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Max (0x1UL)
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Disabled (0x0UL)
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Enabled (0x1UL)


/* UARTE_INTEN: Enable or disable interrupt */
  #define UARTE_INTEN_ResetValue (0x00000000UL)

/* CTS @Bit 0 : Enable or disable interrupt for event CTS */
  #define UARTE_INTEN_CTS_Pos (0UL)
  #define UARTE_INTEN_CTS_Msk (0x1UL << UARTE_INTEN_CTS_Pos)
  #define UARTE_INTEN_CTS_Min (0x0UL)
  #define UARTE_INTEN_CTS_Max (0x1UL)
  #define UARTE_INTEN_CTS_Disabled (0x0UL)
  #define UARTE_INTEN_CTS_Enabled (0x1UL)

/* NCTS @Bit 1 : Enable or disable interrupt for event NCTS */
  #define UARTE_INTEN_NCTS_Pos (1UL)
  #define UARTE_INTEN_NCTS_Msk (0x1UL << UARTE_INTEN_NCTS_Pos)
  #define UARTE_INTEN_NCTS_Min (0x0UL)
  #define UARTE_INTEN_NCTS_Max (0x1UL)
  #define UARTE_INTEN_NCTS_Disabled (0x0UL)
  #define UARTE_INTEN_NCTS_Enabled (0x1UL)

/* TXDRDY @Bit 3 : Enable or disable interrupt for event TXDRDY */
  #define UARTE_INTEN_TXDRDY_Pos (3UL)
  #define UARTE_INTEN_TXDRDY_Msk (0x1UL << UARTE_INTEN_TXDRDY_Pos)
  #define UARTE_INTEN_TXDRDY_Min (0x0UL)
  #define UARTE_INTEN_TXDRDY_Max (0x1UL)
  #define UARTE_INTEN_TXDRDY_Disabled (0x0UL)
  #define UARTE_INTEN_TXDRDY_Enabled (0x1UL)

/* RXDRDY @Bit 4 : Enable or disable interrupt for event RXDRDY */
  #define UARTE_INTEN_RXDRDY_Pos (4UL)
  #define UARTE_INTEN_RXDRDY_Msk (0x1UL << UARTE_INTEN_RXDRDY_Pos)
  #define UARTE_INTEN_RXDRDY_Min (0x0UL)
  #define UARTE_INTEN_RXDRDY_Max (0x1UL)
  #define UARTE_INTEN_RXDRDY_Disabled (0x0UL)
  #define UARTE_INTEN_RXDRDY_Enabled (0x1UL)

/* ERROR @Bit 5 : Enable or disable interrupt for event ERROR */
  #define UARTE_INTEN_ERROR_Pos (5UL)
  #define UARTE_INTEN_ERROR_Msk (0x1UL << UARTE_INTEN_ERROR_Pos)
  #define UARTE_INTEN_ERROR_Min (0x0UL)
  #define UARTE_INTEN_ERROR_Max (0x1UL)
  #define UARTE_INTEN_ERROR_Disabled (0x0UL)
  #define UARTE_INTEN_ERROR_Enabled (0x1UL)

/* RXTO @Bit 9 : Enable or disable interrupt for event RXTO */
  #define UARTE_INTEN_RXTO_Pos (9UL)
  #define UARTE_INTEN_RXTO_Msk (0x1UL << UARTE_INTEN_RXTO_Pos)
  #define UARTE_INTEN_RXTO_Min (0x0UL)
  #define UARTE_INTEN_RXTO_Max (0x1UL)
  #define UARTE_INTEN_RXTO_Disabled (0x0UL)
  #define UARTE_INTEN_RXTO_Enabled (0x1UL)

/* TXSTOPPED @Bit 12 : Enable or disable interrupt for event TXSTOPPED */
  #define UARTE_INTEN_TXSTOPPED_Pos (12UL)
  #define UARTE_INTEN_TXSTOPPED_Msk (0x1UL << UARTE_INTEN_TXSTOPPED_Pos)
  #define UARTE_INTEN_TXSTOPPED_Min (0x0UL)
  #define UARTE_INTEN_TXSTOPPED_Max (0x1UL)
  #define UARTE_INTEN_TXSTOPPED_Disabled (0x0UL)
  #define UARTE_INTEN_TXSTOPPED_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Enable or disable interrupt for event DMARXEND */
  #define UARTE_INTEN_DMARXEND_Pos (19UL)
  #define UARTE_INTEN_DMARXEND_Msk (0x1UL << UARTE_INTEN_DMARXEND_Pos)
  #define UARTE_INTEN_DMARXEND_Min (0x0UL)
  #define UARTE_INTEN_DMARXEND_Max (0x1UL)
  #define UARTE_INTEN_DMARXEND_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Enable or disable interrupt for event DMARXREADY */
  #define UARTE_INTEN_DMARXREADY_Pos (20UL)
  #define UARTE_INTEN_DMARXREADY_Msk (0x1UL << UARTE_INTEN_DMARXREADY_Pos)
  #define UARTE_INTEN_DMARXREADY_Min (0x0UL)
  #define UARTE_INTEN_DMARXREADY_Max (0x1UL)
  #define UARTE_INTEN_DMARXREADY_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Enable or disable interrupt for event DMARXBUSERROR */
  #define UARTE_INTEN_DMARXBUSERROR_Pos (21UL)
  #define UARTE_INTEN_DMARXBUSERROR_Msk (0x1UL << UARTE_INTEN_DMARXBUSERROR_Pos)
  #define UARTE_INTEN_DMARXBUSERROR_Min (0x0UL)
  #define UARTE_INTEN_DMARXBUSERROR_Max (0x1UL)
  #define UARTE_INTEN_DMARXBUSERROR_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Enable or disable interrupt for event DMARXMATCH[0] */
  #define UARTE_INTEN_DMARXMATCH0_Pos (22UL)
  #define UARTE_INTEN_DMARXMATCH0_Msk (0x1UL << UARTE_INTEN_DMARXMATCH0_Pos)
  #define UARTE_INTEN_DMARXMATCH0_Min (0x0UL)
  #define UARTE_INTEN_DMARXMATCH0_Max (0x1UL)
  #define UARTE_INTEN_DMARXMATCH0_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Enable or disable interrupt for event DMARXMATCH[1] */
  #define UARTE_INTEN_DMARXMATCH1_Pos (23UL)
  #define UARTE_INTEN_DMARXMATCH1_Msk (0x1UL << UARTE_INTEN_DMARXMATCH1_Pos)
  #define UARTE_INTEN_DMARXMATCH1_Min (0x0UL)
  #define UARTE_INTEN_DMARXMATCH1_Max (0x1UL)
  #define UARTE_INTEN_DMARXMATCH1_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Enable or disable interrupt for event DMARXMATCH[2] */
  #define UARTE_INTEN_DMARXMATCH2_Pos (24UL)
  #define UARTE_INTEN_DMARXMATCH2_Msk (0x1UL << UARTE_INTEN_DMARXMATCH2_Pos)
  #define UARTE_INTEN_DMARXMATCH2_Min (0x0UL)
  #define UARTE_INTEN_DMARXMATCH2_Max (0x1UL)
  #define UARTE_INTEN_DMARXMATCH2_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Enable or disable interrupt for event DMARXMATCH[3] */
  #define UARTE_INTEN_DMARXMATCH3_Pos (25UL)
  #define UARTE_INTEN_DMARXMATCH3_Msk (0x1UL << UARTE_INTEN_DMARXMATCH3_Pos)
  #define UARTE_INTEN_DMARXMATCH3_Min (0x0UL)
  #define UARTE_INTEN_DMARXMATCH3_Max (0x1UL)
  #define UARTE_INTEN_DMARXMATCH3_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Enable or disable interrupt for event DMATXEND */
  #define UARTE_INTEN_DMATXEND_Pos (26UL)
  #define UARTE_INTEN_DMATXEND_Msk (0x1UL << UARTE_INTEN_DMATXEND_Pos)
  #define UARTE_INTEN_DMATXEND_Min (0x0UL)
  #define UARTE_INTEN_DMATXEND_Max (0x1UL)
  #define UARTE_INTEN_DMATXEND_Disabled (0x0UL)
  #define UARTE_INTEN_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Enable or disable interrupt for event DMATXREADY */
  #define UARTE_INTEN_DMATXREADY_Pos (27UL)
  #define UARTE_INTEN_DMATXREADY_Msk (0x1UL << UARTE_INTEN_DMATXREADY_Pos)
  #define UARTE_INTEN_DMATXREADY_Min (0x0UL)
  #define UARTE_INTEN_DMATXREADY_Max (0x1UL)
  #define UARTE_INTEN_DMATXREADY_Disabled (0x0UL)
  #define UARTE_INTEN_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Enable or disable interrupt for event DMATXBUSERROR */
  #define UARTE_INTEN_DMATXBUSERROR_Pos (28UL)
  #define UARTE_INTEN_DMATXBUSERROR_Msk (0x1UL << UARTE_INTEN_DMATXBUSERROR_Pos)
  #define UARTE_INTEN_DMATXBUSERROR_Min (0x0UL)
  #define UARTE_INTEN_DMATXBUSERROR_Max (0x1UL)
  #define UARTE_INTEN_DMATXBUSERROR_Disabled (0x0UL)
  #define UARTE_INTEN_DMATXBUSERROR_Enabled (0x1UL)

/* FRAMETIMEOUT @Bit 29 : Enable or disable interrupt for event FRAMETIMEOUT */
  #define UARTE_INTEN_FRAMETIMEOUT_Pos (29UL)
  #define UARTE_INTEN_FRAMETIMEOUT_Msk (0x1UL << UARTE_INTEN_FRAMETIMEOUT_Pos)
  #define UARTE_INTEN_FRAMETIMEOUT_Min (0x0UL)
  #define UARTE_INTEN_FRAMETIMEOUT_Max (0x1UL)
  #define UARTE_INTEN_FRAMETIMEOUT_Disabled (0x0UL)
  #define UARTE_INTEN_FRAMETIMEOUT_Enabled (0x1UL)


/* UARTE_INTENSET: Enable interrupt */
  #define UARTE_INTENSET_ResetValue (0x00000000UL)

/* CTS @Bit 0 : Write '1' to enable interrupt for event CTS */
  #define UARTE_INTENSET_CTS_Pos (0UL)
  #define UARTE_INTENSET_CTS_Msk (0x1UL << UARTE_INTENSET_CTS_Pos)
  #define UARTE_INTENSET_CTS_Min (0x0UL)
  #define UARTE_INTENSET_CTS_Max (0x1UL)
  #define UARTE_INTENSET_CTS_Set (0x1UL)
  #define UARTE_INTENSET_CTS_Disabled (0x0UL)
  #define UARTE_INTENSET_CTS_Enabled (0x1UL)

/* NCTS @Bit 1 : Write '1' to enable interrupt for event NCTS */
  #define UARTE_INTENSET_NCTS_Pos (1UL)
  #define UARTE_INTENSET_NCTS_Msk (0x1UL << UARTE_INTENSET_NCTS_Pos)
  #define UARTE_INTENSET_NCTS_Min (0x0UL)
  #define UARTE_INTENSET_NCTS_Max (0x1UL)
  #define UARTE_INTENSET_NCTS_Set (0x1UL)
  #define UARTE_INTENSET_NCTS_Disabled (0x0UL)
  #define UARTE_INTENSET_NCTS_Enabled (0x1UL)

/* TXDRDY @Bit 3 : Write '1' to enable interrupt for event TXDRDY */
  #define UARTE_INTENSET_TXDRDY_Pos (3UL)
  #define UARTE_INTENSET_TXDRDY_Msk (0x1UL << UARTE_INTENSET_TXDRDY_Pos)
  #define UARTE_INTENSET_TXDRDY_Min (0x0UL)
  #define UARTE_INTENSET_TXDRDY_Max (0x1UL)
  #define UARTE_INTENSET_TXDRDY_Set (0x1UL)
  #define UARTE_INTENSET_TXDRDY_Disabled (0x0UL)
  #define UARTE_INTENSET_TXDRDY_Enabled (0x1UL)

/* RXDRDY @Bit 4 : Write '1' to enable interrupt for event RXDRDY */
  #define UARTE_INTENSET_RXDRDY_Pos (4UL)
  #define UARTE_INTENSET_RXDRDY_Msk (0x1UL << UARTE_INTENSET_RXDRDY_Pos)
  #define UARTE_INTENSET_RXDRDY_Min (0x0UL)
  #define UARTE_INTENSET_RXDRDY_Max (0x1UL)
  #define UARTE_INTENSET_RXDRDY_Set (0x1UL)
  #define UARTE_INTENSET_RXDRDY_Disabled (0x0UL)
  #define UARTE_INTENSET_RXDRDY_Enabled (0x1UL)

/* ERROR @Bit 5 : Write '1' to enable interrupt for event ERROR */
  #define UARTE_INTENSET_ERROR_Pos (5UL)
  #define UARTE_INTENSET_ERROR_Msk (0x1UL << UARTE_INTENSET_ERROR_Pos)
  #define UARTE_INTENSET_ERROR_Min (0x0UL)
  #define UARTE_INTENSET_ERROR_Max (0x1UL)
  #define UARTE_INTENSET_ERROR_Set (0x1UL)
  #define UARTE_INTENSET_ERROR_Disabled (0x0UL)
  #define UARTE_INTENSET_ERROR_Enabled (0x1UL)

/* RXTO @Bit 9 : Write '1' to enable interrupt for event RXTO */
  #define UARTE_INTENSET_RXTO_Pos (9UL)
  #define UARTE_INTENSET_RXTO_Msk (0x1UL << UARTE_INTENSET_RXTO_Pos)
  #define UARTE_INTENSET_RXTO_Min (0x0UL)
  #define UARTE_INTENSET_RXTO_Max (0x1UL)
  #define UARTE_INTENSET_RXTO_Set (0x1UL)
  #define UARTE_INTENSET_RXTO_Disabled (0x0UL)
  #define UARTE_INTENSET_RXTO_Enabled (0x1UL)

/* TXSTOPPED @Bit 12 : Write '1' to enable interrupt for event TXSTOPPED */
  #define UARTE_INTENSET_TXSTOPPED_Pos (12UL)
  #define UARTE_INTENSET_TXSTOPPED_Msk (0x1UL << UARTE_INTENSET_TXSTOPPED_Pos)
  #define UARTE_INTENSET_TXSTOPPED_Min (0x0UL)
  #define UARTE_INTENSET_TXSTOPPED_Max (0x1UL)
  #define UARTE_INTENSET_TXSTOPPED_Set (0x1UL)
  #define UARTE_INTENSET_TXSTOPPED_Disabled (0x0UL)
  #define UARTE_INTENSET_TXSTOPPED_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define UARTE_INTENSET_DMARXEND_Pos (19UL)
  #define UARTE_INTENSET_DMARXEND_Msk (0x1UL << UARTE_INTENSET_DMARXEND_Pos)
  #define UARTE_INTENSET_DMARXEND_Min (0x0UL)
  #define UARTE_INTENSET_DMARXEND_Max (0x1UL)
  #define UARTE_INTENSET_DMARXEND_Set (0x1UL)
  #define UARTE_INTENSET_DMARXEND_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define UARTE_INTENSET_DMARXREADY_Pos (20UL)
  #define UARTE_INTENSET_DMARXREADY_Msk (0x1UL << UARTE_INTENSET_DMARXREADY_Pos)
  #define UARTE_INTENSET_DMARXREADY_Min (0x0UL)
  #define UARTE_INTENSET_DMARXREADY_Max (0x1UL)
  #define UARTE_INTENSET_DMARXREADY_Set (0x1UL)
  #define UARTE_INTENSET_DMARXREADY_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define UARTE_INTENSET_DMARXBUSERROR_Pos (21UL)
  #define UARTE_INTENSET_DMARXBUSERROR_Msk (0x1UL << UARTE_INTENSET_DMARXBUSERROR_Pos)
  #define UARTE_INTENSET_DMARXBUSERROR_Min (0x0UL)
  #define UARTE_INTENSET_DMARXBUSERROR_Max (0x1UL)
  #define UARTE_INTENSET_DMARXBUSERROR_Set (0x1UL)
  #define UARTE_INTENSET_DMARXBUSERROR_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define UARTE_INTENSET_DMARXMATCH0_Pos (22UL)
  #define UARTE_INTENSET_DMARXMATCH0_Msk (0x1UL << UARTE_INTENSET_DMARXMATCH0_Pos)
  #define UARTE_INTENSET_DMARXMATCH0_Min (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH0_Max (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH0_Set (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH0_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define UARTE_INTENSET_DMARXMATCH1_Pos (23UL)
  #define UARTE_INTENSET_DMARXMATCH1_Msk (0x1UL << UARTE_INTENSET_DMARXMATCH1_Pos)
  #define UARTE_INTENSET_DMARXMATCH1_Min (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH1_Max (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH1_Set (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH1_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define UARTE_INTENSET_DMARXMATCH2_Pos (24UL)
  #define UARTE_INTENSET_DMARXMATCH2_Msk (0x1UL << UARTE_INTENSET_DMARXMATCH2_Pos)
  #define UARTE_INTENSET_DMARXMATCH2_Min (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH2_Max (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH2_Set (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH2_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define UARTE_INTENSET_DMARXMATCH3_Pos (25UL)
  #define UARTE_INTENSET_DMARXMATCH3_Msk (0x1UL << UARTE_INTENSET_DMARXMATCH3_Pos)
  #define UARTE_INTENSET_DMARXMATCH3_Min (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH3_Max (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH3_Set (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH3_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define UARTE_INTENSET_DMATXEND_Pos (26UL)
  #define UARTE_INTENSET_DMATXEND_Msk (0x1UL << UARTE_INTENSET_DMATXEND_Pos)
  #define UARTE_INTENSET_DMATXEND_Min (0x0UL)
  #define UARTE_INTENSET_DMATXEND_Max (0x1UL)
  #define UARTE_INTENSET_DMATXEND_Set (0x1UL)
  #define UARTE_INTENSET_DMATXEND_Disabled (0x0UL)
  #define UARTE_INTENSET_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define UARTE_INTENSET_DMATXREADY_Pos (27UL)
  #define UARTE_INTENSET_DMATXREADY_Msk (0x1UL << UARTE_INTENSET_DMATXREADY_Pos)
  #define UARTE_INTENSET_DMATXREADY_Min (0x0UL)
  #define UARTE_INTENSET_DMATXREADY_Max (0x1UL)
  #define UARTE_INTENSET_DMATXREADY_Set (0x1UL)
  #define UARTE_INTENSET_DMATXREADY_Disabled (0x0UL)
  #define UARTE_INTENSET_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define UARTE_INTENSET_DMATXBUSERROR_Pos (28UL)
  #define UARTE_INTENSET_DMATXBUSERROR_Msk (0x1UL << UARTE_INTENSET_DMATXBUSERROR_Pos)
  #define UARTE_INTENSET_DMATXBUSERROR_Min (0x0UL)
  #define UARTE_INTENSET_DMATXBUSERROR_Max (0x1UL)
  #define UARTE_INTENSET_DMATXBUSERROR_Set (0x1UL)
  #define UARTE_INTENSET_DMATXBUSERROR_Disabled (0x0UL)
  #define UARTE_INTENSET_DMATXBUSERROR_Enabled (0x1UL)

/* FRAMETIMEOUT @Bit 29 : Write '1' to enable interrupt for event FRAMETIMEOUT */
  #define UARTE_INTENSET_FRAMETIMEOUT_Pos (29UL)
  #define UARTE_INTENSET_FRAMETIMEOUT_Msk (0x1UL << UARTE_INTENSET_FRAMETIMEOUT_Pos)
  #define UARTE_INTENSET_FRAMETIMEOUT_Min (0x0UL)
  #define UARTE_INTENSET_FRAMETIMEOUT_Max (0x1UL)
  #define UARTE_INTENSET_FRAMETIMEOUT_Set (0x1UL)
  #define UARTE_INTENSET_FRAMETIMEOUT_Disabled (0x0UL)
  #define UARTE_INTENSET_FRAMETIMEOUT_Enabled (0x1UL)


/* UARTE_INTENCLR: Disable interrupt */
  #define UARTE_INTENCLR_ResetValue (0x00000000UL)

/* CTS @Bit 0 : Write '1' to disable interrupt for event CTS */
  #define UARTE_INTENCLR_CTS_Pos (0UL)
  #define UARTE_INTENCLR_CTS_Msk (0x1UL << UARTE_INTENCLR_CTS_Pos)
  #define UARTE_INTENCLR_CTS_Min (0x0UL)
  #define UARTE_INTENCLR_CTS_Max (0x1UL)
  #define UARTE_INTENCLR_CTS_Clear (0x1UL)
  #define UARTE_INTENCLR_CTS_Disabled (0x0UL)
  #define UARTE_INTENCLR_CTS_Enabled (0x1UL)

/* NCTS @Bit 1 : Write '1' to disable interrupt for event NCTS */
  #define UARTE_INTENCLR_NCTS_Pos (1UL)
  #define UARTE_INTENCLR_NCTS_Msk (0x1UL << UARTE_INTENCLR_NCTS_Pos)
  #define UARTE_INTENCLR_NCTS_Min (0x0UL)
  #define UARTE_INTENCLR_NCTS_Max (0x1UL)
  #define UARTE_INTENCLR_NCTS_Clear (0x1UL)
  #define UARTE_INTENCLR_NCTS_Disabled (0x0UL)
  #define UARTE_INTENCLR_NCTS_Enabled (0x1UL)

/* TXDRDY @Bit 3 : Write '1' to disable interrupt for event TXDRDY */
  #define UARTE_INTENCLR_TXDRDY_Pos (3UL)
  #define UARTE_INTENCLR_TXDRDY_Msk (0x1UL << UARTE_INTENCLR_TXDRDY_Pos)
  #define UARTE_INTENCLR_TXDRDY_Min (0x0UL)
  #define UARTE_INTENCLR_TXDRDY_Max (0x1UL)
  #define UARTE_INTENCLR_TXDRDY_Clear (0x1UL)
  #define UARTE_INTENCLR_TXDRDY_Disabled (0x0UL)
  #define UARTE_INTENCLR_TXDRDY_Enabled (0x1UL)

/* RXDRDY @Bit 4 : Write '1' to disable interrupt for event RXDRDY */
  #define UARTE_INTENCLR_RXDRDY_Pos (4UL)
  #define UARTE_INTENCLR_RXDRDY_Msk (0x1UL << UARTE_INTENCLR_RXDRDY_Pos)
  #define UARTE_INTENCLR_RXDRDY_Min (0x0UL)
  #define UARTE_INTENCLR_RXDRDY_Max (0x1UL)
  #define UARTE_INTENCLR_RXDRDY_Clear (0x1UL)
  #define UARTE_INTENCLR_RXDRDY_Disabled (0x0UL)
  #define UARTE_INTENCLR_RXDRDY_Enabled (0x1UL)

/* ERROR @Bit 5 : Write '1' to disable interrupt for event ERROR */
  #define UARTE_INTENCLR_ERROR_Pos (5UL)
  #define UARTE_INTENCLR_ERROR_Msk (0x1UL << UARTE_INTENCLR_ERROR_Pos)
  #define UARTE_INTENCLR_ERROR_Min (0x0UL)
  #define UARTE_INTENCLR_ERROR_Max (0x1UL)
  #define UARTE_INTENCLR_ERROR_Clear (0x1UL)
  #define UARTE_INTENCLR_ERROR_Disabled (0x0UL)
  #define UARTE_INTENCLR_ERROR_Enabled (0x1UL)

/* RXTO @Bit 9 : Write '1' to disable interrupt for event RXTO */
  #define UARTE_INTENCLR_RXTO_Pos (9UL)
  #define UARTE_INTENCLR_RXTO_Msk (0x1UL << UARTE_INTENCLR_RXTO_Pos)
  #define UARTE_INTENCLR_RXTO_Min (0x0UL)
  #define UARTE_INTENCLR_RXTO_Max (0x1UL)
  #define UARTE_INTENCLR_RXTO_Clear (0x1UL)
  #define UARTE_INTENCLR_RXTO_Disabled (0x0UL)
  #define UARTE_INTENCLR_RXTO_Enabled (0x1UL)

/* TXSTOPPED @Bit 12 : Write '1' to disable interrupt for event TXSTOPPED */
  #define UARTE_INTENCLR_TXSTOPPED_Pos (12UL)
  #define UARTE_INTENCLR_TXSTOPPED_Msk (0x1UL << UARTE_INTENCLR_TXSTOPPED_Pos)
  #define UARTE_INTENCLR_TXSTOPPED_Min (0x0UL)
  #define UARTE_INTENCLR_TXSTOPPED_Max (0x1UL)
  #define UARTE_INTENCLR_TXSTOPPED_Clear (0x1UL)
  #define UARTE_INTENCLR_TXSTOPPED_Disabled (0x0UL)
  #define UARTE_INTENCLR_TXSTOPPED_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define UARTE_INTENCLR_DMARXEND_Pos (19UL)
  #define UARTE_INTENCLR_DMARXEND_Msk (0x1UL << UARTE_INTENCLR_DMARXEND_Pos)
  #define UARTE_INTENCLR_DMARXEND_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXEND_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXEND_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXEND_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define UARTE_INTENCLR_DMARXREADY_Pos (20UL)
  #define UARTE_INTENCLR_DMARXREADY_Msk (0x1UL << UARTE_INTENCLR_DMARXREADY_Pos)
  #define UARTE_INTENCLR_DMARXREADY_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXREADY_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXREADY_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXREADY_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define UARTE_INTENCLR_DMARXBUSERROR_Pos (21UL)
  #define UARTE_INTENCLR_DMARXBUSERROR_Msk (0x1UL << UARTE_INTENCLR_DMARXBUSERROR_Pos)
  #define UARTE_INTENCLR_DMARXBUSERROR_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXBUSERROR_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXBUSERROR_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXBUSERROR_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define UARTE_INTENCLR_DMARXMATCH0_Pos (22UL)
  #define UARTE_INTENCLR_DMARXMATCH0_Msk (0x1UL << UARTE_INTENCLR_DMARXMATCH0_Pos)
  #define UARTE_INTENCLR_DMARXMATCH0_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH0_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH0_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH0_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define UARTE_INTENCLR_DMARXMATCH1_Pos (23UL)
  #define UARTE_INTENCLR_DMARXMATCH1_Msk (0x1UL << UARTE_INTENCLR_DMARXMATCH1_Pos)
  #define UARTE_INTENCLR_DMARXMATCH1_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH1_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH1_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH1_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define UARTE_INTENCLR_DMARXMATCH2_Pos (24UL)
  #define UARTE_INTENCLR_DMARXMATCH2_Msk (0x1UL << UARTE_INTENCLR_DMARXMATCH2_Pos)
  #define UARTE_INTENCLR_DMARXMATCH2_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH2_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH2_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH2_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define UARTE_INTENCLR_DMARXMATCH3_Pos (25UL)
  #define UARTE_INTENCLR_DMARXMATCH3_Msk (0x1UL << UARTE_INTENCLR_DMARXMATCH3_Pos)
  #define UARTE_INTENCLR_DMARXMATCH3_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH3_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH3_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH3_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define UARTE_INTENCLR_DMATXEND_Pos (26UL)
  #define UARTE_INTENCLR_DMATXEND_Msk (0x1UL << UARTE_INTENCLR_DMATXEND_Pos)
  #define UARTE_INTENCLR_DMATXEND_Min (0x0UL)
  #define UARTE_INTENCLR_DMATXEND_Max (0x1UL)
  #define UARTE_INTENCLR_DMATXEND_Clear (0x1UL)
  #define UARTE_INTENCLR_DMATXEND_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define UARTE_INTENCLR_DMATXREADY_Pos (27UL)
  #define UARTE_INTENCLR_DMATXREADY_Msk (0x1UL << UARTE_INTENCLR_DMATXREADY_Pos)
  #define UARTE_INTENCLR_DMATXREADY_Min (0x0UL)
  #define UARTE_INTENCLR_DMATXREADY_Max (0x1UL)
  #define UARTE_INTENCLR_DMATXREADY_Clear (0x1UL)
  #define UARTE_INTENCLR_DMATXREADY_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define UARTE_INTENCLR_DMATXBUSERROR_Pos (28UL)
  #define UARTE_INTENCLR_DMATXBUSERROR_Msk (0x1UL << UARTE_INTENCLR_DMATXBUSERROR_Pos)
  #define UARTE_INTENCLR_DMATXBUSERROR_Min (0x0UL)
  #define UARTE_INTENCLR_DMATXBUSERROR_Max (0x1UL)
  #define UARTE_INTENCLR_DMATXBUSERROR_Clear (0x1UL)
  #define UARTE_INTENCLR_DMATXBUSERROR_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMATXBUSERROR_Enabled (0x1UL)

/* FRAMETIMEOUT @Bit 29 : Write '1' to disable interrupt for event FRAMETIMEOUT */
  #define UARTE_INTENCLR_FRAMETIMEOUT_Pos (29UL)
  #define UARTE_INTENCLR_FRAMETIMEOUT_Msk (0x1UL << UARTE_INTENCLR_FRAMETIMEOUT_Pos)
  #define UARTE_INTENCLR_FRAMETIMEOUT_Min (0x0UL)
  #define UARTE_INTENCLR_FRAMETIMEOUT_Max (0x1UL)
  #define UARTE_INTENCLR_FRAMETIMEOUT_Clear (0x1UL)
  #define UARTE_INTENCLR_FRAMETIMEOUT_Disabled (0x0UL)
  #define UARTE_INTENCLR_FRAMETIMEOUT_Enabled (0x1UL)


/* UARTE_ERRORSRC: Error source */
  #define UARTE_ERRORSRC_ResetValue (0x00000000UL)

/* OVERRUN @Bit 0 : Overrun error */
  #define UARTE_ERRORSRC_OVERRUN_Pos (0UL)
  #define UARTE_ERRORSRC_OVERRUN_Msk (0x1UL << UARTE_ERRORSRC_OVERRUN_Pos)
  #define UARTE_ERRORSRC_OVERRUN_Min (0x0UL)
  #define UARTE_ERRORSRC_OVERRUN_Max (0x1UL)
  #define UARTE_ERRORSRC_OVERRUN_NotPresent (0x0UL)
  #define UARTE_ERRORSRC_OVERRUN_Present (0x1UL)

/* PARITY @Bit 1 : Parity error */
  #define UARTE_ERRORSRC_PARITY_Pos (1UL)
  #define UARTE_ERRORSRC_PARITY_Msk (0x1UL << UARTE_ERRORSRC_PARITY_Pos)
  #define UARTE_ERRORSRC_PARITY_Min (0x0UL)
  #define UARTE_ERRORSRC_PARITY_Max (0x1UL)
  #define UARTE_ERRORSRC_PARITY_NotPresent (0x0UL)
  #define UARTE_ERRORSRC_PARITY_Present (0x1UL)

/* FRAMING @Bit 2 : Framing error occurred */
  #define UARTE_ERRORSRC_FRAMING_Pos (2UL)
  #define UARTE_ERRORSRC_FRAMING_Msk (0x1UL << UARTE_ERRORSRC_FRAMING_Pos)
  #define UARTE_ERRORSRC_FRAMING_Min (0x0UL)
  #define UARTE_ERRORSRC_FRAMING_Max (0x1UL)
  #define UARTE_ERRORSRC_FRAMING_NotPresent (0x0UL)
  #define UARTE_ERRORSRC_FRAMING_Present (0x1UL)

/* BREAK @Bit 3 : Break condition */
  #define UARTE_ERRORSRC_BREAK_Pos (3UL)
  #define UARTE_ERRORSRC_BREAK_Msk (0x1UL << UARTE_ERRORSRC_BREAK_Pos)
  #define UARTE_ERRORSRC_BREAK_Min (0x0UL)
  #define UARTE_ERRORSRC_BREAK_Max (0x1UL)
  #define UARTE_ERRORSRC_BREAK_NotPresent (0x0UL)
  #define UARTE_ERRORSRC_BREAK_Present (0x1UL)


/* UARTE_ENABLE: Enable UART */
  #define UARTE_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..3 : Enable or disable UARTE */
  #define UARTE_ENABLE_ENABLE_Pos (0UL)
  #define UARTE_ENABLE_ENABLE_Msk (0xFUL << UARTE_ENABLE_ENABLE_Pos)
  #define UARTE_ENABLE_ENABLE_Min (0x0UL)
  #define UARTE_ENABLE_ENABLE_Max (0x8UL)
  #define UARTE_ENABLE_ENABLE_Disabled (0x0UL)
  #define UARTE_ENABLE_ENABLE_Enabled (0x8UL)


/* UARTE_BAUDRATE: Baud rate. Accuracy depends on the HFCLK source selected. */
  #define UARTE_BAUDRATE_ResetValue (0x04000000UL)

/* BAUDRATE @Bits 0..31 : Baud rate */
  #define UARTE_BAUDRATE_BAUDRATE_Pos (0UL)
  #define UARTE_BAUDRATE_BAUDRATE_Msk (0xFFFFFFFFUL << UARTE_BAUDRATE_BAUDRATE_Pos)
  #define UARTE_BAUDRATE_BAUDRATE_Min (0x4F000UL)
  #define UARTE_BAUDRATE_BAUDRATE_Max (0x10000000UL)
  #define UARTE_BAUDRATE_BAUDRATE_Baud1200 (0x0004F000UL) /*!< 1200 baud (actual rate: 1205) when UARTE has 16 MHz peripheral
                                                               clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud2400 (0x0009D000UL) /*!< 2400 baud (actual rate: 2396) when UARTE has 16 MHz peripheral
                                                               clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud4800 (0x0013B000UL) /*!< 4800 baud (actual rate: 4808) when UARTE has 16 MHz peripheral
                                                               clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud9600 (0x00275000UL) /*!< 9600 baud (actual rate: 9598) when UARTE has 16 MHz peripheral
                                                               clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud14400 (0x003AF000UL) /*!< 14400 baud (actual rate: 14401) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud19200 (0x004EA000UL) /*!< 19200 baud (actual rate: 19208) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud28800 (0x0075C000UL) /*!< 28800 baud (actual rate: 28777) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud31250 (0x00800000UL)
  #define UARTE_BAUDRATE_BAUDRATE_Baud38400 (0x009D0000UL) /*!< 38400 baud (actual rate: 38369) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud56000 (0x00E50000UL) /*!< 56000 baud (actual rate: 55944) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud57600 (0x00EB0000UL) /*!< 57600 baud (actual rate: 57554) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud76800 (0x013A9000UL) /*!< 76800 baud (actual rate: 76923) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud115200 (0x01D60000UL) /*!< 115200 baud (actual rate: 115108) when UARTE has 16 MHz
                                                                 peripheral clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud230400 (0x03B00000UL) /*!< 230400 baud (actual rate: 231884) when UARTE has 16 MHz
                                                                 peripheral clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud250000 (0x04000000UL)
  #define UARTE_BAUDRATE_BAUDRATE_Baud460800 (0x07400000UL) /*!< 460800 baud (actual rate: 457143) when UARTE has 16 MHz
                                                                 peripheral clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud921600 (0x0F000000UL) /*!< 921600 baud (actual rate: 941176) when UARTE has 16 MHz
                                                                 peripheral clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud1M (0x10000000UL)


/* UARTE_CONFIG: Configuration of parity, hardware flow control, framesize, and packet timeout. */
  #define UARTE_CONFIG_ResetValue (0x00001000UL)

/* HWFC @Bit 0 : Hardware flow control */
  #define UARTE_CONFIG_HWFC_Pos (0UL)
  #define UARTE_CONFIG_HWFC_Msk (0x1UL << UARTE_CONFIG_HWFC_Pos)
  #define UARTE_CONFIG_HWFC_Min (0x0UL)
  #define UARTE_CONFIG_HWFC_Max (0x1UL)
  #define UARTE_CONFIG_HWFC_Disabled (0x0UL)
  #define UARTE_CONFIG_HWFC_Enabled (0x1UL)

/* PARITY @Bits 1..3 : Parity */
  #define UARTE_CONFIG_PARITY_Pos (1UL)
  #define UARTE_CONFIG_PARITY_Msk (0x7UL << UARTE_CONFIG_PARITY_Pos)
  #define UARTE_CONFIG_PARITY_Min (0x0UL)
  #define UARTE_CONFIG_PARITY_Max (0x7UL)
  #define UARTE_CONFIG_PARITY_Excluded (0x0UL)
  #define UARTE_CONFIG_PARITY_Included (0x7UL)

/* STOP @Bit 4 : Stop bits */
  #define UARTE_CONFIG_STOP_Pos (4UL)
  #define UARTE_CONFIG_STOP_Msk (0x1UL << UARTE_CONFIG_STOP_Pos)
  #define UARTE_CONFIG_STOP_Min (0x0UL)
  #define UARTE_CONFIG_STOP_Max (0x1UL)
  #define UARTE_CONFIG_STOP_One (0x0UL)
  #define UARTE_CONFIG_STOP_Two (0x1UL)

/* PARITYTYPE @Bit 8 : Even or odd parity type */
  #define UARTE_CONFIG_PARITYTYPE_Pos (8UL)
  #define UARTE_CONFIG_PARITYTYPE_Msk (0x1UL << UARTE_CONFIG_PARITYTYPE_Pos)
  #define UARTE_CONFIG_PARITYTYPE_Min (0x0UL)
  #define UARTE_CONFIG_PARITYTYPE_Max (0x1UL)
  #define UARTE_CONFIG_PARITYTYPE_Even (0x0UL)
  #define UARTE_CONFIG_PARITYTYPE_Odd (0x1UL)

/* FRAMESIZE @Bits 9..12 : Set the data frame size */
  #define UARTE_CONFIG_FRAMESIZE_Pos (9UL)
  #define UARTE_CONFIG_FRAMESIZE_Msk (0xFUL << UARTE_CONFIG_FRAMESIZE_Pos)
  #define UARTE_CONFIG_FRAMESIZE_Min (0x4UL)
  #define UARTE_CONFIG_FRAMESIZE_Max (0x9UL)
  #define UARTE_CONFIG_FRAMESIZE_9bit (0x9UL)
  #define UARTE_CONFIG_FRAMESIZE_8bit (0x8UL)
  #define UARTE_CONFIG_FRAMESIZE_7bit (0x7UL)
  #define UARTE_CONFIG_FRAMESIZE_6bit (0x6UL)
  #define UARTE_CONFIG_FRAMESIZE_5bit (0x5UL)
  #define UARTE_CONFIG_FRAMESIZE_4bit (0x4UL)

/* ENDIAN @Bit 13 : Select if data is trimmed from MSB or LSB end when the data frame size is less than 8. */
  #define UARTE_CONFIG_ENDIAN_Pos (13UL)
  #define UARTE_CONFIG_ENDIAN_Msk (0x1UL << UARTE_CONFIG_ENDIAN_Pos)
  #define UARTE_CONFIG_ENDIAN_Min (0x0UL)
  #define UARTE_CONFIG_ENDIAN_Max (0x1UL)
  #define UARTE_CONFIG_ENDIAN_MSB (0x0UL)
  #define UARTE_CONFIG_ENDIAN_LSB (0x1UL)

/* FRAMETIMEOUT @Bit 14 : Enable packet timeout. */
  #define UARTE_CONFIG_FRAMETIMEOUT_Pos (14UL)
  #define UARTE_CONFIG_FRAMETIMEOUT_Msk (0x1UL << UARTE_CONFIG_FRAMETIMEOUT_Pos)
  #define UARTE_CONFIG_FRAMETIMEOUT_Min (0x0UL)
  #define UARTE_CONFIG_FRAMETIMEOUT_Max (0x1UL)
  #define UARTE_CONFIG_FRAMETIMEOUT_DISABLED (0x0UL)
  #define UARTE_CONFIG_FRAMETIMEOUT_ENABLED (0x1UL)
  #define UARTE_CONFIG_FRAMETIMEOUT_Disabled (0x0UL)
  #define UARTE_CONFIG_FRAMETIMEOUT_Enabled (0x1UL)


/* UARTE_ADDRESS: Set the address of the UARTE for RX when used in 9 bit data frame mode. */
  #define UARTE_ADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..7 : Set address */
  #define UARTE_ADDRESS_ADDRESS_Pos (0UL)
  #define UARTE_ADDRESS_ADDRESS_Msk (0xFFUL << UARTE_ADDRESS_ADDRESS_Pos)


/* UARTE_FRAMETIMEOUT: Set the number of UARTE bits to count before triggering packet timeout. */
  #define UARTE_FRAMETIMEOUT_ResetValue (0x00000010UL)

/* COUNTERTOP @Bits 0..9 : Number of UARTE bits before timeout. */
  #define UARTE_FRAMETIMEOUT_COUNTERTOP_Pos (0UL)
  #define UARTE_FRAMETIMEOUT_COUNTERTOP_Msk (0x3FFUL << UARTE_FRAMETIMEOUT_COUNTERTOP_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           UICR                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct UICR_APPROTECT ================================================== */
/**
  * @brief APPROTECT [UICR_APPROTECT] Access Port Protection Registers
  */
typedef struct {
  __IOM uint32_t  PROTECT0;
  __IM  uint32_t  RESERVED[6];
  __IOM uint32_t  PROTECT1;
} NRF_UICR_APPROTECT_Type;
  #define UICR_APPROTECT_MaxCount (1UL)
  #define UICR_APPROTECT_MaxIndex (0UL)
  #define UICR_APPROTECT_MinIndex (0UL)

/* UICR_APPROTECT_PROTECT0: Access port protection */
  #define UICR_APPROTECT_PROTECT0_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_APPROTECT_PROTECT0_PALL_Pos (0UL)
  #define UICR_APPROTECT_PROTECT0_PALL_Msk (0xFFFFFFFFUL << UICR_APPROTECT_PROTECT0_PALL_Pos)
  #define UICR_APPROTECT_PROTECT0_PALL_Min (0xFFFFFFFFUL)
  #define UICR_APPROTECT_PROTECT0_PALL_Max (0xFFFFFFFFUL)
  #define UICR_APPROTECT_PROTECT0_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.DOMAIN DBGEN and NIDEN signal
                                                                       protectors unlocked and under CPU control.*/


/* UICR_APPROTECT_PROTECT1: Access port protection */
  #define UICR_APPROTECT_PROTECT1_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_APPROTECT_PROTECT1_PALL_Pos (0UL)
  #define UICR_APPROTECT_PROTECT1_PALL_Msk (0xFFFFFFFFUL << UICR_APPROTECT_PROTECT1_PALL_Pos)
  #define UICR_APPROTECT_PROTECT1_PALL_Min (0xFFFFFFFFUL)
  #define UICR_APPROTECT_PROTECT1_PALL_Max (0xFFFFFFFFUL)
  #define UICR_APPROTECT_PROTECT1_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.DOMAIN DBGEN and NIDEN signal
                                                                       protectors unlocked and under CPU control.*/



/* =============================================== Struct UICR_SECUREAPPROTECT =============================================== */
/**
  * @brief SECUREAPPROTECT [UICR_SECUREAPPROTECT] Access Port Protection Registers
  */
typedef struct {
  __IOM uint32_t  PROTECT0;
  __IM  uint32_t  RESERVED[6];
  __IOM uint32_t  PROTECT1;
} NRF_UICR_SECUREAPPROTECT_Type;
  #define UICR_SECUREAPPROTECT_MaxCount (1UL)
  #define UICR_SECUREAPPROTECT_MaxIndex (0UL)
  #define UICR_SECUREAPPROTECT_MinIndex (0UL)

/* UICR_SECUREAPPROTECT_PROTECT0: Access port protection */
  #define UICR_SECUREAPPROTECT_PROTECT0_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_SECUREAPPROTECT_PROTECT0_PALL_Pos (0UL)
  #define UICR_SECUREAPPROTECT_PROTECT0_PALL_Msk (0xFFFFFFFFUL << UICR_SECUREAPPROTECT_PROTECT0_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_SECUREAPPROTECT_PROTECT0_PALL_Min (0xFFFFFFFFUL)
  #define UICR_SECUREAPPROTECT_PROTECT0_PALL_Max (0xFFFFFFFFUL)
  #define UICR_SECUREAPPROTECT_PROTECT0_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.DOMAIN SPIDEN and SPNIDEN
                                                                            signal protectors unlocked and under CPU control.*/


/* UICR_SECUREAPPROTECT_PROTECT1: Access port protection register */
  #define UICR_SECUREAPPROTECT_PROTECT1_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_SECUREAPPROTECT_PROTECT1_PALL_Pos (0UL)
  #define UICR_SECUREAPPROTECT_PROTECT1_PALL_Msk (0xFFFFFFFFUL << UICR_SECUREAPPROTECT_PROTECT1_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_SECUREAPPROTECT_PROTECT1_PALL_Min (0xFFFFFFFFUL)
  #define UICR_SECUREAPPROTECT_PROTECT1_PALL_Max (0xFFFFFFFFUL)
  #define UICR_SECUREAPPROTECT_PROTECT1_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.DOMAIN SPIDEN and SPNIDEN
                                                                            signal protectors unlocked and under CPU control.*/



/* ================================================ Struct UICR_AUXAPPROTECT ================================================= */
/**
  * @brief AUXAPPROTECT [UICR_AUXAPPROTECT] Access Port Protection Registers
  */
typedef struct {
  __IOM uint32_t  PROTECT0;
  __IM  uint32_t  RESERVED[6];
  __IOM uint32_t  PROTECT1;
} NRF_UICR_AUXAPPROTECT_Type;
  #define UICR_AUXAPPROTECT_MaxCount (1UL)
  #define UICR_AUXAPPROTECT_MaxIndex (0UL)
  #define UICR_AUXAPPROTECT_MinIndex (0UL)

/* UICR_AUXAPPROTECT_PROTECT0: Access port protection */
  #define UICR_AUXAPPROTECT_PROTECT0_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_AUXAPPROTECT_PROTECT0_PALL_Pos (0UL)
  #define UICR_AUXAPPROTECT_PROTECT0_PALL_Msk (0xFFFFFFFFUL << UICR_AUXAPPROTECT_PROTECT0_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_AUXAPPROTECT_PROTECT0_PALL_Min (0xFFFFFFFFUL)
  #define UICR_AUXAPPROTECT_PROTECT0_PALL_Max (0xFFFFFFFFUL)
  #define UICR_AUXAPPROTECT_PROTECT0_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.AP DBGEN signal protector
                                                                          unlocked and under CPU control.*/


/* UICR_AUXAPPROTECT_PROTECT1: Access port protection register */
  #define UICR_AUXAPPROTECT_PROTECT1_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_AUXAPPROTECT_PROTECT1_PALL_Pos (0UL)
  #define UICR_AUXAPPROTECT_PROTECT1_PALL_Msk (0xFFFFFFFFUL << UICR_AUXAPPROTECT_PROTECT1_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_AUXAPPROTECT_PROTECT1_PALL_Min (0xFFFFFFFFUL)
  #define UICR_AUXAPPROTECT_PROTECT1_PALL_Max (0xFFFFFFFFUL)
  #define UICR_AUXAPPROTECT_PROTECT1_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.AP DBGEN signal protector
                                                                          unlocked and under CPU control.*/



/* ================================================ Struct UICR_ERASEPROTECT ================================================= */
/**
  * @brief ERASEPROTECT [UICR_ERASEPROTECT] Erase Protection Registers
  */
typedef struct {
  __IOM uint32_t  PROTECT0;
  __IM  uint32_t  RESERVED[6];
  __IOM uint32_t  PROTECT1;
} NRF_UICR_ERASEPROTECT_Type;
  #define UICR_ERASEPROTECT_MaxCount (1UL)
  #define UICR_ERASEPROTECT_MaxIndex (0UL)
  #define UICR_ERASEPROTECT_MinIndex (0UL)

/* UICR_ERASEPROTECT_PROTECT0: Erase protection */
  #define UICR_ERASEPROTECT_PROTECT0_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Pos (0UL)
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Msk (0xFFFFFFFFUL << UICR_ERASEPROTECT_PROTECT0_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Min (0x50FA50FAUL)
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Max (0x50FA50FAUL)
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Protected (0x50FA50FAUL) /*!< The device can be erased using the CTRL-AP Erase all
                                                                        function and TAMPC PROTECT.ERASEPROTECT signal protector
                                                                        is unlocked.*/


/* UICR_ERASEPROTECT_PROTECT1: Erase protection */
  #define UICR_ERASEPROTECT_PROTECT1_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Pos (0UL)
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Msk (0xFFFFFFFFUL << UICR_ERASEPROTECT_PROTECT1_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Min (0x50FA50FAUL)
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Max (0x50FA50FAUL)
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Protected (0x50FA50FAUL) /*!< The device can be erased using the CTRL-AP Erase all
                                                                        function and TAMPC PROTECT.ERASEPROTECT signal protector
                                                                        is unlocked.*/



/* =============================================== Struct UICR_USER_ROT_PUBKEY =============================================== */
/**
  * @brief PUBKEY [UICR_USER_ROT_PUBKEY] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DIGEST[8];                         /*!< (@ 0x00000000) First 256 bits of SHA2-512 digest over RoT public key
                                                                         generation [n].*/
  __IOM uint32_t  REVOKE[3];
} NRF_UICR_USER_ROT_PUBKEY_Type;
  #define UICR_USER_ROT_PUBKEY_MaxCount (4UL)
  #define UICR_USER_ROT_PUBKEY_MaxIndex (3UL)
  #define UICR_USER_ROT_PUBKEY_MinIndex (0UL)

/* UICR_USER_ROT_PUBKEY_DIGEST: First 256 bits of SHA2-512 digest over RoT public key generation [n]. */
  #define UICR_USER_ROT_PUBKEY_DIGEST_MaxCount (8UL)
  #define UICR_USER_ROT_PUBKEY_DIGEST_MaxIndex (7UL)
  #define UICR_USER_ROT_PUBKEY_DIGEST_MinIndex (0UL)
  #define UICR_USER_ROT_PUBKEY_DIGEST_ResetValue (0xFFFFFFFFUL)

/* VALUE @Bits 0..31 : Value for word [o] in the key digest [n]. */
  #define UICR_USER_ROT_PUBKEY_DIGEST_VALUE_Pos (0UL)
  #define UICR_USER_ROT_PUBKEY_DIGEST_VALUE_Msk (0xFFFFFFFFUL << UICR_USER_ROT_PUBKEY_DIGEST_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/


/* UICR_USER_ROT_PUBKEY_REVOKE: Revocation status for RoT public key generation [n]. */
  #define UICR_USER_ROT_PUBKEY_REVOKE_MaxCount (3UL)
  #define UICR_USER_ROT_PUBKEY_REVOKE_MaxIndex (2UL)
  #define UICR_USER_ROT_PUBKEY_REVOKE_MinIndex (0UL)
  #define UICR_USER_ROT_PUBKEY_REVOKE_ResetValue (0xFFFFFFFFUL)

/* STATUS @Bits 0..31 : Revocation status. */
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Pos (0UL)
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Msk (0xFFFFFFFFUL << UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Pos) /*!< Bit mask of
                                                                            STATUS field.*/
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Min (0xFFFFFFFFUL)
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Max (0xFFFFFFFFUL)
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_NotRevoked (0xFFFFFFFFUL)



/* ============================================= Struct UICR_USER_ROT_AUTHOPKEY ============================================== */
/**
  * @brief AUTHOPKEY [UICR_USER_ROT_AUTHOPKEY] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DIGEST[8];                         /*!< (@ 0x00000000) First 256 bits of SHA2-512 digest over RoT
                                                                         authenticated operation public key generation [n].*/
  __IOM uint32_t  REVOKE[3];                         /*!< (@ 0x00000020) Revocation status for RoT authenticated operation
                                                                         public key generation [n].*/
} NRF_UICR_USER_ROT_AUTHOPKEY_Type;
  #define UICR_USER_ROT_AUTHOPKEY_MaxCount (4UL)
  #define UICR_USER_ROT_AUTHOPKEY_MaxIndex (3UL)
  #define UICR_USER_ROT_AUTHOPKEY_MinIndex (0UL)

/* UICR_USER_ROT_AUTHOPKEY_DIGEST: First 256 bits of SHA2-512 digest over RoT authenticated operation public key generation [n].
                                    */

  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_MaxCount (8UL)
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_MaxIndex (7UL)
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_MinIndex (0UL)
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_ResetValue (0xFFFFFFFFUL)

/* VALUE @Bits 0..31 : Value for word [o] in the key digest [n]. */
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_VALUE_Pos (0UL)
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_VALUE_Msk (0xFFFFFFFFUL << UICR_USER_ROT_AUTHOPKEY_DIGEST_VALUE_Pos) /*!< Bit mask of
                                                                            VALUE field.*/


/* UICR_USER_ROT_AUTHOPKEY_REVOKE: Revocation status for RoT authenticated operation public key generation [n]. */
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_MaxCount (3UL)
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_MaxIndex (2UL)
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_MinIndex (0UL)
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_ResetValue (0xFFFFFFFFUL)

/* STATUS @Bits 0..31 : Revocation status. */
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Pos (0UL)
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Msk (0xFFFFFFFFUL << UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Pos) /*!< Bit mask of
                                                                            STATUS field.*/
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Min (0xFFFFFFFFUL)
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Max (0xFFFFFFFFUL)
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_NotRevoked (0xFFFFFFFFUL)



/* ================================================== Struct UICR_USER_ROT =================================================== */
/**
  * @brief ROT [UICR_USER_ROT] Assets installed to establish initial Root of Trust in the device.
  */
typedef struct {
  __IOM NRF_UICR_USER_ROT_PUBKEY_Type PUBKEY[4];
  __IOM NRF_UICR_USER_ROT_AUTHOPKEY_Type AUTHOPKEY[4];
} NRF_UICR_USER_ROT_Type;


/* ==================================================== Struct UICR_USER ===================================================== */
/**
  * @brief USER [UICR_USER] (unspecified)
  */
typedef struct {
  __IOM NRF_UICR_USER_ROT_Type ROT;                  /*!< (@ 0x00000000) Assets installed to establish initial Root of Trust in
                                                                         the device.*/
} NRF_UICR_USER_Type;

/* ======================================================= Struct UICR ======================================================= */
/**
  * @brief User Information Configuration Registers
  */
  typedef struct {
    __IOM NRF_UICR_APPROTECT_Type APPROTECT[1];
    __IOM NRF_UICR_SECUREAPPROTECT_Type SECUREAPPROTECT[1];
    __IOM NRF_UICR_AUXAPPROTECT_Type AUXAPPROTECT[1];
    __IOM NRF_UICR_ERASEPROTECT_Type ERASEPROTECT[1];
    __IOM uint32_t BOOTCONF;
    __IM uint32_t RESERVED[95];
    __IOM NRF_UICR_USER_Type USER;
    __IM uint32_t RESERVED1[104];
    __IOM uint32_t OTP[320];
  } NRF_UICR_Type;

/* UICR_BOOTCONF: Immutable boot region configuration. */
  #define UICR_BOOTCONF_ResetValue (0xFFFFFFFFUL)

/* READ @Bit 0 : Read access */
  #define UICR_BOOTCONF_READ_Pos (0UL)
  #define UICR_BOOTCONF_READ_Msk (0x1UL << UICR_BOOTCONF_READ_Pos)
  #define UICR_BOOTCONF_READ_Min (0x0UL)
  #define UICR_BOOTCONF_READ_Max (0x1UL)
  #define UICR_BOOTCONF_READ_NotAllowed (0x0UL)
  #define UICR_BOOTCONF_READ_Allowed (0x1UL)

/* WRITE @Bit 1 : Write access */
  #define UICR_BOOTCONF_WRITE_Pos (1UL)
  #define UICR_BOOTCONF_WRITE_Msk (0x1UL << UICR_BOOTCONF_WRITE_Pos)
  #define UICR_BOOTCONF_WRITE_Min (0x0UL)
  #define UICR_BOOTCONF_WRITE_Max (0x1UL)
  #define UICR_BOOTCONF_WRITE_NotAllowed (0x0UL)
  #define UICR_BOOTCONF_WRITE_Allowed (0x1UL)

/* EXECUTE @Bit 2 : Execute access */
  #define UICR_BOOTCONF_EXECUTE_Pos (2UL)
  #define UICR_BOOTCONF_EXECUTE_Msk (0x1UL << UICR_BOOTCONF_EXECUTE_Pos)
  #define UICR_BOOTCONF_EXECUTE_Min (0x0UL)
  #define UICR_BOOTCONF_EXECUTE_Max (0x1UL)
  #define UICR_BOOTCONF_EXECUTE_NotAllowed (0x0UL)
  #define UICR_BOOTCONF_EXECUTE_Allowed (0x1UL)

/* SECURE @Bit 3 : Secure access */
  #define UICR_BOOTCONF_SECURE_Pos (3UL)
  #define UICR_BOOTCONF_SECURE_Msk (0x1UL << UICR_BOOTCONF_SECURE_Pos)
  #define UICR_BOOTCONF_SECURE_Min (0x0UL)
  #define UICR_BOOTCONF_SECURE_Max (0x1UL)
  #define UICR_BOOTCONF_SECURE_NonSecure (0x0UL)
  #define UICR_BOOTCONF_SECURE_Secure (0x1UL)

/* WRITEONCE @Bit 12 : Write-once */
  #define UICR_BOOTCONF_WRITEONCE_Pos (12UL)
  #define UICR_BOOTCONF_WRITEONCE_Msk (0x1UL << UICR_BOOTCONF_WRITEONCE_Pos)
  #define UICR_BOOTCONF_WRITEONCE_Min (0x0UL)
  #define UICR_BOOTCONF_WRITEONCE_Max (0x1UL)
  #define UICR_BOOTCONF_WRITEONCE_Disabled (0x0UL)
  #define UICR_BOOTCONF_WRITEONCE_Enabled (0x1UL)

/* LOCK @Bit 13 : Enable lock of configuration register */
  #define UICR_BOOTCONF_LOCK_Pos (13UL)
  #define UICR_BOOTCONF_LOCK_Msk (0x1UL << UICR_BOOTCONF_LOCK_Pos)
  #define UICR_BOOTCONF_LOCK_Min (0x0UL)
  #define UICR_BOOTCONF_LOCK_Max (0x1UL)
  #define UICR_BOOTCONF_LOCK_Disabled (0x0UL)        /*!< Lock is disabled, and the RRAMC region configuration registers for the
                                                          immutable boot region are writable.*/
  #define UICR_BOOTCONF_LOCK_Enabled (0x1UL)         /*!< Lock is enabled, and the RRAMC configuration registers for the
                                                          immutable boot region are read-only.*/

/* SIZE @Bits 16..20 : Immutable boot region size */
  #define UICR_BOOTCONF_SIZE_Pos (16UL)
  #define UICR_BOOTCONF_SIZE_Msk (0x1FUL << UICR_BOOTCONF_SIZE_Pos)


/* UICR_OTP: One time programmable memory */
  #define UICR_OTP_MaxCount (320UL)
  #define UICR_OTP_MaxIndex (319UL)
  #define UICR_OTP_MinIndex (0UL)
  #define UICR_OTP_ResetValue (0xFFFFFFFFUL)

/* OTP @Bits 0..31 : OTP word */
  #define UICR_OTP_OTP_Pos (0UL)
  #define UICR_OTP_OTP_Msk (0xFFFFFFFFUL << UICR_OTP_OTP_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                      VDMADESCRIPTOR                                      ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ================================================== Struct VDMADESCRIPTOR ================================================== */
/**
  * @brief Job descriptor for vector-based DMA.
  */
  typedef struct {
    __IOM uint32_t PTR;
    __IOM uint32_t CONFIG;                           /*!< (@ 0x00000004) Job configuration. Configuration of attributes and
                                                                         buffer length.*/
  } NRF_VDMADESCRIPTOR_Type;

/* VDMADESCRIPTOR_PTR: Pointer to data buffer. */
  #define VDMADESCRIPTOR_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Pointer to data buffer. */
  #define VDMADESCRIPTOR_PTR_PTR_Pos (0UL)
  #define VDMADESCRIPTOR_PTR_PTR_Msk (0xFFFFFFFFUL << VDMADESCRIPTOR_PTR_PTR_Pos)


/* VDMADESCRIPTOR_CONFIG: Job configuration. Configuration of attributes and buffer length. */
  #define VDMADESCRIPTOR_CONFIG_ResetValue (0x00000000UL)

/* CNT @Bits 0..23 : Maximum number of bytes in data buffer. */
  #define VDMADESCRIPTOR_CONFIG_CNT_Pos (0UL)
  #define VDMADESCRIPTOR_CONFIG_CNT_Msk (0xFFFFFFUL << VDMADESCRIPTOR_CONFIG_CNT_Pos)

/* ATTRIBUTE @Bits 24..29 : Job attribute. */
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Pos (24UL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Msk (0x3FUL << VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Pos)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Min (0xBUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Max (0xEUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_AarHash (0x0BUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_AarPrand (0x0CUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_AarIrk (0x0DUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_CcmAlen (0x0BUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_CcmMlen (0x0CUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_CcmAdata (0x0DUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_CcmMdata (0x0EUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_EcbData (0x0BUL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            VPR                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* =================================================== Struct VPR_DEBUGIF ==================================================== */
/**
  * @brief DEBUGIF [VPR_DEBUGIF] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[4];
  __IOM uint32_t  DATA0;
  __IOM uint32_t  DATA1;
  __IM  uint32_t  RESERVED1[10];
  __IOM uint32_t  DMCONTROL;
  __IM  uint32_t  DMSTATUS;
  __IOM uint32_t  HARTINFO;
  __IOM uint32_t  HALTSUM1;
  __IOM uint32_t  HAWINDOWSEL;
  __IOM uint32_t  HAWINDOW;
  __IOM uint32_t  ABSTRACTCS;
  __OM  uint32_t  ABSTRACTCMD;
  __IOM uint32_t  ABSTRACTAUTO;
  __IOM uint32_t  CONFSTRPTR[4];
  __IOM uint32_t  NEXTDM;
  __IM  uint32_t  RESERVED2[2];
  __IOM uint32_t  PROGBUF[16];
  __IOM uint32_t  AUTHDATA;
  __IM  uint32_t  RESERVED3[3];
  __IOM uint32_t  HALTSUM2;
  __IOM uint32_t  HALTSUM3;
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  SBADDRESS3;
  __IOM uint32_t  SBCS;
  __IOM uint32_t  SBADDRESS0;
  __IOM uint32_t  SBADDRESS1;
  __IOM uint32_t  SBADDRESS2;
  __IOM uint32_t  SBDATA0;
  __IOM uint32_t  SBDATA1;
  __IOM uint32_t  SBDATA2;
  __IOM uint32_t  SBDATA3;
  __IOM uint32_t  HALTSUM0;
} NRF_VPR_DEBUGIF_Type;

/* VPR_DEBUGIF_DATA0: Abstract Data 0. Read/write data for argument 0 */
  #define VPR_DEBUGIF_DATA0_ResetValue (0x00000000UL)

/* DATA0 @Bits 0..31 : Abstract Data 0 */
  #define VPR_DEBUGIF_DATA0_DATA0_Pos (0UL)
  #define VPR_DEBUGIF_DATA0_DATA0_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_DATA0_DATA0_Pos)


/* VPR_DEBUGIF_DATA1: Abstract Data 1. Read/write data for argument 1 */
  #define VPR_DEBUGIF_DATA1_ResetValue (0x00000000UL)

/* DATA1 @Bits 0..31 : Abstract Data 1 */
  #define VPR_DEBUGIF_DATA1_DATA1_Pos (0UL)
  #define VPR_DEBUGIF_DATA1_DATA1_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_DATA1_DATA1_Pos)


/* VPR_DEBUGIF_DMCONTROL: Debug Module Control */
  #define VPR_DEBUGIF_DMCONTROL_ResetValue (0x00000000UL)

/* DMACTIVE @Bit 0 : Reset signal for the debug module. */
  #define VPR_DEBUGIF_DMCONTROL_DMACTIVE_Pos (0UL)
  #define VPR_DEBUGIF_DMCONTROL_DMACTIVE_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_DMACTIVE_Pos)
  #define VPR_DEBUGIF_DMCONTROL_DMACTIVE_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_DMACTIVE_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_DMACTIVE_Disabled (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_DMACTIVE_Enabled (0x1UL)

/* NDMRESET @Bit 1 : Reset signal output from the debug module to the system. */
  #define VPR_DEBUGIF_DMCONTROL_NDMRESET_Pos (1UL)
  #define VPR_DEBUGIF_DMCONTROL_NDMRESET_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_NDMRESET_Pos)
  #define VPR_DEBUGIF_DMCONTROL_NDMRESET_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_NDMRESET_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_NDMRESET_Inactive (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_NDMRESET_Active (0x1UL)

/* CLRRESETHALTREQ @Bit 2 : Clear the halt on reset request. */
  #define VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_Pos (2UL)
  #define VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_Pos) /*!< Bit mask of
                                                                            CLRRESETHALTREQ field.*/
  #define VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_NoOperation (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_Clear (0x1UL)

/* SETRESETHALTREQ @Bit 3 : Set the halt on reset request. */
  #define VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_Pos (3UL)
  #define VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_Pos) /*!< Bit mask of
                                                                            SETRESETHALTREQ field.*/
  #define VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_NoOperation (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_Clear (0x1UL)

/* HARTSELHI @Bits 6..15 : The high 10 bits of hartsel. */
  #define VPR_DEBUGIF_DMCONTROL_HARTSELHI_Pos (6UL)
  #define VPR_DEBUGIF_DMCONTROL_HARTSELHI_Msk (0x3FFUL << VPR_DEBUGIF_DMCONTROL_HARTSELHI_Pos) /*!< Bit mask of HARTSELHI
                                                                            field.*/

/* HARTSELLO @Bits 16..25 : The low 10 bits of hartsel. */
  #define VPR_DEBUGIF_DMCONTROL_HARTSELLO_Pos (16UL)
  #define VPR_DEBUGIF_DMCONTROL_HARTSELLO_Msk (0x3FFUL << VPR_DEBUGIF_DMCONTROL_HARTSELLO_Pos) /*!< Bit mask of HARTSELLO
                                                                            field.*/

/* HASEL @Bit 26 : Definition of currently selected harts. */
  #define VPR_DEBUGIF_DMCONTROL_HASEL_Pos (26UL)
  #define VPR_DEBUGIF_DMCONTROL_HASEL_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_HASEL_Pos)
  #define VPR_DEBUGIF_DMCONTROL_HASEL_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_HASEL_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_HASEL_Single (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_HASEL_Multiple (0x1UL)

/* ACKHAVERESET @Bit 28 : Clear the havereset. */
  #define VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_Pos (28UL)
  #define VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_Pos) /*!< Bit mask of ACKHAVERESET
                                                                            field.*/
  #define VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_NoOperation (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_Clear (0x1UL)

/* HARTRESET @Bit 29 : Reset harts. */
  #define VPR_DEBUGIF_DMCONTROL_HARTRESET_Pos (29UL)
  #define VPR_DEBUGIF_DMCONTROL_HARTRESET_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_HARTRESET_Pos)
  #define VPR_DEBUGIF_DMCONTROL_HARTRESET_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_HARTRESET_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_HARTRESET_Deasserted (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_HARTRESET_Asserted (0x1UL)

/* RESUMEREQ @Bit 30 : Resume currently selected harts. */
  #define VPR_DEBUGIF_DMCONTROL_RESUMEREQ_Pos (30UL)
  #define VPR_DEBUGIF_DMCONTROL_RESUMEREQ_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_RESUMEREQ_Pos)
  #define VPR_DEBUGIF_DMCONTROL_RESUMEREQ_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_RESUMEREQ_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_RESUMEREQ_NoOperation (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_RESUMEREQ_Resumed (0x1UL)

/* HALTREQ @Bit 31 : Halt currently selected harts. */
  #define VPR_DEBUGIF_DMCONTROL_HALTREQ_Pos (31UL)
  #define VPR_DEBUGIF_DMCONTROL_HALTREQ_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_HALTREQ_Pos)
  #define VPR_DEBUGIF_DMCONTROL_HALTREQ_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_HALTREQ_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_HALTREQ_Clear (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_HALTREQ_Halt (0x1UL)


/* VPR_DEBUGIF_DMSTATUS: Debug Module Status */
  #define VPR_DEBUGIF_DMSTATUS_ResetValue (0x00400082UL)

/* VERSION @Bits 0..3 : Version of the debug module. */
  #define VPR_DEBUGIF_DMSTATUS_VERSION_Pos (0UL)
  #define VPR_DEBUGIF_DMSTATUS_VERSION_Msk (0xFUL << VPR_DEBUGIF_DMSTATUS_VERSION_Pos)
  #define VPR_DEBUGIF_DMSTATUS_VERSION_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_VERSION_Max (0xFUL)
  #define VPR_DEBUGIF_DMSTATUS_VERSION_NotPresent (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_VERSION_V011 (0x1UL)  /*!< There is a Debug Module and it conforms to version 0.11 of this
                                                          specifcation.*/
  #define VPR_DEBUGIF_DMSTATUS_VERSION_V013 (0x2UL)  /*!< There is a Debug Module and it conforms to version 0.13 of this
                                                          specifcation.*/
  #define VPR_DEBUGIF_DMSTATUS_VERSION_NonConform (0xFUL) /*!< There is a Debug Module but it does not conform to any available
                                                               version of the spec.*/

/* CONFSTRPTRVALID @Bit 4 : Configuration string. */
  #define VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_Pos (4UL)
  #define VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_Pos) /*!< Bit mask of
                                                                            CONFSTRPTRVALID field.*/
  #define VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_NotRelevant (0x0UL) /*!< The confstrptr0..confstrptr3 holds information which is
                                                                        not relevant to the configuration string.*/
  #define VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_Address (0x1UL) /*!< The confstrptr0..confstrptr3 holds the address of the
                                                                    configuration string.*/

/* HASRESETHALTREQ @Bit 5 : Halt-on-reset support status. */
  #define VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_Pos (5UL)
  #define VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_Pos) /*!< Bit mask of
                                                                            HASRESETHALTREQ field.*/
  #define VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_Yes (0x1UL)

/* AUTHBUSY @Bit 6 : Authentication busy status. */
  #define VPR_DEBUGIF_DMSTATUS_AUTHBUSY_Pos (6UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHBUSY_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_AUTHBUSY_Pos)
  #define VPR_DEBUGIF_DMSTATUS_AUTHBUSY_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHBUSY_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHBUSY_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHBUSY_Yes (0x1UL)

/* AUTHENTICATED @Bit 7 : Authentication status. */
  #define VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_Pos (7UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_Pos) /*!< Bit mask of
                                                                            AUTHENTICATED field.*/
  #define VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_Yes (0x1UL)

/* ANYHALTED @Bit 8 : Any currently selected harts halted status. */
  #define VPR_DEBUGIF_DMSTATUS_ANYHALTED_Pos (8UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHALTED_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ANYHALTED_Pos)
  #define VPR_DEBUGIF_DMSTATUS_ANYHALTED_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHALTED_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHALTED_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHALTED_Yes (0x1UL)

/* ALLHALTED @Bit 9 : All currently selected harts halted status. */
  #define VPR_DEBUGIF_DMSTATUS_ALLHALTED_Pos (9UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHALTED_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ALLHALTED_Pos)
  #define VPR_DEBUGIF_DMSTATUS_ALLHALTED_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHALTED_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHALTED_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHALTED_Yes (0x1UL)

/* ANYRUNNING @Bit 10 : Any currently selected harts running status. */
  #define VPR_DEBUGIF_DMSTATUS_ANYRUNNING_Pos (10UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRUNNING_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ANYRUNNING_Pos)
  #define VPR_DEBUGIF_DMSTATUS_ANYRUNNING_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRUNNING_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRUNNING_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRUNNING_Yes (0x1UL)

/* ALLRUNNING @Bit 11 : All currently selected harts running status. */
  #define VPR_DEBUGIF_DMSTATUS_ALLRUNNING_Pos (11UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRUNNING_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ALLRUNNING_Pos)
  #define VPR_DEBUGIF_DMSTATUS_ALLRUNNING_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRUNNING_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRUNNING_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRUNNING_Yes (0x1UL)

/* ANYUNAVAIL @Bit 12 : Any currently selected harts unavailable status. */
  #define VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_Pos (12UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_Pos)
  #define VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_Yes (0x1UL)

/* ALLUNAVAIL @Bit 13 : All currently selected harts unavailable status. */
  #define VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_Pos (13UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_Pos)
  #define VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_Yes (0x1UL)

/* ANYNONEXISTENT @Bit 14 : Any currently selected harts nonexistent status. */
  #define VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_Pos (14UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_Pos) /*!< Bit mask of
                                                                            ANYNONEXISTENT field.*/
  #define VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_Yes (0x1UL)

/* ALLNONEXISTENT @Bit 15 : All currently selected harts nonexistent status. */
  #define VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_Pos (15UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_Pos) /*!< Bit mask of
                                                                            ALLNONEXISTENT field.*/
  #define VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_Yes (0x1UL)

/* ANYRESUMEACK @Bit 16 : Any currently selected harts acknowledged last resume request. */
  #define VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_Pos (16UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_Pos) /*!< Bit mask of ANYRESUMEACK
                                                                            field.*/
  #define VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_No (0x0UL) /*!< None of the currently selected harts acknowledged last resume
                                                            request.*/
  #define VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_Yes (0x1UL) /*!< Any of the currently selected harts acknowledged last resume
                                                             request.*/

/* ALLRESUMEACK @Bit 17 : All currently selected harts acknowledged last resume */
  #define VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_Pos (17UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_Pos) /*!< Bit mask of ALLRESUMEACK
                                                                            field.*/
  #define VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_No (0x0UL) /*!< Not all of the currently selected harts acknowledged last resume
                                                            request.*/
  #define VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_Yes (0x1UL) /*!< All of the currently selected harts acknowledged last resume
                                                             request.*/

/* ANYHAVERESET @Bit 18 : Any currently selected harts have been reset and reset is not acknowledged. */
  #define VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_Pos (18UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_Pos) /*!< Bit mask of ANYHAVERESET
                                                                            field.*/
  #define VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_No (0x0UL) /*!< None of the currently selected harts have been reset and reset is
                                                            not acknowledget.*/
  #define VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_Yes (0x1UL) /*!< Any of the currently selected harts have been reset and reset is
                                                             not acknowledge.*/

/* ALLHAVERESET @Bit 19 : All currently selected harts have been reset and reset is not acknowledge */
  #define VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_Pos (19UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_Pos) /*!< Bit mask of ALLHAVERESET
                                                                            field.*/
  #define VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_No (0x0UL) /*!< Not all of the currently selected harts have been reset and reset is
                                                            not acknowledge.*/
  #define VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_Yes (0x1UL) /*!< All of the currently selected harts have been reset and reset is
                                                             not acknowledge.*/

/* IMPEBREAK @Bit 22 : Implicit ebreak instruction at the non-existent word immediately after the Program Buffer. */
  #define VPR_DEBUGIF_DMSTATUS_IMPEBREAK_Pos (22UL)
  #define VPR_DEBUGIF_DMSTATUS_IMPEBREAK_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_IMPEBREAK_Pos)
  #define VPR_DEBUGIF_DMSTATUS_IMPEBREAK_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_IMPEBREAK_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_IMPEBREAK_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_IMPEBREAK_Yes (0x1UL)


/* VPR_DEBUGIF_HARTINFO: Hart Information */
  #define VPR_DEBUGIF_HARTINFO_ResetValue (0x00000000UL)

/* DATAADDR @Bits 0..11 : Data Address */
  #define VPR_DEBUGIF_HARTINFO_DATAADDR_Pos (0UL)
  #define VPR_DEBUGIF_HARTINFO_DATAADDR_Msk (0xFFFUL << VPR_DEBUGIF_HARTINFO_DATAADDR_Pos)
  #define VPR_DEBUGIF_HARTINFO_DATAADDR_Min (0x800UL)
  #define VPR_DEBUGIF_HARTINFO_DATAADDR_Max (0x7FFUL)

/* DATASIZE @Bits 12..15 : Data Size */
  #define VPR_DEBUGIF_HARTINFO_DATASIZE_Pos (12UL)
  #define VPR_DEBUGIF_HARTINFO_DATASIZE_Msk (0xFUL << VPR_DEBUGIF_HARTINFO_DATASIZE_Pos)
  #define VPR_DEBUGIF_HARTINFO_DATASIZE_Min (0x0UL)
  #define VPR_DEBUGIF_HARTINFO_DATASIZE_Max (0xCUL)

/* DATAACCESS @Bit 16 : Data Access */
  #define VPR_DEBUGIF_HARTINFO_DATAACCESS_Pos (16UL)
  #define VPR_DEBUGIF_HARTINFO_DATAACCESS_Msk (0x1UL << VPR_DEBUGIF_HARTINFO_DATAACCESS_Pos)
  #define VPR_DEBUGIF_HARTINFO_DATAACCESS_Min (0x0UL)
  #define VPR_DEBUGIF_HARTINFO_DATAACCESS_Max (0x1UL)
  #define VPR_DEBUGIF_HARTINFO_DATAACCESS_No (0x0UL) /*!< The data registers are shadowed in the hart by CSRs. Each CSR is DXLEN
                                                          bits in size, and corresponds to a single argument.*/
  #define VPR_DEBUGIF_HARTINFO_DATAACCESS_Yes (0x1UL) /*!< The data registers are shadowed in the hart's memory map. Each
                                                           register takes up 4 bytes in the memory map.*/

/* NSCRATCH @Bits 20..23 : Number of dscratch registers */
  #define VPR_DEBUGIF_HARTINFO_NSCRATCH_Pos (20UL)
  #define VPR_DEBUGIF_HARTINFO_NSCRATCH_Msk (0xFUL << VPR_DEBUGIF_HARTINFO_NSCRATCH_Pos)


/* VPR_DEBUGIF_HALTSUM1: Halt Summary 1 */
  #define VPR_DEBUGIF_HALTSUM1_ResetValue (0x00000000UL)

/* HALTSUM1 @Bits 0..31 : Halt Summary 1 */
  #define VPR_DEBUGIF_HALTSUM1_HALTSUM1_Pos (0UL)
  #define VPR_DEBUGIF_HALTSUM1_HALTSUM1_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_HALTSUM1_HALTSUM1_Pos) /*!< Bit mask of HALTSUM1
                                                                            field.*/


/* VPR_DEBUGIF_HAWINDOWSEL: Hart Array Window Select */
  #define VPR_DEBUGIF_HAWINDOWSEL_ResetValue (0x00000000UL)

/* HAWINDOWSEL @Bits 0..14 : The high bits of this field may be tied to 0, depending on how large the array mask register is.
                             E.g. on a system with 48 harts only bit 0 of this field may actually be writable. */

  #define VPR_DEBUGIF_HAWINDOWSEL_HAWINDOWSEL_Pos (0UL)
  #define VPR_DEBUGIF_HAWINDOWSEL_HAWINDOWSEL_Msk (0x7FFFUL << VPR_DEBUGIF_HAWINDOWSEL_HAWINDOWSEL_Pos) /*!< Bit mask of
                                                                            HAWINDOWSEL field.*/


/* VPR_DEBUGIF_HAWINDOW: Hart Array Window */
  #define VPR_DEBUGIF_HAWINDOW_ResetValue (0x00000000UL)

/* MASKDATA @Bits 0..31 : Mask data. */
  #define VPR_DEBUGIF_HAWINDOW_MASKDATA_Pos (0UL)
  #define VPR_DEBUGIF_HAWINDOW_MASKDATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_HAWINDOW_MASKDATA_Pos) /*!< Bit mask of MASKDATA
                                                                            field.*/


/* VPR_DEBUGIF_ABSTRACTCS: Abstract Control and Status */
  #define VPR_DEBUGIF_ABSTRACTCS_ResetValue (0x01000002UL)

/* DATACOUNT @Bits 0..3 : Number of data registers that are implemented as part of the abstract command interface. Valid sizes
                          are 1..12. */

  #define VPR_DEBUGIF_ABSTRACTCS_DATACOUNT_Pos (0UL)
  #define VPR_DEBUGIF_ABSTRACTCS_DATACOUNT_Msk (0xFUL << VPR_DEBUGIF_ABSTRACTCS_DATACOUNT_Pos) /*!< Bit mask of DATACOUNT
                                                                            field.*/

/* CMDERR @Bits 8..10 : Command error when the abstract command fails. */
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Pos (8UL)
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Msk (0x7UL << VPR_DEBUGIF_ABSTRACTCS_CMDERR_Pos)
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Min (0x0UL)
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Max (0x7UL)
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_NoError (0x0UL)
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Busy (0x1UL) /*!< An abstract command was executing while command, abstractcs, or
                                                          abstractauto was written, or when one of the data or progbuf registers
                                                          was read or written. This status is only written if cmderr contains 0*/
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_NotSupported (0x2UL) /*!< The requested command is notsupported, regardless of whether
                                                                  the hart is running or not.*/
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Exception (0x3UL) /*!< An exception occurred while executing the command (e.g. while
                                                               executing theProgram Buffer).*/
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_HaltResume (0x4UL) /*!< The abstract command couldn't execute because the hart wasn't in
                                                                the required state (running/halted). or unavailable.*/
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Bus (0x5UL)  /*!< The abstract command failed due to abus error (e.g. alignment, access
                                                          size, or timeout).*/
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Other (0x7UL)

/* BUSY @Bit 12 : Abstract command execution status. */
  #define VPR_DEBUGIF_ABSTRACTCS_BUSY_Pos (12UL)
  #define VPR_DEBUGIF_ABSTRACTCS_BUSY_Msk (0x1UL << VPR_DEBUGIF_ABSTRACTCS_BUSY_Pos)
  #define VPR_DEBUGIF_ABSTRACTCS_BUSY_Min (0x0UL)
  #define VPR_DEBUGIF_ABSTRACTCS_BUSY_Max (0x1UL)
  #define VPR_DEBUGIF_ABSTRACTCS_BUSY_NotBusy (0x0UL)
  #define VPR_DEBUGIF_ABSTRACTCS_BUSY_Busy (0x1UL)   /*!< An abstract command is currently being executed. This bit is set as
                                                          soon as command is written, and is not cleared until that command has
                                                          completed.*/

/* PROGBUFSIZE @Bits 24..28 : Size of the Program Buffer, in 32-bit words. Valid sizes are 0 - 1. */
  #define VPR_DEBUGIF_ABSTRACTCS_PROGBUFSIZE_Pos (24UL)
  #define VPR_DEBUGIF_ABSTRACTCS_PROGBUFSIZE_Msk (0x1FUL << VPR_DEBUGIF_ABSTRACTCS_PROGBUFSIZE_Pos) /*!< Bit mask of PROGBUFSIZE
                                                                            field.*/


/* VPR_DEBUGIF_ABSTRACTCMD: Abstract command */
  #define VPR_DEBUGIF_ABSTRACTCMD_ResetValue (0x00000000UL)

/* CONTROL @Bits 0..23 : This Field is interpreted in a command specific manner, described for each abstract command. */
  #define VPR_DEBUGIF_ABSTRACTCMD_CONTROL_Pos (0UL)
  #define VPR_DEBUGIF_ABSTRACTCMD_CONTROL_Msk (0xFFFFFFUL << VPR_DEBUGIF_ABSTRACTCMD_CONTROL_Pos) /*!< Bit mask of CONTROL
                                                                            field.*/

/* CMDTYPE @Bits 24..31 : The type determines the overall functionality of this abstract command. */
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_Pos (24UL)
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_Msk (0xFFUL << VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_Pos)
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_Min (0x0UL)
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_Max (0x2UL)
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_REGACCESS (0x00UL)
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_QUICKACCESS (0x01UL)
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_MEMACCESS (0x02UL)


/* VPR_DEBUGIF_ABSTRACTAUTO: Abstract Command Autoexec */
  #define VPR_DEBUGIF_ABSTRACTAUTO_ResetValue (0x00000000UL)

/* AUTOEXECDATA @Bits 0..11 : When a bit in this field is 1, read or write accesses to the corresponding data word cause the
                              command in command to be executed again. */

  #define VPR_DEBUGIF_ABSTRACTAUTO_AUTOEXECDATA_Pos (0UL)
  #define VPR_DEBUGIF_ABSTRACTAUTO_AUTOEXECDATA_Msk (0xFFFUL << VPR_DEBUGIF_ABSTRACTAUTO_AUTOEXECDATA_Pos) /*!< Bit mask of
                                                                            AUTOEXECDATA field.*/

/* AUTOEXECPROGBUF @Bits 16..31 : When a bit in this field is 1, read or write accesses to the corresponding progbuf word cause
                                  the command in command to be executed again. */

  #define VPR_DEBUGIF_ABSTRACTAUTO_AUTOEXECPROGBUF_Pos (16UL)
  #define VPR_DEBUGIF_ABSTRACTAUTO_AUTOEXECPROGBUF_Msk (0xFFFFUL << VPR_DEBUGIF_ABSTRACTAUTO_AUTOEXECPROGBUF_Pos) /*!< Bit mask
                                                                            of AUTOEXECPROGBUF field.*/


/* VPR_DEBUGIF_CONFSTRPTR: Configuration String Pointer [n] */
  #define VPR_DEBUGIF_CONFSTRPTR_MaxCount (4UL)
  #define VPR_DEBUGIF_CONFSTRPTR_MaxIndex (3UL)
  #define VPR_DEBUGIF_CONFSTRPTR_MinIndex (0UL)
  #define VPR_DEBUGIF_CONFSTRPTR_ResetValue (0x00000000UL)

/* ADDR @Bits 0..31 : Address */
  #define VPR_DEBUGIF_CONFSTRPTR_ADDR_Pos (0UL)
  #define VPR_DEBUGIF_CONFSTRPTR_ADDR_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_CONFSTRPTR_ADDR_Pos)


/* VPR_DEBUGIF_NEXTDM: Next Debug Module */
  #define VPR_DEBUGIF_NEXTDM_ResetValue (0x00000000UL)

/* ADDR @Bits 0..31 : Address */
  #define VPR_DEBUGIF_NEXTDM_ADDR_Pos (0UL)
  #define VPR_DEBUGIF_NEXTDM_ADDR_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_NEXTDM_ADDR_Pos)


/* VPR_DEBUGIF_PROGBUF: Program Buffer [n] */
  #define VPR_DEBUGIF_PROGBUF_MaxCount (16UL)
  #define VPR_DEBUGIF_PROGBUF_MaxIndex (15UL)
  #define VPR_DEBUGIF_PROGBUF_MinIndex (0UL)
  #define VPR_DEBUGIF_PROGBUF_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data */
  #define VPR_DEBUGIF_PROGBUF_DATA_Pos (0UL)
  #define VPR_DEBUGIF_PROGBUF_DATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_PROGBUF_DATA_Pos)


/* VPR_DEBUGIF_AUTHDATA: Authentication Data */
  #define VPR_DEBUGIF_AUTHDATA_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data */
  #define VPR_DEBUGIF_AUTHDATA_DATA_Pos (0UL)
  #define VPR_DEBUGIF_AUTHDATA_DATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_AUTHDATA_DATA_Pos)


/* VPR_DEBUGIF_HALTSUM2: Halt Summary 2 */
  #define VPR_DEBUGIF_HALTSUM2_ResetValue (0x00000000UL)

/* HALTSUM2 @Bits 0..31 : Halt Summary 2 */
  #define VPR_DEBUGIF_HALTSUM2_HALTSUM2_Pos (0UL)
  #define VPR_DEBUGIF_HALTSUM2_HALTSUM2_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_HALTSUM2_HALTSUM2_Pos) /*!< Bit mask of HALTSUM2
                                                                            field.*/


/* VPR_DEBUGIF_HALTSUM3: Halt Summary 3 */
  #define VPR_DEBUGIF_HALTSUM3_ResetValue (0x00000000UL)

/* HALTSUM3 @Bits 0..31 : Halt Summary 3 */
  #define VPR_DEBUGIF_HALTSUM3_HALTSUM3_Pos (0UL)
  #define VPR_DEBUGIF_HALTSUM3_HALTSUM3_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_HALTSUM3_HALTSUM3_Pos) /*!< Bit mask of HALTSUM3
                                                                            field.*/


/* VPR_DEBUGIF_SBADDRESS3: System Bus Addres 127:96 */
  #define VPR_DEBUGIF_SBADDRESS3_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Accesses bits 127:96 of the physical address in sbaddress (if the system address bus is that wide). */
  #define VPR_DEBUGIF_SBADDRESS3_ADDRESS_Pos (0UL)
  #define VPR_DEBUGIF_SBADDRESS3_ADDRESS_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBADDRESS3_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/


/* VPR_DEBUGIF_SBCS: System Bus Access Control and Status */
  #define VPR_DEBUGIF_SBCS_ResetValue (0x20000000UL)

/* SBACCESS8 @Bit 0 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBACCESS8_Pos (0UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS8_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBACCESS8_Pos)
  #define VPR_DEBUGIF_SBCS_SBACCESS8_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS8_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS8_sbaccess8 (0x1UL)

/* SBACCESS16 @Bit 1 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBACCESS16_Pos (1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS16_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBACCESS16_Pos)
  #define VPR_DEBUGIF_SBCS_SBACCESS16_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS16_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS16_sbaccess16 (0x1UL)

/* SBACCESS32 @Bit 2 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBACCESS32_Pos (2UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS32_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBACCESS32_Pos)
  #define VPR_DEBUGIF_SBCS_SBACCESS32_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS32_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS32_sbaccess32 (0x1UL)

/* SBACCESS64 @Bit 3 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBACCESS64_Pos (3UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS64_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBACCESS64_Pos)
  #define VPR_DEBUGIF_SBCS_SBACCESS64_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS64_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS64_sbaccess64 (0x1UL)

/* SBACCESS128 @Bit 4 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBACCESS128_Pos (4UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS128_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBACCESS128_Pos)
  #define VPR_DEBUGIF_SBCS_SBACCESS128_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS128_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS128_sbaccess128 (0x1UL)

/* SBASIZE @Bits 5..11 : Width of system bus addresses in bits. (0 indicates there is no bus access support.) */
  #define VPR_DEBUGIF_SBCS_SBASIZE_Pos (5UL)
  #define VPR_DEBUGIF_SBCS_SBASIZE_Msk (0x7FUL << VPR_DEBUGIF_SBCS_SBASIZE_Pos)

/* SBERROR @Bits 12..14 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBERROR_Pos (12UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Msk (0x7UL << VPR_DEBUGIF_SBCS_SBERROR_Pos)
  #define VPR_DEBUGIF_SBCS_SBERROR_Min (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Max (0x7UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Normal (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Timeout (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Address (0x2UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Alignment (0x3UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Size (0x4UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Other (0x7UL)

/* SBREADONDATA @Bit 15 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBREADONDATA_Pos (15UL)
  #define VPR_DEBUGIF_SBCS_SBREADONDATA_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBREADONDATA_Pos)
  #define VPR_DEBUGIF_SBCS_SBREADONDATA_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBREADONDATA_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBREADONDATA_sbreadondata (0x1UL) /*!< Every read from sbdata0 automatically triggers a system bus
                                                                  read at the (possibly autoincremented) address.*/

/* SBAUTOINCREMENT @Bit 16 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBAUTOINCREMENT_Pos (16UL)
  #define VPR_DEBUGIF_SBCS_SBAUTOINCREMENT_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBAUTOINCREMENT_Pos) /*!< Bit mask of SBAUTOINCREMENT
                                                                            field.*/
  #define VPR_DEBUGIF_SBCS_SBAUTOINCREMENT_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBAUTOINCREMENT_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBAUTOINCREMENT_sbautoincrement (0x1UL) /*!< sbaddress is incremented by the access size (in bytes)
                                                                        selected in sbaccess after every system bus access.*/

/* SBACCESS @Bits 17..19 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBACCESS_Pos (17UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_Msk (0x7UL << VPR_DEBUGIF_SBCS_SBACCESS_Pos)
  #define VPR_DEBUGIF_SBCS_SBACCESS_Min (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_Max (0x4UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_size8 (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_size16 (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_size32 (0x2UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_size64 (0x3UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_size128 (0x4UL)

/* SBREADONADDR @Bit 20 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBREADONADDR_Pos (20UL)
  #define VPR_DEBUGIF_SBCS_SBREADONADDR_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBREADONADDR_Pos)
  #define VPR_DEBUGIF_SBCS_SBREADONADDR_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBREADONADDR_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBREADONADDR_sbreadonaddr (0x1UL) /*!< Every write to sbaddress0 automatically triggers a system bus
                                                                  read at the new address.*/

/* SBBUSY @Bit 21 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBBUSY_Pos (21UL)
  #define VPR_DEBUGIF_SBCS_SBBUSY_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBBUSY_Pos)
  #define VPR_DEBUGIF_SBCS_SBBUSY_Min (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBBUSY_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBBUSY_notbusy (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBBUSY_busy (0x1UL)

/* SBBUSYERROR @Bit 22 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBBUSYERROR_Pos (22UL)
  #define VPR_DEBUGIF_SBCS_SBBUSYERROR_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBBUSYERROR_Pos)
  #define VPR_DEBUGIF_SBCS_SBBUSYERROR_Min (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBBUSYERROR_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBBUSYERROR_noerror (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBBUSYERROR_error (0x1UL)

/* SBVERSION @Bits 29..31 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBVERSION_Pos (29UL)
  #define VPR_DEBUGIF_SBCS_SBVERSION_Msk (0x7UL << VPR_DEBUGIF_SBCS_SBVERSION_Pos)
  #define VPR_DEBUGIF_SBCS_SBVERSION_Min (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBVERSION_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBVERSION_version0 (0x0UL) /*!< The System Bus interface conforms to mainline drafts of thia RISC-V
                                                           External Debug Support spec older than 1 January, 2018.*/
  #define VPR_DEBUGIF_SBCS_SBVERSION_version1 (0x1UL) /*!< The System Bus interface conforms to RISC-V External Debug Support
                                                           version 0.14.0-DRAFT. Other values are reserved for future versions.*/


/* VPR_DEBUGIF_SBADDRESS0: System Bus Addres 31:0 */
  #define VPR_DEBUGIF_SBADDRESS0_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Accesses bits 31:0 of the physical address in sbaddress. */
  #define VPR_DEBUGIF_SBADDRESS0_ADDRESS_Pos (0UL)
  #define VPR_DEBUGIF_SBADDRESS0_ADDRESS_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBADDRESS0_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/


/* VPR_DEBUGIF_SBADDRESS1: System Bus Addres 63:32 */
  #define VPR_DEBUGIF_SBADDRESS1_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Accesses bits 63:32 of the physical address in sbaddress (if the system address bus is that wide). */
  #define VPR_DEBUGIF_SBADDRESS1_ADDRESS_Pos (0UL)
  #define VPR_DEBUGIF_SBADDRESS1_ADDRESS_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBADDRESS1_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/


/* VPR_DEBUGIF_SBADDRESS2: System Bus Addres 95:64 */
  #define VPR_DEBUGIF_SBADDRESS2_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Accesses bits 95:64 of the physical address in sbaddress (if the system address bus is that wide). */
  #define VPR_DEBUGIF_SBADDRESS2_ADDRESS_Pos (0UL)
  #define VPR_DEBUGIF_SBADDRESS2_ADDRESS_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBADDRESS2_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/


/* VPR_DEBUGIF_SBDATA0: System Bus Data 31:0 */
  #define VPR_DEBUGIF_SBDATA0_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Accesses bits 31:0 of sbdata */
  #define VPR_DEBUGIF_SBDATA0_DATA_Pos (0UL)
  #define VPR_DEBUGIF_SBDATA0_DATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBDATA0_DATA_Pos)


/* VPR_DEBUGIF_SBDATA1: System Bus Data 63:32 */
  #define VPR_DEBUGIF_SBDATA1_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Accesses bits 63:32 of sbdata (if the system bus is that wide). */
  #define VPR_DEBUGIF_SBDATA1_DATA_Pos (0UL)
  #define VPR_DEBUGIF_SBDATA1_DATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBDATA1_DATA_Pos)


/* VPR_DEBUGIF_SBDATA2: System Bus Data 95:64 */
  #define VPR_DEBUGIF_SBDATA2_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Accesses bits 95:64 of sbdata (if the system bus is that wide). */
  #define VPR_DEBUGIF_SBDATA2_DATA_Pos (0UL)
  #define VPR_DEBUGIF_SBDATA2_DATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBDATA2_DATA_Pos)


/* VPR_DEBUGIF_SBDATA3: System Bus Data 127:96 */
  #define VPR_DEBUGIF_SBDATA3_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Accesses bits 127:96 of sbdata (if the system bus is that wide). */
  #define VPR_DEBUGIF_SBDATA3_DATA_Pos (0UL)
  #define VPR_DEBUGIF_SBDATA3_DATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBDATA3_DATA_Pos)


/* VPR_DEBUGIF_HALTSUM0: Halt summary 0 */
  #define VPR_DEBUGIF_HALTSUM0_ResetValue (0x00000000UL)

/* HALTSUM0 @Bits 0..31 : Halt summary 0 */
  #define VPR_DEBUGIF_HALTSUM0_HALTSUM0_Pos (0UL)
  #define VPR_DEBUGIF_HALTSUM0_HALTSUM0_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_HALTSUM0_HALTSUM0_Pos) /*!< Bit mask of HALTSUM0
                                                                            field.*/


/* ======================================================= Struct VPR ======================================================== */
/**
  * @brief VPR peripheral registers
  */
  typedef struct {
    __OM uint32_t TASKS_TRIGGER[23];
    __IM uint32_t RESERVED[9];
    __IOM uint32_t SUBSCRIBE_TRIGGER[4];
    __IM uint32_t RESERVED1[28];
    __IOM uint32_t EVENTS_TRIGGERED[23];
    __IM uint32_t RESERVED2[9];
    __IOM uint32_t PUBLISH_TRIGGERED[4];
    __IM uint32_t RESERVED3[92];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED4[60];
    __IOM NRF_VPR_DEBUGIF_Type DEBUGIF;
    __IM uint32_t RESERVED5[191];
    __IOM uint32_t CPURUN;
    __IOM uint32_t VPRSTATUS;
    __IOM uint32_t INITPC;
  } NRF_VPR_Type;

/* VPR_TASKS_TRIGGER: VPR task [n] register */
  #define VPR_TASKS_TRIGGER_MaxCount (7UL)
  #define VPR_TASKS_TRIGGER_MaxIndex (22UL)
  #define VPR_TASKS_TRIGGER_MinIndex (16UL)
  #define VPR_TASKS_TRIGGER_ResetValue (0x00000000UL)

/* TASKS_TRIGGER @Bit 0 : VPR task [n] register */
  #define VPR_TASKS_TRIGGER_TASKS_TRIGGER_Pos (0UL)
  #define VPR_TASKS_TRIGGER_TASKS_TRIGGER_Msk (0x1UL << VPR_TASKS_TRIGGER_TASKS_TRIGGER_Pos) /*!< Bit mask of TASKS_TRIGGER
                                                                            field.*/
  #define VPR_TASKS_TRIGGER_TASKS_TRIGGER_Min (0x1UL)
  #define VPR_TASKS_TRIGGER_TASKS_TRIGGER_Max (0x1UL)
  #define VPR_TASKS_TRIGGER_TASKS_TRIGGER_Trigger (0x1UL)


/* VPR_SUBSCRIBE_TRIGGER: Subscribe configuration for task TASKS_TRIGGER[n] */
  #define VPR_SUBSCRIBE_TRIGGER_MaxCount (4UL)
  #define VPR_SUBSCRIBE_TRIGGER_MaxIndex (3UL)
  #define VPR_SUBSCRIBE_TRIGGER_MinIndex (0UL)
  #define VPR_SUBSCRIBE_TRIGGER_ResetValue (0x00000000UL)

/* EN @Bit 31 : Subscription enable bit */
  #define VPR_SUBSCRIBE_TRIGGER_EN_Pos (31UL)
  #define VPR_SUBSCRIBE_TRIGGER_EN_Msk (0x1UL << VPR_SUBSCRIBE_TRIGGER_EN_Pos)
  #define VPR_SUBSCRIBE_TRIGGER_EN_Min (0x0UL)
  #define VPR_SUBSCRIBE_TRIGGER_EN_Max (0x1UL)
  #define VPR_SUBSCRIBE_TRIGGER_EN_Disabled (0x0UL)
  #define VPR_SUBSCRIBE_TRIGGER_EN_Enabled (0x1UL)


/* VPR_EVENTS_TRIGGERED: VPR event [n] register */
  #define VPR_EVENTS_TRIGGERED_MaxCount (7UL)
  #define VPR_EVENTS_TRIGGERED_MaxIndex (22UL)
  #define VPR_EVENTS_TRIGGERED_MinIndex (16UL)
  #define VPR_EVENTS_TRIGGERED_ResetValue (0x00000000UL)

/* EVENTS_TRIGGERED @Bit 0 : VPR event [n] register */
  #define VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos (0UL)
  #define VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Msk (0x1UL << VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos) /*!< Bit mask of
                                                                            EVENTS_TRIGGERED field.*/
  #define VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Min (0x0UL)
  #define VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Max (0x1UL)
  #define VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_NotGenerated (0x0UL)
  #define VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Generated (0x1UL)


/* VPR_PUBLISH_TRIGGERED: Publish configuration for event EVENTS_TRIGGERED[n] */
  #define VPR_PUBLISH_TRIGGERED_MaxCount (4UL)
  #define VPR_PUBLISH_TRIGGERED_MaxIndex (3UL)
  #define VPR_PUBLISH_TRIGGERED_MinIndex (0UL)
  #define VPR_PUBLISH_TRIGGERED_ResetValue (0x00000000UL)

/* EN @Bit 31 : Publication enable bit */
  #define VPR_PUBLISH_TRIGGERED_EN_Pos (31UL)
  #define VPR_PUBLISH_TRIGGERED_EN_Msk (0x1UL << VPR_PUBLISH_TRIGGERED_EN_Pos)
  #define VPR_PUBLISH_TRIGGERED_EN_Min (0x0UL)
  #define VPR_PUBLISH_TRIGGERED_EN_Max (0x1UL)
  #define VPR_PUBLISH_TRIGGERED_EN_Disabled (0x0UL)
  #define VPR_PUBLISH_TRIGGERED_EN_Enabled (0x1UL)


/* VPR_INTEN: Enable or disable interrupt */
  #define VPR_INTEN_ResetValue (0x00000000UL)

/* TRIGGERED16 @Bit 16 : Enable or disable interrupt for event TRIGGERED[16] */
  #define VPR_INTEN_TRIGGERED16_Pos (16UL)
  #define VPR_INTEN_TRIGGERED16_Msk (0x1UL << VPR_INTEN_TRIGGERED16_Pos)
  #define VPR_INTEN_TRIGGERED16_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED16_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED16_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED16_Enabled (0x1UL)

/* TRIGGERED17 @Bit 17 : Enable or disable interrupt for event TRIGGERED[17] */
  #define VPR_INTEN_TRIGGERED17_Pos (17UL)
  #define VPR_INTEN_TRIGGERED17_Msk (0x1UL << VPR_INTEN_TRIGGERED17_Pos)
  #define VPR_INTEN_TRIGGERED17_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED17_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED17_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED17_Enabled (0x1UL)

/* TRIGGERED18 @Bit 18 : Enable or disable interrupt for event TRIGGERED[18] */
  #define VPR_INTEN_TRIGGERED18_Pos (18UL)
  #define VPR_INTEN_TRIGGERED18_Msk (0x1UL << VPR_INTEN_TRIGGERED18_Pos)
  #define VPR_INTEN_TRIGGERED18_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED18_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED18_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED18_Enabled (0x1UL)

/* TRIGGERED19 @Bit 19 : Enable or disable interrupt for event TRIGGERED[19] */
  #define VPR_INTEN_TRIGGERED19_Pos (19UL)
  #define VPR_INTEN_TRIGGERED19_Msk (0x1UL << VPR_INTEN_TRIGGERED19_Pos)
  #define VPR_INTEN_TRIGGERED19_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED19_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED19_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED19_Enabled (0x1UL)

/* TRIGGERED20 @Bit 20 : Enable or disable interrupt for event TRIGGERED[20] */
  #define VPR_INTEN_TRIGGERED20_Pos (20UL)
  #define VPR_INTEN_TRIGGERED20_Msk (0x1UL << VPR_INTEN_TRIGGERED20_Pos)
  #define VPR_INTEN_TRIGGERED20_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED20_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED20_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED20_Enabled (0x1UL)

/* TRIGGERED21 @Bit 21 : Enable or disable interrupt for event TRIGGERED[21] */
  #define VPR_INTEN_TRIGGERED21_Pos (21UL)
  #define VPR_INTEN_TRIGGERED21_Msk (0x1UL << VPR_INTEN_TRIGGERED21_Pos)
  #define VPR_INTEN_TRIGGERED21_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED21_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED21_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED21_Enabled (0x1UL)

/* TRIGGERED22 @Bit 22 : Enable or disable interrupt for event TRIGGERED[22] */
  #define VPR_INTEN_TRIGGERED22_Pos (22UL)
  #define VPR_INTEN_TRIGGERED22_Msk (0x1UL << VPR_INTEN_TRIGGERED22_Pos)
  #define VPR_INTEN_TRIGGERED22_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED22_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED22_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED22_Enabled (0x1UL)


/* VPR_INTENSET: Enable interrupt */
  #define VPR_INTENSET_ResetValue (0x00000000UL)

/* TRIGGERED16 @Bit 16 : Write '1' to enable interrupt for event TRIGGERED[16] */
  #define VPR_INTENSET_TRIGGERED16_Pos (16UL)
  #define VPR_INTENSET_TRIGGERED16_Msk (0x1UL << VPR_INTENSET_TRIGGERED16_Pos)
  #define VPR_INTENSET_TRIGGERED16_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED16_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED16_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED16_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED16_Enabled (0x1UL)

/* TRIGGERED17 @Bit 17 : Write '1' to enable interrupt for event TRIGGERED[17] */
  #define VPR_INTENSET_TRIGGERED17_Pos (17UL)
  #define VPR_INTENSET_TRIGGERED17_Msk (0x1UL << VPR_INTENSET_TRIGGERED17_Pos)
  #define VPR_INTENSET_TRIGGERED17_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED17_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED17_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED17_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED17_Enabled (0x1UL)

/* TRIGGERED18 @Bit 18 : Write '1' to enable interrupt for event TRIGGERED[18] */
  #define VPR_INTENSET_TRIGGERED18_Pos (18UL)
  #define VPR_INTENSET_TRIGGERED18_Msk (0x1UL << VPR_INTENSET_TRIGGERED18_Pos)
  #define VPR_INTENSET_TRIGGERED18_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED18_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED18_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED18_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED18_Enabled (0x1UL)

/* TRIGGERED19 @Bit 19 : Write '1' to enable interrupt for event TRIGGERED[19] */
  #define VPR_INTENSET_TRIGGERED19_Pos (19UL)
  #define VPR_INTENSET_TRIGGERED19_Msk (0x1UL << VPR_INTENSET_TRIGGERED19_Pos)
  #define VPR_INTENSET_TRIGGERED19_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED19_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED19_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED19_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED19_Enabled (0x1UL)

/* TRIGGERED20 @Bit 20 : Write '1' to enable interrupt for event TRIGGERED[20] */
  #define VPR_INTENSET_TRIGGERED20_Pos (20UL)
  #define VPR_INTENSET_TRIGGERED20_Msk (0x1UL << VPR_INTENSET_TRIGGERED20_Pos)
  #define VPR_INTENSET_TRIGGERED20_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED20_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED20_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED20_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED20_Enabled (0x1UL)

/* TRIGGERED21 @Bit 21 : Write '1' to enable interrupt for event TRIGGERED[21] */
  #define VPR_INTENSET_TRIGGERED21_Pos (21UL)
  #define VPR_INTENSET_TRIGGERED21_Msk (0x1UL << VPR_INTENSET_TRIGGERED21_Pos)
  #define VPR_INTENSET_TRIGGERED21_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED21_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED21_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED21_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED21_Enabled (0x1UL)

/* TRIGGERED22 @Bit 22 : Write '1' to enable interrupt for event TRIGGERED[22] */
  #define VPR_INTENSET_TRIGGERED22_Pos (22UL)
  #define VPR_INTENSET_TRIGGERED22_Msk (0x1UL << VPR_INTENSET_TRIGGERED22_Pos)
  #define VPR_INTENSET_TRIGGERED22_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED22_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED22_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED22_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED22_Enabled (0x1UL)


/* VPR_INTENCLR: Disable interrupt */
  #define VPR_INTENCLR_ResetValue (0x00000000UL)

/* TRIGGERED16 @Bit 16 : Write '1' to disable interrupt for event TRIGGERED[16] */
  #define VPR_INTENCLR_TRIGGERED16_Pos (16UL)
  #define VPR_INTENCLR_TRIGGERED16_Msk (0x1UL << VPR_INTENCLR_TRIGGERED16_Pos)
  #define VPR_INTENCLR_TRIGGERED16_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED16_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED16_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED16_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED16_Enabled (0x1UL)

/* TRIGGERED17 @Bit 17 : Write '1' to disable interrupt for event TRIGGERED[17] */
  #define VPR_INTENCLR_TRIGGERED17_Pos (17UL)
  #define VPR_INTENCLR_TRIGGERED17_Msk (0x1UL << VPR_INTENCLR_TRIGGERED17_Pos)
  #define VPR_INTENCLR_TRIGGERED17_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED17_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED17_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED17_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED17_Enabled (0x1UL)

/* TRIGGERED18 @Bit 18 : Write '1' to disable interrupt for event TRIGGERED[18] */
  #define VPR_INTENCLR_TRIGGERED18_Pos (18UL)
  #define VPR_INTENCLR_TRIGGERED18_Msk (0x1UL << VPR_INTENCLR_TRIGGERED18_Pos)
  #define VPR_INTENCLR_TRIGGERED18_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED18_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED18_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED18_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED18_Enabled (0x1UL)

/* TRIGGERED19 @Bit 19 : Write '1' to disable interrupt for event TRIGGERED[19] */
  #define VPR_INTENCLR_TRIGGERED19_Pos (19UL)
  #define VPR_INTENCLR_TRIGGERED19_Msk (0x1UL << VPR_INTENCLR_TRIGGERED19_Pos)
  #define VPR_INTENCLR_TRIGGERED19_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED19_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED19_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED19_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED19_Enabled (0x1UL)

/* TRIGGERED20 @Bit 20 : Write '1' to disable interrupt for event TRIGGERED[20] */
  #define VPR_INTENCLR_TRIGGERED20_Pos (20UL)
  #define VPR_INTENCLR_TRIGGERED20_Msk (0x1UL << VPR_INTENCLR_TRIGGERED20_Pos)
  #define VPR_INTENCLR_TRIGGERED20_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED20_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED20_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED20_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED20_Enabled (0x1UL)

/* TRIGGERED21 @Bit 21 : Write '1' to disable interrupt for event TRIGGERED[21] */
  #define VPR_INTENCLR_TRIGGERED21_Pos (21UL)
  #define VPR_INTENCLR_TRIGGERED21_Msk (0x1UL << VPR_INTENCLR_TRIGGERED21_Pos)
  #define VPR_INTENCLR_TRIGGERED21_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED21_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED21_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED21_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED21_Enabled (0x1UL)

/* TRIGGERED22 @Bit 22 : Write '1' to disable interrupt for event TRIGGERED[22] */
  #define VPR_INTENCLR_TRIGGERED22_Pos (22UL)
  #define VPR_INTENCLR_TRIGGERED22_Msk (0x1UL << VPR_INTENCLR_TRIGGERED22_Pos)
  #define VPR_INTENCLR_TRIGGERED22_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED22_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED22_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED22_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED22_Enabled (0x1UL)


/* VPR_INTPEND: Pending interrupts */
  #define VPR_INTPEND_ResetValue (0x00000000UL)

/* TRIGGERED16 @Bit 16 : Read pending status of interrupt for event TRIGGERED[16] */
  #define VPR_INTPEND_TRIGGERED16_Pos (16UL)
  #define VPR_INTPEND_TRIGGERED16_Msk (0x1UL << VPR_INTPEND_TRIGGERED16_Pos)
  #define VPR_INTPEND_TRIGGERED16_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED16_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED16_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED16_Pending (0x1UL)

/* TRIGGERED17 @Bit 17 : Read pending status of interrupt for event TRIGGERED[17] */
  #define VPR_INTPEND_TRIGGERED17_Pos (17UL)
  #define VPR_INTPEND_TRIGGERED17_Msk (0x1UL << VPR_INTPEND_TRIGGERED17_Pos)
  #define VPR_INTPEND_TRIGGERED17_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED17_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED17_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED17_Pending (0x1UL)

/* TRIGGERED18 @Bit 18 : Read pending status of interrupt for event TRIGGERED[18] */
  #define VPR_INTPEND_TRIGGERED18_Pos (18UL)
  #define VPR_INTPEND_TRIGGERED18_Msk (0x1UL << VPR_INTPEND_TRIGGERED18_Pos)
  #define VPR_INTPEND_TRIGGERED18_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED18_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED18_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED18_Pending (0x1UL)

/* TRIGGERED19 @Bit 19 : Read pending status of interrupt for event TRIGGERED[19] */
  #define VPR_INTPEND_TRIGGERED19_Pos (19UL)
  #define VPR_INTPEND_TRIGGERED19_Msk (0x1UL << VPR_INTPEND_TRIGGERED19_Pos)
  #define VPR_INTPEND_TRIGGERED19_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED19_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED19_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED19_Pending (0x1UL)

/* TRIGGERED20 @Bit 20 : Read pending status of interrupt for event TRIGGERED[20] */
  #define VPR_INTPEND_TRIGGERED20_Pos (20UL)
  #define VPR_INTPEND_TRIGGERED20_Msk (0x1UL << VPR_INTPEND_TRIGGERED20_Pos)
  #define VPR_INTPEND_TRIGGERED20_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED20_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED20_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED20_Pending (0x1UL)

/* TRIGGERED21 @Bit 21 : Read pending status of interrupt for event TRIGGERED[21] */
  #define VPR_INTPEND_TRIGGERED21_Pos (21UL)
  #define VPR_INTPEND_TRIGGERED21_Msk (0x1UL << VPR_INTPEND_TRIGGERED21_Pos)
  #define VPR_INTPEND_TRIGGERED21_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED21_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED21_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED21_Pending (0x1UL)

/* TRIGGERED22 @Bit 22 : Read pending status of interrupt for event TRIGGERED[22] */
  #define VPR_INTPEND_TRIGGERED22_Pos (22UL)
  #define VPR_INTPEND_TRIGGERED22_Msk (0x1UL << VPR_INTPEND_TRIGGERED22_Pos)
  #define VPR_INTPEND_TRIGGERED22_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED22_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED22_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED22_Pending (0x1UL)


/* VPR_CPURUN: State of the CPU after a core reset */
  #define VPR_CPURUN_ResetValue (0x00000000UL)

/* EN @Bit 0 : Controls CPU running state after a core reset. */
  #define VPR_CPURUN_EN_Pos (0UL)
  #define VPR_CPURUN_EN_Msk (0x1UL << VPR_CPURUN_EN_Pos)
  #define VPR_CPURUN_EN_Min (0x0UL)
  #define VPR_CPURUN_EN_Max (0x1UL)
  #define VPR_CPURUN_EN_Stopped (0x0UL)              /*!< CPU stopped. If this is the CPU state after a core reset, setting this
                                                          bit will change the CPU state to CPU running.*/
  #define VPR_CPURUN_EN_Running (0x1UL)              /*!< CPU running. If this is the CPU state after a core reset, clearing
                                                          this bit will change the CPU state to CPU stopped after a core reset.*/


/* VPR_VPRSTATUS: VPR state information. */
  #define VPR_VPRSTATUS_ResetValue (0x00000000UL)

/* CPUSTATUS @Bits 0..3 : (unspecified) */
  #define VPR_VPRSTATUS_CPUSTATUS_Pos (0UL)
  #define VPR_VPRSTATUS_CPUSTATUS_Msk (0xFUL << VPR_VPRSTATUS_CPUSTATUS_Pos)
  #define VPR_VPRSTATUS_CPUSTATUS_Min (0x0UL)
  #define VPR_VPRSTATUS_CPUSTATUS_Max (0xEUL)
  #define VPR_VPRSTATUS_CPUSTATUS_WAITING (0x0UL)
  #define VPR_VPRSTATUS_CPUSTATUS_RUNNING (0x1UL)
  #define VPR_VPRSTATUS_CPUSTATUS_SLEEPING (0x2UL)
  #define VPR_VPRSTATUS_CPUSTATUS_INTERRUPT (0x3UL)
  #define VPR_VPRSTATUS_CPUSTATUS_EXCEPTION_TRAP (0x4UL)
  #define VPR_VPRSTATUS_CPUSTATUS_ONGOING_RESET (0x5UL)
  #define VPR_VPRSTATUS_CPUSTATUS_HALTED (0x6UL)
  #define VPR_VPRSTATUS_CPUSTATUS_ERROR (0xEUL)

/* RTPENABLED @Bit 4 : Mirrors the ENABLERTPERIPH bit in the NORDIC.VPRNORDICCTRL CSR */
  #define VPR_VPRSTATUS_RTPENABLED_Pos (4UL)
  #define VPR_VPRSTATUS_RTPENABLED_Msk (0x1UL << VPR_VPRSTATUS_RTPENABLED_Pos)
  #define VPR_VPRSTATUS_RTPENABLED_Min (0x0UL)
  #define VPR_VPRSTATUS_RTPENABLED_Max (0x1UL)
  #define VPR_VPRSTATUS_RTPENABLED_Disabled (0x0UL)
  #define VPR_VPRSTATUS_RTPENABLED_Enabled (0x1UL)

/* RTPSTALL @Bit 5 : Stalled waiting for real-time peripheral blocking CSR access, for example WAIT, OUTB with dirty status */
  #define VPR_VPRSTATUS_RTPSTALL_Pos (5UL)
  #define VPR_VPRSTATUS_RTPSTALL_Msk (0x1UL << VPR_VPRSTATUS_RTPSTALL_Pos)


/* VPR_INITPC: Initial value of the PC at CPU start. */
  #define VPR_INITPC_ResetValue (0x00000000UL)

/* INITPC @Bits 0..31 : Initial value of the PC at CPU start. */
  #define VPR_INITPC_INITPC_Pos (0UL)
  #define VPR_INITPC_INITPC_Msk (0xFFFFFFFFUL << VPR_INITPC_INITPC_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          VPRCSR                                          ================ */
/* =========================================================================================================================== */

/**
  * @brief VPR CSR registers
  */
/**
  * @brief  [VPRCSR] (unspecified)
  */

/**
  * @brief  [VPRCSR] (unspecified)
  */

/**
  * @brief MSTATUS [VPRCSR_MSTATUS] Machine Status
  */
  #define VPRCSR_MSTATUS (0x00000300ul)
  #define VPRCSR_MSTATUS_ResetValue (0x00001800UL)

/* MIE @Bit 3 : global interrupt enable for machine privilege mode */
  #define VPRCSR_MSTATUS_MIE_Pos (3UL)
  #define VPRCSR_MSTATUS_MIE_Msk (0x1UL << VPRCSR_MSTATUS_MIE_Pos)
  #define VPRCSR_MSTATUS_MIE_Min (0x0UL)
  #define VPRCSR_MSTATUS_MIE_Max (0x1UL)
  #define VPRCSR_MSTATUS_MIE_Disabled (0x0UL)
  #define VPRCSR_MSTATUS_MIE_Enabled (0x1UL)

/* MPIE @Bit 7 : Exists to support nested traps. Value of the interrupt-enable bit active prior to the trap for machine
                 privilege mode */

  #define VPRCSR_MSTATUS_MPIE_Pos (7UL)
  #define VPRCSR_MSTATUS_MPIE_Msk (0x1UL << VPRCSR_MSTATUS_MPIE_Pos)
  #define VPRCSR_MSTATUS_MPIE_Min (0x0UL)
  #define VPRCSR_MSTATUS_MPIE_Max (0x1UL)
  #define VPRCSR_MSTATUS_MPIE_Disabled (0x0UL)
  #define VPRCSR_MSTATUS_MPIE_Enabled (0x1UL)

/* MPP @Bits 11..12 : Exists to support nested traps. Value of the privlege mode prior to the trap for machine privilege mode */
  #define VPRCSR_MSTATUS_MPP_Pos (11UL)
  #define VPRCSR_MSTATUS_MPP_Msk (0x3UL << VPRCSR_MSTATUS_MPP_Pos)


/**
  * @brief MISA [VPRCSR_MISA] Machine ISA
  */
  #define VPRCSR_MISA (0x00000301ul)
  #define VPRCSR_MISA_ResetValue (0x40001016UL)

/* A @Bit 0 : Atomic extension */
  #define VPRCSR_MISA_A_Pos (0UL)
  #define VPRCSR_MISA_A_Msk (0x1UL << VPRCSR_MISA_A_Pos)
  #define VPRCSR_MISA_A_Min (0x0UL)
  #define VPRCSR_MISA_A_Max (0x1UL)
  #define VPRCSR_MISA_A_Disabled (0x0UL)
  #define VPRCSR_MISA_A_Enabled (0x1UL)

/* B @Bit 1 : Bit-Manipulation extension */
  #define VPRCSR_MISA_B_Pos (1UL)
  #define VPRCSR_MISA_B_Msk (0x1UL << VPRCSR_MISA_B_Pos)
  #define VPRCSR_MISA_B_Min (0x0UL)
  #define VPRCSR_MISA_B_Max (0x1UL)
  #define VPRCSR_MISA_B_Disabled (0x0UL)
  #define VPRCSR_MISA_B_Enabled (0x1UL)

/* C @Bit 2 : Compressed extension */
  #define VPRCSR_MISA_C_Pos (2UL)
  #define VPRCSR_MISA_C_Msk (0x1UL << VPRCSR_MISA_C_Pos)
  #define VPRCSR_MISA_C_Min (0x0UL)
  #define VPRCSR_MISA_C_Max (0x1UL)
  #define VPRCSR_MISA_C_Disabled (0x0UL)
  #define VPRCSR_MISA_C_Enabled (0x1UL)

/* E @Bit 4 : RV32E base ISA */
  #define VPRCSR_MISA_E_Pos (4UL)
  #define VPRCSR_MISA_E_Msk (0x1UL << VPRCSR_MISA_E_Pos)
  #define VPRCSR_MISA_E_Min (0x0UL)
  #define VPRCSR_MISA_E_Max (0x1UL)
  #define VPRCSR_MISA_E_Disabled (0x0UL)
  #define VPRCSR_MISA_E_Enabled (0x1UL)

/* I @Bit 8 : RV32I/64I/128I base ISA */
  #define VPRCSR_MISA_I_Pos (8UL)
  #define VPRCSR_MISA_I_Msk (0x1UL << VPRCSR_MISA_I_Pos)
  #define VPRCSR_MISA_I_Min (0x0UL)
  #define VPRCSR_MISA_I_Max (0x1UL)
  #define VPRCSR_MISA_I_Disabled (0x0UL)
  #define VPRCSR_MISA_I_Enabled (0x1UL)

/* M @Bit 12 : Integer Multiply/Divide extension */
  #define VPRCSR_MISA_M_Pos (12UL)
  #define VPRCSR_MISA_M_Msk (0x1UL << VPRCSR_MISA_M_Pos)
  #define VPRCSR_MISA_M_Min (0x0UL)
  #define VPRCSR_MISA_M_Max (0x1UL)
  #define VPRCSR_MISA_M_Disabled (0x0UL)
  #define VPRCSR_MISA_M_Enabled (0x1UL)

/* N @Bit 13 : User-level interrupts supported */
  #define VPRCSR_MISA_N_Pos (13UL)
  #define VPRCSR_MISA_N_Msk (0x1UL << VPRCSR_MISA_N_Pos)
  #define VPRCSR_MISA_N_Min (0x0UL)
  #define VPRCSR_MISA_N_Max (0x1UL)
  #define VPRCSR_MISA_N_Disabled (0x0UL)
  #define VPRCSR_MISA_N_Enabled (0x1UL)

/* MXL @Bits 30..31 : Machine XLEN */
  #define VPRCSR_MISA_MXL_Pos (30UL)
  #define VPRCSR_MISA_MXL_Msk (0x3UL << VPRCSR_MISA_MXL_Pos)
  #define VPRCSR_MISA_MXL_Min (0x1UL)
  #define VPRCSR_MISA_MXL_Max (0x3UL)
  #define VPRCSR_MISA_MXL_XLEN32 (0x1UL)
  #define VPRCSR_MISA_MXL_XLEN64 (0x2UL)
  #define VPRCSR_MISA_MXL_XLEN128 (0x3UL)


/**
  * @brief MTVEC [VPRCSR_MTVEC] Machine Trap-Vector
  */
  #define VPRCSR_MTVEC (0x00000305ul)
  #define VPRCSR_MTVEC_ResetValue (0x00000003UL)

/* MODE @Bits 0..1 : Mode */
  #define VPRCSR_MTVEC_MODE_Pos (0UL)
  #define VPRCSR_MTVEC_MODE_Msk (0x3UL << VPRCSR_MTVEC_MODE_Pos)
  #define VPRCSR_MTVEC_MODE_Min (0x3UL)
  #define VPRCSR_MTVEC_MODE_Max (0x3UL)
  #define VPRCSR_MTVEC_MODE_CLIC (0x3UL)

/* BASE @Bits 2..31 : Vector base address */
  #define VPRCSR_MTVEC_BASE_Pos (2UL)
  #define VPRCSR_MTVEC_BASE_Msk (0x3FFFFFFFUL << VPRCSR_MTVEC_BASE_Pos)


/**
  * @brief MTVT [VPRCSR_MTVT] Machine Trap Vector Table
  */
  #define VPRCSR_MTVT (0x00000307ul)
  #define VPRCSR_MTVT_ResetValue (0x00000000UL)

/* VAL @Bits 6..31 : Machine Trap Vector Table base address value for CLIC vectored interrupts */
  #define VPRCSR_MTVT_VAL_Pos (6UL)
  #define VPRCSR_MTVT_VAL_Msk (0x3FFFFFFUL << VPRCSR_MTVT_VAL_Pos)


/**
  * @brief MCOUNTINHIBIT [VPRCSR_MCOUNTINHIBIT] Machine Counter-Inhibit
  */
  #define VPRCSR_MCOUNTINHIBIT (0x00000320ul)
  #define VPRCSR_MCOUNTINHIBIT_ResetValue (0x00000005UL)

/* CY @Bit 0 : (unspecified) */
  #define VPRCSR_MCOUNTINHIBIT_CY_Pos (0UL)
  #define VPRCSR_MCOUNTINHIBIT_CY_Msk (0x1UL << VPRCSR_MCOUNTINHIBIT_CY_Pos)
  #define VPRCSR_MCOUNTINHIBIT_CY_Min (0x0UL)
  #define VPRCSR_MCOUNTINHIBIT_CY_Max (0x1UL)
  #define VPRCSR_MCOUNTINHIBIT_CY_INCREMENT (0x0UL)
  #define VPRCSR_MCOUNTINHIBIT_CY_INHIBIT (0x1UL)

/* IR @Bit 2 : (unspecified) */
  #define VPRCSR_MCOUNTINHIBIT_IR_Pos (2UL)
  #define VPRCSR_MCOUNTINHIBIT_IR_Msk (0x1UL << VPRCSR_MCOUNTINHIBIT_IR_Pos)
  #define VPRCSR_MCOUNTINHIBIT_IR_Min (0x0UL)
  #define VPRCSR_MCOUNTINHIBIT_IR_Max (0x1UL)
  #define VPRCSR_MCOUNTINHIBIT_IR_INCREMENT (0x0UL)
  #define VPRCSR_MCOUNTINHIBIT_IR_INHIBIT (0x1UL)


/**
  * @brief MSCRATCH [VPRCSR_MSCRATCH] Machine Scratch
  */
  #define VPRCSR_MSCRATCH (0x00000340ul)
  #define VPRCSR_MSCRATCH_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Scratch value */
  #define VPRCSR_MSCRATCH_VAL_Pos (0UL)
  #define VPRCSR_MSCRATCH_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MSCRATCH_VAL_Pos)


/**
  * @brief MEPC [VPRCSR_MEPC] Machine Exception Program Counter
  */
  #define VPRCSR_MEPC (0x00000341ul)
  #define VPRCSR_MEPC_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Exception Program Counter value */
  #define VPRCSR_MEPC_VAL_Pos (0UL)
  #define VPRCSR_MEPC_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MEPC_VAL_Pos)


/**
  * @brief MCAUSE [VPRCSR_MCAUSE] Machine Cause
  */
  #define VPRCSR_MCAUSE (0x00000342ul)
  #define VPRCSR_MCAUSE_ResetValue (0x30000000UL)

/* EXCEPTIONCODE @Bits 0..11 : Exception code */
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_Pos (0UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_Msk (0xFFFUL << VPRCSR_MCAUSE_EXCEPTIONCODE_Pos)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_Min (0x0UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_Max (0x1FUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_INSTADDRMISALIGN (0x000UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_INSTACCESSFAULT (0x001UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_ILLEGALINST (0x002UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_BKPT (0x003UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_LOADADDRMISALIGN (0x004UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_LOADACCESSFAULT (0x005UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_STOREADDRMISALIGN (0x006UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_STOREACCESSFAULT (0x007UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_ECALLMMODE (0x00BUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_MISALIGNSTACKING (0x018UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_BUSFAULTSTACKING (0x019UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_INTVECTORFAULT (0x01AUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_MISALIGNUNSTACKING (0x01BUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_BUSFAULTUNSTACKING (0x01CUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_STORETIMEOUTFAULT (0x01DUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_LOADTIMEOUTFAULT (0x01EUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_STACKINGEXCFAULT (0x01FUL)

/* MPIL @Bits 16..23 : Previous interrupt level */
  #define VPRCSR_MCAUSE_MPIL_Pos (16UL)
  #define VPRCSR_MCAUSE_MPIL_Msk (0xFFUL << VPRCSR_MCAUSE_MPIL_Pos)

/* MPIE @Bit 27 : Previous interrupt enable, same as MSTATUS.MPIE */
  #define VPRCSR_MCAUSE_MPIE_Pos (27UL)
  #define VPRCSR_MCAUSE_MPIE_Msk (0x1UL << VPRCSR_MCAUSE_MPIE_Pos)

/* MPP @Bits 28..29 : Previous privilege mode, same as MSTATUS.MPP */
  #define VPRCSR_MCAUSE_MPP_Pos (28UL)
  #define VPRCSR_MCAUSE_MPP_Msk (0x3UL << VPRCSR_MCAUSE_MPP_Pos)

/* MINHV @Bit 30 : In hardware vectoring */
  #define VPRCSR_MCAUSE_MINHV_Pos (30UL)
  #define VPRCSR_MCAUSE_MINHV_Msk (0x1UL << VPRCSR_MCAUSE_MINHV_Pos)

/* INTERRUPT @Bit 31 : Interrupt bit */
  #define VPRCSR_MCAUSE_INTERRUPT_Pos (31UL)
  #define VPRCSR_MCAUSE_INTERRUPT_Msk (0x1UL << VPRCSR_MCAUSE_INTERRUPT_Pos)
  #define VPRCSR_MCAUSE_INTERRUPT_Min (0x0UL)
  #define VPRCSR_MCAUSE_INTERRUPT_Max (0x1UL)
  #define VPRCSR_MCAUSE_INTERRUPT_EXCEPTION (0x0UL)
  #define VPRCSR_MCAUSE_INTERRUPT_INTERRUPT (0x1UL)


/**
  * @brief MTVAL [VPRCSR_MTVAL] Machine Trap Value
  */
  #define VPRCSR_MTVAL (0x00000343ul)
  #define VPRCSR_MTVAL_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Trap Value */
  #define VPRCSR_MTVAL_VAL_Pos (0UL)
  #define VPRCSR_MTVAL_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MTVAL_VAL_Pos)


/**
  * @brief MINTSTATUS [VPRCSR_MINTSTATUS] M-mode Interrupt Status
  */
  #define VPRCSR_MINTSTATUS (0x00000346ul)
  #define VPRCSR_MINTSTATUS_ResetValue (0x00000000UL)

/* MIL @Bits 24..31 : M-Mode interrupt level */
  #define VPRCSR_MINTSTATUS_MIL_Pos (24UL)
  #define VPRCSR_MINTSTATUS_MIL_Msk (0xFFUL << VPRCSR_MINTSTATUS_MIL_Pos)


/**
  * @brief MINTTHRESH [VPRCSR_MINTTHRESH] M-mode Interrupt-level Threshold
  */
  #define VPRCSR_MINTTHRESH (0x00000347ul)
  #define VPRCSR_MINTTHRESH_ResetValue (0x00000000UL)

/* TH @Bits 0..7 : M-Mode Interrupt-level Threshold */
  #define VPRCSR_MINTTHRESH_TH_Pos (0UL)
  #define VPRCSR_MINTTHRESH_TH_Msk (0xFFUL << VPRCSR_MINTTHRESH_TH_Pos)
  #define VPRCSR_MINTTHRESH_TH_Min (0x0UL)
  #define VPRCSR_MINTTHRESH_TH_Max (0xFFUL)
  #define VPRCSR_MINTTHRESH_TH_DISABLED (0x00UL)
  #define VPRCSR_MINTTHRESH_TH_THRESHLEVEL0 (0x3FUL)
  #define VPRCSR_MINTTHRESH_TH_THRESHLEVEL1 (0x7FUL)
  #define VPRCSR_MINTTHRESH_TH_THRESHLEVEL2 (0xBFUL)
  #define VPRCSR_MINTTHRESH_TH_THRESHLEVEL3 (0xFFUL)


/**
  * @brief MCLICBASE [VPRCSR_MCLICBASE] Machine CLIC Base
  */
  #define VPRCSR_MCLICBASE (0x00000350ul)
  #define VPRCSR_MCLICBASE_ResetValue (0xF0000000UL)

/* VAL @Bits 0..31 : CLIC base address value */
  #define VPRCSR_MCLICBASE_VAL_Pos (0UL)
  #define VPRCSR_MCLICBASE_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MCLICBASE_VAL_Pos)


/**
  * @brief TSELECT [VPRCSR_TSELECT] Trigger Select
  */
  #define VPRCSR_TSELECT (0x000007A0ul)
  #define VPRCSR_TSELECT_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Trigger Select value */
  #define VPRCSR_TSELECT_VAL_Pos (0UL)
  #define VPRCSR_TSELECT_VAL_Msk (0xFFFFFFFFUL << VPRCSR_TSELECT_VAL_Pos)


/**
  * @brief TDATA1 [VPRCSR_TDATA1] Trigger Data 1
  */
  #define VPRCSR_TDATA1 (0x000007A1ul)
  #define VPRCSR_TDATA1_ResetValue (0x00000000UL)

/* DATA @Bits 0..26 : Trigger Specific Data */
  #define VPRCSR_TDATA1_DATA_Pos (0UL)
  #define VPRCSR_TDATA1_DATA_Msk (0x7FFFFFFUL << VPRCSR_TDATA1_DATA_Pos)

/* DMODE @Bit 27 : Debug Mode */
  #define VPRCSR_TDATA1_DMODE_Pos (27UL)
  #define VPRCSR_TDATA1_DMODE_Msk (0x1UL << VPRCSR_TDATA1_DMODE_Pos)
  #define VPRCSR_TDATA1_DMODE_Min (0x0UL)
  #define VPRCSR_TDATA1_DMODE_Max (0x1UL)
  #define VPRCSR_TDATA1_DMODE_BOTH (0x0UL)           /*!< Both Debug and M-mode can write the tdata registers at the selected
                                                          tselect.*/
  #define VPRCSR_TDATA1_DMODE_ONLYDEBUG (0x1UL)      /*!< Only Debug Mode can write the tdata registers at the selected tselect.
                                                          Writes from other modes are ignored.*/

/* TYPE @Bits 28..31 : Type */
  #define VPRCSR_TDATA1_TYPE_Pos (28UL)
  #define VPRCSR_TDATA1_TYPE_Msk (0xFUL << VPRCSR_TDATA1_TYPE_Pos)
  #define VPRCSR_TDATA1_TYPE_Min (0x0UL)
  #define VPRCSR_TDATA1_TYPE_Max (0xFUL)
  #define VPRCSR_TDATA1_TYPE_NOTRIGGER (0x0UL)
  #define VPRCSR_TDATA1_TYPE_MATCH (0x2UL)           /*!< The trigger is an address match trigger. The remaining bits in this
                                                          register act as described in mcontrol*/
  #define VPRCSR_TDATA1_TYPE_REMAP (0xFUL)           /*!< This trigger is a remapping trigger. The remaining bits in this
                                                          register behave as described in remapping functionality*/


/**
  * @brief TDATA2 [VPRCSR_TDATA2] Trigger Data 2
  */
  #define VPRCSR_TDATA2 (0x000007A2ul)
  #define VPRCSR_TDATA2_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Trigger Specific Data */
  #define VPRCSR_TDATA2_DATA_Pos (0UL)
  #define VPRCSR_TDATA2_DATA_Msk (0xFFFFFFFFUL << VPRCSR_TDATA2_DATA_Pos)


/**
  * @brief TDATA3 [VPRCSR_TDATA3] Trigger Data 3
  */
  #define VPRCSR_TDATA3 (0x000007A3ul)
  #define VPRCSR_TDATA3_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Trigger Specific Data */
  #define VPRCSR_TDATA3_DATA_Pos (0UL)
  #define VPRCSR_TDATA3_DATA_Msk (0xFFFFFFFFUL << VPRCSR_TDATA3_DATA_Pos)


/**
  * @brief TINFO [VPRCSR_TINFO] Trigger Info
  */
  #define VPRCSR_TINFO (0x000007A4ul)
  #define VPRCSR_TINFO_ResetValue (0x00000000UL)

/* INFO @Bits 0..15 : Trigger Info value */
  #define VPRCSR_TINFO_INFO_Pos (0UL)
  #define VPRCSR_TINFO_INFO_Msk (0xFFFFUL << VPRCSR_TINFO_INFO_Pos)


/**
  * @brief TCONTROL [VPRCSR_TCONTROL] Trigger Control
  */
  #define VPRCSR_TCONTROL (0x000007A5ul)
  #define VPRCSR_TCONTROL_ResetValue (0x00000000UL)

/* MTE @Bit 3 : Mode Trigger Enable */
  #define VPRCSR_TCONTROL_MTE_Pos (3UL)
  #define VPRCSR_TCONTROL_MTE_Msk (0x1UL << VPRCSR_TCONTROL_MTE_Pos)
  #define VPRCSR_TCONTROL_MTE_Min (0x0UL)
  #define VPRCSR_TCONTROL_MTE_Max (0x1UL)
  #define VPRCSR_TCONTROL_MTE_DONTMATCH (0x0UL)
  #define VPRCSR_TCONTROL_MTE_MATCH (0x1UL)          /*!< Triggers do match/fire while the hart is in M-mode. When a trap into
                                                          M-mode is taken, mte is set to 0. When mret is executed, mte is set to
                                                          the value of mpte*/

/* MPTE @Bit 7 : Mode Previous Trigger Enable */
  #define VPRCSR_TCONTROL_MPTE_Pos (7UL)
  #define VPRCSR_TCONTROL_MPTE_Msk (0x1UL << VPRCSR_TCONTROL_MPTE_Pos)


/**
  * @brief DCSR [VPRCSR_DCSR] Debug Control and Status
  */
  #define VPRCSR_DCSR (0x000007B0ul)
  #define VPRCSR_DCSR_ResetValue (0x40000003UL)

/* PRV @Bits 0..1 : Privilege level */
  #define VPRCSR_DCSR_PRV_Pos (0UL)
  #define VPRCSR_DCSR_PRV_Msk (0x3UL << VPRCSR_DCSR_PRV_Pos)
  #define VPRCSR_DCSR_PRV_Min (0x3UL)
  #define VPRCSR_DCSR_PRV_Max (0x3UL)
  #define VPRCSR_DCSR_PRV_MACHINE (0x3UL)

/* STEP @Bit 2 : Step */
  #define VPRCSR_DCSR_STEP_Pos (2UL)
  #define VPRCSR_DCSR_STEP_Msk (0x1UL << VPRCSR_DCSR_STEP_Pos)

/* CAUSE @Bits 6..8 : Debug Mode enter cause */
  #define VPRCSR_DCSR_CAUSE_Pos (6UL)
  #define VPRCSR_DCSR_CAUSE_Msk (0x7UL << VPRCSR_DCSR_CAUSE_Pos)
  #define VPRCSR_DCSR_CAUSE_Min (0x1UL)
  #define VPRCSR_DCSR_CAUSE_Max (0x5UL)
  #define VPRCSR_DCSR_CAUSE_EBREAK (0x1UL)
  #define VPRCSR_DCSR_CAUSE_TRIGGER (0x2UL)          /*!< The Trigger Module caused a breakpoint exception. (priority 4,
                                                          highest)*/
  #define VPRCSR_DCSR_CAUSE_HALTREQ (0x3UL)          /*!< The debugger requested entry to Debug Mode using haltreq. (priority
                                                          1)*/
  #define VPRCSR_DCSR_CAUSE_STEP (0x4UL)
  #define VPRCSR_DCSR_CAUSE_RESETHALTREQ (0x5UL)     /*!< The hart halted directly out of reset due to resethaltreq. It is also
                                                          acceptable to report 3 when this happens. (priority 2)*/

/* STEPIE @Bit 11 : Step Interrupt Enable */
  #define VPRCSR_DCSR_STEPIE_Pos (11UL)
  #define VPRCSR_DCSR_STEPIE_Msk (0x1UL << VPRCSR_DCSR_STEPIE_Pos)
  #define VPRCSR_DCSR_STEPIE_Min (0x0UL)
  #define VPRCSR_DCSR_STEPIE_Max (0x1UL)
  #define VPRCSR_DCSR_STEPIE_Disabled (0x0UL)
  #define VPRCSR_DCSR_STEPIE_Enabled (0x1UL)         /*!< Interrupts are enabled during single stepping. Implementations may
                                                          hard wire this bit to 0. In that case interrupt behavior can be
                                                          emulated by the debugger.*/

/* EBREAKM @Bit 15 : M-mode ebreak */
  #define VPRCSR_DCSR_EBREAKM_Pos (15UL)
  #define VPRCSR_DCSR_EBREAKM_Msk (0x1UL << VPRCSR_DCSR_EBREAKM_Pos)
  #define VPRCSR_DCSR_EBREAKM_Min (0x0UL)
  #define VPRCSR_DCSR_EBREAKM_Max (0x1UL)
  #define VPRCSR_DCSR_EBREAKM_SPEC (0x0UL)           /*!< ebreak instructions in M-mode behave as described in the Privileged
                                                          Spe*/
  #define VPRCSR_DCSR_EBREAKM_ENTERDBG (0x1UL)

/* XDEBUGVER @Bits 28..31 : External Debug version */
  #define VPRCSR_DCSR_XDEBUGVER_Pos (28UL)
  #define VPRCSR_DCSR_XDEBUGVER_Msk (0xFUL << VPRCSR_DCSR_XDEBUGVER_Pos)
  #define VPRCSR_DCSR_XDEBUGVER_Min (0x4UL)
  #define VPRCSR_DCSR_XDEBUGVER_Max (0x4UL)
  #define VPRCSR_DCSR_XDEBUGVER_STDDBG (0x4UL)


/**
  * @brief DPC [VPRCSR_DPC] Debug PC
  */
  #define VPRCSR_DPC (0x000007B1ul)
  #define VPRCSR_DPC_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Debug PC value */
  #define VPRCSR_DPC_VAL_Pos (0UL)
  #define VPRCSR_DPC_VAL_Msk (0xFFFFFFFFUL << VPRCSR_DPC_VAL_Pos)


/**
  * @brief MCYCLE [VPRCSR_MCYCLE] Machine Cycle Counter
  */
  #define VPRCSR_MCYCLE (0x00000B00ul)
  #define VPRCSR_MCYCLE_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Cycle Counter value */
  #define VPRCSR_MCYCLE_VAL_Pos (0UL)
  #define VPRCSR_MCYCLE_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MCYCLE_VAL_Pos)


/**
  * @brief MINSTRET [VPRCSR_MINSTRET] Machine Instruction Counter
  */
  #define VPRCSR_MINSTRET (0x00000B02ul)
  #define VPRCSR_MINSTRET_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Instruction Counter value */
  #define VPRCSR_MINSTRET_VAL_Pos (0UL)
  #define VPRCSR_MINSTRET_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MINSTRET_VAL_Pos)


/**
  * @brief MCYCLEH [VPRCSR_MCYCLEH] Machine Cycle Counter (Upper part)
  */
  #define VPRCSR_MCYCLEH (0x00000B80ul)
  #define VPRCSR_MCYCLEH_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Cycle Counter value */
  #define VPRCSR_MCYCLEH_VAL_Pos (0UL)
  #define VPRCSR_MCYCLEH_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MCYCLEH_VAL_Pos)


/**
  * @brief MINSTRETH [VPRCSR_MINSTRETH] Machine Instruction Counter (Upper part)
  */
  #define VPRCSR_MINSTRETH (0x00000B82ul)
  #define VPRCSR_MINSTRETH_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Instruction Counter (Upper part) value */
  #define VPRCSR_MINSTRETH_VAL_Pos (0UL)
  #define VPRCSR_MINSTRETH_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MINSTRETH_VAL_Pos)


/**
  * @brief UCYCLE [VPRCSR_UCYCLE] User Cycle Counter
  */
  #define VPRCSR_UCYCLE (0x00000C00ul)
  #define VPRCSR_UCYCLE_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : User Cycle Counter value */
  #define VPRCSR_UCYCLE_VAL_Pos (0UL)
  #define VPRCSR_UCYCLE_VAL_Msk (0xFFFFFFFFUL << VPRCSR_UCYCLE_VAL_Pos)


/**
  * @brief UINSTRET [VPRCSR_UINSTRET] User Instruction Counter
  */
  #define VPRCSR_UINSTRET (0x00000C02ul)
  #define VPRCSR_UINSTRET_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : User Instruction Counter value */
  #define VPRCSR_UINSTRET_VAL_Pos (0UL)
  #define VPRCSR_UINSTRET_VAL_Msk (0xFFFFFFFFUL << VPRCSR_UINSTRET_VAL_Pos)


/**
  * @brief UCYCLEH [VPRCSR_UCYCLEH] User Cycle Counter (Upper part)
  */
  #define VPRCSR_UCYCLEH (0x00000C80ul)
  #define VPRCSR_UCYCLEH_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : User Cycle Counter value */
  #define VPRCSR_UCYCLEH_VAL_Pos (0UL)
  #define VPRCSR_UCYCLEH_VAL_Msk (0xFFFFFFFFUL << VPRCSR_UCYCLEH_VAL_Pos)


/**
  * @brief UINSTRETH [VPRCSR_UINSTRETH] User Instruction Counter (Upper part)
  */
  #define VPRCSR_UINSTRETH (0x00000C82ul)
  #define VPRCSR_UINSTRETH_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : User Instruction Counter (Upper part) value */
  #define VPRCSR_UINSTRETH_VAL_Pos (0UL)
  #define VPRCSR_UINSTRETH_VAL_Msk (0xFFFFFFFFUL << VPRCSR_UINSTRETH_VAL_Pos)


/**
  * @brief MVENDORID [VPRCSR_MVENDORID] Machine Vendor ID
  */
  #define VPRCSR_MVENDORID (0x00000F11ul)
  #define VPRCSR_MVENDORID_ResetValue (0x00000144UL)

/* OFFSET @Bits 0..6 : MVENDORID encodes the final byte in the Offset field, discarding the parity bit */
  #define VPRCSR_MVENDORID_OFFSET_Pos (0UL)
  #define VPRCSR_MVENDORID_OFFSET_Msk (0x7FUL << VPRCSR_MVENDORID_OFFSET_Pos)

/* BANK @Bits 7..31 : MVENDORID encodes the number of one-byte continuation codes in the Bank field */
  #define VPRCSR_MVENDORID_BANK_Pos (7UL)
  #define VPRCSR_MVENDORID_BANK_Msk (0x1FFFFFFUL << VPRCSR_MVENDORID_BANK_Pos)


/**
  * @brief MARCHID [VPRCSR_MARCHID] Machine Architecture ID
  */
  #define VPRCSR_MARCHID (0x00000F12ul)
  #define VPRCSR_MARCHID_ResetValue (0x8000006EUL)

/* MULDIV @Bits 0..1 : Indicates the MULDIV parameter option */
  #define VPRCSR_MARCHID_MULDIV_Pos (0UL)
  #define VPRCSR_MARCHID_MULDIV_Msk (0x3UL << VPRCSR_MARCHID_MULDIV_Pos)

/* HIBERNATE @Bit 2 : Indicates the POWEROFFSLEEP parameter option */
  #define VPRCSR_MARCHID_HIBERNATE_Pos (2UL)
  #define VPRCSR_MARCHID_HIBERNATE_Msk (0x1UL << VPRCSR_MARCHID_HIBERNATE_Pos)

/* DBG @Bit 3 : Indicates the DBG parameter option */
  #define VPRCSR_MARCHID_DBG_Pos (3UL)
  #define VPRCSR_MARCHID_DBG_Msk (0x1UL << VPRCSR_MARCHID_DBG_Pos)

/* REMAP @Bit 4 : Indicates the REMAP parameter option */
  #define VPRCSR_MARCHID_REMAP_Pos (4UL)
  #define VPRCSR_MARCHID_REMAP_Msk (0x1UL << VPRCSR_MARCHID_REMAP_Pos)

/* BUSWIDTH @Bit 5 : Indicates the BUS_WIDTH parameter option */
  #define VPRCSR_MARCHID_BUSWIDTH_Pos (5UL)
  #define VPRCSR_MARCHID_BUSWIDTH_Msk (0x1UL << VPRCSR_MARCHID_BUSWIDTH_Pos)

/* BKPT @Bits 6..9 : Indicates the BKPT parameter option */
  #define VPRCSR_MARCHID_BKPT_Pos (6UL)
  #define VPRCSR_MARCHID_BKPT_Msk (0xFUL << VPRCSR_MARCHID_BKPT_Pos)

/* CACHE @Bit 10 : Indicates that the CACHE is present */
  #define VPRCSR_MARCHID_CACHE_Pos (10UL)
  #define VPRCSR_MARCHID_CACHE_Msk (0x1UL << VPRCSR_MARCHID_CACHE_Pos)

/* CACHEEXTRATAGBUF @Bits 11..13 : Indicates the number of extra TAG buffers in CACHE */
  #define VPRCSR_MARCHID_CACHEEXTRATAGBUF_Pos (11UL)
  #define VPRCSR_MARCHID_CACHEEXTRATAGBUF_Msk (0x7UL << VPRCSR_MARCHID_CACHEEXTRATAGBUF_Pos) /*!< Bit mask of CACHEEXTRATAGBUF
                                                                            field.*/

/* RETAINED @Bit 16 : Indicates the RETAINED parameter option */
  #define VPRCSR_MARCHID_RETAINED_Pos (16UL)
  #define VPRCSR_MARCHID_RETAINED_Msk (0x1UL << VPRCSR_MARCHID_RETAINED_Pos)

/* IMPLEM @Bit 31 : Indicates a non-open implementation */
  #define VPRCSR_MARCHID_IMPLEM_Pos (31UL)
  #define VPRCSR_MARCHID_IMPLEM_Msk (0x1UL << VPRCSR_MARCHID_IMPLEM_Pos)


/**
  * @brief MIMPID [VPRCSR_MIMPID] Machine Implementation ID
  */
  #define VPRCSR_MIMPID (0x00000F13ul)
  #define VPRCSR_MIMPID_ResetValue (0x00010300UL)

/* PATCHREV @Bits 0..7 : Indicates the number of the patch revision */
  #define VPRCSR_MIMPID_PATCHREV_Pos (0UL)
  #define VPRCSR_MIMPID_PATCHREV_Msk (0xFFUL << VPRCSR_MIMPID_PATCHREV_Pos)

/* MINORREV @Bits 8..15 : Indicates the number of the minor revision */
  #define VPRCSR_MIMPID_MINORREV_Pos (8UL)
  #define VPRCSR_MIMPID_MINORREV_Msk (0xFFUL << VPRCSR_MIMPID_MINORREV_Pos)

/* MAJORREV @Bits 16..23 : Indicates the number of the major revison */
  #define VPRCSR_MIMPID_MAJORREV_Pos (16UL)
  #define VPRCSR_MIMPID_MAJORREV_Msk (0xFFUL << VPRCSR_MIMPID_MAJORREV_Pos)


/**
  * @brief MHARTID [VPRCSR_MHARTID] Machine Hart ID
  */
  #define VPRCSR_MHARTID (0x00000F14ul)
  #define VPRCSR_MHARTID_ResetValue (0x0000000EUL)

/* HARTNUM @Bits 0..31 : Machine Hart ID value */
  #define VPRCSR_MHARTID_HARTNUM_Pos (0UL)
  #define VPRCSR_MHARTID_HARTNUM_Msk (0xFFFFFFFFUL << VPRCSR_MHARTID_HARTNUM_Pos)


/**
  * @brief NORDIC [VPRCSR_NORDIC] (unspecified)
  */

/**
  * @brief VPRNORDICCTRL [VPRCSR_NORDIC_VPRNORDICCTRL] Nordic Core Control
  */
  #define VPRCSR_NORDIC_VPRNORDICCTRL (0x000007C0ul)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ResetValue (0x00000000UL)

/* ENABLERTPERIPH @Bit 0 : Control bit to enable Real-Time Peripherals */
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Pos (0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Pos) /*!< Bit mask
                                                                            of ENABLERTPERIPH field.*/
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Disabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Enabled (0x1UL)

/* ENABLEREMAP @Bit 3 : Enable remap feature */
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Pos (3UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Pos) /*!< Bit mask of
                                                                            ENABLEREMAP field.*/
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Disabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Enabled (0x1UL)

/* CNTIRQENABLE @Bit 6 : Enables the generation of IRQ number COUNTER_IRQ_NUM */
  #define VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Pos (6UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Pos) /*!< Bit mask of
                                                                            CNTIRQENABLE field.*/
  #define VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Disabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Enabled (0x1UL)

/* VPRBUSPRI @Bit 7 : Arbitration priority on bus */
  #define VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_Pos (7UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_Pos) /*!< Bit mask of
                                                                            VPRBUSPRI field.*/
  #define VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_LowPriority (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_HighPriority (0x1UL)

/* NORDICKEY @Bits 16..31 : Used in order to protect the write to this register */
  #define VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Pos (16UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Msk (0xFFFFUL << VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Pos) /*!< Bit mask of
                                                                            NORDICKEY field.*/
  #define VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Min (0x507DUL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Max (0x507DUL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Enabled (0x507DUL)


/**
  * @brief VPRNORDICSLEEPCTRL [VPRCSR_NORDIC_VPRNORDICSLEEPCTRL] Nordic Sleep Control
  */
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL (0x000007C1ul)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_ResetValue (0x00000002UL)

/* SLEEPSTATE @Bits 0..3 : Sleep State */
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_Pos (0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_Msk (0xFUL << VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_Pos) /*!< Bit
                                                                            mask of SLEEPSTATE field.*/
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_Max (0xFUL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_WAIT (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_RESET (0x2UL) /*!< Sleep state default reset value. Going to sleep with
                                                                         sleep state = RESET has the same effect as going to
                                                                         sleep with sleep state = WAIT*/
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_SLEEP (0x5UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_DEEPSLEEP (0x7UL) /*!< Sleep is turning the clock off and power is turned
                                                                            off*/
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_HIBERNATE (0xFUL) /*!< sleep is turning the clock off and all the
                                                                            registers are saved automatically, restart by a
                                                                            reset*/

/* RETURNTOSLEEP @Bit 16 : Return to Sleep */
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Pos (16UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Pos) /*!<
                                                                            Bit mask of RETURNTOSLEEP field.*/
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Disabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Enabled (0x1UL)

/* STACKONSLEEP @Bit 17 : Stack on Sleep */
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Pos (17UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Pos) /*!<
                                                                            Bit mask of STACKONSLEEP field.*/
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Disabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Enabled (0x1UL)


/**
  * @brief VPRNORDICFEATURESDISABLE [VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE] (unspecified)
  */
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE (0x000007C2ul)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_ResetValue (0x00000002UL) /*!< Reset value of VPRNORDICFEATURESDISABLE
                                                                            register.*/

/* DISABLECLICROUNDROBIN @Bit 3 : Disable CLIC Round Robin */
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Pos (3UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Pos)
                                                                            /*!< Bit mask of DISABLECLICROUNDROBIN field.*/
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Min (0x0UL) /*!< Min enumerator value of
                                                                            DISABLECLICROUNDROBIN field.*/
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Max (0x1UL) /*!< Max enumerator value of
                                                                            DISABLECLICROUNDROBIN field.*/
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Enabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Disabled (0x1UL)

/* UNRECOVRETURN @Bit 4 : Unrecoverable Return */
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Pos (4UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Pos)
                                                                            /*!< Bit mask of UNRECOVRETURN field.*/
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Disabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Enabled (0x1UL)

/* NORDICKEY @Bits 16..31 : Used in order to protect the write to this register */
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_NORDICKEY_Pos (16UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_NORDICKEY_Msk (0xFFFFUL << VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_NORDICKEY_Pos)
                                                                            /*!< Bit mask of NORDICKEY field.*/
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_NORDICKEY_Min (0x507DUL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_NORDICKEY_Max (0x507DUL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_NORDICKEY_Enabled (0x507DUL)


/**
  * @brief VIOPINS [VPRCSR_NORDIC_VIOPINS] VPR pins used for Real Time Peripherals VIO
  */
  #define VPRCSR_NORDIC_VIOPINS (0x000007C3ul)
  #define VPRCSR_NORDIC_VIOPINS_ResetValue (0x00003FFFUL)

/* VAL @Bits 0..31 : VPR pins used for Real Time Peripherals VIO */
  #define VPRCSR_NORDIC_VIOPINS_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_VIOPINS_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_VIOPINS_VAL_Pos)


/**
  * @brief EXTPARAMS [VPRCSR_NORDIC_EXTPARAMS] Reads values of external configuration parameters
  */
  #define VPRCSR_NORDIC_EXTPARAMS (0x000007C4ul)
  #define VPRCSR_NORDIC_EXTPARAMS_ResetValue (0x0000000EUL)

/* MULDIV @Bits 0..1 : value of MULDIV */
  #define VPRCSR_NORDIC_EXTPARAMS_MULDIV_Pos (0UL)
  #define VPRCSR_NORDIC_EXTPARAMS_MULDIV_Msk (0x3UL << VPRCSR_NORDIC_EXTPARAMS_MULDIV_Pos)

/* DBG @Bit 2 : value of DBG */
  #define VPRCSR_NORDIC_EXTPARAMS_DBG_Pos (2UL)
  #define VPRCSR_NORDIC_EXTPARAMS_DBG_Msk (0x1UL << VPRCSR_NORDIC_EXTPARAMS_DBG_Pos)

/* BKPT @Bits 3..6 : value of BKPT */
  #define VPRCSR_NORDIC_EXTPARAMS_BKPT_Pos (3UL)
  #define VPRCSR_NORDIC_EXTPARAMS_BKPT_Msk (0xFUL << VPRCSR_NORDIC_EXTPARAMS_BKPT_Pos)

/* REMAP @Bit 7 : value of REMAP */
  #define VPRCSR_NORDIC_EXTPARAMS_REMAP_Pos (7UL)
  #define VPRCSR_NORDIC_EXTPARAMS_REMAP_Msk (0x1UL << VPRCSR_NORDIC_EXTPARAMS_REMAP_Pos)


/**
  * @brief CACHE [VPRCSR_NORDIC_CACHE] (unspecified)
  */

/**
  * @brief AXCACHE [VPRCSR_NORDIC_CACHE_AXCACHE] Memory type encoding
  */
  #define VPRCSR_NORDIC_CACHE_AXCACHE (0x000007C5ul)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_ResetValue (0x00000EEEUL)

/* AWCACHE @Bits 0..3 : Memory type for data stores */
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_Pos (0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_Msk (0xFUL << VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_Pos) /*!< Bit mask of AWCACHE
                                                                            field.*/
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_Max (0xFUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_DEVNONBUFF (0x0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_DEVBUFF (0x1UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_NNONCACHENONBUFF (0x2UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_NNONCACHEBUFF (0x3UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITETHNALLOC (0x6UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITETHRALLOC (0x6UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITETHWALLOC (0xEUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITETHRWALLOC (0xEUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITEBACKNALLOC (0x7UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITEBACKRALLOC (0x7UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITEBACKWALLOC (0xFUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITEBACKRWALLOC (0xFUL)

/* IARCACHE @Bits 4..7 : Memory type for instruction loads */
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_Pos (4UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_Msk (0xFUL << VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_Pos) /*!< Bit mask of IARCACHE
                                                                            field.*/
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_Max (0xFUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_DEVNONBUFF (0x0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_DEVBUFF (0x1UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_NNONCACHENONBUFF (0x2UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_NNONCACHEBUFF (0x3UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITETHNALLOC (0xAUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITETHRALLOC (0xEUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITETHWALLOC (0xAUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITETHRWALLOC (0xEUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITEBACKNALLOC (0xBUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITEBACKRALLOC (0xFUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITEBACKWALLOC (0xBUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITEBACKRWALLOC (0xFUL)

/* DARCACHE @Bits 8..11 : Memory type for data loads */
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_Pos (8UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_Msk (0xFUL << VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_Pos) /*!< Bit mask of DARCACHE
                                                                            field.*/
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_Max (0xFUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_DEVNONBUFF (0x0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_DEVBUFF (0x1UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_NNONCACHENONBUFF (0x2UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_NNONCACHEBUFF (0x3UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITETHNALLOC (0xAUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITETHRALLOC (0xEUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITETHWALLOC (0xAUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITETHRWALLOC (0xEUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITEBACKNALLOC (0xBUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITEBACKRALLOC (0xFUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITEBACKWALLOC (0xBUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITEBACKRWALLOC (0xFUL)


/**
  * @brief CTRL [VPRCSR_NORDIC_CACHE_CTRL] Cache control
  */
  #define VPRCSR_NORDIC_CACHE_CTRL (0x000007C8ul)
  #define VPRCSR_NORDIC_CACHE_CTRL_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable cache */
  #define VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Pos (0UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Msk (0x1UL << VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Pos)
  #define VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Max (0x1UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Disabled (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Enabled (0x1UL)

/* CACHECLR @Bit 16 : Cache clear */
  #define VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_Pos (16UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_Msk (0x1UL << VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_Pos) /*!< Bit mask of CACHECLR
                                                                            field.*/
  #define VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_Max (0x1UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_NoOperation (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_Clear (0x1UL)


/**
  * @brief CFG [VPRCSR_NORDIC_CACHE_CFG] Cache configuration
  */
  #define VPRCSR_NORDIC_CACHE_CFG (0x000007C9ul)
  #define VPRCSR_NORDIC_CACHE_CFG_ResetValue (0x00000000UL)

/* CACHESIZE @Bits 0..3 : Cache size is 2^CACHESIZE or (1 << CACHESIZE) KB, with a maximum size of 32KB (CACHESIZE = 5) */
  #define VPRCSR_NORDIC_CACHE_CFG_CACHESIZE_Pos (0UL)
  #define VPRCSR_NORDIC_CACHE_CFG_CACHESIZE_Msk (0xFUL << VPRCSR_NORDIC_CACHE_CFG_CACHESIZE_Pos) /*!< Bit mask of CACHESIZE
                                                                            field.*/
  #define VPRCSR_NORDIC_CACHE_CFG_CACHESIZE_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CFG_CACHESIZE_Max (0xFUL)

/* CACHELINESIZE @Bit 8 : Cache line size */
  #define VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_Pos (8UL)
  #define VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_Msk (0x1UL << VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_Pos) /*!< Bit mask of
                                                                            CACHELINESIZE field.*/
  #define VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_Max (0x1UL)
  #define VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_CachelineSize32B (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_CachelineSize64B (0x1UL)


/**
  * @brief DATATAGADDR [VPRCSR_NORDIC_CACHE_DATATAGADDR] Cache tag base address
  */
  #define VPRCSR_NORDIC_CACHE_DATATAGADDR (0x000007CAul)
  #define VPRCSR_NORDIC_CACHE_DATATAGADDR_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Cache tag base address value */
  #define VPRCSR_NORDIC_CACHE_DATATAGADDR_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CACHE_DATATAGADDR_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_CACHE_DATATAGADDR_VAL_Pos) /*!< Bit mask of VAL
                                                                            field.*/
  #define VPRCSR_NORDIC_CACHE_DATATAGADDR_VAL_Min (0x00000000UL)
  #define VPRCSR_NORDIC_CACHE_DATATAGADDR_VAL_Max (0xFFFFFFFCUL)


/**
  * @brief DATABASEADDR [VPRCSR_NORDIC_CACHE_DATABASEADDR] Cache data base address
  */
  #define VPRCSR_NORDIC_CACHE_DATABASEADDR (0x000007CBul)
  #define VPRCSR_NORDIC_CACHE_DATABASEADDR_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Cache data base address value */
  #define VPRCSR_NORDIC_CACHE_DATABASEADDR_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CACHE_DATABASEADDR_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_CACHE_DATABASEADDR_VAL_Pos) /*!< Bit mask of
                                                                            VAL field.*/
  #define VPRCSR_NORDIC_CACHE_DATABASEADDR_VAL_Min (0x00000000UL)
  #define VPRCSR_NORDIC_CACHE_DATABASEADDR_VAL_Max (0xFFFFFFFCUL)


/**
  * @brief RTPERIPHCTRL [VPRCSR_NORDIC_RTPERIPHCTRL] RT peripheral control
  */
  #define VPRCSR_NORDIC_RTPERIPHCTRL (0x000007CCul)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_ResetValue (0x00000000UL)

/* CLOCKPOLARITY @Bit 0 : Clock polarity */
  #define VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_Pos (0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_Msk (0x1UL << VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_Pos) /*!< Bit mask of
                                                                            CLOCKPOLARITY field.*/
  #define VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_Min (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_Max (0x1UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_Low (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_High (0x1UL)

/* STOPCOUNTERS @Bit 4 : Stop counters CNT0 and CNT1 on OUTB under-run, or on INB Overflow if OUTMODE2 and INMODE2 */
  #define VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_Pos (4UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_Msk (0x1UL << VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_Pos) /*!< Bit mask of
                                                                            STOPCOUNTERS field.*/
  #define VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_Min (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_Max (0x1UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_NoStop (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_Stop (0x1UL)

/* INSEL @Bit 8 : Input pin selection */
  #define VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_Pos (8UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_Msk (0x1UL << VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_Pos)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_Min (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_Max (0x1UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_SamePin (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_SeparatePin (0x1UL)

/* EVPINSEL @Bits 12..15 : Event pin select */
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVPINSEL_Pos (12UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVPINSEL_Msk (0xFUL << VPRCSR_NORDIC_RTPERIPHCTRL_EVPINSEL_Pos) /*!< Bit mask of EVPINSEL
                                                                            field.*/

/* EVEDGE @Bits 16..17 : Event pin edge */
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_Pos (16UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_Msk (0x3UL << VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_Pos)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_Min (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_Max (0x2UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_AnyEdge (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_RisingEdge (0x1UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_FallingEdge (0x2UL)

/* EVSAMPLE @Bit 20 : Event pin sampling */
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Pos (20UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Msk (0x1UL << VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Pos) /*!< Bit mask of EVSAMPLE
                                                                            field.*/
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Min (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Max (0x1UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Continuous (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Event (0x1UL)


/**
  * @brief RTPERIPHSTATUS [VPRCSR_NORDIC_RTPERIPHSTATUS] Real-Time Peripheral Status
  */
  #define VPRCSR_NORDIC_RTPERIPHSTATUS (0x000007CDul)
  #define VPRCSR_NORDIC_RTPERIPHSTATUS_ResetValue (0x00000000UL)

/* OUTBUNDERRUN @Bit 0 : Set if OUTB value is not written in time for the next shift out event, which means OUT data is not
                         valid. Can only be cleared by SW by writing a 1 to the bit. */

  #define VPRCSR_NORDIC_RTPERIPHSTATUS_OUTBUNDERRUN_Pos (0UL)
  #define VPRCSR_NORDIC_RTPERIPHSTATUS_OUTBUNDERRUN_Msk (0x1UL << VPRCSR_NORDIC_RTPERIPHSTATUS_OUTBUNDERRUN_Pos) /*!< Bit mask
                                                                            of OUTBUNDERRUN field.*/

/* INBOVERRUN @Bit 1 : Set if INB value is not read in time for the next shift in event, which means IN data is lost. Can only
                       be cleared by SW by writing a 1 to the bit. */

  #define VPRCSR_NORDIC_RTPERIPHSTATUS_INBOVERRUN_Pos (1UL)
  #define VPRCSR_NORDIC_RTPERIPHSTATUS_INBOVERRUN_Msk (0x1UL << VPRCSR_NORDIC_RTPERIPHSTATUS_INBOVERRUN_Pos) /*!< Bit mask of
                                                                            INBOVERRUN field.*/


/**
  * @brief CNTMODE0 [VPRCSR_NORDIC_CNTMODE0] CNT0 Mode
  */
  #define VPRCSR_NORDIC_CNTMODE0 (0x000007D0ul)
  #define VPRCSR_NORDIC_CNTMODE0_ResetValue (0x00000000UL)

/* CNTMODE0 @Bits 0..2 : CNT0 Mode */
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_Pos (0UL)
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_Msk (0x7UL << VPRCSR_NORDIC_CNTMODE0_CNTMODE0_Pos)
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_Min (0x0UL)
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_Max (0x5UL)
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_STOP (0x0UL)
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_WRAP (0x1UL)
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_RELOAD (0x2UL) /*!< When CNT0 reaches 0 it will continue counting from the value in
                                                              CNTTOP*/
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_TRIGCOMB (0x3UL) /*!< When CNT0 reaches 0 it is reloaded from CNTTOP and stops.
                                                                Counting will restart when a VIO event happens*/
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_TRIGWRAP (0x5UL) /*!< When the counter reaches 0 it wraps to MAX and stops. Counting
                                                                will restart when a VIO event happens*/


/**
  * @brief CNTMODE1 [VPRCSR_NORDIC_CNTMODE1] CNT1 Mode
  */
  #define VPRCSR_NORDIC_CNTMODE1 (0x000007D1ul)
  #define VPRCSR_NORDIC_CNTMODE1_ResetValue (0x00000000UL)

/* CNTMODE1 @Bits 0..2 : CNT1 Mode */
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_Pos (0UL)
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_Msk (0x7UL << VPRCSR_NORDIC_CNTMODE1_CNTMODE1_Pos)
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_Min (0x0UL)
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_Max (0x5UL)
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_STOP (0x0UL)
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_WRAP (0x1UL)
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_RELOAD (0x2UL) /*!< When CNT1 reches 0 it will continue counting from the value in
                                                              CNTTOP*/
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_TRIGCOMB (0x3UL) /*!< In combine mode mode CNT1 acts as an extension of CNT0 (16 most
                                                                significant bits of the 32-bit CNT)*/
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_TRIGRELOAD (0x4UL) /*!< When CNT1 reaches 0 it is reloaded from CNTTOP and stops.
                                                                  Counting will restart when a VIO event happens*/
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_TRIGWRAP (0x5UL) /*!< When CNT1 reaches 0 it wraps to MAX and stops. Counting will
                                                                restart when a VIO event happens*/


/**
  * @brief CNT [VPRCSR_NORDIC_CNT] 32-bit Counter
  */
  #define VPRCSR_NORDIC_CNT (0x000007D2ul)
  #define VPRCSR_NORDIC_CNT_ResetValue (0x00000000UL)

/* CNT0 @Bits 0..15 : 16-bit Counter 0 */
  #define VPRCSR_NORDIC_CNT_CNT0_Pos (0UL)
  #define VPRCSR_NORDIC_CNT_CNT0_Msk (0xFFFFUL << VPRCSR_NORDIC_CNT_CNT0_Pos)

/* CNT1 @Bits 16..31 : 16-bit Counter 1 */
  #define VPRCSR_NORDIC_CNT_CNT1_Pos (16UL)
  #define VPRCSR_NORDIC_CNT_CNT1_Msk (0xFFFFUL << VPRCSR_NORDIC_CNT_CNT1_Pos)


/**
  * @brief CNTTOP [VPRCSR_NORDIC_CNTTOP] Counter Top
  */
  #define VPRCSR_NORDIC_CNTTOP (0x000007D3ul)
  #define VPRCSR_NORDIC_CNTTOP_ResetValue (0x00000000UL)

/* CNT0RELOAD @Bits 0..15 : Reload value for CNT0 */
  #define VPRCSR_NORDIC_CNTTOP_CNT0RELOAD_Pos (0UL)
  #define VPRCSR_NORDIC_CNTTOP_CNT0RELOAD_Msk (0xFFFFUL << VPRCSR_NORDIC_CNTTOP_CNT0RELOAD_Pos) /*!< Bit mask of CNT0RELOAD
                                                                            field.*/

/* CNT1RELOAD @Bits 16..31 : Reload value for CNT1 */
  #define VPRCSR_NORDIC_CNTTOP_CNT1RELOAD_Pos (16UL)
  #define VPRCSR_NORDIC_CNTTOP_CNT1RELOAD_Msk (0xFFFFUL << VPRCSR_NORDIC_CNTTOP_CNT1RELOAD_Pos) /*!< Bit mask of CNT1RELOAD
                                                                            field.*/


/**
  * @brief CNTADD [VPRCSR_NORDIC_CNTADD] CNT Add
  */
  #define VPRCSR_NORDIC_CNTADD (0x000007D4ul)
  #define VPRCSR_NORDIC_CNTADD_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Value added to CNT */
  #define VPRCSR_NORDIC_CNTADD_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CNTADD_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_CNTADD_VAL_Pos)


/**
  * @brief CNT0 [VPRCSR_NORDIC_CNT0] 16 bit Counter 0
  */
  #define VPRCSR_NORDIC_CNT0 (0x000007D5ul)
  #define VPRCSR_NORDIC_CNT0_ResetValue (0x00000000UL)

/* VAL @Bits 0..15 : CNT0 value */
  #define VPRCSR_NORDIC_CNT0_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CNT0_VAL_Msk (0xFFFFUL << VPRCSR_NORDIC_CNT0_VAL_Pos)


/**
  * @brief CNTADD0 [VPRCSR_NORDIC_CNTADD0] CNT0 Add
  */
  #define VPRCSR_NORDIC_CNTADD0 (0x000007D6ul)
  #define VPRCSR_NORDIC_CNTADD0_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Value added to CNT0 */
  #define VPRCSR_NORDIC_CNTADD0_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CNTADD0_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_CNTADD0_VAL_Pos)


/**
  * @brief CNT1 [VPRCSR_NORDIC_CNT1] 16-bit Counter 1
  */
  #define VPRCSR_NORDIC_CNT1 (0x000007D7ul)
  #define VPRCSR_NORDIC_CNT1_ResetValue (0x00000000UL)

/* VAL @Bits 0..15 : CNT1 value */
  #define VPRCSR_NORDIC_CNT1_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CNT1_VAL_Msk (0xFFFFUL << VPRCSR_NORDIC_CNT1_VAL_Pos)


/**
  * @brief CNTADD1 [VPRCSR_NORDIC_CNTADD1] CNT1 Add
  */
  #define VPRCSR_NORDIC_CNTADD1 (0x000007D8ul)
  #define VPRCSR_NORDIC_CNTADD1_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Value added to CNT1 */
  #define VPRCSR_NORDIC_CNTADD1_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CNTADD1_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_CNTADD1_VAL_Pos)


/**
  * @brief WAIT0 [VPRCSR_NORDIC_WAIT0] Wait 0
  */
  #define VPRCSR_NORDIC_WAIT0 (0x000007DAul)
  #define VPRCSR_NORDIC_WAIT0_ResetValue (0x00000000UL)

/* DATA @Bits 0..15 : Value to write to CNT0 */
  #define VPRCSR_NORDIC_WAIT0_DATA_Pos (0UL)
  #define VPRCSR_NORDIC_WAIT0_DATA_Msk (0xFFFFUL << VPRCSR_NORDIC_WAIT0_DATA_Pos)

/* WRITEDATA @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_WAIT0_WRITEDATA_Pos (16UL)
  #define VPRCSR_NORDIC_WAIT0_WRITEDATA_Msk (0x1UL << VPRCSR_NORDIC_WAIT0_WRITEDATA_Pos)
  #define VPRCSR_NORDIC_WAIT0_WRITEDATA_Min (0x0UL)
  #define VPRCSR_NORDIC_WAIT0_WRITEDATA_Max (0x1UL)
  #define VPRCSR_NORDIC_WAIT0_WRITEDATA_WAIT (0x0UL)
  #define VPRCSR_NORDIC_WAIT0_WRITEDATA_WRITE (0x1UL)


/**
  * @brief WAIT1 [VPRCSR_NORDIC_WAIT1] Wait 1
  */
  #define VPRCSR_NORDIC_WAIT1 (0x000007DBul)
  #define VPRCSR_NORDIC_WAIT1_ResetValue (0x00000000UL)

/* DATA @Bits 0..15 : Value to write to CNT1 */
  #define VPRCSR_NORDIC_WAIT1_DATA_Pos (0UL)
  #define VPRCSR_NORDIC_WAIT1_DATA_Msk (0xFFFFUL << VPRCSR_NORDIC_WAIT1_DATA_Pos)

/* WRITEDATA @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_WAIT1_WRITEDATA_Pos (16UL)
  #define VPRCSR_NORDIC_WAIT1_WRITEDATA_Msk (0x1UL << VPRCSR_NORDIC_WAIT1_WRITEDATA_Pos)
  #define VPRCSR_NORDIC_WAIT1_WRITEDATA_Min (0x0UL)
  #define VPRCSR_NORDIC_WAIT1_WRITEDATA_Max (0x1UL)
  #define VPRCSR_NORDIC_WAIT1_WRITEDATA_WAIT (0x0UL)
  #define VPRCSR_NORDIC_WAIT1_WRITEDATA_WRITE (0x1UL)


/**
  * @brief WAIT [VPRCSR_NORDIC_WAIT] Wait
  */
  #define VPRCSR_NORDIC_WAIT (0x000007DCul)
  #define VPRCSR_NORDIC_WAIT_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : (unspecified) */
  #define VPRCSR_NORDIC_WAIT_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_WAIT_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_WAIT_VAL_Pos)


/**
  * @brief TASKS [VPRCSR_NORDIC_TASKS] DPPI Tasks
  */
  #define VPRCSR_NORDIC_TASKS (0x000007E0ul)
  #define VPRCSR_NORDIC_TASKS_ResetValue (0x00000000UL)

/* TASKS0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS0_Pos (0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS0_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS0_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS0_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS0_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS0_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS0_Enabled (0x1UL)

/* TASKS1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS1_Pos (1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS1_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS1_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS1_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS1_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS1_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS1_Enabled (0x1UL)

/* TASKS2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS2_Pos (2UL)
  #define VPRCSR_NORDIC_TASKS_TASKS2_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS2_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS2_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS2_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS2_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS2_Enabled (0x1UL)

/* TASKS3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS3_Pos (3UL)
  #define VPRCSR_NORDIC_TASKS_TASKS3_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS3_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS3_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS3_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS3_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS3_Enabled (0x1UL)

/* TASKS4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS4_Pos (4UL)
  #define VPRCSR_NORDIC_TASKS_TASKS4_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS4_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS4_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS4_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS4_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS4_Enabled (0x1UL)

/* TASKS5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS5_Pos (5UL)
  #define VPRCSR_NORDIC_TASKS_TASKS5_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS5_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS5_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS5_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS5_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS5_Enabled (0x1UL)

/* TASKS6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS6_Pos (6UL)
  #define VPRCSR_NORDIC_TASKS_TASKS6_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS6_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS6_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS6_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS6_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS6_Enabled (0x1UL)

/* TASKS7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS7_Pos (7UL)
  #define VPRCSR_NORDIC_TASKS_TASKS7_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS7_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS7_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS7_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS7_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS7_Enabled (0x1UL)

/* TASKS8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS8_Pos (8UL)
  #define VPRCSR_NORDIC_TASKS_TASKS8_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS8_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS8_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS8_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS8_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS8_Enabled (0x1UL)

/* TASKS9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS9_Pos (9UL)
  #define VPRCSR_NORDIC_TASKS_TASKS9_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS9_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS9_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS9_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS9_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS9_Enabled (0x1UL)

/* TASKS10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS10_Pos (10UL)
  #define VPRCSR_NORDIC_TASKS_TASKS10_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS10_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS10_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS10_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS10_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS10_Enabled (0x1UL)

/* TASKS11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS11_Pos (11UL)
  #define VPRCSR_NORDIC_TASKS_TASKS11_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS11_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS11_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS11_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS11_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS11_Enabled (0x1UL)

/* TASKS12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS12_Pos (12UL)
  #define VPRCSR_NORDIC_TASKS_TASKS12_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS12_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS12_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS12_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS12_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS12_Enabled (0x1UL)

/* TASKS13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS13_Pos (13UL)
  #define VPRCSR_NORDIC_TASKS_TASKS13_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS13_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS13_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS13_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS13_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS13_Enabled (0x1UL)

/* TASKS14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS14_Pos (14UL)
  #define VPRCSR_NORDIC_TASKS_TASKS14_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS14_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS14_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS14_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS14_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS14_Enabled (0x1UL)

/* TASKS15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS15_Pos (15UL)
  #define VPRCSR_NORDIC_TASKS_TASKS15_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS15_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS15_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS15_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS15_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS15_Enabled (0x1UL)

/* TASKS16 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS16_Pos (16UL)
  #define VPRCSR_NORDIC_TASKS_TASKS16_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS16_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS16_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS16_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS16_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS16_Enabled (0x1UL)

/* TASKS17 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS17_Pos (17UL)
  #define VPRCSR_NORDIC_TASKS_TASKS17_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS17_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS17_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS17_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS17_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS17_Enabled (0x1UL)

/* TASKS18 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS18_Pos (18UL)
  #define VPRCSR_NORDIC_TASKS_TASKS18_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS18_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS18_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS18_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS18_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS18_Enabled (0x1UL)

/* TASKS19 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS19_Pos (19UL)
  #define VPRCSR_NORDIC_TASKS_TASKS19_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS19_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS19_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS19_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS19_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS19_Enabled (0x1UL)

/* TASKS20 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS20_Pos (20UL)
  #define VPRCSR_NORDIC_TASKS_TASKS20_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS20_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS20_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS20_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS20_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS20_Enabled (0x1UL)

/* TASKS21 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS21_Pos (21UL)
  #define VPRCSR_NORDIC_TASKS_TASKS21_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS21_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS21_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS21_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS21_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS21_Enabled (0x1UL)

/* TASKS22 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS22_Pos (22UL)
  #define VPRCSR_NORDIC_TASKS_TASKS22_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS22_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS22_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS22_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS22_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS22_Enabled (0x1UL)

/* TASKS23 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS23_Pos (23UL)
  #define VPRCSR_NORDIC_TASKS_TASKS23_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS23_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS23_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS23_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS23_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS23_Enabled (0x1UL)

/* TASKS24 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS24_Pos (24UL)
  #define VPRCSR_NORDIC_TASKS_TASKS24_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS24_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS24_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS24_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS24_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS24_Enabled (0x1UL)

/* TASKS25 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS25_Pos (25UL)
  #define VPRCSR_NORDIC_TASKS_TASKS25_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS25_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS25_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS25_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS25_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS25_Enabled (0x1UL)

/* TASKS26 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS26_Pos (26UL)
  #define VPRCSR_NORDIC_TASKS_TASKS26_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS26_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS26_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS26_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS26_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS26_Enabled (0x1UL)

/* TASKS27 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS27_Pos (27UL)
  #define VPRCSR_NORDIC_TASKS_TASKS27_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS27_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS27_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS27_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS27_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS27_Enabled (0x1UL)

/* TASKS28 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS28_Pos (28UL)
  #define VPRCSR_NORDIC_TASKS_TASKS28_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS28_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS28_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS28_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS28_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS28_Enabled (0x1UL)

/* TASKS29 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS29_Pos (29UL)
  #define VPRCSR_NORDIC_TASKS_TASKS29_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS29_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS29_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS29_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS29_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS29_Enabled (0x1UL)

/* TASKS30 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS30_Pos (30UL)
  #define VPRCSR_NORDIC_TASKS_TASKS30_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS30_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS30_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS30_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS30_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS30_Enabled (0x1UL)

/* TASKS31 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS31_Pos (31UL)
  #define VPRCSR_NORDIC_TASKS_TASKS31_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS31_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS31_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS31_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS31_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS31_Enabled (0x1UL)


/**
  * @brief SUBSCRIBE [VPRCSR_NORDIC_SUBSCRIBE] Enable Task Subscription
  */
  #define VPRCSR_NORDIC_SUBSCRIBE (0x000007E1ul)
  #define VPRCSR_NORDIC_SUBSCRIBE_ResetValue (0x00000000UL)

/* SUBSCRIBE0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Pos (0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Pos) /*!< Bit mask of SUBSCRIBE0
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Enabled (0x1UL)

/* SUBSCRIBE1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Pos (1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Pos) /*!< Bit mask of SUBSCRIBE1
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Enabled (0x1UL)

/* SUBSCRIBE2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Pos (2UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Pos) /*!< Bit mask of SUBSCRIBE2
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Enabled (0x1UL)

/* SUBSCRIBE3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Pos (3UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Pos) /*!< Bit mask of SUBSCRIBE3
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Enabled (0x1UL)


/**
  * @brief EVENTS [VPRCSR_NORDIC_EVENTS] DPPI Events
  */
  #define VPRCSR_NORDIC_EVENTS (0x000007E2ul)
  #define VPRCSR_NORDIC_EVENTS_ResetValue (0x00000000UL)

/* EVENTS0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS0_Pos (0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS0_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS0_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS0_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS0_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS0_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS0_Enabled (0x1UL)

/* EVENTS1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS1_Pos (1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS1_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS1_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS1_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS1_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS1_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS1_Enabled (0x1UL)

/* EVENTS2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS2_Pos (2UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS2_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS2_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS2_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS2_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS2_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS2_Enabled (0x1UL)

/* EVENTS3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS3_Pos (3UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS3_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS3_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS3_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS3_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS3_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS3_Enabled (0x1UL)

/* EVENTS4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS4_Pos (4UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS4_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS4_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS4_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS4_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS4_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS4_Enabled (0x1UL)

/* EVENTS5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS5_Pos (5UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS5_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS5_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS5_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS5_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS5_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS5_Enabled (0x1UL)

/* EVENTS6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS6_Pos (6UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS6_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS6_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS6_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS6_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS6_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS6_Enabled (0x1UL)

/* EVENTS7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS7_Pos (7UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS7_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS7_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS7_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS7_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS7_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS7_Enabled (0x1UL)

/* EVENTS8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS8_Pos (8UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS8_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS8_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS8_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS8_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS8_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS8_Enabled (0x1UL)

/* EVENTS9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS9_Pos (9UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS9_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS9_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS9_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS9_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS9_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS9_Enabled (0x1UL)

/* EVENTS10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS10_Pos (10UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS10_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS10_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS10_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS10_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS10_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS10_Enabled (0x1UL)

/* EVENTS11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS11_Pos (11UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS11_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS11_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS11_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS11_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS11_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS11_Enabled (0x1UL)

/* EVENTS12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS12_Pos (12UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS12_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS12_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS12_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS12_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS12_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS12_Enabled (0x1UL)

/* EVENTS13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS13_Pos (13UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS13_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS13_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS13_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS13_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS13_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS13_Enabled (0x1UL)

/* EVENTS14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS14_Pos (14UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS14_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS14_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS14_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS14_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS14_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS14_Enabled (0x1UL)

/* EVENTS15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS15_Pos (15UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS15_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS15_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS15_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS15_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS15_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS15_Enabled (0x1UL)

/* EVENTS16 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS16_Pos (16UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS16_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS16_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS16_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS16_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS16_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS16_Enabled (0x1UL)

/* EVENTS17 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS17_Pos (17UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS17_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS17_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS17_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS17_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS17_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS17_Enabled (0x1UL)

/* EVENTS18 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS18_Pos (18UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS18_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS18_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS18_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS18_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS18_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS18_Enabled (0x1UL)

/* EVENTS19 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS19_Pos (19UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS19_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS19_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS19_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS19_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS19_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS19_Enabled (0x1UL)

/* EVENTS20 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS20_Pos (20UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS20_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS20_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS20_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS20_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS20_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS20_Enabled (0x1UL)

/* EVENTS21 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS21_Pos (21UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS21_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS21_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS21_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS21_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS21_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS21_Enabled (0x1UL)

/* EVENTS22 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS22_Pos (22UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS22_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS22_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS22_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS22_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS22_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS22_Enabled (0x1UL)

/* EVENTS23 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS23_Pos (23UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS23_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS23_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS23_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS23_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS23_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS23_Enabled (0x1UL)

/* EVENTS24 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS24_Pos (24UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS24_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS24_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS24_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS24_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS24_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS24_Enabled (0x1UL)

/* EVENTS25 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS25_Pos (25UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS25_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS25_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS25_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS25_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS25_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS25_Enabled (0x1UL)

/* EVENTS26 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS26_Pos (26UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS26_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS26_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS26_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS26_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS26_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS26_Enabled (0x1UL)

/* EVENTS27 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS27_Pos (27UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS27_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS27_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS27_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS27_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS27_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS27_Enabled (0x1UL)

/* EVENTS28 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS28_Pos (28UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS28_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS28_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS28_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS28_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS28_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS28_Enabled (0x1UL)

/* EVENTS29 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS29_Pos (29UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS29_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS29_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS29_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS29_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS29_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS29_Enabled (0x1UL)

/* EVENTS30 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS30_Pos (30UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS30_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS30_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS30_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS30_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS30_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS30_Enabled (0x1UL)

/* EVENTS31 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS31_Pos (31UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS31_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS31_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS31_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS31_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS31_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS31_Enabled (0x1UL)


/**
  * @brief PUBLISH [VPRCSR_NORDIC_PUBLISH] Enable Event Publication
  */
  #define VPRCSR_NORDIC_PUBLISH (0x000007E3ul)
  #define VPRCSR_NORDIC_PUBLISH_ResetValue (0x00000000UL)

/* PUBLISH0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH0_Pos (0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH0_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH0_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH0_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH0_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH0_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH0_Enabled (0x1UL)

/* PUBLISH1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH1_Pos (1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH1_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH1_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH1_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH1_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH1_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH1_Enabled (0x1UL)

/* PUBLISH2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH2_Pos (2UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH2_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH2_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH2_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH2_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH2_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH2_Enabled (0x1UL)

/* PUBLISH3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH3_Pos (3UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH3_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH3_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH3_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH3_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH3_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH3_Enabled (0x1UL)


/**
  * @brief INTEN [VPRCSR_NORDIC_INTEN] DPPI Event Interrupt Enable
  */
  #define VPRCSR_NORDIC_INTEN (0x000007E4ul)
  #define VPRCSR_NORDIC_INTEN_ResetValue (0x00000000UL)

/* INTEN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN0_Pos (0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN0_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN0_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN0_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN0_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN0_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN0_Enabled (0x1UL)

/* INTEN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN1_Pos (1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN1_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN1_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN1_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN1_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN1_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN1_Enabled (0x1UL)

/* INTEN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN2_Pos (2UL)
  #define VPRCSR_NORDIC_INTEN_INTEN2_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN2_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN2_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN2_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN2_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN2_Enabled (0x1UL)

/* INTEN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN3_Pos (3UL)
  #define VPRCSR_NORDIC_INTEN_INTEN3_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN3_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN3_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN3_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN3_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN3_Enabled (0x1UL)

/* INTEN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN4_Pos (4UL)
  #define VPRCSR_NORDIC_INTEN_INTEN4_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN4_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN4_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN4_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN4_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN4_Enabled (0x1UL)

/* INTEN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN5_Pos (5UL)
  #define VPRCSR_NORDIC_INTEN_INTEN5_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN5_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN5_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN5_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN5_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN5_Enabled (0x1UL)

/* INTEN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN6_Pos (6UL)
  #define VPRCSR_NORDIC_INTEN_INTEN6_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN6_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN6_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN6_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN6_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN6_Enabled (0x1UL)

/* INTEN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN7_Pos (7UL)
  #define VPRCSR_NORDIC_INTEN_INTEN7_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN7_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN7_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN7_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN7_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN7_Enabled (0x1UL)

/* INTEN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN8_Pos (8UL)
  #define VPRCSR_NORDIC_INTEN_INTEN8_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN8_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN8_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN8_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN8_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN8_Enabled (0x1UL)

/* INTEN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN9_Pos (9UL)
  #define VPRCSR_NORDIC_INTEN_INTEN9_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN9_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN9_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN9_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN9_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN9_Enabled (0x1UL)

/* INTEN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN10_Pos (10UL)
  #define VPRCSR_NORDIC_INTEN_INTEN10_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN10_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN10_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN10_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN10_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN10_Enabled (0x1UL)

/* INTEN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN11_Pos (11UL)
  #define VPRCSR_NORDIC_INTEN_INTEN11_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN11_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN11_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN11_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN11_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN11_Enabled (0x1UL)

/* INTEN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN12_Pos (12UL)
  #define VPRCSR_NORDIC_INTEN_INTEN12_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN12_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN12_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN12_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN12_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN12_Enabled (0x1UL)

/* INTEN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN13_Pos (13UL)
  #define VPRCSR_NORDIC_INTEN_INTEN13_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN13_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN13_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN13_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN13_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN13_Enabled (0x1UL)

/* INTEN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN14_Pos (14UL)
  #define VPRCSR_NORDIC_INTEN_INTEN14_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN14_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN14_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN14_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN14_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN14_Enabled (0x1UL)

/* INTEN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN15_Pos (15UL)
  #define VPRCSR_NORDIC_INTEN_INTEN15_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN15_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN15_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN15_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN15_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN15_Enabled (0x1UL)

/* INTEN16 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN16_Pos (16UL)
  #define VPRCSR_NORDIC_INTEN_INTEN16_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN16_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN16_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN16_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN16_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN16_Enabled (0x1UL)

/* INTEN17 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN17_Pos (17UL)
  #define VPRCSR_NORDIC_INTEN_INTEN17_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN17_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN17_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN17_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN17_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN17_Enabled (0x1UL)

/* INTEN18 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN18_Pos (18UL)
  #define VPRCSR_NORDIC_INTEN_INTEN18_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN18_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN18_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN18_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN18_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN18_Enabled (0x1UL)

/* INTEN19 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN19_Pos (19UL)
  #define VPRCSR_NORDIC_INTEN_INTEN19_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN19_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN19_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN19_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN19_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN19_Enabled (0x1UL)

/* INTEN20 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN20_Pos (20UL)
  #define VPRCSR_NORDIC_INTEN_INTEN20_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN20_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN20_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN20_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN20_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN20_Enabled (0x1UL)

/* INTEN21 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN21_Pos (21UL)
  #define VPRCSR_NORDIC_INTEN_INTEN21_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN21_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN21_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN21_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN21_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN21_Enabled (0x1UL)

/* INTEN22 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN22_Pos (22UL)
  #define VPRCSR_NORDIC_INTEN_INTEN22_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN22_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN22_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN22_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN22_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN22_Enabled (0x1UL)

/* INTEN23 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN23_Pos (23UL)
  #define VPRCSR_NORDIC_INTEN_INTEN23_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN23_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN23_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN23_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN23_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN23_Enabled (0x1UL)

/* INTEN24 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN24_Pos (24UL)
  #define VPRCSR_NORDIC_INTEN_INTEN24_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN24_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN24_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN24_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN24_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN24_Enabled (0x1UL)

/* INTEN25 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN25_Pos (25UL)
  #define VPRCSR_NORDIC_INTEN_INTEN25_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN25_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN25_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN25_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN25_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN25_Enabled (0x1UL)

/* INTEN26 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN26_Pos (26UL)
  #define VPRCSR_NORDIC_INTEN_INTEN26_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN26_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN26_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN26_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN26_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN26_Enabled (0x1UL)

/* INTEN27 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN27_Pos (27UL)
  #define VPRCSR_NORDIC_INTEN_INTEN27_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN27_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN27_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN27_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN27_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN27_Enabled (0x1UL)

/* INTEN28 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN28_Pos (28UL)
  #define VPRCSR_NORDIC_INTEN_INTEN28_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN28_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN28_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN28_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN28_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN28_Enabled (0x1UL)

/* INTEN29 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN29_Pos (29UL)
  #define VPRCSR_NORDIC_INTEN_INTEN29_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN29_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN29_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN29_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN29_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN29_Enabled (0x1UL)

/* INTEN30 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN30_Pos (30UL)
  #define VPRCSR_NORDIC_INTEN_INTEN30_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN30_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN30_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN30_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN30_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN30_Enabled (0x1UL)

/* INTEN31 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN31_Pos (31UL)
  #define VPRCSR_NORDIC_INTEN_INTEN31_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN31_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN31_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN31_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN31_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN31_Enabled (0x1UL)


/**
  * @brief EVENTSB [VPRCSR_NORDIC_EVENTSB] Buffered DPPI Events
  */
  #define VPRCSR_NORDIC_EVENTSB (0x000007E5ul)
  #define VPRCSR_NORDIC_EVENTSB_ResetValue (0x00000000UL)

/* EVENTSB0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB0_Pos (0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB0_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB0_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB0_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB0_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB0_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB0_Enabled (0x1UL)

/* EVENTSB1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB1_Pos (1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB1_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB1_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB1_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB1_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB1_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB1_Enabled (0x1UL)

/* EVENTSB2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB2_Pos (2UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB2_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB2_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB2_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB2_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB2_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB2_Enabled (0x1UL)

/* EVENTSB3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB3_Pos (3UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB3_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB3_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB3_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB3_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB3_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB3_Enabled (0x1UL)

/* EVENTSB4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB4_Pos (4UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB4_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB4_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB4_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB4_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB4_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB4_Enabled (0x1UL)

/* EVENTSB5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB5_Pos (5UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB5_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB5_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB5_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB5_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB5_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB5_Enabled (0x1UL)

/* EVENTSB6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB6_Pos (6UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB6_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB6_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB6_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB6_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB6_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB6_Enabled (0x1UL)

/* EVENTSB7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB7_Pos (7UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB7_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB7_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB7_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB7_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB7_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB7_Enabled (0x1UL)

/* EVENTSB8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB8_Pos (8UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB8_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB8_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB8_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB8_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB8_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB8_Enabled (0x1UL)

/* EVENTSB9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB9_Pos (9UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB9_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB9_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB9_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB9_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB9_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB9_Enabled (0x1UL)

/* EVENTSB10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB10_Pos (10UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB10_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB10_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB10_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB10_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB10_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB10_Enabled (0x1UL)

/* EVENTSB11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB11_Pos (11UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB11_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB11_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB11_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB11_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB11_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB11_Enabled (0x1UL)

/* EVENTSB12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB12_Pos (12UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB12_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB12_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB12_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB12_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB12_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB12_Enabled (0x1UL)

/* EVENTSB13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB13_Pos (13UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB13_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB13_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB13_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB13_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB13_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB13_Enabled (0x1UL)

/* EVENTSB14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB14_Pos (14UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB14_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB14_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB14_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB14_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB14_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB14_Enabled (0x1UL)

/* EVENTSB15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB15_Pos (15UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB15_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB15_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB15_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB15_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB15_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB15_Enabled (0x1UL)

/* EVENTSB16 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB16_Pos (16UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB16_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB16_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB16_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB16_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB16_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB16_Enabled (0x1UL)

/* EVENTSB17 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB17_Pos (17UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB17_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB17_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB17_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB17_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB17_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB17_Enabled (0x1UL)

/* EVENTSB18 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB18_Pos (18UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB18_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB18_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB18_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB18_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB18_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB18_Enabled (0x1UL)

/* EVENTSB19 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB19_Pos (19UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB19_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB19_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB19_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB19_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB19_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB19_Enabled (0x1UL)

/* EVENTSB20 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB20_Pos (20UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB20_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB20_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB20_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB20_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB20_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB20_Enabled (0x1UL)

/* EVENTSB21 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB21_Pos (21UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB21_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB21_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB21_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB21_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB21_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB21_Enabled (0x1UL)

/* EVENTSB22 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB22_Pos (22UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB22_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB22_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB22_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB22_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB22_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB22_Enabled (0x1UL)

/* EVENTSB23 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB23_Pos (23UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB23_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB23_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB23_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB23_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB23_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB23_Enabled (0x1UL)

/* EVENTSB24 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB24_Pos (24UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB24_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB24_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB24_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB24_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB24_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB24_Enabled (0x1UL)

/* EVENTSB25 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB25_Pos (25UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB25_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB25_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB25_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB25_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB25_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB25_Enabled (0x1UL)

/* EVENTSB26 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB26_Pos (26UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB26_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB26_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB26_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB26_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB26_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB26_Enabled (0x1UL)

/* EVENTSB27 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB27_Pos (27UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB27_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB27_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB27_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB27_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB27_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB27_Enabled (0x1UL)

/* EVENTSB28 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB28_Pos (28UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB28_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB28_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB28_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB28_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB28_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB28_Enabled (0x1UL)

/* EVENTSB29 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB29_Pos (29UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB29_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB29_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB29_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB29_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB29_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB29_Enabled (0x1UL)

/* EVENTSB30 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB30_Pos (30UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB30_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB30_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB30_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB30_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB30_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB30_Enabled (0x1UL)

/* EVENTSB31 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB31_Pos (31UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB31_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB31_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB31_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB31_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB31_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB31_Enabled (0x1UL)


/**
  * @brief EVENTSBS [VPRCSR_NORDIC_EVENTSBS] EVENTSB Dirty Status
  */
  #define VPRCSR_NORDIC_EVENTSBS (0x000007E6ul)
  #define VPRCSR_NORDIC_EVENTSBS_ResetValue (0x00000000UL)

/* EVENTSB @Bits 0..31 : Write to EVENTSB (if not dirty) */
  #define VPRCSR_NORDIC_EVENTSBS_EVENTSB_Pos (0UL)
  #define VPRCSR_NORDIC_EVENTSBS_EVENTSB_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_EVENTSBS_EVENTSB_Pos) /*!< Bit mask of EVENTSB
                                                                            field.*/

/* DIRTYBIT @Bit 0 : Read EVENTSB Dirty status */
  #define VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_Pos (0UL)
  #define VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_Msk (0x1UL << VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_Pos)
  #define VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_CLEAN (0x0UL)
  #define VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_DIRTY (0x1UL)


/**
  * @brief OUT [VPRCSR_NORDIC_OUT] GPIO Output value. Real Time Peripherals VIO.
  */
  #define VPRCSR_NORDIC_OUT (0x00000BC0ul)
  #define VPRCSR_NORDIC_OUT_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_OUT_PIN0_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN0_Pos)
  #define VPRCSR_NORDIC_OUT_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN0_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN0_HIGH (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_OUT_PIN1_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN1_Pos)
  #define VPRCSR_NORDIC_OUT_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN1_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN1_HIGH (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_OUT_PIN2_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN2_Pos)
  #define VPRCSR_NORDIC_OUT_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN2_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN2_HIGH (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_OUT_PIN3_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN3_Pos)
  #define VPRCSR_NORDIC_OUT_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN3_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN3_HIGH (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_OUT_PIN4_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN4_Pos)
  #define VPRCSR_NORDIC_OUT_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN4_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN4_HIGH (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_OUT_PIN5_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN5_Pos)
  #define VPRCSR_NORDIC_OUT_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN5_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN5_HIGH (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_OUT_PIN6_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN6_Pos)
  #define VPRCSR_NORDIC_OUT_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN6_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN6_HIGH (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_OUT_PIN7_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN7_Pos)
  #define VPRCSR_NORDIC_OUT_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN7_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN7_HIGH (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_OUT_PIN8_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN8_Pos)
  #define VPRCSR_NORDIC_OUT_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN8_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN8_HIGH (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_OUT_PIN9_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN9_Pos)
  #define VPRCSR_NORDIC_OUT_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN9_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN9_HIGH (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_OUT_PIN10_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN10_Pos)
  #define VPRCSR_NORDIC_OUT_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN10_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN10_HIGH (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_OUT_PIN11_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN11_Pos)
  #define VPRCSR_NORDIC_OUT_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN11_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN11_HIGH (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_OUT_PIN12_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN12_Pos)
  #define VPRCSR_NORDIC_OUT_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN12_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN12_HIGH (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_OUT_PIN13_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN13_Pos)
  #define VPRCSR_NORDIC_OUT_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN13_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN13_HIGH (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_OUT_PIN14_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN14_Pos)
  #define VPRCSR_NORDIC_OUT_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN14_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN14_HIGH (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_OUT_PIN15_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN15_Pos)
  #define VPRCSR_NORDIC_OUT_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN15_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN15_HIGH (0x1UL)


/**
  * @brief DIR [VPRCSR_NORDIC_DIR] GPIO pin Direction. Real Time Peripherals VIO.
  */
  #define VPRCSR_NORDIC_DIR (0x00000BC1ul)
  #define VPRCSR_NORDIC_DIR_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_DIR_PIN0_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN0_Pos)
  #define VPRCSR_NORDIC_DIR_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN0_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN0_OUTPUT (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_DIR_PIN1_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN1_Pos)
  #define VPRCSR_NORDIC_DIR_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN1_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN1_OUTPUT (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_DIR_PIN2_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN2_Pos)
  #define VPRCSR_NORDIC_DIR_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN2_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN2_OUTPUT (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_DIR_PIN3_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN3_Pos)
  #define VPRCSR_NORDIC_DIR_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN3_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN3_OUTPUT (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_DIR_PIN4_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN4_Pos)
  #define VPRCSR_NORDIC_DIR_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN4_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN4_OUTPUT (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_DIR_PIN5_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN5_Pos)
  #define VPRCSR_NORDIC_DIR_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN5_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN5_OUTPUT (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_DIR_PIN6_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN6_Pos)
  #define VPRCSR_NORDIC_DIR_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN6_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN6_OUTPUT (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_DIR_PIN7_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN7_Pos)
  #define VPRCSR_NORDIC_DIR_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN7_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN7_OUTPUT (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_DIR_PIN8_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN8_Pos)
  #define VPRCSR_NORDIC_DIR_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN8_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN8_OUTPUT (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_DIR_PIN9_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN9_Pos)
  #define VPRCSR_NORDIC_DIR_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN9_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN9_OUTPUT (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_DIR_PIN10_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN10_Pos)
  #define VPRCSR_NORDIC_DIR_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN10_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN10_OUTPUT (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_DIR_PIN11_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN11_Pos)
  #define VPRCSR_NORDIC_DIR_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN11_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN11_OUTPUT (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_DIR_PIN12_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN12_Pos)
  #define VPRCSR_NORDIC_DIR_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN12_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN12_OUTPUT (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_DIR_PIN13_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN13_Pos)
  #define VPRCSR_NORDIC_DIR_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN13_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN13_OUTPUT (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_DIR_PIN14_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN14_Pos)
  #define VPRCSR_NORDIC_DIR_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN14_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN14_OUTPUT (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_DIR_PIN15_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN15_Pos)
  #define VPRCSR_NORDIC_DIR_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN15_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN15_OUTPUT (0x1UL)


/**
  * @brief IN [VPRCSR_NORDIC_IN] GPIO Input. Real Time Peripherals VIO.
  */
  #define VPRCSR_NORDIC_IN (0x00000BC2ul)
  #define VPRCSR_NORDIC_IN_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_IN_PIN0_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN0_Pos)
  #define VPRCSR_NORDIC_IN_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN0_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN0_HIGH (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_IN_PIN1_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN1_Pos)
  #define VPRCSR_NORDIC_IN_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN1_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN1_HIGH (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_IN_PIN2_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN2_Pos)
  #define VPRCSR_NORDIC_IN_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN2_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN2_HIGH (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_IN_PIN3_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN3_Pos)
  #define VPRCSR_NORDIC_IN_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN3_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN3_HIGH (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_IN_PIN4_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN4_Pos)
  #define VPRCSR_NORDIC_IN_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN4_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN4_HIGH (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_IN_PIN5_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN5_Pos)
  #define VPRCSR_NORDIC_IN_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN5_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN5_HIGH (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_IN_PIN6_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN6_Pos)
  #define VPRCSR_NORDIC_IN_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN6_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN6_HIGH (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_IN_PIN7_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN7_Pos)
  #define VPRCSR_NORDIC_IN_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN7_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN7_HIGH (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_IN_PIN8_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN8_Pos)
  #define VPRCSR_NORDIC_IN_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN8_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN8_HIGH (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_IN_PIN9_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN9_Pos)
  #define VPRCSR_NORDIC_IN_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN9_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN9_HIGH (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_IN_PIN10_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN10_Pos)
  #define VPRCSR_NORDIC_IN_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN10_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN10_HIGH (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_IN_PIN11_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN11_Pos)
  #define VPRCSR_NORDIC_IN_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN11_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN11_HIGH (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_IN_PIN12_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN12_Pos)
  #define VPRCSR_NORDIC_IN_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN12_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN12_HIGH (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_IN_PIN13_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN13_Pos)
  #define VPRCSR_NORDIC_IN_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN13_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN13_HIGH (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_IN_PIN14_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN14_Pos)
  #define VPRCSR_NORDIC_IN_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN14_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN14_HIGH (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_IN_PIN15_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN15_Pos)
  #define VPRCSR_NORDIC_IN_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN15_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN15_HIGH (0x1UL)


/**
  * @brief INMODE [VPRCSR_NORDIC_INMODE] Input Mode
  */
  #define VPRCSR_NORDIC_INMODE (0x00000BC3ul)
  #define VPRCSR_NORDIC_INMODE_ResetValue (0x00000000UL)

/* MODE @Bits 0..1 : Input Mode */
  #define VPRCSR_NORDIC_INMODE_MODE_Pos (0UL)
  #define VPRCSR_NORDIC_INMODE_MODE_Msk (0x3UL << VPRCSR_NORDIC_INMODE_MODE_Pos)
  #define VPRCSR_NORDIC_INMODE_MODE_Min (0x0UL)
  #define VPRCSR_NORDIC_INMODE_MODE_Max (0x3UL)
  #define VPRCSR_NORDIC_INMODE_MODE_CONTINUOUS (0x0UL)
  #define VPRCSR_NORDIC_INMODE_MODE_EVENT (0x1UL)
  #define VPRCSR_NORDIC_INMODE_MODE_SHIFT (0x2UL)
  #define VPRCSR_NORDIC_INMODE_MODE_SHIFTA (0x3UL)


/**
  * @brief OUTB [VPRCSR_NORDIC_OUTB] Buffered GPIO Output
  */
  #define VPRCSR_NORDIC_OUTB (0x00000BC4ul)
  #define VPRCSR_NORDIC_OUTB_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_OUTB_PIN0_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN0_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN0_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN0_HIGH (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_OUTB_PIN1_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN1_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN1_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN1_HIGH (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_OUTB_PIN2_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN2_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN2_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN2_HIGH (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_OUTB_PIN3_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN3_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN3_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN3_HIGH (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_OUTB_PIN4_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN4_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN4_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN4_HIGH (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_OUTB_PIN5_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN5_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN5_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN5_HIGH (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_OUTB_PIN6_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN6_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN6_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN6_HIGH (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_OUTB_PIN7_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN7_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN7_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN7_HIGH (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_OUTB_PIN8_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN8_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN8_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN8_HIGH (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_OUTB_PIN9_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN9_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN9_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN9_HIGH (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_OUTB_PIN10_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN10_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN10_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN10_HIGH (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_OUTB_PIN11_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN11_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN11_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN11_HIGH (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_OUTB_PIN12_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN12_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN12_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN12_HIGH (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_OUTB_PIN13_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN13_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN13_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN13_HIGH (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_OUTB_PIN14_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN14_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN14_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN14_HIGH (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_OUTB_PIN15_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN15_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN15_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN15_HIGH (0x1UL)

/* PIN16 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN16_Pos (16UL)
  #define VPRCSR_NORDIC_OUTB_PIN16_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN16_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN16_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN16_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN16_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN16_HIGH (0x1UL)

/* PIN17 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN17_Pos (17UL)
  #define VPRCSR_NORDIC_OUTB_PIN17_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN17_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN17_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN17_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN17_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN17_HIGH (0x1UL)

/* PIN18 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN18_Pos (18UL)
  #define VPRCSR_NORDIC_OUTB_PIN18_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN18_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN18_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN18_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN18_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN18_HIGH (0x1UL)

/* PIN19 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN19_Pos (19UL)
  #define VPRCSR_NORDIC_OUTB_PIN19_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN19_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN19_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN19_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN19_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN19_HIGH (0x1UL)

/* PIN20 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN20_Pos (20UL)
  #define VPRCSR_NORDIC_OUTB_PIN20_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN20_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN20_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN20_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN20_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN20_HIGH (0x1UL)

/* PIN21 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN21_Pos (21UL)
  #define VPRCSR_NORDIC_OUTB_PIN21_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN21_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN21_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN21_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN21_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN21_HIGH (0x1UL)

/* PIN22 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN22_Pos (22UL)
  #define VPRCSR_NORDIC_OUTB_PIN22_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN22_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN22_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN22_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN22_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN22_HIGH (0x1UL)

/* PIN23 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN23_Pos (23UL)
  #define VPRCSR_NORDIC_OUTB_PIN23_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN23_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN23_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN23_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN23_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN23_HIGH (0x1UL)

/* PIN24 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN24_Pos (24UL)
  #define VPRCSR_NORDIC_OUTB_PIN24_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN24_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN24_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN24_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN24_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN24_HIGH (0x1UL)

/* PIN25 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN25_Pos (25UL)
  #define VPRCSR_NORDIC_OUTB_PIN25_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN25_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN25_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN25_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN25_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN25_HIGH (0x1UL)

/* PIN26 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN26_Pos (26UL)
  #define VPRCSR_NORDIC_OUTB_PIN26_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN26_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN26_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN26_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN26_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN26_HIGH (0x1UL)

/* PIN27 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN27_Pos (27UL)
  #define VPRCSR_NORDIC_OUTB_PIN27_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN27_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN27_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN27_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN27_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN27_HIGH (0x1UL)

/* PIN28 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN28_Pos (28UL)
  #define VPRCSR_NORDIC_OUTB_PIN28_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN28_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN28_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN28_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN28_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN28_HIGH (0x1UL)

/* PIN29 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN29_Pos (29UL)
  #define VPRCSR_NORDIC_OUTB_PIN29_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN29_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN29_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN29_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN29_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN29_HIGH (0x1UL)

/* PIN30 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN30_Pos (30UL)
  #define VPRCSR_NORDIC_OUTB_PIN30_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN30_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN30_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN30_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN30_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN30_HIGH (0x1UL)

/* PIN31 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN31_Pos (31UL)
  #define VPRCSR_NORDIC_OUTB_PIN31_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN31_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN31_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN31_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN31_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN31_HIGH (0x1UL)


/**
  * @brief DIRB [VPRCSR_NORDIC_DIRB] Buffered GPIO pin Direction
  */
  #define VPRCSR_NORDIC_DIRB (0x00000BC5ul)
  #define VPRCSR_NORDIC_DIRB_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_DIRB_PIN0_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN0_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN0_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN0_OUTPUT (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_DIRB_PIN1_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN1_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN1_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN1_OUTPUT (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_DIRB_PIN2_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN2_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN2_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN2_OUTPUT (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_DIRB_PIN3_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN3_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN3_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN3_OUTPUT (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_DIRB_PIN4_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN4_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN4_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN4_OUTPUT (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_DIRB_PIN5_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN5_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN5_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN5_OUTPUT (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_DIRB_PIN6_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN6_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN6_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN6_OUTPUT (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_DIRB_PIN7_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN7_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN7_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN7_OUTPUT (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_DIRB_PIN8_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN8_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN8_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN8_OUTPUT (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_DIRB_PIN9_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN9_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN9_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN9_OUTPUT (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_DIRB_PIN10_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN10_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN10_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN10_OUTPUT (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_DIRB_PIN11_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN11_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN11_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN11_OUTPUT (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_DIRB_PIN12_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN12_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN12_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN12_OUTPUT (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_DIRB_PIN13_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN13_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN13_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN13_OUTPUT (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_DIRB_PIN14_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN14_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN14_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN14_OUTPUT (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_DIRB_PIN15_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN15_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN15_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN15_OUTPUT (0x1UL)


/**
  * @brief DIROUT [VPRCSR_NORDIC_DIROUT] DIR and OUT concatenation
  */
  #define VPRCSR_NORDIC_DIROUT (0x00000BC6ul)
  #define VPRCSR_NORDIC_DIROUT_ResetValue (0x00000000UL)

/* OUT @Bits 0..15 : GPIO Output */
  #define VPRCSR_NORDIC_DIROUT_OUT_Pos (0UL)
  #define VPRCSR_NORDIC_DIROUT_OUT_Msk (0xFFFFUL << VPRCSR_NORDIC_DIROUT_OUT_Pos)

/* DIR @Bits 16..31 : GPIO pin Direction */
  #define VPRCSR_NORDIC_DIROUT_DIR_Pos (16UL)
  #define VPRCSR_NORDIC_DIROUT_DIR_Msk (0xFFFFUL << VPRCSR_NORDIC_DIROUT_DIR_Pos)


/**
  * @brief DIROUTB [VPRCSR_NORDIC_DIROUTB] Concatenation of DIRB and OUTB
  */
  #define VPRCSR_NORDIC_DIROUTB (0x00000BC7ul)
  #define VPRCSR_NORDIC_DIROUTB_ResetValue (0x00000000UL)

/* OUTB @Bits 0..15 : Buffered GPIO Output */
  #define VPRCSR_NORDIC_DIROUTB_OUTB_Pos (0UL)
  #define VPRCSR_NORDIC_DIROUTB_OUTB_Msk (0xFFFFUL << VPRCSR_NORDIC_DIROUTB_OUTB_Pos)

/* DIRB @Bits 16..31 : Buffered GPIO pin Direction */
  #define VPRCSR_NORDIC_DIROUTB_DIRB_Pos (16UL)
  #define VPRCSR_NORDIC_DIROUTB_DIRB_Msk (0xFFFFUL << VPRCSR_NORDIC_DIROUTB_DIRB_Pos)


/**
  * @brief OUTBRB [VPRCSR_NORDIC_OUTBRB] Byte reversed register OUTB
  */
  #define VPRCSR_NORDIC_OUTBRB (0x00000BC8ul)
  #define VPRCSR_NORDIC_OUTBRB_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBRB_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBRB_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_OUTBRB_VAL_Pos)
  #define VPRCSR_NORDIC_OUTBRB_VAL_Min (0x00000000UL)
  #define VPRCSR_NORDIC_OUTBRB_VAL_Max (0xFFFFFFFFUL)


/**
  * @brief OUTBRW [VPRCSR_NORDIC_OUTBRW] Word reversed register OUTB
  */
  #define VPRCSR_NORDIC_OUTBRW (0x00000BC9ul)
  #define VPRCSR_NORDIC_OUTBRW_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBRW_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBRW_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_OUTBRW_VAL_Pos)
  #define VPRCSR_NORDIC_OUTBRW_VAL_Min (0x00000000UL)
  #define VPRCSR_NORDIC_OUTBRW_VAL_Max (0xFFFFFFFFUL)


/**
  * @brief INBRB [VPRCSR_NORDIC_INBRB] Byte reversed register INB
  */
  #define VPRCSR_NORDIC_INBRB (0x00000BCAul)
  #define VPRCSR_NORDIC_INBRB_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : (unspecified) */
  #define VPRCSR_NORDIC_INBRB_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_INBRB_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_INBRB_VAL_Pos)
  #define VPRCSR_NORDIC_INBRB_VAL_Min (0x00000000UL)
  #define VPRCSR_NORDIC_INBRB_VAL_Max (0xFFFFFFFFUL)


/**
  * @brief SHIFTCTRLB [VPRCSR_NORDIC_SHIFTCTRLB] Buffered IO shift control
  */
  #define VPRCSR_NORDIC_SHIFTCTRLB (0x00000BCBul)
  #define VPRCSR_NORDIC_SHIFTCTRLB_ResetValue (0x00000000UL)

/* Field group SHIFTCNTB : (unspecified) */
/* VALUE @Bits 0..5 : Alias to SHIFTCNTB.VALUE register */
    #define VPRCSR_NORDIC_SHIFTCTRLB_SHIFTCNTB_VALUE_Pos (0UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_SHIFTCNTB_VALUE_Msk (0x3FUL << VPRCSR_NORDIC_SHIFTCTRLB_SHIFTCNTB_VALUE_Pos) /*!< Bit mask
                                                                            of VALUE field.*/
    #define VPRCSR_NORDIC_SHIFTCTRLB_SHIFTCNTB_VALUE_Min (0x00UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_SHIFTCNTB_VALUE_Max (0x20UL)

/* End field group SHIFTCNTB. */

/* Field group OUTMODEB : (unspecified) */
/* MODE @Bits 8..10 : Alias to OUTMODEB.MODE register */
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_Pos (8UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_Msk (0x7UL << VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_Pos) /*!< Bit mask of
                                                                            MODE field.*/
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_Min (0x0UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_Max (0x4UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_NoShifting (0x0UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_OutBBuf (0x2UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_OutBBufToggleClk (0x4UL) /*!< Only OUTB used for buffering, auto-toggle clock
                                                                            line*/

/* FRAMEWIDTH @Bits 12..16 : Alias to OUTMODEB.FRAMEWIDTH register */
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_FRAMEWIDTH_Pos (12UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_FRAMEWIDTH_Msk (0x1FUL << VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_FRAMEWIDTH_Pos) /*!<
                                                                            Bit mask of FRAMEWIDTH field.*/
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_FRAMEWIDTH_Min (0x00UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_FRAMEWIDTH_Max (0x10UL)

/* SEL @Bits 24..27 : Alias to OUTMODEB.SEL register */
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_SEL_Pos (24UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_SEL_Msk (0xFUL << VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_SEL_Pos) /*!< Bit mask of SEL
                                                                            field.*/
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_SEL_Min (0x0UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_SEL_Max (0xFUL)

/* End field group OUTMODEB. */

/* Field group INMODEB : (unspecified) */
/* MODE @Bits 20..21 : Alias to INMODEB.MODE register */
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_Pos (20UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_Msk (0x3UL << VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_Pos) /*!< Bit mask of MODE
                                                                            field.*/
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_Min (0x0UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_Max (0x3UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_CONTINUOUS (0x0UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_EVENT (0x1UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_SHIFT (0x2UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_SHIFTA (0x3UL) /*!< Sampling and shifting on Counter1 event, independent from
                                                                      output*/

/* End field group INMODEB. */


/**
  * @brief SHIFTCNTIN [VPRCSR_NORDIC_SHIFTCNTIN] Number of frames to be shifted from INB before new data is required
  */
  #define VPRCSR_NORDIC_SHIFTCNTIN (0x00000BCDul)
  #define VPRCSR_NORDIC_SHIFTCNTIN_ResetValue (0x00000000UL)

/* VALUE @Bits 0..5 : Value */
  #define VPRCSR_NORDIC_SHIFTCNTIN_VALUE_Pos (0UL)
  #define VPRCSR_NORDIC_SHIFTCNTIN_VALUE_Msk (0x3FUL << VPRCSR_NORDIC_SHIFTCNTIN_VALUE_Pos)
  #define VPRCSR_NORDIC_SHIFTCNTIN_VALUE_Min (0x00UL)
  #define VPRCSR_NORDIC_SHIFTCNTIN_VALUE_Max (0x3FUL)


/**
  * @brief SHIFTCNTOUT [VPRCSR_NORDIC_SHIFTCNTOUT] Number of frames to be shifted to OUTB before new data is required
  */
  #define VPRCSR_NORDIC_SHIFTCNTOUT (0x00000BCEul)
  #define VPRCSR_NORDIC_SHIFTCNTOUT_ResetValue (0x00000000UL)

/* VALUE @Bits 0..5 : Value */
  #define VPRCSR_NORDIC_SHIFTCNTOUT_VALUE_Pos (0UL)
  #define VPRCSR_NORDIC_SHIFTCNTOUT_VALUE_Msk (0x3FUL << VPRCSR_NORDIC_SHIFTCNTOUT_VALUE_Pos)
  #define VPRCSR_NORDIC_SHIFTCNTOUT_VALUE_Min (0x00UL)
  #define VPRCSR_NORDIC_SHIFTCNTOUT_VALUE_Max (0x3FUL)


/**
  * @brief SHIFTCNTB [VPRCSR_NORDIC_SHIFTCNTB] Buffered SHIFTCNTOUT and SHIFTCNTIN register
  */
  #define VPRCSR_NORDIC_SHIFTCNTB (0x00000BCFul)
  #define VPRCSR_NORDIC_SHIFTCNTB_ResetValue (0x00000000UL)

/* VALUE @Bits 0..5 : Value */
  #define VPRCSR_NORDIC_SHIFTCNTB_VALUE_Pos (0UL)
  #define VPRCSR_NORDIC_SHIFTCNTB_VALUE_Msk (0x3FUL << VPRCSR_NORDIC_SHIFTCNTB_VALUE_Pos)
  #define VPRCSR_NORDIC_SHIFTCNTB_VALUE_Min (0x00UL)
  #define VPRCSR_NORDIC_SHIFTCNTB_VALUE_Max (0x3FUL)


/**
  * @brief OUTTGL [VPRCSR_NORDIC_OUTTGL] GPIO Output Toggle
  */
  #define VPRCSR_NORDIC_OUTTGL (0x00000BD0ul)
  #define VPRCSR_NORDIC_OUTTGL_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN0_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN0_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN0_TOGGLE (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN1_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN1_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN1_TOGGLE (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN2_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN2_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN2_TOGGLE (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN3_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN3_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN3_TOGGLE (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN4_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN4_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN4_TOGGLE (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN5_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN5_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN5_TOGGLE (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN6_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN6_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN6_TOGGLE (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN7_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN7_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN7_TOGGLE (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN8_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN8_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN8_TOGGLE (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN9_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN9_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN9_TOGGLE (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN10_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN10_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN10_TOGGLE (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN11_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN11_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN11_TOGGLE (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN12_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN12_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN12_TOGGLE (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN13_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN13_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN13_TOGGLE (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN14_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN14_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN14_TOGGLE (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN15_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN15_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN15_TOGGLE (0x1UL)


/**
  * @brief DIRTGL [VPRCSR_NORDIC_DIRTGL] GPIO pin Direction Toggle
  */
  #define VPRCSR_NORDIC_DIRTGL (0x00000BD1ul)
  #define VPRCSR_NORDIC_DIRTGL_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN0_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN0_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN0_TOGGLE (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN1_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN1_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN1_TOGGLE (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN2_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN2_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN2_TOGGLE (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN3_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN3_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN3_TOGGLE (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN4_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN4_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN4_TOGGLE (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN5_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN5_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN5_TOGGLE (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN6_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN6_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN6_TOGGLE (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN7_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN7_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN7_TOGGLE (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN8_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN8_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN8_TOGGLE (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN9_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN9_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN9_TOGGLE (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN10_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN10_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN10_TOGGLE (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN11_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN11_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN11_TOGGLE (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN12_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN12_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN12_TOGGLE (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN13_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN13_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN13_TOGGLE (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN14_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN14_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN14_TOGGLE (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN15_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN15_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN15_TOGGLE (0x1UL)


/**
  * @brief OUTBTGL [VPRCSR_NORDIC_OUTBTGL] Buffered GPIO Output Toggle
  */
  #define VPRCSR_NORDIC_OUTBTGL (0x00000BD2ul)
  #define VPRCSR_NORDIC_OUTBTGL_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN0_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN0_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN0_TOGGLE (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN1_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN1_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN1_TOGGLE (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN2_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN2_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN2_TOGGLE (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN3_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN3_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN3_TOGGLE (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN4_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN4_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN4_TOGGLE (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN5_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN5_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN5_TOGGLE (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN6_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN6_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN6_TOGGLE (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN7_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN7_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN7_TOGGLE (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN8_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN8_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN8_TOGGLE (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN9_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN9_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN9_TOGGLE (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN10_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN10_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN10_TOGGLE (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN11_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN11_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN11_TOGGLE (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN12_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN12_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN12_TOGGLE (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN13_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN13_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN13_TOGGLE (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN14_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN14_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN14_TOGGLE (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN15_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN15_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN15_TOGGLE (0x1UL)


/**
  * @brief DIRBTGL [VPRCSR_NORDIC_DIRBTGL] Buffered GPIO pin Direction Toggle
  */
  #define VPRCSR_NORDIC_DIRBTGL (0x00000BD3ul)
  #define VPRCSR_NORDIC_DIRBTGL_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN0_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN0_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN0_TOGGLE (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN1_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN1_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN1_TOGGLE (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN2_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN2_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN2_TOGGLE (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN3_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN3_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN3_TOGGLE (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN4_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN4_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN4_TOGGLE (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN5_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN5_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN5_TOGGLE (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN6_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN6_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN6_TOGGLE (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN7_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN7_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN7_TOGGLE (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN8_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN8_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN8_TOGGLE (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN9_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN9_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN9_TOGGLE (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN10_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN10_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN10_TOGGLE (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN11_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN11_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN11_TOGGLE (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN12_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN12_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN12_TOGGLE (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN13_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN13_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN13_TOGGLE (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN14_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN14_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN14_TOGGLE (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN15_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN15_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN15_TOGGLE (0x1UL)


/**
  * @brief DIROUTTGL [VPRCSR_NORDIC_DIROUTTGL] DIROUT Toggle
  */
  #define VPRCSR_NORDIC_DIROUTTGL (0x00000BD4ul)
  #define VPRCSR_NORDIC_DIROUTTGL_ResetValue (0x00000000UL)

/* OUT0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT0_Pos (0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT0_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT0_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT0_TOGGLE (0x1UL)

/* OUT1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT1_Pos (1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT1_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT1_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT1_TOGGLE (0x1UL)

/* OUT2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT2_Pos (2UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT2_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT2_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT2_TOGGLE (0x1UL)

/* OUT3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT3_Pos (3UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT3_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT3_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT3_TOGGLE (0x1UL)

/* OUT4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT4_Pos (4UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT4_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT4_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT4_TOGGLE (0x1UL)

/* OUT5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT5_Pos (5UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT5_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT5_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT5_TOGGLE (0x1UL)

/* OUT6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT6_Pos (6UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT6_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT6_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT6_TOGGLE (0x1UL)

/* OUT7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT7_Pos (7UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT7_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT7_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT7_TOGGLE (0x1UL)

/* OUT8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT8_Pos (8UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT8_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT8_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT8_TOGGLE (0x1UL)

/* OUT9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT9_Pos (9UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT9_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT9_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT9_TOGGLE (0x1UL)

/* OUT10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT10_Pos (10UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT10_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT10_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT10_TOGGLE (0x1UL)

/* OUT11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT11_Pos (11UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT11_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT11_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT11_TOGGLE (0x1UL)

/* OUT12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT12_Pos (12UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT12_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT12_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT12_TOGGLE (0x1UL)

/* OUT13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT13_Pos (13UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT13_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT13_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT13_TOGGLE (0x1UL)

/* OUT14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT14_Pos (14UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT14_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT14_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT14_TOGGLE (0x1UL)

/* OUT15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT15_Pos (15UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT15_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT15_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT15_TOGGLE (0x1UL)

/* DIR0 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR0_Pos (16UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR0_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR0_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR0_TOGGLE (0x1UL)

/* DIR1 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR1_Pos (17UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR1_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR1_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR1_TOGGLE (0x1UL)

/* DIR2 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR2_Pos (18UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR2_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR2_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR2_TOGGLE (0x1UL)

/* DIR3 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR3_Pos (19UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR3_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR3_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR3_TOGGLE (0x1UL)

/* DIR4 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR4_Pos (20UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR4_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR4_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR4_TOGGLE (0x1UL)

/* DIR5 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR5_Pos (21UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR5_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR5_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR5_TOGGLE (0x1UL)

/* DIR6 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR6_Pos (22UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR6_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR6_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR6_TOGGLE (0x1UL)

/* DIR7 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR7_Pos (23UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR7_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR7_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR7_TOGGLE (0x1UL)

/* DIR8 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR8_Pos (24UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR8_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR8_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR8_TOGGLE (0x1UL)

/* DIR9 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR9_Pos (25UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR9_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR9_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR9_TOGGLE (0x1UL)

/* DIR10 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR10_Pos (26UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR10_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR10_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR10_TOGGLE (0x1UL)

/* DIR11 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR11_Pos (27UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR11_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR11_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR11_TOGGLE (0x1UL)

/* DIR12 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR12_Pos (28UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR12_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR12_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR12_TOGGLE (0x1UL)

/* DIR13 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR13_Pos (29UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR13_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR13_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR13_TOGGLE (0x1UL)

/* DIR14 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR14_Pos (30UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR14_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR14_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR14_TOGGLE (0x1UL)

/* DIR15 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR15_Pos (31UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR15_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR15_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR15_TOGGLE (0x1UL)


/**
  * @brief DIROUTBTGL [VPRCSR_NORDIC_DIROUTBTGL] DIROUTB Toggle
  */
  #define VPRCSR_NORDIC_DIROUTBTGL (0x00000BD5ul)
  #define VPRCSR_NORDIC_DIROUTBTGL_ResetValue (0x00000000UL)

/* OUTB0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB0_Pos (0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB0_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB0_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB0_TOGGLE (0x1UL)

/* OUTB1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB1_Pos (1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB1_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB1_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB1_TOGGLE (0x1UL)

/* OUTB2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB2_Pos (2UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB2_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB2_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB2_TOGGLE (0x1UL)

/* OUTB3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB3_Pos (3UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB3_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB3_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB3_TOGGLE (0x1UL)

/* OUTB4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB4_Pos (4UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB4_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB4_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB4_TOGGLE (0x1UL)

/* OUTB5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB5_Pos (5UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB5_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB5_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB5_TOGGLE (0x1UL)

/* OUTB6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB6_Pos (6UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB6_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB6_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB6_TOGGLE (0x1UL)

/* OUTB7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB7_Pos (7UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB7_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB7_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB7_TOGGLE (0x1UL)

/* OUTB8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB8_Pos (8UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB8_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB8_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB8_TOGGLE (0x1UL)

/* OUTB9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB9_Pos (9UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB9_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB9_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB9_TOGGLE (0x1UL)

/* OUTB10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB10_Pos (10UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB10_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB10_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB10_TOGGLE (0x1UL)

/* OUTB11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB11_Pos (11UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB11_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB11_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB11_TOGGLE (0x1UL)

/* OUTB12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB12_Pos (12UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB12_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB12_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB12_TOGGLE (0x1UL)

/* OUTB13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB13_Pos (13UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB13_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB13_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB13_TOGGLE (0x1UL)

/* OUTB14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB14_Pos (14UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB14_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB14_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB14_TOGGLE (0x1UL)

/* OUTB15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB15_Pos (15UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB15_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB15_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB15_TOGGLE (0x1UL)

/* DIRB0 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB0_Pos (16UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB0_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB0_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB0_TOGGLE (0x1UL)

/* DIRB1 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB1_Pos (17UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB1_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB1_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB1_TOGGLE (0x1UL)

/* DIRB2 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB2_Pos (18UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB2_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB2_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB2_TOGGLE (0x1UL)

/* DIRB3 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB3_Pos (19UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB3_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB3_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB3_TOGGLE (0x1UL)

/* DIRB4 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB4_Pos (20UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB4_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB4_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB4_TOGGLE (0x1UL)

/* DIRB5 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB5_Pos (21UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB5_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB5_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB5_TOGGLE (0x1UL)

/* DIRB6 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB6_Pos (22UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB6_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB6_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB6_TOGGLE (0x1UL)

/* DIRB7 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB7_Pos (23UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB7_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB7_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB7_TOGGLE (0x1UL)

/* DIRB8 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB8_Pos (24UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB8_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB8_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB8_TOGGLE (0x1UL)

/* DIRB9 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB9_Pos (25UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB9_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB9_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB9_TOGGLE (0x1UL)

/* DIRB10 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB10_Pos (26UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB10_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB10_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB10_TOGGLE (0x1UL)

/* DIRB11 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB11_Pos (27UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB11_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB11_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB11_TOGGLE (0x1UL)

/* DIRB12 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB12_Pos (28UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB12_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB12_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB12_TOGGLE (0x1UL)

/* DIRB13 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB13_Pos (29UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB13_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB13_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB13_TOGGLE (0x1UL)

/* DIRB14 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB14_Pos (30UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB14_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB14_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB14_TOGGLE (0x1UL)

/* DIRB15 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB15_Pos (31UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB15_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB15_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB15_TOGGLE (0x1UL)


/**
  * @brief OUTUBTGL [VPRCSR_NORDIC_OUTUBTGL] Buffered GPIO Unshifted Output Toggle
  */
  #define VPRCSR_NORDIC_OUTUBTGL (0x00000BD6ul)
  #define VPRCSR_NORDIC_OUTUBTGL_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN0_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN0_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN0_TOGGLE (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN1_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN1_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN1_TOGGLE (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN2_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN2_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN2_TOGGLE (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN3_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN3_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN3_TOGGLE (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN4_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN4_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN4_TOGGLE (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN5_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN5_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN5_TOGGLE (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN6_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN6_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN6_TOGGLE (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN7_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN7_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN7_TOGGLE (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN8_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN8_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN8_TOGGLE (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN9_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN9_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN9_TOGGLE (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN10_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN10_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN10_TOGGLE (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN11_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN11_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN11_TOGGLE (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN12_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN12_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN12_TOGGLE (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN13_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN13_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN13_TOGGLE (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN14_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN14_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN14_TOGGLE (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN15_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN15_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN15_TOGGLE (0x1UL)


/**
  * @brief OUTBS [VPRCSR_NORDIC_OUTBS] Buffered GPIO Output Dirty Status
  */
  #define VPRCSR_NORDIC_OUTBS (0x00000BD8ul)
  #define VPRCSR_NORDIC_OUTBS_ResetValue (0x00000000UL)

/* OUTB @Bits 0..31 : Write to OUTB (if not dirty) */
  #define VPRCSR_NORDIC_OUTBS_OUTB_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBS_OUTB_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_OUTBS_OUTB_Pos)

/* DIRTYBIT @Bit 0 : Read Buffer Dirty status */
  #define VPRCSR_NORDIC_OUTBS_DIRTYBIT_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBS_DIRTYBIT_Msk (0x1UL << VPRCSR_NORDIC_OUTBS_DIRTYBIT_Pos)
  #define VPRCSR_NORDIC_OUTBS_DIRTYBIT_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBS_DIRTYBIT_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBS_DIRTYBIT_CLEAN (0x0UL)
  #define VPRCSR_NORDIC_OUTBS_DIRTYBIT_DIRTY (0x1UL)


/**
  * @brief DIRBS [VPRCSR_NORDIC_DIRBS] Buffered GPIO pin Direction Dirty Status
  */
  #define VPRCSR_NORDIC_DIRBS (0x00000BD9ul)
  #define VPRCSR_NORDIC_DIRBS_ResetValue (0x00000000UL)

/* DIRB @Bits 0..31 : Write to DIRB (if not dirty) */
  #define VPRCSR_NORDIC_DIRBS_DIRB_Pos (0UL)
  #define VPRCSR_NORDIC_DIRBS_DIRB_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_DIRBS_DIRB_Pos)

/* DIRTYBIT @Bit 0 : Read Buffer Dirty status */
  #define VPRCSR_NORDIC_DIRBS_DIRTYBIT_Pos (0UL)
  #define VPRCSR_NORDIC_DIRBS_DIRTYBIT_Msk (0x1UL << VPRCSR_NORDIC_DIRBS_DIRTYBIT_Pos)
  #define VPRCSR_NORDIC_DIRBS_DIRTYBIT_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBS_DIRTYBIT_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBS_DIRTYBIT_CLEAN (0x0UL)
  #define VPRCSR_NORDIC_DIRBS_DIRTYBIT_DIRTY (0x1UL)


/**
  * @brief DIROUTBS [VPRCSR_NORDIC_DIROUTBS] Combination of DIRB and OUTB Dirty Status
  */
  #define VPRCSR_NORDIC_DIROUTBS (0x00000BDAul)
  #define VPRCSR_NORDIC_DIROUTBS_ResetValue (0x00000000UL)

/* DIROUTB @Bits 0..31 : Write to DIROUTB (if not dirty) */
  #define VPRCSR_NORDIC_DIROUTBS_DIROUTB_Pos (0UL)
  #define VPRCSR_NORDIC_DIROUTBS_DIROUTB_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_DIROUTBS_DIROUTB_Pos) /*!< Bit mask of DIROUTB
                                                                            field.*/

/* DIRTYBIT @Bit 0 : Read Combination (OR) of DIRB and OUTB Dirty status */
  #define VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_Pos (0UL)
  #define VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_Pos)
  #define VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_CLEAN (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_DIRTY (0x1UL)


/**
  * @brief OUTUBS [VPRCSR_NORDIC_OUTUBS] Buffered GPIO Unshifted Output Dirty Status
  */
  #define VPRCSR_NORDIC_OUTUBS (0x00000BDBul)
  #define VPRCSR_NORDIC_OUTUBS_ResetValue (0x00000000UL)

/* OUTUB @Bits 0..31 : Write to OUTUB (if not dirty) */
  #define VPRCSR_NORDIC_OUTUBS_OUTUB_Pos (0UL)
  #define VPRCSR_NORDIC_OUTUBS_OUTUB_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_OUTUBS_OUTUB_Pos)

/* DIRTYBIT @Bit 0 : Read Buffer Dirty status */
  #define VPRCSR_NORDIC_OUTUBS_DIRTYBIT_Pos (0UL)
  #define VPRCSR_NORDIC_OUTUBS_DIRTYBIT_Msk (0x1UL << VPRCSR_NORDIC_OUTUBS_DIRTYBIT_Pos)
  #define VPRCSR_NORDIC_OUTUBS_DIRTYBIT_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBS_DIRTYBIT_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBS_DIRTYBIT_CLEAN (0x0UL)
  #define VPRCSR_NORDIC_OUTUBS_DIRTYBIT_DIRTY (0x1UL)


/**
  * @brief OUTBD [VPRCSR_NORDIC_OUTBD] Concatenation of Buffered GPIO Output and GPIO Output
  */
  #define VPRCSR_NORDIC_OUTBD (0x00000BE0ul)
  #define VPRCSR_NORDIC_OUTBD_ResetValue (0x00000000UL)

/* OUT @Bits 0..15 : GPIO Output */
  #define VPRCSR_NORDIC_OUTBD_OUT_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBD_OUT_Msk (0xFFFFUL << VPRCSR_NORDIC_OUTBD_OUT_Pos)

/* OUTB @Bits 16..31 : Buffered GPIO Output */
  #define VPRCSR_NORDIC_OUTBD_OUTB_Pos (16UL)
  #define VPRCSR_NORDIC_OUTBD_OUTB_Msk (0xFFFFUL << VPRCSR_NORDIC_OUTBD_OUTB_Pos)


/**
  * @brief OUTBDTGL [VPRCSR_NORDIC_OUTBDTGL] OUTBD Toggle
  */
  #define VPRCSR_NORDIC_OUTBDTGL (0x00000BE1ul)
  #define VPRCSR_NORDIC_OUTBDTGL_ResetValue (0x00000000UL)

/* OUT0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT0_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT0_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT0_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT0_TOGGLE (0x1UL)

/* OUT1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT1_Pos (1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT1_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT1_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT1_TOGGLE (0x1UL)

/* OUT2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT2_Pos (2UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT2_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT2_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT2_TOGGLE (0x1UL)

/* OUT3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT3_Pos (3UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT3_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT3_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT3_TOGGLE (0x1UL)

/* OUT4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT4_Pos (4UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT4_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT4_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT4_TOGGLE (0x1UL)

/* OUT5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT5_Pos (5UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT5_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT5_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT5_TOGGLE (0x1UL)

/* OUT6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT6_Pos (6UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT6_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT6_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT6_TOGGLE (0x1UL)

/* OUT7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT7_Pos (7UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT7_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT7_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT7_TOGGLE (0x1UL)

/* OUT8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT8_Pos (8UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT8_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT8_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT8_TOGGLE (0x1UL)

/* OUT9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT9_Pos (9UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT9_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT9_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT9_TOGGLE (0x1UL)

/* OUT10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT10_Pos (10UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT10_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT10_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT10_TOGGLE (0x1UL)

/* OUT11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT11_Pos (11UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT11_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT11_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT11_TOGGLE (0x1UL)

/* OUT12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT12_Pos (12UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT12_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT12_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT12_TOGGLE (0x1UL)

/* OUT13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT13_Pos (13UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT13_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT13_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT13_TOGGLE (0x1UL)

/* OUT14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT14_Pos (14UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT14_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT14_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT14_TOGGLE (0x1UL)

/* OUT15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT15_Pos (15UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT15_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT15_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT15_TOGGLE (0x1UL)

/* OUTB0 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB0_Pos (16UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB0_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB0_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB0_TOGGLE (0x1UL)

/* OUTB1 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB1_Pos (17UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB1_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB1_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB1_TOGGLE (0x1UL)

/* OUTB2 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB2_Pos (18UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB2_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB2_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB2_TOGGLE (0x1UL)

/* OUTB3 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB3_Pos (19UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB3_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB3_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB3_TOGGLE (0x1UL)

/* OUTB4 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB4_Pos (20UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB4_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB4_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB4_TOGGLE (0x1UL)

/* OUTB5 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB5_Pos (21UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB5_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB5_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB5_TOGGLE (0x1UL)

/* OUTB6 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB6_Pos (22UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB6_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB6_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB6_TOGGLE (0x1UL)

/* OUTB7 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB7_Pos (23UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB7_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB7_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB7_TOGGLE (0x1UL)

/* OUTB8 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB8_Pos (24UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB8_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB8_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB8_TOGGLE (0x1UL)

/* OUTB9 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB9_Pos (25UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB9_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB9_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB9_TOGGLE (0x1UL)

/* OUTB10 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB10_Pos (26UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB10_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB10_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB10_TOGGLE (0x1UL)

/* OUTB11 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB11_Pos (27UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB11_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB11_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB11_TOGGLE (0x1UL)

/* OUTB12 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB12_Pos (28UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB12_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB12_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB12_TOGGLE (0x1UL)

/* OUTB13 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB13_Pos (29UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB13_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB13_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB13_TOGGLE (0x1UL)

/* OUTB14 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB14_Pos (30UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB14_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB14_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB14_TOGGLE (0x1UL)

/* OUTB15 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB15_Pos (31UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB15_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB15_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB15_TOGGLE (0x1UL)


/**
  * @brief OUTBDS [VPRCSR_NORDIC_OUTBDS] OUTBD Dirty Status
  */
  #define VPRCSR_NORDIC_OUTBDS (0x00000BE2ul)
  #define VPRCSR_NORDIC_OUTBDS_ResetValue (0x00000000UL)

/* OUTBD @Bits 0..31 : Write to OUTBD register (if not dirty) */
  #define VPRCSR_NORDIC_OUTBDS_OUTBD_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBDS_OUTBD_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_OUTBDS_OUTBD_Pos)

/* DIRTYBIT @Bit 0 : Read OUTB and OUT parallel write Dirty status */
  #define VPRCSR_NORDIC_OUTBDS_DIRTYBIT_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBDS_DIRTYBIT_Msk (0x1UL << VPRCSR_NORDIC_OUTBDS_DIRTYBIT_Pos)
  #define VPRCSR_NORDIC_OUTBDS_DIRTYBIT_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDS_DIRTYBIT_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDS_DIRTYBIT_CLEAN (0x0UL)
  #define VPRCSR_NORDIC_OUTBDS_DIRTYBIT_DIRTY (0x1UL)


/**
  * @brief OUTMODE [VPRCSR_NORDIC_OUTMODE] Serial output mode
  */
  #define VPRCSR_NORDIC_OUTMODE (0x00000BE3ul)
  #define VPRCSR_NORDIC_OUTMODE_ResetValue (0x00000000UL)

/* MODE @Bits 0..2 : Mode */
  #define VPRCSR_NORDIC_OUTMODE_MODE_Pos (0UL)
  #define VPRCSR_NORDIC_OUTMODE_MODE_Msk (0x7UL << VPRCSR_NORDIC_OUTMODE_MODE_Pos)
  #define VPRCSR_NORDIC_OUTMODE_MODE_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_MODE_Max (0x4UL)
  #define VPRCSR_NORDIC_OUTMODE_MODE_NoShifting (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_MODE_OutBBuf (0x2UL)
  #define VPRCSR_NORDIC_OUTMODE_MODE_OutBBufToggleClk (0x4UL)

/* SHIFTMODE @Bit 0 : Shift mode */
  #define VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Pos (0UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Msk (0x1UL << VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Pos)
  #define VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Disabled (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Enabled (0x1UL)

/* FRAMEWIDTH @Bits 16..20 : Output frame width MODE=0x1: BITS=2^FRAMEWIDTH. Legal FRAMEWIDTH values: 0, 1, 2, 3, 4 MODE=0x2:
                             BITS=FRAMEWIDTH. Legal values: 1, 2, 3, 4, 5, 6, 7, 8, 16 (9-15 are not legal) MODE=0x4:
                             BITS=FRAMEWIDTH. Legal values: 1, 2, 3, 4, 5, 6, 7, 8 */

  #define VPRCSR_NORDIC_OUTMODE_FRAMEWIDTH_Pos (16UL)
  #define VPRCSR_NORDIC_OUTMODE_FRAMEWIDTH_Msk (0x1FUL << VPRCSR_NORDIC_OUTMODE_FRAMEWIDTH_Pos) /*!< Bit mask of FRAMEWIDTH
                                                                            field.*/
  #define VPRCSR_NORDIC_OUTMODE_FRAMEWIDTH_Min (0x00UL)
  #define VPRCSR_NORDIC_OUTMODE_FRAMEWIDTH_Max (0x10UL)

/* SHIFSIZE @Bits 16..19 : Shift size. Only applies if Shift mode is enabled */
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Pos (16UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Msk (0xFUL << VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Pos)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Max (0x4UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT1 (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT2 (0x1UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT4 (0x2UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT8 (0x3UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT16 (0x4UL)

/* SEL @Bits 24..27 : Start index of VIO used for shifting from OUTB and to INB. For OUTB, the number of left shifts is given by
                      (MODE is OUTMODE.MODE): if (MODE < 2) then SHIFTS = 0; else if ((MODE==4) & (SEL==0)) then SHIFTS = 1;
                      else SHIFTS = SEL; For INB, the number of left shifts is given by (MODE is INMODE.MODE): if (MODE < 2)
                      then SHIFTS = 0; else if ((MODE==2) & (INSEL==1) & (FRAMEWIDTH==1)) then SHIFTS = 2; else if (SEL==0) then
                      SHIFTS = 1; else SHIFTS = SEL; */

  #define VPRCSR_NORDIC_OUTMODE_SEL_Pos (24UL)
  #define VPRCSR_NORDIC_OUTMODE_SEL_Msk (0xFUL << VPRCSR_NORDIC_OUTMODE_SEL_Pos)
  #define VPRCSR_NORDIC_OUTMODE_SEL_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_SEL_Max (0xFUL)


/**
  * @brief OUTMODEB [VPRCSR_NORDIC_OUTMODEB] Buffered OUTMODE register
  */
  #define VPRCSR_NORDIC_OUTMODEB (0x00000BE4ul)
  #define VPRCSR_NORDIC_OUTMODEB_ResetValue (0x00000000UL)

/* MODE @Bits 0..2 : Mode */
  #define VPRCSR_NORDIC_OUTMODEB_MODE_Pos (0UL)
  #define VPRCSR_NORDIC_OUTMODEB_MODE_Msk (0x7UL << VPRCSR_NORDIC_OUTMODEB_MODE_Pos)
  #define VPRCSR_NORDIC_OUTMODEB_MODE_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTMODEB_MODE_Max (0x4UL)
  #define VPRCSR_NORDIC_OUTMODEB_MODE_NoShifting (0x0UL)
  #define VPRCSR_NORDIC_OUTMODEB_MODE_OutBBuf (0x2UL)
  #define VPRCSR_NORDIC_OUTMODEB_MODE_OutBBufToggleClk (0x4UL)

/* FRAMEWIDTH @Bits 16..20 : Frame width in bits */
  #define VPRCSR_NORDIC_OUTMODEB_FRAMEWIDTH_Pos (16UL)
  #define VPRCSR_NORDIC_OUTMODEB_FRAMEWIDTH_Msk (0x1FUL << VPRCSR_NORDIC_OUTMODEB_FRAMEWIDTH_Pos) /*!< Bit mask of FRAMEWIDTH
                                                                            field.*/
  #define VPRCSR_NORDIC_OUTMODEB_FRAMEWIDTH_Min (0x00UL)
  #define VPRCSR_NORDIC_OUTMODEB_FRAMEWIDTH_Max (0x10UL)

/* SEL @Bits 24..27 : Start index of VIO used for shifting from OUTB and to INB. For OUTB, the number of left shifts is given by
                      (MODE is OUTMODE.MODE): if (MODE < 2) then SHIFTS = 0; else if ((MODE==4) & (SEL==0)) then SHIFTS = 1;
                      else SHIFTS = SEL; For INB, the number of left shifts is given by (MODE is INMODE.MODE): if (MODE < 2)
                      then SHIFTS = 0; else if ((MODE==2) & (INSEL==1) & (FRAMEWIDTH==1)) then SHIFTS = 2; else if (SEL==0) then
                      SHIFTS = 1; else SHIFTS = SEL; */

  #define VPRCSR_NORDIC_OUTMODEB_SEL_Pos (24UL)
  #define VPRCSR_NORDIC_OUTMODEB_SEL_Msk (0xFUL << VPRCSR_NORDIC_OUTMODEB_SEL_Pos)
  #define VPRCSR_NORDIC_OUTMODEB_SEL_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTMODEB_SEL_Max (0xFUL)


/**
  * @brief INMODEB [VPRCSR_NORDIC_INMODEB] Buffered INMODE register
  */
  #define VPRCSR_NORDIC_INMODEB (0x00000BE5ul)
  #define VPRCSR_NORDIC_INMODEB_ResetValue (0x00000000UL)

/* MODE @Bits 0..1 : Input Mode */
  #define VPRCSR_NORDIC_INMODEB_MODE_Pos (0UL)
  #define VPRCSR_NORDIC_INMODEB_MODE_Msk (0x3UL << VPRCSR_NORDIC_INMODEB_MODE_Pos)
  #define VPRCSR_NORDIC_INMODEB_MODE_Min (0x0UL)
  #define VPRCSR_NORDIC_INMODEB_MODE_Max (0x3UL)
  #define VPRCSR_NORDIC_INMODEB_MODE_CONTINUOUS (0x0UL)
  #define VPRCSR_NORDIC_INMODEB_MODE_EVENT (0x1UL)
  #define VPRCSR_NORDIC_INMODEB_MODE_SHIFT (0x2UL)
  #define VPRCSR_NORDIC_INMODEB_MODE_SHIFTA (0x3UL)


/**
  * @brief INB [VPRCSR_NORDIC_INB] Buffered GPIO input
  */
  #define VPRCSR_NORDIC_INB (0x00000BE6ul)
  #define VPRCSR_NORDIC_INB_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_INB_PIN0_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN0_Pos)
  #define VPRCSR_NORDIC_INB_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN0_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN0_HIGH (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_INB_PIN1_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN1_Pos)
  #define VPRCSR_NORDIC_INB_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN1_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN1_HIGH (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_INB_PIN2_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN2_Pos)
  #define VPRCSR_NORDIC_INB_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN2_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN2_HIGH (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_INB_PIN3_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN3_Pos)
  #define VPRCSR_NORDIC_INB_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN3_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN3_HIGH (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_INB_PIN4_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN4_Pos)
  #define VPRCSR_NORDIC_INB_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN4_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN4_HIGH (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_INB_PIN5_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN5_Pos)
  #define VPRCSR_NORDIC_INB_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN5_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN5_HIGH (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_INB_PIN6_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN6_Pos)
  #define VPRCSR_NORDIC_INB_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN6_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN6_HIGH (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_INB_PIN7_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN7_Pos)
  #define VPRCSR_NORDIC_INB_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN7_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN7_HIGH (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_INB_PIN8_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN8_Pos)
  #define VPRCSR_NORDIC_INB_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN8_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN8_HIGH (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_INB_PIN9_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN9_Pos)
  #define VPRCSR_NORDIC_INB_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN9_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN9_HIGH (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_INB_PIN10_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN10_Pos)
  #define VPRCSR_NORDIC_INB_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN10_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN10_HIGH (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_INB_PIN11_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN11_Pos)
  #define VPRCSR_NORDIC_INB_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN11_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN11_HIGH (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_INB_PIN12_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN12_Pos)
  #define VPRCSR_NORDIC_INB_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN12_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN12_HIGH (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_INB_PIN13_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN13_Pos)
  #define VPRCSR_NORDIC_INB_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN13_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN13_HIGH (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_INB_PIN14_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN14_Pos)
  #define VPRCSR_NORDIC_INB_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN14_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN14_HIGH (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_INB_PIN15_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN15_Pos)
  #define VPRCSR_NORDIC_INB_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN15_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN15_HIGH (0x1UL)


/**
  * @brief OUTUB [VPRCSR_NORDIC_OUTUB] Buffered write to Unshifted parts of OUT
  */
  #define VPRCSR_NORDIC_OUTUB (0x00000BE7ul)
  #define VPRCSR_NORDIC_OUTUB_ResetValue (0x00000000UL)

/* OUT @Bits 0..15 : Written to OUT MSBs that are not driven by OUTB shifting. */
  #define VPRCSR_NORDIC_OUTUB_OUT_Pos (0UL)
  #define VPRCSR_NORDIC_OUTUB_OUT_Msk (0xFFFFUL << VPRCSR_NORDIC_OUTUB_OUT_Pos)


/**
  * @brief SHIFTCNTCOMP [VPRCSR_NORDIC_SHIFTCNTCOMP] SHIFTCNTIN/OUT compare values
  */
  #define VPRCSR_NORDIC_SHIFTCNTCOMP (0x00000BE8ul)
  #define VPRCSR_NORDIC_SHIFTCNTCOMP_ResetValue (0x00000000UL)

/* OUTCOMPVAL @Bits 0..5 : Compare value for SHIFTCNTOUT */
  #define VPRCSR_NORDIC_SHIFTCNTCOMP_OUTCOMPVAL_Pos (0UL)
  #define VPRCSR_NORDIC_SHIFTCNTCOMP_OUTCOMPVAL_Msk (0x3FUL << VPRCSR_NORDIC_SHIFTCNTCOMP_OUTCOMPVAL_Pos) /*!< Bit mask of
                                                                            OUTCOMPVAL field.*/

/* INCOMPVAL @Bits 8..13 : Compare value for SHIFTCNTIN */
  #define VPRCSR_NORDIC_SHIFTCNTCOMP_INCOMPVAL_Pos (8UL)
  #define VPRCSR_NORDIC_SHIFTCNTCOMP_INCOMPVAL_Msk (0x3FUL << VPRCSR_NORDIC_SHIFTCNTCOMP_INCOMPVAL_Pos) /*!< Bit mask of
                                                                            INCOMPVAL field.*/


/**
  * @brief WAITEVENT [VPRCSR_NORDIC_WAITEVENT] Wait for internal event
  */
  #define VPRCSR_NORDIC_WAITEVENT (0x00000BE9ul)
  #define VPRCSR_NORDIC_WAITEVENT_ResetValue (0x00000000UL)

/* IEVENTCNT0 @Bit 0 : CNT0's event */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTCNT0_Pos (0UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTCNT0_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTCNT0_Pos) /*!< Bit mask of IEVENTCNT0
                                                                            field.*/

/* IEVENTCNT1 @Bit 1 : CNT1's event */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTCNT1_Pos (1UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTCNT1_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTCNT1_Pos) /*!< Bit mask of IEVENTCNT1
                                                                            field.*/

/* IEVENTVIO @Bit 2 : Event generated by a specific VIO pin */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTVIO_Pos (2UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTVIO_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTVIO_Pos) /*!< Bit mask of IEVENTVIO
                                                                            field.*/

/* IEVENTVIOANY @Bit 3 : Event generated by a change in any VIO pin */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTVIOANY_Pos (3UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTVIOANY_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTVIOANY_Pos) /*!< Bit mask of
                                                                            IEVENTVIOANY field.*/

/* IEVENTVTASKSANY @Bit 4 : Event when any TASK is triggered */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTVTASKSANY_Pos (4UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTVTASKSANY_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTVTASKSANY_Pos) /*!< Bit mask of
                                                                            IEVENTVTASKSANY field.*/

/* IEVENTSHIFTCNTOUT @Bit 5 : Event for SHIFTCNTOUT when reaching a compare value defined in SHIFTCNTCOMP */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTSHIFTCNTOUT_Pos (5UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTSHIFTCNTOUT_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTSHIFTCNTOUT_Pos) /*!< Bit mask
                                                                            of IEVENTSHIFTCNTOUT field.*/

/* IEVENTSHIFTCNTIN @Bit 6 : Event for SHIFTCNTIN when reaching a compare value defined in SHIFTCNTCOMP */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTSHIFTCNTIN_Pos (6UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTSHIFTCNTIN_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTSHIFTCNTIN_Pos) /*!< Bit mask of
                                                                            IEVENTSHIFTCNTIN field.*/


/**
  * @brief WAITINPUT [VPRCSR_NORDIC_WAITINPUT] Wait input
  */
  #define VPRCSR_NORDIC_WAITINPUT (0x00000BEAul)
  #define VPRCSR_NORDIC_WAITINPUT_ResetValue (0x00000000UL)

/* VTASKSVIO @Bits 0..31 : VTASKS or VIO pins */
  #define VPRCSR_NORDIC_WAITINPUT_VTASKSVIO_Pos (0UL)
  #define VPRCSR_NORDIC_WAITINPUT_VTASKSVIO_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_WAITINPUT_VTASKSVIO_Pos) /*!< Bit mask of
                                                                            VTASKSVIO field.*/


/**
  * @brief RTPINTEN [VPRCSR_NORDIC_RTPINTEN] Interrupt enable
  */
  #define VPRCSR_NORDIC_RTPINTEN (0x00000BEBul)
  #define VPRCSR_NORDIC_RTPINTEN_ResetValue (0x00000000UL)

/* CNT0 @Bit 0 : Interrupt enable for IEVENTCNT0, alias of VPRNORDICCTRL.CNTIRQENABLE */
  #define VPRCSR_NORDIC_RTPINTEN_CNT0_Pos (0UL)
  #define VPRCSR_NORDIC_RTPINTEN_CNT0_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_CNT0_Pos)

/* CNT1 @Bit 1 : Interrupt enable for IEVENTCNT1 */
  #define VPRCSR_NORDIC_RTPINTEN_CNT1_Pos (1UL)
  #define VPRCSR_NORDIC_RTPINTEN_CNT1_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_CNT1_Pos)

/* VIO @Bit 2 : Interrupt enable for IEVENTVIO */
  #define VPRCSR_NORDIC_RTPINTEN_VIO_Pos (2UL)
  #define VPRCSR_NORDIC_RTPINTEN_VIO_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_VIO_Pos)

/* VIOANY @Bit 3 : Interrupt enable for IEVENTVIOANY */
  #define VPRCSR_NORDIC_RTPINTEN_VIOANY_Pos (3UL)
  #define VPRCSR_NORDIC_RTPINTEN_VIOANY_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_VIOANY_Pos)

/* VTASKSANY @Bit 4 : Interrupt enable for IEVENTVTASKSANY */
  #define VPRCSR_NORDIC_RTPINTEN_VTASKSANY_Pos (4UL)
  #define VPRCSR_NORDIC_RTPINTEN_VTASKSANY_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_VTASKSANY_Pos) /*!< Bit mask of VTASKSANY
                                                                            field.*/

/* SHIFTCNTOUT @Bit 5 : Interrupt enable for IEVENTSHIFTCNTOUT */
  #define VPRCSR_NORDIC_RTPINTEN_SHIFTCNTOUT_Pos (5UL)
  #define VPRCSR_NORDIC_RTPINTEN_SHIFTCNTOUT_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_SHIFTCNTOUT_Pos) /*!< Bit mask of SHIFTCNTOUT
                                                                            field.*/

/* SHIFTCNTIN @Bit 6 : Interrupt enable for IEVENTSHIFTCNTIN */
  #define VPRCSR_NORDIC_RTPINTEN_SHIFTCNTIN_Pos (6UL)
  #define VPRCSR_NORDIC_RTPINTEN_SHIFTCNTIN_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_SHIFTCNTIN_Pos) /*!< Bit mask of SHIFTCNTIN
                                                                            field.*/


/**
  * @brief OUTUBTRIG [VPRCSR_NORDIC_OUTUBTRIG] OUTUB trigger select
  */
  #define VPRCSR_NORDIC_OUTUBTRIG (0x00000BECul)
  #define VPRCSR_NORDIC_OUTUBTRIG_ResetValue (0x00000000UL)

/* SEL @Bits 0..2 : OUTUBTRIG select */
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_Pos (0UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_Msk (0x7UL << VPRCSR_NORDIC_OUTUBTRIG_SEL_Pos)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_Max (0x6UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTSHIFTCNTIN (0x6UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTSHIFTCNTOUT (0x5UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTVTASKSANY (0x4UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTVIOANY (0x3UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTVIO (0x2UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTCNT1 (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTCNT0 (0x0UL)




/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct WDT ======================================================== */
/**
  * @brief Watchdog Timer
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_TIMEOUT;
    __IOM uint32_t EVENTS_STOPPED;
    __IM uint32_t RESERVED2[30];
    __IOM uint32_t PUBLISH_TIMEOUT;
    __IOM uint32_t PUBLISH_STOPPED;
    __IM uint32_t RESERVED3[95];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED4[6];
    __IOM uint32_t NMIENSET;
    __IOM uint32_t NMIENCLR;
    __IM uint32_t RESERVED5[53];
    __IM uint32_t RUNSTATUS;
    __IM uint32_t REQSTATUS;
    __IM uint32_t RESERVED6[63];
    __IOM uint32_t CRV;
    __IOM uint32_t RREN;
    __IOM uint32_t CONFIG;
    __IM uint32_t RESERVED7[4];
    __OM uint32_t TSEN;
    __IM uint32_t RESERVED8[55];
    __OM uint32_t RR[8];
  } NRF_WDT_Type;

/* WDT_TASKS_START: Start WDT */
  #define WDT_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start WDT */
  #define WDT_TASKS_START_TASKS_START_Pos (0UL)
  #define WDT_TASKS_START_TASKS_START_Msk (0x1UL << WDT_TASKS_START_TASKS_START_Pos)
  #define WDT_TASKS_START_TASKS_START_Min (0x1UL)
  #define WDT_TASKS_START_TASKS_START_Max (0x1UL)
  #define WDT_TASKS_START_TASKS_START_Trigger (0x1UL)


/* WDT_TASKS_STOP: Stop WDT */
  #define WDT_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop WDT */
  #define WDT_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define WDT_TASKS_STOP_TASKS_STOP_Msk (0x1UL << WDT_TASKS_STOP_TASKS_STOP_Pos)
  #define WDT_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define WDT_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define WDT_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* WDT_SUBSCRIBE_START: Subscribe configuration for task START */
  #define WDT_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define WDT_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define WDT_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << WDT_SUBSCRIBE_START_CHIDX_Pos)
  #define WDT_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define WDT_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define WDT_SUBSCRIBE_START_EN_Pos (31UL)
  #define WDT_SUBSCRIBE_START_EN_Msk (0x1UL << WDT_SUBSCRIBE_START_EN_Pos)
  #define WDT_SUBSCRIBE_START_EN_Min (0x0UL)
  #define WDT_SUBSCRIBE_START_EN_Max (0x1UL)
  #define WDT_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define WDT_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* WDT_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define WDT_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define WDT_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define WDT_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << WDT_SUBSCRIBE_STOP_CHIDX_Pos)
  #define WDT_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define WDT_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define WDT_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define WDT_SUBSCRIBE_STOP_EN_Msk (0x1UL << WDT_SUBSCRIBE_STOP_EN_Pos)
  #define WDT_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define WDT_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define WDT_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define WDT_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* WDT_EVENTS_TIMEOUT: Watchdog timeout */
  #define WDT_EVENTS_TIMEOUT_ResetValue (0x00000000UL)

/* EVENTS_TIMEOUT @Bit 0 : Watchdog timeout */
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Pos (0UL)
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Msk (0x1UL << WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Pos) /*!< Bit mask of EVENTS_TIMEOUT
                                                                            field.*/
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Min (0x0UL)
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Max (0x1UL)
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_NotGenerated (0x0UL)
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Generated (0x1UL)


/* WDT_EVENTS_STOPPED: Watchdog stopped */
  #define WDT_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : Watchdog stopped */
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << WDT_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED
                                                                            field.*/
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* WDT_PUBLISH_TIMEOUT: Publish configuration for event TIMEOUT */
  #define WDT_PUBLISH_TIMEOUT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event TIMEOUT will publish to */
  #define WDT_PUBLISH_TIMEOUT_CHIDX_Pos (0UL)
  #define WDT_PUBLISH_TIMEOUT_CHIDX_Msk (0xFFUL << WDT_PUBLISH_TIMEOUT_CHIDX_Pos)
  #define WDT_PUBLISH_TIMEOUT_CHIDX_Min (0x00UL)
  #define WDT_PUBLISH_TIMEOUT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define WDT_PUBLISH_TIMEOUT_EN_Pos (31UL)
  #define WDT_PUBLISH_TIMEOUT_EN_Msk (0x1UL << WDT_PUBLISH_TIMEOUT_EN_Pos)
  #define WDT_PUBLISH_TIMEOUT_EN_Min (0x0UL)
  #define WDT_PUBLISH_TIMEOUT_EN_Max (0x1UL)
  #define WDT_PUBLISH_TIMEOUT_EN_Disabled (0x0UL)
  #define WDT_PUBLISH_TIMEOUT_EN_Enabled (0x1UL)


/* WDT_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define WDT_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define WDT_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define WDT_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << WDT_PUBLISH_STOPPED_CHIDX_Pos)
  #define WDT_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define WDT_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define WDT_PUBLISH_STOPPED_EN_Pos (31UL)
  #define WDT_PUBLISH_STOPPED_EN_Msk (0x1UL << WDT_PUBLISH_STOPPED_EN_Pos)
  #define WDT_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define WDT_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define WDT_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define WDT_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* WDT_INTENSET: Enable interrupt */
  #define WDT_INTENSET_ResetValue (0x00000000UL)

/* TIMEOUT @Bit 0 : Write '1' to enable interrupt for event TIMEOUT */
  #define WDT_INTENSET_TIMEOUT_Pos (0UL)
  #define WDT_INTENSET_TIMEOUT_Msk (0x1UL << WDT_INTENSET_TIMEOUT_Pos)
  #define WDT_INTENSET_TIMEOUT_Min (0x0UL)
  #define WDT_INTENSET_TIMEOUT_Max (0x1UL)
  #define WDT_INTENSET_TIMEOUT_Set (0x1UL)
  #define WDT_INTENSET_TIMEOUT_Disabled (0x0UL)
  #define WDT_INTENSET_TIMEOUT_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define WDT_INTENSET_STOPPED_Pos (1UL)
  #define WDT_INTENSET_STOPPED_Msk (0x1UL << WDT_INTENSET_STOPPED_Pos)
  #define WDT_INTENSET_STOPPED_Min (0x0UL)
  #define WDT_INTENSET_STOPPED_Max (0x1UL)
  #define WDT_INTENSET_STOPPED_Set (0x1UL)
  #define WDT_INTENSET_STOPPED_Disabled (0x0UL)
  #define WDT_INTENSET_STOPPED_Enabled (0x1UL)


/* WDT_INTENCLR: Disable interrupt */
  #define WDT_INTENCLR_ResetValue (0x00000000UL)

/* TIMEOUT @Bit 0 : Write '1' to disable interrupt for event TIMEOUT */
  #define WDT_INTENCLR_TIMEOUT_Pos (0UL)
  #define WDT_INTENCLR_TIMEOUT_Msk (0x1UL << WDT_INTENCLR_TIMEOUT_Pos)
  #define WDT_INTENCLR_TIMEOUT_Min (0x0UL)
  #define WDT_INTENCLR_TIMEOUT_Max (0x1UL)
  #define WDT_INTENCLR_TIMEOUT_Clear (0x1UL)
  #define WDT_INTENCLR_TIMEOUT_Disabled (0x0UL)
  #define WDT_INTENCLR_TIMEOUT_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define WDT_INTENCLR_STOPPED_Pos (1UL)
  #define WDT_INTENCLR_STOPPED_Msk (0x1UL << WDT_INTENCLR_STOPPED_Pos)
  #define WDT_INTENCLR_STOPPED_Min (0x0UL)
  #define WDT_INTENCLR_STOPPED_Max (0x1UL)
  #define WDT_INTENCLR_STOPPED_Clear (0x1UL)
  #define WDT_INTENCLR_STOPPED_Disabled (0x0UL)
  #define WDT_INTENCLR_STOPPED_Enabled (0x1UL)


/* WDT_NMIENSET: Enable interrupt */
  #define WDT_NMIENSET_ResetValue (0x00000000UL)

/* TIMEOUT @Bit 0 : Write '1' to enable interrupt for event TIMEOUT */
  #define WDT_NMIENSET_TIMEOUT_Pos (0UL)
  #define WDT_NMIENSET_TIMEOUT_Msk (0x1UL << WDT_NMIENSET_TIMEOUT_Pos)
  #define WDT_NMIENSET_TIMEOUT_Min (0x0UL)
  #define WDT_NMIENSET_TIMEOUT_Max (0x1UL)
  #define WDT_NMIENSET_TIMEOUT_Set (0x1UL)
  #define WDT_NMIENSET_TIMEOUT_Disabled (0x0UL)
  #define WDT_NMIENSET_TIMEOUT_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define WDT_NMIENSET_STOPPED_Pos (1UL)
  #define WDT_NMIENSET_STOPPED_Msk (0x1UL << WDT_NMIENSET_STOPPED_Pos)
  #define WDT_NMIENSET_STOPPED_Min (0x0UL)
  #define WDT_NMIENSET_STOPPED_Max (0x1UL)
  #define WDT_NMIENSET_STOPPED_Set (0x1UL)
  #define WDT_NMIENSET_STOPPED_Disabled (0x0UL)
  #define WDT_NMIENSET_STOPPED_Enabled (0x1UL)


/* WDT_NMIENCLR: Disable interrupt */
  #define WDT_NMIENCLR_ResetValue (0x00000000UL)

/* TIMEOUT @Bit 0 : Write '1' to disable interrupt for event TIMEOUT */
  #define WDT_NMIENCLR_TIMEOUT_Pos (0UL)
  #define WDT_NMIENCLR_TIMEOUT_Msk (0x1UL << WDT_NMIENCLR_TIMEOUT_Pos)
  #define WDT_NMIENCLR_TIMEOUT_Min (0x0UL)
  #define WDT_NMIENCLR_TIMEOUT_Max (0x1UL)
  #define WDT_NMIENCLR_TIMEOUT_Clear (0x1UL)
  #define WDT_NMIENCLR_TIMEOUT_Disabled (0x0UL)
  #define WDT_NMIENCLR_TIMEOUT_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define WDT_NMIENCLR_STOPPED_Pos (1UL)
  #define WDT_NMIENCLR_STOPPED_Msk (0x1UL << WDT_NMIENCLR_STOPPED_Pos)
  #define WDT_NMIENCLR_STOPPED_Min (0x0UL)
  #define WDT_NMIENCLR_STOPPED_Max (0x1UL)
  #define WDT_NMIENCLR_STOPPED_Clear (0x1UL)
  #define WDT_NMIENCLR_STOPPED_Disabled (0x0UL)
  #define WDT_NMIENCLR_STOPPED_Enabled (0x1UL)


/* WDT_RUNSTATUS: Run status */
  #define WDT_RUNSTATUS_ResetValue (0x00000000UL)

/* RUNSTATUSWDT @Bit 0 : Indicates whether or not WDT is running */
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Pos (0UL)
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Msk (0x1UL << WDT_RUNSTATUS_RUNSTATUSWDT_Pos)
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Min (0x0UL)
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Max (0x1UL)
  #define WDT_RUNSTATUS_RUNSTATUSWDT_NotRunning (0x0UL)
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Running (0x1UL)


/* WDT_REQSTATUS: Request status */
  #define WDT_REQSTATUS_ResetValue (0x00000001UL)

/* RR0 @Bit 0 : Request status for RR[0] register */
  #define WDT_REQSTATUS_RR0_Pos (0UL)
  #define WDT_REQSTATUS_RR0_Msk (0x1UL << WDT_REQSTATUS_RR0_Pos)
  #define WDT_REQSTATUS_RR0_Min (0x0UL)
  #define WDT_REQSTATUS_RR0_Max (0x1UL)
  #define WDT_REQSTATUS_RR0_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR0_EnabledAndUnrequested (0x1UL)

/* RR1 @Bit 1 : Request status for RR[1] register */
  #define WDT_REQSTATUS_RR1_Pos (1UL)
  #define WDT_REQSTATUS_RR1_Msk (0x1UL << WDT_REQSTATUS_RR1_Pos)
  #define WDT_REQSTATUS_RR1_Min (0x0UL)
  #define WDT_REQSTATUS_RR1_Max (0x1UL)
  #define WDT_REQSTATUS_RR1_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR1_EnabledAndUnrequested (0x1UL)

/* RR2 @Bit 2 : Request status for RR[2] register */
  #define WDT_REQSTATUS_RR2_Pos (2UL)
  #define WDT_REQSTATUS_RR2_Msk (0x1UL << WDT_REQSTATUS_RR2_Pos)
  #define WDT_REQSTATUS_RR2_Min (0x0UL)
  #define WDT_REQSTATUS_RR2_Max (0x1UL)
  #define WDT_REQSTATUS_RR2_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR2_EnabledAndUnrequested (0x1UL)

/* RR3 @Bit 3 : Request status for RR[3] register */
  #define WDT_REQSTATUS_RR3_Pos (3UL)
  #define WDT_REQSTATUS_RR3_Msk (0x1UL << WDT_REQSTATUS_RR3_Pos)
  #define WDT_REQSTATUS_RR3_Min (0x0UL)
  #define WDT_REQSTATUS_RR3_Max (0x1UL)
  #define WDT_REQSTATUS_RR3_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR3_EnabledAndUnrequested (0x1UL)

/* RR4 @Bit 4 : Request status for RR[4] register */
  #define WDT_REQSTATUS_RR4_Pos (4UL)
  #define WDT_REQSTATUS_RR4_Msk (0x1UL << WDT_REQSTATUS_RR4_Pos)
  #define WDT_REQSTATUS_RR4_Min (0x0UL)
  #define WDT_REQSTATUS_RR4_Max (0x1UL)
  #define WDT_REQSTATUS_RR4_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR4_EnabledAndUnrequested (0x1UL)

/* RR5 @Bit 5 : Request status for RR[5] register */
  #define WDT_REQSTATUS_RR5_Pos (5UL)
  #define WDT_REQSTATUS_RR5_Msk (0x1UL << WDT_REQSTATUS_RR5_Pos)
  #define WDT_REQSTATUS_RR5_Min (0x0UL)
  #define WDT_REQSTATUS_RR5_Max (0x1UL)
  #define WDT_REQSTATUS_RR5_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR5_EnabledAndUnrequested (0x1UL)

/* RR6 @Bit 6 : Request status for RR[6] register */
  #define WDT_REQSTATUS_RR6_Pos (6UL)
  #define WDT_REQSTATUS_RR6_Msk (0x1UL << WDT_REQSTATUS_RR6_Pos)
  #define WDT_REQSTATUS_RR6_Min (0x0UL)
  #define WDT_REQSTATUS_RR6_Max (0x1UL)
  #define WDT_REQSTATUS_RR6_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR6_EnabledAndUnrequested (0x1UL)

/* RR7 @Bit 7 : Request status for RR[7] register */
  #define WDT_REQSTATUS_RR7_Pos (7UL)
  #define WDT_REQSTATUS_RR7_Msk (0x1UL << WDT_REQSTATUS_RR7_Pos)
  #define WDT_REQSTATUS_RR7_Min (0x0UL)
  #define WDT_REQSTATUS_RR7_Max (0x1UL)
  #define WDT_REQSTATUS_RR7_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR7_EnabledAndUnrequested (0x1UL)


/* WDT_CRV: Counter reload value */
  #define WDT_CRV_ResetValue (0xFFFFFFFFUL)

/* CRV @Bits 0..31 : Counter reload value in number of cycles of the 32.768 kHz clock */
  #define WDT_CRV_CRV_Pos (0UL)
  #define WDT_CRV_CRV_Msk (0xFFFFFFFFUL << WDT_CRV_CRV_Pos)
  #define WDT_CRV_CRV_Min (0x0000000FUL)
  #define WDT_CRV_CRV_Max (0xFFFFFFFFUL)


/* WDT_RREN: Enable register for reload request registers */
  #define WDT_RREN_ResetValue (0x00000001UL)

/* RR0 @Bit 0 : Enable or disable RR[0] register */
  #define WDT_RREN_RR0_Pos (0UL)
  #define WDT_RREN_RR0_Msk (0x1UL << WDT_RREN_RR0_Pos)
  #define WDT_RREN_RR0_Min (0x0UL)
  #define WDT_RREN_RR0_Max (0x1UL)
  #define WDT_RREN_RR0_Disabled (0x0UL)
  #define WDT_RREN_RR0_Enabled (0x1UL)

/* RR1 @Bit 1 : Enable or disable RR[1] register */
  #define WDT_RREN_RR1_Pos (1UL)
  #define WDT_RREN_RR1_Msk (0x1UL << WDT_RREN_RR1_Pos)
  #define WDT_RREN_RR1_Min (0x0UL)
  #define WDT_RREN_RR1_Max (0x1UL)
  #define WDT_RREN_RR1_Disabled (0x0UL)
  #define WDT_RREN_RR1_Enabled (0x1UL)

/* RR2 @Bit 2 : Enable or disable RR[2] register */
  #define WDT_RREN_RR2_Pos (2UL)
  #define WDT_RREN_RR2_Msk (0x1UL << WDT_RREN_RR2_Pos)
  #define WDT_RREN_RR2_Min (0x0UL)
  #define WDT_RREN_RR2_Max (0x1UL)
  #define WDT_RREN_RR2_Disabled (0x0UL)
  #define WDT_RREN_RR2_Enabled (0x1UL)

/* RR3 @Bit 3 : Enable or disable RR[3] register */
  #define WDT_RREN_RR3_Pos (3UL)
  #define WDT_RREN_RR3_Msk (0x1UL << WDT_RREN_RR3_Pos)
  #define WDT_RREN_RR3_Min (0x0UL)
  #define WDT_RREN_RR3_Max (0x1UL)
  #define WDT_RREN_RR3_Disabled (0x0UL)
  #define WDT_RREN_RR3_Enabled (0x1UL)

/* RR4 @Bit 4 : Enable or disable RR[4] register */
  #define WDT_RREN_RR4_Pos (4UL)
  #define WDT_RREN_RR4_Msk (0x1UL << WDT_RREN_RR4_Pos)
  #define WDT_RREN_RR4_Min (0x0UL)
  #define WDT_RREN_RR4_Max (0x1UL)
  #define WDT_RREN_RR4_Disabled (0x0UL)
  #define WDT_RREN_RR4_Enabled (0x1UL)

/* RR5 @Bit 5 : Enable or disable RR[5] register */
  #define WDT_RREN_RR5_Pos (5UL)
  #define WDT_RREN_RR5_Msk (0x1UL << WDT_RREN_RR5_Pos)
  #define WDT_RREN_RR5_Min (0x0UL)
  #define WDT_RREN_RR5_Max (0x1UL)
  #define WDT_RREN_RR5_Disabled (0x0UL)
  #define WDT_RREN_RR5_Enabled (0x1UL)

/* RR6 @Bit 6 : Enable or disable RR[6] register */
  #define WDT_RREN_RR6_Pos (6UL)
  #define WDT_RREN_RR6_Msk (0x1UL << WDT_RREN_RR6_Pos)
  #define WDT_RREN_RR6_Min (0x0UL)
  #define WDT_RREN_RR6_Max (0x1UL)
  #define WDT_RREN_RR6_Disabled (0x0UL)
  #define WDT_RREN_RR6_Enabled (0x1UL)

/* RR7 @Bit 7 : Enable or disable RR[7] register */
  #define WDT_RREN_RR7_Pos (7UL)
  #define WDT_RREN_RR7_Msk (0x1UL << WDT_RREN_RR7_Pos)
  #define WDT_RREN_RR7_Min (0x0UL)
  #define WDT_RREN_RR7_Max (0x1UL)
  #define WDT_RREN_RR7_Disabled (0x0UL)
  #define WDT_RREN_RR7_Enabled (0x1UL)


/* WDT_CONFIG: Configuration register */
  #define WDT_CONFIG_ResetValue (0x00000001UL)

/* SLEEP @Bit 0 : Configure WDT to either be paused, or kept running, while the CPU is sleeping */
  #define WDT_CONFIG_SLEEP_Pos (0UL)
  #define WDT_CONFIG_SLEEP_Msk (0x1UL << WDT_CONFIG_SLEEP_Pos)
  #define WDT_CONFIG_SLEEP_Min (0x0UL)
  #define WDT_CONFIG_SLEEP_Max (0x1UL)
  #define WDT_CONFIG_SLEEP_Pause (0x0UL)
  #define WDT_CONFIG_SLEEP_Run (0x1UL)

/* HALT @Bit 3 : Configure WDT to either be paused, or kept running, while the CPU is halted by the debugger */
  #define WDT_CONFIG_HALT_Pos (3UL)
  #define WDT_CONFIG_HALT_Msk (0x1UL << WDT_CONFIG_HALT_Pos)
  #define WDT_CONFIG_HALT_Min (0x0UL)
  #define WDT_CONFIG_HALT_Max (0x1UL)
  #define WDT_CONFIG_HALT_Pause (0x0UL)
  #define WDT_CONFIG_HALT_Run (0x1UL)

/* STOPEN @Bit 6 : Allow stopping WDT */
  #define WDT_CONFIG_STOPEN_Pos (6UL)
  #define WDT_CONFIG_STOPEN_Msk (0x1UL << WDT_CONFIG_STOPEN_Pos)
  #define WDT_CONFIG_STOPEN_Min (0x0UL)
  #define WDT_CONFIG_STOPEN_Max (0x1UL)
  #define WDT_CONFIG_STOPEN_Disable (0x0UL)
  #define WDT_CONFIG_STOPEN_Enable (0x1UL)


/* WDT_TSEN: Task stop enable */
  #define WDT_TSEN_ResetValue (0x00000000UL)

/* TSEN @Bits 0..31 : Allow stopping WDT */
  #define WDT_TSEN_TSEN_Pos (0UL)
  #define WDT_TSEN_TSEN_Msk (0xFFFFFFFFUL << WDT_TSEN_TSEN_Pos)
  #define WDT_TSEN_TSEN_Min (0x6E524635UL)
  #define WDT_TSEN_TSEN_Max (0x6E524635UL)
  #define WDT_TSEN_TSEN_Enable (0x6E524635UL)


/* WDT_RR: Reload request n */
  #define WDT_RR_MaxCount (8UL)
  #define WDT_RR_MaxIndex (7UL)
  #define WDT_RR_MinIndex (0UL)
  #define WDT_RR_ResetValue (0x00000000UL)

/* RR @Bits 0..31 : Reload request register */
  #define WDT_RR_RR_Pos (0UL)
  #define WDT_RR_RR_Msk (0xFFFFFFFFUL << WDT_RR_RR_Pos)
  #define WDT_RR_RR_Min (0x6E524635UL)
  #define WDT_RR_RR_Max (0x6E524635UL)
  #define WDT_RR_RR_Reload (0x6E524635UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* ========================================== End of section using anonymous unions ========================================== */

#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


#ifdef __cplusplus
}
#endif
#endif /* NRF54LV10A_ENGA_TYPES_H */

