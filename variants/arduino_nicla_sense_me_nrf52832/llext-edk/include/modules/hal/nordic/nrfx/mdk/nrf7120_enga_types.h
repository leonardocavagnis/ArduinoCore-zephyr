/*

Copyright (c) 2010 - 2025, Nordic Semiconductor ASA All rights reserved.

SPDX-License-Identifier: BSD-3-Clause

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. Neither the name of Nordic Semiconductor ASA nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

*/

#ifndef NRF7120_ENGA_TYPES_H
#define NRF7120_ENGA_TYPES_H

#ifdef __cplusplus
    extern "C" {
#endif

#include <stdint.h>
#include "compiler_abstraction.h"


/* ============================================ Include required type specifiers ============================================= */

#ifndef __I
  #ifdef __cplusplus
    #define __I     volatile
  #else
    #define __I     volatile const
  #endif
#endif
#ifndef __O
  #define __O     volatile
#endif
#ifndef __IO
  #define __IO    volatile
#endif

/* The following defines should be used for structure members */
#ifndef __IM
  #define __IM     volatile const
#endif
#ifndef __OM
  #define __OM     volatile
#endif
#ifndef __IOM
  #define __IOM    volatile
#endif

/* ======================================================= Domain IDs ======================================================== */
/**
  * @brief (unspecified)
  */
typedef enum {
  NRF_DOMAIN_SYSTEM                          = 0,
  NRF_DOMAIN_WIFICORE                        = 8,
} NRF_DOMAINID_Type;

/* ====================================================== Processor IDs ====================================================== */
/**
  * @brief (unspecified)
  */
typedef enum {
  NRF_PROCESSOR_CM33                         = 1,
  NRF_PROCESSOR_VPR                          = 2,
  NRF_PROCESSOR_LMAC                         = 4,
  NRF_PROCESSOR_UMAC                         = 5,
} NRF_PROCESSORID_Type;

/* ======================================================== Owner IDs ======================================================== */
/**
  * @brief (unspecified)
  */
typedef enum {
  NRF_OWNER_NONE                             = 0,
  NRF_OWNER_APPLICATION                      = 1,
  NRF_OWNER_KMU                              = 2,
} NRF_OWNERID_Type;


/* ========================================= Start of section using anonymous unions ========================================= */

#include "compiler_abstraction.h"

#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Unsupported compiler type
#endif

/* =========================================================================================================================== */
/* ================                                    Peripherals Section                                    ================ */
/* =========================================================================================================================== */


/* =========================================================================================================================== */
/* ================                                            AAR                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ====================================================== Struct AAR_IN ====================================================== */
/**
  * @brief IN [AAR_IN] IN EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;
} NRF_AAR_IN_Type;

/* AAR_IN_PTR: Input pointer */
  #define AAR_IN_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Points to a job list containing AAR data structure */
  #define AAR_IN_PTR_PTR_Pos (0UL)
  #define AAR_IN_PTR_PTR_Msk (0xFFFFFFFFUL << AAR_IN_PTR_PTR_Pos)



/* ===================================================== Struct AAR_OUT ====================================================== */
/**
  * @brief OUT [AAR_OUT] OUT EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IM  uint32_t  AMOUNT;
} NRF_AAR_OUT_Type;

/* AAR_OUT_PTR: Output pointer */
  #define AAR_OUT_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Output pointer */
  #define AAR_OUT_PTR_PTR_Pos (0UL)
  #define AAR_OUT_PTR_PTR_Msk (0xFFFFFFFFUL << AAR_OUT_PTR_PTR_Pos)


/* AAR_OUT_AMOUNT: Number of bytes transferred in the last transaction */
  #define AAR_OUT_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..7 : Number of bytes written to memory after triggering the START task. */
  #define AAR_OUT_AMOUNT_AMOUNT_Pos (0UL)
  #define AAR_OUT_AMOUNT_AMOUNT_Msk (0xFFUL << AAR_OUT_AMOUNT_AMOUNT_Pos)
  #define AAR_OUT_AMOUNT_AMOUNT_Min (0x01UL)
  #define AAR_OUT_AMOUNT_AMOUNT_Max (0xFFUL)


/* ======================================================= Struct AAR ======================================================== */
/**
  * @brief Accelerated Address Resolver
  */
  typedef struct {
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Start resolving addresses based on IRKs specified in
                                                                         the IRK data structure*/
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_END;                       /*!< (@ 0x00000100) Address resolution procedure complete or ended due to
                                                                         an error*/
    __IOM uint32_t EVENTS_RESOLVED;
    __IOM uint32_t EVENTS_NOTRESOLVED;
    __IOM uint32_t EVENTS_ERROR;                     /*!< (@ 0x0000010C) Operation aborted because of a STOP task or due to an
                                                                         error*/
    __IM uint32_t RESERVED2[28];
    __IOM uint32_t PUBLISH_END;
    __IOM uint32_t PUBLISH_RESOLVED;
    __IOM uint32_t PUBLISH_NOTRESOLVED;
    __IOM uint32_t PUBLISH_ERROR;
    __IM uint32_t RESERVED3[93];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED4[62];
    __IM uint32_t ERRORSTATUS;
    __IM uint32_t RESERVED5[62];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED6;
    __IOM uint32_t MAXRESOLVED;
    __IM uint32_t RESERVED7[9];
    __IOM NRF_AAR_IN_Type IN;
    __IM uint32_t RESERVED8;
    __IOM NRF_AAR_OUT_Type OUT;
  } NRF_AAR_Type;

/* AAR_TASKS_START: Start resolving addresses based on IRKs specified in the IRK data structure */
  #define AAR_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start resolving addresses based on IRKs specified in the IRK data structure */
  #define AAR_TASKS_START_TASKS_START_Pos (0UL)
  #define AAR_TASKS_START_TASKS_START_Msk (0x1UL << AAR_TASKS_START_TASKS_START_Pos)
  #define AAR_TASKS_START_TASKS_START_Min (0x1UL)
  #define AAR_TASKS_START_TASKS_START_Max (0x1UL)
  #define AAR_TASKS_START_TASKS_START_Trigger (0x1UL)


/* AAR_TASKS_STOP: Stop resolving addresses */
  #define AAR_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop resolving addresses */
  #define AAR_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define AAR_TASKS_STOP_TASKS_STOP_Msk (0x1UL << AAR_TASKS_STOP_TASKS_STOP_Pos)
  #define AAR_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define AAR_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define AAR_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* AAR_SUBSCRIBE_START: Subscribe configuration for task START */
  #define AAR_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define AAR_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define AAR_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << AAR_SUBSCRIBE_START_CHIDX_Pos)
  #define AAR_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define AAR_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define AAR_SUBSCRIBE_START_EN_Pos (31UL)
  #define AAR_SUBSCRIBE_START_EN_Msk (0x1UL << AAR_SUBSCRIBE_START_EN_Pos)
  #define AAR_SUBSCRIBE_START_EN_Min (0x0UL)
  #define AAR_SUBSCRIBE_START_EN_Max (0x1UL)
  #define AAR_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define AAR_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* AAR_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define AAR_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define AAR_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define AAR_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << AAR_SUBSCRIBE_STOP_CHIDX_Pos)
  #define AAR_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define AAR_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define AAR_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define AAR_SUBSCRIBE_STOP_EN_Msk (0x1UL << AAR_SUBSCRIBE_STOP_EN_Pos)
  #define AAR_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define AAR_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define AAR_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define AAR_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* AAR_EVENTS_END: Address resolution procedure complete or ended due to an error */
  #define AAR_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : Address resolution procedure complete or ended due to an error */
  #define AAR_EVENTS_END_EVENTS_END_Pos (0UL)
  #define AAR_EVENTS_END_EVENTS_END_Msk (0x1UL << AAR_EVENTS_END_EVENTS_END_Pos)
  #define AAR_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define AAR_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define AAR_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define AAR_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* AAR_EVENTS_RESOLVED: Address resolved */
  #define AAR_EVENTS_RESOLVED_ResetValue (0x00000000UL)

/* EVENTS_RESOLVED @Bit 0 : Address resolved */
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Pos (0UL)
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Msk (0x1UL << AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Pos) /*!< Bit mask of
                                                                            EVENTS_RESOLVED field.*/
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Min (0x0UL)
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Max (0x1UL)
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_NotGenerated (0x0UL)
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Generated (0x1UL)


/* AAR_EVENTS_NOTRESOLVED: Address not resolved */
  #define AAR_EVENTS_NOTRESOLVED_ResetValue (0x00000000UL)

/* EVENTS_NOTRESOLVED @Bit 0 : Address not resolved */
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Pos (0UL)
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Msk (0x1UL << AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Pos) /*!< Bit mask
                                                                            of EVENTS_NOTRESOLVED field.*/
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Min (0x0UL)
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Max (0x1UL)
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_NotGenerated (0x0UL)
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Generated (0x1UL)


/* AAR_EVENTS_ERROR: Operation aborted because of a STOP task or due to an error */
  #define AAR_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : Operation aborted because of a STOP task or due to an error */
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << AAR_EVENTS_ERROR_EVENTS_ERROR_Pos)
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* AAR_PUBLISH_END: Publish configuration for event END */
  #define AAR_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define AAR_PUBLISH_END_CHIDX_Pos (0UL)
  #define AAR_PUBLISH_END_CHIDX_Msk (0xFFUL << AAR_PUBLISH_END_CHIDX_Pos)
  #define AAR_PUBLISH_END_CHIDX_Min (0x00UL)
  #define AAR_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define AAR_PUBLISH_END_EN_Pos (31UL)
  #define AAR_PUBLISH_END_EN_Msk (0x1UL << AAR_PUBLISH_END_EN_Pos)
  #define AAR_PUBLISH_END_EN_Min (0x0UL)
  #define AAR_PUBLISH_END_EN_Max (0x1UL)
  #define AAR_PUBLISH_END_EN_Disabled (0x0UL)
  #define AAR_PUBLISH_END_EN_Enabled (0x1UL)


/* AAR_PUBLISH_RESOLVED: Publish configuration for event RESOLVED */
  #define AAR_PUBLISH_RESOLVED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RESOLVED will publish to */
  #define AAR_PUBLISH_RESOLVED_CHIDX_Pos (0UL)
  #define AAR_PUBLISH_RESOLVED_CHIDX_Msk (0xFFUL << AAR_PUBLISH_RESOLVED_CHIDX_Pos)
  #define AAR_PUBLISH_RESOLVED_CHIDX_Min (0x00UL)
  #define AAR_PUBLISH_RESOLVED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define AAR_PUBLISH_RESOLVED_EN_Pos (31UL)
  #define AAR_PUBLISH_RESOLVED_EN_Msk (0x1UL << AAR_PUBLISH_RESOLVED_EN_Pos)
  #define AAR_PUBLISH_RESOLVED_EN_Min (0x0UL)
  #define AAR_PUBLISH_RESOLVED_EN_Max (0x1UL)
  #define AAR_PUBLISH_RESOLVED_EN_Disabled (0x0UL)
  #define AAR_PUBLISH_RESOLVED_EN_Enabled (0x1UL)


/* AAR_PUBLISH_NOTRESOLVED: Publish configuration for event NOTRESOLVED */
  #define AAR_PUBLISH_NOTRESOLVED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event NOTRESOLVED will publish to */
  #define AAR_PUBLISH_NOTRESOLVED_CHIDX_Pos (0UL)
  #define AAR_PUBLISH_NOTRESOLVED_CHIDX_Msk (0xFFUL << AAR_PUBLISH_NOTRESOLVED_CHIDX_Pos)
  #define AAR_PUBLISH_NOTRESOLVED_CHIDX_Min (0x00UL)
  #define AAR_PUBLISH_NOTRESOLVED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define AAR_PUBLISH_NOTRESOLVED_EN_Pos (31UL)
  #define AAR_PUBLISH_NOTRESOLVED_EN_Msk (0x1UL << AAR_PUBLISH_NOTRESOLVED_EN_Pos)
  #define AAR_PUBLISH_NOTRESOLVED_EN_Min (0x0UL)
  #define AAR_PUBLISH_NOTRESOLVED_EN_Max (0x1UL)
  #define AAR_PUBLISH_NOTRESOLVED_EN_Disabled (0x0UL)
  #define AAR_PUBLISH_NOTRESOLVED_EN_Enabled (0x1UL)


/* AAR_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define AAR_PUBLISH_ERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define AAR_PUBLISH_ERROR_CHIDX_Pos (0UL)
  #define AAR_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << AAR_PUBLISH_ERROR_CHIDX_Pos)
  #define AAR_PUBLISH_ERROR_CHIDX_Min (0x00UL)
  #define AAR_PUBLISH_ERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define AAR_PUBLISH_ERROR_EN_Pos (31UL)
  #define AAR_PUBLISH_ERROR_EN_Msk (0x1UL << AAR_PUBLISH_ERROR_EN_Pos)
  #define AAR_PUBLISH_ERROR_EN_Min (0x0UL)
  #define AAR_PUBLISH_ERROR_EN_Max (0x1UL)
  #define AAR_PUBLISH_ERROR_EN_Disabled (0x0UL)
  #define AAR_PUBLISH_ERROR_EN_Enabled (0x1UL)


/* AAR_INTENSET: Enable interrupt */
  #define AAR_INTENSET_ResetValue (0x00000000UL)

/* END @Bit 0 : Write '1' to enable interrupt for event END */
  #define AAR_INTENSET_END_Pos (0UL)
  #define AAR_INTENSET_END_Msk (0x1UL << AAR_INTENSET_END_Pos)
  #define AAR_INTENSET_END_Min (0x0UL)
  #define AAR_INTENSET_END_Max (0x1UL)
  #define AAR_INTENSET_END_Set (0x1UL)
  #define AAR_INTENSET_END_Disabled (0x0UL)
  #define AAR_INTENSET_END_Enabled (0x1UL)

/* RESOLVED @Bit 1 : Write '1' to enable interrupt for event RESOLVED */
  #define AAR_INTENSET_RESOLVED_Pos (1UL)
  #define AAR_INTENSET_RESOLVED_Msk (0x1UL << AAR_INTENSET_RESOLVED_Pos)
  #define AAR_INTENSET_RESOLVED_Min (0x0UL)
  #define AAR_INTENSET_RESOLVED_Max (0x1UL)
  #define AAR_INTENSET_RESOLVED_Set (0x1UL)
  #define AAR_INTENSET_RESOLVED_Disabled (0x0UL)
  #define AAR_INTENSET_RESOLVED_Enabled (0x1UL)

/* NOTRESOLVED @Bit 2 : Write '1' to enable interrupt for event NOTRESOLVED */
  #define AAR_INTENSET_NOTRESOLVED_Pos (2UL)
  #define AAR_INTENSET_NOTRESOLVED_Msk (0x1UL << AAR_INTENSET_NOTRESOLVED_Pos)
  #define AAR_INTENSET_NOTRESOLVED_Min (0x0UL)
  #define AAR_INTENSET_NOTRESOLVED_Max (0x1UL)
  #define AAR_INTENSET_NOTRESOLVED_Set (0x1UL)
  #define AAR_INTENSET_NOTRESOLVED_Disabled (0x0UL)
  #define AAR_INTENSET_NOTRESOLVED_Enabled (0x1UL)

/* ERROR @Bit 3 : Write '1' to enable interrupt for event ERROR */
  #define AAR_INTENSET_ERROR_Pos (3UL)
  #define AAR_INTENSET_ERROR_Msk (0x1UL << AAR_INTENSET_ERROR_Pos)
  #define AAR_INTENSET_ERROR_Min (0x0UL)
  #define AAR_INTENSET_ERROR_Max (0x1UL)
  #define AAR_INTENSET_ERROR_Set (0x1UL)
  #define AAR_INTENSET_ERROR_Disabled (0x0UL)
  #define AAR_INTENSET_ERROR_Enabled (0x1UL)


/* AAR_INTENCLR: Disable interrupt */
  #define AAR_INTENCLR_ResetValue (0x00000000UL)

/* END @Bit 0 : Write '1' to disable interrupt for event END */
  #define AAR_INTENCLR_END_Pos (0UL)
  #define AAR_INTENCLR_END_Msk (0x1UL << AAR_INTENCLR_END_Pos)
  #define AAR_INTENCLR_END_Min (0x0UL)
  #define AAR_INTENCLR_END_Max (0x1UL)
  #define AAR_INTENCLR_END_Clear (0x1UL)
  #define AAR_INTENCLR_END_Disabled (0x0UL)
  #define AAR_INTENCLR_END_Enabled (0x1UL)

/* RESOLVED @Bit 1 : Write '1' to disable interrupt for event RESOLVED */
  #define AAR_INTENCLR_RESOLVED_Pos (1UL)
  #define AAR_INTENCLR_RESOLVED_Msk (0x1UL << AAR_INTENCLR_RESOLVED_Pos)
  #define AAR_INTENCLR_RESOLVED_Min (0x0UL)
  #define AAR_INTENCLR_RESOLVED_Max (0x1UL)
  #define AAR_INTENCLR_RESOLVED_Clear (0x1UL)
  #define AAR_INTENCLR_RESOLVED_Disabled (0x0UL)
  #define AAR_INTENCLR_RESOLVED_Enabled (0x1UL)

/* NOTRESOLVED @Bit 2 : Write '1' to disable interrupt for event NOTRESOLVED */
  #define AAR_INTENCLR_NOTRESOLVED_Pos (2UL)
  #define AAR_INTENCLR_NOTRESOLVED_Msk (0x1UL << AAR_INTENCLR_NOTRESOLVED_Pos)
  #define AAR_INTENCLR_NOTRESOLVED_Min (0x0UL)
  #define AAR_INTENCLR_NOTRESOLVED_Max (0x1UL)
  #define AAR_INTENCLR_NOTRESOLVED_Clear (0x1UL)
  #define AAR_INTENCLR_NOTRESOLVED_Disabled (0x0UL)
  #define AAR_INTENCLR_NOTRESOLVED_Enabled (0x1UL)

/* ERROR @Bit 3 : Write '1' to disable interrupt for event ERROR */
  #define AAR_INTENCLR_ERROR_Pos (3UL)
  #define AAR_INTENCLR_ERROR_Msk (0x1UL << AAR_INTENCLR_ERROR_Pos)
  #define AAR_INTENCLR_ERROR_Min (0x0UL)
  #define AAR_INTENCLR_ERROR_Max (0x1UL)
  #define AAR_INTENCLR_ERROR_Clear (0x1UL)
  #define AAR_INTENCLR_ERROR_Disabled (0x0UL)
  #define AAR_INTENCLR_ERROR_Enabled (0x1UL)


/* AAR_ERRORSTATUS: Error status */
  #define AAR_ERRORSTATUS_ResetValue (0x00000000UL)

/* ERRORSTATUS @Bits 0..2 : Error status when the ERROR event is generated */
  #define AAR_ERRORSTATUS_ERRORSTATUS_Pos (0UL)
  #define AAR_ERRORSTATUS_ERRORSTATUS_Msk (0x7UL << AAR_ERRORSTATUS_ERRORSTATUS_Pos)
  #define AAR_ERRORSTATUS_ERRORSTATUS_Min (0x0UL)
  #define AAR_ERRORSTATUS_ERRORSTATUS_Max (0x4UL)
  #define AAR_ERRORSTATUS_ERRORSTATUS_NoError (0x0UL)
  #define AAR_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd (0x1UL)
  #define AAR_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd (0x2UL)
  #define AAR_ERRORSTATUS_ERRORSTATUS_DmaError (0x4UL)


/* AAR_ENABLE: Enable AAR */
  #define AAR_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..1 : Enable or disable AAR */
  #define AAR_ENABLE_ENABLE_Pos (0UL)
  #define AAR_ENABLE_ENABLE_Msk (0x3UL << AAR_ENABLE_ENABLE_Pos)
  #define AAR_ENABLE_ENABLE_Min (0x0UL)
  #define AAR_ENABLE_ENABLE_Max (0x3UL)
  #define AAR_ENABLE_ENABLE_Disabled (0x0UL)
  #define AAR_ENABLE_ENABLE_Enabled (0x3UL)


/* AAR_MAXRESOLVED: Maximum number of IRKs to resolve */
  #define AAR_MAXRESOLVED_ResetValue (0x00000001UL)

/* MAXRESOLVED @Bits 0..11 : The maximum number of IRKs to resolve */
  #define AAR_MAXRESOLVED_MAXRESOLVED_Pos (0UL)
  #define AAR_MAXRESOLVED_MAXRESOLVED_Msk (0xFFFUL << AAR_MAXRESOLVED_MAXRESOLVED_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          ANTSWC                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct ANTSWC_ERRORSTATUS ================================================ */
/**
  * @brief ERRORSTATUS [ANTSWC_ERRORSTATUS] (unspecified)
  */
typedef struct {
  __IOM uint32_t  TX;
  __IOM uint32_t  TXRX;
  __IOM uint32_t  ERRORPORT;
} NRF_ANTSWC_ERRORSTATUS_Type;

/* ANTSWC_ERRORSTATUS_TX: Concurrent TX error condition */
  #define ANTSWC_ERRORSTATUS_TX_ResetValue (0x00000000UL)

/* COUNT @Bits 0..3 : Count of concurrent TX error conditions detected */
  #define ANTSWC_ERRORSTATUS_TX_COUNT_Pos (0UL)
  #define ANTSWC_ERRORSTATUS_TX_COUNT_Msk (0xFUL << ANTSWC_ERRORSTATUS_TX_COUNT_Pos)

/* ERRORACTIVE @Bit 31 : Concurrent TX error condition is active */
  #define ANTSWC_ERRORSTATUS_TX_ERRORACTIVE_Pos (31UL)
  #define ANTSWC_ERRORSTATUS_TX_ERRORACTIVE_Msk (0x1UL << ANTSWC_ERRORSTATUS_TX_ERRORACTIVE_Pos) /*!< Bit mask of ERRORACTIVE
                                                                            field.*/


/* ANTSWC_ERRORSTATUS_TXRX: Concurrent TX-RX error condition */
  #define ANTSWC_ERRORSTATUS_TXRX_ResetValue (0x00000000UL)

/* COUNT @Bits 0..3 : Count of concurrent TX-RX error conditions detected */
  #define ANTSWC_ERRORSTATUS_TXRX_COUNT_Pos (0UL)
  #define ANTSWC_ERRORSTATUS_TXRX_COUNT_Msk (0xFUL << ANTSWC_ERRORSTATUS_TXRX_COUNT_Pos)

/* ERRORACTIVE @Bit 31 : Concurrent TX-RX error condition is active */
  #define ANTSWC_ERRORSTATUS_TXRX_ERRORACTIVE_Pos (31UL)
  #define ANTSWC_ERRORSTATUS_TXRX_ERRORACTIVE_Msk (0x1UL << ANTSWC_ERRORSTATUS_TXRX_ERRORACTIVE_Pos) /*!< Bit mask of
                                                                            ERRORACTIVE field.*/


/* ANTSWC_ERRORSTATUS_ERRORPORT: Indicates which ports are in error */
  #define ANTSWC_ERRORSTATUS_ERRORPORT_ResetValue (0x00000000UL)

/* ERRORPORT @Bits 0..7 : Bitfield indicating the ports in error during the last error condition. */
  #define ANTSWC_ERRORSTATUS_ERRORPORT_ERRORPORT_Pos (0UL)
  #define ANTSWC_ERRORSTATUS_ERRORPORT_ERRORPORT_Msk (0xFFUL << ANTSWC_ERRORSTATUS_ERRORPORT_ERRORPORT_Pos) /*!< Bit mask of
                                                                            ERRORPORT field.*/


/* ====================================================== Struct ANTSWC ====================================================== */
/**
  * @brief Antenna switch controller
  */
  typedef struct {
    __IM uint32_t RESERVED[256];
    __IOM NRF_ANTSWC_ERRORSTATUS_Type ERRORSTATUS;
    __IM uint32_t RESERVED1;
    __IOM uint32_t CONFIG;
    __IOM uint32_t INHIBIT;
  } NRF_ANTSWC_Type;

/* ANTSWC_CONFIG: Antenna switch controller enable / software reset */
  #define ANTSWC_CONFIG_ResetValue (0x00000000UL)

/* ENABLEPKTACTIVE0 @Bit 0 : Bitfield indicating whether ANTSWC listens to PktActive on radio port i. */
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE0_Pos (0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE0_Msk (0x1UL << ANTSWC_CONFIG_ENABLEPKTACTIVE0_Pos) /*!< Bit mask of ENABLEPKTACTIVE0
                                                                            field.*/
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE0_Min (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE0_Max (0x1UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE0_Ignore (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE0_Respect (0x1UL) /*!< Use PktActive on the corresponding radio port for antenna switch
                                                              selection*/

/* ENABLEPKTACTIVE1 @Bit 1 : Bitfield indicating whether ANTSWC listens to PktActive on radio port i. */
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE1_Pos (1UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE1_Msk (0x1UL << ANTSWC_CONFIG_ENABLEPKTACTIVE1_Pos) /*!< Bit mask of ENABLEPKTACTIVE1
                                                                            field.*/
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE1_Min (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE1_Max (0x1UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE1_Ignore (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE1_Respect (0x1UL) /*!< Use PktActive on the corresponding radio port for antenna switch
                                                              selection*/

/* ENABLEPKTACTIVE2 @Bit 2 : Bitfield indicating whether ANTSWC listens to PktActive on radio port i. */
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE2_Pos (2UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE2_Msk (0x1UL << ANTSWC_CONFIG_ENABLEPKTACTIVE2_Pos) /*!< Bit mask of ENABLEPKTACTIVE2
                                                                            field.*/
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE2_Min (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE2_Max (0x1UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE2_Ignore (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE2_Respect (0x1UL) /*!< Use PktActive on the corresponding radio port for antenna switch
                                                              selection*/

/* ENABLEPKTACTIVE3 @Bit 3 : Bitfield indicating whether ANTSWC listens to PktActive on radio port i. */
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE3_Pos (3UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE3_Msk (0x1UL << ANTSWC_CONFIG_ENABLEPKTACTIVE3_Pos) /*!< Bit mask of ENABLEPKTACTIVE3
                                                                            field.*/
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE3_Min (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE3_Max (0x1UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE3_Ignore (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE3_Respect (0x1UL) /*!< Use PktActive on the corresponding radio port for antenna switch
                                                              selection*/

/* ENABLEPKTACTIVE4 @Bit 4 : Bitfield indicating whether ANTSWC listens to PktActive on radio port i. */
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE4_Pos (4UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE4_Msk (0x1UL << ANTSWC_CONFIG_ENABLEPKTACTIVE4_Pos) /*!< Bit mask of ENABLEPKTACTIVE4
                                                                            field.*/
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE4_Min (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE4_Max (0x1UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE4_Ignore (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE4_Respect (0x1UL) /*!< Use PktActive on the corresponding radio port for antenna switch
                                                              selection*/

/* ENABLEPKTACTIVE5 @Bit 5 : Bitfield indicating whether ANTSWC listens to PktActive on radio port i. */
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE5_Pos (5UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE5_Msk (0x1UL << ANTSWC_CONFIG_ENABLEPKTACTIVE5_Pos) /*!< Bit mask of ENABLEPKTACTIVE5
                                                                            field.*/
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE5_Min (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE5_Max (0x1UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE5_Ignore (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE5_Respect (0x1UL) /*!< Use PktActive on the corresponding radio port for antenna switch
                                                              selection*/

/* ENABLEPKTACTIVE6 @Bit 6 : Bitfield indicating whether ANTSWC listens to PktActive on radio port i. */
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE6_Pos (6UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE6_Msk (0x1UL << ANTSWC_CONFIG_ENABLEPKTACTIVE6_Pos) /*!< Bit mask of ENABLEPKTACTIVE6
                                                                            field.*/
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE6_Min (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE6_Max (0x1UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE6_Ignore (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE6_Respect (0x1UL) /*!< Use PktActive on the corresponding radio port for antenna switch
                                                              selection*/

/* ENABLEPKTACTIVE7 @Bit 7 : Bitfield indicating whether ANTSWC listens to PktActive on radio port i. */
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE7_Pos (7UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE7_Msk (0x1UL << ANTSWC_CONFIG_ENABLEPKTACTIVE7_Pos) /*!< Bit mask of ENABLEPKTACTIVE7
                                                                            field.*/
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE7_Min (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE7_Max (0x1UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE7_Ignore (0x0UL)
  #define ANTSWC_CONFIG_ENABLEPKTACTIVE7_Respect (0x1UL) /*!< Use PktActive on the corresponding radio port for antenna switch
                                                              selection*/

/* ENABLE @Bit 31 : Enable antenna switch module. */
  #define ANTSWC_CONFIG_ENABLE_Pos (31UL)
  #define ANTSWC_CONFIG_ENABLE_Msk (0x1UL << ANTSWC_CONFIG_ENABLE_Pos)
  #define ANTSWC_CONFIG_ENABLE_Min (0x0UL)
  #define ANTSWC_CONFIG_ENABLE_Max (0x1UL)
  #define ANTSWC_CONFIG_ENABLE_Disable (0x0UL)
  #define ANTSWC_CONFIG_ENABLE_Enable (0x1UL)


/* ANTSWC_INHIBIT: Inhibit register */
  #define ANTSWC_INHIBIT_ResetValue (0x000000FFUL)

/* INHIBIT0 @Bit 0 : Bitfield of 8 separate bits indicating whether connection of the antenna to radio on radio port i is
                     enabled or inhibited. */

  #define ANTSWC_INHIBIT_INHIBIT0_Pos (0UL)
  #define ANTSWC_INHIBIT_INHIBIT0_Msk (0x1UL << ANTSWC_INHIBIT_INHIBIT0_Pos)
  #define ANTSWC_INHIBIT_INHIBIT0_Min (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT0_Max (0x1UL)
  #define ANTSWC_INHIBIT_INHIBIT0_Inhibit (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT0_Enable (0x1UL)

/* INHIBIT1 @Bit 1 : Bitfield of 8 separate bits indicating whether connection of the antenna to radio on radio port i is
                     enabled or inhibited. */

  #define ANTSWC_INHIBIT_INHIBIT1_Pos (1UL)
  #define ANTSWC_INHIBIT_INHIBIT1_Msk (0x1UL << ANTSWC_INHIBIT_INHIBIT1_Pos)
  #define ANTSWC_INHIBIT_INHIBIT1_Min (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT1_Max (0x1UL)
  #define ANTSWC_INHIBIT_INHIBIT1_Inhibit (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT1_Enable (0x1UL)

/* INHIBIT2 @Bit 2 : Bitfield of 8 separate bits indicating whether connection of the antenna to radio on radio port i is
                     enabled or inhibited. */

  #define ANTSWC_INHIBIT_INHIBIT2_Pos (2UL)
  #define ANTSWC_INHIBIT_INHIBIT2_Msk (0x1UL << ANTSWC_INHIBIT_INHIBIT2_Pos)
  #define ANTSWC_INHIBIT_INHIBIT2_Min (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT2_Max (0x1UL)
  #define ANTSWC_INHIBIT_INHIBIT2_Inhibit (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT2_Enable (0x1UL)

/* INHIBIT3 @Bit 3 : Bitfield of 8 separate bits indicating whether connection of the antenna to radio on radio port i is
                     enabled or inhibited. */

  #define ANTSWC_INHIBIT_INHIBIT3_Pos (3UL)
  #define ANTSWC_INHIBIT_INHIBIT3_Msk (0x1UL << ANTSWC_INHIBIT_INHIBIT3_Pos)
  #define ANTSWC_INHIBIT_INHIBIT3_Min (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT3_Max (0x1UL)
  #define ANTSWC_INHIBIT_INHIBIT3_Inhibit (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT3_Enable (0x1UL)

/* INHIBIT4 @Bit 4 : Bitfield of 8 separate bits indicating whether connection of the antenna to radio on radio port i is
                     enabled or inhibited. */

  #define ANTSWC_INHIBIT_INHIBIT4_Pos (4UL)
  #define ANTSWC_INHIBIT_INHIBIT4_Msk (0x1UL << ANTSWC_INHIBIT_INHIBIT4_Pos)
  #define ANTSWC_INHIBIT_INHIBIT4_Min (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT4_Max (0x1UL)
  #define ANTSWC_INHIBIT_INHIBIT4_Inhibit (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT4_Enable (0x1UL)

/* INHIBIT5 @Bit 5 : Bitfield of 8 separate bits indicating whether connection of the antenna to radio on radio port i is
                     enabled or inhibited. */

  #define ANTSWC_INHIBIT_INHIBIT5_Pos (5UL)
  #define ANTSWC_INHIBIT_INHIBIT5_Msk (0x1UL << ANTSWC_INHIBIT_INHIBIT5_Pos)
  #define ANTSWC_INHIBIT_INHIBIT5_Min (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT5_Max (0x1UL)
  #define ANTSWC_INHIBIT_INHIBIT5_Inhibit (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT5_Enable (0x1UL)

/* INHIBIT6 @Bit 6 : Bitfield of 8 separate bits indicating whether connection of the antenna to radio on radio port i is
                     enabled or inhibited. */

  #define ANTSWC_INHIBIT_INHIBIT6_Pos (6UL)
  #define ANTSWC_INHIBIT_INHIBIT6_Msk (0x1UL << ANTSWC_INHIBIT_INHIBIT6_Pos)
  #define ANTSWC_INHIBIT_INHIBIT6_Min (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT6_Max (0x1UL)
  #define ANTSWC_INHIBIT_INHIBIT6_Inhibit (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT6_Enable (0x1UL)

/* INHIBIT7 @Bit 7 : Bitfield of 8 separate bits indicating whether connection of the antenna to radio on radio port i is
                     enabled or inhibited. */

  #define ANTSWC_INHIBIT_INHIBIT7_Pos (7UL)
  #define ANTSWC_INHIBIT_INHIBIT7_Msk (0x1UL << ANTSWC_INHIBIT_INHIBIT7_Pos)
  #define ANTSWC_INHIBIT_INHIBIT7_Min (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT7_Max (0x1UL)
  #define ANTSWC_INHIBIT_INHIBIT7_Inhibit (0x0UL)
  #define ANTSWC_INHIBIT_INHIBIT7_Enable (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          AUXPLL                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct AUXPLL_CONFIG =================================================== */
/**
  * @brief CONFIG [AUXPLL_CONFIG] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CFGSTATIC;
} NRF_AUXPLL_CONFIG_Type;

/* AUXPLL_CONFIG_CFGSTATIC: AUXPLL configuration */
  #define AUXPLL_CONFIG_CFGSTATIC_ResetValue (0x00000224UL)

/* OUTDRIVE @Bits 0..1 : Output buffer drive strength selection */
  #define AUXPLL_CONFIG_CFGSTATIC_OUTDRIVE_Pos (0UL)
  #define AUXPLL_CONFIG_CFGSTATIC_OUTDRIVE_Msk (0x3UL << AUXPLL_CONFIG_CFGSTATIC_OUTDRIVE_Pos)
  #define AUXPLL_CONFIG_CFGSTATIC_OUTDRIVE_Min (0x0UL)
  #define AUXPLL_CONFIG_CFGSTATIC_OUTDRIVE_Max (0x3UL)

/* SELCONSTANTI @Bits 2..6 : Constant current tune for ring oscillator */
  #define AUXPLL_CONFIG_CFGSTATIC_SELCONSTANTI_Pos (2UL)
  #define AUXPLL_CONFIG_CFGSTATIC_SELCONSTANTI_Msk (0x1FUL << AUXPLL_CONFIG_CFGSTATIC_SELCONSTANTI_Pos) /*!< Bit mask of
                                                                            SELCONSTANTI field.*/
  #define AUXPLL_CONFIG_CFGSTATIC_SELCONSTANTI_Min (0x00UL)
  #define AUXPLL_CONFIG_CFGSTATIC_SELCONSTANTI_Default (0x09UL)
  #define AUXPLL_CONFIG_CFGSTATIC_SELCONSTANTI_Max (0x0FUL)

/* SDMOFF @Bit 7 : Turn off sigma delta modulation */
  #define AUXPLL_CONFIG_CFGSTATIC_SDMOFF_Pos (7UL)
  #define AUXPLL_CONFIG_CFGSTATIC_SDMOFF_Msk (0x1UL << AUXPLL_CONFIG_CFGSTATIC_SDMOFF_Pos)
  #define AUXPLL_CONFIG_CFGSTATIC_SDMOFF_Min (0x0UL)
  #define AUXPLL_CONFIG_CFGSTATIC_SDMOFF_Max (0x1UL)
  #define AUXPLL_CONFIG_CFGSTATIC_SDMOFF_SDMOn (0x0UL)
  #define AUXPLL_CONFIG_CFGSTATIC_SDMOFF_SDMOff (0x1UL)

/* SDMDITHEROFF @Bit 8 : Turn off dither in sigma delta modulator */
  #define AUXPLL_CONFIG_CFGSTATIC_SDMDITHEROFF_Pos (8UL)
  #define AUXPLL_CONFIG_CFGSTATIC_SDMDITHEROFF_Msk (0x1UL << AUXPLL_CONFIG_CFGSTATIC_SDMDITHEROFF_Pos) /*!< Bit mask of
                                                                            SDMDITHEROFF field.*/
  #define AUXPLL_CONFIG_CFGSTATIC_SDMDITHEROFF_Min (0x0UL)
  #define AUXPLL_CONFIG_CFGSTATIC_SDMDITHEROFF_Max (0x1UL)
  #define AUXPLL_CONFIG_CFGSTATIC_SDMDITHEROFF_DitherOn (0x0UL)
  #define AUXPLL_CONFIG_CFGSTATIC_SDMDITHEROFF_DitherOff (0x1UL)

/* AUXPLLRANGE @Bits 9..10 : Loop divider base settings */
  #define AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Pos (9UL)
  #define AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Msk (0x3UL << AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Pos) /*!< Bit mask of
                                                                            AUXPLLRANGE field.*/
  #define AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Min (0x0UL)
  #define AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Max (0x3UL)
  #define AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Low (0x0UL)
  #define AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Mid (0x1UL)
  #define AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_High (0x2UL)
  #define AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_StaticHigh (0x3UL)



/* =================================================== Struct AUXPLL_TRIM ==================================================== */
/**
  * @brief TRIM [AUXPLL_TRIM] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTUNE;
} NRF_AUXPLL_TRIM_Type;

/* AUXPLL_TRIM_CTUNE: Ring oscillator core process corner tuning */
  #define AUXPLL_TRIM_CTUNE_ResetValue (0x0000000DUL)

/* VAL @Bits 0..4 : Tuning value */
  #define AUXPLL_TRIM_CTUNE_VAL_Pos (0UL)
  #define AUXPLL_TRIM_CTUNE_VAL_Msk (0x1FUL << AUXPLL_TRIM_CTUNE_VAL_Pos)
  #define AUXPLL_TRIM_CTUNE_VAL_Max (0x00UL)
  #define AUXPLL_TRIM_CTUNE_VAL_Default (0x0DUL)
  #define AUXPLL_TRIM_CTUNE_VAL_Min (0x1FUL)



/* ================================================ Struct AUXPLL_AUXPLLCTRL ================================================= */
/**
  * @brief AUXPLLCTRL [AUXPLL_AUXPLLCTRL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  FREQUENCY;
  __IOM uint32_t  FREQINC;
  __IOM uint32_t  FREQINCPERIOD;
  __IOM uint32_t  OUTSEL;
  __IOM uint32_t  MODE;
} NRF_AUXPLL_AUXPLLCTRL_Type;

/* AUXPLL_AUXPLLCTRL_FREQUENCY: AUXPLL frequency selection */
  #define AUXPLL_AUXPLLCTRL_FREQUENCY_ResetValue (0x00008000UL)

/* FREQUENCY @Bits 0..15 : Set fractional PLL divider ratio */
  #define AUXPLL_AUXPLLCTRL_FREQUENCY_FREQUENCY_Pos (0UL)
  #define AUXPLL_AUXPLLCTRL_FREQUENCY_FREQUENCY_Msk (0xFFFFUL << AUXPLL_AUXPLLCTRL_FREQUENCY_FREQUENCY_Pos) /*!< Bit mask of
                                                                            FREQUENCY field.*/
  #define AUXPLL_AUXPLLCTRL_FREQUENCY_FREQUENCY_Min (0x0UL)
  #define AUXPLL_AUXPLLCTRL_FREQUENCY_FREQUENCY_Max (0xFFFFUL)
  #define AUXPLL_AUXPLLCTRL_FREQUENCY_FREQUENCY_MinimumDiv (0x0000UL)
  #define AUXPLL_AUXPLLCTRL_FREQUENCY_FREQUENCY_Audio44k1 (0x3BCDUL)
  #define AUXPLL_AUXPLLCTRL_FREQUENCY_FREQUENCY_USB24M (0x8000UL)
  #define AUXPLL_AUXPLLCTRL_FREQUENCY_FREQUENCY_Audio48k (0x9BA5UL)
  #define AUXPLL_AUXPLLCTRL_FREQUENCY_FREQUENCY_MaximumDiv (0xFFFFUL)


/* AUXPLL_AUXPLLCTRL_FREQINC: Frequency increment */
  #define AUXPLL_AUXPLLCTRL_FREQINC_ResetValue (0x00000000UL)

/* FREQINC @Bits 0..7 : Signed 8-bit frequency increment, applied to FREQUENCY */
  #define AUXPLL_AUXPLLCTRL_FREQINC_FREQINC_Pos (0UL)
  #define AUXPLL_AUXPLLCTRL_FREQINC_FREQINC_Msk (0xFFUL << AUXPLL_AUXPLLCTRL_FREQINC_FREQINC_Pos) /*!< Bit mask of FREQINC
                                                                            field.*/


/* AUXPLL_AUXPLLCTRL_FREQINCPERIOD: Frequency increment period in 1 us steps */
  #define AUXPLL_AUXPLLCTRL_FREQINCPERIOD_ResetValue (0x00000000UL)

/* FREQINCPERIOD @Bits 0..15 : Frequency increment period */
  #define AUXPLL_AUXPLLCTRL_FREQINCPERIOD_FREQINCPERIOD_Pos (0UL)
  #define AUXPLL_AUXPLLCTRL_FREQINCPERIOD_FREQINCPERIOD_Msk (0xFFFFUL << AUXPLL_AUXPLLCTRL_FREQINCPERIOD_FREQINCPERIOD_Pos) /*!<
                                                                            Bit mask of FREQINCPERIOD field.*/
  #define AUXPLL_AUXPLLCTRL_FREQINCPERIOD_FREQINCPERIOD_Min (0x0001UL)
  #define AUXPLL_AUXPLLCTRL_FREQINCPERIOD_FREQINCPERIOD_Max (0xFFFFUL)


/* AUXPLL_AUXPLLCTRL_OUTSEL: AUXPLL output prescaler */
  #define AUXPLL_AUXPLLCTRL_OUTSEL_ResetValue (0x00000007UL)

/* OUTSEL @Bits 0..3 : Prescaler ratio */
  #define AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Pos (0UL)
  #define AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Msk (0xFUL << AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Pos)
  #define AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Min (0x0UL)
  #define AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Max (0x8UL)
  #define AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_DivDisabled (0x0UL)
  #define AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div1 (0x1UL)
  #define AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div2 (0x2UL)
  #define AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div3 (0x3UL)
  #define AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div4 (0x4UL)
  #define AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div6 (0x5UL)
  #define AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div8 (0x6UL)
  #define AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div12 (0x7UL)
  #define AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div16 (0x8UL)


/* AUXPLL_AUXPLLCTRL_MODE: Freerunning mode control */
  #define AUXPLL_AUXPLLCTRL_MODE_ResetValue (0x00000000UL)

/* MODECTRL @Bits 0..1 : Freerunning mode control */
  #define AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Pos (0UL)
  #define AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Msk (0x3UL << AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Pos)
  #define AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Min (0x0UL)
  #define AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Max (0x2UL)
  #define AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Auto (0x0UL)
  #define AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Freerun (0x1UL)
  #define AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Locked (0x2UL)


/* ====================================================== Struct AUXPLL ====================================================== */
/**
  * @brief AUXPLL
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_NEWFINEFREQ;
    __OM uint32_t TASKS_NEWBASEFREQ;
    __OM uint32_t TASKS_FREQINCSTART;
    __OM uint32_t TASKS_FREQINCSTOP;
    __IM uint32_t RESERVED[58];
    __IOM uint32_t EVENTS_STARTED;
    __IOM uint32_t EVENTS_STOPPED;
    __IOM uint32_t EVENTS_LOCKED;
    __IM uint32_t RESERVED1[125];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED2[60];
    __IM uint32_t STATUS;
    __IM uint32_t RESERVED3[3];
    __IOM NRF_AUXPLL_CONFIG_Type CONFIG;
    __IM uint32_t RESERVED4[11];
    __IOM NRF_AUXPLL_TRIM_Type TRIM;
    __IM uint32_t RESERVED5[7];
    __IOM NRF_AUXPLL_AUXPLLCTRL_Type AUXPLLCTRL;
    __IM uint32_t RESERVED6[3];
    __IOM uint32_t MIRROR;
  } NRF_AUXPLL_Type;

/* AUXPLL_TASKS_START: Start the AUXPLL */
  #define AUXPLL_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start the AUXPLL */
  #define AUXPLL_TASKS_START_TASKS_START_Pos (0UL)
  #define AUXPLL_TASKS_START_TASKS_START_Msk (0x1UL << AUXPLL_TASKS_START_TASKS_START_Pos)
  #define AUXPLL_TASKS_START_TASKS_START_Min (0x1UL)
  #define AUXPLL_TASKS_START_TASKS_START_Max (0x1UL)
  #define AUXPLL_TASKS_START_TASKS_START_Trigger (0x1UL)


/* AUXPLL_TASKS_STOP: Stop the AUXPLL */
  #define AUXPLL_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop the AUXPLL */
  #define AUXPLL_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define AUXPLL_TASKS_STOP_TASKS_STOP_Msk (0x1UL << AUXPLL_TASKS_STOP_TASKS_STOP_Pos)
  #define AUXPLL_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define AUXPLL_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define AUXPLL_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* AUXPLL_TASKS_NEWFINEFREQ: Change fine frequency */
  #define AUXPLL_TASKS_NEWFINEFREQ_ResetValue (0x00000000UL)

/* TASKS_NEWFINEFREQ @Bit 0 : Change fine frequency */
  #define AUXPLL_TASKS_NEWFINEFREQ_TASKS_NEWFINEFREQ_Pos (0UL)
  #define AUXPLL_TASKS_NEWFINEFREQ_TASKS_NEWFINEFREQ_Msk (0x1UL << AUXPLL_TASKS_NEWFINEFREQ_TASKS_NEWFINEFREQ_Pos) /*!< Bit mask
                                                                            of TASKS_NEWFINEFREQ field.*/
  #define AUXPLL_TASKS_NEWFINEFREQ_TASKS_NEWFINEFREQ_Min (0x1UL)
  #define AUXPLL_TASKS_NEWFINEFREQ_TASKS_NEWFINEFREQ_Max (0x1UL)
  #define AUXPLL_TASKS_NEWFINEFREQ_TASKS_NEWFINEFREQ_Trigger (0x1UL)


/* AUXPLL_TASKS_NEWBASEFREQ: Change base frequency */
  #define AUXPLL_TASKS_NEWBASEFREQ_ResetValue (0x00000000UL)

/* TASKS_NEWBASEFREQ @Bit 0 : Change base frequency */
  #define AUXPLL_TASKS_NEWBASEFREQ_TASKS_NEWBASEFREQ_Pos (0UL)
  #define AUXPLL_TASKS_NEWBASEFREQ_TASKS_NEWBASEFREQ_Msk (0x1UL << AUXPLL_TASKS_NEWBASEFREQ_TASKS_NEWBASEFREQ_Pos) /*!< Bit mask
                                                                            of TASKS_NEWBASEFREQ field.*/
  #define AUXPLL_TASKS_NEWBASEFREQ_TASKS_NEWBASEFREQ_Min (0x1UL)
  #define AUXPLL_TASKS_NEWBASEFREQ_TASKS_NEWBASEFREQ_Max (0x1UL)
  #define AUXPLL_TASKS_NEWBASEFREQ_TASKS_NEWBASEFREQ_Trigger (0x1UL)


/* AUXPLL_TASKS_FREQINCSTART: Start automated frequency increment */
  #define AUXPLL_TASKS_FREQINCSTART_ResetValue (0x00000000UL)

/* TASKS_FREQINCSTART @Bit 0 : Start automated frequency increment */
  #define AUXPLL_TASKS_FREQINCSTART_TASKS_FREQINCSTART_Pos (0UL)
  #define AUXPLL_TASKS_FREQINCSTART_TASKS_FREQINCSTART_Msk (0x1UL << AUXPLL_TASKS_FREQINCSTART_TASKS_FREQINCSTART_Pos) /*!< Bit
                                                                            mask of TASKS_FREQINCSTART field.*/
  #define AUXPLL_TASKS_FREQINCSTART_TASKS_FREQINCSTART_Min (0x1UL)
  #define AUXPLL_TASKS_FREQINCSTART_TASKS_FREQINCSTART_Max (0x1UL)
  #define AUXPLL_TASKS_FREQINCSTART_TASKS_FREQINCSTART_Trigger (0x1UL)


/* AUXPLL_TASKS_FREQINCSTOP: Stop automated frequency increment */
  #define AUXPLL_TASKS_FREQINCSTOP_ResetValue (0x00000000UL)

/* TASKS_FREQINCSTOP @Bit 0 : Stop automated frequency increment */
  #define AUXPLL_TASKS_FREQINCSTOP_TASKS_FREQINCSTOP_Pos (0UL)
  #define AUXPLL_TASKS_FREQINCSTOP_TASKS_FREQINCSTOP_Msk (0x1UL << AUXPLL_TASKS_FREQINCSTOP_TASKS_FREQINCSTOP_Pos) /*!< Bit mask
                                                                            of TASKS_FREQINCSTOP field.*/
  #define AUXPLL_TASKS_FREQINCSTOP_TASKS_FREQINCSTOP_Min (0x1UL)
  #define AUXPLL_TASKS_FREQINCSTOP_TASKS_FREQINCSTOP_Max (0x1UL)
  #define AUXPLL_TASKS_FREQINCSTOP_TASKS_FREQINCSTOP_Trigger (0x1UL)


/* AUXPLL_EVENTS_STARTED: AUXPLL started */
  #define AUXPLL_EVENTS_STARTED_ResetValue (0x00000000UL)

/* EVENTS_STARTED @Bit 0 : AUXPLL started */
  #define AUXPLL_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL)
  #define AUXPLL_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << AUXPLL_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_STARTED field.*/
  #define AUXPLL_EVENTS_STARTED_EVENTS_STARTED_Min (0x0UL)
  #define AUXPLL_EVENTS_STARTED_EVENTS_STARTED_Max (0x1UL)
  #define AUXPLL_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0x0UL)
  #define AUXPLL_EVENTS_STARTED_EVENTS_STARTED_Generated (0x1UL)


/* AUXPLL_EVENTS_STOPPED: AUXPLL stopped */
  #define AUXPLL_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : AUXPLL stopped */
  #define AUXPLL_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define AUXPLL_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << AUXPLL_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define AUXPLL_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define AUXPLL_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define AUXPLL_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define AUXPLL_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* AUXPLL_EVENTS_LOCKED: AUXPLL locked */
  #define AUXPLL_EVENTS_LOCKED_ResetValue (0x00000000UL)

/* EVENTS_LOCKED @Bit 0 : AUXPLL locked */
  #define AUXPLL_EVENTS_LOCKED_EVENTS_LOCKED_Pos (0UL)
  #define AUXPLL_EVENTS_LOCKED_EVENTS_LOCKED_Msk (0x1UL << AUXPLL_EVENTS_LOCKED_EVENTS_LOCKED_Pos) /*!< Bit mask of
                                                                            EVENTS_LOCKED field.*/
  #define AUXPLL_EVENTS_LOCKED_EVENTS_LOCKED_Min (0x0UL)
  #define AUXPLL_EVENTS_LOCKED_EVENTS_LOCKED_Max (0x1UL)
  #define AUXPLL_EVENTS_LOCKED_EVENTS_LOCKED_NotGenerated (0x0UL)
  #define AUXPLL_EVENTS_LOCKED_EVENTS_LOCKED_Generated (0x1UL)


/* AUXPLL_INTEN: Enable or disable interrupt */
  #define AUXPLL_INTEN_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Enable or disable interrupt for event STARTED */
  #define AUXPLL_INTEN_STARTED_Pos (0UL)
  #define AUXPLL_INTEN_STARTED_Msk (0x1UL << AUXPLL_INTEN_STARTED_Pos)
  #define AUXPLL_INTEN_STARTED_Min (0x0UL)
  #define AUXPLL_INTEN_STARTED_Max (0x1UL)
  #define AUXPLL_INTEN_STARTED_Disabled (0x0UL)
  #define AUXPLL_INTEN_STARTED_Enabled (0x1UL)

/* STOPPED @Bit 1 : Enable or disable interrupt for event STOPPED */
  #define AUXPLL_INTEN_STOPPED_Pos (1UL)
  #define AUXPLL_INTEN_STOPPED_Msk (0x1UL << AUXPLL_INTEN_STOPPED_Pos)
  #define AUXPLL_INTEN_STOPPED_Min (0x0UL)
  #define AUXPLL_INTEN_STOPPED_Max (0x1UL)
  #define AUXPLL_INTEN_STOPPED_Disabled (0x0UL)
  #define AUXPLL_INTEN_STOPPED_Enabled (0x1UL)

/* LOCKED @Bit 2 : Enable or disable interrupt for event LOCKED */
  #define AUXPLL_INTEN_LOCKED_Pos (2UL)
  #define AUXPLL_INTEN_LOCKED_Msk (0x1UL << AUXPLL_INTEN_LOCKED_Pos)
  #define AUXPLL_INTEN_LOCKED_Min (0x0UL)
  #define AUXPLL_INTEN_LOCKED_Max (0x1UL)
  #define AUXPLL_INTEN_LOCKED_Disabled (0x0UL)
  #define AUXPLL_INTEN_LOCKED_Enabled (0x1UL)


/* AUXPLL_INTENSET: Enable interrupt */
  #define AUXPLL_INTENSET_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to enable interrupt for event STARTED */
  #define AUXPLL_INTENSET_STARTED_Pos (0UL)
  #define AUXPLL_INTENSET_STARTED_Msk (0x1UL << AUXPLL_INTENSET_STARTED_Pos)
  #define AUXPLL_INTENSET_STARTED_Min (0x0UL)
  #define AUXPLL_INTENSET_STARTED_Max (0x1UL)
  #define AUXPLL_INTENSET_STARTED_Set (0x1UL)
  #define AUXPLL_INTENSET_STARTED_Disabled (0x0UL)
  #define AUXPLL_INTENSET_STARTED_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define AUXPLL_INTENSET_STOPPED_Pos (1UL)
  #define AUXPLL_INTENSET_STOPPED_Msk (0x1UL << AUXPLL_INTENSET_STOPPED_Pos)
  #define AUXPLL_INTENSET_STOPPED_Min (0x0UL)
  #define AUXPLL_INTENSET_STOPPED_Max (0x1UL)
  #define AUXPLL_INTENSET_STOPPED_Set (0x1UL)
  #define AUXPLL_INTENSET_STOPPED_Disabled (0x0UL)
  #define AUXPLL_INTENSET_STOPPED_Enabled (0x1UL)

/* LOCKED @Bit 2 : Write '1' to enable interrupt for event LOCKED */
  #define AUXPLL_INTENSET_LOCKED_Pos (2UL)
  #define AUXPLL_INTENSET_LOCKED_Msk (0x1UL << AUXPLL_INTENSET_LOCKED_Pos)
  #define AUXPLL_INTENSET_LOCKED_Min (0x0UL)
  #define AUXPLL_INTENSET_LOCKED_Max (0x1UL)
  #define AUXPLL_INTENSET_LOCKED_Set (0x1UL)
  #define AUXPLL_INTENSET_LOCKED_Disabled (0x0UL)
  #define AUXPLL_INTENSET_LOCKED_Enabled (0x1UL)


/* AUXPLL_INTENCLR: Disable interrupt */
  #define AUXPLL_INTENCLR_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to disable interrupt for event STARTED */
  #define AUXPLL_INTENCLR_STARTED_Pos (0UL)
  #define AUXPLL_INTENCLR_STARTED_Msk (0x1UL << AUXPLL_INTENCLR_STARTED_Pos)
  #define AUXPLL_INTENCLR_STARTED_Min (0x0UL)
  #define AUXPLL_INTENCLR_STARTED_Max (0x1UL)
  #define AUXPLL_INTENCLR_STARTED_Clear (0x1UL)
  #define AUXPLL_INTENCLR_STARTED_Disabled (0x0UL)
  #define AUXPLL_INTENCLR_STARTED_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define AUXPLL_INTENCLR_STOPPED_Pos (1UL)
  #define AUXPLL_INTENCLR_STOPPED_Msk (0x1UL << AUXPLL_INTENCLR_STOPPED_Pos)
  #define AUXPLL_INTENCLR_STOPPED_Min (0x0UL)
  #define AUXPLL_INTENCLR_STOPPED_Max (0x1UL)
  #define AUXPLL_INTENCLR_STOPPED_Clear (0x1UL)
  #define AUXPLL_INTENCLR_STOPPED_Disabled (0x0UL)
  #define AUXPLL_INTENCLR_STOPPED_Enabled (0x1UL)

/* LOCKED @Bit 2 : Write '1' to disable interrupt for event LOCKED */
  #define AUXPLL_INTENCLR_LOCKED_Pos (2UL)
  #define AUXPLL_INTENCLR_LOCKED_Msk (0x1UL << AUXPLL_INTENCLR_LOCKED_Pos)
  #define AUXPLL_INTENCLR_LOCKED_Min (0x0UL)
  #define AUXPLL_INTENCLR_LOCKED_Max (0x1UL)
  #define AUXPLL_INTENCLR_LOCKED_Clear (0x1UL)
  #define AUXPLL_INTENCLR_LOCKED_Disabled (0x0UL)
  #define AUXPLL_INTENCLR_LOCKED_Enabled (0x1UL)


/* AUXPLL_INTPEND: Pending interrupts */
  #define AUXPLL_INTPEND_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Read pending status of interrupt for event STARTED */
  #define AUXPLL_INTPEND_STARTED_Pos (0UL)
  #define AUXPLL_INTPEND_STARTED_Msk (0x1UL << AUXPLL_INTPEND_STARTED_Pos)
  #define AUXPLL_INTPEND_STARTED_Min (0x0UL)
  #define AUXPLL_INTPEND_STARTED_Max (0x1UL)
  #define AUXPLL_INTPEND_STARTED_NotPending (0x0UL)
  #define AUXPLL_INTPEND_STARTED_Pending (0x1UL)

/* STOPPED @Bit 1 : Read pending status of interrupt for event STOPPED */
  #define AUXPLL_INTPEND_STOPPED_Pos (1UL)
  #define AUXPLL_INTPEND_STOPPED_Msk (0x1UL << AUXPLL_INTPEND_STOPPED_Pos)
  #define AUXPLL_INTPEND_STOPPED_Min (0x0UL)
  #define AUXPLL_INTPEND_STOPPED_Max (0x1UL)
  #define AUXPLL_INTPEND_STOPPED_NotPending (0x0UL)
  #define AUXPLL_INTPEND_STOPPED_Pending (0x1UL)

/* LOCKED @Bit 2 : Read pending status of interrupt for event LOCKED */
  #define AUXPLL_INTPEND_LOCKED_Pos (2UL)
  #define AUXPLL_INTPEND_LOCKED_Msk (0x1UL << AUXPLL_INTPEND_LOCKED_Pos)
  #define AUXPLL_INTPEND_LOCKED_Min (0x0UL)
  #define AUXPLL_INTPEND_LOCKED_Max (0x1UL)
  #define AUXPLL_INTPEND_LOCKED_NotPending (0x0UL)
  #define AUXPLL_INTPEND_LOCKED_Pending (0x1UL)


/* AUXPLL_STATUS: Status of AUXPLL */
  #define AUXPLL_STATUS_ResetValue (0x00000000UL)

/* MODE @Bit 0 : AUXPLL mode */
  #define AUXPLL_STATUS_MODE_Pos (0UL)
  #define AUXPLL_STATUS_MODE_Msk (0x1UL << AUXPLL_STATUS_MODE_Pos)
  #define AUXPLL_STATUS_MODE_Min (0x0UL)
  #define AUXPLL_STATUS_MODE_Max (0x1UL)
  #define AUXPLL_STATUS_MODE_Freerunning (0x0UL)
  #define AUXPLL_STATUS_MODE_Locked (0x1UL)

/* PLLRUNNING @Bit 1 : AUXPLL running status */
  #define AUXPLL_STATUS_PLLRUNNING_Pos (1UL)
  #define AUXPLL_STATUS_PLLRUNNING_Msk (0x1UL << AUXPLL_STATUS_PLLRUNNING_Pos)
  #define AUXPLL_STATUS_PLLRUNNING_Min (0x0UL)
  #define AUXPLL_STATUS_PLLRUNNING_Max (0x1UL)
  #define AUXPLL_STATUS_PLLRUNNING_Off (0x0UL)
  #define AUXPLL_STATUS_PLLRUNNING_Running (0x1UL)

/* FREQUENCYACTUAL @Bits 16..31 : Actual fractional PLL divider ratio */
  #define AUXPLL_STATUS_FREQUENCYACTUAL_Pos (16UL)
  #define AUXPLL_STATUS_FREQUENCYACTUAL_Msk (0xFFFFUL << AUXPLL_STATUS_FREQUENCYACTUAL_Pos) /*!< Bit mask of FREQUENCYACTUAL
                                                                            field.*/


/* AUXPLL_MIRROR: Enable LOCK for mirrored registers */
  #define AUXPLL_MIRROR_ResetValue (0x00000000UL)

/* LOCK @Bit 0 : Lock for mirrored registers */
  #define AUXPLL_MIRROR_LOCK_Pos (0UL)
  #define AUXPLL_MIRROR_LOCK_Msk (0x1UL << AUXPLL_MIRROR_LOCK_Pos)
  #define AUXPLL_MIRROR_LOCK_Min (0x0UL)
  #define AUXPLL_MIRROR_LOCK_Max (0x1UL)
  #define AUXPLL_MIRROR_LOCK_Disabled (0x0UL)
  #define AUXPLL_MIRROR_LOCK_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           AUXPM                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct AUXPM ======================================================= */
/**
  * @brief AUXPM
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_AUXPM_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                         BELLBOARD                                         ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ==================================================== Struct BELLBOARD ===================================================== */
/**
  * @brief BELLBOARD APB registers
  */
  typedef struct {
    __OM uint32_t TASKS_TRIGGER[4];
    __IM uint32_t RESERVED[60];
    __IOM uint32_t EVENTS_TRIGGERED[4];
    __IM uint32_t RESERVED1[124];
    __IOM uint32_t INTEN0;
    __IOM uint32_t INTENSET0;
    __IOM uint32_t INTENCLR0;
    __IM uint32_t INTPEND0;
    __IOM uint32_t INTEN1;
    __IOM uint32_t INTENSET1;
    __IOM uint32_t INTENCLR1;
    __IM uint32_t INTPEND1;
    __IOM uint32_t INTEN2;
    __IOM uint32_t INTENSET2;
    __IOM uint32_t INTENCLR2;
    __IM uint32_t INTPEND2;
    __IOM uint32_t INTEN3;
    __IOM uint32_t INTENSET3;
    __IOM uint32_t INTENCLR3;
    __IM uint32_t INTPEND3;
  } NRF_BELLBOARD_Type;

/* BELLBOARD_TASKS_TRIGGER: Task TRIGGER[n] */
  #define BELLBOARD_TASKS_TRIGGER_MaxCount (4UL)
  #define BELLBOARD_TASKS_TRIGGER_MaxIndex (3UL)
  #define BELLBOARD_TASKS_TRIGGER_MinIndex (0UL)
  #define BELLBOARD_TASKS_TRIGGER_ResetValue (0x00000000UL)

/* TASKS_TRIGGER @Bit 0 : Task TRIGGER[n] */
  #define BELLBOARD_TASKS_TRIGGER_TASKS_TRIGGER_Pos (0UL)
  #define BELLBOARD_TASKS_TRIGGER_TASKS_TRIGGER_Msk (0x1UL << BELLBOARD_TASKS_TRIGGER_TASKS_TRIGGER_Pos) /*!< Bit mask of
                                                                            TASKS_TRIGGER field.*/
  #define BELLBOARD_TASKS_TRIGGER_TASKS_TRIGGER_Min (0x1UL)
  #define BELLBOARD_TASKS_TRIGGER_TASKS_TRIGGER_Max (0x1UL)
  #define BELLBOARD_TASKS_TRIGGER_TASKS_TRIGGER_Trigger (0x1UL)


/* BELLBOARD_EVENTS_TRIGGERED: Event TRIGGERED[n] */
  #define BELLBOARD_EVENTS_TRIGGERED_MaxCount (4UL)
  #define BELLBOARD_EVENTS_TRIGGERED_MaxIndex (3UL)
  #define BELLBOARD_EVENTS_TRIGGERED_MinIndex (0UL)
  #define BELLBOARD_EVENTS_TRIGGERED_ResetValue (0x00000000UL)

/* EVENTS_TRIGGERED @Bit 0 : Event TRIGGERED[n] */
  #define BELLBOARD_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos (0UL)
  #define BELLBOARD_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Msk (0x1UL << BELLBOARD_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos) /*!< Bit
                                                                            mask of EVENTS_TRIGGERED field.*/
  #define BELLBOARD_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Min (0x0UL)
  #define BELLBOARD_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Max (0x1UL)
  #define BELLBOARD_EVENTS_TRIGGERED_EVENTS_TRIGGERED_NotGenerated (0x0UL)
  #define BELLBOARD_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Generated (0x1UL)


/* BELLBOARD_INTEN0: Enable or disable interrupt */
  #define BELLBOARD_INTEN0_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Enable or disable interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTEN0_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTEN0_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTEN0_TRIGGERED0_Pos)
  #define BELLBOARD_INTEN0_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTEN0_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTEN0_TRIGGERED0_Disabled (0x0UL)
  #define BELLBOARD_INTEN0_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Enable or disable interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTEN0_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTEN0_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTEN0_TRIGGERED1_Pos)
  #define BELLBOARD_INTEN0_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTEN0_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTEN0_TRIGGERED1_Disabled (0x0UL)
  #define BELLBOARD_INTEN0_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Enable or disable interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTEN0_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTEN0_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTEN0_TRIGGERED2_Pos)
  #define BELLBOARD_INTEN0_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTEN0_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTEN0_TRIGGERED2_Disabled (0x0UL)
  #define BELLBOARD_INTEN0_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Enable or disable interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTEN0_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTEN0_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTEN0_TRIGGERED3_Pos)
  #define BELLBOARD_INTEN0_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTEN0_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTEN0_TRIGGERED3_Disabled (0x0UL)
  #define BELLBOARD_INTEN0_TRIGGERED3_Enabled (0x1UL)


/* BELLBOARD_INTENSET0: Enable interrupt */
  #define BELLBOARD_INTENSET0_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to enable interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTENSET0_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTENSET0_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTENSET0_TRIGGERED0_Pos)
  #define BELLBOARD_INTENSET0_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTENSET0_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTENSET0_TRIGGERED0_Set (0x1UL)
  #define BELLBOARD_INTENSET0_TRIGGERED0_Disabled (0x0UL)
  #define BELLBOARD_INTENSET0_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to enable interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTENSET0_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTENSET0_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTENSET0_TRIGGERED1_Pos)
  #define BELLBOARD_INTENSET0_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTENSET0_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTENSET0_TRIGGERED1_Set (0x1UL)
  #define BELLBOARD_INTENSET0_TRIGGERED1_Disabled (0x0UL)
  #define BELLBOARD_INTENSET0_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to enable interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTENSET0_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTENSET0_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTENSET0_TRIGGERED2_Pos)
  #define BELLBOARD_INTENSET0_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTENSET0_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTENSET0_TRIGGERED2_Set (0x1UL)
  #define BELLBOARD_INTENSET0_TRIGGERED2_Disabled (0x0UL)
  #define BELLBOARD_INTENSET0_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to enable interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTENSET0_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTENSET0_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTENSET0_TRIGGERED3_Pos)
  #define BELLBOARD_INTENSET0_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTENSET0_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTENSET0_TRIGGERED3_Set (0x1UL)
  #define BELLBOARD_INTENSET0_TRIGGERED3_Disabled (0x0UL)
  #define BELLBOARD_INTENSET0_TRIGGERED3_Enabled (0x1UL)


/* BELLBOARD_INTENCLR0: Disable interrupt */
  #define BELLBOARD_INTENCLR0_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to disable interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTENCLR0_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTENCLR0_TRIGGERED0_Pos)
  #define BELLBOARD_INTENCLR0_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED0_Clear (0x1UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED0_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to disable interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTENCLR0_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTENCLR0_TRIGGERED1_Pos)
  #define BELLBOARD_INTENCLR0_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED1_Clear (0x1UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED1_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to disable interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTENCLR0_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTENCLR0_TRIGGERED2_Pos)
  #define BELLBOARD_INTENCLR0_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED2_Clear (0x1UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED2_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to disable interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTENCLR0_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTENCLR0_TRIGGERED3_Pos)
  #define BELLBOARD_INTENCLR0_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED3_Clear (0x1UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED3_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR0_TRIGGERED3_Enabled (0x1UL)


/* BELLBOARD_INTPEND0: Pending interrupts */
  #define BELLBOARD_INTPEND0_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Read pending status of interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTPEND0_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTPEND0_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTPEND0_TRIGGERED0_Pos)
  #define BELLBOARD_INTPEND0_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTPEND0_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTPEND0_TRIGGERED0_NotPending (0x0UL)
  #define BELLBOARD_INTPEND0_TRIGGERED0_Pending (0x1UL)

/* TRIGGERED1 @Bit 1 : Read pending status of interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTPEND0_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTPEND0_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTPEND0_TRIGGERED1_Pos)
  #define BELLBOARD_INTPEND0_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTPEND0_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTPEND0_TRIGGERED1_NotPending (0x0UL)
  #define BELLBOARD_INTPEND0_TRIGGERED1_Pending (0x1UL)

/* TRIGGERED2 @Bit 2 : Read pending status of interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTPEND0_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTPEND0_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTPEND0_TRIGGERED2_Pos)
  #define BELLBOARD_INTPEND0_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTPEND0_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTPEND0_TRIGGERED2_NotPending (0x0UL)
  #define BELLBOARD_INTPEND0_TRIGGERED2_Pending (0x1UL)

/* TRIGGERED3 @Bit 3 : Read pending status of interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTPEND0_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTPEND0_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTPEND0_TRIGGERED3_Pos)
  #define BELLBOARD_INTPEND0_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTPEND0_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTPEND0_TRIGGERED3_NotPending (0x0UL)
  #define BELLBOARD_INTPEND0_TRIGGERED3_Pending (0x1UL)


/* BELLBOARD_INTEN1: Enable or disable interrupt */
  #define BELLBOARD_INTEN1_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Enable or disable interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTEN1_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTEN1_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTEN1_TRIGGERED0_Pos)
  #define BELLBOARD_INTEN1_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTEN1_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTEN1_TRIGGERED0_Disabled (0x0UL)
  #define BELLBOARD_INTEN1_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Enable or disable interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTEN1_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTEN1_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTEN1_TRIGGERED1_Pos)
  #define BELLBOARD_INTEN1_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTEN1_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTEN1_TRIGGERED1_Disabled (0x0UL)
  #define BELLBOARD_INTEN1_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Enable or disable interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTEN1_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTEN1_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTEN1_TRIGGERED2_Pos)
  #define BELLBOARD_INTEN1_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTEN1_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTEN1_TRIGGERED2_Disabled (0x0UL)
  #define BELLBOARD_INTEN1_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Enable or disable interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTEN1_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTEN1_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTEN1_TRIGGERED3_Pos)
  #define BELLBOARD_INTEN1_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTEN1_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTEN1_TRIGGERED3_Disabled (0x0UL)
  #define BELLBOARD_INTEN1_TRIGGERED3_Enabled (0x1UL)


/* BELLBOARD_INTENSET1: Enable interrupt */
  #define BELLBOARD_INTENSET1_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to enable interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTENSET1_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTENSET1_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTENSET1_TRIGGERED0_Pos)
  #define BELLBOARD_INTENSET1_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTENSET1_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTENSET1_TRIGGERED0_Set (0x1UL)
  #define BELLBOARD_INTENSET1_TRIGGERED0_Disabled (0x0UL)
  #define BELLBOARD_INTENSET1_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to enable interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTENSET1_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTENSET1_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTENSET1_TRIGGERED1_Pos)
  #define BELLBOARD_INTENSET1_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTENSET1_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTENSET1_TRIGGERED1_Set (0x1UL)
  #define BELLBOARD_INTENSET1_TRIGGERED1_Disabled (0x0UL)
  #define BELLBOARD_INTENSET1_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to enable interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTENSET1_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTENSET1_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTENSET1_TRIGGERED2_Pos)
  #define BELLBOARD_INTENSET1_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTENSET1_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTENSET1_TRIGGERED2_Set (0x1UL)
  #define BELLBOARD_INTENSET1_TRIGGERED2_Disabled (0x0UL)
  #define BELLBOARD_INTENSET1_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to enable interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTENSET1_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTENSET1_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTENSET1_TRIGGERED3_Pos)
  #define BELLBOARD_INTENSET1_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTENSET1_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTENSET1_TRIGGERED3_Set (0x1UL)
  #define BELLBOARD_INTENSET1_TRIGGERED3_Disabled (0x0UL)
  #define BELLBOARD_INTENSET1_TRIGGERED3_Enabled (0x1UL)


/* BELLBOARD_INTENCLR1: Disable interrupt */
  #define BELLBOARD_INTENCLR1_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to disable interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTENCLR1_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTENCLR1_TRIGGERED0_Pos)
  #define BELLBOARD_INTENCLR1_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED0_Clear (0x1UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED0_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to disable interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTENCLR1_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTENCLR1_TRIGGERED1_Pos)
  #define BELLBOARD_INTENCLR1_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED1_Clear (0x1UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED1_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to disable interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTENCLR1_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTENCLR1_TRIGGERED2_Pos)
  #define BELLBOARD_INTENCLR1_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED2_Clear (0x1UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED2_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to disable interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTENCLR1_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTENCLR1_TRIGGERED3_Pos)
  #define BELLBOARD_INTENCLR1_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED3_Clear (0x1UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED3_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR1_TRIGGERED3_Enabled (0x1UL)


/* BELLBOARD_INTPEND1: Pending interrupts */
  #define BELLBOARD_INTPEND1_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Read pending status of interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTPEND1_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTPEND1_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTPEND1_TRIGGERED0_Pos)
  #define BELLBOARD_INTPEND1_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTPEND1_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTPEND1_TRIGGERED0_NotPending (0x0UL)
  #define BELLBOARD_INTPEND1_TRIGGERED0_Pending (0x1UL)

/* TRIGGERED1 @Bit 1 : Read pending status of interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTPEND1_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTPEND1_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTPEND1_TRIGGERED1_Pos)
  #define BELLBOARD_INTPEND1_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTPEND1_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTPEND1_TRIGGERED1_NotPending (0x0UL)
  #define BELLBOARD_INTPEND1_TRIGGERED1_Pending (0x1UL)

/* TRIGGERED2 @Bit 2 : Read pending status of interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTPEND1_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTPEND1_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTPEND1_TRIGGERED2_Pos)
  #define BELLBOARD_INTPEND1_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTPEND1_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTPEND1_TRIGGERED2_NotPending (0x0UL)
  #define BELLBOARD_INTPEND1_TRIGGERED2_Pending (0x1UL)

/* TRIGGERED3 @Bit 3 : Read pending status of interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTPEND1_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTPEND1_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTPEND1_TRIGGERED3_Pos)
  #define BELLBOARD_INTPEND1_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTPEND1_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTPEND1_TRIGGERED3_NotPending (0x0UL)
  #define BELLBOARD_INTPEND1_TRIGGERED3_Pending (0x1UL)


/* BELLBOARD_INTEN2: Enable or disable interrupt */
  #define BELLBOARD_INTEN2_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Enable or disable interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTEN2_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTEN2_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTEN2_TRIGGERED0_Pos)
  #define BELLBOARD_INTEN2_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTEN2_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTEN2_TRIGGERED0_Disabled (0x0UL)
  #define BELLBOARD_INTEN2_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Enable or disable interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTEN2_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTEN2_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTEN2_TRIGGERED1_Pos)
  #define BELLBOARD_INTEN2_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTEN2_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTEN2_TRIGGERED1_Disabled (0x0UL)
  #define BELLBOARD_INTEN2_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Enable or disable interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTEN2_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTEN2_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTEN2_TRIGGERED2_Pos)
  #define BELLBOARD_INTEN2_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTEN2_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTEN2_TRIGGERED2_Disabled (0x0UL)
  #define BELLBOARD_INTEN2_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Enable or disable interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTEN2_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTEN2_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTEN2_TRIGGERED3_Pos)
  #define BELLBOARD_INTEN2_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTEN2_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTEN2_TRIGGERED3_Disabled (0x0UL)
  #define BELLBOARD_INTEN2_TRIGGERED3_Enabled (0x1UL)


/* BELLBOARD_INTENSET2: Enable interrupt */
  #define BELLBOARD_INTENSET2_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to enable interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTENSET2_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTENSET2_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTENSET2_TRIGGERED0_Pos)
  #define BELLBOARD_INTENSET2_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTENSET2_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTENSET2_TRIGGERED0_Set (0x1UL)
  #define BELLBOARD_INTENSET2_TRIGGERED0_Disabled (0x0UL)
  #define BELLBOARD_INTENSET2_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to enable interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTENSET2_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTENSET2_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTENSET2_TRIGGERED1_Pos)
  #define BELLBOARD_INTENSET2_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTENSET2_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTENSET2_TRIGGERED1_Set (0x1UL)
  #define BELLBOARD_INTENSET2_TRIGGERED1_Disabled (0x0UL)
  #define BELLBOARD_INTENSET2_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to enable interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTENSET2_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTENSET2_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTENSET2_TRIGGERED2_Pos)
  #define BELLBOARD_INTENSET2_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTENSET2_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTENSET2_TRIGGERED2_Set (0x1UL)
  #define BELLBOARD_INTENSET2_TRIGGERED2_Disabled (0x0UL)
  #define BELLBOARD_INTENSET2_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to enable interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTENSET2_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTENSET2_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTENSET2_TRIGGERED3_Pos)
  #define BELLBOARD_INTENSET2_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTENSET2_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTENSET2_TRIGGERED3_Set (0x1UL)
  #define BELLBOARD_INTENSET2_TRIGGERED3_Disabled (0x0UL)
  #define BELLBOARD_INTENSET2_TRIGGERED3_Enabled (0x1UL)


/* BELLBOARD_INTENCLR2: Disable interrupt */
  #define BELLBOARD_INTENCLR2_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to disable interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTENCLR2_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTENCLR2_TRIGGERED0_Pos)
  #define BELLBOARD_INTENCLR2_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED0_Clear (0x1UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED0_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to disable interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTENCLR2_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTENCLR2_TRIGGERED1_Pos)
  #define BELLBOARD_INTENCLR2_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED1_Clear (0x1UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED1_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to disable interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTENCLR2_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTENCLR2_TRIGGERED2_Pos)
  #define BELLBOARD_INTENCLR2_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED2_Clear (0x1UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED2_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to disable interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTENCLR2_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTENCLR2_TRIGGERED3_Pos)
  #define BELLBOARD_INTENCLR2_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED3_Clear (0x1UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED3_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR2_TRIGGERED3_Enabled (0x1UL)


/* BELLBOARD_INTPEND2: Pending interrupts */
  #define BELLBOARD_INTPEND2_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Read pending status of interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTPEND2_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTPEND2_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTPEND2_TRIGGERED0_Pos)
  #define BELLBOARD_INTPEND2_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTPEND2_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTPEND2_TRIGGERED0_NotPending (0x0UL)
  #define BELLBOARD_INTPEND2_TRIGGERED0_Pending (0x1UL)

/* TRIGGERED1 @Bit 1 : Read pending status of interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTPEND2_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTPEND2_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTPEND2_TRIGGERED1_Pos)
  #define BELLBOARD_INTPEND2_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTPEND2_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTPEND2_TRIGGERED1_NotPending (0x0UL)
  #define BELLBOARD_INTPEND2_TRIGGERED1_Pending (0x1UL)

/* TRIGGERED2 @Bit 2 : Read pending status of interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTPEND2_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTPEND2_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTPEND2_TRIGGERED2_Pos)
  #define BELLBOARD_INTPEND2_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTPEND2_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTPEND2_TRIGGERED2_NotPending (0x0UL)
  #define BELLBOARD_INTPEND2_TRIGGERED2_Pending (0x1UL)

/* TRIGGERED3 @Bit 3 : Read pending status of interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTPEND2_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTPEND2_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTPEND2_TRIGGERED3_Pos)
  #define BELLBOARD_INTPEND2_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTPEND2_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTPEND2_TRIGGERED3_NotPending (0x0UL)
  #define BELLBOARD_INTPEND2_TRIGGERED3_Pending (0x1UL)


/* BELLBOARD_INTEN3: Enable or disable interrupt */
  #define BELLBOARD_INTEN3_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Enable or disable interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTEN3_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTEN3_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTEN3_TRIGGERED0_Pos)
  #define BELLBOARD_INTEN3_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTEN3_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTEN3_TRIGGERED0_Disabled (0x0UL)
  #define BELLBOARD_INTEN3_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Enable or disable interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTEN3_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTEN3_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTEN3_TRIGGERED1_Pos)
  #define BELLBOARD_INTEN3_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTEN3_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTEN3_TRIGGERED1_Disabled (0x0UL)
  #define BELLBOARD_INTEN3_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Enable or disable interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTEN3_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTEN3_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTEN3_TRIGGERED2_Pos)
  #define BELLBOARD_INTEN3_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTEN3_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTEN3_TRIGGERED2_Disabled (0x0UL)
  #define BELLBOARD_INTEN3_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Enable or disable interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTEN3_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTEN3_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTEN3_TRIGGERED3_Pos)
  #define BELLBOARD_INTEN3_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTEN3_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTEN3_TRIGGERED3_Disabled (0x0UL)
  #define BELLBOARD_INTEN3_TRIGGERED3_Enabled (0x1UL)


/* BELLBOARD_INTENSET3: Enable interrupt */
  #define BELLBOARD_INTENSET3_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to enable interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTENSET3_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTENSET3_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTENSET3_TRIGGERED0_Pos)
  #define BELLBOARD_INTENSET3_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTENSET3_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTENSET3_TRIGGERED0_Set (0x1UL)
  #define BELLBOARD_INTENSET3_TRIGGERED0_Disabled (0x0UL)
  #define BELLBOARD_INTENSET3_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to enable interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTENSET3_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTENSET3_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTENSET3_TRIGGERED1_Pos)
  #define BELLBOARD_INTENSET3_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTENSET3_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTENSET3_TRIGGERED1_Set (0x1UL)
  #define BELLBOARD_INTENSET3_TRIGGERED1_Disabled (0x0UL)
  #define BELLBOARD_INTENSET3_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to enable interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTENSET3_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTENSET3_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTENSET3_TRIGGERED2_Pos)
  #define BELLBOARD_INTENSET3_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTENSET3_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTENSET3_TRIGGERED2_Set (0x1UL)
  #define BELLBOARD_INTENSET3_TRIGGERED2_Disabled (0x0UL)
  #define BELLBOARD_INTENSET3_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to enable interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTENSET3_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTENSET3_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTENSET3_TRIGGERED3_Pos)
  #define BELLBOARD_INTENSET3_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTENSET3_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTENSET3_TRIGGERED3_Set (0x1UL)
  #define BELLBOARD_INTENSET3_TRIGGERED3_Disabled (0x0UL)
  #define BELLBOARD_INTENSET3_TRIGGERED3_Enabled (0x1UL)


/* BELLBOARD_INTENCLR3: Disable interrupt */
  #define BELLBOARD_INTENCLR3_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to disable interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTENCLR3_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTENCLR3_TRIGGERED0_Pos)
  #define BELLBOARD_INTENCLR3_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED0_Clear (0x1UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED0_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to disable interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTENCLR3_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTENCLR3_TRIGGERED1_Pos)
  #define BELLBOARD_INTENCLR3_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED1_Clear (0x1UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED1_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to disable interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTENCLR3_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTENCLR3_TRIGGERED2_Pos)
  #define BELLBOARD_INTENCLR3_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED2_Clear (0x1UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED2_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to disable interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTENCLR3_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTENCLR3_TRIGGERED3_Pos)
  #define BELLBOARD_INTENCLR3_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED3_Clear (0x1UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED3_Disabled (0x0UL)
  #define BELLBOARD_INTENCLR3_TRIGGERED3_Enabled (0x1UL)


/* BELLBOARD_INTPEND3: Pending interrupts */
  #define BELLBOARD_INTPEND3_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Read pending status of interrupt for event TRIGGERED[0] */
  #define BELLBOARD_INTPEND3_TRIGGERED0_Pos (0UL)
  #define BELLBOARD_INTPEND3_TRIGGERED0_Msk (0x1UL << BELLBOARD_INTPEND3_TRIGGERED0_Pos)
  #define BELLBOARD_INTPEND3_TRIGGERED0_Min (0x0UL)
  #define BELLBOARD_INTPEND3_TRIGGERED0_Max (0x1UL)
  #define BELLBOARD_INTPEND3_TRIGGERED0_NotPending (0x0UL)
  #define BELLBOARD_INTPEND3_TRIGGERED0_Pending (0x1UL)

/* TRIGGERED1 @Bit 1 : Read pending status of interrupt for event TRIGGERED[1] */
  #define BELLBOARD_INTPEND3_TRIGGERED1_Pos (1UL)
  #define BELLBOARD_INTPEND3_TRIGGERED1_Msk (0x1UL << BELLBOARD_INTPEND3_TRIGGERED1_Pos)
  #define BELLBOARD_INTPEND3_TRIGGERED1_Min (0x0UL)
  #define BELLBOARD_INTPEND3_TRIGGERED1_Max (0x1UL)
  #define BELLBOARD_INTPEND3_TRIGGERED1_NotPending (0x0UL)
  #define BELLBOARD_INTPEND3_TRIGGERED1_Pending (0x1UL)

/* TRIGGERED2 @Bit 2 : Read pending status of interrupt for event TRIGGERED[2] */
  #define BELLBOARD_INTPEND3_TRIGGERED2_Pos (2UL)
  #define BELLBOARD_INTPEND3_TRIGGERED2_Msk (0x1UL << BELLBOARD_INTPEND3_TRIGGERED2_Pos)
  #define BELLBOARD_INTPEND3_TRIGGERED2_Min (0x0UL)
  #define BELLBOARD_INTPEND3_TRIGGERED2_Max (0x1UL)
  #define BELLBOARD_INTPEND3_TRIGGERED2_NotPending (0x0UL)
  #define BELLBOARD_INTPEND3_TRIGGERED2_Pending (0x1UL)

/* TRIGGERED3 @Bit 3 : Read pending status of interrupt for event TRIGGERED[3] */
  #define BELLBOARD_INTPEND3_TRIGGERED3_Pos (3UL)
  #define BELLBOARD_INTPEND3_TRIGGERED3_Msk (0x1UL << BELLBOARD_INTPEND3_TRIGGERED3_Pos)
  #define BELLBOARD_INTPEND3_TRIGGERED3_Min (0x0UL)
  #define BELLBOARD_INTPEND3_TRIGGERED3_Max (0x1UL)
  #define BELLBOARD_INTPEND3_TRIGGERED3_NotPending (0x0UL)
  #define BELLBOARD_INTPEND3_TRIGGERED3_Pending (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           CACHE                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct CACHE_PROFILING ================================================== */
/**
  * @brief PROFILING [CACHE_PROFILING] (unspecified)
  */
typedef struct {
  __IOM uint32_t  ENABLE;
  __OM  uint32_t  CLEAR;
  __IM  uint32_t  HIT;
  __IM  uint32_t  MISS;
  __IM  uint32_t  LMISS;
  __IM  uint32_t  READS;
  __IM  uint32_t  WRITES;
} NRF_CACHE_PROFILING_Type;

/* CACHE_PROFILING_ENABLE: Enable the profiling counters. */
  #define CACHE_PROFILING_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable the profiling counters */
  #define CACHE_PROFILING_ENABLE_ENABLE_Pos (0UL)
  #define CACHE_PROFILING_ENABLE_ENABLE_Msk (0x1UL << CACHE_PROFILING_ENABLE_ENABLE_Pos)
  #define CACHE_PROFILING_ENABLE_ENABLE_Min (0x0UL)
  #define CACHE_PROFILING_ENABLE_ENABLE_Max (0x1UL)
  #define CACHE_PROFILING_ENABLE_ENABLE_Disable (0x0UL)
  #define CACHE_PROFILING_ENABLE_ENABLE_Enable (0x1UL)


/* CACHE_PROFILING_CLEAR: Clear the profiling counters. */
  #define CACHE_PROFILING_CLEAR_ResetValue (0x00000000UL)

/* CLEAR @Bit 0 : Clearing the profiling counters */
  #define CACHE_PROFILING_CLEAR_CLEAR_Pos (0UL)
  #define CACHE_PROFILING_CLEAR_CLEAR_Msk (0x1UL << CACHE_PROFILING_CLEAR_CLEAR_Pos)
  #define CACHE_PROFILING_CLEAR_CLEAR_Min (0x1UL)
  #define CACHE_PROFILING_CLEAR_CLEAR_Max (0x1UL)
  #define CACHE_PROFILING_CLEAR_CLEAR_Clear (0x1UL)


/* CACHE_PROFILING_HIT: The cache hit counter for cache region. */
  #define CACHE_PROFILING_HIT_ResetValue (0x00000000UL)

/* HITS @Bits 0..31 : Number of cache hits */
  #define CACHE_PROFILING_HIT_HITS_Pos (0UL)
  #define CACHE_PROFILING_HIT_HITS_Msk (0xFFFFFFFFUL << CACHE_PROFILING_HIT_HITS_Pos)


/* CACHE_PROFILING_MISS: The cache miss counter for cache region. */
  #define CACHE_PROFILING_MISS_ResetValue (0x00000000UL)

/* MISSES @Bits 0..31 : Number of cache misses */
  #define CACHE_PROFILING_MISS_MISSES_Pos (0UL)
  #define CACHE_PROFILING_MISS_MISSES_Msk (0xFFFFFFFFUL << CACHE_PROFILING_MISS_MISSES_Pos)


/* CACHE_PROFILING_LMISS: The cache line miss counter for cache region. */
  #define CACHE_PROFILING_LMISS_ResetValue (0x00000000UL)

/* LMISSES @Bits 0..31 : Number of cache line misses */
  #define CACHE_PROFILING_LMISS_LMISSES_Pos (0UL)
  #define CACHE_PROFILING_LMISS_LMISSES_Msk (0xFFFFFFFFUL << CACHE_PROFILING_LMISS_LMISSES_Pos)


/* CACHE_PROFILING_READS: Number of reads for cache region. */
  #define CACHE_PROFILING_READS_ResetValue (0x00000000UL)

/* READS @Bits 0..31 : Number of reads for cache region. */
  #define CACHE_PROFILING_READS_READS_Pos (0UL)
  #define CACHE_PROFILING_READS_READS_Msk (0xFFFFFFFFUL << CACHE_PROFILING_READS_READS_Pos)


/* CACHE_PROFILING_WRITES: Number of writes for cache region. */
  #define CACHE_PROFILING_WRITES_ResetValue (0x00000000UL)

/* WRITES @Bits 0..31 : Number of writes for cache region. */
  #define CACHE_PROFILING_WRITES_WRITES_Pos (0UL)
  #define CACHE_PROFILING_WRITES_WRITES_Msk (0xFFFFFFFFUL << CACHE_PROFILING_WRITES_WRITES_Pos)


/* ====================================================== Struct CACHE ======================================================= */
/**
  * @brief Cache
  */
  typedef struct {
    __IM uint32_t RESERVED[2];
    __OM uint32_t TASKS_INVALIDATECACHE;
    __IM uint32_t RESERVED1[2];
    __OM uint32_t TASKS_INVALIDATELINE;
    __IM uint32_t RESERVED2[2];
    __OM uint32_t TASKS_ERASE;
    __IM uint32_t RESERVED3[247];
    __IM uint32_t STATUS;
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED4;
    __IOM uint32_t LINEADDR;
    __IOM NRF_CACHE_PROFILING_Type PROFILING;
    __IOM uint32_t DEBUGLOCK;
    __IOM uint32_t WRITELOCK;
  } NRF_CACHE_Type;

/* CACHE_TASKS_INVALIDATECACHE: Invalidate the cache. */
  #define CACHE_TASKS_INVALIDATECACHE_ResetValue (0x00000000UL)

/* TASKS_INVALIDATECACHE @Bit 0 : Invalidate the cache. */
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Pos (0UL)
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Msk (0x1UL << CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Pos)
                                                                            /*!< Bit mask of TASKS_INVALIDATECACHE field.*/
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Min (0x1UL) /*!< Min enumerator value of TASKS_INVALIDATECACHE
                                                                            field.*/
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Max (0x1UL) /*!< Max enumerator value of TASKS_INVALIDATECACHE
                                                                            field.*/
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Trigger (0x1UL)


/* CACHE_TASKS_INVALIDATELINE: Invalidate the line. */
  #define CACHE_TASKS_INVALIDATELINE_ResetValue (0x00000000UL)

/* TASKS_INVALIDATELINE @Bit 0 : Invalidate the line. */
  #define CACHE_TASKS_INVALIDATELINE_TASKS_INVALIDATELINE_Pos (0UL)
  #define CACHE_TASKS_INVALIDATELINE_TASKS_INVALIDATELINE_Msk (0x1UL << CACHE_TASKS_INVALIDATELINE_TASKS_INVALIDATELINE_Pos)
                                                                            /*!< Bit mask of TASKS_INVALIDATELINE field.*/
  #define CACHE_TASKS_INVALIDATELINE_TASKS_INVALIDATELINE_Min (0x1UL)
  #define CACHE_TASKS_INVALIDATELINE_TASKS_INVALIDATELINE_Max (0x1UL)
  #define CACHE_TASKS_INVALIDATELINE_TASKS_INVALIDATELINE_Trigger (0x1UL)


/* CACHE_TASKS_ERASE: Erase the cache. */
  #define CACHE_TASKS_ERASE_ResetValue (0x00000000UL)

/* TASKS_ERASE @Bit 0 : Erase the cache. */
  #define CACHE_TASKS_ERASE_TASKS_ERASE_Pos (0UL)
  #define CACHE_TASKS_ERASE_TASKS_ERASE_Msk (0x1UL << CACHE_TASKS_ERASE_TASKS_ERASE_Pos)
  #define CACHE_TASKS_ERASE_TASKS_ERASE_Min (0x1UL)
  #define CACHE_TASKS_ERASE_TASKS_ERASE_Max (0x1UL)
  #define CACHE_TASKS_ERASE_TASKS_ERASE_Trigger (0x1UL)


/* CACHE_STATUS: Status of the cache activities. */
  #define CACHE_STATUS_ResetValue (0x00000000UL)

/* READY @Bit 0 : Ready status. */
  #define CACHE_STATUS_READY_Pos (0UL)
  #define CACHE_STATUS_READY_Msk (0x1UL << CACHE_STATUS_READY_Pos)
  #define CACHE_STATUS_READY_Min (0x0UL)
  #define CACHE_STATUS_READY_Max (0x1UL)
  #define CACHE_STATUS_READY_Ready (0x0UL)
  #define CACHE_STATUS_READY_Busy (0x1UL)


/* CACHE_ENABLE: Enable cache. */
  #define CACHE_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable cache */
  #define CACHE_ENABLE_ENABLE_Pos (0UL)
  #define CACHE_ENABLE_ENABLE_Msk (0x1UL << CACHE_ENABLE_ENABLE_Pos)
  #define CACHE_ENABLE_ENABLE_Min (0x0UL)
  #define CACHE_ENABLE_ENABLE_Max (0x1UL)
  #define CACHE_ENABLE_ENABLE_Disabled (0x0UL)
  #define CACHE_ENABLE_ENABLE_Enabled (0x1UL)


/* CACHE_LINEADDR: Memory address covered by the line to be maintained. */
  #define CACHE_LINEADDR_ResetValue (0x00000000UL)

/* ADDR @Bits 0..31 : Address. */
  #define CACHE_LINEADDR_ADDR_Pos (0UL)
  #define CACHE_LINEADDR_ADDR_Msk (0xFFFFFFFFUL << CACHE_LINEADDR_ADDR_Pos)


/* CACHE_DEBUGLOCK: Lock debug mode. */
  #define CACHE_DEBUGLOCK_ResetValue (0x00000000UL)

/* DEBUGLOCK @Bit 0 : Lock debug mode */
  #define CACHE_DEBUGLOCK_DEBUGLOCK_Pos (0UL)
  #define CACHE_DEBUGLOCK_DEBUGLOCK_Msk (0x1UL << CACHE_DEBUGLOCK_DEBUGLOCK_Pos)
  #define CACHE_DEBUGLOCK_DEBUGLOCK_Min (0x0UL)
  #define CACHE_DEBUGLOCK_DEBUGLOCK_Max (0x1UL)
  #define CACHE_DEBUGLOCK_DEBUGLOCK_Unlocked (0x0UL)
  #define CACHE_DEBUGLOCK_DEBUGLOCK_Locked (0x1UL)


/* CACHE_WRITELOCK: Lock cache updates. */
  #define CACHE_WRITELOCK_ResetValue (0x00000000UL)

/* WRITELOCK @Bit 0 : Lock cache updates */
  #define CACHE_WRITELOCK_WRITELOCK_Pos (0UL)
  #define CACHE_WRITELOCK_WRITELOCK_Msk (0x1UL << CACHE_WRITELOCK_WRITELOCK_Pos)
  #define CACHE_WRITELOCK_WRITELOCK_Min (0x0UL)
  #define CACHE_WRITELOCK_WRITELOCK_Max (0x1UL)
  #define CACHE_WRITELOCK_WRITELOCK_Unlocked (0x0UL)
  #define CACHE_WRITELOCK_WRITELOCK_Locked (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                         CACHEDATA                                         ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* =============================================== Struct CACHEDATA_SET_WAY_DU =============================================== */
/**
  * @brief DU [CACHEDATA_SET_WAY_DU] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DATA[2];                           /*!< (@ 0x00000000) Cache data bits for DATA[q] in DU[p] (DataUnit) of
                                                                         SET[n], WAY[o].*/
} NRF_CACHEDATA_SET_WAY_DU_Type;
  #define CACHEDATA_SET_WAY_DU_MaxCount (4UL)
  #define CACHEDATA_SET_WAY_DU_MaxIndex (3UL)
  #define CACHEDATA_SET_WAY_DU_MinIndex (0UL)

/* CACHEDATA_SET_WAY_DU_DATA: Cache data bits for DATA[q] in DU[p] (DataUnit) of SET[n], WAY[o]. */
  #define CACHEDATA_SET_WAY_DU_DATA_MaxCount (2UL)
  #define CACHEDATA_SET_WAY_DU_DATA_MaxIndex (1UL)
  #define CACHEDATA_SET_WAY_DU_DATA_MinIndex (0UL)
  #define CACHEDATA_SET_WAY_DU_DATA_ResetValue (0x00000000UL)

/* Data @Bits 0..31 : Data */
  #define CACHEDATA_SET_WAY_DU_DATA_Data_Pos (0UL)
  #define CACHEDATA_SET_WAY_DU_DATA_Data_Msk (0xFFFFFFFFUL << CACHEDATA_SET_WAY_DU_DATA_Data_Pos)



/* ================================================ Struct CACHEDATA_SET_WAY ================================================= */
/**
  * @brief WAY [CACHEDATA_SET_WAY] (unspecified)
  */
typedef struct {
  __IOM NRF_CACHEDATA_SET_WAY_DU_Type DU[4];
} NRF_CACHEDATA_SET_WAY_Type;
  #define CACHEDATA_SET_WAY_MaxCount (2UL)
  #define CACHEDATA_SET_WAY_MaxIndex (1UL)
  #define CACHEDATA_SET_WAY_MinIndex (0UL)


/* ================================================== Struct CACHEDATA_SET =================================================== */
/**
  * @brief SET [CACHEDATA_SET] (unspecified)
  */
typedef struct {
  __IOM NRF_CACHEDATA_SET_WAY_Type WAY[2];
} NRF_CACHEDATA_SET_Type;
  #define CACHEDATA_SET_MaxCount (128UL)
  #define CACHEDATA_SET_MaxIndex (127UL)
  #define CACHEDATA_SET_MinIndex (0UL)

/* ==================================================== Struct CACHEDATA ===================================================== */
/**
  * @brief CACHEDATA
  */
  typedef struct {
    __IOM NRF_CACHEDATA_SET_Type SET[128];
  } NRF_CACHEDATA_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                         CACHEINFO                                         ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct CACHEINFO_SET_WAY ================================================= */
/**
  * @brief WAY [CACHEINFO_SET_WAY] (unspecified)
  */
typedef struct {
  __IOM uint32_t  INFO;
} NRF_CACHEINFO_SET_WAY_Type;
  #define CACHEINFO_SET_WAY_MaxCount (2UL)
  #define CACHEINFO_SET_WAY_MaxIndex (1UL)
  #define CACHEINFO_SET_WAY_MinIndex (0UL)

/* CACHEINFO_SET_WAY_INFO: Cache information for SET[n], WAY[o]. */
  #define CACHEINFO_SET_WAY_INFO_ResetValue (0x00000000UL)

/* TAG @Bits 0..23 : Cache tag. */
  #define CACHEINFO_SET_WAY_INFO_TAG_Pos (0UL)
  #define CACHEINFO_SET_WAY_INFO_TAG_Msk (0xFFFFFFUL << CACHEINFO_SET_WAY_INFO_TAG_Pos)

/* DUV0 @Bit 24 : Data unit valid info. */
  #define CACHEINFO_SET_WAY_INFO_DUV0_Pos (24UL)
  #define CACHEINFO_SET_WAY_INFO_DUV0_Msk (0x1UL << CACHEINFO_SET_WAY_INFO_DUV0_Pos)
  #define CACHEINFO_SET_WAY_INFO_DUV0_Min (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV0_Max (0x1UL)
  #define CACHEINFO_SET_WAY_INFO_DUV0_Invalid (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV0_Valid (0x1UL)

/* DUV1 @Bit 25 : Data unit valid info. */
  #define CACHEINFO_SET_WAY_INFO_DUV1_Pos (25UL)
  #define CACHEINFO_SET_WAY_INFO_DUV1_Msk (0x1UL << CACHEINFO_SET_WAY_INFO_DUV1_Pos)
  #define CACHEINFO_SET_WAY_INFO_DUV1_Min (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV1_Max (0x1UL)
  #define CACHEINFO_SET_WAY_INFO_DUV1_Invalid (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV1_Valid (0x1UL)

/* DUV2 @Bit 26 : Data unit valid info. */
  #define CACHEINFO_SET_WAY_INFO_DUV2_Pos (26UL)
  #define CACHEINFO_SET_WAY_INFO_DUV2_Msk (0x1UL << CACHEINFO_SET_WAY_INFO_DUV2_Pos)
  #define CACHEINFO_SET_WAY_INFO_DUV2_Min (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV2_Max (0x1UL)
  #define CACHEINFO_SET_WAY_INFO_DUV2_Invalid (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV2_Valid (0x1UL)

/* DUV3 @Bit 27 : Data unit valid info. */
  #define CACHEINFO_SET_WAY_INFO_DUV3_Pos (27UL)
  #define CACHEINFO_SET_WAY_INFO_DUV3_Msk (0x1UL << CACHEINFO_SET_WAY_INFO_DUV3_Pos)
  #define CACHEINFO_SET_WAY_INFO_DUV3_Min (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV3_Max (0x1UL)
  #define CACHEINFO_SET_WAY_INFO_DUV3_Invalid (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_DUV3_Valid (0x1UL)

/* V @Bit 30 : Line valid bit. */
  #define CACHEINFO_SET_WAY_INFO_V_Pos (30UL)
  #define CACHEINFO_SET_WAY_INFO_V_Msk (0x1UL << CACHEINFO_SET_WAY_INFO_V_Pos)
  #define CACHEINFO_SET_WAY_INFO_V_Min (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_V_Max (0x1UL)
  #define CACHEINFO_SET_WAY_INFO_V_Invalid (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_V_Valid (0x1UL)

/* MRU @Bit 31 : Most recently used way. */
  #define CACHEINFO_SET_WAY_INFO_MRU_Pos (31UL)
  #define CACHEINFO_SET_WAY_INFO_MRU_Msk (0x1UL << CACHEINFO_SET_WAY_INFO_MRU_Pos)
  #define CACHEINFO_SET_WAY_INFO_MRU_Min (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_MRU_Max (0x1UL)
  #define CACHEINFO_SET_WAY_INFO_MRU_Way0 (0x0UL)
  #define CACHEINFO_SET_WAY_INFO_MRU_Way1 (0x1UL)



/* ================================================== Struct CACHEINFO_SET =================================================== */
/**
  * @brief SET [CACHEINFO_SET] (unspecified)
  */
typedef struct {
  __IOM NRF_CACHEINFO_SET_WAY_Type WAY[2];
} NRF_CACHEINFO_SET_Type;
  #define CACHEINFO_SET_MaxCount (128UL)
  #define CACHEINFO_SET_MaxIndex (127UL)
  #define CACHEINFO_SET_MinIndex (0UL)

/* ==================================================== Struct CACHEINFO ===================================================== */
/**
  * @brief CACHEINFO
  */
  typedef struct {
    __IOM NRF_CACHEINFO_SET_Type SET[128];
  } NRF_CACHEINFO_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            CCM                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ===================================================== Struct CCM_KEY ====================================================== */
/**
  * @brief KEY [CCM_KEY] (unspecified)
  */
typedef struct {
  __OM  uint32_t  VALUE[4];
} NRF_CCM_KEY_Type;

/* CCM_KEY_VALUE: 128-bit AES key */
  #define CCM_KEY_VALUE_MaxCount (4UL)
  #define CCM_KEY_VALUE_MaxIndex (3UL)
  #define CCM_KEY_VALUE_MinIndex (0UL)
  #define CCM_KEY_VALUE_ResetValue (0x00000000UL)

/* VALUE @Bits 0..31 : AES 128-bit key value, bits (32*(i+1))-1 : (32*i) */
  #define CCM_KEY_VALUE_VALUE_Pos (0UL)
  #define CCM_KEY_VALUE_VALUE_Msk (0xFFFFFFFFUL << CCM_KEY_VALUE_VALUE_Pos)



/* ==================================================== Struct CCM_NONCE ===================================================== */
/**
  * @brief NONCE [CCM_NONCE] (unspecified)
  */
typedef struct {
  __IOM uint32_t  VALUE[4];
} NRF_CCM_NONCE_Type;

/* CCM_NONCE_VALUE: 13-byte NONCE vector Only the lower 13 bytes are used */
  #define CCM_NONCE_VALUE_MaxCount (4UL)
  #define CCM_NONCE_VALUE_MaxIndex (3UL)
  #define CCM_NONCE_VALUE_MinIndex (0UL)
  #define CCM_NONCE_VALUE_ResetValue (0x00000000UL)

/* VALUE @Bits 0..31 : NONCE value, bits (32*(n+1))-1 : (32*n) */
  #define CCM_NONCE_VALUE_VALUE_Pos (0UL)
  #define CCM_NONCE_VALUE_VALUE_Msk (0xFFFFFFFFUL << CCM_NONCE_VALUE_VALUE_Pos)



/* ====================================================== Struct CCM_IN ====================================================== */
/**
  * @brief IN [CCM_IN] IN EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000000) Input pointer Points to a job list containing
                                                                         unencrypted CCM data structure in Encryption mode
                                                                         Points to a job list containing encrypted CCM data
                                                                         structure in Decryption mode*/
} NRF_CCM_IN_Type;

/* CCM_IN_PTR: Input pointer Points to a job list containing unencrypted CCM data structure in Encryption mode Points to a job
                list containing encrypted CCM data structure in Decryption mode */

  #define CCM_IN_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Input pointer */
  #define CCM_IN_PTR_PTR_Pos (0UL)
  #define CCM_IN_PTR_PTR_Msk (0xFFFFFFFFUL << CCM_IN_PTR_PTR_Pos)



/* ===================================================== Struct CCM_OUT ====================================================== */
/**
  * @brief OUT [CCM_OUT] OUT EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000000) Output pointer Points to a job list containing
                                                                         encrypted CCM data structure in Encryption mode Points
                                                                         to a job list containing decrypted CCM data structure
                                                                         in Decryption mode*/
} NRF_CCM_OUT_Type;

/* CCM_OUT_PTR: Output pointer Points to a job list containing encrypted CCM data structure in Encryption mode Points to a job
                 list containing decrypted CCM data structure in Decryption mode */

  #define CCM_OUT_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Output pointer */
  #define CCM_OUT_PTR_PTR_Pos (0UL)
  #define CCM_OUT_PTR_PTR_Msk (0xFFFFFFFFUL << CCM_OUT_PTR_PTR_Pos)


/* ======================================================= Struct CCM ======================================================== */
/**
  * @brief AES CCM Mode Encryption
  */
  typedef struct {
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Start encryption/decryption. This operation will stop
                                                                         by itself when completed.*/
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_RATEOVERRIDE;                /*!< (@ 0x00000008) Override DATARATE setting in MODE register with the
                                                                         contents of the RATEOVERRIDE register for any ongoing
                                                                         encryption/decryption*/
    __IM uint32_t RESERVED[29];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_RATEOVERRIDE;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_END;
    __IOM uint32_t EVENTS_ERROR;
    __IM uint32_t RESERVED2[30];
    __IOM uint32_t PUBLISH_END;
    __IOM uint32_t PUBLISH_ERROR;
    __IM uint32_t RESERVED3[94];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED4[61];
    __IM uint32_t MACSTATUS;
    __IM uint32_t ERRORSTATUS;
    __IM uint32_t RESERVED5[62];
    __IOM uint32_t ENABLE;
    __IOM uint32_t MODE;
    __IM uint32_t RESERVED6[2];
    __IOM NRF_CCM_KEY_Type KEY;
    __IOM NRF_CCM_NONCE_Type NONCE;
    __IOM NRF_CCM_IN_Type IN;
    __IM uint32_t RESERVED7;
    __IOM NRF_CCM_OUT_Type OUT;
    __IM uint32_t RESERVED8[2];
    __IOM uint32_t RATEOVERRIDE;
    __IOM uint32_t ADATAMASK;
  } NRF_CCM_Type;

/* CCM_TASKS_START: Start encryption/decryption. This operation will stop by itself when completed. */
  #define CCM_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start encryption/decryption. This operation will stop by itself when completed. */
  #define CCM_TASKS_START_TASKS_START_Pos (0UL)
  #define CCM_TASKS_START_TASKS_START_Msk (0x1UL << CCM_TASKS_START_TASKS_START_Pos)
  #define CCM_TASKS_START_TASKS_START_Min (0x1UL)
  #define CCM_TASKS_START_TASKS_START_Max (0x1UL)
  #define CCM_TASKS_START_TASKS_START_Trigger (0x1UL)


/* CCM_TASKS_STOP: Stop encryption/decryption */
  #define CCM_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop encryption/decryption */
  #define CCM_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define CCM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << CCM_TASKS_STOP_TASKS_STOP_Pos)
  #define CCM_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define CCM_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define CCM_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* CCM_TASKS_RATEOVERRIDE: Override DATARATE setting in MODE register with the contents of the RATEOVERRIDE register for any
                            ongoing encryption/decryption */

  #define CCM_TASKS_RATEOVERRIDE_ResetValue (0x00000000UL)

/* TASKS_RATEOVERRIDE @Bit 0 : Override DATARATE setting in MODE register with the contents of the RATEOVERRIDE register for any
                               ongoing encryption/decryption */

  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Pos (0UL)
  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Msk (0x1UL << CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Pos) /*!< Bit mask
                                                                            of TASKS_RATEOVERRIDE field.*/
  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Min (0x1UL)
  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Max (0x1UL)
  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Trigger (0x1UL)


/* CCM_SUBSCRIBE_START: Subscribe configuration for task START */
  #define CCM_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define CCM_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define CCM_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << CCM_SUBSCRIBE_START_CHIDX_Pos)
  #define CCM_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define CCM_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CCM_SUBSCRIBE_START_EN_Pos (31UL)
  #define CCM_SUBSCRIBE_START_EN_Msk (0x1UL << CCM_SUBSCRIBE_START_EN_Pos)
  #define CCM_SUBSCRIBE_START_EN_Min (0x0UL)
  #define CCM_SUBSCRIBE_START_EN_Max (0x1UL)
  #define CCM_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define CCM_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* CCM_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define CCM_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define CCM_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define CCM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << CCM_SUBSCRIBE_STOP_CHIDX_Pos)
  #define CCM_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define CCM_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CCM_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define CCM_SUBSCRIBE_STOP_EN_Msk (0x1UL << CCM_SUBSCRIBE_STOP_EN_Pos)
  #define CCM_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define CCM_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define CCM_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define CCM_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* CCM_SUBSCRIBE_RATEOVERRIDE: Subscribe configuration for task RATEOVERRIDE */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RATEOVERRIDE will subscribe to */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Pos (0UL)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Msk (0xFFUL << CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Pos)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Min (0x00UL)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Pos (31UL)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Msk (0x1UL << CCM_SUBSCRIBE_RATEOVERRIDE_EN_Pos)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Min (0x0UL)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Max (0x1UL)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Disabled (0x0UL)
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Enabled (0x1UL)


/* CCM_EVENTS_END: Encrypt/decrypt complete or ended because of an error */
  #define CCM_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : Encrypt/decrypt complete or ended because of an error */
  #define CCM_EVENTS_END_EVENTS_END_Pos (0UL)
  #define CCM_EVENTS_END_EVENTS_END_Msk (0x1UL << CCM_EVENTS_END_EVENTS_END_Pos)
  #define CCM_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define CCM_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define CCM_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define CCM_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* CCM_EVENTS_ERROR: CCM error event */
  #define CCM_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : CCM error event */
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << CCM_EVENTS_ERROR_EVENTS_ERROR_Pos)
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* CCM_PUBLISH_END: Publish configuration for event END */
  #define CCM_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define CCM_PUBLISH_END_CHIDX_Pos (0UL)
  #define CCM_PUBLISH_END_CHIDX_Msk (0xFFUL << CCM_PUBLISH_END_CHIDX_Pos)
  #define CCM_PUBLISH_END_CHIDX_Min (0x00UL)
  #define CCM_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CCM_PUBLISH_END_EN_Pos (31UL)
  #define CCM_PUBLISH_END_EN_Msk (0x1UL << CCM_PUBLISH_END_EN_Pos)
  #define CCM_PUBLISH_END_EN_Min (0x0UL)
  #define CCM_PUBLISH_END_EN_Max (0x1UL)
  #define CCM_PUBLISH_END_EN_Disabled (0x0UL)
  #define CCM_PUBLISH_END_EN_Enabled (0x1UL)


/* CCM_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define CCM_PUBLISH_ERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define CCM_PUBLISH_ERROR_CHIDX_Pos (0UL)
  #define CCM_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << CCM_PUBLISH_ERROR_CHIDX_Pos)
  #define CCM_PUBLISH_ERROR_CHIDX_Min (0x00UL)
  #define CCM_PUBLISH_ERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CCM_PUBLISH_ERROR_EN_Pos (31UL)
  #define CCM_PUBLISH_ERROR_EN_Msk (0x1UL << CCM_PUBLISH_ERROR_EN_Pos)
  #define CCM_PUBLISH_ERROR_EN_Min (0x0UL)
  #define CCM_PUBLISH_ERROR_EN_Max (0x1UL)
  #define CCM_PUBLISH_ERROR_EN_Disabled (0x0UL)
  #define CCM_PUBLISH_ERROR_EN_Enabled (0x1UL)


/* CCM_INTENSET: Enable interrupt */
  #define CCM_INTENSET_ResetValue (0x00000000UL)

/* END @Bit 1 : Write '1' to enable interrupt for event END */
  #define CCM_INTENSET_END_Pos (1UL)
  #define CCM_INTENSET_END_Msk (0x1UL << CCM_INTENSET_END_Pos)
  #define CCM_INTENSET_END_Min (0x0UL)
  #define CCM_INTENSET_END_Max (0x1UL)
  #define CCM_INTENSET_END_Set (0x1UL)
  #define CCM_INTENSET_END_Disabled (0x0UL)
  #define CCM_INTENSET_END_Enabled (0x1UL)

/* ERROR @Bit 2 : Write '1' to enable interrupt for event ERROR */
  #define CCM_INTENSET_ERROR_Pos (2UL)
  #define CCM_INTENSET_ERROR_Msk (0x1UL << CCM_INTENSET_ERROR_Pos)
  #define CCM_INTENSET_ERROR_Min (0x0UL)
  #define CCM_INTENSET_ERROR_Max (0x1UL)
  #define CCM_INTENSET_ERROR_Set (0x1UL)
  #define CCM_INTENSET_ERROR_Disabled (0x0UL)
  #define CCM_INTENSET_ERROR_Enabled (0x1UL)


/* CCM_INTENCLR: Disable interrupt */
  #define CCM_INTENCLR_ResetValue (0x00000000UL)

/* END @Bit 1 : Write '1' to disable interrupt for event END */
  #define CCM_INTENCLR_END_Pos (1UL)
  #define CCM_INTENCLR_END_Msk (0x1UL << CCM_INTENCLR_END_Pos)
  #define CCM_INTENCLR_END_Min (0x0UL)
  #define CCM_INTENCLR_END_Max (0x1UL)
  #define CCM_INTENCLR_END_Clear (0x1UL)
  #define CCM_INTENCLR_END_Disabled (0x0UL)
  #define CCM_INTENCLR_END_Enabled (0x1UL)

/* ERROR @Bit 2 : Write '1' to disable interrupt for event ERROR */
  #define CCM_INTENCLR_ERROR_Pos (2UL)
  #define CCM_INTENCLR_ERROR_Msk (0x1UL << CCM_INTENCLR_ERROR_Pos)
  #define CCM_INTENCLR_ERROR_Min (0x0UL)
  #define CCM_INTENCLR_ERROR_Max (0x1UL)
  #define CCM_INTENCLR_ERROR_Clear (0x1UL)
  #define CCM_INTENCLR_ERROR_Disabled (0x0UL)
  #define CCM_INTENCLR_ERROR_Enabled (0x1UL)


/* CCM_MACSTATUS: MAC check result */
  #define CCM_MACSTATUS_ResetValue (0x00000000UL)

/* MACSTATUS @Bit 0 : The result of the MAC check performed during the previous decryption operation */
  #define CCM_MACSTATUS_MACSTATUS_Pos (0UL)
  #define CCM_MACSTATUS_MACSTATUS_Msk (0x1UL << CCM_MACSTATUS_MACSTATUS_Pos)
  #define CCM_MACSTATUS_MACSTATUS_Min (0x0UL)
  #define CCM_MACSTATUS_MACSTATUS_Max (0x1UL)
  #define CCM_MACSTATUS_MACSTATUS_CheckFailed (0x0UL)
  #define CCM_MACSTATUS_MACSTATUS_CheckPassed (0x1UL)


/* CCM_ERRORSTATUS: Error status */
  #define CCM_ERRORSTATUS_ResetValue (0x00000000UL)

/* ERRORSTATUS @Bits 0..2 : Error status when the ERROR event is generated */
  #define CCM_ERRORSTATUS_ERRORSTATUS_Pos (0UL)
  #define CCM_ERRORSTATUS_ERRORSTATUS_Msk (0x7UL << CCM_ERRORSTATUS_ERRORSTATUS_Pos)
  #define CCM_ERRORSTATUS_ERRORSTATUS_Min (0x0UL)
  #define CCM_ERRORSTATUS_ERRORSTATUS_Max (0x4UL)
  #define CCM_ERRORSTATUS_ERRORSTATUS_NoError (0x0UL)
  #define CCM_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd (0x1UL)
  #define CCM_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd (0x2UL) /*!< End of OUTPTR job list before CCM data structure was
                                                                      read.*/
  #define CCM_ERRORSTATUS_ERRORSTATUS_EncryptionTooSlow (0x3UL) /*!< Encryption of the unencrypted CCM data structure did not
                                                                     complete in time.*/
  #define CCM_ERRORSTATUS_ERRORSTATUS_DmaError (0x4UL)


/* CCM_ENABLE: Enable */
  #define CCM_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..1 : Enable or disable CCM */
  #define CCM_ENABLE_ENABLE_Pos (0UL)
  #define CCM_ENABLE_ENABLE_Msk (0x3UL << CCM_ENABLE_ENABLE_Pos)
  #define CCM_ENABLE_ENABLE_Min (0x0UL)
  #define CCM_ENABLE_ENABLE_Max (0x2UL)
  #define CCM_ENABLE_ENABLE_Disabled (0x0UL)
  #define CCM_ENABLE_ENABLE_Enabled (0x2UL)


/* CCM_MODE: Operation mode */
  #define CCM_MODE_ResetValue (0x00000001UL)

/* MODE @Bits 0..1 : The mode of operation to be used. The settings in this register apply when the CRYPT task is triggered. */
  #define CCM_MODE_MODE_Pos (0UL)
  #define CCM_MODE_MODE_Msk (0x3UL << CCM_MODE_MODE_Pos)
  #define CCM_MODE_MODE_Min (0x0UL)
  #define CCM_MODE_MODE_Max (0x2UL)
  #define CCM_MODE_MODE_Encryption (0x0UL)
  #define CCM_MODE_MODE_Decryption (0x1UL)
  #define CCM_MODE_MODE_FastDecryption (0x2UL)

/* PROTOCOL @Bits 8..9 : Protocol and packet format selection */
  #define CCM_MODE_PROTOCOL_Pos (8UL)
  #define CCM_MODE_PROTOCOL_Msk (0x3UL << CCM_MODE_PROTOCOL_Pos)
  #define CCM_MODE_PROTOCOL_Min (0x0UL)
  #define CCM_MODE_PROTOCOL_Max (0x1UL)
  #define CCM_MODE_PROTOCOL_Ble (0x0UL)
  #define CCM_MODE_PROTOCOL_Ieee802154 (0x1UL)

/* DATARATE @Bits 16..18 : Radio data rate that the CCM shall run synchronous with */
  #define CCM_MODE_DATARATE_Pos (16UL)
  #define CCM_MODE_DATARATE_Msk (0x7UL << CCM_MODE_DATARATE_Pos)
  #define CCM_MODE_DATARATE_Min (0x0UL)
  #define CCM_MODE_DATARATE_Max (0x5UL)
  #define CCM_MODE_DATARATE_125Kbit (0x0UL)
  #define CCM_MODE_DATARATE_250Kbit (0x1UL)
  #define CCM_MODE_DATARATE_500Kbit (0x2UL)
  #define CCM_MODE_DATARATE_1Mbit (0x3UL)
  #define CCM_MODE_DATARATE_2Mbit (0x4UL)
  #define CCM_MODE_DATARATE_4Mbit (0x5UL)

/* MACLEN @Bits 24..26 : CCM MAC length (bytes) */
  #define CCM_MODE_MACLEN_Pos (24UL)
  #define CCM_MODE_MACLEN_Msk (0x7UL << CCM_MODE_MACLEN_Pos)
  #define CCM_MODE_MACLEN_Min (0x0UL)
  #define CCM_MODE_MACLEN_Max (0x7UL)
  #define CCM_MODE_MACLEN_M0 (0x0UL)                 /*!< M = 0 This is a special case for CCM* where encryption is required but
                                                          not authentication*/
  #define CCM_MODE_MACLEN_M4 (0x1UL)
  #define CCM_MODE_MACLEN_M6 (0x2UL)
  #define CCM_MODE_MACLEN_M8 (0x3UL)
  #define CCM_MODE_MACLEN_M10 (0x4UL)
  #define CCM_MODE_MACLEN_M12 (0x5UL)
  #define CCM_MODE_MACLEN_M14 (0x6UL)
  #define CCM_MODE_MACLEN_M16 (0x7UL)


/* CCM_RATEOVERRIDE: Data rate override setting. */
  #define CCM_RATEOVERRIDE_ResetValue (0x00000002UL)

/* RATEOVERRIDE @Bits 0..2 : Data rate override setting. */
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_Pos (0UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_Msk (0x7UL << CCM_RATEOVERRIDE_RATEOVERRIDE_Pos)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_Min (0x0UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_Max (0x5UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_125Kbit (0x0UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_500Kbit (0x2UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_1Mbit (0x3UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_2Mbit (0x4UL)
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_4Mbit (0x5UL)


/* CCM_ADATAMASK: CCM adata mask. */
  #define CCM_ADATAMASK_ResetValue (0x000000E3UL)

/* ADATAMASK @Bits 0..7 : CCM adata mask. */
  #define CCM_ADATAMASK_ADATAMASK_Pos (0UL)
  #define CCM_ADATAMASK_ADATAMASK_Msk (0xFFUL << CCM_ADATAMASK_ADATAMASK_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           CLIC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ==================================================== Struct CLIC_CLIC ===================================================== */
/**
  * @brief CLIC [CLIC_CLIC] (unspecified)
  */
typedef struct {
  __IM  uint32_t  CLICCFG;
  __IM  uint32_t  CLICINFO;
  __IM  uint32_t  RESERVED[1022];
  __IOM uint32_t  CLICINT[480];
} NRF_CLIC_CLIC_Type;

/* CLIC_CLIC_CLICCFG: CLIC configuration. */
  #define CLIC_CLIC_CLICCFG_ResetValue (0x00000011UL)

/* NVBITS @Bit 0 : Selective interrupt hardware vectoring. */
  #define CLIC_CLIC_CLICCFG_NVBITS_Pos (0UL)
  #define CLIC_CLIC_CLICCFG_NVBITS_Msk (0x1UL << CLIC_CLIC_CLICCFG_NVBITS_Pos)
  #define CLIC_CLIC_CLICCFG_NVBITS_Min (0x1UL)
  #define CLIC_CLIC_CLICCFG_NVBITS_Max (0x1UL)
  #define CLIC_CLIC_CLICCFG_NVBITS_Implemented (0x1UL)

/* NLBITS @Bits 1..4 : Interrupt level encoding. */
  #define CLIC_CLIC_CLICCFG_NLBITS_Pos (1UL)
  #define CLIC_CLIC_CLICCFG_NLBITS_Msk (0xFUL << CLIC_CLIC_CLICCFG_NLBITS_Pos)
  #define CLIC_CLIC_CLICCFG_NLBITS_Min (0x8UL)
  #define CLIC_CLIC_CLICCFG_NLBITS_Max (0x8UL)
  #define CLIC_CLIC_CLICCFG_NLBITS_Eight (0x8UL)

/* NMBITS @Bits 5..6 : Interrupt privilege mode. */
  #define CLIC_CLIC_CLICCFG_NMBITS_Pos (5UL)
  #define CLIC_CLIC_CLICCFG_NMBITS_Msk (0x3UL << CLIC_CLIC_CLICCFG_NMBITS_Pos)
  #define CLIC_CLIC_CLICCFG_NMBITS_Min (0x0UL)
  #define CLIC_CLIC_CLICCFG_NMBITS_Max (0x0UL)
  #define CLIC_CLIC_CLICCFG_NMBITS_ModeM (0x0UL)


/* CLIC_CLIC_CLICINFO: CLIC information. */
  #define CLIC_CLIC_CLICINFO_ResetValue (0x00401FFFUL)

/* NUMINTERRUPTS @Bits 0..12 : Maximum number of interrupts supported. */
  #define CLIC_CLIC_CLICINFO_NUMINTERRUPTS_Pos (0UL)
  #define CLIC_CLIC_CLICINFO_NUMINTERRUPTS_Msk (0x1FFFUL << CLIC_CLIC_CLICINFO_NUMINTERRUPTS_Pos) /*!< Bit mask of NUMINTERRUPTS
                                                                            field.*/

/* VERSION @Bits 13..20 : Version */
  #define CLIC_CLIC_CLICINFO_VERSION_Pos (13UL)
  #define CLIC_CLIC_CLICINFO_VERSION_Msk (0xFFUL << CLIC_CLIC_CLICINFO_VERSION_Pos)

/* NUMTRIGGER @Bits 25..30 : Number of maximum interrupt triggers supported */
  #define CLIC_CLIC_CLICINFO_NUMTRIGGER_Pos (25UL)
  #define CLIC_CLIC_CLICINFO_NUMTRIGGER_Msk (0x3FUL << CLIC_CLIC_CLICINFO_NUMTRIGGER_Pos)


/* CLIC_CLIC_CLICINT: Interrupt control register for IRQ number [n]. */
  #define CLIC_CLIC_CLICINT_MaxCount (480UL)
  #define CLIC_CLIC_CLICINT_MaxIndex (479UL)
  #define CLIC_CLIC_CLICINT_MinIndex (0UL)
  #define CLIC_CLIC_CLICINT_ResetValue (0x3FC30000UL)

/* IP @Bit 0 : Interrupt Pending bit. */
  #define CLIC_CLIC_CLICINT_IP_Pos (0UL)
  #define CLIC_CLIC_CLICINT_IP_Msk (0x1UL << CLIC_CLIC_CLICINT_IP_Pos)
  #define CLIC_CLIC_CLICINT_IP_Min (0x0UL)
  #define CLIC_CLIC_CLICINT_IP_Max (0x1UL)
  #define CLIC_CLIC_CLICINT_IP_NotPending (0x0UL)
  #define CLIC_CLIC_CLICINT_IP_Pending (0x1UL)

/* READ1 @Bits 1..7 : Read as 0, write ignored. */
  #define CLIC_CLIC_CLICINT_READ1_Pos (1UL)
  #define CLIC_CLIC_CLICINT_READ1_Msk (0x7FUL << CLIC_CLIC_CLICINT_READ1_Pos)

/* IE @Bit 8 : Interrupt enable bit. */
  #define CLIC_CLIC_CLICINT_IE_Pos (8UL)
  #define CLIC_CLIC_CLICINT_IE_Msk (0x1UL << CLIC_CLIC_CLICINT_IE_Pos)
  #define CLIC_CLIC_CLICINT_IE_Min (0x0UL)
  #define CLIC_CLIC_CLICINT_IE_Max (0x1UL)
  #define CLIC_CLIC_CLICINT_IE_Disabled (0x0UL)
  #define CLIC_CLIC_CLICINT_IE_Enabled (0x1UL)

/* READ2 @Bits 9..15 : Read as 0, write ignored. */
  #define CLIC_CLIC_CLICINT_READ2_Pos (9UL)
  #define CLIC_CLIC_CLICINT_READ2_Msk (0x7FUL << CLIC_CLIC_CLICINT_READ2_Pos)

/* SHV @Bit 16 : Selective Hardware Vectoring. */
  #define CLIC_CLIC_CLICINT_SHV_Pos (16UL)
  #define CLIC_CLIC_CLICINT_SHV_Msk (0x1UL << CLIC_CLIC_CLICINT_SHV_Pos)
  #define CLIC_CLIC_CLICINT_SHV_Min (0x1UL)
  #define CLIC_CLIC_CLICINT_SHV_Max (0x1UL)
  #define CLIC_CLIC_CLICINT_SHV_Vectored (0x1UL)

/* TRIG @Bits 17..18 : Trigger type and polarity for each interrupt input. */
  #define CLIC_CLIC_CLICINT_TRIG_Pos (17UL)
  #define CLIC_CLIC_CLICINT_TRIG_Msk (0x3UL << CLIC_CLIC_CLICINT_TRIG_Pos)
  #define CLIC_CLIC_CLICINT_TRIG_Min (0x1UL)
  #define CLIC_CLIC_CLICINT_TRIG_Max (0x1UL)
  #define CLIC_CLIC_CLICINT_TRIG_EdgeTriggered (0x1UL)

/* MODE @Bits 22..23 : Privilege mode. */
  #define CLIC_CLIC_CLICINT_MODE_Pos (22UL)
  #define CLIC_CLIC_CLICINT_MODE_Msk (0x3UL << CLIC_CLIC_CLICINT_MODE_Pos)
  #define CLIC_CLIC_CLICINT_MODE_Min (0x3UL)
  #define CLIC_CLIC_CLICINT_MODE_Max (0x3UL)
  #define CLIC_CLIC_CLICINT_MODE_MachineMode (0x3UL)

/* PRIORITY @Bits 24..31 : Interrupt priority level */
  #define CLIC_CLIC_CLICINT_PRIORITY_Pos (24UL)
  #define CLIC_CLIC_CLICINT_PRIORITY_Msk (0xFFUL << CLIC_CLIC_CLICINT_PRIORITY_Pos)
  #define CLIC_CLIC_CLICINT_PRIORITY_Min (0x3FUL)
  #define CLIC_CLIC_CLICINT_PRIORITY_Max (0xFFUL)
  #define CLIC_CLIC_CLICINT_PRIORITY_PRIOLEVEL0 (0x3FUL)
  #define CLIC_CLIC_CLICINT_PRIORITY_PRIOLEVEL1 (0x7FUL)
  #define CLIC_CLIC_CLICINT_PRIORITY_PRIOLEVEL2 (0xBFUL)
  #define CLIC_CLIC_CLICINT_PRIORITY_PRIOLEVEL3 (0xFFUL)


/* ======================================================= Struct CLIC ======================================================= */
/**
  * @brief VPR CLIC registers
  */
  typedef struct {
    __IOM NRF_CLIC_CLIC_Type CLIC;
  } NRF_CLIC_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           CLOCK                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ===================================================== Struct CLOCK_XO ===================================================== */
/**
  * @brief XO [CLOCK_XO] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IM  uint32_t  RUN;
  __IM  uint32_t  STAT;
} NRF_CLOCK_XO_Type;

/* CLOCK_XO_RUN: Indicates that XOSTART task was triggered */
  #define CLOCK_XO_RUN_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : XOSTART task triggered or not */
  #define CLOCK_XO_RUN_STATUS_Pos (0UL)
  #define CLOCK_XO_RUN_STATUS_Msk (0x1UL << CLOCK_XO_RUN_STATUS_Pos)
  #define CLOCK_XO_RUN_STATUS_Min (0x0UL)
  #define CLOCK_XO_RUN_STATUS_Max (0x1UL)
  #define CLOCK_XO_RUN_STATUS_NotTriggered (0x0UL)
  #define CLOCK_XO_RUN_STATUS_Triggered (0x1UL)


/* CLOCK_XO_STAT: XO status */
  #define CLOCK_XO_STAT_ResetValue (0x00000000UL)

/* STATE @Bit 16 : XO state (Running between START task and STOPPED event) */
  #define CLOCK_XO_STAT_STATE_Pos (16UL)
  #define CLOCK_XO_STAT_STATE_Msk (0x1UL << CLOCK_XO_STAT_STATE_Pos)
  #define CLOCK_XO_STAT_STATE_Min (0x0UL)
  #define CLOCK_XO_STAT_STATE_Max (0x1UL)
  #define CLOCK_XO_STAT_STATE_NotRunning (0x0UL)
  #define CLOCK_XO_STAT_STATE_Running (0x1UL)



/* ==================================================== Struct CLOCK_PLL ===================================================== */
/**
  * @brief PLL [CLOCK_PLL] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IM  uint32_t  RUN;
  __IM  uint32_t  STAT;                              /*!< (@ 0x0000000C) Which PLL settings were selected when triggering START
                                                                         task*/
} NRF_CLOCK_PLL_Type;

/* CLOCK_PLL_RUN: Indicates that PLLSTART task was triggered */
  #define CLOCK_PLL_RUN_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : PLLSTART task triggered or not */
  #define CLOCK_PLL_RUN_STATUS_Pos (0UL)
  #define CLOCK_PLL_RUN_STATUS_Msk (0x1UL << CLOCK_PLL_RUN_STATUS_Pos)
  #define CLOCK_PLL_RUN_STATUS_Min (0x0UL)
  #define CLOCK_PLL_RUN_STATUS_Max (0x1UL)
  #define CLOCK_PLL_RUN_STATUS_NotTriggered (0x0UL)
  #define CLOCK_PLL_RUN_STATUS_Triggered (0x1UL)


/* CLOCK_PLL_STAT: Which PLL settings were selected when triggering START task */
  #define CLOCK_PLL_STAT_ResetValue (0x00000000UL)

/* STATE @Bit 16 : PLL state (Running between START task and STOPPED event) */
  #define CLOCK_PLL_STAT_STATE_Pos (16UL)
  #define CLOCK_PLL_STAT_STATE_Msk (0x1UL << CLOCK_PLL_STAT_STATE_Pos)
  #define CLOCK_PLL_STAT_STATE_Min (0x0UL)
  #define CLOCK_PLL_STAT_STATE_Max (0x1UL)
  #define CLOCK_PLL_STAT_STATE_NotRunning (0x0UL)
  #define CLOCK_PLL_STAT_STATE_Running (0x1UL)



/* =================================================== Struct CLOCK_LFCLK ==================================================== */
/**
  * @brief LFCLK [CLOCK_LFCLK] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SRC;
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  RUN;
  __IM  uint32_t  STAT;                              /*!< (@ 0x0000000C) Copy of LFCLK.SRCCOPY register, set when LFCLKSTARTED
                                                                         event is triggered.*/
  __IOM uint32_t  SRCCOPY;                           /*!< (@ 0x00000010) Copy of LFCLK.SRC register, set when LFCLKSTART task is
                                                                         triggered*/
} NRF_CLOCK_LFCLK_Type;

/* CLOCK_LFCLK_SRC: Clock source for LFCLK */
  #define CLOCK_LFCLK_SRC_ResetValue (0x00000000UL)

/* SRC @Bits 0..1 : Select which LFCLK source is started by the LFCLKSTART task */
  #define CLOCK_LFCLK_SRC_SRC_Pos (0UL)
  #define CLOCK_LFCLK_SRC_SRC_Msk (0x3UL << CLOCK_LFCLK_SRC_SRC_Pos)
  #define CLOCK_LFCLK_SRC_SRC_Min (0x0UL)
  #define CLOCK_LFCLK_SRC_SRC_Max (0x2UL)
  #define CLOCK_LFCLK_SRC_SRC_LFRC (0x0UL)
  #define CLOCK_LFCLK_SRC_SRC_LFXO (0x1UL)
  #define CLOCK_LFCLK_SRC_SRC_LFSYNT (0x2UL)


/* CLOCK_LFCLK_RUN: Indicates that LFCLKSTART task was triggered */
  #define CLOCK_LFCLK_RUN_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : LFCLKSTART task triggered or not */
  #define CLOCK_LFCLK_RUN_STATUS_Pos (0UL)
  #define CLOCK_LFCLK_RUN_STATUS_Msk (0x1UL << CLOCK_LFCLK_RUN_STATUS_Pos)
  #define CLOCK_LFCLK_RUN_STATUS_Min (0x0UL)
  #define CLOCK_LFCLK_RUN_STATUS_Max (0x1UL)
  #define CLOCK_LFCLK_RUN_STATUS_NotTriggered (0x0UL)
  #define CLOCK_LFCLK_RUN_STATUS_Triggered (0x1UL)


/* CLOCK_LFCLK_STAT: Copy of LFCLK.SRCCOPY register, set when LFCLKSTARTED event is triggered. */
  #define CLOCK_LFCLK_STAT_ResetValue (0x00000000UL)

/* SRC @Bits 0..1 : Value of LFCLK.SRCCOPY register when LFCLKSTARTED event was triggered */
  #define CLOCK_LFCLK_STAT_SRC_Pos (0UL)
  #define CLOCK_LFCLK_STAT_SRC_Msk (0x3UL << CLOCK_LFCLK_STAT_SRC_Pos)
  #define CLOCK_LFCLK_STAT_SRC_Min (0x0UL)
  #define CLOCK_LFCLK_STAT_SRC_Max (0x2UL)
  #define CLOCK_LFCLK_STAT_SRC_LFRC (0x0UL)
  #define CLOCK_LFCLK_STAT_SRC_LFXO (0x1UL)
  #define CLOCK_LFCLK_STAT_SRC_LFSYNT (0x2UL)

/* ALWAYSRUNNING @Bit 4 : ALWAYSRUN activated */
  #define CLOCK_LFCLK_STAT_ALWAYSRUNNING_Pos (4UL)
  #define CLOCK_LFCLK_STAT_ALWAYSRUNNING_Msk (0x1UL << CLOCK_LFCLK_STAT_ALWAYSRUNNING_Pos) /*!< Bit mask of ALWAYSRUNNING
                                                                            field.*/
  #define CLOCK_LFCLK_STAT_ALWAYSRUNNING_Min (0x0UL)
  #define CLOCK_LFCLK_STAT_ALWAYSRUNNING_Max (0x1UL)
  #define CLOCK_LFCLK_STAT_ALWAYSRUNNING_NotRunning (0x0UL)
  #define CLOCK_LFCLK_STAT_ALWAYSRUNNING_Running (0x1UL)

/* STATE @Bit 16 : LFCLK state (Running between START task and STOPPED event) */
  #define CLOCK_LFCLK_STAT_STATE_Pos (16UL)
  #define CLOCK_LFCLK_STAT_STATE_Msk (0x1UL << CLOCK_LFCLK_STAT_STATE_Pos)
  #define CLOCK_LFCLK_STAT_STATE_Min (0x0UL)
  #define CLOCK_LFCLK_STAT_STATE_Max (0x1UL)
  #define CLOCK_LFCLK_STAT_STATE_NotRunning (0x0UL)
  #define CLOCK_LFCLK_STAT_STATE_Running (0x1UL)


/* CLOCK_LFCLK_SRCCOPY: Copy of LFCLK.SRC register, set when LFCLKSTART task is triggered */
  #define CLOCK_LFCLK_SRCCOPY_ResetValue (0x00000000UL)

/* SRC @Bits 0..1 : Value of LFCLK.SRC register when LFCLKSTART task was triggered */
  #define CLOCK_LFCLK_SRCCOPY_SRC_Pos (0UL)
  #define CLOCK_LFCLK_SRCCOPY_SRC_Msk (0x3UL << CLOCK_LFCLK_SRCCOPY_SRC_Pos)
  #define CLOCK_LFCLK_SRCCOPY_SRC_Min (0x0UL)
  #define CLOCK_LFCLK_SRCCOPY_SRC_Max (0x2UL)
  #define CLOCK_LFCLK_SRCCOPY_SRC_LFRC (0x0UL)
  #define CLOCK_LFCLK_SRCCOPY_SRC_LFXO (0x1UL)
  #define CLOCK_LFCLK_SRCCOPY_SRC_LFSYNT (0x2UL)



/* =================================================== Struct CLOCK_PLL24M =================================================== */
/**
  * @brief PLL24M [CLOCK_PLL24M] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IM  uint32_t  RUN;
  __IM  uint32_t  STAT;                              /*!< (@ 0x0000000C) Which PLL settings were selected when triggering START
                                                                         task*/
} NRF_CLOCK_PLL24M_Type;

/* CLOCK_PLL24M_RUN: Indicates that PLL24MSTART task was triggered */
  #define CLOCK_PLL24M_RUN_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : PLL24MSTART task triggered or not */
  #define CLOCK_PLL24M_RUN_STATUS_Pos (0UL)
  #define CLOCK_PLL24M_RUN_STATUS_Msk (0x1UL << CLOCK_PLL24M_RUN_STATUS_Pos)
  #define CLOCK_PLL24M_RUN_STATUS_Min (0x0UL)
  #define CLOCK_PLL24M_RUN_STATUS_Max (0x1UL)
  #define CLOCK_PLL24M_RUN_STATUS_NotTriggered (0x0UL)
  #define CLOCK_PLL24M_RUN_STATUS_Triggered (0x1UL)


/* CLOCK_PLL24M_STAT: Which PLL settings were selected when triggering START task */
  #define CLOCK_PLL24M_STAT_ResetValue (0x00000000UL)

/* STATE @Bit 16 : PLL state (Running between START task and STOPPED event) */
  #define CLOCK_PLL24M_STAT_STATE_Pos (16UL)
  #define CLOCK_PLL24M_STAT_STATE_Msk (0x1UL << CLOCK_PLL24M_STAT_STATE_Pos)
  #define CLOCK_PLL24M_STAT_STATE_Min (0x0UL)
  #define CLOCK_PLL24M_STAT_STATE_Max (0x1UL)
  #define CLOCK_PLL24M_STAT_STATE_NotRunning (0x0UL)
  #define CLOCK_PLL24M_STAT_STATE_Running (0x1UL)


/* ====================================================== Struct CLOCK ======================================================= */
/**
  * @brief Clock management
  */
  typedef struct {
    __OM uint32_t TASKS_XOSTART;
    __OM uint32_t TASKS_XOSTOP;
    __OM uint32_t TASKS_PLLSTART;                    /*!< (@ 0x00000008) Start PLL and keep it running, regardless of the
                                                                         automatic clock requests*/
    __OM uint32_t TASKS_PLLSTOP;
    __OM uint32_t TASKS_LFCLKSTART;
    __OM uint32_t TASKS_LFCLKSTOP;
    __OM uint32_t TASKS_CAL;
    __IM uint32_t RESERVED[2];
    __OM uint32_t TASKS_XO24MSTART;                  /*!< (@ 0x00000024) Start XO24M and keep it running, regardless of the
                                                                         automatic clock requests*/
    __OM uint32_t TASKS_XO24MSTOP;
    __IM uint32_t RESERVED1[21];
    __IOM uint32_t SUBSCRIBE_XOSTART;
    __IOM uint32_t SUBSCRIBE_XOSTOP;
    __IOM uint32_t SUBSCRIBE_PLLSTART;
    __IOM uint32_t SUBSCRIBE_PLLSTOP;
    __IOM uint32_t SUBSCRIBE_LFCLKSTART;
    __IOM uint32_t SUBSCRIBE_LFCLKSTOP;
    __IOM uint32_t SUBSCRIBE_CAL;
    __IM uint32_t RESERVED2[2];
    __IOM uint32_t SUBSCRIBE_XO24MSTART;
    __IOM uint32_t SUBSCRIBE_XO24MSTOP;
    __IM uint32_t RESERVED3[21];
    __IOM uint32_t EVENTS_XOSTARTED;
    __IOM uint32_t EVENTS_PLLSTARTED;
    __IOM uint32_t EVENTS_LFCLKSTARTED;
    __IOM uint32_t EVENTS_DONE;
    __IM uint32_t RESERVED4[3];
    __IOM uint32_t EVENTS_XO24MSTARTED;
    __IM uint32_t RESERVED5[24];
    __IOM uint32_t PUBLISH_XOSTARTED;
    __IOM uint32_t PUBLISH_PLLSTARTED;
    __IOM uint32_t PUBLISH_LFCLKSTARTED;
    __IOM uint32_t PUBLISH_DONE;
    __IM uint32_t RESERVED6[3];
    __IOM uint32_t PUBLISH_XO24MSTARTED;
    __IM uint32_t RESERVED7[88];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED8[60];
    __IOM NRF_CLOCK_XO_Type XO;
    __IM uint32_t RESERVED9[4];
    __IOM NRF_CLOCK_PLL_Type PLL;
    __IM uint32_t RESERVED10[4];
    __IOM NRF_CLOCK_LFCLK_Type LFCLK;
    __IM uint32_t RESERVED11[3];
    __IOM NRF_CLOCK_PLL24M_Type PLL24M;
  } NRF_CLOCK_Type;

/* CLOCK_TASKS_XOSTART: Start crystal oscillator (HFXO) */
  #define CLOCK_TASKS_XOSTART_ResetValue (0x00000000UL)

/* TASKS_XOSTART @Bit 0 : Start crystal oscillator (HFXO) */
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Pos (0UL)
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Msk (0x1UL << CLOCK_TASKS_XOSTART_TASKS_XOSTART_Pos) /*!< Bit mask of TASKS_XOSTART
                                                                            field.*/
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Min (0x1UL)
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Max (0x1UL)
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Trigger (0x1UL)


/* CLOCK_TASKS_XOSTOP: Stop crystal oscillator (HFXO) */
  #define CLOCK_TASKS_XOSTOP_ResetValue (0x00000000UL)

/* TASKS_XOSTOP @Bit 0 : Stop crystal oscillator (HFXO) */
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Pos (0UL)
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Msk (0x1UL << CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Pos) /*!< Bit mask of TASKS_XOSTOP
                                                                            field.*/
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Min (0x1UL)
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Max (0x1UL)
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Trigger (0x1UL)


/* CLOCK_TASKS_PLLSTART: Start PLL and keep it running, regardless of the automatic clock requests */
  #define CLOCK_TASKS_PLLSTART_ResetValue (0x00000000UL)

/* TASKS_PLLSTART @Bit 0 : Start PLL and keep it running, regardless of the automatic clock requests */
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Pos (0UL)
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Msk (0x1UL << CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Pos) /*!< Bit mask of
                                                                            TASKS_PLLSTART field.*/
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Min (0x1UL)
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Max (0x1UL)
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Trigger (0x1UL)


/* CLOCK_TASKS_PLLSTOP: Stop PLL */
  #define CLOCK_TASKS_PLLSTOP_ResetValue (0x00000000UL)

/* TASKS_PLLSTOP @Bit 0 : Stop PLL */
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Pos (0UL)
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Msk (0x1UL << CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Pos) /*!< Bit mask of TASKS_PLLSTOP
                                                                            field.*/
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Min (0x1UL)
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Max (0x1UL)
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Trigger (0x1UL)


/* CLOCK_TASKS_LFCLKSTART: Start LFCLK source as selected in LFCLK.SRC */
  #define CLOCK_TASKS_LFCLKSTART_ResetValue (0x00000000UL)

/* TASKS_LFCLKSTART @Bit 0 : Start LFCLK source as selected in LFCLK.SRC */
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Pos (0UL)
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Msk (0x1UL << CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Pos) /*!< Bit mask of
                                                                            TASKS_LFCLKSTART field.*/
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Min (0x1UL)
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Max (0x1UL)
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Trigger (0x1UL)


/* CLOCK_TASKS_LFCLKSTOP: Stop LFCLK source */
  #define CLOCK_TASKS_LFCLKSTOP_ResetValue (0x00000000UL)

/* TASKS_LFCLKSTOP @Bit 0 : Stop LFCLK source */
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Pos (0UL)
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Msk (0x1UL << CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Pos) /*!< Bit mask of
                                                                            TASKS_LFCLKSTOP field.*/
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Min (0x1UL)
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Max (0x1UL)
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Trigger (0x1UL)


/* CLOCK_TASKS_CAL: Start calibration of LFRC oscillator */
  #define CLOCK_TASKS_CAL_ResetValue (0x00000000UL)

/* TASKS_CAL @Bit 0 : Start calibration of LFRC oscillator */
  #define CLOCK_TASKS_CAL_TASKS_CAL_Pos (0UL)
  #define CLOCK_TASKS_CAL_TASKS_CAL_Msk (0x1UL << CLOCK_TASKS_CAL_TASKS_CAL_Pos)
  #define CLOCK_TASKS_CAL_TASKS_CAL_Min (0x1UL)
  #define CLOCK_TASKS_CAL_TASKS_CAL_Max (0x1UL)
  #define CLOCK_TASKS_CAL_TASKS_CAL_Trigger (0x1UL)


/* CLOCK_TASKS_XO24MSTART: Start XO24M and keep it running, regardless of the automatic clock requests */
  #define CLOCK_TASKS_XO24MSTART_ResetValue (0x00000000UL)

/* TASKS_XO24MSTART @Bit 0 : Start XO24M and keep it running, regardless of the automatic clock requests */
  #define CLOCK_TASKS_XO24MSTART_TASKS_XO24MSTART_Pos (0UL)
  #define CLOCK_TASKS_XO24MSTART_TASKS_XO24MSTART_Msk (0x1UL << CLOCK_TASKS_XO24MSTART_TASKS_XO24MSTART_Pos) /*!< Bit mask of
                                                                            TASKS_XO24MSTART field.*/
  #define CLOCK_TASKS_XO24MSTART_TASKS_XO24MSTART_Min (0x1UL)
  #define CLOCK_TASKS_XO24MSTART_TASKS_XO24MSTART_Max (0x1UL)
  #define CLOCK_TASKS_XO24MSTART_TASKS_XO24MSTART_Trigger (0x1UL)


/* CLOCK_TASKS_XO24MSTOP: Stop XO24M */
  #define CLOCK_TASKS_XO24MSTOP_ResetValue (0x00000000UL)

/* TASKS_XO24MSTOP @Bit 0 : Stop XO24M */
  #define CLOCK_TASKS_XO24MSTOP_TASKS_XO24MSTOP_Pos (0UL)
  #define CLOCK_TASKS_XO24MSTOP_TASKS_XO24MSTOP_Msk (0x1UL << CLOCK_TASKS_XO24MSTOP_TASKS_XO24MSTOP_Pos) /*!< Bit mask of
                                                                            TASKS_XO24MSTOP field.*/
  #define CLOCK_TASKS_XO24MSTOP_TASKS_XO24MSTOP_Min (0x1UL)
  #define CLOCK_TASKS_XO24MSTOP_TASKS_XO24MSTOP_Max (0x1UL)
  #define CLOCK_TASKS_XO24MSTOP_TASKS_XO24MSTOP_Trigger (0x1UL)


/* CLOCK_SUBSCRIBE_XOSTART: Subscribe configuration for task XOSTART */
  #define CLOCK_SUBSCRIBE_XOSTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task XOSTART will subscribe to */
  #define CLOCK_SUBSCRIBE_XOSTART_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_XOSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_XOSTART_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_XOSTART_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_XOSTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_XOSTART_EN_Pos)
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_XOSTOP: Subscribe configuration for task XOSTOP */
  #define CLOCK_SUBSCRIBE_XOSTOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task XOSTOP will subscribe to */
  #define CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_XOSTOP_EN_Pos)
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_PLLSTART: Subscribe configuration for task PLLSTART */
  #define CLOCK_SUBSCRIBE_PLLSTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task PLLSTART will subscribe to */
  #define CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_PLLSTART_EN_Pos)
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_PLLSTOP: Subscribe configuration for task PLLSTOP */
  #define CLOCK_SUBSCRIBE_PLLSTOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task PLLSTOP will subscribe to */
  #define CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_PLLSTOP_EN_Pos)
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_LFCLKSTART: Subscribe configuration for task LFCLKSTART */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task LFCLKSTART will subscribe to */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_LFCLKSTART_EN_Pos)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_LFCLKSTOP: Subscribe configuration for task LFCLKSTOP */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task LFCLKSTOP will subscribe to */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Pos)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_CAL: Subscribe configuration for task CAL */
  #define CLOCK_SUBSCRIBE_CAL_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CAL will subscribe to */
  #define CLOCK_SUBSCRIBE_CAL_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_CAL_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_CAL_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_CAL_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_CAL_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_CAL_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_CAL_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_CAL_EN_Pos)
  #define CLOCK_SUBSCRIBE_CAL_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_CAL_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_CAL_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_CAL_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_XO24MSTART: Subscribe configuration for task XO24MSTART */
  #define CLOCK_SUBSCRIBE_XO24MSTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task XO24MSTART will subscribe to */
  #define CLOCK_SUBSCRIBE_XO24MSTART_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_XO24MSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_XO24MSTART_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_XO24MSTART_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_XO24MSTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_XO24MSTART_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_XO24MSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_XO24MSTART_EN_Pos)
  #define CLOCK_SUBSCRIBE_XO24MSTART_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_XO24MSTART_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_XO24MSTART_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_XO24MSTART_EN_Enabled (0x1UL)


/* CLOCK_SUBSCRIBE_XO24MSTOP: Subscribe configuration for task XO24MSTOP */
  #define CLOCK_SUBSCRIBE_XO24MSTOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task XO24MSTOP will subscribe to */
  #define CLOCK_SUBSCRIBE_XO24MSTOP_CHIDX_Pos (0UL)
  #define CLOCK_SUBSCRIBE_XO24MSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_XO24MSTOP_CHIDX_Pos)
  #define CLOCK_SUBSCRIBE_XO24MSTOP_CHIDX_Min (0x00UL)
  #define CLOCK_SUBSCRIBE_XO24MSTOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_XO24MSTOP_EN_Pos (31UL)
  #define CLOCK_SUBSCRIBE_XO24MSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_XO24MSTOP_EN_Pos)
  #define CLOCK_SUBSCRIBE_XO24MSTOP_EN_Min (0x0UL)
  #define CLOCK_SUBSCRIBE_XO24MSTOP_EN_Max (0x1UL)
  #define CLOCK_SUBSCRIBE_XO24MSTOP_EN_Disabled (0x0UL)
  #define CLOCK_SUBSCRIBE_XO24MSTOP_EN_Enabled (0x1UL)


/* CLOCK_EVENTS_XOSTARTED: Crystal oscillator has started */
  #define CLOCK_EVENTS_XOSTARTED_ResetValue (0x00000000UL)

/* EVENTS_XOSTARTED @Bit 0 : Crystal oscillator has started */
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Pos (0UL)
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Msk (0x1UL << CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_XOSTARTED field.*/
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Min (0x0UL)
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Max (0x1UL)
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_NotGenerated (0x0UL)
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Generated (0x1UL)


/* CLOCK_EVENTS_PLLSTARTED: PLL started */
  #define CLOCK_EVENTS_PLLSTARTED_ResetValue (0x00000000UL)

/* EVENTS_PLLSTARTED @Bit 0 : PLL started */
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Pos (0UL)
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Msk (0x1UL << CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Pos) /*!< Bit mask
                                                                            of EVENTS_PLLSTARTED field.*/
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Min (0x0UL)
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Max (0x1UL)
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_NotGenerated (0x0UL)
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Generated (0x1UL)


/* CLOCK_EVENTS_LFCLKSTARTED: LFCLK source started */
  #define CLOCK_EVENTS_LFCLKSTARTED_ResetValue (0x00000000UL)

/* EVENTS_LFCLKSTARTED @Bit 0 : LFCLK source started */
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Pos (0UL)
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Msk (0x1UL << CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Pos) /*!<
                                                                            Bit mask of EVENTS_LFCLKSTARTED field.*/
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Min (0x0UL)
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Max (0x1UL)
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_NotGenerated (0x0UL)
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Generated (0x1UL)


/* CLOCK_EVENTS_DONE: Calibration of LFRC oscillator complete event */
  #define CLOCK_EVENTS_DONE_ResetValue (0x00000000UL)

/* EVENTS_DONE @Bit 0 : Calibration of LFRC oscillator complete event */
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Pos (0UL)
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Msk (0x1UL << CLOCK_EVENTS_DONE_EVENTS_DONE_Pos)
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Min (0x0UL)
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Max (0x1UL)
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_NotGenerated (0x0UL)
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Generated (0x1UL)


/* CLOCK_EVENTS_XO24MSTARTED: XO24M started */
  #define CLOCK_EVENTS_XO24MSTARTED_ResetValue (0x00000000UL)

/* EVENTS_XO24MSTARTED @Bit 0 : XO24M started */
  #define CLOCK_EVENTS_XO24MSTARTED_EVENTS_XO24MSTARTED_Pos (0UL)
  #define CLOCK_EVENTS_XO24MSTARTED_EVENTS_XO24MSTARTED_Msk (0x1UL << CLOCK_EVENTS_XO24MSTARTED_EVENTS_XO24MSTARTED_Pos) /*!<
                                                                            Bit mask of EVENTS_XO24MSTARTED field.*/
  #define CLOCK_EVENTS_XO24MSTARTED_EVENTS_XO24MSTARTED_Min (0x0UL)
  #define CLOCK_EVENTS_XO24MSTARTED_EVENTS_XO24MSTARTED_Max (0x1UL)
  #define CLOCK_EVENTS_XO24MSTARTED_EVENTS_XO24MSTARTED_NotGenerated (0x0UL)
  #define CLOCK_EVENTS_XO24MSTARTED_EVENTS_XO24MSTARTED_Generated (0x1UL)


/* CLOCK_PUBLISH_XOSTARTED: Publish configuration for event XOSTARTED */
  #define CLOCK_PUBLISH_XOSTARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event XOSTARTED will publish to */
  #define CLOCK_PUBLISH_XOSTARTED_CHIDX_Pos (0UL)
  #define CLOCK_PUBLISH_XOSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_XOSTARTED_CHIDX_Pos)
  #define CLOCK_PUBLISH_XOSTARTED_CHIDX_Min (0x00UL)
  #define CLOCK_PUBLISH_XOSTARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_XOSTARTED_EN_Pos (31UL)
  #define CLOCK_PUBLISH_XOSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_XOSTARTED_EN_Pos)
  #define CLOCK_PUBLISH_XOSTARTED_EN_Min (0x0UL)
  #define CLOCK_PUBLISH_XOSTARTED_EN_Max (0x1UL)
  #define CLOCK_PUBLISH_XOSTARTED_EN_Disabled (0x0UL)
  #define CLOCK_PUBLISH_XOSTARTED_EN_Enabled (0x1UL)


/* CLOCK_PUBLISH_PLLSTARTED: Publish configuration for event PLLSTARTED */
  #define CLOCK_PUBLISH_PLLSTARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event PLLSTARTED will publish to */
  #define CLOCK_PUBLISH_PLLSTARTED_CHIDX_Pos (0UL)
  #define CLOCK_PUBLISH_PLLSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_PLLSTARTED_CHIDX_Pos)
  #define CLOCK_PUBLISH_PLLSTARTED_CHIDX_Min (0x00UL)
  #define CLOCK_PUBLISH_PLLSTARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Pos (31UL)
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_PLLSTARTED_EN_Pos)
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Min (0x0UL)
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Max (0x1UL)
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Disabled (0x0UL)
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Enabled (0x1UL)


/* CLOCK_PUBLISH_LFCLKSTARTED: Publish configuration for event LFCLKSTARTED */
  #define CLOCK_PUBLISH_LFCLKSTARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event LFCLKSTARTED will publish to */
  #define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Pos (0UL)
  #define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Pos)
  #define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Min (0x00UL)
  #define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Pos (31UL)
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_LFCLKSTARTED_EN_Pos)
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Min (0x0UL)
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Max (0x1UL)
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Disabled (0x0UL)
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Enabled (0x1UL)


/* CLOCK_PUBLISH_DONE: Publish configuration for event DONE */
  #define CLOCK_PUBLISH_DONE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DONE will publish to */
  #define CLOCK_PUBLISH_DONE_CHIDX_Pos (0UL)
  #define CLOCK_PUBLISH_DONE_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_DONE_CHIDX_Pos)
  #define CLOCK_PUBLISH_DONE_CHIDX_Min (0x00UL)
  #define CLOCK_PUBLISH_DONE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_DONE_EN_Pos (31UL)
  #define CLOCK_PUBLISH_DONE_EN_Msk (0x1UL << CLOCK_PUBLISH_DONE_EN_Pos)
  #define CLOCK_PUBLISH_DONE_EN_Min (0x0UL)
  #define CLOCK_PUBLISH_DONE_EN_Max (0x1UL)
  #define CLOCK_PUBLISH_DONE_EN_Disabled (0x0UL)
  #define CLOCK_PUBLISH_DONE_EN_Enabled (0x1UL)


/* CLOCK_PUBLISH_XO24MSTARTED: Publish configuration for event XO24MSTARTED */
  #define CLOCK_PUBLISH_XO24MSTARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event XO24MSTARTED will publish to */
  #define CLOCK_PUBLISH_XO24MSTARTED_CHIDX_Pos (0UL)
  #define CLOCK_PUBLISH_XO24MSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_XO24MSTARTED_CHIDX_Pos)
  #define CLOCK_PUBLISH_XO24MSTARTED_CHIDX_Min (0x00UL)
  #define CLOCK_PUBLISH_XO24MSTARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_XO24MSTARTED_EN_Pos (31UL)
  #define CLOCK_PUBLISH_XO24MSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_XO24MSTARTED_EN_Pos)
  #define CLOCK_PUBLISH_XO24MSTARTED_EN_Min (0x0UL)
  #define CLOCK_PUBLISH_XO24MSTARTED_EN_Max (0x1UL)
  #define CLOCK_PUBLISH_XO24MSTARTED_EN_Disabled (0x0UL)
  #define CLOCK_PUBLISH_XO24MSTARTED_EN_Enabled (0x1UL)


/* CLOCK_INTEN: Enable or disable interrupt */
  #define CLOCK_INTEN_ResetValue (0x00000000UL)

/* XOSTARTED @Bit 0 : Enable or disable interrupt for event XOSTARTED */
  #define CLOCK_INTEN_XOSTARTED_Pos (0UL)
  #define CLOCK_INTEN_XOSTARTED_Msk (0x1UL << CLOCK_INTEN_XOSTARTED_Pos)
  #define CLOCK_INTEN_XOSTARTED_Min (0x0UL)
  #define CLOCK_INTEN_XOSTARTED_Max (0x1UL)
  #define CLOCK_INTEN_XOSTARTED_Disabled (0x0UL)
  #define CLOCK_INTEN_XOSTARTED_Enabled (0x1UL)

/* PLLSTARTED @Bit 1 : Enable or disable interrupt for event PLLSTARTED */
  #define CLOCK_INTEN_PLLSTARTED_Pos (1UL)
  #define CLOCK_INTEN_PLLSTARTED_Msk (0x1UL << CLOCK_INTEN_PLLSTARTED_Pos)
  #define CLOCK_INTEN_PLLSTARTED_Min (0x0UL)
  #define CLOCK_INTEN_PLLSTARTED_Max (0x1UL)
  #define CLOCK_INTEN_PLLSTARTED_Disabled (0x0UL)
  #define CLOCK_INTEN_PLLSTARTED_Enabled (0x1UL)

/* LFCLKSTARTED @Bit 2 : Enable or disable interrupt for event LFCLKSTARTED */
  #define CLOCK_INTEN_LFCLKSTARTED_Pos (2UL)
  #define CLOCK_INTEN_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTEN_LFCLKSTARTED_Pos)
  #define CLOCK_INTEN_LFCLKSTARTED_Min (0x0UL)
  #define CLOCK_INTEN_LFCLKSTARTED_Max (0x1UL)
  #define CLOCK_INTEN_LFCLKSTARTED_Disabled (0x0UL)
  #define CLOCK_INTEN_LFCLKSTARTED_Enabled (0x1UL)

/* DONE @Bit 3 : Enable or disable interrupt for event DONE */
  #define CLOCK_INTEN_DONE_Pos (3UL)
  #define CLOCK_INTEN_DONE_Msk (0x1UL << CLOCK_INTEN_DONE_Pos)
  #define CLOCK_INTEN_DONE_Min (0x0UL)
  #define CLOCK_INTEN_DONE_Max (0x1UL)
  #define CLOCK_INTEN_DONE_Disabled (0x0UL)
  #define CLOCK_INTEN_DONE_Enabled (0x1UL)

/* XO24MSTARTED @Bit 7 : Enable or disable interrupt for event XO24MSTARTED */
  #define CLOCK_INTEN_XO24MSTARTED_Pos (7UL)
  #define CLOCK_INTEN_XO24MSTARTED_Msk (0x1UL << CLOCK_INTEN_XO24MSTARTED_Pos)
  #define CLOCK_INTEN_XO24MSTARTED_Min (0x0UL)
  #define CLOCK_INTEN_XO24MSTARTED_Max (0x1UL)
  #define CLOCK_INTEN_XO24MSTARTED_Disabled (0x0UL)
  #define CLOCK_INTEN_XO24MSTARTED_Enabled (0x1UL)


/* CLOCK_INTENSET: Enable interrupt */
  #define CLOCK_INTENSET_ResetValue (0x00000000UL)

/* XOSTARTED @Bit 0 : Write '1' to enable interrupt for event XOSTARTED */
  #define CLOCK_INTENSET_XOSTARTED_Pos (0UL)
  #define CLOCK_INTENSET_XOSTARTED_Msk (0x1UL << CLOCK_INTENSET_XOSTARTED_Pos)
  #define CLOCK_INTENSET_XOSTARTED_Min (0x0UL)
  #define CLOCK_INTENSET_XOSTARTED_Max (0x1UL)
  #define CLOCK_INTENSET_XOSTARTED_Set (0x1UL)
  #define CLOCK_INTENSET_XOSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENSET_XOSTARTED_Enabled (0x1UL)

/* PLLSTARTED @Bit 1 : Write '1' to enable interrupt for event PLLSTARTED */
  #define CLOCK_INTENSET_PLLSTARTED_Pos (1UL)
  #define CLOCK_INTENSET_PLLSTARTED_Msk (0x1UL << CLOCK_INTENSET_PLLSTARTED_Pos)
  #define CLOCK_INTENSET_PLLSTARTED_Min (0x0UL)
  #define CLOCK_INTENSET_PLLSTARTED_Max (0x1UL)
  #define CLOCK_INTENSET_PLLSTARTED_Set (0x1UL)
  #define CLOCK_INTENSET_PLLSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENSET_PLLSTARTED_Enabled (0x1UL)

/* LFCLKSTARTED @Bit 2 : Write '1' to enable interrupt for event LFCLKSTARTED */
  #define CLOCK_INTENSET_LFCLKSTARTED_Pos (2UL)
  #define CLOCK_INTENSET_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTENSET_LFCLKSTARTED_Pos)
  #define CLOCK_INTENSET_LFCLKSTARTED_Min (0x0UL)
  #define CLOCK_INTENSET_LFCLKSTARTED_Max (0x1UL)
  #define CLOCK_INTENSET_LFCLKSTARTED_Set (0x1UL)
  #define CLOCK_INTENSET_LFCLKSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENSET_LFCLKSTARTED_Enabled (0x1UL)

/* DONE @Bit 3 : Write '1' to enable interrupt for event DONE */
  #define CLOCK_INTENSET_DONE_Pos (3UL)
  #define CLOCK_INTENSET_DONE_Msk (0x1UL << CLOCK_INTENSET_DONE_Pos)
  #define CLOCK_INTENSET_DONE_Min (0x0UL)
  #define CLOCK_INTENSET_DONE_Max (0x1UL)
  #define CLOCK_INTENSET_DONE_Set (0x1UL)
  #define CLOCK_INTENSET_DONE_Disabled (0x0UL)
  #define CLOCK_INTENSET_DONE_Enabled (0x1UL)

/* XO24MSTARTED @Bit 7 : Write '1' to enable interrupt for event XO24MSTARTED */
  #define CLOCK_INTENSET_XO24MSTARTED_Pos (7UL)
  #define CLOCK_INTENSET_XO24MSTARTED_Msk (0x1UL << CLOCK_INTENSET_XO24MSTARTED_Pos)
  #define CLOCK_INTENSET_XO24MSTARTED_Min (0x0UL)
  #define CLOCK_INTENSET_XO24MSTARTED_Max (0x1UL)
  #define CLOCK_INTENSET_XO24MSTARTED_Set (0x1UL)
  #define CLOCK_INTENSET_XO24MSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENSET_XO24MSTARTED_Enabled (0x1UL)


/* CLOCK_INTENCLR: Disable interrupt */
  #define CLOCK_INTENCLR_ResetValue (0x00000000UL)

/* XOSTARTED @Bit 0 : Write '1' to disable interrupt for event XOSTARTED */
  #define CLOCK_INTENCLR_XOSTARTED_Pos (0UL)
  #define CLOCK_INTENCLR_XOSTARTED_Msk (0x1UL << CLOCK_INTENCLR_XOSTARTED_Pos)
  #define CLOCK_INTENCLR_XOSTARTED_Min (0x0UL)
  #define CLOCK_INTENCLR_XOSTARTED_Max (0x1UL)
  #define CLOCK_INTENCLR_XOSTARTED_Clear (0x1UL)
  #define CLOCK_INTENCLR_XOSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENCLR_XOSTARTED_Enabled (0x1UL)

/* PLLSTARTED @Bit 1 : Write '1' to disable interrupt for event PLLSTARTED */
  #define CLOCK_INTENCLR_PLLSTARTED_Pos (1UL)
  #define CLOCK_INTENCLR_PLLSTARTED_Msk (0x1UL << CLOCK_INTENCLR_PLLSTARTED_Pos)
  #define CLOCK_INTENCLR_PLLSTARTED_Min (0x0UL)
  #define CLOCK_INTENCLR_PLLSTARTED_Max (0x1UL)
  #define CLOCK_INTENCLR_PLLSTARTED_Clear (0x1UL)
  #define CLOCK_INTENCLR_PLLSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENCLR_PLLSTARTED_Enabled (0x1UL)

/* LFCLKSTARTED @Bit 2 : Write '1' to disable interrupt for event LFCLKSTARTED */
  #define CLOCK_INTENCLR_LFCLKSTARTED_Pos (2UL)
  #define CLOCK_INTENCLR_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTENCLR_LFCLKSTARTED_Pos)
  #define CLOCK_INTENCLR_LFCLKSTARTED_Min (0x0UL)
  #define CLOCK_INTENCLR_LFCLKSTARTED_Max (0x1UL)
  #define CLOCK_INTENCLR_LFCLKSTARTED_Clear (0x1UL)
  #define CLOCK_INTENCLR_LFCLKSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENCLR_LFCLKSTARTED_Enabled (0x1UL)

/* DONE @Bit 3 : Write '1' to disable interrupt for event DONE */
  #define CLOCK_INTENCLR_DONE_Pos (3UL)
  #define CLOCK_INTENCLR_DONE_Msk (0x1UL << CLOCK_INTENCLR_DONE_Pos)
  #define CLOCK_INTENCLR_DONE_Min (0x0UL)
  #define CLOCK_INTENCLR_DONE_Max (0x1UL)
  #define CLOCK_INTENCLR_DONE_Clear (0x1UL)
  #define CLOCK_INTENCLR_DONE_Disabled (0x0UL)
  #define CLOCK_INTENCLR_DONE_Enabled (0x1UL)

/* XO24MSTARTED @Bit 7 : Write '1' to disable interrupt for event XO24MSTARTED */
  #define CLOCK_INTENCLR_XO24MSTARTED_Pos (7UL)
  #define CLOCK_INTENCLR_XO24MSTARTED_Msk (0x1UL << CLOCK_INTENCLR_XO24MSTARTED_Pos)
  #define CLOCK_INTENCLR_XO24MSTARTED_Min (0x0UL)
  #define CLOCK_INTENCLR_XO24MSTARTED_Max (0x1UL)
  #define CLOCK_INTENCLR_XO24MSTARTED_Clear (0x1UL)
  #define CLOCK_INTENCLR_XO24MSTARTED_Disabled (0x0UL)
  #define CLOCK_INTENCLR_XO24MSTARTED_Enabled (0x1UL)


/* CLOCK_INTPEND: Pending interrupts */
  #define CLOCK_INTPEND_ResetValue (0x00000000UL)

/* XOSTARTED @Bit 0 : Read pending status of interrupt for event XOSTARTED */
  #define CLOCK_INTPEND_XOSTARTED_Pos (0UL)
  #define CLOCK_INTPEND_XOSTARTED_Msk (0x1UL << CLOCK_INTPEND_XOSTARTED_Pos)
  #define CLOCK_INTPEND_XOSTARTED_Min (0x0UL)
  #define CLOCK_INTPEND_XOSTARTED_Max (0x1UL)
  #define CLOCK_INTPEND_XOSTARTED_NotPending (0x0UL)
  #define CLOCK_INTPEND_XOSTARTED_Pending (0x1UL)

/* PLLSTARTED @Bit 1 : Read pending status of interrupt for event PLLSTARTED */
  #define CLOCK_INTPEND_PLLSTARTED_Pos (1UL)
  #define CLOCK_INTPEND_PLLSTARTED_Msk (0x1UL << CLOCK_INTPEND_PLLSTARTED_Pos)
  #define CLOCK_INTPEND_PLLSTARTED_Min (0x0UL)
  #define CLOCK_INTPEND_PLLSTARTED_Max (0x1UL)
  #define CLOCK_INTPEND_PLLSTARTED_NotPending (0x0UL)
  #define CLOCK_INTPEND_PLLSTARTED_Pending (0x1UL)

/* LFCLKSTARTED @Bit 2 : Read pending status of interrupt for event LFCLKSTARTED */
  #define CLOCK_INTPEND_LFCLKSTARTED_Pos (2UL)
  #define CLOCK_INTPEND_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTPEND_LFCLKSTARTED_Pos)
  #define CLOCK_INTPEND_LFCLKSTARTED_Min (0x0UL)
  #define CLOCK_INTPEND_LFCLKSTARTED_Max (0x1UL)
  #define CLOCK_INTPEND_LFCLKSTARTED_NotPending (0x0UL)
  #define CLOCK_INTPEND_LFCLKSTARTED_Pending (0x1UL)

/* DONE @Bit 3 : Read pending status of interrupt for event DONE */
  #define CLOCK_INTPEND_DONE_Pos (3UL)
  #define CLOCK_INTPEND_DONE_Msk (0x1UL << CLOCK_INTPEND_DONE_Pos)
  #define CLOCK_INTPEND_DONE_Min (0x0UL)
  #define CLOCK_INTPEND_DONE_Max (0x1UL)
  #define CLOCK_INTPEND_DONE_NotPending (0x0UL)
  #define CLOCK_INTPEND_DONE_Pending (0x1UL)

/* XO24MSTARTED @Bit 7 : Read pending status of interrupt for event XO24MSTARTED */
  #define CLOCK_INTPEND_XO24MSTARTED_Pos (7UL)
  #define CLOCK_INTPEND_XO24MSTARTED_Msk (0x1UL << CLOCK_INTPEND_XO24MSTARTED_Pos)
  #define CLOCK_INTPEND_XO24MSTARTED_Min (0x0UL)
  #define CLOCK_INTPEND_XO24MSTARTED_Max (0x1UL)
  #define CLOCK_INTPEND_XO24MSTARTED_NotPending (0x0UL)
  #define CLOCK_INTPEND_XO24MSTARTED_Pending (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           COEXC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct COEXC_CCMALLOW ================================================== */
/**
  * @brief CCMALLOW [COEXC_CCMALLOW] (unspecified)
  */
typedef struct {
  __IOM uint32_t  MODE[2];                           /*!< (@ 0x00000000) Coexistence client mode allow configuration for mode
                                                                         [o] in client [n]*/
} NRF_COEXC_CCMALLOW_Type;
  #define COEXC_CCMALLOW_MaxCount (8UL)
  #define COEXC_CCMALLOW_MaxIndex (7UL)
  #define COEXC_CCMALLOW_MinIndex (0UL)

/* COEXC_CCMALLOW_MODE: Coexistence client mode allow configuration for mode [o] in client [n] */
  #define COEXC_CCMALLOW_MODE_MaxCount (2UL)
  #define COEXC_CCMALLOW_MODE_MaxIndex (1UL)
  #define COEXC_CCMALLOW_MODE_MinIndex (0UL)
  #define COEXC_CCMALLOW_MODE_ResetValue (0x00000000UL)

/* Field group CLIENT0 : (unspecified) */
/* MODE0 @Bit 0 : Coexistence allowed configuration for mode [0] in client [0] */
    #define COEXC_CCMALLOW_MODE_CLIENT0_MODE0_Pos (0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT0_MODE0_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT0_MODE0_Pos) /*!< Bit mask of MODE0
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT0_MODE0_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT0_MODE0_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT0_MODE0_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT0_MODE0_Allow (0x1UL)

/* MODE1 @Bit 1 : Coexistence allowed configuration for mode [1] in client [0] */
    #define COEXC_CCMALLOW_MODE_CLIENT0_MODE1_Pos (1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT0_MODE1_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT0_MODE1_Pos) /*!< Bit mask of MODE1
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT0_MODE1_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT0_MODE1_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT0_MODE1_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT0_MODE1_Allow (0x1UL)

/* End field group CLIENT0. */

/* Field group CLIENT1 : (unspecified) */
/* MODE0 @Bit 2 : Coexistence allowed configuration for mode [0] in client [1] */
    #define COEXC_CCMALLOW_MODE_CLIENT1_MODE0_Pos (2UL)
    #define COEXC_CCMALLOW_MODE_CLIENT1_MODE0_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT1_MODE0_Pos) /*!< Bit mask of MODE0
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT1_MODE0_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT1_MODE0_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT1_MODE0_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT1_MODE0_Allow (0x1UL)

/* MODE1 @Bit 3 : Coexistence allowed configuration for mode [1] in client [1] */
    #define COEXC_CCMALLOW_MODE_CLIENT1_MODE1_Pos (3UL)
    #define COEXC_CCMALLOW_MODE_CLIENT1_MODE1_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT1_MODE1_Pos) /*!< Bit mask of MODE1
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT1_MODE1_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT1_MODE1_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT1_MODE1_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT1_MODE1_Allow (0x1UL)

/* End field group CLIENT1. */

/* Field group CLIENT2 : (unspecified) */
/* MODE0 @Bit 4 : Coexistence allowed configuration for mode [0] in client [2] */
    #define COEXC_CCMALLOW_MODE_CLIENT2_MODE0_Pos (4UL)
    #define COEXC_CCMALLOW_MODE_CLIENT2_MODE0_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT2_MODE0_Pos) /*!< Bit mask of MODE0
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT2_MODE0_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT2_MODE0_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT2_MODE0_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT2_MODE0_Allow (0x1UL)

/* MODE1 @Bit 5 : Coexistence allowed configuration for mode [1] in client [2] */
    #define COEXC_CCMALLOW_MODE_CLIENT2_MODE1_Pos (5UL)
    #define COEXC_CCMALLOW_MODE_CLIENT2_MODE1_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT2_MODE1_Pos) /*!< Bit mask of MODE1
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT2_MODE1_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT2_MODE1_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT2_MODE1_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT2_MODE1_Allow (0x1UL)

/* End field group CLIENT2. */

/* Field group CLIENT3 : (unspecified) */
/* MODE0 @Bit 6 : Coexistence allowed configuration for mode [0] in client [3] */
    #define COEXC_CCMALLOW_MODE_CLIENT3_MODE0_Pos (6UL)
    #define COEXC_CCMALLOW_MODE_CLIENT3_MODE0_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT3_MODE0_Pos) /*!< Bit mask of MODE0
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT3_MODE0_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT3_MODE0_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT3_MODE0_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT3_MODE0_Allow (0x1UL)

/* MODE1 @Bit 7 : Coexistence allowed configuration for mode [1] in client [3] */
    #define COEXC_CCMALLOW_MODE_CLIENT3_MODE1_Pos (7UL)
    #define COEXC_CCMALLOW_MODE_CLIENT3_MODE1_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT3_MODE1_Pos) /*!< Bit mask of MODE1
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT3_MODE1_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT3_MODE1_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT3_MODE1_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT3_MODE1_Allow (0x1UL)

/* End field group CLIENT3. */

/* Field group CLIENT4 : (unspecified) */
/* MODE0 @Bit 8 : Coexistence allowed configuration for mode [0] in client [4] */
    #define COEXC_CCMALLOW_MODE_CLIENT4_MODE0_Pos (8UL)
    #define COEXC_CCMALLOW_MODE_CLIENT4_MODE0_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT4_MODE0_Pos) /*!< Bit mask of MODE0
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT4_MODE0_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT4_MODE0_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT4_MODE0_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT4_MODE0_Allow (0x1UL)

/* MODE1 @Bit 9 : Coexistence allowed configuration for mode [1] in client [4] */
    #define COEXC_CCMALLOW_MODE_CLIENT4_MODE1_Pos (9UL)
    #define COEXC_CCMALLOW_MODE_CLIENT4_MODE1_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT4_MODE1_Pos) /*!< Bit mask of MODE1
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT4_MODE1_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT4_MODE1_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT4_MODE1_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT4_MODE1_Allow (0x1UL)

/* End field group CLIENT4. */

/* Field group CLIENT5 : (unspecified) */
/* MODE0 @Bit 10 : Coexistence allowed configuration for mode [0] in client [5] */
    #define COEXC_CCMALLOW_MODE_CLIENT5_MODE0_Pos (10UL)
    #define COEXC_CCMALLOW_MODE_CLIENT5_MODE0_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT5_MODE0_Pos) /*!< Bit mask of MODE0
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT5_MODE0_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT5_MODE0_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT5_MODE0_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT5_MODE0_Allow (0x1UL)

/* MODE1 @Bit 11 : Coexistence allowed configuration for mode [1] in client [5] */
    #define COEXC_CCMALLOW_MODE_CLIENT5_MODE1_Pos (11UL)
    #define COEXC_CCMALLOW_MODE_CLIENT5_MODE1_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT5_MODE1_Pos) /*!< Bit mask of MODE1
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT5_MODE1_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT5_MODE1_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT5_MODE1_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT5_MODE1_Allow (0x1UL)

/* End field group CLIENT5. */

/* Field group CLIENT6 : (unspecified) */
/* MODE0 @Bit 12 : Coexistence allowed configuration for mode [0] in client [6] */
    #define COEXC_CCMALLOW_MODE_CLIENT6_MODE0_Pos (12UL)
    #define COEXC_CCMALLOW_MODE_CLIENT6_MODE0_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT6_MODE0_Pos) /*!< Bit mask of MODE0
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT6_MODE0_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT6_MODE0_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT6_MODE0_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT6_MODE0_Allow (0x1UL)

/* MODE1 @Bit 13 : Coexistence allowed configuration for mode [1] in client [6] */
    #define COEXC_CCMALLOW_MODE_CLIENT6_MODE1_Pos (13UL)
    #define COEXC_CCMALLOW_MODE_CLIENT6_MODE1_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT6_MODE1_Pos) /*!< Bit mask of MODE1
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT6_MODE1_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT6_MODE1_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT6_MODE1_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT6_MODE1_Allow (0x1UL)

/* End field group CLIENT6. */

/* Field group CLIENT7 : (unspecified) */
/* MODE0 @Bit 14 : Coexistence allowed configuration for mode [0] in client [7] */
    #define COEXC_CCMALLOW_MODE_CLIENT7_MODE0_Pos (14UL)
    #define COEXC_CCMALLOW_MODE_CLIENT7_MODE0_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT7_MODE0_Pos) /*!< Bit mask of MODE0
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT7_MODE0_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT7_MODE0_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT7_MODE0_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT7_MODE0_Allow (0x1UL)

/* MODE1 @Bit 15 : Coexistence allowed configuration for mode [1] in client [7] */
    #define COEXC_CCMALLOW_MODE_CLIENT7_MODE1_Pos (15UL)
    #define COEXC_CCMALLOW_MODE_CLIENT7_MODE1_Msk (0x1UL << COEXC_CCMALLOW_MODE_CLIENT7_MODE1_Pos) /*!< Bit mask of MODE1
                                                                            field.*/
    #define COEXC_CCMALLOW_MODE_CLIENT7_MODE1_Min (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT7_MODE1_Max (0x1UL)
    #define COEXC_CCMALLOW_MODE_CLIENT7_MODE1_NotAllowed (0x0UL)
    #define COEXC_CCMALLOW_MODE_CLIENT7_MODE1_Allow (0x1UL)

/* End field group CLIENT7. */


/* ====================================================== Struct COEXC ======================================================= */
/**
  * @brief Coexistence controller
  */
  typedef struct {
    __IM uint32_t RESERVED[256];
    __IOM NRF_COEXC_CCMALLOW_Type CCMALLOW[8];
    __IM uint32_t RESERVED1[112];
    __IOM uint32_t CCCONF[8];
    __IM uint32_t RESERVED2[8];
    __IOM uint32_t TURNAROUND[8];
    __IM uint32_t RESERVED3[40];
    __IM uint32_t GRANTED;
  } NRF_COEXC_Type;

/* COEXC_CCCONF: Configuration of coexistence client [n] */
  #define COEXC_CCCONF_MaxCount (8UL)
  #define COEXC_CCCONF_MaxIndex (7UL)
  #define COEXC_CCCONF_MinIndex (0UL)
  #define COEXC_CCCONF_ResetValue (0x00080000UL)

/* MODE @Bits 0..2 : Coexistence mode of the client [m] */
  #define COEXC_CCCONF_MODE_Pos (0UL)
  #define COEXC_CCCONF_MODE_Msk (0x7UL << COEXC_CCCONF_MODE_Pos)

/* PRIORITY @Bits 16..23 : Priority of the coexistence client [n] */
  #define COEXC_CCCONF_PRIORITY_Pos (16UL)
  #define COEXC_CCCONF_PRIORITY_Msk (0xFFUL << COEXC_CCCONF_PRIORITY_Pos)


/* COEXC_TURNAROUND: Turnaround time for the coexistence client [n] */
  #define COEXC_TURNAROUND_MaxCount (8UL)
  #define COEXC_TURNAROUND_MaxIndex (7UL)
  #define COEXC_TURNAROUND_MinIndex (0UL)
  #define COEXC_TURNAROUND_ResetValue (0x00000280UL)

/* CLOCKCYCLES @Bits 0..11 : Number of clock cycles */
  #define COEXC_TURNAROUND_CLOCKCYCLES_Pos (0UL)
  #define COEXC_TURNAROUND_CLOCKCYCLES_Msk (0xFFFUL << COEXC_TURNAROUND_CLOCKCYCLES_Pos)
  #define COEXC_TURNAROUND_CLOCKCYCLES_Min (0x001UL)
  #define COEXC_TURNAROUND_CLOCKCYCLES_Max (0xFFFUL)


/* COEXC_GRANTED: Granted status of the shared resource */
  #define COEXC_GRANTED_ResetValue (0x00000000UL)

/* CLIENT0 @Bit 0 : Granted status coexistence client [0] */
  #define COEXC_GRANTED_CLIENT0_Pos (0UL)
  #define COEXC_GRANTED_CLIENT0_Msk (0x1UL << COEXC_GRANTED_CLIENT0_Pos)
  #define COEXC_GRANTED_CLIENT0_Min (0x0UL)
  #define COEXC_GRANTED_CLIENT0_Max (0x1UL)
  #define COEXC_GRANTED_CLIENT0_NotGranted (0x0UL)
  #define COEXC_GRANTED_CLIENT0_Granted (0x1UL)

/* CLIENT1 @Bit 1 : Granted status coexistence client [1] */
  #define COEXC_GRANTED_CLIENT1_Pos (1UL)
  #define COEXC_GRANTED_CLIENT1_Msk (0x1UL << COEXC_GRANTED_CLIENT1_Pos)
  #define COEXC_GRANTED_CLIENT1_Min (0x0UL)
  #define COEXC_GRANTED_CLIENT1_Max (0x1UL)
  #define COEXC_GRANTED_CLIENT1_NotGranted (0x0UL)
  #define COEXC_GRANTED_CLIENT1_Granted (0x1UL)

/* CLIENT2 @Bit 2 : Granted status coexistence client [2] */
  #define COEXC_GRANTED_CLIENT2_Pos (2UL)
  #define COEXC_GRANTED_CLIENT2_Msk (0x1UL << COEXC_GRANTED_CLIENT2_Pos)
  #define COEXC_GRANTED_CLIENT2_Min (0x0UL)
  #define COEXC_GRANTED_CLIENT2_Max (0x1UL)
  #define COEXC_GRANTED_CLIENT2_NotGranted (0x0UL)
  #define COEXC_GRANTED_CLIENT2_Granted (0x1UL)

/* CLIENT3 @Bit 3 : Granted status coexistence client [3] */
  #define COEXC_GRANTED_CLIENT3_Pos (3UL)
  #define COEXC_GRANTED_CLIENT3_Msk (0x1UL << COEXC_GRANTED_CLIENT3_Pos)
  #define COEXC_GRANTED_CLIENT3_Min (0x0UL)
  #define COEXC_GRANTED_CLIENT3_Max (0x1UL)
  #define COEXC_GRANTED_CLIENT3_NotGranted (0x0UL)
  #define COEXC_GRANTED_CLIENT3_Granted (0x1UL)

/* CLIENT4 @Bit 4 : Granted status coexistence client [4] */
  #define COEXC_GRANTED_CLIENT4_Pos (4UL)
  #define COEXC_GRANTED_CLIENT4_Msk (0x1UL << COEXC_GRANTED_CLIENT4_Pos)
  #define COEXC_GRANTED_CLIENT4_Min (0x0UL)
  #define COEXC_GRANTED_CLIENT4_Max (0x1UL)
  #define COEXC_GRANTED_CLIENT4_NotGranted (0x0UL)
  #define COEXC_GRANTED_CLIENT4_Granted (0x1UL)

/* CLIENT5 @Bit 5 : Granted status coexistence client [5] */
  #define COEXC_GRANTED_CLIENT5_Pos (5UL)
  #define COEXC_GRANTED_CLIENT5_Msk (0x1UL << COEXC_GRANTED_CLIENT5_Pos)
  #define COEXC_GRANTED_CLIENT5_Min (0x0UL)
  #define COEXC_GRANTED_CLIENT5_Max (0x1UL)
  #define COEXC_GRANTED_CLIENT5_NotGranted (0x0UL)
  #define COEXC_GRANTED_CLIENT5_Granted (0x1UL)

/* CLIENT6 @Bit 6 : Granted status coexistence client [6] */
  #define COEXC_GRANTED_CLIENT6_Pos (6UL)
  #define COEXC_GRANTED_CLIENT6_Msk (0x1UL << COEXC_GRANTED_CLIENT6_Pos)
  #define COEXC_GRANTED_CLIENT6_Min (0x0UL)
  #define COEXC_GRANTED_CLIENT6_Max (0x1UL)
  #define COEXC_GRANTED_CLIENT6_NotGranted (0x0UL)
  #define COEXC_GRANTED_CLIENT6_Granted (0x1UL)

/* CLIENT7 @Bit 7 : Granted status coexistence client [7] */
  #define COEXC_GRANTED_CLIENT7_Pos (7UL)
  #define COEXC_GRANTED_CLIENT7_Msk (0x1UL << COEXC_GRANTED_CLIENT7_Pos)
  #define COEXC_GRANTED_CLIENT7_Min (0x0UL)
  #define COEXC_GRANTED_CLIENT7_Max (0x1UL)
  #define COEXC_GRANTED_CLIENT7_NotGranted (0x0UL)
  #define COEXC_GRANTED_CLIENT7_Granted (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           COMP                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct COMP ======================================================= */
/**
  * @brief Comparator
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_SAMPLE;                      /*!< (@ 0x00000008) Sample comparator value. This task requires that COMP
                                                                         has been started by the START Task.*/
    __IM uint32_t RESERVED[29];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_SAMPLE;
    __IM uint32_t RESERVED1[29];
    __IOM uint32_t EVENTS_READY;
    __IOM uint32_t EVENTS_DOWN;
    __IOM uint32_t EVENTS_UP;
    __IOM uint32_t EVENTS_CROSS;
    __IM uint32_t RESERVED2[28];
    __IOM uint32_t PUBLISH_READY;
    __IOM uint32_t PUBLISH_DOWN;
    __IOM uint32_t PUBLISH_UP;
    __IOM uint32_t PUBLISH_CROSS;
    __IM uint32_t RESERVED3[28];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED4[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED5[60];
    __IM uint32_t RESULT;
    __IM uint32_t RESERVED6[63];
    __IOM uint32_t ENABLE;
    __IOM uint32_t PSEL;
    __IOM uint32_t REFSEL;
    __IOM uint32_t EXTREFSEL;
    __IM uint32_t RESERVED7[8];
    __IOM uint32_t TH;
    __IOM uint32_t MODE;
    __IOM uint32_t HYST;
    __IOM uint32_t ISOURCE;
  } NRF_COMP_Type;

/* COMP_TASKS_START: Start comparator */
  #define COMP_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start comparator */
  #define COMP_TASKS_START_TASKS_START_Pos (0UL)
  #define COMP_TASKS_START_TASKS_START_Msk (0x1UL << COMP_TASKS_START_TASKS_START_Pos)
  #define COMP_TASKS_START_TASKS_START_Min (0x1UL)
  #define COMP_TASKS_START_TASKS_START_Max (0x1UL)
  #define COMP_TASKS_START_TASKS_START_Trigger (0x1UL)


/* COMP_TASKS_STOP: Stop comparator */
  #define COMP_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop comparator */
  #define COMP_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define COMP_TASKS_STOP_TASKS_STOP_Msk (0x1UL << COMP_TASKS_STOP_TASKS_STOP_Pos)
  #define COMP_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define COMP_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define COMP_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* COMP_TASKS_SAMPLE: Sample comparator value. This task requires that COMP has been started by the START Task. */
  #define COMP_TASKS_SAMPLE_ResetValue (0x00000000UL)

/* TASKS_SAMPLE @Bit 0 : Sample comparator value. This task requires that COMP has been started by the START Task. */
  #define COMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos (0UL)
  #define COMP_TASKS_SAMPLE_TASKS_SAMPLE_Msk (0x1UL << COMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos)
  #define COMP_TASKS_SAMPLE_TASKS_SAMPLE_Min (0x1UL)
  #define COMP_TASKS_SAMPLE_TASKS_SAMPLE_Max (0x1UL)
  #define COMP_TASKS_SAMPLE_TASKS_SAMPLE_Trigger (0x1UL)


/* COMP_SUBSCRIBE_START: Subscribe configuration for task START */
  #define COMP_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define COMP_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define COMP_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << COMP_SUBSCRIBE_START_CHIDX_Pos)
  #define COMP_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define COMP_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_SUBSCRIBE_START_EN_Pos (31UL)
  #define COMP_SUBSCRIBE_START_EN_Msk (0x1UL << COMP_SUBSCRIBE_START_EN_Pos)
  #define COMP_SUBSCRIBE_START_EN_Min (0x0UL)
  #define COMP_SUBSCRIBE_START_EN_Max (0x1UL)
  #define COMP_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define COMP_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* COMP_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define COMP_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define COMP_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define COMP_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << COMP_SUBSCRIBE_STOP_CHIDX_Pos)
  #define COMP_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define COMP_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define COMP_SUBSCRIBE_STOP_EN_Msk (0x1UL << COMP_SUBSCRIBE_STOP_EN_Pos)
  #define COMP_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define COMP_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define COMP_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define COMP_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* COMP_SUBSCRIBE_SAMPLE: Subscribe configuration for task SAMPLE */
  #define COMP_SUBSCRIBE_SAMPLE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SAMPLE will subscribe to */
  #define COMP_SUBSCRIBE_SAMPLE_CHIDX_Pos (0UL)
  #define COMP_SUBSCRIBE_SAMPLE_CHIDX_Msk (0xFFUL << COMP_SUBSCRIBE_SAMPLE_CHIDX_Pos)
  #define COMP_SUBSCRIBE_SAMPLE_CHIDX_Min (0x00UL)
  #define COMP_SUBSCRIBE_SAMPLE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_SUBSCRIBE_SAMPLE_EN_Pos (31UL)
  #define COMP_SUBSCRIBE_SAMPLE_EN_Msk (0x1UL << COMP_SUBSCRIBE_SAMPLE_EN_Pos)
  #define COMP_SUBSCRIBE_SAMPLE_EN_Min (0x0UL)
  #define COMP_SUBSCRIBE_SAMPLE_EN_Max (0x1UL)
  #define COMP_SUBSCRIBE_SAMPLE_EN_Disabled (0x0UL)
  #define COMP_SUBSCRIBE_SAMPLE_EN_Enabled (0x1UL)


/* COMP_EVENTS_READY: COMP is ready and output is valid */
  #define COMP_EVENTS_READY_ResetValue (0x00000000UL)

/* EVENTS_READY @Bit 0 : COMP is ready and output is valid */
  #define COMP_EVENTS_READY_EVENTS_READY_Pos (0UL)
  #define COMP_EVENTS_READY_EVENTS_READY_Msk (0x1UL << COMP_EVENTS_READY_EVENTS_READY_Pos)
  #define COMP_EVENTS_READY_EVENTS_READY_Min (0x0UL)
  #define COMP_EVENTS_READY_EVENTS_READY_Max (0x1UL)
  #define COMP_EVENTS_READY_EVENTS_READY_NotGenerated (0x0UL)
  #define COMP_EVENTS_READY_EVENTS_READY_Generated (0x1UL)


/* COMP_EVENTS_DOWN: Downward crossing */
  #define COMP_EVENTS_DOWN_ResetValue (0x00000000UL)

/* EVENTS_DOWN @Bit 0 : Downward crossing */
  #define COMP_EVENTS_DOWN_EVENTS_DOWN_Pos (0UL)
  #define COMP_EVENTS_DOWN_EVENTS_DOWN_Msk (0x1UL << COMP_EVENTS_DOWN_EVENTS_DOWN_Pos)
  #define COMP_EVENTS_DOWN_EVENTS_DOWN_Min (0x0UL)
  #define COMP_EVENTS_DOWN_EVENTS_DOWN_Max (0x1UL)
  #define COMP_EVENTS_DOWN_EVENTS_DOWN_NotGenerated (0x0UL)
  #define COMP_EVENTS_DOWN_EVENTS_DOWN_Generated (0x1UL)


/* COMP_EVENTS_UP: Upward crossing */
  #define COMP_EVENTS_UP_ResetValue (0x00000000UL)

/* EVENTS_UP @Bit 0 : Upward crossing */
  #define COMP_EVENTS_UP_EVENTS_UP_Pos (0UL)
  #define COMP_EVENTS_UP_EVENTS_UP_Msk (0x1UL << COMP_EVENTS_UP_EVENTS_UP_Pos)
  #define COMP_EVENTS_UP_EVENTS_UP_Min (0x0UL)
  #define COMP_EVENTS_UP_EVENTS_UP_Max (0x1UL)
  #define COMP_EVENTS_UP_EVENTS_UP_NotGenerated (0x0UL)
  #define COMP_EVENTS_UP_EVENTS_UP_Generated (0x1UL)


/* COMP_EVENTS_CROSS: Downward or upward crossing */
  #define COMP_EVENTS_CROSS_ResetValue (0x00000000UL)

/* EVENTS_CROSS @Bit 0 : Downward or upward crossing */
  #define COMP_EVENTS_CROSS_EVENTS_CROSS_Pos (0UL)
  #define COMP_EVENTS_CROSS_EVENTS_CROSS_Msk (0x1UL << COMP_EVENTS_CROSS_EVENTS_CROSS_Pos)
  #define COMP_EVENTS_CROSS_EVENTS_CROSS_Min (0x0UL)
  #define COMP_EVENTS_CROSS_EVENTS_CROSS_Max (0x1UL)
  #define COMP_EVENTS_CROSS_EVENTS_CROSS_NotGenerated (0x0UL)
  #define COMP_EVENTS_CROSS_EVENTS_CROSS_Generated (0x1UL)


/* COMP_PUBLISH_READY: Publish configuration for event READY */
  #define COMP_PUBLISH_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define COMP_PUBLISH_READY_CHIDX_Pos (0UL)
  #define COMP_PUBLISH_READY_CHIDX_Msk (0xFFUL << COMP_PUBLISH_READY_CHIDX_Pos)
  #define COMP_PUBLISH_READY_CHIDX_Min (0x00UL)
  #define COMP_PUBLISH_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_PUBLISH_READY_EN_Pos (31UL)
  #define COMP_PUBLISH_READY_EN_Msk (0x1UL << COMP_PUBLISH_READY_EN_Pos)
  #define COMP_PUBLISH_READY_EN_Min (0x0UL)
  #define COMP_PUBLISH_READY_EN_Max (0x1UL)
  #define COMP_PUBLISH_READY_EN_Disabled (0x0UL)
  #define COMP_PUBLISH_READY_EN_Enabled (0x1UL)


/* COMP_PUBLISH_DOWN: Publish configuration for event DOWN */
  #define COMP_PUBLISH_DOWN_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DOWN will publish to */
  #define COMP_PUBLISH_DOWN_CHIDX_Pos (0UL)
  #define COMP_PUBLISH_DOWN_CHIDX_Msk (0xFFUL << COMP_PUBLISH_DOWN_CHIDX_Pos)
  #define COMP_PUBLISH_DOWN_CHIDX_Min (0x00UL)
  #define COMP_PUBLISH_DOWN_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_PUBLISH_DOWN_EN_Pos (31UL)
  #define COMP_PUBLISH_DOWN_EN_Msk (0x1UL << COMP_PUBLISH_DOWN_EN_Pos)
  #define COMP_PUBLISH_DOWN_EN_Min (0x0UL)
  #define COMP_PUBLISH_DOWN_EN_Max (0x1UL)
  #define COMP_PUBLISH_DOWN_EN_Disabled (0x0UL)
  #define COMP_PUBLISH_DOWN_EN_Enabled (0x1UL)


/* COMP_PUBLISH_UP: Publish configuration for event UP */
  #define COMP_PUBLISH_UP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event UP will publish to */
  #define COMP_PUBLISH_UP_CHIDX_Pos (0UL)
  #define COMP_PUBLISH_UP_CHIDX_Msk (0xFFUL << COMP_PUBLISH_UP_CHIDX_Pos)
  #define COMP_PUBLISH_UP_CHIDX_Min (0x00UL)
  #define COMP_PUBLISH_UP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_PUBLISH_UP_EN_Pos (31UL)
  #define COMP_PUBLISH_UP_EN_Msk (0x1UL << COMP_PUBLISH_UP_EN_Pos)
  #define COMP_PUBLISH_UP_EN_Min (0x0UL)
  #define COMP_PUBLISH_UP_EN_Max (0x1UL)
  #define COMP_PUBLISH_UP_EN_Disabled (0x0UL)
  #define COMP_PUBLISH_UP_EN_Enabled (0x1UL)


/* COMP_PUBLISH_CROSS: Publish configuration for event CROSS */
  #define COMP_PUBLISH_CROSS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CROSS will publish to */
  #define COMP_PUBLISH_CROSS_CHIDX_Pos (0UL)
  #define COMP_PUBLISH_CROSS_CHIDX_Msk (0xFFUL << COMP_PUBLISH_CROSS_CHIDX_Pos)
  #define COMP_PUBLISH_CROSS_CHIDX_Min (0x00UL)
  #define COMP_PUBLISH_CROSS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define COMP_PUBLISH_CROSS_EN_Pos (31UL)
  #define COMP_PUBLISH_CROSS_EN_Msk (0x1UL << COMP_PUBLISH_CROSS_EN_Pos)
  #define COMP_PUBLISH_CROSS_EN_Min (0x0UL)
  #define COMP_PUBLISH_CROSS_EN_Max (0x1UL)
  #define COMP_PUBLISH_CROSS_EN_Disabled (0x0UL)
  #define COMP_PUBLISH_CROSS_EN_Enabled (0x1UL)


/* COMP_SHORTS: Shortcuts between local events and tasks */
  #define COMP_SHORTS_ResetValue (0x00000000UL)

/* READY_SAMPLE @Bit 0 : Shortcut between event READY and task SAMPLE */
  #define COMP_SHORTS_READY_SAMPLE_Pos (0UL)
  #define COMP_SHORTS_READY_SAMPLE_Msk (0x1UL << COMP_SHORTS_READY_SAMPLE_Pos)
  #define COMP_SHORTS_READY_SAMPLE_Min (0x0UL)
  #define COMP_SHORTS_READY_SAMPLE_Max (0x1UL)
  #define COMP_SHORTS_READY_SAMPLE_Disabled (0x0UL)
  #define COMP_SHORTS_READY_SAMPLE_Enabled (0x1UL)

/* READY_STOP @Bit 1 : Shortcut between event READY and task STOP */
  #define COMP_SHORTS_READY_STOP_Pos (1UL)
  #define COMP_SHORTS_READY_STOP_Msk (0x1UL << COMP_SHORTS_READY_STOP_Pos)
  #define COMP_SHORTS_READY_STOP_Min (0x0UL)
  #define COMP_SHORTS_READY_STOP_Max (0x1UL)
  #define COMP_SHORTS_READY_STOP_Disabled (0x0UL)
  #define COMP_SHORTS_READY_STOP_Enabled (0x1UL)

/* DOWN_STOP @Bit 2 : Shortcut between event DOWN and task STOP */
  #define COMP_SHORTS_DOWN_STOP_Pos (2UL)
  #define COMP_SHORTS_DOWN_STOP_Msk (0x1UL << COMP_SHORTS_DOWN_STOP_Pos)
  #define COMP_SHORTS_DOWN_STOP_Min (0x0UL)
  #define COMP_SHORTS_DOWN_STOP_Max (0x1UL)
  #define COMP_SHORTS_DOWN_STOP_Disabled (0x0UL)
  #define COMP_SHORTS_DOWN_STOP_Enabled (0x1UL)

/* UP_STOP @Bit 3 : Shortcut between event UP and task STOP */
  #define COMP_SHORTS_UP_STOP_Pos (3UL)
  #define COMP_SHORTS_UP_STOP_Msk (0x1UL << COMP_SHORTS_UP_STOP_Pos)
  #define COMP_SHORTS_UP_STOP_Min (0x0UL)
  #define COMP_SHORTS_UP_STOP_Max (0x1UL)
  #define COMP_SHORTS_UP_STOP_Disabled (0x0UL)
  #define COMP_SHORTS_UP_STOP_Enabled (0x1UL)

/* CROSS_STOP @Bit 4 : Shortcut between event CROSS and task STOP */
  #define COMP_SHORTS_CROSS_STOP_Pos (4UL)
  #define COMP_SHORTS_CROSS_STOP_Msk (0x1UL << COMP_SHORTS_CROSS_STOP_Pos)
  #define COMP_SHORTS_CROSS_STOP_Min (0x0UL)
  #define COMP_SHORTS_CROSS_STOP_Max (0x1UL)
  #define COMP_SHORTS_CROSS_STOP_Disabled (0x0UL)
  #define COMP_SHORTS_CROSS_STOP_Enabled (0x1UL)


/* COMP_INTEN: Enable or disable interrupt */
  #define COMP_INTEN_ResetValue (0x00000000UL)

/* READY @Bit 0 : Enable or disable interrupt for event READY */
  #define COMP_INTEN_READY_Pos (0UL)
  #define COMP_INTEN_READY_Msk (0x1UL << COMP_INTEN_READY_Pos)
  #define COMP_INTEN_READY_Min (0x0UL)
  #define COMP_INTEN_READY_Max (0x1UL)
  #define COMP_INTEN_READY_Disabled (0x0UL)
  #define COMP_INTEN_READY_Enabled (0x1UL)

/* DOWN @Bit 1 : Enable or disable interrupt for event DOWN */
  #define COMP_INTEN_DOWN_Pos (1UL)
  #define COMP_INTEN_DOWN_Msk (0x1UL << COMP_INTEN_DOWN_Pos)
  #define COMP_INTEN_DOWN_Min (0x0UL)
  #define COMP_INTEN_DOWN_Max (0x1UL)
  #define COMP_INTEN_DOWN_Disabled (0x0UL)
  #define COMP_INTEN_DOWN_Enabled (0x1UL)

/* UP @Bit 2 : Enable or disable interrupt for event UP */
  #define COMP_INTEN_UP_Pos (2UL)
  #define COMP_INTEN_UP_Msk (0x1UL << COMP_INTEN_UP_Pos)
  #define COMP_INTEN_UP_Min (0x0UL)
  #define COMP_INTEN_UP_Max (0x1UL)
  #define COMP_INTEN_UP_Disabled (0x0UL)
  #define COMP_INTEN_UP_Enabled (0x1UL)

/* CROSS @Bit 3 : Enable or disable interrupt for event CROSS */
  #define COMP_INTEN_CROSS_Pos (3UL)
  #define COMP_INTEN_CROSS_Msk (0x1UL << COMP_INTEN_CROSS_Pos)
  #define COMP_INTEN_CROSS_Min (0x0UL)
  #define COMP_INTEN_CROSS_Max (0x1UL)
  #define COMP_INTEN_CROSS_Disabled (0x0UL)
  #define COMP_INTEN_CROSS_Enabled (0x1UL)


/* COMP_INTENSET: Enable interrupt */
  #define COMP_INTENSET_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to enable interrupt for event READY */
  #define COMP_INTENSET_READY_Pos (0UL)
  #define COMP_INTENSET_READY_Msk (0x1UL << COMP_INTENSET_READY_Pos)
  #define COMP_INTENSET_READY_Min (0x0UL)
  #define COMP_INTENSET_READY_Max (0x1UL)
  #define COMP_INTENSET_READY_Set (0x1UL)
  #define COMP_INTENSET_READY_Disabled (0x0UL)
  #define COMP_INTENSET_READY_Enabled (0x1UL)

/* DOWN @Bit 1 : Write '1' to enable interrupt for event DOWN */
  #define COMP_INTENSET_DOWN_Pos (1UL)
  #define COMP_INTENSET_DOWN_Msk (0x1UL << COMP_INTENSET_DOWN_Pos)
  #define COMP_INTENSET_DOWN_Min (0x0UL)
  #define COMP_INTENSET_DOWN_Max (0x1UL)
  #define COMP_INTENSET_DOWN_Set (0x1UL)
  #define COMP_INTENSET_DOWN_Disabled (0x0UL)
  #define COMP_INTENSET_DOWN_Enabled (0x1UL)

/* UP @Bit 2 : Write '1' to enable interrupt for event UP */
  #define COMP_INTENSET_UP_Pos (2UL)
  #define COMP_INTENSET_UP_Msk (0x1UL << COMP_INTENSET_UP_Pos)
  #define COMP_INTENSET_UP_Min (0x0UL)
  #define COMP_INTENSET_UP_Max (0x1UL)
  #define COMP_INTENSET_UP_Set (0x1UL)
  #define COMP_INTENSET_UP_Disabled (0x0UL)
  #define COMP_INTENSET_UP_Enabled (0x1UL)

/* CROSS @Bit 3 : Write '1' to enable interrupt for event CROSS */
  #define COMP_INTENSET_CROSS_Pos (3UL)
  #define COMP_INTENSET_CROSS_Msk (0x1UL << COMP_INTENSET_CROSS_Pos)
  #define COMP_INTENSET_CROSS_Min (0x0UL)
  #define COMP_INTENSET_CROSS_Max (0x1UL)
  #define COMP_INTENSET_CROSS_Set (0x1UL)
  #define COMP_INTENSET_CROSS_Disabled (0x0UL)
  #define COMP_INTENSET_CROSS_Enabled (0x1UL)


/* COMP_INTENCLR: Disable interrupt */
  #define COMP_INTENCLR_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to disable interrupt for event READY */
  #define COMP_INTENCLR_READY_Pos (0UL)
  #define COMP_INTENCLR_READY_Msk (0x1UL << COMP_INTENCLR_READY_Pos)
  #define COMP_INTENCLR_READY_Min (0x0UL)
  #define COMP_INTENCLR_READY_Max (0x1UL)
  #define COMP_INTENCLR_READY_Clear (0x1UL)
  #define COMP_INTENCLR_READY_Disabled (0x0UL)
  #define COMP_INTENCLR_READY_Enabled (0x1UL)

/* DOWN @Bit 1 : Write '1' to disable interrupt for event DOWN */
  #define COMP_INTENCLR_DOWN_Pos (1UL)
  #define COMP_INTENCLR_DOWN_Msk (0x1UL << COMP_INTENCLR_DOWN_Pos)
  #define COMP_INTENCLR_DOWN_Min (0x0UL)
  #define COMP_INTENCLR_DOWN_Max (0x1UL)
  #define COMP_INTENCLR_DOWN_Clear (0x1UL)
  #define COMP_INTENCLR_DOWN_Disabled (0x0UL)
  #define COMP_INTENCLR_DOWN_Enabled (0x1UL)

/* UP @Bit 2 : Write '1' to disable interrupt for event UP */
  #define COMP_INTENCLR_UP_Pos (2UL)
  #define COMP_INTENCLR_UP_Msk (0x1UL << COMP_INTENCLR_UP_Pos)
  #define COMP_INTENCLR_UP_Min (0x0UL)
  #define COMP_INTENCLR_UP_Max (0x1UL)
  #define COMP_INTENCLR_UP_Clear (0x1UL)
  #define COMP_INTENCLR_UP_Disabled (0x0UL)
  #define COMP_INTENCLR_UP_Enabled (0x1UL)

/* CROSS @Bit 3 : Write '1' to disable interrupt for event CROSS */
  #define COMP_INTENCLR_CROSS_Pos (3UL)
  #define COMP_INTENCLR_CROSS_Msk (0x1UL << COMP_INTENCLR_CROSS_Pos)
  #define COMP_INTENCLR_CROSS_Min (0x0UL)
  #define COMP_INTENCLR_CROSS_Max (0x1UL)
  #define COMP_INTENCLR_CROSS_Clear (0x1UL)
  #define COMP_INTENCLR_CROSS_Disabled (0x0UL)
  #define COMP_INTENCLR_CROSS_Enabled (0x1UL)


/* COMP_INTPEND: Pending interrupts */
  #define COMP_INTPEND_ResetValue (0x00000000UL)

/* READY @Bit 0 : Read pending status of interrupt for event READY */
  #define COMP_INTPEND_READY_Pos (0UL)
  #define COMP_INTPEND_READY_Msk (0x1UL << COMP_INTPEND_READY_Pos)
  #define COMP_INTPEND_READY_Min (0x0UL)
  #define COMP_INTPEND_READY_Max (0x1UL)
  #define COMP_INTPEND_READY_NotPending (0x0UL)
  #define COMP_INTPEND_READY_Pending (0x1UL)

/* DOWN @Bit 1 : Read pending status of interrupt for event DOWN */
  #define COMP_INTPEND_DOWN_Pos (1UL)
  #define COMP_INTPEND_DOWN_Msk (0x1UL << COMP_INTPEND_DOWN_Pos)
  #define COMP_INTPEND_DOWN_Min (0x0UL)
  #define COMP_INTPEND_DOWN_Max (0x1UL)
  #define COMP_INTPEND_DOWN_NotPending (0x0UL)
  #define COMP_INTPEND_DOWN_Pending (0x1UL)

/* UP @Bit 2 : Read pending status of interrupt for event UP */
  #define COMP_INTPEND_UP_Pos (2UL)
  #define COMP_INTPEND_UP_Msk (0x1UL << COMP_INTPEND_UP_Pos)
  #define COMP_INTPEND_UP_Min (0x0UL)
  #define COMP_INTPEND_UP_Max (0x1UL)
  #define COMP_INTPEND_UP_NotPending (0x0UL)
  #define COMP_INTPEND_UP_Pending (0x1UL)

/* CROSS @Bit 3 : Read pending status of interrupt for event CROSS */
  #define COMP_INTPEND_CROSS_Pos (3UL)
  #define COMP_INTPEND_CROSS_Msk (0x1UL << COMP_INTPEND_CROSS_Pos)
  #define COMP_INTPEND_CROSS_Min (0x0UL)
  #define COMP_INTPEND_CROSS_Max (0x1UL)
  #define COMP_INTPEND_CROSS_NotPending (0x0UL)
  #define COMP_INTPEND_CROSS_Pending (0x1UL)


/* COMP_RESULT: Compare result */
  #define COMP_RESULT_ResetValue (0x00000000UL)

/* RESULT @Bit 0 : Result of last compare. Decision point SAMPLE task. */
  #define COMP_RESULT_RESULT_Pos (0UL)
  #define COMP_RESULT_RESULT_Msk (0x1UL << COMP_RESULT_RESULT_Pos)
  #define COMP_RESULT_RESULT_Min (0x0UL)
  #define COMP_RESULT_RESULT_Max (0x1UL)
  #define COMP_RESULT_RESULT_Below (0x0UL)
  #define COMP_RESULT_RESULT_Above (0x1UL)


/* COMP_ENABLE: COMP enable */
  #define COMP_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..1 : Enable or disable COMP */
  #define COMP_ENABLE_ENABLE_Pos (0UL)
  #define COMP_ENABLE_ENABLE_Msk (0x3UL << COMP_ENABLE_ENABLE_Pos)
  #define COMP_ENABLE_ENABLE_Min (0x0UL)
  #define COMP_ENABLE_ENABLE_Max (0x2UL)
  #define COMP_ENABLE_ENABLE_Disabled (0x0UL)
  #define COMP_ENABLE_ENABLE_Enabled (0x2UL)


/* COMP_PSEL: Pin select */
  #define COMP_PSEL_ResetValue (0x00000000UL)

/* PIN @Bits 0..4 : Analog pin select */
  #define COMP_PSEL_PIN_Pos (0UL)
  #define COMP_PSEL_PIN_Msk (0x1FUL << COMP_PSEL_PIN_Pos)

/* PORT @Bits 8..11 : GPIO Port selection */
  #define COMP_PSEL_PORT_Pos (8UL)
  #define COMP_PSEL_PORT_Msk (0xFUL << COMP_PSEL_PORT_Pos)


/* COMP_REFSEL: Reference source select for single-ended mode */
  #define COMP_REFSEL_ResetValue (0x00000004UL)

/* REFSEL @Bits 0..2 : Reference select */
  #define COMP_REFSEL_REFSEL_Pos (0UL)
  #define COMP_REFSEL_REFSEL_Msk (0x7UL << COMP_REFSEL_REFSEL_Pos)
  #define COMP_REFSEL_REFSEL_Min (0x0UL)
  #define COMP_REFSEL_REFSEL_Max (0x5UL)
  #define COMP_REFSEL_REFSEL_Int1V2 (0x0UL)
  #define COMP_REFSEL_REFSEL_AVDDAO1V8 (0x4UL)
  #define COMP_REFSEL_REFSEL_ARef (0x5UL)


/* COMP_EXTREFSEL: External reference select */
  #define COMP_EXTREFSEL_ResetValue (0x00000000UL)

/* PIN @Bits 0..4 : External analog reference pin select */
  #define COMP_EXTREFSEL_PIN_Pos (0UL)
  #define COMP_EXTREFSEL_PIN_Msk (0x1FUL << COMP_EXTREFSEL_PIN_Pos)

/* PORT @Bits 8..11 : GPIO Port selection */
  #define COMP_EXTREFSEL_PORT_Pos (8UL)
  #define COMP_EXTREFSEL_PORT_Msk (0xFUL << COMP_EXTREFSEL_PORT_Pos)


/* COMP_TH: Threshold configuration for hysteresis unit */
  #define COMP_TH_ResetValue (0x00002020UL)

/* THDOWN @Bits 0..5 : VDOWN = (THDOWN+1)/64*VREF */
  #define COMP_TH_THDOWN_Pos (0UL)
  #define COMP_TH_THDOWN_Msk (0x3FUL << COMP_TH_THDOWN_Pos)
  #define COMP_TH_THDOWN_Min (0x00UL)
  #define COMP_TH_THDOWN_Max (0x3FUL)

/* THUP @Bits 8..13 : VUP = (THUP+1)/64*VREF */
  #define COMP_TH_THUP_Pos (8UL)
  #define COMP_TH_THUP_Msk (0x3FUL << COMP_TH_THUP_Pos)
  #define COMP_TH_THUP_Min (0x00UL)
  #define COMP_TH_THUP_Max (0x3FUL)


/* COMP_MODE: Mode configuration */
  #define COMP_MODE_ResetValue (0x00000000UL)

/* SP @Bit 0 : Speed and power modes */
  #define COMP_MODE_SP_Pos (0UL)
  #define COMP_MODE_SP_Msk (0x1UL << COMP_MODE_SP_Pos)
  #define COMP_MODE_SP_Min (0x0UL)
  #define COMP_MODE_SP_Max (0x1UL)
  #define COMP_MODE_SP_Low (0x0UL)
  #define COMP_MODE_SP_High (0x1UL)

/* MAIN @Bit 8 : Main operation modes */
  #define COMP_MODE_MAIN_Pos (8UL)
  #define COMP_MODE_MAIN_Msk (0x1UL << COMP_MODE_MAIN_Pos)
  #define COMP_MODE_MAIN_Min (0x0UL)
  #define COMP_MODE_MAIN_Max (0x1UL)
  #define COMP_MODE_MAIN_SE (0x0UL)
  #define COMP_MODE_MAIN_Diff (0x1UL)


/* COMP_HYST: Comparator hysteresis enable */
  #define COMP_HYST_ResetValue (0x00000000UL)

/* HYST @Bit 0 : Comparator hysteresis */
  #define COMP_HYST_HYST_Pos (0UL)
  #define COMP_HYST_HYST_Msk (0x1UL << COMP_HYST_HYST_Pos)
  #define COMP_HYST_HYST_Min (0x0UL)
  #define COMP_HYST_HYST_Max (0x1UL)
  #define COMP_HYST_HYST_NoHyst (0x0UL)
  #define COMP_HYST_HYST_Hyst40mV (0x1UL)


/* COMP_ISOURCE: Current source select on analog input */
  #define COMP_ISOURCE_ResetValue (0x00000000UL)

/* ISOURCE @Bits 0..1 : Current source select on analog input */
  #define COMP_ISOURCE_ISOURCE_Pos (0UL)
  #define COMP_ISOURCE_ISOURCE_Msk (0x3UL << COMP_ISOURCE_ISOURCE_Pos)
  #define COMP_ISOURCE_ISOURCE_Min (0x0UL)
  #define COMP_ISOURCE_ISOURCE_Max (0x3UL)
  #define COMP_ISOURCE_ISOURCE_Off (0x0UL)
  #define COMP_ISOURCE_ISOURCE_Ien2uA5 (0x1UL)
  #define COMP_ISOURCE_ISOURCE_Ien5uA (0x2UL)
  #define COMP_ISOURCE_ISOURCE_Ien10uA (0x3UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           CPUC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct CPUC ======================================================= */
/**
  * @brief CPU control
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_FPUIOC;                    /*!< (@ 0x00000100) An invalid operation exception has occurred in the
                                                                         FPU.*/
    __IOM uint32_t EVENTS_FPUDZC;                    /*!< (@ 0x00000104) A floating-point divide-by-zero exception has occurred
                                                                         in the FPU.*/
    __IOM uint32_t EVENTS_FPUOFC;                    /*!< (@ 0x00000108) A floating-point overflow exception has occurred in the
                                                                         FPU.*/
    __IOM uint32_t EVENTS_FPUUFC;                    /*!< (@ 0x0000010C) A floating-point underflow exception has occurred in
                                                                         the FPU.*/
    __IOM uint32_t EVENTS_FPUIXC;                    /*!< (@ 0x00000110) A floating-point inexact exception has occurred in the
                                                                         FPU.*/
    __IOM uint32_t EVENTS_FPUIDC;                    /*!< (@ 0x00000114) A floating-point input denormal exception has occurred
                                                                         in the FPU.*/
    __IM uint32_t RESERVED1[122];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED2[125];
    __IOM uint32_t LOCK;                             /*!< (@ 0x00000500) Register to lock the certain parts of the CPU from
                                                                         being modified.*/
    __IM uint32_t CPUID;
  } NRF_CPUC_Type;

/* CPUC_EVENTS_FPUIOC: An invalid operation exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUIOC_ResetValue (0x00000000UL)

/* EVENTS_FPUIOC @Bit 0 : An invalid operation exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_Pos (0UL)
  #define CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_Msk (0x1UL << CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_Pos) /*!< Bit mask of EVENTS_FPUIOC
                                                                            field.*/
  #define CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_Min (0x0UL)
  #define CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_Max (0x1UL)
  #define CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_NotGenerated (0x0UL)
  #define CPUC_EVENTS_FPUIOC_EVENTS_FPUIOC_Generated (0x1UL)


/* CPUC_EVENTS_FPUDZC: A floating-point divide-by-zero exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUDZC_ResetValue (0x00000000UL)

/* EVENTS_FPUDZC @Bit 0 : A floating-point divide-by-zero exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_Pos (0UL)
  #define CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_Msk (0x1UL << CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_Pos) /*!< Bit mask of EVENTS_FPUDZC
                                                                            field.*/
  #define CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_Min (0x0UL)
  #define CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_Max (0x1UL)
  #define CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_NotGenerated (0x0UL)
  #define CPUC_EVENTS_FPUDZC_EVENTS_FPUDZC_Generated (0x1UL)


/* CPUC_EVENTS_FPUOFC: A floating-point overflow exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUOFC_ResetValue (0x00000000UL)

/* EVENTS_FPUOFC @Bit 0 : A floating-point overflow exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_Pos (0UL)
  #define CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_Msk (0x1UL << CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_Pos) /*!< Bit mask of EVENTS_FPUOFC
                                                                            field.*/
  #define CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_Min (0x0UL)
  #define CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_Max (0x1UL)
  #define CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_NotGenerated (0x0UL)
  #define CPUC_EVENTS_FPUOFC_EVENTS_FPUOFC_Generated (0x1UL)


/* CPUC_EVENTS_FPUUFC: A floating-point underflow exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUUFC_ResetValue (0x00000000UL)

/* EVENTS_FPUUFC @Bit 0 : A floating-point underflow exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_Pos (0UL)
  #define CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_Msk (0x1UL << CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_Pos) /*!< Bit mask of EVENTS_FPUUFC
                                                                            field.*/
  #define CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_Min (0x0UL)
  #define CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_Max (0x1UL)
  #define CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_NotGenerated (0x0UL)
  #define CPUC_EVENTS_FPUUFC_EVENTS_FPUUFC_Generated (0x1UL)


/* CPUC_EVENTS_FPUIXC: A floating-point inexact exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUIXC_ResetValue (0x00000000UL)

/* EVENTS_FPUIXC @Bit 0 : A floating-point inexact exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_Pos (0UL)
  #define CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_Msk (0x1UL << CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_Pos) /*!< Bit mask of EVENTS_FPUIXC
                                                                            field.*/
  #define CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_Min (0x0UL)
  #define CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_Max (0x1UL)
  #define CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_NotGenerated (0x0UL)
  #define CPUC_EVENTS_FPUIXC_EVENTS_FPUIXC_Generated (0x1UL)


/* CPUC_EVENTS_FPUIDC: A floating-point input denormal exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUIDC_ResetValue (0x00000000UL)

/* EVENTS_FPUIDC @Bit 0 : A floating-point input denormal exception has occurred in the FPU. */
  #define CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_Pos (0UL)
  #define CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_Msk (0x1UL << CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_Pos) /*!< Bit mask of EVENTS_FPUIDC
                                                                            field.*/
  #define CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_Min (0x0UL)
  #define CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_Max (0x1UL)
  #define CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_NotGenerated (0x0UL)
  #define CPUC_EVENTS_FPUIDC_EVENTS_FPUIDC_Generated (0x1UL)


/* CPUC_INTEN: Enable or disable interrupt */
  #define CPUC_INTEN_ResetValue (0x00000000UL)

/* FPUIOC @Bit 0 : Enable or disable interrupt for event FPUIOC */
  #define CPUC_INTEN_FPUIOC_Pos (0UL)
  #define CPUC_INTEN_FPUIOC_Msk (0x1UL << CPUC_INTEN_FPUIOC_Pos)
  #define CPUC_INTEN_FPUIOC_Min (0x0UL)
  #define CPUC_INTEN_FPUIOC_Max (0x1UL)
  #define CPUC_INTEN_FPUIOC_Disabled (0x0UL)
  #define CPUC_INTEN_FPUIOC_Enabled (0x1UL)

/* FPUDZC @Bit 1 : Enable or disable interrupt for event FPUDZC */
  #define CPUC_INTEN_FPUDZC_Pos (1UL)
  #define CPUC_INTEN_FPUDZC_Msk (0x1UL << CPUC_INTEN_FPUDZC_Pos)
  #define CPUC_INTEN_FPUDZC_Min (0x0UL)
  #define CPUC_INTEN_FPUDZC_Max (0x1UL)
  #define CPUC_INTEN_FPUDZC_Disabled (0x0UL)
  #define CPUC_INTEN_FPUDZC_Enabled (0x1UL)

/* FPUOFC @Bit 2 : Enable or disable interrupt for event FPUOFC */
  #define CPUC_INTEN_FPUOFC_Pos (2UL)
  #define CPUC_INTEN_FPUOFC_Msk (0x1UL << CPUC_INTEN_FPUOFC_Pos)
  #define CPUC_INTEN_FPUOFC_Min (0x0UL)
  #define CPUC_INTEN_FPUOFC_Max (0x1UL)
  #define CPUC_INTEN_FPUOFC_Disabled (0x0UL)
  #define CPUC_INTEN_FPUOFC_Enabled (0x1UL)

/* FPUUFC @Bit 3 : Enable or disable interrupt for event FPUUFC */
  #define CPUC_INTEN_FPUUFC_Pos (3UL)
  #define CPUC_INTEN_FPUUFC_Msk (0x1UL << CPUC_INTEN_FPUUFC_Pos)
  #define CPUC_INTEN_FPUUFC_Min (0x0UL)
  #define CPUC_INTEN_FPUUFC_Max (0x1UL)
  #define CPUC_INTEN_FPUUFC_Disabled (0x0UL)
  #define CPUC_INTEN_FPUUFC_Enabled (0x1UL)

/* FPUIXC @Bit 4 : Enable or disable interrupt for event FPUIXC */
  #define CPUC_INTEN_FPUIXC_Pos (4UL)
  #define CPUC_INTEN_FPUIXC_Msk (0x1UL << CPUC_INTEN_FPUIXC_Pos)
  #define CPUC_INTEN_FPUIXC_Min (0x0UL)
  #define CPUC_INTEN_FPUIXC_Max (0x1UL)
  #define CPUC_INTEN_FPUIXC_Disabled (0x0UL)
  #define CPUC_INTEN_FPUIXC_Enabled (0x1UL)

/* FPUIDC @Bit 5 : Enable or disable interrupt for event FPUIDC */
  #define CPUC_INTEN_FPUIDC_Pos (5UL)
  #define CPUC_INTEN_FPUIDC_Msk (0x1UL << CPUC_INTEN_FPUIDC_Pos)
  #define CPUC_INTEN_FPUIDC_Min (0x0UL)
  #define CPUC_INTEN_FPUIDC_Max (0x1UL)
  #define CPUC_INTEN_FPUIDC_Disabled (0x0UL)
  #define CPUC_INTEN_FPUIDC_Enabled (0x1UL)


/* CPUC_INTENSET: Enable interrupt */
  #define CPUC_INTENSET_ResetValue (0x00000000UL)

/* FPUIOC @Bit 0 : Write '1' to enable interrupt for event FPUIOC */
  #define CPUC_INTENSET_FPUIOC_Pos (0UL)
  #define CPUC_INTENSET_FPUIOC_Msk (0x1UL << CPUC_INTENSET_FPUIOC_Pos)
  #define CPUC_INTENSET_FPUIOC_Min (0x0UL)
  #define CPUC_INTENSET_FPUIOC_Max (0x1UL)
  #define CPUC_INTENSET_FPUIOC_Set (0x1UL)
  #define CPUC_INTENSET_FPUIOC_Disabled (0x0UL)
  #define CPUC_INTENSET_FPUIOC_Enabled (0x1UL)

/* FPUDZC @Bit 1 : Write '1' to enable interrupt for event FPUDZC */
  #define CPUC_INTENSET_FPUDZC_Pos (1UL)
  #define CPUC_INTENSET_FPUDZC_Msk (0x1UL << CPUC_INTENSET_FPUDZC_Pos)
  #define CPUC_INTENSET_FPUDZC_Min (0x0UL)
  #define CPUC_INTENSET_FPUDZC_Max (0x1UL)
  #define CPUC_INTENSET_FPUDZC_Set (0x1UL)
  #define CPUC_INTENSET_FPUDZC_Disabled (0x0UL)
  #define CPUC_INTENSET_FPUDZC_Enabled (0x1UL)

/* FPUOFC @Bit 2 : Write '1' to enable interrupt for event FPUOFC */
  #define CPUC_INTENSET_FPUOFC_Pos (2UL)
  #define CPUC_INTENSET_FPUOFC_Msk (0x1UL << CPUC_INTENSET_FPUOFC_Pos)
  #define CPUC_INTENSET_FPUOFC_Min (0x0UL)
  #define CPUC_INTENSET_FPUOFC_Max (0x1UL)
  #define CPUC_INTENSET_FPUOFC_Set (0x1UL)
  #define CPUC_INTENSET_FPUOFC_Disabled (0x0UL)
  #define CPUC_INTENSET_FPUOFC_Enabled (0x1UL)

/* FPUUFC @Bit 3 : Write '1' to enable interrupt for event FPUUFC */
  #define CPUC_INTENSET_FPUUFC_Pos (3UL)
  #define CPUC_INTENSET_FPUUFC_Msk (0x1UL << CPUC_INTENSET_FPUUFC_Pos)
  #define CPUC_INTENSET_FPUUFC_Min (0x0UL)
  #define CPUC_INTENSET_FPUUFC_Max (0x1UL)
  #define CPUC_INTENSET_FPUUFC_Set (0x1UL)
  #define CPUC_INTENSET_FPUUFC_Disabled (0x0UL)
  #define CPUC_INTENSET_FPUUFC_Enabled (0x1UL)

/* FPUIXC @Bit 4 : Write '1' to enable interrupt for event FPUIXC */
  #define CPUC_INTENSET_FPUIXC_Pos (4UL)
  #define CPUC_INTENSET_FPUIXC_Msk (0x1UL << CPUC_INTENSET_FPUIXC_Pos)
  #define CPUC_INTENSET_FPUIXC_Min (0x0UL)
  #define CPUC_INTENSET_FPUIXC_Max (0x1UL)
  #define CPUC_INTENSET_FPUIXC_Set (0x1UL)
  #define CPUC_INTENSET_FPUIXC_Disabled (0x0UL)
  #define CPUC_INTENSET_FPUIXC_Enabled (0x1UL)

/* FPUIDC @Bit 5 : Write '1' to enable interrupt for event FPUIDC */
  #define CPUC_INTENSET_FPUIDC_Pos (5UL)
  #define CPUC_INTENSET_FPUIDC_Msk (0x1UL << CPUC_INTENSET_FPUIDC_Pos)
  #define CPUC_INTENSET_FPUIDC_Min (0x0UL)
  #define CPUC_INTENSET_FPUIDC_Max (0x1UL)
  #define CPUC_INTENSET_FPUIDC_Set (0x1UL)
  #define CPUC_INTENSET_FPUIDC_Disabled (0x0UL)
  #define CPUC_INTENSET_FPUIDC_Enabled (0x1UL)


/* CPUC_INTENCLR: Disable interrupt */
  #define CPUC_INTENCLR_ResetValue (0x00000000UL)

/* FPUIOC @Bit 0 : Write '1' to disable interrupt for event FPUIOC */
  #define CPUC_INTENCLR_FPUIOC_Pos (0UL)
  #define CPUC_INTENCLR_FPUIOC_Msk (0x1UL << CPUC_INTENCLR_FPUIOC_Pos)
  #define CPUC_INTENCLR_FPUIOC_Min (0x0UL)
  #define CPUC_INTENCLR_FPUIOC_Max (0x1UL)
  #define CPUC_INTENCLR_FPUIOC_Clear (0x1UL)
  #define CPUC_INTENCLR_FPUIOC_Disabled (0x0UL)
  #define CPUC_INTENCLR_FPUIOC_Enabled (0x1UL)

/* FPUDZC @Bit 1 : Write '1' to disable interrupt for event FPUDZC */
  #define CPUC_INTENCLR_FPUDZC_Pos (1UL)
  #define CPUC_INTENCLR_FPUDZC_Msk (0x1UL << CPUC_INTENCLR_FPUDZC_Pos)
  #define CPUC_INTENCLR_FPUDZC_Min (0x0UL)
  #define CPUC_INTENCLR_FPUDZC_Max (0x1UL)
  #define CPUC_INTENCLR_FPUDZC_Clear (0x1UL)
  #define CPUC_INTENCLR_FPUDZC_Disabled (0x0UL)
  #define CPUC_INTENCLR_FPUDZC_Enabled (0x1UL)

/* FPUOFC @Bit 2 : Write '1' to disable interrupt for event FPUOFC */
  #define CPUC_INTENCLR_FPUOFC_Pos (2UL)
  #define CPUC_INTENCLR_FPUOFC_Msk (0x1UL << CPUC_INTENCLR_FPUOFC_Pos)
  #define CPUC_INTENCLR_FPUOFC_Min (0x0UL)
  #define CPUC_INTENCLR_FPUOFC_Max (0x1UL)
  #define CPUC_INTENCLR_FPUOFC_Clear (0x1UL)
  #define CPUC_INTENCLR_FPUOFC_Disabled (0x0UL)
  #define CPUC_INTENCLR_FPUOFC_Enabled (0x1UL)

/* FPUUFC @Bit 3 : Write '1' to disable interrupt for event FPUUFC */
  #define CPUC_INTENCLR_FPUUFC_Pos (3UL)
  #define CPUC_INTENCLR_FPUUFC_Msk (0x1UL << CPUC_INTENCLR_FPUUFC_Pos)
  #define CPUC_INTENCLR_FPUUFC_Min (0x0UL)
  #define CPUC_INTENCLR_FPUUFC_Max (0x1UL)
  #define CPUC_INTENCLR_FPUUFC_Clear (0x1UL)
  #define CPUC_INTENCLR_FPUUFC_Disabled (0x0UL)
  #define CPUC_INTENCLR_FPUUFC_Enabled (0x1UL)

/* FPUIXC @Bit 4 : Write '1' to disable interrupt for event FPUIXC */
  #define CPUC_INTENCLR_FPUIXC_Pos (4UL)
  #define CPUC_INTENCLR_FPUIXC_Msk (0x1UL << CPUC_INTENCLR_FPUIXC_Pos)
  #define CPUC_INTENCLR_FPUIXC_Min (0x0UL)
  #define CPUC_INTENCLR_FPUIXC_Max (0x1UL)
  #define CPUC_INTENCLR_FPUIXC_Clear (0x1UL)
  #define CPUC_INTENCLR_FPUIXC_Disabled (0x0UL)
  #define CPUC_INTENCLR_FPUIXC_Enabled (0x1UL)

/* FPUIDC @Bit 5 : Write '1' to disable interrupt for event FPUIDC */
  #define CPUC_INTENCLR_FPUIDC_Pos (5UL)
  #define CPUC_INTENCLR_FPUIDC_Msk (0x1UL << CPUC_INTENCLR_FPUIDC_Pos)
  #define CPUC_INTENCLR_FPUIDC_Min (0x0UL)
  #define CPUC_INTENCLR_FPUIDC_Max (0x1UL)
  #define CPUC_INTENCLR_FPUIDC_Clear (0x1UL)
  #define CPUC_INTENCLR_FPUIDC_Disabled (0x0UL)
  #define CPUC_INTENCLR_FPUIDC_Enabled (0x1UL)


/* CPUC_LOCK: Register to lock the certain parts of the CPU from being modified. */
  #define CPUC_LOCK_ResetValue (0x00000000UL)

/* LOCKVTORAIRCRS @Bit 0 : Locks both the Vector table Offset Register (VTOR) and Application Interrupt and Reset Control
                           Register (AIRCR) for secure mode. */

  #define CPUC_LOCK_LOCKVTORAIRCRS_Pos (0UL)
  #define CPUC_LOCK_LOCKVTORAIRCRS_Msk (0x1UL << CPUC_LOCK_LOCKVTORAIRCRS_Pos)
  #define CPUC_LOCK_LOCKVTORAIRCRS_Min (0x0UL)
  #define CPUC_LOCK_LOCKVTORAIRCRS_Max (0x1UL)
  #define CPUC_LOCK_LOCKVTORAIRCRS_NotLocked (0x0UL)
  #define CPUC_LOCK_LOCKVTORAIRCRS_Locked (0x1UL)

/* LOCKVTORNS @Bit 1 : Locks the Vector table Offset Register (VTOR) for non-secure mode. */
  #define CPUC_LOCK_LOCKVTORNS_Pos (1UL)
  #define CPUC_LOCK_LOCKVTORNS_Msk (0x1UL << CPUC_LOCK_LOCKVTORNS_Pos)
  #define CPUC_LOCK_LOCKVTORNS_Min (0x0UL)
  #define CPUC_LOCK_LOCKVTORNS_Max (0x1UL)
  #define CPUC_LOCK_LOCKVTORNS_NotLocked (0x0UL)
  #define CPUC_LOCK_LOCKVTORNS_Locked (0x1UL)

/* LOCKMPUS @Bit 2 : Locks the Memory Protection Unit (MPU) for secure mode. */
  #define CPUC_LOCK_LOCKMPUS_Pos (2UL)
  #define CPUC_LOCK_LOCKMPUS_Msk (0x1UL << CPUC_LOCK_LOCKMPUS_Pos)
  #define CPUC_LOCK_LOCKMPUS_Min (0x0UL)
  #define CPUC_LOCK_LOCKMPUS_Max (0x1UL)
  #define CPUC_LOCK_LOCKMPUS_NotLocked (0x0UL)
  #define CPUC_LOCK_LOCKMPUS_Locked (0x1UL)

/* LOCKMPUNS @Bit 3 : Locks the Memory Protection Unit (MPU) for non secure mode. */
  #define CPUC_LOCK_LOCKMPUNS_Pos (3UL)
  #define CPUC_LOCK_LOCKMPUNS_Msk (0x1UL << CPUC_LOCK_LOCKMPUNS_Pos)
  #define CPUC_LOCK_LOCKMPUNS_Min (0x0UL)
  #define CPUC_LOCK_LOCKMPUNS_Max (0x1UL)
  #define CPUC_LOCK_LOCKMPUNS_NotLocked (0x0UL)
  #define CPUC_LOCK_LOCKMPUNS_Locked (0x1UL)

/* LOCKSAU @Bit 4 : Locks the Security Attribution Unit (SAU) */
  #define CPUC_LOCK_LOCKSAU_Pos (4UL)
  #define CPUC_LOCK_LOCKSAU_Msk (0x1UL << CPUC_LOCK_LOCKSAU_Pos)
  #define CPUC_LOCK_LOCKSAU_Min (0x0UL)
  #define CPUC_LOCK_LOCKSAU_Max (0x1UL)
  #define CPUC_LOCK_LOCKSAU_NotLocked (0x0UL)
  #define CPUC_LOCK_LOCKSAU_Locked (0x1UL)


/* CPUC_CPUID: The identifier for the CPU in this subsystem. */
  #define CPUC_CPUID_ResetValue (0x00000000UL)

/* CPUID @Bits 0..31 : The CPU identifier. */
  #define CPUC_CPUID_CPUID_Pos (0UL)
  #define CPUC_CPUID_CPUID_Msk (0xFFFFFFFFUL << CPUC_CPUID_CPUID_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          CPUCONF                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ===================================================== Struct CPUCONF ====================================================== */
/**
  * @brief CPU Configuration
  */
  typedef struct {
    __IM uint32_t RESERVED[322];
    __IOM uint32_t CPUSTART;
    __IOM uint32_t CPUWAIT;
  } NRF_CPUCONF_Type;

/* CPUCONF_CPUSTART: Enable for starting the CPU */
  #define CPUCONF_CPUSTART_ResetValue (0x00000000UL)

/* EN @Bit 0 : Enable to start the CPU. */
  #define CPUCONF_CPUSTART_EN_Pos (0UL)
  #define CPUCONF_CPUSTART_EN_Msk (0x1UL << CPUCONF_CPUSTART_EN_Pos)
  #define CPUCONF_CPUSTART_EN_Min (0x0UL)
  #define CPUCONF_CPUSTART_EN_Max (0x1UL)
  #define CPUCONF_CPUSTART_EN_Stopped (0x0UL)
  #define CPUCONF_CPUSTART_EN_Started (0x1UL)


/* CPUCONF_CPUWAIT: Enable for the CPU wait. */
  #define CPUCONF_CPUWAIT_ResetValue (0x00000001UL)

/* EN @Bit 0 : Enable to the CPU wait. */
  #define CPUCONF_CPUWAIT_EN_Pos (0UL)
  #define CPUCONF_CPUWAIT_EN_Msk (0x1UL << CPUCONF_CPUWAIT_EN_Pos)
  #define CPUCONF_CPUWAIT_EN_Min (0x0UL)
  #define CPUCONF_CPUWAIT_EN_Max (0x1UL)
  #define CPUCONF_CPUWAIT_EN_Disabled (0x0UL)
  #define CPUCONF_CPUWAIT_EN_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          CRACEN                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct CRACEN ====================================================== */
/**
  * @brief CRACEN
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_CRYPTOMASTER;              /*!< (@ 0x00000100) Event indicating that interrupt triggered at
                                                                         Cryptomaster*/
    __IOM uint32_t EVENTS_RNG;
    __IOM uint32_t EVENTS_PKEIKG;                    /*!< (@ 0x00000108) Event indicating that interrupt triggered at PKE or
                                                                         IKG*/
    __IM uint32_t RESERVED1[125];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED2[60];
    __IOM uint32_t ENABLE;
    __IOM uint32_t SEEDVALID;
    __IM uint32_t RESERVED3[2];
    __OM uint32_t SEED[12];                          /*!< (@ 0x00000410) Seed word [n] for symmetric and asymmetric key
                                                                         generation. This register is only writable from KMU.*/
    __IOM uint32_t SEEDLOCK;
    __IOM uint32_t PROTECTEDRAMLOCK;
  } NRF_CRACEN_Type;

/* CRACEN_EVENTS_CRYPTOMASTER: Event indicating that interrupt triggered at Cryptomaster */
  #define CRACEN_EVENTS_CRYPTOMASTER_ResetValue (0x00000000UL)

/* EVENTS_CRYPTOMASTER @Bit 0 : Event indicating that interrupt triggered at Cryptomaster */
  #define CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_Pos (0UL)
  #define CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_Msk (0x1UL << CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_Pos) /*!<
                                                                            Bit mask of EVENTS_CRYPTOMASTER field.*/
  #define CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_Min (0x0UL)
  #define CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_Max (0x1UL)
  #define CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_NotGenerated (0x0UL)
  #define CRACEN_EVENTS_CRYPTOMASTER_EVENTS_CRYPTOMASTER_Generated (0x1UL)


/* CRACEN_EVENTS_RNG: Event indicating that interrupt triggered at RNG */
  #define CRACEN_EVENTS_RNG_ResetValue (0x00000000UL)

/* EVENTS_RNG @Bit 0 : Event indicating that interrupt triggered at RNG */
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Pos (0UL)
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Msk (0x1UL << CRACEN_EVENTS_RNG_EVENTS_RNG_Pos)
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Min (0x0UL)
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Max (0x1UL)
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_NotGenerated (0x0UL)
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Generated (0x1UL)


/* CRACEN_EVENTS_PKEIKG: Event indicating that interrupt triggered at PKE or IKG */
  #define CRACEN_EVENTS_PKEIKG_ResetValue (0x00000000UL)

/* EVENTS_PKEIKG @Bit 0 : Event indicating that interrupt triggered at PKE or IKG */
  #define CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_Pos (0UL)
  #define CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_Msk (0x1UL << CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_Pos) /*!< Bit mask of
                                                                            EVENTS_PKEIKG field.*/
  #define CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_Min (0x0UL)
  #define CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_Max (0x1UL)
  #define CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_NotGenerated (0x0UL)
  #define CRACEN_EVENTS_PKEIKG_EVENTS_PKEIKG_Generated (0x1UL)


/* CRACEN_INTEN: Enable or disable interrupt */
  #define CRACEN_INTEN_ResetValue (0x00000000UL)

/* CRYPTOMASTER @Bit 0 : Enable or disable interrupt for event CRYPTOMASTER */
  #define CRACEN_INTEN_CRYPTOMASTER_Pos (0UL)
  #define CRACEN_INTEN_CRYPTOMASTER_Msk (0x1UL << CRACEN_INTEN_CRYPTOMASTER_Pos)
  #define CRACEN_INTEN_CRYPTOMASTER_Min (0x0UL)
  #define CRACEN_INTEN_CRYPTOMASTER_Max (0x1UL)
  #define CRACEN_INTEN_CRYPTOMASTER_Disabled (0x0UL)
  #define CRACEN_INTEN_CRYPTOMASTER_Enabled (0x1UL)

/* RNG @Bit 1 : Enable or disable interrupt for event RNG */
  #define CRACEN_INTEN_RNG_Pos (1UL)
  #define CRACEN_INTEN_RNG_Msk (0x1UL << CRACEN_INTEN_RNG_Pos)
  #define CRACEN_INTEN_RNG_Min (0x0UL)
  #define CRACEN_INTEN_RNG_Max (0x1UL)
  #define CRACEN_INTEN_RNG_Disabled (0x0UL)
  #define CRACEN_INTEN_RNG_Enabled (0x1UL)

/* PKEIKG @Bit 2 : Enable or disable interrupt for event PKEIKG */
  #define CRACEN_INTEN_PKEIKG_Pos (2UL)
  #define CRACEN_INTEN_PKEIKG_Msk (0x1UL << CRACEN_INTEN_PKEIKG_Pos)
  #define CRACEN_INTEN_PKEIKG_Min (0x0UL)
  #define CRACEN_INTEN_PKEIKG_Max (0x1UL)
  #define CRACEN_INTEN_PKEIKG_Disabled (0x0UL)
  #define CRACEN_INTEN_PKEIKG_Enabled (0x1UL)


/* CRACEN_INTENSET: Enable interrupt */
  #define CRACEN_INTENSET_ResetValue (0x00000000UL)

/* CRYPTOMASTER @Bit 0 : Write '1' to enable interrupt for event CRYPTOMASTER */
  #define CRACEN_INTENSET_CRYPTOMASTER_Pos (0UL)
  #define CRACEN_INTENSET_CRYPTOMASTER_Msk (0x1UL << CRACEN_INTENSET_CRYPTOMASTER_Pos)
  #define CRACEN_INTENSET_CRYPTOMASTER_Min (0x0UL)
  #define CRACEN_INTENSET_CRYPTOMASTER_Max (0x1UL)
  #define CRACEN_INTENSET_CRYPTOMASTER_Set (0x1UL)
  #define CRACEN_INTENSET_CRYPTOMASTER_Disabled (0x0UL)
  #define CRACEN_INTENSET_CRYPTOMASTER_Enabled (0x1UL)

/* RNG @Bit 1 : Write '1' to enable interrupt for event RNG */
  #define CRACEN_INTENSET_RNG_Pos (1UL)
  #define CRACEN_INTENSET_RNG_Msk (0x1UL << CRACEN_INTENSET_RNG_Pos)
  #define CRACEN_INTENSET_RNG_Min (0x0UL)
  #define CRACEN_INTENSET_RNG_Max (0x1UL)
  #define CRACEN_INTENSET_RNG_Set (0x1UL)
  #define CRACEN_INTENSET_RNG_Disabled (0x0UL)
  #define CRACEN_INTENSET_RNG_Enabled (0x1UL)

/* PKEIKG @Bit 2 : Write '1' to enable interrupt for event PKEIKG */
  #define CRACEN_INTENSET_PKEIKG_Pos (2UL)
  #define CRACEN_INTENSET_PKEIKG_Msk (0x1UL << CRACEN_INTENSET_PKEIKG_Pos)
  #define CRACEN_INTENSET_PKEIKG_Min (0x0UL)
  #define CRACEN_INTENSET_PKEIKG_Max (0x1UL)
  #define CRACEN_INTENSET_PKEIKG_Set (0x1UL)
  #define CRACEN_INTENSET_PKEIKG_Disabled (0x0UL)
  #define CRACEN_INTENSET_PKEIKG_Enabled (0x1UL)


/* CRACEN_INTENCLR: Disable interrupt */
  #define CRACEN_INTENCLR_ResetValue (0x00000000UL)

/* CRYPTOMASTER @Bit 0 : Write '1' to disable interrupt for event CRYPTOMASTER */
  #define CRACEN_INTENCLR_CRYPTOMASTER_Pos (0UL)
  #define CRACEN_INTENCLR_CRYPTOMASTER_Msk (0x1UL << CRACEN_INTENCLR_CRYPTOMASTER_Pos)
  #define CRACEN_INTENCLR_CRYPTOMASTER_Min (0x0UL)
  #define CRACEN_INTENCLR_CRYPTOMASTER_Max (0x1UL)
  #define CRACEN_INTENCLR_CRYPTOMASTER_Clear (0x1UL)
  #define CRACEN_INTENCLR_CRYPTOMASTER_Disabled (0x0UL)
  #define CRACEN_INTENCLR_CRYPTOMASTER_Enabled (0x1UL)

/* RNG @Bit 1 : Write '1' to disable interrupt for event RNG */
  #define CRACEN_INTENCLR_RNG_Pos (1UL)
  #define CRACEN_INTENCLR_RNG_Msk (0x1UL << CRACEN_INTENCLR_RNG_Pos)
  #define CRACEN_INTENCLR_RNG_Min (0x0UL)
  #define CRACEN_INTENCLR_RNG_Max (0x1UL)
  #define CRACEN_INTENCLR_RNG_Clear (0x1UL)
  #define CRACEN_INTENCLR_RNG_Disabled (0x0UL)
  #define CRACEN_INTENCLR_RNG_Enabled (0x1UL)

/* PKEIKG @Bit 2 : Write '1' to disable interrupt for event PKEIKG */
  #define CRACEN_INTENCLR_PKEIKG_Pos (2UL)
  #define CRACEN_INTENCLR_PKEIKG_Msk (0x1UL << CRACEN_INTENCLR_PKEIKG_Pos)
  #define CRACEN_INTENCLR_PKEIKG_Min (0x0UL)
  #define CRACEN_INTENCLR_PKEIKG_Max (0x1UL)
  #define CRACEN_INTENCLR_PKEIKG_Clear (0x1UL)
  #define CRACEN_INTENCLR_PKEIKG_Disabled (0x0UL)
  #define CRACEN_INTENCLR_PKEIKG_Enabled (0x1UL)


/* CRACEN_INTPEND: Pending interrupts */
  #define CRACEN_INTPEND_ResetValue (0x00000000UL)

/* CRYPTOMASTER @Bit 0 : Read pending status of interrupt for event CRYPTOMASTER */
  #define CRACEN_INTPEND_CRYPTOMASTER_Pos (0UL)
  #define CRACEN_INTPEND_CRYPTOMASTER_Msk (0x1UL << CRACEN_INTPEND_CRYPTOMASTER_Pos)
  #define CRACEN_INTPEND_CRYPTOMASTER_Min (0x0UL)
  #define CRACEN_INTPEND_CRYPTOMASTER_Max (0x1UL)
  #define CRACEN_INTPEND_CRYPTOMASTER_NotPending (0x0UL)
  #define CRACEN_INTPEND_CRYPTOMASTER_Pending (0x1UL)

/* RNG @Bit 1 : Read pending status of interrupt for event RNG */
  #define CRACEN_INTPEND_RNG_Pos (1UL)
  #define CRACEN_INTPEND_RNG_Msk (0x1UL << CRACEN_INTPEND_RNG_Pos)
  #define CRACEN_INTPEND_RNG_Min (0x0UL)
  #define CRACEN_INTPEND_RNG_Max (0x1UL)
  #define CRACEN_INTPEND_RNG_NotPending (0x0UL)
  #define CRACEN_INTPEND_RNG_Pending (0x1UL)

/* PKEIKG @Bit 2 : Read pending status of interrupt for event PKEIKG */
  #define CRACEN_INTPEND_PKEIKG_Pos (2UL)
  #define CRACEN_INTPEND_PKEIKG_Msk (0x1UL << CRACEN_INTPEND_PKEIKG_Pos)
  #define CRACEN_INTPEND_PKEIKG_Min (0x0UL)
  #define CRACEN_INTPEND_PKEIKG_Max (0x1UL)
  #define CRACEN_INTPEND_PKEIKG_NotPending (0x0UL)
  #define CRACEN_INTPEND_PKEIKG_Pending (0x1UL)


/* CRACEN_ENABLE: Enable CRACEN peripheral modules. */
  #define CRACEN_ENABLE_ResetValue (0x00000000UL)

/* CRYPTOMASTER @Bit 0 : Enable cryptomaster */
  #define CRACEN_ENABLE_CRYPTOMASTER_Pos (0UL)
  #define CRACEN_ENABLE_CRYPTOMASTER_Msk (0x1UL << CRACEN_ENABLE_CRYPTOMASTER_Pos)
  #define CRACEN_ENABLE_CRYPTOMASTER_Min (0x0UL)
  #define CRACEN_ENABLE_CRYPTOMASTER_Max (0x1UL)
  #define CRACEN_ENABLE_CRYPTOMASTER_Disabled (0x0UL)
  #define CRACEN_ENABLE_CRYPTOMASTER_Enabled (0x1UL)

/* RNG @Bit 1 : Enable RNG */
  #define CRACEN_ENABLE_RNG_Pos (1UL)
  #define CRACEN_ENABLE_RNG_Msk (0x1UL << CRACEN_ENABLE_RNG_Pos)
  #define CRACEN_ENABLE_RNG_Min (0x0UL)
  #define CRACEN_ENABLE_RNG_Max (0x1UL)
  #define CRACEN_ENABLE_RNG_Disabled (0x0UL)
  #define CRACEN_ENABLE_RNG_Enabled (0x1UL)

/* PKEIKG @Bit 2 : Enable PKE and IKG */
  #define CRACEN_ENABLE_PKEIKG_Pos (2UL)
  #define CRACEN_ENABLE_PKEIKG_Msk (0x1UL << CRACEN_ENABLE_PKEIKG_Pos)
  #define CRACEN_ENABLE_PKEIKG_Min (0x0UL)
  #define CRACEN_ENABLE_PKEIKG_Max (0x1UL)
  #define CRACEN_ENABLE_PKEIKG_Disabled (0x0UL)
  #define CRACEN_ENABLE_PKEIKG_Enabled (0x1UL)


/* CRACEN_SEEDVALID: Marks the SEED register as valid */
  #define CRACEN_SEEDVALID_ResetValue (0x00000000UL)

/* VALID @Bit 0 : Marks the SEED as valid */
  #define CRACEN_SEEDVALID_VALID_Pos (0UL)
  #define CRACEN_SEEDVALID_VALID_Msk (0x1UL << CRACEN_SEEDVALID_VALID_Pos)
  #define CRACEN_SEEDVALID_VALID_Min (0x0UL)
  #define CRACEN_SEEDVALID_VALID_Max (0x1UL)
  #define CRACEN_SEEDVALID_VALID_Disabled (0x0UL)
  #define CRACEN_SEEDVALID_VALID_Enabled (0x1UL)


/* CRACEN_SEED: Seed word [n] for symmetric and asymmetric key generation. This register is only writable from KMU. */
  #define CRACEN_SEED_MaxCount (12UL)
  #define CRACEN_SEED_MaxIndex (11UL)
  #define CRACEN_SEED_MinIndex (0UL)
  #define CRACEN_SEED_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Seed value */
  #define CRACEN_SEED_VAL_Pos (0UL)
  #define CRACEN_SEED_VAL_Msk (0xFFFFFFFFUL << CRACEN_SEED_VAL_Pos)


/* CRACEN_SEEDLOCK: Lock the access to the SEED register. */
  #define CRACEN_SEEDLOCK_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable the lock */
  #define CRACEN_SEEDLOCK_ENABLE_Pos (0UL)
  #define CRACEN_SEEDLOCK_ENABLE_Msk (0x1UL << CRACEN_SEEDLOCK_ENABLE_Pos)
  #define CRACEN_SEEDLOCK_ENABLE_Min (0x0UL)
  #define CRACEN_SEEDLOCK_ENABLE_Max (0x1UL)
  #define CRACEN_SEEDLOCK_ENABLE_Disabled (0x0UL)
  #define CRACEN_SEEDLOCK_ENABLE_Enabled (0x1UL)


/* CRACEN_PROTECTEDRAMLOCK: Lock the access to the protected RAM. */
  #define CRACEN_PROTECTEDRAMLOCK_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable the lock */
  #define CRACEN_PROTECTEDRAMLOCK_ENABLE_Pos (0UL)
  #define CRACEN_PROTECTEDRAMLOCK_ENABLE_Msk (0x1UL << CRACEN_PROTECTEDRAMLOCK_ENABLE_Pos)
  #define CRACEN_PROTECTEDRAMLOCK_ENABLE_Min (0x0UL)
  #define CRACEN_PROTECTEDRAMLOCK_ENABLE_Max (0x1UL)
  #define CRACEN_PROTECTEDRAMLOCK_ENABLE_Disabled (0x0UL)
  #define CRACEN_PROTECTEDRAMLOCK_ENABLE_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                        CRACENCORE                                        ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ============================================= Struct CRACENCORE_CRYPTMSTRDMA ============================================== */
/**
  * @brief CRYPTMSTRDMA [CRACENCORE_CRYPTMSTRDMA] (unspecified)
  */
typedef struct {
  __IOM uint32_t  FETCHADDRLSB;
  __IOM uint32_t  FETCHADDRMSB;
  __IOM uint32_t  FETCHLEN;
  __IOM uint32_t  FETCHTAG;
  __IOM uint32_t  PUSHADDRLSB;
  __IOM uint32_t  PUSHADDRMSB;
  __IOM uint32_t  PUSHLEN;
  __IOM uint32_t  INTEN;
  __IOM uint32_t  INTENSET;
  __IOM uint32_t  INTENCLR;
  __IOM uint32_t  INTSTATRAW;
  __IOM uint32_t  INTSTAT;
  __IOM uint32_t  INTSTATCLR;
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  START;
  __IOM uint32_t  STATUS;
} NRF_CRACENCORE_CRYPTMSTRDMA_Type;

/* CRACENCORE_CRYPTMSTRDMA_FETCHADDRLSB: Fetch Address Least Significant Bit */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHADDRLSB_ResetValue (0x00000000UL)

/* FETCHADDRLSB @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHADDRLSB_FETCHADDRLSB_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHADDRLSB_FETCHADDRLSB_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_FETCHADDRLSB_FETCHADDRLSB_Pos)
                                                                            /*!< Bit mask of FETCHADDRLSB field.*/


/* CRACENCORE_CRYPTMSTRDMA_FETCHADDRMSB: Fetch Address Most Significant Bit */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHADDRMSB_ResetValue (0x00000000UL)

/* FETCHADDRMSB @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHADDRMSB_FETCHADDRMSB_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHADDRMSB_FETCHADDRMSB_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_FETCHADDRMSB_FETCHADDRMSB_Pos)
                                                                            /*!< Bit mask of FETCHADDRMSB field.*/


/* CRACENCORE_CRYPTMSTRDMA_FETCHLEN: Fetch Length */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_ResetValue (0x00000000UL)

/* FETCHLEN @Bits 0..27 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHLEN_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHLEN_Msk (0xFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHLEN_Pos) /*!< Bit
                                                                            mask of FETCHLEN field.*/

/* FETCHCSTADDR @Bit 28 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHCSTADDR_Pos (28UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHCSTADDR_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHCSTADDR_Pos) /*!<
                                                                            Bit mask of FETCHCSTADDR field.*/

/* FETCHREALIGN @Bit 29 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHREALIGN_Pos (29UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHREALIGN_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHREALIGN_Pos) /*!<
                                                                            Bit mask of FETCHREALIGN field.*/

/* FETCHZPADDING @Bit 30 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHZPADDING_Pos (30UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHZPADDING_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_FETCHLEN_FETCHZPADDING_Pos) /*!<
                                                                            Bit mask of FETCHZPADDING field.*/


/* CRACENCORE_CRYPTMSTRDMA_FETCHTAG: Fetch Tag */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHTAG_ResetValue (0x00000000UL)

/* FETCHTAG @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_FETCHTAG_FETCHTAG_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_FETCHTAG_FETCHTAG_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_FETCHTAG_FETCHTAG_Pos) /*!< Bit
                                                                            mask of FETCHTAG field.*/


/* CRACENCORE_CRYPTMSTRDMA_PUSHADDRLSB: Push Address Least Significant Bit */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHADDRLSB_ResetValue (0x00000000UL)

/* PUSHADDRLSB @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHADDRLSB_PUSHADDRLSB_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_PUSHADDRLSB_PUSHADDRLSB_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_PUSHADDRLSB_PUSHADDRLSB_Pos)
                                                                            /*!< Bit mask of PUSHADDRLSB field.*/


/* CRACENCORE_CRYPTMSTRDMA_PUSHADDRMSB: Push Address Most Significant Bit */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHADDRMSB_ResetValue (0x00000000UL)

/* PUSHADDRMSB @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHADDRMSB_PUSHADDRMSB_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_PUSHADDRMSB_PUSHADDRMSB_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_PUSHADDRMSB_PUSHADDRMSB_Pos)
                                                                            /*!< Bit mask of PUSHADDRMSB field.*/


/* CRACENCORE_CRYPTMSTRDMA_PUSHLEN: Push Length */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_ResetValue (0x00000000UL)

/* PUSHLEN @Bits 0..27 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHLEN_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHLEN_Msk (0xFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHLEN_Pos) /*!< Bit mask
                                                                            of PUSHLEN field.*/

/* PUSHCSTADDR @Bit 28 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHCSTADDR_Pos (28UL)
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHCSTADDR_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHCSTADDR_Pos) /*!< Bit
                                                                            mask of PUSHCSTADDR field.*/

/* PUSHREALIGN @Bit 29 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHREALIGN_Pos (29UL)
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHREALIGN_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHREALIGN_Pos) /*!< Bit
                                                                            mask of PUSHREALIGN field.*/

/* PUSHDISCARD @Bit 30 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHDISCARD_Pos (30UL)
  #define CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHDISCARD_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_PUSHLEN_PUSHDISCARD_Pos) /*!< Bit
                                                                            mask of PUSHDISCARD field.*/


/* CRACENCORE_CRYPTMSTRDMA_INTEN: Interrupt Enable */
  #define CRACENCORE_CRYPTMSTRDMA_INTEN_ResetValue (0x00000000UL)

/* INTEN @Bits 0..5 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_INTEN_INTEN_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_INTEN_INTEN_Msk (0x3FUL << CRACENCORE_CRYPTMSTRDMA_INTEN_INTEN_Pos) /*!< Bit mask of INTEN
                                                                            field.*/


/* CRACENCORE_CRYPTMSTRDMA_INTENSET: Interrupt Set */
  #define CRACENCORE_CRYPTMSTRDMA_INTENSET_ResetValue (0x00000000UL)

/* INTENSET @Bits 0..5 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_INTENSET_INTENSET_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_INTENSET_INTENSET_Msk (0x3FUL << CRACENCORE_CRYPTMSTRDMA_INTENSET_INTENSET_Pos) /*!< Bit mask
                                                                            of INTENSET field.*/


/* CRACENCORE_CRYPTMSTRDMA_INTENCLR: Interrupt Clear */
  #define CRACENCORE_CRYPTMSTRDMA_INTENCLR_ResetValue (0x00000000UL)

/* INTENCLR @Bits 0..5 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_INTENCLR_INTENCLR_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_INTENCLR_INTENCLR_Msk (0x3FUL << CRACENCORE_CRYPTMSTRDMA_INTENCLR_INTENCLR_Pos) /*!< Bit mask
                                                                            of INTENCLR field.*/


/* CRACENCORE_CRYPTMSTRDMA_INTSTATRAW: Interrupt Status Raw */
  #define CRACENCORE_CRYPTMSTRDMA_INTSTATRAW_ResetValue (0x00000000UL)

/* INTSTATRAW @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_INTSTATRAW_INTSTATRAW_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_INTSTATRAW_INTSTATRAW_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_INTSTATRAW_INTSTATRAW_Pos)
                                                                            /*!< Bit mask of INTSTATRAW field.*/


/* CRACENCORE_CRYPTMSTRDMA_INTSTAT: Interrupt Status */
  #define CRACENCORE_CRYPTMSTRDMA_INTSTAT_ResetValue (0x00000000UL)

/* INTSTAT @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_INTSTAT_INTSTAT_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_INTSTAT_INTSTAT_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_INTSTAT_INTSTAT_Pos) /*!< Bit
                                                                            mask of INTSTAT field.*/


/* CRACENCORE_CRYPTMSTRDMA_INTSTATCLR: Interrupt Status Clear */
  #define CRACENCORE_CRYPTMSTRDMA_INTSTATCLR_ResetValue (0x00000000UL)

/* INTSTATCLR @Bits 0..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_INTSTATCLR_INTSTATCLR_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_INTSTATCLR_INTSTATCLR_Msk (0xFFFFFFFFUL << CRACENCORE_CRYPTMSTRDMA_INTSTATCLR_INTSTATCLR_Pos)
                                                                            /*!< Bit mask of INTSTATCLR field.*/


/* CRACENCORE_CRYPTMSTRDMA_CONFIG: Configuration */
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_ResetValue (0x00000000UL)

/* FETCHCTRLINDIRECT @Bit 0 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_FETCHCTRLINDIRECT_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_FETCHCTRLINDIRECT_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_CONFIG_FETCHCTRLINDIRECT_Pos)
                                                                            /*!< Bit mask of FETCHCTRLINDIRECT field.*/

/* PUSHCTRLINDIRECT @Bit 1 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_PUSHCTRLINDIRECT_Pos (1UL)
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_PUSHCTRLINDIRECT_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_CONFIG_PUSHCTRLINDIRECT_Pos)
                                                                            /*!< Bit mask of PUSHCTRLINDIRECT field.*/

/* FETCHSTOP @Bit 2 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_FETCHSTOP_Pos (2UL)
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_FETCHSTOP_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_CONFIG_FETCHSTOP_Pos) /*!< Bit mask of
                                                                            FETCHSTOP field.*/

/* PUSHSTOP @Bit 3 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_PUSHSTOP_Pos (3UL)
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_PUSHSTOP_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_CONFIG_PUSHSTOP_Pos) /*!< Bit mask of
                                                                            PUSHSTOP field.*/

/* SOFTRST @Bit 4 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_SOFTRST_Pos (4UL)
  #define CRACENCORE_CRYPTMSTRDMA_CONFIG_SOFTRST_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_CONFIG_SOFTRST_Pos) /*!< Bit mask of
                                                                            SOFTRST field.*/


/* CRACENCORE_CRYPTMSTRDMA_START: Start */
  #define CRACENCORE_CRYPTMSTRDMA_START_ResetValue (0x00000000UL)

/* STARTFETCH @Bit 0 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_START_STARTFETCH_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_START_STARTFETCH_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_START_STARTFETCH_Pos) /*!< Bit mask of
                                                                            STARTFETCH field.*/

/* STARTPUSH @Bit 1 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_START_STARTPUSH_Pos (1UL)
  #define CRACENCORE_CRYPTMSTRDMA_START_STARTPUSH_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_START_STARTPUSH_Pos) /*!< Bit mask of
                                                                            STARTPUSH field.*/


/* CRACENCORE_CRYPTMSTRDMA_STATUS: Status */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_ResetValue (0x00000000UL)

/* FETCHBUSY @Bit 0 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_FETCHBUSY_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_FETCHBUSY_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_STATUS_FETCHBUSY_Pos) /*!< Bit mask of
                                                                            FETCHBUSY field.*/

/* PUSHBUSY @Bit 1 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHBUSY_Pos (1UL)
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHBUSY_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHBUSY_Pos) /*!< Bit mask of
                                                                            PUSHBUSY field.*/

/* FETCHNOTEMPTY @Bit 4 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_FETCHNOTEMPTY_Pos (4UL)
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_FETCHNOTEMPTY_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_STATUS_FETCHNOTEMPTY_Pos) /*!< Bit
                                                                            mask of FETCHNOTEMPTY field.*/

/* PUSHWAITINGFIFO @Bit 5 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHWAITINGFIFO_Pos (5UL)
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHWAITINGFIFO_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHWAITINGFIFO_Pos) /*!<
                                                                            Bit mask of PUSHWAITINGFIFO field.*/

/* SOFTRSTBUSY @Bit 6 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_SOFTRSTBUSY_Pos (6UL)
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_SOFTRSTBUSY_Msk (0x1UL << CRACENCORE_CRYPTMSTRDMA_STATUS_SOFTRSTBUSY_Pos) /*!< Bit mask
                                                                            of SOFTRSTBUSY field.*/

/* PUSHNBDATA @Bits 16..31 : (unspecified) */
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHNBDATA_Pos (16UL)
  #define CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHNBDATA_Msk (0xFFFFUL << CRACENCORE_CRYPTMSTRDMA_STATUS_PUSHNBDATA_Pos) /*!< Bit
                                                                            mask of PUSHNBDATA field.*/



/* ============================================== Struct CRACENCORE_CRYPTMSTRHW ============================================== */
/**
  * @brief CRYPTMSTRHW [CRACENCORE_CRYPTMSTRHW] (unspecified)
  */
typedef struct {
  __IOM uint32_t  INCLIPSHWCFG;
  __IOM uint32_t  BA411EAESHWCFG1;
  __IOM uint32_t  BA411EAESHWCFG2;
  __IOM uint32_t  BA413HASHHWCFG;
  __IOM uint32_t  BA418SHA3HWCFG;
  __IOM uint32_t  BA419SM4HWCFG;
  __IOM uint32_t  BA424ARIAHWCFG;
} NRF_CRACENCORE_CRYPTMSTRHW_Type;

/* CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG: Incuded IPs Hardware configuration */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_ResetValue (0x00000671UL)

/* BA411AESINCLUDED @Bit 0 : Generic g_IncludeAES value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA411AESINCLUDED_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA411AESINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA411AESINCLUDED_Pos)
                                                                            /*!< Bit mask of BA411AESINCLUDED field.*/

/* BA415HPAESGCMINCLUDED @Bit 1 : Generic g_IncludeAESGCM value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA415HPAESGCMINCLUDED_Pos (1UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA415HPAESGCMINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA415HPAESGCMINCLUDED_Pos)
                                                                            /*!< Bit mask of BA415HPAESGCMINCLUDED field.*/

/* BA416HPAESXTSINCLUDED @Bit 2 : Generic g_IncludeAESXTS value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA416HPAESXTSINCLUDED_Pos (2UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA416HPAESXTSINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA416HPAESXTSINCLUDED_Pos)
                                                                            /*!< Bit mask of BA416HPAESXTSINCLUDED field.*/

/* BA412DESINCLUDED @Bit 3 : Generic g_IncludeDES value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA412DESINCLUDED_Pos (3UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA412DESINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA412DESINCLUDED_Pos)
                                                                            /*!< Bit mask of BA412DESINCLUDED field.*/

/* BA413HASHINCLUDED @Bit 4 : Generic g_IncludeHASH value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA413HASHINCLUDED_Pos (4UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA413HASHINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA413HASHINCLUDED_Pos)
                                                                            /*!< Bit mask of BA413HASHINCLUDED field.*/

/* BA417CHACHAPOLYINCLUDED @Bit 5 : Generic g_IncludeChachaPoly value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA417CHACHAPOLYINCLUDED_Pos (5UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA417CHACHAPOLYINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA417CHACHAPOLYINCLUDED_Pos)
                                                                            /*!< Bit mask of BA417CHACHAPOLYINCLUDED field.*/

/* BA418SHA3INCLUDED @Bit 6 : Generic g_IncludeSHA3 value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA418SHA3INCLUDED_Pos (6UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA418SHA3INCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA418SHA3INCLUDED_Pos)
                                                                            /*!< Bit mask of BA418SHA3INCLUDED field.*/

/* BA421ZUCINCLUDED @Bit 7 : Generic g_IncludeZUC value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA421ZUCINCLUDED_Pos (7UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA421ZUCINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA421ZUCINCLUDED_Pos)
                                                                            /*!< Bit mask of BA421ZUCINCLUDED field.*/

/* BA419SM4INCLUDED @Bit 8 : Generic g_IncludeSM4 value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA419SM4INCLUDED_Pos (8UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA419SM4INCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA419SM4INCLUDED_Pos)
                                                                            /*!< Bit mask of BA419SM4INCLUDED field.*/

/* BA414EPPKEINCLUDED @Bit 9 : Generic g_IncludePKE value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA414EPPKEINCLUDED_Pos (9UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA414EPPKEINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA414EPPKEINCLUDED_Pos)
                                                                            /*!< Bit mask of BA414EPPKEINCLUDED field.*/

/* BA431NDRNGINCLUDED @Bit 10 : Generic g_IncludeNDRNG value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA431NDRNGINCLUDED_Pos (10UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA431NDRNGINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA431NDRNGINCLUDED_Pos)
                                                                            /*!< Bit mask of BA431NDRNGINCLUDED field.*/

/* BA420HPCHACHAPOLYINCLUDED @Bit 11 : Generic g_IncludeHPChachaPoly value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA420HPCHACHAPOLYINCLUDED_Pos (11UL) /*!< Position of BA420HPCHACHAPOLYINCLUDED
                                                                            field.*/
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA420HPCHACHAPOLYINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA420HPCHACHAPOLYINCLUDED_Pos)
                                                                            /*!< Bit mask of BA420HPCHACHAPOLYINCLUDED field.*/

/* BA423SNOW3GINCLUDED @Bit 12 : Generic g_IncludeSnow3G value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA423SNOW3GINCLUDED_Pos (12UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA423SNOW3GINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA423SNOW3GINCLUDED_Pos)
                                                                            /*!< Bit mask of BA423SNOW3GINCLUDED field.*/

/* BA422KASUMIINCLUDED @Bit 13 : Generic g_IncludeKasumi value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA422KASUMIINCLUDED_Pos (13UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA422KASUMIINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA422KASUMIINCLUDED_Pos)
                                                                            /*!< Bit mask of BA422KASUMIINCLUDED field.*/

/* BA422ARIAINCLUDED @Bit 14 : Generic g_IncludeAria value. */
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA422ARIAINCLUDED_Pos (14UL)
  #define CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA422ARIAINCLUDED_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_INCLIPSHWCFG_BA422ARIAINCLUDED_Pos)
                                                                            /*!< Bit mask of BA422ARIAINCLUDED field.*/


/* CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1: Generic g_AesModesPoss value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_ResetValue (0x05020167UL)

/* BA411EAESHWCFGMODE @Bits 0..8 : Generic g_AesModesPoss value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGMODE_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGMODE_Msk (0x1FFUL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGMODE_Pos)
                                                                            /*!< Bit mask of BA411EAESHWCFGMODE field.*/

/* BA411EAESHWCFGCS @Bit 16 : Generic g_CS value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGCS_Pos (16UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGCS_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGCS_Pos)
                                                                            /*!< Bit mask of BA411EAESHWCFGCS field.*/

/* BA411EAESHWCFGMASKING @Bit 17 : Generic g_UseMasking value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGMASKING_Pos (17UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGMASKING_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGMASKING_Pos)
                                                                            /*!< Bit mask of BA411EAESHWCFGMASKING field.*/

/* BA411EAESHWCFGKEYSIZE @Bits 24..26 : Generic g_Keysize value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGKEYSIZE_Pos (24UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGKEYSIZE_Msk (0x7UL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_BA411EAESHWCFGKEYSIZE_Pos)
                                                                            /*!< Bit mask of BA411EAESHWCFGKEYSIZE field.*/

/* CONTEXTEN @Bit 27 : Generic g_CxSwitch value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_CONTEXTEN_Pos (27UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_CONTEXTEN_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_CONTEXTEN_Pos)
                                                                            /*!< Bit mask of CONTEXTEN field.*/

/* GLITCHPROT @Bit 28 : Generic g_GlitchProtection value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_GLITCHPROT_Pos (28UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_GLITCHPROT_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG1_GLITCHPROT_Pos)
                                                                            /*!< Bit mask of GLITCHPROT field.*/


/* CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2: Generic g_CtrSize value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_ResetValue (0x02000010UL)

/* BA411EAESHWCFG2 @Bits 0..15 : Generic g_CtrSize value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_BA411EAESHWCFG2_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_BA411EAESHWCFG2_Msk (0xFFFFUL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_BA411EAESHWCFG2_Pos)
                                                                            /*!< Bit mask of BA411EAESHWCFG2 field.*/

/* NBEXTAESKEYS @Bits 20..23 : Generic g_Ext_nb_AES_keys value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_NBEXTAESKEYS_Pos (20UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_NBEXTAESKEYS_Msk (0xFUL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_NBEXTAESKEYS_Pos)
                                                                            /*!< Bit mask of NBEXTAESKEYS field.*/

/* NBIKGAESKEYS @Bits 24..27 : Generic g_IKG_nb_AES_keys value. */
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_NBIKGAESKEYS_Pos (24UL)
  #define CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_NBIKGAESKEYS_Msk (0xFUL << CRACENCORE_CRYPTMSTRHW_BA411EAESHWCFG2_NBIKGAESKEYS_Pos)
                                                                            /*!< Bit mask of NBIKGAESKEYS field.*/


/* CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG: Generic g_Hash value */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_ResetValue (0x0001003EUL)

/* BA413HASHHWCFGMASK @Bits 0..6 : Generic g_HashMaskFunc value. */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGMASK_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGMASK_Msk (0x7FUL << CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGMASK_Pos)
                                                                            /*!< Bit mask of BA413HASHHWCFGMASK field.*/

/* BA413HASHHWCFGPADDING @Bit 16 : Generic g_HashPadding value. */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGPADDING_Pos (16UL)
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGPADDING_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGPADDING_Pos)
                                                                            /*!< Bit mask of BA413HASHHWCFGPADDING field.*/

/* BA413HASHHWCFGHMAC @Bit 17 : Generic g_HMAC_enabled value. */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGHMAC_Pos (17UL)
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGHMAC_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGHMAC_Pos)
                                                                            /*!< Bit mask of BA413HASHHWCFGHMAC field.*/

/* BA413HASHHWCFGVERIFYDIGEST @Bit 18 : Generic g_HashVerifyDigest value. */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGVERIFYDIGEST_Pos (18UL) /*!< Position of
                                                                            BA413HASHHWCFGVERIFYDIGEST field.*/
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGVERIFYDIGEST_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_BA413HASHHWCFGVERIFYDIGEST_Pos)
                                                                            /*!< Bit mask of BA413HASHHWCFGVERIFYDIGEST field.*/

/* NBEXTHASHKEYS @Bits 20..23 : Generic g_Ext_nb_Hash_keys value. */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_NBEXTHASHKEYS_Pos (20UL)
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_NBEXTHASHKEYS_Msk (0xFUL << CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_NBEXTHASHKEYS_Pos)
                                                                            /*!< Bit mask of NBEXTHASHKEYS field.*/

/* NBIKGHASHKEYS @Bits 24..27 : Generic g_IKG_nb_Hash_keys value. */
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_NBIKGHASHKEYS_Pos (24UL)
  #define CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_NBIKGHASHKEYS_Msk (0xFUL << CRACENCORE_CRYPTMSTRHW_BA413HASHHWCFG_NBIKGHASHKEYS_Pos)
                                                                            /*!< Bit mask of NBIKGHASHKEYS field.*/


/* CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG: Generic g_Sha3CtxtEn value. */
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_ResetValue (0x00000001UL)

/* BA418SHA3HWCFG @Bit 0 : Generic g_Sha3CtxtEn value. */
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_BA418SHA3HWCFG_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_BA418SHA3HWCFG_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_BA418SHA3HWCFG_Pos)
                                                                            /*!< Bit mask of BA418SHA3HWCFG field.*/

/* HMAC @Bit 17 : HMAC enabled. */
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_HMAC_Pos (17UL)
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_HMAC_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_HMAC_Pos) /*!< Bit mask
                                                                            of HMAC field.*/

/* VERIFYDIGEST @Bit 18 : Support to digest verification. */
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_VERIFYDIGEST_Pos (18UL)
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_VERIFYDIGEST_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_VERIFYDIGEST_Pos)
                                                                            /*!< Bit mask of VERIFYDIGEST field.*/

/* NBEXTHASHKEYS @Bits 20..23 : Number of SHA3 HW keys. */
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_NBEXTHASHKEYS_Pos (20UL)
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_NBEXTHASHKEYS_Msk (0xFUL << CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_NBEXTHASHKEYS_Pos)
                                                                            /*!< Bit mask of NBEXTHASHKEYS field.*/

/* NBIKGHASHKEYS @Bits 24..27 : Number of SHA3 IKG keys. */
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_NBIKGHASHKEYS_Pos (24UL)
  #define CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_NBIKGHASHKEYS_Msk (0xFUL << CRACENCORE_CRYPTMSTRHW_BA418SHA3HWCFG_NBIKGHASHKEYS_Pos)
                                                                            /*!< Bit mask of NBIKGHASHKEYS field.*/


/* CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG: Generic g_SM4ModesPoss value. */
  #define CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_ResetValue (0x00000000UL)

/* BA419SM4HWCFG @Bits 0..8 : Generic g_SM4ModesPoss value. */
  #define CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_BA419SM4HWCFG_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_BA419SM4HWCFG_Msk (0x1FFUL << CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_BA419SM4HWCFG_Pos)
                                                                            /*!< Bit mask of BA419SM4HWCFG field.*/

/* USEMASKING @Bit 17 : Generic g_sm4UseMasking value. */
  #define CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_USEMASKING_Pos (17UL)
  #define CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_USEMASKING_Msk (0x1UL << CRACENCORE_CRYPTMSTRHW_BA419SM4HWCFG_USEMASKING_Pos)
                                                                            /*!< Bit mask of USEMASKING field.*/


/* CRACENCORE_CRYPTMSTRHW_BA424ARIAHWCFG: Generic g_aria_modePoss value. */
  #define CRACENCORE_CRYPTMSTRHW_BA424ARIAHWCFG_ResetValue (0x00000000UL)

/* BA424ARIAHWCFG @Bits 0..8 : Generic g_aria_modePoss value. */
  #define CRACENCORE_CRYPTMSTRHW_BA424ARIAHWCFG_BA424ARIAHWCFG_Pos (0UL)
  #define CRACENCORE_CRYPTMSTRHW_BA424ARIAHWCFG_BA424ARIAHWCFG_Msk (0x1FFUL << CRACENCORE_CRYPTMSTRHW_BA424ARIAHWCFG_BA424ARIAHWCFG_Pos)
                                                                            /*!< Bit mask of BA424ARIAHWCFG field.*/



/* ============================================== Struct CRACENCORE_RNGCONTROL =============================================== */
/**
  * @brief RNGCONTROL [CRACENCORE_RNGCONTROL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CONTROL;
  __IOM uint32_t  FIFOLEVEL;
  __IOM uint32_t  FIFOTHRESHOLD;
  __IOM uint32_t  FIFODEPTH;
  __IOM uint32_t  KEY[4];
  __IOM uint32_t  TESTDATA;
  __IOM uint32_t  REPEATTHRESHOLD;
  __IOM uint32_t  PROPTESTCUTOFF;
  __IOM uint32_t  LFSRSEED;
  __IOM uint32_t  STATUS;
  __IOM uint32_t  WARMUPPERIOD;
  __IOM uint32_t  DISABLEOSC;
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  SAMPLINGPERIOD;
  __IM  uint32_t  RESERVED1[4];
  __IOM uint32_t  HWCONFIG;
  __IOM uint32_t  COOLDOWNPERIOD;
  __IOM uint32_t  AUTOCORRTESTCUTOFF0;
  __IOM uint32_t  AUTOCORRTESTCUTOFF1;
  __IOM uint32_t  CORRTESTCUTOFF0;
  __IOM uint32_t  CORRTESTCUTOFF1;
  __IOM uint32_t  AUTOCORRTESTFAILED;
  __IOM uint32_t  CORRTESTFAILED;
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  HWVERSION;
} NRF_CRACENCORE_RNGCONTROL_Type;

/* CRACENCORE_RNGCONTROL_CONTROL: Control register */
  #define CRACENCORE_RNGCONTROL_CONTROL_ResetValue (0x00040000UL)

/* ENABLE @Bit 0 : Start/enable the NDRNG. */
  #define CRACENCORE_RNGCONTROL_CONTROL_ENABLE_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_ENABLE_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_ENABLE_Pos) /*!< Bit mask of ENABLE
                                                                            field.*/

/* LFSREN @Bit 1 : Select between the NDRNG with asynchronous free running oscillators (when 0) and the Pseudo-Random generator
                   with synchronous oscillators for simulation purpose (when 1). */

  #define CRACENCORE_RNGCONTROL_CONTROL_LFSREN_Pos (1UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_LFSREN_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_LFSREN_Pos) /*!< Bit mask of LFSREN
                                                                            field.*/

/* TESTEN @Bit 2 : Select input for conditioning function and continuous tests: */
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Pos (2UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Pos) /*!< Bit mask of TESTEN
                                                                            field.*/
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Min (0x0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Max (0x1UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_NORMAL (0x0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_TEST (0x1UL)

/* CONDBYPASS @Bit 3 : Conditioning function bypass. */
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Pos (3UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Pos) /*!< Bit mask of
                                                                            CONDBYPASS field.*/
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Min (0x0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Max (0x1UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_NORMAL (0x0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_BYPASS (0x1UL) /*!< the conditioning function is bypassed (to observe entropy
                                                                       source directly).*/

/* INTENREP @Bit 4 : Enable interrupt if any of the health test fails. */
  #define CRACENCORE_RNGCONTROL_CONTROL_INTENREP_Pos (4UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_INTENREP_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_INTENREP_Pos) /*!< Bit mask of
                                                                            INTENREP field.*/

/* INTENFULL @Bit 7 : Enable interrupt if FIFO is full. */
  #define CRACENCORE_RNGCONTROL_CONTROL_INTENFULL_Pos (7UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_INTENFULL_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_INTENFULL_Pos) /*!< Bit mask of
                                                                            INTENFULL field.*/

/* SOFTRST @Bit 8 : Datapath content flush and control FSM */
  #define CRACENCORE_RNGCONTROL_CONTROL_SOFTRST_Pos (8UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_SOFTRST_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_SOFTRST_Pos) /*!< Bit mask of
                                                                            SOFTRST field.*/

/* FORCEACTIVEROS @Bit 11 : Force oscillators to run when FIFO is full. */
  #define CRACENCORE_RNGCONTROL_CONTROL_FORCEACTIVEROS_Pos (11UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_FORCEACTIVEROS_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_FORCEACTIVEROS_Pos) /*!< Bit
                                                                            mask of FORCEACTIVEROS field.*/

/* IGNOREHEALTHTESTSFAILFORFSM @Bit 12 : Results of the health tests during start-up and online test do not affect the control
                                         FSM state. */

  #define CRACENCORE_RNGCONTROL_CONTROL_IGNOREHEALTHTESTSFAILFORFSM_Pos (12UL) /*!< Position of IGNOREHEALTHTESTSFAILFORFSM
                                                                            field.*/
  #define CRACENCORE_RNGCONTROL_CONTROL_IGNOREHEALTHTESTSFAILFORFSM_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_IGNOREHEALTHTESTSFAILFORFSM_Pos)
                                                                            /*!< Bit mask of IGNOREHEALTHTESTSFAILFORFSM field.*/

/* NB128BITBLOCKS @Bits 16..19 : Number of 128 bit blocks used in conditioning (AES-CBC-MAC) post-processing. */
  #define CRACENCORE_RNGCONTROL_CONTROL_NB128BITBLOCKS_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_NB128BITBLOCKS_Msk (0xFUL << CRACENCORE_RNGCONTROL_CONTROL_NB128BITBLOCKS_Pos) /*!< Bit
                                                                            mask of NB128BITBLOCKS field.*/

/* FIFOWRITESTARTUP @Bit 20 : Enable write of the samples in the FIFO during start-up. */
  #define CRACENCORE_RNGCONTROL_CONTROL_FIFOWRITESTARTUP_Pos (20UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_FIFOWRITESTARTUP_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_FIFOWRITESTARTUP_Pos) /*!<
                                                                            Bit mask of FIFOWRITESTARTUP field.*/

/* DISREPETTESTS @Bit 21 : All repetition tests (each share) are disabled via this single bit. */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISREPETTESTS_Pos (21UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_DISREPETTESTS_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_DISREPETTESTS_Pos) /*!< Bit
                                                                            mask of DISREPETTESTS field.*/

/* DISPROPTESTS @Bit 22 : All proportion tests (each share) are disabled via this single bit. */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISPROPTESTS_Pos (22UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_DISPROPTESTS_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_DISPROPTESTS_Pos) /*!< Bit mask
                                                                            of DISPROPTESTS field.*/

/* DISAUTOCORRTESTS @Bits 23..24 : Disable specific delay(s) check in auto-correlation test - same RO: */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISAUTOCORRTESTS_Pos (23UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_DISAUTOCORRTESTS_Msk (0x3UL << CRACENCORE_RNGCONTROL_CONTROL_DISAUTOCORRTESTS_Pos) /*!<
                                                                            Bit mask of DISAUTOCORRTESTS field.*/

/* DISCORRTESTS @Bits 27..29 : Disable specific delay(s) check in correlation test - different ROs: */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISCORRTESTS_Pos (27UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_DISCORRTESTS_Msk (0x7UL << CRACENCORE_RNGCONTROL_CONTROL_DISCORRTESTS_Pos) /*!< Bit mask
                                                                            of DISCORRTESTS field.*/

/* BLENDINGMETHOD @Bits 30..31 : Select blending method */
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Pos (30UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Msk (0x3UL << CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Pos) /*!< Bit
                                                                            mask of BLENDINGMETHOD field.*/
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Min (0x0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Max (0x3UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_CONCATENATION (0x0UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_XORLEVEL1 (0x1UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_XORLEVEL2 (0x2UL)
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_VONNEUMANN (0x3UL)


/* CRACENCORE_RNGCONTROL_FIFOLEVEL: FIFO level register. */
  #define CRACENCORE_RNGCONTROL_FIFOLEVEL_ResetValue (0x00000000UL)

/* FIFOLEVEL @Bits 0..31 : Number of 32 bits words of random values available in the FIFO. */
  #define CRACENCORE_RNGCONTROL_FIFOLEVEL_FIFOLEVEL_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_FIFOLEVEL_FIFOLEVEL_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_FIFOLEVEL_FIFOLEVEL_Pos) /*!< Bit
                                                                            mask of FIFOLEVEL field.*/


/* CRACENCORE_RNGCONTROL_FIFOTHRESHOLD: FIFO threshold register. */
  #define CRACENCORE_RNGCONTROL_FIFOTHRESHOLD_ResetValue (0x00000003UL)

/* FIFOTHRESHOLD @Bits 0..31 : FIFO level below which the module leaves the idle state to refill the FIFO, expressed in number
                               of 128bit blocks. */

  #define CRACENCORE_RNGCONTROL_FIFOTHRESHOLD_FIFOTHRESHOLD_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_FIFOTHRESHOLD_FIFOTHRESHOLD_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_FIFOTHRESHOLD_FIFOTHRESHOLD_Pos)
                                                                            /*!< Bit mask of FIFOTHRESHOLD field.*/


/* CRACENCORE_RNGCONTROL_FIFODEPTH: FIFO depth register. */
  #define CRACENCORE_RNGCONTROL_FIFODEPTH_ResetValue (0x00000010UL)

/* FIFODEPTH @Bits 0..31 : Maximum number of 32 bits words that can be stored in the FIFO. */
  #define CRACENCORE_RNGCONTROL_FIFODEPTH_FIFODEPTH_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_FIFODEPTH_FIFODEPTH_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_FIFODEPTH_FIFODEPTH_Pos) /*!< Bit
                                                                            mask of FIFODEPTH field.*/


/* CRACENCORE_RNGCONTROL_KEY: Key register. */
  #define CRACENCORE_RNGCONTROL_KEY_MaxCount (4UL)
  #define CRACENCORE_RNGCONTROL_KEY_MaxIndex (3UL)
  #define CRACENCORE_RNGCONTROL_KEY_MinIndex (0UL)
  #define CRACENCORE_RNGCONTROL_KEY_ResetValue (0x00000000UL)

/* KEY @Bits 0..31 : Key register. */
  #define CRACENCORE_RNGCONTROL_KEY_KEY_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_KEY_KEY_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_KEY_KEY_Pos)


/* CRACENCORE_RNGCONTROL_TESTDATA: Test data register. */
  #define CRACENCORE_RNGCONTROL_TESTDATA_ResetValue (0x00000000UL)

/* TESTDATA @Bits 0..31 : Test data register. */
  #define CRACENCORE_RNGCONTROL_TESTDATA_TESTDATA_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_TESTDATA_TESTDATA_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_TESTDATA_TESTDATA_Pos) /*!< Bit
                                                                            mask of TESTDATA field.*/


/* CRACENCORE_RNGCONTROL_REPEATTHRESHOLD: Repetition test cut-off register. */
  #define CRACENCORE_RNGCONTROL_REPEATTHRESHOLD_ResetValue (0x00000004UL)

/* REPEATTHRESHOLD @Bits 0..5 : Repetition Test cut-off value. */
  #define CRACENCORE_RNGCONTROL_REPEATTHRESHOLD_REPEATTHRESHOLD_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_REPEATTHRESHOLD_REPEATTHRESHOLD_Msk (0x3FUL << CRACENCORE_RNGCONTROL_REPEATTHRESHOLD_REPEATTHRESHOLD_Pos)
                                                                            /*!< Bit mask of REPEATTHRESHOLD field.*/


/* CRACENCORE_RNGCONTROL_PROPTESTCUTOFF: Proportion test cut-off register. */
  #define CRACENCORE_RNGCONTROL_PROPTESTCUTOFF_ResetValue (0x0000000DUL)

/* PROPTESTCUTOFF @Bits 0..8 : Proportion test cut-off value. */
  #define CRACENCORE_RNGCONTROL_PROPTESTCUTOFF_PROPTESTCUTOFF_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_PROPTESTCUTOFF_PROPTESTCUTOFF_Msk (0x1FFUL << CRACENCORE_RNGCONTROL_PROPTESTCUTOFF_PROPTESTCUTOFF_Pos)
                                                                            /*!< Bit mask of PROPTESTCUTOFF field.*/


/* CRACENCORE_RNGCONTROL_LFSRSEED: LFSR seed register. */
  #define CRACENCORE_RNGCONTROL_LFSRSEED_ResetValue (0x00FFFFFFUL)

/* LFSRSEED @Bits 0..23 : LFSR initialization value. */
  #define CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSEED_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSEED_Msk (0xFFFFFFUL << CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSEED_Pos) /*!< Bit mask
                                                                            of LFSRSEED field.*/

/* LFSRSSELECTION @Bits 24..25 : Share index for which initialization value should be used. */
  #define CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSSELECTION_Pos (24UL)
  #define CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSSELECTION_Msk (0x3UL << CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSSELECTION_Pos) /*!<
                                                                            Bit mask of LFSRSSELECTION field.*/


/* CRACENCORE_RNGCONTROL_STATUS: Status register. */
  #define CRACENCORE_RNGCONTROL_STATUS_ResetValue (0x00000000UL)

/* TESTDATABUSY @Bit 0 : High when data written to TestData register is being processed. */
  #define CRACENCORE_RNGCONTROL_STATUS_TESTDATABUSY_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_STATUS_TESTDATABUSY_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_TESTDATABUSY_Pos) /*!< Bit mask
                                                                            of TESTDATABUSY field.*/

/* STATE @Bits 1..3 : State of the control FSM: */
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_Pos (1UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_Msk (0x7UL << CRACENCORE_RNGCONTROL_STATUS_STATE_Pos) /*!< Bit mask of STATE
                                                                            field.*/
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_Min (0x0UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_Max (0x5UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_RESET (0x0UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_STARTUP (0x1UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_IDLERON (0x2UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_FILLFIFO (0x4UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_ERROR (0x5UL)

/* REPFAIL @Bit 4 : NIST repetition test(s) failure. */
  #define CRACENCORE_RNGCONTROL_STATUS_REPFAIL_Pos (4UL)
  #define CRACENCORE_RNGCONTROL_STATUS_REPFAIL_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_REPFAIL_Pos) /*!< Bit mask of REPFAIL
                                                                            field.*/

/* PROPFAIL @Bit 5 : NIST proportion test(s) failure. */
  #define CRACENCORE_RNGCONTROL_STATUS_PROPFAIL_Pos (5UL)
  #define CRACENCORE_RNGCONTROL_STATUS_PROPFAIL_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_PROPFAIL_Pos) /*!< Bit mask of
                                                                            PROPFAIL field.*/

/* ANYHEALTHTESTFAIL @Bit 6 : Any of the enabled health tests is failing. */
  #define CRACENCORE_RNGCONTROL_STATUS_ANYHEALTHTESTFAIL_Pos (6UL)
  #define CRACENCORE_RNGCONTROL_STATUS_ANYHEALTHTESTFAIL_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_ANYHEALTHTESTFAIL_Pos) /*!<
                                                                            Bit mask of ANYHEALTHTESTFAIL field.*/

/* FULLINT @Bit 7 : FIFO full status. */
  #define CRACENCORE_RNGCONTROL_STATUS_FULLINT_Pos (7UL)
  #define CRACENCORE_RNGCONTROL_STATUS_FULLINT_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_FULLINT_Pos) /*!< Bit mask of FULLINT
                                                                            field.*/

/* STARTUPFAIL @Bit 10 : Start-up test(s) failure. */
  #define CRACENCORE_RNGCONTROL_STATUS_STARTUPFAIL_Pos (10UL)
  #define CRACENCORE_RNGCONTROL_STATUS_STARTUPFAIL_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_STARTUPFAIL_Pos) /*!< Bit mask of
                                                                            STARTUPFAIL field.*/

/* REPTESTFAILPERSHARE @Bits 12..15 : NIST Repetition test failure per share. */
  #define CRACENCORE_RNGCONTROL_STATUS_REPTESTFAILPERSHARE_Pos (12UL)
  #define CRACENCORE_RNGCONTROL_STATUS_REPTESTFAILPERSHARE_Msk (0xFUL << CRACENCORE_RNGCONTROL_STATUS_REPTESTFAILPERSHARE_Pos)
                                                                            /*!< Bit mask of REPTESTFAILPERSHARE field.*/

/* PROPTESTFAILPERSHARE @Bits 16..19 : NIST Proportion test failure per share. */
  #define CRACENCORE_RNGCONTROL_STATUS_PROPTESTFAILPERSHARE_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_STATUS_PROPTESTFAILPERSHARE_Msk (0xFUL << CRACENCORE_RNGCONTROL_STATUS_PROPTESTFAILPERSHARE_Pos)
                                                                            /*!< Bit mask of PROPTESTFAILPERSHARE field.*/

/* CONDITIONINGISTOOSLOW @Bit 20 : Conditioning consumes data slower than they are provided to it. */
  #define CRACENCORE_RNGCONTROL_STATUS_CONDITIONINGISTOOSLOW_Pos (20UL)
  #define CRACENCORE_RNGCONTROL_STATUS_CONDITIONINGISTOOSLOW_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_CONDITIONINGISTOOSLOW_Pos)
                                                                            /*!< Bit mask of CONDITIONINGISTOOSLOW field.*/


/* CRACENCORE_RNGCONTROL_WARMUPPERIOD: Number of clock cycles in warm-up sequence. */
  #define CRACENCORE_RNGCONTROL_WARMUPPERIOD_ResetValue (0x00000200UL)

/* WARMUPPERIOD @Bits 0..11 : Number of clock cycles in warm-up sequence. */
  #define CRACENCORE_RNGCONTROL_WARMUPPERIOD_WARMUPPERIOD_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_WARMUPPERIOD_WARMUPPERIOD_Msk (0xFFFUL << CRACENCORE_RNGCONTROL_WARMUPPERIOD_WARMUPPERIOD_Pos)
                                                                            /*!< Bit mask of WARMUPPERIOD field.*/


/* CRACENCORE_RNGCONTROL_DISABLEOSC: DisableOsc register. */
  #define CRACENCORE_RNGCONTROL_DISABLEOSC_ResetValue (0x00000000UL)

/* DISABLEOSC @Bits 0..7 : Disable oscillator rings 0 to 7. */
  #define CRACENCORE_RNGCONTROL_DISABLEOSC_DISABLEOSC_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_DISABLEOSC_DISABLEOSC_Msk (0xFFUL << CRACENCORE_RNGCONTROL_DISABLEOSC_DISABLEOSC_Pos) /*!< Bit
                                                                            mask of DISABLEOSC field.*/


/* CRACENCORE_RNGCONTROL_SAMPLINGPERIOD: Number of clock cycles between sampling moments. */
  #define CRACENCORE_RNGCONTROL_SAMPLINGPERIOD_ResetValue (0x00000FFFUL)

/* SAMPLINGPERIOD @Bits 0..11 : Number of clock cycles between sampling moments. */
  #define CRACENCORE_RNGCONTROL_SAMPLINGPERIOD_SAMPLINGPERIOD_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_SAMPLINGPERIOD_SAMPLINGPERIOD_Msk (0xFFFUL << CRACENCORE_RNGCONTROL_SAMPLINGPERIOD_SAMPLINGPERIOD_Pos)
                                                                            /*!< Bit mask of SAMPLINGPERIOD field.*/


/* CRACENCORE_RNGCONTROL_HWCONFIG: Hardware configuration register. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_ResetValue (0x0002410FUL)

/* NBOFINV @Bits 0..7 : Generic g_NbOfInverters value. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_NBOFINV_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_HWCONFIG_NBOFINV_Msk (0xFFUL << CRACENCORE_RNGCONTROL_HWCONFIG_NBOFINV_Pos) /*!< Bit mask of
                                                                            NBOFINV field.*/

/* LOG2NBOFAUTOCORRTESTSPERSHARE @Bits 8..11 : Generic g_Log2NbOfAutoCorrTestsPerShare value. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFAUTOCORRTESTSPERSHARE_Pos (8UL) /*!< Position of LOG2NBOFAUTOCORRTESTSPERSHARE
                                                                            field.*/
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFAUTOCORRTESTSPERSHARE_Msk (0xFUL << CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFAUTOCORRTESTSPERSHARE_Pos)
                                                                            /*!< Bit mask of LOG2NBOFAUTOCORRTESTSPERSHARE
                                                                            field.*/

/* LOG2FIFODEPTH @Bits 12..15 : Generic g_Log2FifoDepth value. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2FIFODEPTH_Pos (12UL)
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2FIFODEPTH_Msk (0xFUL << CRACENCORE_RNGCONTROL_HWCONFIG_LOG2FIFODEPTH_Pos) /*!< Bit
                                                                            mask of LOG2FIFODEPTH field.*/

/* LOG2NBOFSHARES @Bits 16..17 : Generic g_Log2NbOfShares value. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFSHARES_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFSHARES_Msk (0x3UL << CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFSHARES_Pos) /*!<
                                                                            Bit mask of LOG2NBOFSHARES field.*/


/* CRACENCORE_RNGCONTROL_COOLDOWNPERIOD: Number of clock cycles in cool-down sequence. */
  #define CRACENCORE_RNGCONTROL_COOLDOWNPERIOD_ResetValue (0x00000000UL)

/* COOLDOWNPERIOD @Bits 0..11 : Number of clock cycles in cool-down sequence. */
  #define CRACENCORE_RNGCONTROL_COOLDOWNPERIOD_COOLDOWNPERIOD_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_COOLDOWNPERIOD_COOLDOWNPERIOD_Msk (0xFFFUL << CRACENCORE_RNGCONTROL_COOLDOWNPERIOD_COOLDOWNPERIOD_Pos)
                                                                            /*!< Bit mask of COOLDOWNPERIOD field.*/


/* CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0: AutoCorrTestCutoff register 0 */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_ResetValue (0x007F007FUL)

/* DLYZEROCUTOFF @Bits 0..15 : Auto-correlation test cut-off value for delay of 0 samples. */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYZEROCUTOFF_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYZEROCUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYZEROCUTOFF_Pos)
                                                                            /*!< Bit mask of DLYZEROCUTOFF field.*/

/* DLYONECUTOFF @Bits 16..31 : Auto-correlation test cut-off value for delay of +1 sample. */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYONECUTOFF_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYONECUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYONECUTOFF_Pos)
                                                                            /*!< Bit mask of DLYONECUTOFF field.*/


/* CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1: AutoCorrTestCutoff register 1 */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_ResetValue (0x007F007FUL)

/* DLYTWOCUTOFF @Bits 0..15 : Auto-correlation test cut-off value for delay of +2 samples. */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTWOCUTOFF_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTWOCUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTWOCUTOFF_Pos)
                                                                            /*!< Bit mask of DLYTWOCUTOFF field.*/

/* DLYTHREECUTOFF @Bits 16..31 : Auto-correlation test cut-off value for delay of +3 samples. */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTHREECUTOFF_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTHREECUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTHREECUTOFF_Pos)
                                                                            /*!< Bit mask of DLYTHREECUTOFF field.*/


/* CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0: CorrTestCutoff register 0 */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_ResetValue (0x007F007FUL)

/* DLYZEROCUTOFF @Bits 0..15 : Correlation test cut-off value for delay of 0 samples. */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYZEROCUTOFF_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYZEROCUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYZEROCUTOFF_Pos)
                                                                            /*!< Bit mask of DLYZEROCUTOFF field.*/

/* DLYONECUTOFF @Bits 16..31 : Correlation test cut-off value for delay of +/-1 sample. */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYONECUTOFF_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYONECUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYONECUTOFF_Pos)
                                                                            /*!< Bit mask of DLYONECUTOFF field.*/


/* CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1: CorrTestCutoff register 1 */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_ResetValue (0x007F007FUL)

/* DLYTWOCUTOFF @Bits 0..15 : Correlation test cut-off value for delay of +/- 2 samples. */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTWOCUTOFF_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTWOCUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTWOCUTOFF_Pos)
                                                                            /*!< Bit mask of DLYTWOCUTOFF field.*/

/* DLYTHREECUTOFF @Bits 16..31 : Correlation test cut-off value for delay of +/- 3 samples. */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTHREECUTOFF_Pos (16UL)
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTHREECUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTHREECUTOFF_Pos)
                                                                            /*!< Bit mask of DLYTHREECUTOFF field.*/


/* CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED: Auto-correlation test failing ring(s). */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED_ResetValue (0x00000000UL)

/* AUTOCORRTESTFAILED @Bits 0..31 : Auto-correlation test failing ring(s). */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED_AUTOCORRTESTFAILED_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED_AUTOCORRTESTFAILED_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED_AUTOCORRTESTFAILED_Pos)
                                                                            /*!< Bit mask of AUTOCORRTESTFAILED field.*/


/* CRACENCORE_RNGCONTROL_CORRTESTFAILED: Correlation test failing ring. */
  #define CRACENCORE_RNGCONTROL_CORRTESTFAILED_ResetValue (0x00000000UL)

/* CORRTESTFAILED @Bits 0..31 : Correlation test failing ring. */
  #define CRACENCORE_RNGCONTROL_CORRTESTFAILED_CORRTESTFAILED_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_CORRTESTFAILED_CORRTESTFAILED_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTFAILED_CORRTESTFAILED_Pos)
                                                                            /*!< Bit mask of CORRTESTFAILED field.*/


/* CRACENCORE_RNGCONTROL_HWVERSION: Fixed to 1 for this version. */
  #define CRACENCORE_RNGCONTROL_HWVERSION_ResetValue (0x00000001UL)

/* HWVERSION @Bits 0..31 : Fixed to 1 for this version. */
  #define CRACENCORE_RNGCONTROL_HWVERSION_HWVERSION_Pos (0UL)
  #define CRACENCORE_RNGCONTROL_HWVERSION_HWVERSION_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_HWVERSION_HWVERSION_Pos) /*!< Bit
                                                                            mask of HWVERSION field.*/



/* ================================================== Struct CRACENCORE_PK =================================================== */
/**
  * @brief PK [CRACENCORE_PK] (unspecified)
  */
typedef struct {
  __IOM uint32_t  POINTERS;
  __IOM uint32_t  COMMAND;
  __IOM uint32_t  CONTROL;
  __IOM uint32_t  STATUS;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  TIMER;
  __IOM uint32_t  HWCONFIG;
  __IOM uint32_t  OPSIZE;
  __IM  uint32_t  RESERVED1[8];
  __IOM uint32_t  ECCERRORBITPOS;
  __IOM uint32_t  ECCCONTROLSTATUSREG;
  __IM  uint32_t  RESERVED2[12];
  __IOM uint32_t  MICROCODEFORMAT;
  __IOM uint32_t  HWVERSION;
} NRF_CRACENCORE_PK_Type;

/* CRACENCORE_PK_POINTERS: Pointers register. */
  #define CRACENCORE_PK_POINTERS_ResetValue (0x00000000UL)

/* OPPTRA @Bits 0..3 : When executing primitive arithmetic operations, this pointer defines where operand A is located in memory
                       (location 0x0 to 0xF). */

  #define CRACENCORE_PK_POINTERS_OPPTRA_Pos (0UL)
  #define CRACENCORE_PK_POINTERS_OPPTRA_Msk (0xFUL << CRACENCORE_PK_POINTERS_OPPTRA_Pos)

/* OPPTRB @Bits 8..11 : When executing primitive arithmetic operations, this pointer defines where operand B is located in
                        memory (location 0x0 to 0xF). */

  #define CRACENCORE_PK_POINTERS_OPPTRB_Pos (8UL)
  #define CRACENCORE_PK_POINTERS_OPPTRB_Msk (0xFUL << CRACENCORE_PK_POINTERS_OPPTRB_Pos)

/* OPPTRC @Bits 16..19 : When executing primitive arithmetic operations, this pointer defines the location (0x0 to 0xF) where
                         the result will be stored in memory. */

  #define CRACENCORE_PK_POINTERS_OPPTRC_Pos (16UL)
  #define CRACENCORE_PK_POINTERS_OPPTRC_Msk (0xFUL << CRACENCORE_PK_POINTERS_OPPTRC_Pos)

/* OPPTRN @Bits 24..27 : When executing primitive arithmetic operations, this pointer defines the location where the modulus is
                         located in memory (location 0x0 to 0xF). */

  #define CRACENCORE_PK_POINTERS_OPPTRN_Pos (24UL)
  #define CRACENCORE_PK_POINTERS_OPPTRN_Msk (0xFUL << CRACENCORE_PK_POINTERS_OPPTRN_Pos)


/* CRACENCORE_PK_COMMAND: Command register. */
  #define CRACENCORE_PK_COMMAND_ResetValue (0x0000000FUL)

/* OPEADDR @Bits 0..6 : This field defines the operation to be performed. */
  #define CRACENCORE_PK_COMMAND_OPEADDR_Pos (0UL)
  #define CRACENCORE_PK_COMMAND_OPEADDR_Msk (0x7FUL << CRACENCORE_PK_COMMAND_OPEADDR_Pos)

/* FIELDF @Bit 7 : 0: Field is GF(p) 1: Field is GF(2**m) */
  #define CRACENCORE_PK_COMMAND_FIELDF_Pos (7UL)
  #define CRACENCORE_PK_COMMAND_FIELDF_Msk (0x1UL << CRACENCORE_PK_COMMAND_FIELDF_Pos)

/* OPBYTESM1 @Bits 8..17 : This field defines the size (= number of bytes minus one) of the operands for the current operation.
                           */

  #define CRACENCORE_PK_COMMAND_OPBYTESM1_Pos (8UL)
  #define CRACENCORE_PK_COMMAND_OPBYTESM1_Msk (0x3FFUL << CRACENCORE_PK_COMMAND_OPBYTESM1_Pos) /*!< Bit mask of OPBYTESM1
                                                                            field.*/

/* RANDMOD @Bit 19 : Enable randomization of modulus (counter-measure). */
  #define CRACENCORE_PK_COMMAND_RANDMOD_Pos (19UL)
  #define CRACENCORE_PK_COMMAND_RANDMOD_Msk (0x1UL << CRACENCORE_PK_COMMAND_RANDMOD_Pos)

/* SELCURVE @Bits 20..22 : Enable accelerator for specific curve modulus: */
  #define CRACENCORE_PK_COMMAND_SELCURVE_Pos (20UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_Msk (0x7UL << CRACENCORE_PK_COMMAND_SELCURVE_Pos)
  #define CRACENCORE_PK_COMMAND_SELCURVE_Min (0x0UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_Max (0x6UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_NOACCEL (0x0UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_P256 (0x1UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_P384 (0x2UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_P521 (0x3UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_P192 (0x4UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_CURVE25519 (0x5UL)
  #define CRACENCORE_PK_COMMAND_SELCURVE_ED25519 (0x6UL)

/* RANDKE @Bit 24 : Enable randomization of exponent/scalar (counter-measure). */
  #define CRACENCORE_PK_COMMAND_RANDKE_Pos (24UL)
  #define CRACENCORE_PK_COMMAND_RANDKE_Msk (0x1UL << CRACENCORE_PK_COMMAND_RANDKE_Pos)

/* RANDPROJ @Bit 25 : Enable randomization of projective coordinates (counter-measure). */
  #define CRACENCORE_PK_COMMAND_RANDPROJ_Pos (25UL)
  #define CRACENCORE_PK_COMMAND_RANDPROJ_Msk (0x1UL << CRACENCORE_PK_COMMAND_RANDPROJ_Pos)

/* EDWARDS @Bit 26 : Enable Edwards curve. */
  #define CRACENCORE_PK_COMMAND_EDWARDS_Pos (26UL)
  #define CRACENCORE_PK_COMMAND_EDWARDS_Msk (0x1UL << CRACENCORE_PK_COMMAND_EDWARDS_Pos)

/* SWAPBYTES @Bit 28 : Swap the bytes on AHB interface: */
  #define CRACENCORE_PK_COMMAND_SWAPBYTES_Pos (28UL)
  #define CRACENCORE_PK_COMMAND_SWAPBYTES_Msk (0x1UL << CRACENCORE_PK_COMMAND_SWAPBYTES_Pos)
  #define CRACENCORE_PK_COMMAND_SWAPBYTES_Min (0x0UL)
  #define CRACENCORE_PK_COMMAND_SWAPBYTES_Max (0x1UL)
  #define CRACENCORE_PK_COMMAND_SWAPBYTES_NATIVE (0x0UL)
  #define CRACENCORE_PK_COMMAND_SWAPBYTES_SWAPPED (0x1UL)

/* FLAGA @Bit 29 : Flag A. */
  #define CRACENCORE_PK_COMMAND_FLAGA_Pos (29UL)
  #define CRACENCORE_PK_COMMAND_FLAGA_Msk (0x1UL << CRACENCORE_PK_COMMAND_FLAGA_Pos)

/* FLAGB @Bit 30 : Flag B. */
  #define CRACENCORE_PK_COMMAND_FLAGB_Pos (30UL)
  #define CRACENCORE_PK_COMMAND_FLAGB_Msk (0x1UL << CRACENCORE_PK_COMMAND_FLAGB_Pos)

/* CALCR2 @Bit 31 : This bit indicates if the IP has to calculate R**2 mod N for the next operation. */
  #define CRACENCORE_PK_COMMAND_CALCR2_Pos (31UL)
  #define CRACENCORE_PK_COMMAND_CALCR2_Msk (0x1UL << CRACENCORE_PK_COMMAND_CALCR2_Pos)
  #define CRACENCORE_PK_COMMAND_CALCR2_Min (0x0UL)
  #define CRACENCORE_PK_COMMAND_CALCR2_Max (0x1UL)
  #define CRACENCORE_PK_COMMAND_CALCR2_NRECALCULATE (0x0UL)
  #define CRACENCORE_PK_COMMAND_CALCR2_RECALCULATE (0x1UL)


/* CRACENCORE_PK_CONTROL: Command register. */
  #define CRACENCORE_PK_CONTROL_ResetValue (0x00000000UL)

/* START @Bit 0 : Writing a 1 starts the processing. */
  #define CRACENCORE_PK_CONTROL_START_Pos (0UL)
  #define CRACENCORE_PK_CONTROL_START_Msk (0x1UL << CRACENCORE_PK_CONTROL_START_Pos)

/* CLEARIRQ @Bit 1 : Writing a 1 clears the IRQ output. */
  #define CRACENCORE_PK_CONTROL_CLEARIRQ_Pos (1UL)
  #define CRACENCORE_PK_CONTROL_CLEARIRQ_Msk (0x1UL << CRACENCORE_PK_CONTROL_CLEARIRQ_Pos)


/* CRACENCORE_PK_STATUS: Status register. */
  #define CRACENCORE_PK_STATUS_ResetValue (0x00000000UL)

/* ERRORFLAGS @Bits 4..15 : These bits indicate an error condition. */
  #define CRACENCORE_PK_STATUS_ERRORFLAGS_Pos (4UL)
  #define CRACENCORE_PK_STATUS_ERRORFLAGS_Msk (0xFFFUL << CRACENCORE_PK_STATUS_ERRORFLAGS_Pos) /*!< Bit mask of ERRORFLAGS
                                                                            field.*/

/* PKBUSY @Bit 16 : This bit reflects the BUSY output value. */
  #define CRACENCORE_PK_STATUS_PKBUSY_Pos (16UL)
  #define CRACENCORE_PK_STATUS_PKBUSY_Msk (0x1UL << CRACENCORE_PK_STATUS_PKBUSY_Pos)

/* INTRPTSTATUS @Bit 17 : This bit reflects the IRQ output value. */
  #define CRACENCORE_PK_STATUS_INTRPTSTATUS_Pos (17UL)
  #define CRACENCORE_PK_STATUS_INTRPTSTATUS_Msk (0x1UL << CRACENCORE_PK_STATUS_INTRPTSTATUS_Pos) /*!< Bit mask of INTRPTSTATUS
                                                                            field.*/

/* FAILPTR @Bits 24..28 : These bits indicate which data location generated the error flag. */
  #define CRACENCORE_PK_STATUS_FAILPTR_Pos (24UL)
  #define CRACENCORE_PK_STATUS_FAILPTR_Msk (0x1FUL << CRACENCORE_PK_STATUS_FAILPTR_Pos)


/* CRACENCORE_PK_TIMER: Timer register. */
  #define CRACENCORE_PK_TIMER_ResetValue (0x00000000UL)

/* TIMER @Bits 1..31 : Number of clock cycles (as the number of core cycles is always even, register bit 0 is tied to zero. */
  #define CRACENCORE_PK_TIMER_TIMER_Pos (1UL)
  #define CRACENCORE_PK_TIMER_TIMER_Msk (0x7FFFFFFFUL << CRACENCORE_PK_TIMER_TIMER_Pos)


/* CRACENCORE_PK_HWCONFIG: Hardware configuration register. */
  #define CRACENCORE_PK_HWCONFIG_ResetValue (0x01F30000UL)

/* MAXOPSIZE @Bits 0..11 : Maximum operand size (number of bytes). */
  #define CRACENCORE_PK_HWCONFIG_MAXOPSIZE_Pos (0UL)
  #define CRACENCORE_PK_HWCONFIG_MAXOPSIZE_Msk (0xFFFUL << CRACENCORE_PK_HWCONFIG_MAXOPSIZE_Pos) /*!< Bit mask of MAXOPSIZE
                                                                            field.*/

/* NBMULT @Bits 12..15 : Number of multipliers: */
  #define CRACENCORE_PK_HWCONFIG_NBMULT_Pos (12UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_Msk (0xFUL << CRACENCORE_PK_HWCONFIG_NBMULT_Pos)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_Min (0x0UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_Max (0x8UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_MULT1 (0x0UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_MULT4 (0x1UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_MULT16 (0x2UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_MULT64 (0x4UL)
  #define CRACENCORE_PK_HWCONFIG_NBMULT_MULT256 (0x8UL)

/* PRIMEFIELD @Bit 16 : Support prime field. */
  #define CRACENCORE_PK_HWCONFIG_PRIMEFIELD_Pos (16UL)
  #define CRACENCORE_PK_HWCONFIG_PRIMEFIELD_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_PRIMEFIELD_Pos) /*!< Bit mask of PRIMEFIELD
                                                                            field.*/

/* BINARYFIELD @Bit 17 : Support binary field. */
  #define CRACENCORE_PK_HWCONFIG_BINARYFIELD_Pos (17UL)
  #define CRACENCORE_PK_HWCONFIG_BINARYFIELD_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_BINARYFIELD_Pos) /*!< Bit mask of BINARYFIELD
                                                                            field.*/

/* DATAMEMECC @Bit 18 : Support data memory error correction. */
  #define CRACENCORE_PK_HWCONFIG_DATAMEMECC_Pos (18UL)
  #define CRACENCORE_PK_HWCONFIG_DATAMEMECC_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_DATAMEMECC_Pos) /*!< Bit mask of DATAMEMECC
                                                                            field.*/

/* CODEMEMECC @Bit 19 : Support code memory error correction. */
  #define CRACENCORE_PK_HWCONFIG_CODEMEMECC_Pos (19UL)
  #define CRACENCORE_PK_HWCONFIG_CODEMEMECC_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_CODEMEMECC_Pos) /*!< Bit mask of CODEMEMECC
                                                                            field.*/

/* P256 @Bit 20 : Support ECC P256 acceleration. */
  #define CRACENCORE_PK_HWCONFIG_P256_Pos (20UL)
  #define CRACENCORE_PK_HWCONFIG_P256_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_P256_Pos)

/* P384 @Bit 21 : Support ECC P384 acceleration. */
  #define CRACENCORE_PK_HWCONFIG_P384_Pos (21UL)
  #define CRACENCORE_PK_HWCONFIG_P384_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_P384_Pos)

/* P521 @Bit 22 : Support ECC P521 acceleration. */
  #define CRACENCORE_PK_HWCONFIG_P521_Pos (22UL)
  #define CRACENCORE_PK_HWCONFIG_P521_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_P521_Pos)

/* P192 @Bit 23 : Support ECC P192 acceleration. */
  #define CRACENCORE_PK_HWCONFIG_P192_Pos (23UL)
  #define CRACENCORE_PK_HWCONFIG_P192_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_P192_Pos)

/* X25519 @Bit 24 : Support Curve25519/Ed25519 acceleration. */
  #define CRACENCORE_PK_HWCONFIG_X25519_Pos (24UL)
  #define CRACENCORE_PK_HWCONFIG_X25519_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_X25519_Pos)

/* AHBMASTER @Bit 25 : Memory access */
  #define CRACENCORE_PK_HWCONFIG_AHBMASTER_Pos (25UL)
  #define CRACENCORE_PK_HWCONFIG_AHBMASTER_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_AHBMASTER_Pos) /*!< Bit mask of AHBMASTER
                                                                            field.*/
  #define CRACENCORE_PK_HWCONFIG_AHBMASTER_Min (0x0UL)
  #define CRACENCORE_PK_HWCONFIG_AHBMASTER_Max (0x1UL)
  #define CRACENCORE_PK_HWCONFIG_AHBMASTER_SLAVE (0x0UL)
  #define CRACENCORE_PK_HWCONFIG_AHBMASTER_MASTER (0x1UL)

/* CODERAM @Bit 26 : Code memory */
  #define CRACENCORE_PK_HWCONFIG_CODERAM_Pos (26UL)
  #define CRACENCORE_PK_HWCONFIG_CODERAM_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_CODERAM_Pos)
  #define CRACENCORE_PK_HWCONFIG_CODERAM_Min (0x0UL)
  #define CRACENCORE_PK_HWCONFIG_CODERAM_Max (0x1UL)
  #define CRACENCORE_PK_HWCONFIG_CODERAM_ROM (0x0UL)
  #define CRACENCORE_PK_HWCONFIG_CODERAM_RAM (0x1UL)

/* DISABLESMX @Bit 29 : State of DisableSMx input (high when SM2/SM9 operations are disabled). */
  #define CRACENCORE_PK_HWCONFIG_DISABLESMX_Pos (29UL)
  #define CRACENCORE_PK_HWCONFIG_DISABLESMX_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_DISABLESMX_Pos) /*!< Bit mask of DISABLESMX
                                                                            field.*/

/* DISABLECLRMEM @Bit 30 : State of DisableClrMem input (high when automatic clear of the RAM after reset is disabled). */
  #define CRACENCORE_PK_HWCONFIG_DISABLECLRMEM_Pos (30UL)
  #define CRACENCORE_PK_HWCONFIG_DISABLECLRMEM_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_DISABLECLRMEM_Pos) /*!< Bit mask of
                                                                            DISABLECLRMEM field.*/

/* DISABLECM @Bit 31 : State of DisableCM input (high when counter-measures are disabled). */
  #define CRACENCORE_PK_HWCONFIG_DISABLECM_Pos (31UL)
  #define CRACENCORE_PK_HWCONFIG_DISABLECM_Msk (0x1UL << CRACENCORE_PK_HWCONFIG_DISABLECM_Pos) /*!< Bit mask of DISABLECM
                                                                            field.*/


/* CRACENCORE_PK_OPSIZE: Operand size register. */
  #define CRACENCORE_PK_OPSIZE_ResetValue (0x00001000UL)

/* OPSIZE @Bits 0..12 : Operand size (number of bytes): This register is used when the memory is accessed via AHB Master */
  #define CRACENCORE_PK_OPSIZE_OPSIZE_Pos (0UL)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_Msk (0x1FFFUL << CRACENCORE_PK_OPSIZE_OPSIZE_Pos)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_Min (0x100UL)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_Max (0x1000UL)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_OPSIZE256 (0x0100UL)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_OPSIZE521 (0x0209UL)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_OPSIZE2048 (0x0800UL)
  #define CRACENCORE_PK_OPSIZE_OPSIZE_OPSIZE4096 (0x1000UL)


/* CRACENCORE_PK_ECCERRORBITPOS: ECC Error bit position register. */
  #define CRACENCORE_PK_ECCERRORBITPOS_ResetValue (0x03FF03FFUL)

/* ERRORBITPOS1 @Bits 0..9 : Position of error bit 1 */
  #define CRACENCORE_PK_ECCERRORBITPOS_ERRORBITPOS1_Pos (0UL)
  #define CRACENCORE_PK_ECCERRORBITPOS_ERRORBITPOS1_Msk (0x3FFUL << CRACENCORE_PK_ECCERRORBITPOS_ERRORBITPOS1_Pos) /*!< Bit mask
                                                                            of ERRORBITPOS1 field.*/

/* ERRORBITPOS2 @Bits 16..25 : Position of error bit 2 */
  #define CRACENCORE_PK_ECCERRORBITPOS_ERRORBITPOS2_Pos (16UL)
  #define CRACENCORE_PK_ECCERRORBITPOS_ERRORBITPOS2_Msk (0x3FFUL << CRACENCORE_PK_ECCERRORBITPOS_ERRORBITPOS2_Pos) /*!< Bit mask
                                                                            of ERRORBITPOS2 field.*/


/* CRACENCORE_PK_ECCCONTROLSTATUSREG: ECC Control and Status register. */
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_ResetValue (0x00000000UL)

/* DATAMEMCORRECTION @Bit 0 : Data Memory Correction flag, clear on write */
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_DATAMEMCORRECTION_Pos (0UL)
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_DATAMEMCORRECTION_Msk (0x1UL << CRACENCORE_PK_ECCCONTROLSTATUSREG_DATAMEMCORRECTION_Pos)
                                                                            /*!< Bit mask of DATAMEMCORRECTION field.*/

/* DATAMEMFAILURE @Bit 1 : Data Memory Failure flag, clear on write */
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_DATAMEMFAILURE_Pos (1UL)
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_DATAMEMFAILURE_Msk (0x1UL << CRACENCORE_PK_ECCCONTROLSTATUSREG_DATAMEMFAILURE_Pos)
                                                                            /*!< Bit mask of DATAMEMFAILURE field.*/

/* CODEMEMCORRECTION @Bit 2 : Code Memory Correction flag, clear on write */
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_CODEMEMCORRECTION_Pos (2UL)
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_CODEMEMCORRECTION_Msk (0x1UL << CRACENCORE_PK_ECCCONTROLSTATUSREG_CODEMEMCORRECTION_Pos)
                                                                            /*!< Bit mask of CODEMEMCORRECTION field.*/

/* CODEMEMFAILURE @Bit 3 : Code Memory Failure flag, clear on write */
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_CODEMEMFAILURE_Pos (3UL)
  #define CRACENCORE_PK_ECCCONTROLSTATUSREG_CODEMEMFAILURE_Msk (0x1UL << CRACENCORE_PK_ECCCONTROLSTATUSREG_CODEMEMFAILURE_Pos)
                                                                            /*!< Bit mask of CODEMEMFAILURE field.*/


/* CRACENCORE_PK_MICROCODEFORMAT: Microcode Format register. */
  #define CRACENCORE_PK_MICROCODEFORMAT_ResetValue (0xD4B79DDAUL)

/* MICROCODEFORMAT @Bits 0..31 : Microcode format number. */
  #define CRACENCORE_PK_MICROCODEFORMAT_MICROCODEFORMAT_Pos (0UL)
  #define CRACENCORE_PK_MICROCODEFORMAT_MICROCODEFORMAT_Msk (0xFFFFFFFFUL << CRACENCORE_PK_MICROCODEFORMAT_MICROCODEFORMAT_Pos)
                                                                            /*!< Bit mask of MICROCODEFORMAT field.*/


/* CRACENCORE_PK_HWVERSION: Hardware Version register. */
  #define CRACENCORE_PK_HWVERSION_ResetValue (0x00010001UL)

/* MINOR @Bits 0..15 : Minor version number. */
  #define CRACENCORE_PK_HWVERSION_MINOR_Pos (0UL)
  #define CRACENCORE_PK_HWVERSION_MINOR_Msk (0xFFFFUL << CRACENCORE_PK_HWVERSION_MINOR_Pos)

/* MAJOR @Bits 16..31 : Major version number. */
  #define CRACENCORE_PK_HWVERSION_MAJOR_Pos (16UL)
  #define CRACENCORE_PK_HWVERSION_MAJOR_Msk (0xFFFFUL << CRACENCORE_PK_HWVERSION_MAJOR_Pos)



/* ================================================== Struct CRACENCORE_IKG ================================================== */
/**
  * @brief IKG [CRACENCORE_IKG] (unspecified)
  */
typedef struct {
  __IOM uint32_t  START;
  __IOM uint32_t  STATUS;
  __IOM uint32_t  INITDATA;
  __IOM uint32_t  NONCE;
  __IOM uint32_t  PERSONALISATIONSTRING;
  __IOM uint32_t  RESEEDINTERVALLSB;
  __IOM uint32_t  RESEEDINTERVALMSB;
  __IOM uint32_t  PKECONTROL;
  __IOM uint32_t  PKECOMMAND;
  __IOM uint32_t  PKESTATUS;
  __IOM uint32_t  SOFTRST;
  __IOM uint32_t  HWCONFIG;
} NRF_CRACENCORE_IKG_Type;

/* CRACENCORE_IKG_START: Start register. */
  #define CRACENCORE_IKG_START_ResetValue (0x00000000UL)

/* START @Bit 0 : Start the Isolated Key Generation. */
  #define CRACENCORE_IKG_START_START_Pos (0UL)
  #define CRACENCORE_IKG_START_START_Msk (0x1UL << CRACENCORE_IKG_START_START_Pos)


/* CRACENCORE_IKG_STATUS: Status register. */
  #define CRACENCORE_IKG_STATUS_ResetValue (0x00000000UL)

/* SEEDERROR @Bit 0 : Seed Error during Isolated Key Generation. */
  #define CRACENCORE_IKG_STATUS_SEEDERROR_Pos (0UL)
  #define CRACENCORE_IKG_STATUS_SEEDERROR_Msk (0x1UL << CRACENCORE_IKG_STATUS_SEEDERROR_Pos)

/* ENTROPYERROR @Bit 1 : Entropy Error during Isolated Key Generation. */
  #define CRACENCORE_IKG_STATUS_ENTROPYERROR_Pos (1UL)
  #define CRACENCORE_IKG_STATUS_ENTROPYERROR_Msk (0x1UL << CRACENCORE_IKG_STATUS_ENTROPYERROR_Pos) /*!< Bit mask of ENTROPYERROR
                                                                            field.*/

/* OKAY @Bit 2 : Isolated Key Generation is okay. */
  #define CRACENCORE_IKG_STATUS_OKAY_Pos (2UL)
  #define CRACENCORE_IKG_STATUS_OKAY_Msk (0x1UL << CRACENCORE_IKG_STATUS_OKAY_Pos)

/* CTRDRBGBUSY @Bit 4 : CTR_DRBG health test is busy (only when g_hw_health_test = true). */
  #define CRACENCORE_IKG_STATUS_CTRDRBGBUSY_Pos (4UL)
  #define CRACENCORE_IKG_STATUS_CTRDRBGBUSY_Msk (0x1UL << CRACENCORE_IKG_STATUS_CTRDRBGBUSY_Pos) /*!< Bit mask of CTRDRBGBUSY
                                                                            field.*/

/* CATASTROPHICERROR @Bit 5 : Catastrophic error during CTR_DRBG health test (only when g_hw_health_test = true). */
  #define CRACENCORE_IKG_STATUS_CATASTROPHICERROR_Pos (5UL)
  #define CRACENCORE_IKG_STATUS_CATASTROPHICERROR_Msk (0x1UL << CRACENCORE_IKG_STATUS_CATASTROPHICERROR_Pos) /*!< Bit mask of
                                                                            CATASTROPHICERROR field.*/

/* SYMKEYSTORED @Bit 6 : Symmetric Keys are stored. */
  #define CRACENCORE_IKG_STATUS_SYMKEYSTORED_Pos (6UL)
  #define CRACENCORE_IKG_STATUS_SYMKEYSTORED_Msk (0x1UL << CRACENCORE_IKG_STATUS_SYMKEYSTORED_Pos) /*!< Bit mask of SYMKEYSTORED
                                                                            field.*/

/* PRIVKEYSTORED @Bit 7 : Private Keys are stored. */
  #define CRACENCORE_IKG_STATUS_PRIVKEYSTORED_Pos (7UL)
  #define CRACENCORE_IKG_STATUS_PRIVKEYSTORED_Msk (0x1UL << CRACENCORE_IKG_STATUS_PRIVKEYSTORED_Pos) /*!< Bit mask of
                                                                            PRIVKEYSTORED field.*/


/* CRACENCORE_IKG_INITDATA: InitData register. */
  #define CRACENCORE_IKG_INITDATA_ResetValue (0x00000000UL)

/* INITDATA @Bit 0 : Writing a 1 initialise Nonce and Personalisation_String registers counters, i.e. start writing from the 32
                     LSB. */

  #define CRACENCORE_IKG_INITDATA_INITDATA_Pos (0UL)
  #define CRACENCORE_IKG_INITDATA_INITDATA_Msk (0x1UL << CRACENCORE_IKG_INITDATA_INITDATA_Pos)


/* CRACENCORE_IKG_NONCE: Nonce register. */
  #define CRACENCORE_IKG_NONCE_ResetValue (0x00000000UL)

/* NONCE @Bits 0..31 : Nonce (write/read value 32-bit by 32-bit). */
  #define CRACENCORE_IKG_NONCE_NONCE_Pos (0UL)
  #define CRACENCORE_IKG_NONCE_NONCE_Msk (0xFFFFFFFFUL << CRACENCORE_IKG_NONCE_NONCE_Pos)


/* CRACENCORE_IKG_PERSONALISATIONSTRING: Personalisation String register. */
  #define CRACENCORE_IKG_PERSONALISATIONSTRING_ResetValue (0x00000000UL)

/* PERSONALISATIONSTRING @Bits 0..31 : Personalisation String (write/read value 32-bit by 32-bit). */
  #define CRACENCORE_IKG_PERSONALISATIONSTRING_PERSONALISATIONSTRING_Pos (0UL)
  #define CRACENCORE_IKG_PERSONALISATIONSTRING_PERSONALISATIONSTRING_Msk (0xFFFFFFFFUL << CRACENCORE_IKG_PERSONALISATIONSTRING_PERSONALISATIONSTRING_Pos)
                                                                            /*!< Bit mask of PERSONALISATIONSTRING field.*/


/* CRACENCORE_IKG_RESEEDINTERVALLSB: Reseed Interval LSB register. */
  #define CRACENCORE_IKG_RESEEDINTERVALLSB_ResetValue (0x80000000UL)

/* RESEEDINTERVALLSB @Bits 0..31 : Reseed Interval LSB. */
  #define CRACENCORE_IKG_RESEEDINTERVALLSB_RESEEDINTERVALLSB_Pos (0UL)
  #define CRACENCORE_IKG_RESEEDINTERVALLSB_RESEEDINTERVALLSB_Msk (0xFFFFFFFFUL << CRACENCORE_IKG_RESEEDINTERVALLSB_RESEEDINTERVALLSB_Pos)
                                                                            /*!< Bit mask of RESEEDINTERVALLSB field.*/


/* CRACENCORE_IKG_RESEEDINTERVALMSB: Reseed Interval MSB register. */
  #define CRACENCORE_IKG_RESEEDINTERVALMSB_ResetValue (0x00000000UL)

/* RESEEDINTERVALMSB @Bits 0..15 : Reseed Interval MSB. */
  #define CRACENCORE_IKG_RESEEDINTERVALMSB_RESEEDINTERVALMSB_Pos (0UL)
  #define CRACENCORE_IKG_RESEEDINTERVALMSB_RESEEDINTERVALMSB_Msk (0xFFFFUL << CRACENCORE_IKG_RESEEDINTERVALMSB_RESEEDINTERVALMSB_Pos)
                                                                            /*!< Bit mask of RESEEDINTERVALMSB field.*/


/* CRACENCORE_IKG_PKECONTROL: PKE Control register. */
  #define CRACENCORE_IKG_PKECONTROL_ResetValue (0x00000000UL)

/* PKESTART @Bit 0 : Start the PKE operation or trigger for Secure mode exit. */
  #define CRACENCORE_IKG_PKECONTROL_PKESTART_Pos (0UL)
  #define CRACENCORE_IKG_PKECONTROL_PKESTART_Msk (0x1UL << CRACENCORE_IKG_PKECONTROL_PKESTART_Pos) /*!< Bit mask of PKESTART
                                                                            field.*/

/* CLEARIRQ @Bit 1 : Clear the IRQ output. */
  #define CRACENCORE_IKG_PKECONTROL_CLEARIRQ_Pos (1UL)
  #define CRACENCORE_IKG_PKECONTROL_CLEARIRQ_Msk (0x1UL << CRACENCORE_IKG_PKECONTROL_CLEARIRQ_Pos) /*!< Bit mask of CLEARIRQ
                                                                            field.*/


/* CRACENCORE_IKG_PKECOMMAND: PKE Command register. */
  #define CRACENCORE_IKG_PKECOMMAND_ResetValue (0x00000000UL)

/* SECUREMODE @Bit 0 : Secure mode. */
  #define CRACENCORE_IKG_PKECOMMAND_SECUREMODE_Pos (0UL)
  #define CRACENCORE_IKG_PKECOMMAND_SECUREMODE_Msk (0x1UL << CRACENCORE_IKG_PKECOMMAND_SECUREMODE_Pos) /*!< Bit mask of
                                                                            SECUREMODE field.*/
  #define CRACENCORE_IKG_PKECOMMAND_SECUREMODE_Min (0x0UL)
  #define CRACENCORE_IKG_PKECOMMAND_SECUREMODE_Max (0x1UL)
  #define CRACENCORE_IKG_PKECOMMAND_SECUREMODE_DEACTIVATED (0x0UL)
  #define CRACENCORE_IKG_PKECOMMAND_SECUREMODE_ACTIVATED (0x1UL)

/* SELECTEDKEY @Bits 4..7 : Select Generated Private Key for PKE operation. */
  #define CRACENCORE_IKG_PKECOMMAND_SELECTEDKEY_Pos (4UL)
  #define CRACENCORE_IKG_PKECOMMAND_SELECTEDKEY_Msk (0xFUL << CRACENCORE_IKG_PKECOMMAND_SELECTEDKEY_Pos) /*!< Bit mask of
                                                                            SELECTEDKEY field.*/

/* OPSEL @Bits 8..9 : Select PKE operation with Isolated Key */
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_Pos (8UL)
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_Msk (0x3UL << CRACENCORE_IKG_PKECOMMAND_OPSEL_Pos)
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_Min (0x0UL)
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_Max (0x2UL)
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_PUBKEY (0x0UL)
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_ECDSA (0x1UL)
  #define CRACENCORE_IKG_PKECOMMAND_OPSEL_PTMUL (0x2UL)


/* CRACENCORE_IKG_PKESTATUS: PKE Status register. */
  #define CRACENCORE_IKG_PKESTATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error because either Private Keys are not stored or the operation is not defined. */
  #define CRACENCORE_IKG_PKESTATUS_ERROR_Pos (0UL)
  #define CRACENCORE_IKG_PKESTATUS_ERROR_Msk (0x1UL << CRACENCORE_IKG_PKESTATUS_ERROR_Pos)

/* STARTERROR @Bit 1 : Error because a new operation is started while the previous one is still busy. */
  #define CRACENCORE_IKG_PKESTATUS_STARTERROR_Pos (1UL)
  #define CRACENCORE_IKG_PKESTATUS_STARTERROR_Msk (0x1UL << CRACENCORE_IKG_PKESTATUS_STARTERROR_Pos) /*!< Bit mask of STARTERROR
                                                                            field.*/

/* IKGPKBUSY @Bit 16 : Busy, set when the operation starts and cleared when the operation is finished. */
  #define CRACENCORE_IKG_PKESTATUS_IKGPKBUSY_Pos (16UL)
  #define CRACENCORE_IKG_PKESTATUS_IKGPKBUSY_Msk (0x1UL << CRACENCORE_IKG_PKESTATUS_IKGPKBUSY_Pos) /*!< Bit mask of IKGPKBUSY
                                                                            field.*/

/* IRQSTATUS @Bit 17 : IRQ, set when the operation is finished and cleared when the CPU writes the bit 1 of PKE_Control Register
                       or a new operation is started. */

  #define CRACENCORE_IKG_PKESTATUS_IRQSTATUS_Pos (17UL)
  #define CRACENCORE_IKG_PKESTATUS_IRQSTATUS_Msk (0x1UL << CRACENCORE_IKG_PKESTATUS_IRQSTATUS_Pos) /*!< Bit mask of IRQSTATUS
                                                                            field.*/

/* ERASEBUSY @Bit 18 : The PKE Data RAM is being erased. */
  #define CRACENCORE_IKG_PKESTATUS_ERASEBUSY_Pos (18UL)
  #define CRACENCORE_IKG_PKESTATUS_ERASEBUSY_Msk (0x1UL << CRACENCORE_IKG_PKESTATUS_ERASEBUSY_Pos) /*!< Bit mask of ERASEBUSY
                                                                            field.*/


/* CRACENCORE_IKG_SOFTRST: SoftRst register. */
  #define CRACENCORE_IKG_SOFTRST_ResetValue (0x00000000UL)

/* SOFTRST @Bit 0 : Software reset: */
  #define CRACENCORE_IKG_SOFTRST_SOFTRST_Pos (0UL)
  #define CRACENCORE_IKG_SOFTRST_SOFTRST_Msk (0x1UL << CRACENCORE_IKG_SOFTRST_SOFTRST_Pos)
  #define CRACENCORE_IKG_SOFTRST_SOFTRST_Min (0x0UL)
  #define CRACENCORE_IKG_SOFTRST_SOFTRST_Max (0x1UL)
  #define CRACENCORE_IKG_SOFTRST_SOFTRST_NORMAL (0x0UL)
  #define CRACENCORE_IKG_SOFTRST_SOFTRST_KEY (0x1UL)


/* CRACENCORE_IKG_HWCONFIG: HwConfig register. */
  #define CRACENCORE_IKG_HWCONFIG_ResetValue (0xCC4C8312UL)

/* NBSYMKEYS @Bits 0..3 : Number of Symmetric Keys generated. */
  #define CRACENCORE_IKG_HWCONFIG_NBSYMKEYS_Pos (0UL)
  #define CRACENCORE_IKG_HWCONFIG_NBSYMKEYS_Msk (0xFUL << CRACENCORE_IKG_HWCONFIG_NBSYMKEYS_Pos) /*!< Bit mask of NBSYMKEYS
                                                                            field.*/

/* NBPRIVKEYS @Bits 4..7 : Number of Private Keys generated. */
  #define CRACENCORE_IKG_HWCONFIG_NBPRIVKEYS_Pos (4UL)
  #define CRACENCORE_IKG_HWCONFIG_NBPRIVKEYS_Msk (0xFUL << CRACENCORE_IKG_HWCONFIG_NBPRIVKEYS_Pos) /*!< Bit mask of NBPRIVKEYS
                                                                            field.*/

/* IKGCM @Bit 8 : Countermeasures for IKG operations are implemented when 1. */
  #define CRACENCORE_IKG_HWCONFIG_IKGCM_Pos (8UL)
  #define CRACENCORE_IKG_HWCONFIG_IKGCM_Msk (0x1UL << CRACENCORE_IKG_HWCONFIG_IKGCM_Pos)

/* HWHEALTHTEST @Bit 9 : CTR_DRBG health test is implemented when 1. */
  #define CRACENCORE_IKG_HWCONFIG_HWHEALTHTEST_Pos (9UL)
  #define CRACENCORE_IKG_HWCONFIG_HWHEALTHTEST_Msk (0x1UL << CRACENCORE_IKG_HWCONFIG_HWHEALTHTEST_Pos) /*!< Bit mask of
                                                                            HWHEALTHTEST field.*/

/* CURVE @Bits 10..11 : ECC curve for IKG (input). */
  #define CRACENCORE_IKG_HWCONFIG_CURVE_Pos (10UL)
  #define CRACENCORE_IKG_HWCONFIG_CURVE_Msk (0x3UL << CRACENCORE_IKG_HWCONFIG_CURVE_Pos)
  #define CRACENCORE_IKG_HWCONFIG_CURVE_Min (0x0UL)
  #define CRACENCORE_IKG_HWCONFIG_CURVE_Max (0x2UL)
  #define CRACENCORE_IKG_HWCONFIG_CURVE_P256 (0x0UL)
  #define CRACENCORE_IKG_HWCONFIG_CURVE_P384 (0x1UL)
  #define CRACENCORE_IKG_HWCONFIG_CURVE_P521 (0x2UL)

/* DF @Bit 12 : Derivation function is implemented in the CTR_DRBG when 1. */
  #define CRACENCORE_IKG_HWCONFIG_DF_Pos (12UL)
  #define CRACENCORE_IKG_HWCONFIG_DF_Msk (0x1UL << CRACENCORE_IKG_HWCONFIG_DF_Pos)

/* KEYSIZE @Bits 13..15 : AES Key Size support for the AES Core embedded in the CTR_DRBG. */
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_Pos (13UL)
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_Msk (0x7UL << CRACENCORE_IKG_HWCONFIG_KEYSIZE_Pos)
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_Min (0x1UL)
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_Max (0x4UL)
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_AES128 (0x1UL)
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_AES192 (0x2UL)
  #define CRACENCORE_IKG_HWCONFIG_KEYSIZE_AES256 (0x4UL)

/* ENTROPYINPUTLENGTH @Bits 16..19 : Value of g_entropy_input_length/32. */
  #define CRACENCORE_IKG_HWCONFIG_ENTROPYINPUTLENGTH_Pos (16UL)
  #define CRACENCORE_IKG_HWCONFIG_ENTROPYINPUTLENGTH_Msk (0xFUL << CRACENCORE_IKG_HWCONFIG_ENTROPYINPUTLENGTH_Pos) /*!< Bit mask
                                                                            of ENTROPYINPUTLENGTH field.*/

/* NONCELENGTH @Bits 20..23 : Value of g_nonce_length/32. */
  #define CRACENCORE_IKG_HWCONFIG_NONCELENGTH_Pos (20UL)
  #define CRACENCORE_IKG_HWCONFIG_NONCELENGTH_Msk (0xFUL << CRACENCORE_IKG_HWCONFIG_NONCELENGTH_Pos) /*!< Bit mask of
                                                                            NONCELENGTH field.*/

/* PERSONALIZATIONSTRINGLENGTH @Bits 24..27 : Value of g_personalization_string_length/32. */
  #define CRACENCORE_IKG_HWCONFIG_PERSONALIZATIONSTRINGLENGTH_Pos (24UL)
  #define CRACENCORE_IKG_HWCONFIG_PERSONALIZATIONSTRINGLENGTH_Msk (0xFUL << CRACENCORE_IKG_HWCONFIG_PERSONALIZATIONSTRINGLENGTH_Pos)
                                                                            /*!< Bit mask of PERSONALIZATIONSTRINGLENGTH field.*/

/* ADDITIONALINPUTLENGTH @Bits 28..31 : Value of g_additional_input_length/32. */
  #define CRACENCORE_IKG_HWCONFIG_ADDITIONALINPUTLENGTH_Pos (28UL)
  #define CRACENCORE_IKG_HWCONFIG_ADDITIONALINPUTLENGTH_Msk (0xFUL << CRACENCORE_IKG_HWCONFIG_ADDITIONALINPUTLENGTH_Pos) /*!<
                                                                            Bit mask of ADDITIONALINPUTLENGTH field.*/


/* ==================================================== Struct CRACENCORE ==================================================== */
/**
  * @brief CRACENCORE
  */
  typedef struct {
    __IOM NRF_CRACENCORE_CRYPTMSTRDMA_Type CRYPTMSTRDMA;
    __IM uint32_t RESERVED[240];
    __IOM NRF_CRACENCORE_CRYPTMSTRHW_Type CRYPTMSTRHW;
    __IM uint32_t RESERVED1[761];
    __IOM NRF_CRACENCORE_RNGCONTROL_Type RNGCONTROL;
    __IM uint32_t RESERVED2[992];
    __IOM NRF_CRACENCORE_PK_Type PK;
    __IM uint32_t RESERVED3[992];
    __IOM NRF_CRACENCORE_IKG_Type IKG;
  } NRF_CRACENCORE_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                        CTRLAPPERI                                        ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct CTRLAPPERI_MAILBOX ================================================ */
/**
  * @brief MAILBOX [CTRLAPPERI_MAILBOX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RXDATA;
  __IM  uint32_t  RXSTATUS;                          /*!< (@ 0x00000004) Status to indicate if data sent from the debugger to
                                                                         the CPU has been read.*/
  __IM  uint32_t  RESERVED[30];
  __IOM uint32_t  TXDATA;
  __IM  uint32_t  TXSTATUS;                          /*!< (@ 0x00000084) Status to indicate if data sent from the CPU to the
                                                                         debugger has been read.*/
} NRF_CTRLAPPERI_MAILBOX_Type;

/* CTRLAPPERI_MAILBOX_RXDATA: Data sent from the debugger to the CPU. */
  #define CTRLAPPERI_MAILBOX_RXDATA_ResetValue (0x00000000UL)

/* RXDATA @Bits 0..31 : Data received from debugger. */
  #define CTRLAPPERI_MAILBOX_RXDATA_RXDATA_Pos (0UL)
  #define CTRLAPPERI_MAILBOX_RXDATA_RXDATA_Msk (0xFFFFFFFFUL << CTRLAPPERI_MAILBOX_RXDATA_RXDATA_Pos) /*!< Bit mask of RXDATA
                                                                            field.*/


/* CTRLAPPERI_MAILBOX_RXSTATUS: Status to indicate if data sent from the debugger to the CPU has been read. */
  #define CTRLAPPERI_MAILBOX_RXSTATUS_ResetValue (0x00000000UL)

/* RXSTATUS @Bit 0 : Status of data in register RXDATA. */
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Pos (0UL)
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Msk (0x1UL << CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Pos) /*!< Bit mask of RXSTATUS
                                                                            field.*/
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Min (0x0UL)
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Max (0x1UL)
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_NoDataPending (0x0UL)
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_DataPending (0x1UL)


/* CTRLAPPERI_MAILBOX_TXDATA: Data sent from the CPU to the debugger. */
  #define CTRLAPPERI_MAILBOX_TXDATA_ResetValue (0x00000000UL)

/* TXDATA @Bits 0..31 : Data sent to debugger. */
  #define CTRLAPPERI_MAILBOX_TXDATA_TXDATA_Pos (0UL)
  #define CTRLAPPERI_MAILBOX_TXDATA_TXDATA_Msk (0xFFFFFFFFUL << CTRLAPPERI_MAILBOX_TXDATA_TXDATA_Pos) /*!< Bit mask of TXDATA
                                                                            field.*/


/* CTRLAPPERI_MAILBOX_TXSTATUS: Status to indicate if data sent from the CPU to the debugger has been read. */
  #define CTRLAPPERI_MAILBOX_TXSTATUS_ResetValue (0x00000000UL)

/* TXSTATUS @Bit 0 : Status of data in register TXDATA. */
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Pos (0UL)
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Msk (0x1UL << CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Pos) /*!< Bit mask of TXSTATUS
                                                                            field.*/
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Min (0x0UL)
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Max (0x1UL)
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_NoDataPending (0x0UL)
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_DataPending (0x1UL)



/* ============================================= Struct CTRLAPPERI_ERASEPROTECT ============================================== */
/**
  * @brief ERASEPROTECT [CTRLAPPERI_ERASEPROTECT] (unspecified)
  */
typedef struct {
  __IOM uint32_t  LOCK;                              /*!< (@ 0x00000000) This register locks the ERASEPROTECT.DISABLE register
                                                                         from being written until next reset.*/
  __OM  uint32_t  DISABLE;                           /*!< (@ 0x00000004) This register disables the ERASEPROTECT register and
                                                                         performs an ERASEALL operation.*/
} NRF_CTRLAPPERI_ERASEPROTECT_Type;

/* CTRLAPPERI_ERASEPROTECT_LOCK: This register locks the ERASEPROTECT.DISABLE register from being written until next reset. */
  #define CTRLAPPERI_ERASEPROTECT_LOCK_ResetValue (0x00000000UL)

/* LOCK @Bit 0 : Lock ERASEPROTECT.DISABLE register from being written until next reset. */
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Pos (0UL)
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Msk (0x1UL << CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Pos)
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Min (0x0UL)
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Max (0x1UL)
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Unlocked (0x0UL)
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Locked (0x1UL)


/* CTRLAPPERI_ERASEPROTECT_DISABLE: This register disables the ERASEPROTECT register and performs an ERASEALL operation. */
  #define CTRLAPPERI_ERASEPROTECT_DISABLE_ResetValue (0x00000000UL)

/* KEY @Bits 0..31 : The ERASEALL sequence is initiated if the value of the KEY fields are non-zero and the KEY fields match on
                     both the CPU and debugger sides. */

  #define CTRLAPPERI_ERASEPROTECT_DISABLE_KEY_Pos (0UL)
  #define CTRLAPPERI_ERASEPROTECT_DISABLE_KEY_Msk (0xFFFFFFFFUL << CTRLAPPERI_ERASEPROTECT_DISABLE_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/


/* ==================================================== Struct CTRLAPPERI ==================================================== */
/**
  * @brief Control access port
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_RXREADY;
    __IOM uint32_t EVENTS_TXDONE;
    __IM uint32_t RESERVED1[126];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED2[60];
    __IOM NRF_CTRLAPPERI_MAILBOX_Type MAILBOX;
    __IM uint32_t RESERVED3[30];
    __IOM NRF_CTRLAPPERI_ERASEPROTECT_Type ERASEPROTECT;
    __IM uint32_t RESERVED4[6];
    __OM uint32_t RESET;
  } NRF_CTRLAPPERI_Type;

/* CTRLAPPERI_EVENTS_RXREADY: RXSTATUS is changed to DataPending. */
  #define CTRLAPPERI_EVENTS_RXREADY_ResetValue (0x00000000UL)

/* EVENTS_RXREADY @Bit 0 : RXSTATUS is changed to DataPending. */
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Pos (0UL)
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Msk (0x1UL << CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Pos) /*!< Bit mask of
                                                                            EVENTS_RXREADY field.*/
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Min (0x0UL)
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Max (0x1UL)
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_NotGenerated (0x0UL)
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Generated (0x1UL)


/* CTRLAPPERI_EVENTS_TXDONE: TXSTATUS is changed to NoDataPending. */
  #define CTRLAPPERI_EVENTS_TXDONE_ResetValue (0x00000000UL)

/* EVENTS_TXDONE @Bit 0 : TXSTATUS is changed to NoDataPending. */
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Pos (0UL)
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Msk (0x1UL << CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Pos) /*!< Bit mask of
                                                                            EVENTS_TXDONE field.*/
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Min (0x0UL)
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Max (0x1UL)
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_NotGenerated (0x0UL)
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Generated (0x1UL)


/* CTRLAPPERI_INTEN: Enable or disable interrupt */
  #define CTRLAPPERI_INTEN_ResetValue (0x00000000UL)

/* RXREADY @Bit 0 : Enable or disable interrupt for event RXREADY */
  #define CTRLAPPERI_INTEN_RXREADY_Pos (0UL)
  #define CTRLAPPERI_INTEN_RXREADY_Msk (0x1UL << CTRLAPPERI_INTEN_RXREADY_Pos)
  #define CTRLAPPERI_INTEN_RXREADY_Min (0x0UL)
  #define CTRLAPPERI_INTEN_RXREADY_Max (0x1UL)
  #define CTRLAPPERI_INTEN_RXREADY_Disabled (0x0UL)
  #define CTRLAPPERI_INTEN_RXREADY_Enabled (0x1UL)

/* TXDONE @Bit 1 : Enable or disable interrupt for event TXDONE */
  #define CTRLAPPERI_INTEN_TXDONE_Pos (1UL)
  #define CTRLAPPERI_INTEN_TXDONE_Msk (0x1UL << CTRLAPPERI_INTEN_TXDONE_Pos)
  #define CTRLAPPERI_INTEN_TXDONE_Min (0x0UL)
  #define CTRLAPPERI_INTEN_TXDONE_Max (0x1UL)
  #define CTRLAPPERI_INTEN_TXDONE_Disabled (0x0UL)
  #define CTRLAPPERI_INTEN_TXDONE_Enabled (0x1UL)


/* CTRLAPPERI_INTENSET: Enable interrupt */
  #define CTRLAPPERI_INTENSET_ResetValue (0x00000000UL)

/* RXREADY @Bit 0 : Write '1' to enable interrupt for event RXREADY */
  #define CTRLAPPERI_INTENSET_RXREADY_Pos (0UL)
  #define CTRLAPPERI_INTENSET_RXREADY_Msk (0x1UL << CTRLAPPERI_INTENSET_RXREADY_Pos)
  #define CTRLAPPERI_INTENSET_RXREADY_Min (0x0UL)
  #define CTRLAPPERI_INTENSET_RXREADY_Max (0x1UL)
  #define CTRLAPPERI_INTENSET_RXREADY_Set (0x1UL)
  #define CTRLAPPERI_INTENSET_RXREADY_Disabled (0x0UL)
  #define CTRLAPPERI_INTENSET_RXREADY_Enabled (0x1UL)

/* TXDONE @Bit 1 : Write '1' to enable interrupt for event TXDONE */
  #define CTRLAPPERI_INTENSET_TXDONE_Pos (1UL)
  #define CTRLAPPERI_INTENSET_TXDONE_Msk (0x1UL << CTRLAPPERI_INTENSET_TXDONE_Pos)
  #define CTRLAPPERI_INTENSET_TXDONE_Min (0x0UL)
  #define CTRLAPPERI_INTENSET_TXDONE_Max (0x1UL)
  #define CTRLAPPERI_INTENSET_TXDONE_Set (0x1UL)
  #define CTRLAPPERI_INTENSET_TXDONE_Disabled (0x0UL)
  #define CTRLAPPERI_INTENSET_TXDONE_Enabled (0x1UL)


/* CTRLAPPERI_INTENCLR: Disable interrupt */
  #define CTRLAPPERI_INTENCLR_ResetValue (0x00000000UL)

/* RXREADY @Bit 0 : Write '1' to disable interrupt for event RXREADY */
  #define CTRLAPPERI_INTENCLR_RXREADY_Pos (0UL)
  #define CTRLAPPERI_INTENCLR_RXREADY_Msk (0x1UL << CTRLAPPERI_INTENCLR_RXREADY_Pos)
  #define CTRLAPPERI_INTENCLR_RXREADY_Min (0x0UL)
  #define CTRLAPPERI_INTENCLR_RXREADY_Max (0x1UL)
  #define CTRLAPPERI_INTENCLR_RXREADY_Clear (0x1UL)
  #define CTRLAPPERI_INTENCLR_RXREADY_Disabled (0x0UL)
  #define CTRLAPPERI_INTENCLR_RXREADY_Enabled (0x1UL)

/* TXDONE @Bit 1 : Write '1' to disable interrupt for event TXDONE */
  #define CTRLAPPERI_INTENCLR_TXDONE_Pos (1UL)
  #define CTRLAPPERI_INTENCLR_TXDONE_Msk (0x1UL << CTRLAPPERI_INTENCLR_TXDONE_Pos)
  #define CTRLAPPERI_INTENCLR_TXDONE_Min (0x0UL)
  #define CTRLAPPERI_INTENCLR_TXDONE_Max (0x1UL)
  #define CTRLAPPERI_INTENCLR_TXDONE_Clear (0x1UL)
  #define CTRLAPPERI_INTENCLR_TXDONE_Disabled (0x0UL)
  #define CTRLAPPERI_INTENCLR_TXDONE_Enabled (0x1UL)


/* CTRLAPPERI_INTPEND: Pending interrupts */
  #define CTRLAPPERI_INTPEND_ResetValue (0x00000000UL)

/* RXREADY @Bit 0 : Read pending status of interrupt for event RXREADY */
  #define CTRLAPPERI_INTPEND_RXREADY_Pos (0UL)
  #define CTRLAPPERI_INTPEND_RXREADY_Msk (0x1UL << CTRLAPPERI_INTPEND_RXREADY_Pos)
  #define CTRLAPPERI_INTPEND_RXREADY_Min (0x0UL)
  #define CTRLAPPERI_INTPEND_RXREADY_Max (0x1UL)
  #define CTRLAPPERI_INTPEND_RXREADY_NotPending (0x0UL)
  #define CTRLAPPERI_INTPEND_RXREADY_Pending (0x1UL)

/* TXDONE @Bit 1 : Read pending status of interrupt for event TXDONE */
  #define CTRLAPPERI_INTPEND_TXDONE_Pos (1UL)
  #define CTRLAPPERI_INTPEND_TXDONE_Msk (0x1UL << CTRLAPPERI_INTPEND_TXDONE_Pos)
  #define CTRLAPPERI_INTPEND_TXDONE_Min (0x0UL)
  #define CTRLAPPERI_INTPEND_TXDONE_Max (0x1UL)
  #define CTRLAPPERI_INTPEND_TXDONE_NotPending (0x0UL)
  #define CTRLAPPERI_INTPEND_TXDONE_Pending (0x1UL)


/* CTRLAPPERI_RESET: System reset request. */
  #define CTRLAPPERI_RESET_ResetValue (0x00000000UL)

/* RESET @Bits 0..2 : Reset request */
  #define CTRLAPPERI_RESET_RESET_Pos (0UL)
  #define CTRLAPPERI_RESET_RESET_Msk (0x7UL << CTRLAPPERI_RESET_RESET_Pos)
  #define CTRLAPPERI_RESET_RESET_Min (0x0UL)
  #define CTRLAPPERI_RESET_RESET_Max (0x4UL)
  #define CTRLAPPERI_RESET_RESET_NoReset (0x0UL)
  #define CTRLAPPERI_RESET_RESET_SoftReset (0x1UL)
  #define CTRLAPPERI_RESET_RESET_HardReset (0x2UL)
  #define CTRLAPPERI_RESET_RESET_PinReset (0x4UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           DPPIC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct DPPIC_TASKS_CHG ================================================== */
/**
  * @brief TASKS_CHG [DPPIC_TASKS_CHG] Channel group tasks
  */
typedef struct {
  __OM  uint32_t  EN;
  __OM  uint32_t  DIS;
} NRF_DPPIC_TASKS_CHG_Type;
  #define DPPIC_TASKS_CHG_MaxCount (6UL)
  #define DPPIC_TASKS_CHG_MaxIndex (5UL)
  #define DPPIC_TASKS_CHG_MinIndex (0UL)

/* DPPIC_TASKS_CHG_EN: Enable channel group n */
  #define DPPIC_TASKS_CHG_EN_ResetValue (0x00000000UL)

/* EN @Bit 0 : Enable channel group n */
  #define DPPIC_TASKS_CHG_EN_EN_Pos (0UL)
  #define DPPIC_TASKS_CHG_EN_EN_Msk (0x1UL << DPPIC_TASKS_CHG_EN_EN_Pos)
  #define DPPIC_TASKS_CHG_EN_EN_Min (0x1UL)
  #define DPPIC_TASKS_CHG_EN_EN_Max (0x1UL)
  #define DPPIC_TASKS_CHG_EN_EN_Trigger (0x1UL)


/* DPPIC_TASKS_CHG_DIS: Disable channel group n */
  #define DPPIC_TASKS_CHG_DIS_ResetValue (0x00000000UL)

/* DIS @Bit 0 : Disable channel group n */
  #define DPPIC_TASKS_CHG_DIS_DIS_Pos (0UL)
  #define DPPIC_TASKS_CHG_DIS_DIS_Msk (0x1UL << DPPIC_TASKS_CHG_DIS_DIS_Pos)
  #define DPPIC_TASKS_CHG_DIS_DIS_Min (0x1UL)
  #define DPPIC_TASKS_CHG_DIS_DIS_Max (0x1UL)
  #define DPPIC_TASKS_CHG_DIS_DIS_Trigger (0x1UL)



/* =============================================== Struct DPPIC_SUBSCRIBE_CHG ================================================ */
/**
  * @brief SUBSCRIBE_CHG [DPPIC_SUBSCRIBE_CHG] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  EN;
  __IOM uint32_t  DIS;
} NRF_DPPIC_SUBSCRIBE_CHG_Type;
  #define DPPIC_SUBSCRIBE_CHG_MaxCount (6UL)
  #define DPPIC_SUBSCRIBE_CHG_MaxIndex (5UL)
  #define DPPIC_SUBSCRIBE_CHG_MinIndex (0UL)

/* DPPIC_SUBSCRIBE_CHG_EN: Subscribe configuration for task CHG[n].EN */
  #define DPPIC_SUBSCRIBE_CHG_EN_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CHG[n].EN will subscribe to */
  #define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Pos (0UL)
  #define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Msk (0xFFUL << DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Pos)
  #define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Min (0x00UL)
  #define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Pos (31UL)
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Msk (0x1UL << DPPIC_SUBSCRIBE_CHG_EN_EN_Pos)
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Min (0x0UL)
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Max (0x1UL)
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Disabled (0x0UL)
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Enabled (0x1UL)


/* DPPIC_SUBSCRIBE_CHG_DIS: Subscribe configuration for task CHG[n].DIS */
  #define DPPIC_SUBSCRIBE_CHG_DIS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CHG[n].DIS will subscribe to */
  #define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Pos (0UL)
  #define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Msk (0xFFUL << DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Pos)
  #define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Min (0x00UL)
  #define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Pos (31UL)
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Msk (0x1UL << DPPIC_SUBSCRIBE_CHG_DIS_EN_Pos)
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Min (0x0UL)
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Max (0x1UL)
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Disabled (0x0UL)
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Enabled (0x1UL)


/* ====================================================== Struct DPPIC ======================================================= */
/**
  * @brief Distributed programmable peripheral interconnect controller
  */
  typedef struct {
    __OM NRF_DPPIC_TASKS_CHG_Type TASKS_CHG[6];
    __IM uint32_t RESERVED[20];
    __IOM NRF_DPPIC_SUBSCRIBE_CHG_Type SUBSCRIBE_CHG[6];
    __IM uint32_t RESERVED1[276];
    __IOM uint32_t CHEN;
    __IOM uint32_t CHENSET;
    __IOM uint32_t CHENCLR;
    __IM uint32_t RESERVED2[189];
    __IOM uint32_t CHG[6];                           /*!< (@ 0x00000800) Channel group n Note: Writes to this register are
                                                                         ignored if either SUBSCRIBE_CHG[n].EN or
                                                                         SUBSCRIBE_CHG[n].DIS is enabled*/
  } NRF_DPPIC_Type;

/* DPPIC_CHEN: Channel enable register */
  #define DPPIC_CHEN_ResetValue (0x00000000UL)

/* CH0 @Bit 0 : Enable or disable channel 0 */
  #define DPPIC_CHEN_CH0_Pos (0UL)
  #define DPPIC_CHEN_CH0_Msk (0x1UL << DPPIC_CHEN_CH0_Pos)
  #define DPPIC_CHEN_CH0_Min (0x0UL)
  #define DPPIC_CHEN_CH0_Max (0x1UL)
  #define DPPIC_CHEN_CH0_Disabled (0x0UL)
  #define DPPIC_CHEN_CH0_Enabled (0x1UL)

/* CH1 @Bit 1 : Enable or disable channel 1 */
  #define DPPIC_CHEN_CH1_Pos (1UL)
  #define DPPIC_CHEN_CH1_Msk (0x1UL << DPPIC_CHEN_CH1_Pos)
  #define DPPIC_CHEN_CH1_Min (0x0UL)
  #define DPPIC_CHEN_CH1_Max (0x1UL)
  #define DPPIC_CHEN_CH1_Disabled (0x0UL)
  #define DPPIC_CHEN_CH1_Enabled (0x1UL)

/* CH2 @Bit 2 : Enable or disable channel 2 */
  #define DPPIC_CHEN_CH2_Pos (2UL)
  #define DPPIC_CHEN_CH2_Msk (0x1UL << DPPIC_CHEN_CH2_Pos)
  #define DPPIC_CHEN_CH2_Min (0x0UL)
  #define DPPIC_CHEN_CH2_Max (0x1UL)
  #define DPPIC_CHEN_CH2_Disabled (0x0UL)
  #define DPPIC_CHEN_CH2_Enabled (0x1UL)

/* CH3 @Bit 3 : Enable or disable channel 3 */
  #define DPPIC_CHEN_CH3_Pos (3UL)
  #define DPPIC_CHEN_CH3_Msk (0x1UL << DPPIC_CHEN_CH3_Pos)
  #define DPPIC_CHEN_CH3_Min (0x0UL)
  #define DPPIC_CHEN_CH3_Max (0x1UL)
  #define DPPIC_CHEN_CH3_Disabled (0x0UL)
  #define DPPIC_CHEN_CH3_Enabled (0x1UL)

/* CH4 @Bit 4 : Enable or disable channel 4 */
  #define DPPIC_CHEN_CH4_Pos (4UL)
  #define DPPIC_CHEN_CH4_Msk (0x1UL << DPPIC_CHEN_CH4_Pos)
  #define DPPIC_CHEN_CH4_Min (0x0UL)
  #define DPPIC_CHEN_CH4_Max (0x1UL)
  #define DPPIC_CHEN_CH4_Disabled (0x0UL)
  #define DPPIC_CHEN_CH4_Enabled (0x1UL)

/* CH5 @Bit 5 : Enable or disable channel 5 */
  #define DPPIC_CHEN_CH5_Pos (5UL)
  #define DPPIC_CHEN_CH5_Msk (0x1UL << DPPIC_CHEN_CH5_Pos)
  #define DPPIC_CHEN_CH5_Min (0x0UL)
  #define DPPIC_CHEN_CH5_Max (0x1UL)
  #define DPPIC_CHEN_CH5_Disabled (0x0UL)
  #define DPPIC_CHEN_CH5_Enabled (0x1UL)

/* CH6 @Bit 6 : Enable or disable channel 6 */
  #define DPPIC_CHEN_CH6_Pos (6UL)
  #define DPPIC_CHEN_CH6_Msk (0x1UL << DPPIC_CHEN_CH6_Pos)
  #define DPPIC_CHEN_CH6_Min (0x0UL)
  #define DPPIC_CHEN_CH6_Max (0x1UL)
  #define DPPIC_CHEN_CH6_Disabled (0x0UL)
  #define DPPIC_CHEN_CH6_Enabled (0x1UL)

/* CH7 @Bit 7 : Enable or disable channel 7 */
  #define DPPIC_CHEN_CH7_Pos (7UL)
  #define DPPIC_CHEN_CH7_Msk (0x1UL << DPPIC_CHEN_CH7_Pos)
  #define DPPIC_CHEN_CH7_Min (0x0UL)
  #define DPPIC_CHEN_CH7_Max (0x1UL)
  #define DPPIC_CHEN_CH7_Disabled (0x0UL)
  #define DPPIC_CHEN_CH7_Enabled (0x1UL)

/* CH8 @Bit 8 : Enable or disable channel 8 */
  #define DPPIC_CHEN_CH8_Pos (8UL)
  #define DPPIC_CHEN_CH8_Msk (0x1UL << DPPIC_CHEN_CH8_Pos)
  #define DPPIC_CHEN_CH8_Min (0x0UL)
  #define DPPIC_CHEN_CH8_Max (0x1UL)
  #define DPPIC_CHEN_CH8_Disabled (0x0UL)
  #define DPPIC_CHEN_CH8_Enabled (0x1UL)

/* CH9 @Bit 9 : Enable or disable channel 9 */
  #define DPPIC_CHEN_CH9_Pos (9UL)
  #define DPPIC_CHEN_CH9_Msk (0x1UL << DPPIC_CHEN_CH9_Pos)
  #define DPPIC_CHEN_CH9_Min (0x0UL)
  #define DPPIC_CHEN_CH9_Max (0x1UL)
  #define DPPIC_CHEN_CH9_Disabled (0x0UL)
  #define DPPIC_CHEN_CH9_Enabled (0x1UL)

/* CH10 @Bit 10 : Enable or disable channel 10 */
  #define DPPIC_CHEN_CH10_Pos (10UL)
  #define DPPIC_CHEN_CH10_Msk (0x1UL << DPPIC_CHEN_CH10_Pos)
  #define DPPIC_CHEN_CH10_Min (0x0UL)
  #define DPPIC_CHEN_CH10_Max (0x1UL)
  #define DPPIC_CHEN_CH10_Disabled (0x0UL)
  #define DPPIC_CHEN_CH10_Enabled (0x1UL)

/* CH11 @Bit 11 : Enable or disable channel 11 */
  #define DPPIC_CHEN_CH11_Pos (11UL)
  #define DPPIC_CHEN_CH11_Msk (0x1UL << DPPIC_CHEN_CH11_Pos)
  #define DPPIC_CHEN_CH11_Min (0x0UL)
  #define DPPIC_CHEN_CH11_Max (0x1UL)
  #define DPPIC_CHEN_CH11_Disabled (0x0UL)
  #define DPPIC_CHEN_CH11_Enabled (0x1UL)

/* CH12 @Bit 12 : Enable or disable channel 12 */
  #define DPPIC_CHEN_CH12_Pos (12UL)
  #define DPPIC_CHEN_CH12_Msk (0x1UL << DPPIC_CHEN_CH12_Pos)
  #define DPPIC_CHEN_CH12_Min (0x0UL)
  #define DPPIC_CHEN_CH12_Max (0x1UL)
  #define DPPIC_CHEN_CH12_Disabled (0x0UL)
  #define DPPIC_CHEN_CH12_Enabled (0x1UL)

/* CH13 @Bit 13 : Enable or disable channel 13 */
  #define DPPIC_CHEN_CH13_Pos (13UL)
  #define DPPIC_CHEN_CH13_Msk (0x1UL << DPPIC_CHEN_CH13_Pos)
  #define DPPIC_CHEN_CH13_Min (0x0UL)
  #define DPPIC_CHEN_CH13_Max (0x1UL)
  #define DPPIC_CHEN_CH13_Disabled (0x0UL)
  #define DPPIC_CHEN_CH13_Enabled (0x1UL)

/* CH14 @Bit 14 : Enable or disable channel 14 */
  #define DPPIC_CHEN_CH14_Pos (14UL)
  #define DPPIC_CHEN_CH14_Msk (0x1UL << DPPIC_CHEN_CH14_Pos)
  #define DPPIC_CHEN_CH14_Min (0x0UL)
  #define DPPIC_CHEN_CH14_Max (0x1UL)
  #define DPPIC_CHEN_CH14_Disabled (0x0UL)
  #define DPPIC_CHEN_CH14_Enabled (0x1UL)

/* CH15 @Bit 15 : Enable or disable channel 15 */
  #define DPPIC_CHEN_CH15_Pos (15UL)
  #define DPPIC_CHEN_CH15_Msk (0x1UL << DPPIC_CHEN_CH15_Pos)
  #define DPPIC_CHEN_CH15_Min (0x0UL)
  #define DPPIC_CHEN_CH15_Max (0x1UL)
  #define DPPIC_CHEN_CH15_Disabled (0x0UL)
  #define DPPIC_CHEN_CH15_Enabled (0x1UL)

/* CH16 @Bit 16 : Enable or disable channel 16 */
  #define DPPIC_CHEN_CH16_Pos (16UL)
  #define DPPIC_CHEN_CH16_Msk (0x1UL << DPPIC_CHEN_CH16_Pos)
  #define DPPIC_CHEN_CH16_Min (0x0UL)
  #define DPPIC_CHEN_CH16_Max (0x1UL)
  #define DPPIC_CHEN_CH16_Disabled (0x0UL)
  #define DPPIC_CHEN_CH16_Enabled (0x1UL)

/* CH17 @Bit 17 : Enable or disable channel 17 */
  #define DPPIC_CHEN_CH17_Pos (17UL)
  #define DPPIC_CHEN_CH17_Msk (0x1UL << DPPIC_CHEN_CH17_Pos)
  #define DPPIC_CHEN_CH17_Min (0x0UL)
  #define DPPIC_CHEN_CH17_Max (0x1UL)
  #define DPPIC_CHEN_CH17_Disabled (0x0UL)
  #define DPPIC_CHEN_CH17_Enabled (0x1UL)

/* CH18 @Bit 18 : Enable or disable channel 18 */
  #define DPPIC_CHEN_CH18_Pos (18UL)
  #define DPPIC_CHEN_CH18_Msk (0x1UL << DPPIC_CHEN_CH18_Pos)
  #define DPPIC_CHEN_CH18_Min (0x0UL)
  #define DPPIC_CHEN_CH18_Max (0x1UL)
  #define DPPIC_CHEN_CH18_Disabled (0x0UL)
  #define DPPIC_CHEN_CH18_Enabled (0x1UL)

/* CH19 @Bit 19 : Enable or disable channel 19 */
  #define DPPIC_CHEN_CH19_Pos (19UL)
  #define DPPIC_CHEN_CH19_Msk (0x1UL << DPPIC_CHEN_CH19_Pos)
  #define DPPIC_CHEN_CH19_Min (0x0UL)
  #define DPPIC_CHEN_CH19_Max (0x1UL)
  #define DPPIC_CHEN_CH19_Disabled (0x0UL)
  #define DPPIC_CHEN_CH19_Enabled (0x1UL)

/* CH20 @Bit 20 : Enable or disable channel 20 */
  #define DPPIC_CHEN_CH20_Pos (20UL)
  #define DPPIC_CHEN_CH20_Msk (0x1UL << DPPIC_CHEN_CH20_Pos)
  #define DPPIC_CHEN_CH20_Min (0x0UL)
  #define DPPIC_CHEN_CH20_Max (0x1UL)
  #define DPPIC_CHEN_CH20_Disabled (0x0UL)
  #define DPPIC_CHEN_CH20_Enabled (0x1UL)

/* CH21 @Bit 21 : Enable or disable channel 21 */
  #define DPPIC_CHEN_CH21_Pos (21UL)
  #define DPPIC_CHEN_CH21_Msk (0x1UL << DPPIC_CHEN_CH21_Pos)
  #define DPPIC_CHEN_CH21_Min (0x0UL)
  #define DPPIC_CHEN_CH21_Max (0x1UL)
  #define DPPIC_CHEN_CH21_Disabled (0x0UL)
  #define DPPIC_CHEN_CH21_Enabled (0x1UL)

/* CH22 @Bit 22 : Enable or disable channel 22 */
  #define DPPIC_CHEN_CH22_Pos (22UL)
  #define DPPIC_CHEN_CH22_Msk (0x1UL << DPPIC_CHEN_CH22_Pos)
  #define DPPIC_CHEN_CH22_Min (0x0UL)
  #define DPPIC_CHEN_CH22_Max (0x1UL)
  #define DPPIC_CHEN_CH22_Disabled (0x0UL)
  #define DPPIC_CHEN_CH22_Enabled (0x1UL)

/* CH23 @Bit 23 : Enable or disable channel 23 */
  #define DPPIC_CHEN_CH23_Pos (23UL)
  #define DPPIC_CHEN_CH23_Msk (0x1UL << DPPIC_CHEN_CH23_Pos)
  #define DPPIC_CHEN_CH23_Min (0x0UL)
  #define DPPIC_CHEN_CH23_Max (0x1UL)
  #define DPPIC_CHEN_CH23_Disabled (0x0UL)
  #define DPPIC_CHEN_CH23_Enabled (0x1UL)


/* DPPIC_CHENSET: Channel enable set register */
  #define DPPIC_CHENSET_ResetValue (0x00000000UL)

/* CH0 @Bit 0 : Channel 0 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH0_Pos (0UL)
  #define DPPIC_CHENSET_CH0_Msk (0x1UL << DPPIC_CHENSET_CH0_Pos)
  #define DPPIC_CHENSET_CH0_Min (0x0UL)
  #define DPPIC_CHENSET_CH0_Max (0x1UL)
  #define DPPIC_CHENSET_CH0_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH0_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH0_Set (0x1UL)

/* CH1 @Bit 1 : Channel 1 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH1_Pos (1UL)
  #define DPPIC_CHENSET_CH1_Msk (0x1UL << DPPIC_CHENSET_CH1_Pos)
  #define DPPIC_CHENSET_CH1_Min (0x0UL)
  #define DPPIC_CHENSET_CH1_Max (0x1UL)
  #define DPPIC_CHENSET_CH1_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH1_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH1_Set (0x1UL)

/* CH2 @Bit 2 : Channel 2 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH2_Pos (2UL)
  #define DPPIC_CHENSET_CH2_Msk (0x1UL << DPPIC_CHENSET_CH2_Pos)
  #define DPPIC_CHENSET_CH2_Min (0x0UL)
  #define DPPIC_CHENSET_CH2_Max (0x1UL)
  #define DPPIC_CHENSET_CH2_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH2_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH2_Set (0x1UL)

/* CH3 @Bit 3 : Channel 3 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH3_Pos (3UL)
  #define DPPIC_CHENSET_CH3_Msk (0x1UL << DPPIC_CHENSET_CH3_Pos)
  #define DPPIC_CHENSET_CH3_Min (0x0UL)
  #define DPPIC_CHENSET_CH3_Max (0x1UL)
  #define DPPIC_CHENSET_CH3_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH3_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH3_Set (0x1UL)

/* CH4 @Bit 4 : Channel 4 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH4_Pos (4UL)
  #define DPPIC_CHENSET_CH4_Msk (0x1UL << DPPIC_CHENSET_CH4_Pos)
  #define DPPIC_CHENSET_CH4_Min (0x0UL)
  #define DPPIC_CHENSET_CH4_Max (0x1UL)
  #define DPPIC_CHENSET_CH4_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH4_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH4_Set (0x1UL)

/* CH5 @Bit 5 : Channel 5 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH5_Pos (5UL)
  #define DPPIC_CHENSET_CH5_Msk (0x1UL << DPPIC_CHENSET_CH5_Pos)
  #define DPPIC_CHENSET_CH5_Min (0x0UL)
  #define DPPIC_CHENSET_CH5_Max (0x1UL)
  #define DPPIC_CHENSET_CH5_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH5_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH5_Set (0x1UL)

/* CH6 @Bit 6 : Channel 6 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH6_Pos (6UL)
  #define DPPIC_CHENSET_CH6_Msk (0x1UL << DPPIC_CHENSET_CH6_Pos)
  #define DPPIC_CHENSET_CH6_Min (0x0UL)
  #define DPPIC_CHENSET_CH6_Max (0x1UL)
  #define DPPIC_CHENSET_CH6_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH6_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH6_Set (0x1UL)

/* CH7 @Bit 7 : Channel 7 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH7_Pos (7UL)
  #define DPPIC_CHENSET_CH7_Msk (0x1UL << DPPIC_CHENSET_CH7_Pos)
  #define DPPIC_CHENSET_CH7_Min (0x0UL)
  #define DPPIC_CHENSET_CH7_Max (0x1UL)
  #define DPPIC_CHENSET_CH7_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH7_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH7_Set (0x1UL)

/* CH8 @Bit 8 : Channel 8 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH8_Pos (8UL)
  #define DPPIC_CHENSET_CH8_Msk (0x1UL << DPPIC_CHENSET_CH8_Pos)
  #define DPPIC_CHENSET_CH8_Min (0x0UL)
  #define DPPIC_CHENSET_CH8_Max (0x1UL)
  #define DPPIC_CHENSET_CH8_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH8_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH8_Set (0x1UL)

/* CH9 @Bit 9 : Channel 9 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH9_Pos (9UL)
  #define DPPIC_CHENSET_CH9_Msk (0x1UL << DPPIC_CHENSET_CH9_Pos)
  #define DPPIC_CHENSET_CH9_Min (0x0UL)
  #define DPPIC_CHENSET_CH9_Max (0x1UL)
  #define DPPIC_CHENSET_CH9_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH9_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH9_Set (0x1UL)

/* CH10 @Bit 10 : Channel 10 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH10_Pos (10UL)
  #define DPPIC_CHENSET_CH10_Msk (0x1UL << DPPIC_CHENSET_CH10_Pos)
  #define DPPIC_CHENSET_CH10_Min (0x0UL)
  #define DPPIC_CHENSET_CH10_Max (0x1UL)
  #define DPPIC_CHENSET_CH10_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH10_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH10_Set (0x1UL)

/* CH11 @Bit 11 : Channel 11 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH11_Pos (11UL)
  #define DPPIC_CHENSET_CH11_Msk (0x1UL << DPPIC_CHENSET_CH11_Pos)
  #define DPPIC_CHENSET_CH11_Min (0x0UL)
  #define DPPIC_CHENSET_CH11_Max (0x1UL)
  #define DPPIC_CHENSET_CH11_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH11_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH11_Set (0x1UL)

/* CH12 @Bit 12 : Channel 12 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH12_Pos (12UL)
  #define DPPIC_CHENSET_CH12_Msk (0x1UL << DPPIC_CHENSET_CH12_Pos)
  #define DPPIC_CHENSET_CH12_Min (0x0UL)
  #define DPPIC_CHENSET_CH12_Max (0x1UL)
  #define DPPIC_CHENSET_CH12_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH12_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH12_Set (0x1UL)

/* CH13 @Bit 13 : Channel 13 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH13_Pos (13UL)
  #define DPPIC_CHENSET_CH13_Msk (0x1UL << DPPIC_CHENSET_CH13_Pos)
  #define DPPIC_CHENSET_CH13_Min (0x0UL)
  #define DPPIC_CHENSET_CH13_Max (0x1UL)
  #define DPPIC_CHENSET_CH13_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH13_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH13_Set (0x1UL)

/* CH14 @Bit 14 : Channel 14 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH14_Pos (14UL)
  #define DPPIC_CHENSET_CH14_Msk (0x1UL << DPPIC_CHENSET_CH14_Pos)
  #define DPPIC_CHENSET_CH14_Min (0x0UL)
  #define DPPIC_CHENSET_CH14_Max (0x1UL)
  #define DPPIC_CHENSET_CH14_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH14_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH14_Set (0x1UL)

/* CH15 @Bit 15 : Channel 15 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH15_Pos (15UL)
  #define DPPIC_CHENSET_CH15_Msk (0x1UL << DPPIC_CHENSET_CH15_Pos)
  #define DPPIC_CHENSET_CH15_Min (0x0UL)
  #define DPPIC_CHENSET_CH15_Max (0x1UL)
  #define DPPIC_CHENSET_CH15_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH15_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH15_Set (0x1UL)

/* CH16 @Bit 16 : Channel 16 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH16_Pos (16UL)
  #define DPPIC_CHENSET_CH16_Msk (0x1UL << DPPIC_CHENSET_CH16_Pos)
  #define DPPIC_CHENSET_CH16_Min (0x0UL)
  #define DPPIC_CHENSET_CH16_Max (0x1UL)
  #define DPPIC_CHENSET_CH16_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH16_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH16_Set (0x1UL)

/* CH17 @Bit 17 : Channel 17 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH17_Pos (17UL)
  #define DPPIC_CHENSET_CH17_Msk (0x1UL << DPPIC_CHENSET_CH17_Pos)
  #define DPPIC_CHENSET_CH17_Min (0x0UL)
  #define DPPIC_CHENSET_CH17_Max (0x1UL)
  #define DPPIC_CHENSET_CH17_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH17_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH17_Set (0x1UL)

/* CH18 @Bit 18 : Channel 18 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH18_Pos (18UL)
  #define DPPIC_CHENSET_CH18_Msk (0x1UL << DPPIC_CHENSET_CH18_Pos)
  #define DPPIC_CHENSET_CH18_Min (0x0UL)
  #define DPPIC_CHENSET_CH18_Max (0x1UL)
  #define DPPIC_CHENSET_CH18_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH18_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH18_Set (0x1UL)

/* CH19 @Bit 19 : Channel 19 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH19_Pos (19UL)
  #define DPPIC_CHENSET_CH19_Msk (0x1UL << DPPIC_CHENSET_CH19_Pos)
  #define DPPIC_CHENSET_CH19_Min (0x0UL)
  #define DPPIC_CHENSET_CH19_Max (0x1UL)
  #define DPPIC_CHENSET_CH19_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH19_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH19_Set (0x1UL)

/* CH20 @Bit 20 : Channel 20 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH20_Pos (20UL)
  #define DPPIC_CHENSET_CH20_Msk (0x1UL << DPPIC_CHENSET_CH20_Pos)
  #define DPPIC_CHENSET_CH20_Min (0x0UL)
  #define DPPIC_CHENSET_CH20_Max (0x1UL)
  #define DPPIC_CHENSET_CH20_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH20_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH20_Set (0x1UL)

/* CH21 @Bit 21 : Channel 21 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH21_Pos (21UL)
  #define DPPIC_CHENSET_CH21_Msk (0x1UL << DPPIC_CHENSET_CH21_Pos)
  #define DPPIC_CHENSET_CH21_Min (0x0UL)
  #define DPPIC_CHENSET_CH21_Max (0x1UL)
  #define DPPIC_CHENSET_CH21_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH21_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH21_Set (0x1UL)

/* CH22 @Bit 22 : Channel 22 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH22_Pos (22UL)
  #define DPPIC_CHENSET_CH22_Msk (0x1UL << DPPIC_CHENSET_CH22_Pos)
  #define DPPIC_CHENSET_CH22_Min (0x0UL)
  #define DPPIC_CHENSET_CH22_Max (0x1UL)
  #define DPPIC_CHENSET_CH22_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH22_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH22_Set (0x1UL)

/* CH23 @Bit 23 : Channel 23 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH23_Pos (23UL)
  #define DPPIC_CHENSET_CH23_Msk (0x1UL << DPPIC_CHENSET_CH23_Pos)
  #define DPPIC_CHENSET_CH23_Min (0x0UL)
  #define DPPIC_CHENSET_CH23_Max (0x1UL)
  #define DPPIC_CHENSET_CH23_Disabled (0x0UL)
  #define DPPIC_CHENSET_CH23_Enabled (0x1UL)
  #define DPPIC_CHENSET_CH23_Set (0x1UL)


/* DPPIC_CHENCLR: Channel enable clear register */
  #define DPPIC_CHENCLR_ResetValue (0x00000000UL)

/* CH0 @Bit 0 : Channel 0 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH0_Pos (0UL)
  #define DPPIC_CHENCLR_CH0_Msk (0x1UL << DPPIC_CHENCLR_CH0_Pos)
  #define DPPIC_CHENCLR_CH0_Min (0x0UL)
  #define DPPIC_CHENCLR_CH0_Max (0x1UL)
  #define DPPIC_CHENCLR_CH0_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH0_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH0_Clear (0x1UL)

/* CH1 @Bit 1 : Channel 1 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH1_Pos (1UL)
  #define DPPIC_CHENCLR_CH1_Msk (0x1UL << DPPIC_CHENCLR_CH1_Pos)
  #define DPPIC_CHENCLR_CH1_Min (0x0UL)
  #define DPPIC_CHENCLR_CH1_Max (0x1UL)
  #define DPPIC_CHENCLR_CH1_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH1_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH1_Clear (0x1UL)

/* CH2 @Bit 2 : Channel 2 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH2_Pos (2UL)
  #define DPPIC_CHENCLR_CH2_Msk (0x1UL << DPPIC_CHENCLR_CH2_Pos)
  #define DPPIC_CHENCLR_CH2_Min (0x0UL)
  #define DPPIC_CHENCLR_CH2_Max (0x1UL)
  #define DPPIC_CHENCLR_CH2_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH2_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH2_Clear (0x1UL)

/* CH3 @Bit 3 : Channel 3 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH3_Pos (3UL)
  #define DPPIC_CHENCLR_CH3_Msk (0x1UL << DPPIC_CHENCLR_CH3_Pos)
  #define DPPIC_CHENCLR_CH3_Min (0x0UL)
  #define DPPIC_CHENCLR_CH3_Max (0x1UL)
  #define DPPIC_CHENCLR_CH3_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH3_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH3_Clear (0x1UL)

/* CH4 @Bit 4 : Channel 4 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH4_Pos (4UL)
  #define DPPIC_CHENCLR_CH4_Msk (0x1UL << DPPIC_CHENCLR_CH4_Pos)
  #define DPPIC_CHENCLR_CH4_Min (0x0UL)
  #define DPPIC_CHENCLR_CH4_Max (0x1UL)
  #define DPPIC_CHENCLR_CH4_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH4_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH4_Clear (0x1UL)

/* CH5 @Bit 5 : Channel 5 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH5_Pos (5UL)
  #define DPPIC_CHENCLR_CH5_Msk (0x1UL << DPPIC_CHENCLR_CH5_Pos)
  #define DPPIC_CHENCLR_CH5_Min (0x0UL)
  #define DPPIC_CHENCLR_CH5_Max (0x1UL)
  #define DPPIC_CHENCLR_CH5_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH5_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH5_Clear (0x1UL)

/* CH6 @Bit 6 : Channel 6 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH6_Pos (6UL)
  #define DPPIC_CHENCLR_CH6_Msk (0x1UL << DPPIC_CHENCLR_CH6_Pos)
  #define DPPIC_CHENCLR_CH6_Min (0x0UL)
  #define DPPIC_CHENCLR_CH6_Max (0x1UL)
  #define DPPIC_CHENCLR_CH6_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH6_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH6_Clear (0x1UL)

/* CH7 @Bit 7 : Channel 7 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH7_Pos (7UL)
  #define DPPIC_CHENCLR_CH7_Msk (0x1UL << DPPIC_CHENCLR_CH7_Pos)
  #define DPPIC_CHENCLR_CH7_Min (0x0UL)
  #define DPPIC_CHENCLR_CH7_Max (0x1UL)
  #define DPPIC_CHENCLR_CH7_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH7_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH7_Clear (0x1UL)

/* CH8 @Bit 8 : Channel 8 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH8_Pos (8UL)
  #define DPPIC_CHENCLR_CH8_Msk (0x1UL << DPPIC_CHENCLR_CH8_Pos)
  #define DPPIC_CHENCLR_CH8_Min (0x0UL)
  #define DPPIC_CHENCLR_CH8_Max (0x1UL)
  #define DPPIC_CHENCLR_CH8_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH8_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH8_Clear (0x1UL)

/* CH9 @Bit 9 : Channel 9 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH9_Pos (9UL)
  #define DPPIC_CHENCLR_CH9_Msk (0x1UL << DPPIC_CHENCLR_CH9_Pos)
  #define DPPIC_CHENCLR_CH9_Min (0x0UL)
  #define DPPIC_CHENCLR_CH9_Max (0x1UL)
  #define DPPIC_CHENCLR_CH9_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH9_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH9_Clear (0x1UL)

/* CH10 @Bit 10 : Channel 10 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH10_Pos (10UL)
  #define DPPIC_CHENCLR_CH10_Msk (0x1UL << DPPIC_CHENCLR_CH10_Pos)
  #define DPPIC_CHENCLR_CH10_Min (0x0UL)
  #define DPPIC_CHENCLR_CH10_Max (0x1UL)
  #define DPPIC_CHENCLR_CH10_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH10_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH10_Clear (0x1UL)

/* CH11 @Bit 11 : Channel 11 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH11_Pos (11UL)
  #define DPPIC_CHENCLR_CH11_Msk (0x1UL << DPPIC_CHENCLR_CH11_Pos)
  #define DPPIC_CHENCLR_CH11_Min (0x0UL)
  #define DPPIC_CHENCLR_CH11_Max (0x1UL)
  #define DPPIC_CHENCLR_CH11_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH11_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH11_Clear (0x1UL)

/* CH12 @Bit 12 : Channel 12 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH12_Pos (12UL)
  #define DPPIC_CHENCLR_CH12_Msk (0x1UL << DPPIC_CHENCLR_CH12_Pos)
  #define DPPIC_CHENCLR_CH12_Min (0x0UL)
  #define DPPIC_CHENCLR_CH12_Max (0x1UL)
  #define DPPIC_CHENCLR_CH12_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH12_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH12_Clear (0x1UL)

/* CH13 @Bit 13 : Channel 13 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH13_Pos (13UL)
  #define DPPIC_CHENCLR_CH13_Msk (0x1UL << DPPIC_CHENCLR_CH13_Pos)
  #define DPPIC_CHENCLR_CH13_Min (0x0UL)
  #define DPPIC_CHENCLR_CH13_Max (0x1UL)
  #define DPPIC_CHENCLR_CH13_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH13_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH13_Clear (0x1UL)

/* CH14 @Bit 14 : Channel 14 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH14_Pos (14UL)
  #define DPPIC_CHENCLR_CH14_Msk (0x1UL << DPPIC_CHENCLR_CH14_Pos)
  #define DPPIC_CHENCLR_CH14_Min (0x0UL)
  #define DPPIC_CHENCLR_CH14_Max (0x1UL)
  #define DPPIC_CHENCLR_CH14_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH14_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH14_Clear (0x1UL)

/* CH15 @Bit 15 : Channel 15 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH15_Pos (15UL)
  #define DPPIC_CHENCLR_CH15_Msk (0x1UL << DPPIC_CHENCLR_CH15_Pos)
  #define DPPIC_CHENCLR_CH15_Min (0x0UL)
  #define DPPIC_CHENCLR_CH15_Max (0x1UL)
  #define DPPIC_CHENCLR_CH15_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH15_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH15_Clear (0x1UL)

/* CH16 @Bit 16 : Channel 16 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH16_Pos (16UL)
  #define DPPIC_CHENCLR_CH16_Msk (0x1UL << DPPIC_CHENCLR_CH16_Pos)
  #define DPPIC_CHENCLR_CH16_Min (0x0UL)
  #define DPPIC_CHENCLR_CH16_Max (0x1UL)
  #define DPPIC_CHENCLR_CH16_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH16_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH16_Clear (0x1UL)

/* CH17 @Bit 17 : Channel 17 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH17_Pos (17UL)
  #define DPPIC_CHENCLR_CH17_Msk (0x1UL << DPPIC_CHENCLR_CH17_Pos)
  #define DPPIC_CHENCLR_CH17_Min (0x0UL)
  #define DPPIC_CHENCLR_CH17_Max (0x1UL)
  #define DPPIC_CHENCLR_CH17_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH17_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH17_Clear (0x1UL)

/* CH18 @Bit 18 : Channel 18 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH18_Pos (18UL)
  #define DPPIC_CHENCLR_CH18_Msk (0x1UL << DPPIC_CHENCLR_CH18_Pos)
  #define DPPIC_CHENCLR_CH18_Min (0x0UL)
  #define DPPIC_CHENCLR_CH18_Max (0x1UL)
  #define DPPIC_CHENCLR_CH18_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH18_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH18_Clear (0x1UL)

/* CH19 @Bit 19 : Channel 19 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH19_Pos (19UL)
  #define DPPIC_CHENCLR_CH19_Msk (0x1UL << DPPIC_CHENCLR_CH19_Pos)
  #define DPPIC_CHENCLR_CH19_Min (0x0UL)
  #define DPPIC_CHENCLR_CH19_Max (0x1UL)
  #define DPPIC_CHENCLR_CH19_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH19_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH19_Clear (0x1UL)

/* CH20 @Bit 20 : Channel 20 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH20_Pos (20UL)
  #define DPPIC_CHENCLR_CH20_Msk (0x1UL << DPPIC_CHENCLR_CH20_Pos)
  #define DPPIC_CHENCLR_CH20_Min (0x0UL)
  #define DPPIC_CHENCLR_CH20_Max (0x1UL)
  #define DPPIC_CHENCLR_CH20_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH20_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH20_Clear (0x1UL)

/* CH21 @Bit 21 : Channel 21 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH21_Pos (21UL)
  #define DPPIC_CHENCLR_CH21_Msk (0x1UL << DPPIC_CHENCLR_CH21_Pos)
  #define DPPIC_CHENCLR_CH21_Min (0x0UL)
  #define DPPIC_CHENCLR_CH21_Max (0x1UL)
  #define DPPIC_CHENCLR_CH21_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH21_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH21_Clear (0x1UL)

/* CH22 @Bit 22 : Channel 22 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH22_Pos (22UL)
  #define DPPIC_CHENCLR_CH22_Msk (0x1UL << DPPIC_CHENCLR_CH22_Pos)
  #define DPPIC_CHENCLR_CH22_Min (0x0UL)
  #define DPPIC_CHENCLR_CH22_Max (0x1UL)
  #define DPPIC_CHENCLR_CH22_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH22_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH22_Clear (0x1UL)

/* CH23 @Bit 23 : Channel 23 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH23_Pos (23UL)
  #define DPPIC_CHENCLR_CH23_Msk (0x1UL << DPPIC_CHENCLR_CH23_Pos)
  #define DPPIC_CHENCLR_CH23_Min (0x0UL)
  #define DPPIC_CHENCLR_CH23_Max (0x1UL)
  #define DPPIC_CHENCLR_CH23_Disabled (0x0UL)
  #define DPPIC_CHENCLR_CH23_Enabled (0x1UL)
  #define DPPIC_CHENCLR_CH23_Clear (0x1UL)


/* DPPIC_CHG: Channel group n Note: Writes to this register are ignored if either SUBSCRIBE_CHG[n].EN or SUBSCRIBE_CHG[n].DIS is
               enabled */

  #define DPPIC_CHG_MaxCount (6UL)
  #define DPPIC_CHG_MaxIndex (5UL)
  #define DPPIC_CHG_MinIndex (0UL)
  #define DPPIC_CHG_ResetValue (0x00000000UL)

/* CH0 @Bit 0 : Include or exclude channel 0 */
  #define DPPIC_CHG_CH0_Pos (0UL)
  #define DPPIC_CHG_CH0_Msk (0x1UL << DPPIC_CHG_CH0_Pos)
  #define DPPIC_CHG_CH0_Min (0x0UL)
  #define DPPIC_CHG_CH0_Max (0x1UL)
  #define DPPIC_CHG_CH0_Excluded (0x0UL)
  #define DPPIC_CHG_CH0_Included (0x1UL)

/* CH1 @Bit 1 : Include or exclude channel 1 */
  #define DPPIC_CHG_CH1_Pos (1UL)
  #define DPPIC_CHG_CH1_Msk (0x1UL << DPPIC_CHG_CH1_Pos)
  #define DPPIC_CHG_CH1_Min (0x0UL)
  #define DPPIC_CHG_CH1_Max (0x1UL)
  #define DPPIC_CHG_CH1_Excluded (0x0UL)
  #define DPPIC_CHG_CH1_Included (0x1UL)

/* CH2 @Bit 2 : Include or exclude channel 2 */
  #define DPPIC_CHG_CH2_Pos (2UL)
  #define DPPIC_CHG_CH2_Msk (0x1UL << DPPIC_CHG_CH2_Pos)
  #define DPPIC_CHG_CH2_Min (0x0UL)
  #define DPPIC_CHG_CH2_Max (0x1UL)
  #define DPPIC_CHG_CH2_Excluded (0x0UL)
  #define DPPIC_CHG_CH2_Included (0x1UL)

/* CH3 @Bit 3 : Include or exclude channel 3 */
  #define DPPIC_CHG_CH3_Pos (3UL)
  #define DPPIC_CHG_CH3_Msk (0x1UL << DPPIC_CHG_CH3_Pos)
  #define DPPIC_CHG_CH3_Min (0x0UL)
  #define DPPIC_CHG_CH3_Max (0x1UL)
  #define DPPIC_CHG_CH3_Excluded (0x0UL)
  #define DPPIC_CHG_CH3_Included (0x1UL)

/* CH4 @Bit 4 : Include or exclude channel 4 */
  #define DPPIC_CHG_CH4_Pos (4UL)
  #define DPPIC_CHG_CH4_Msk (0x1UL << DPPIC_CHG_CH4_Pos)
  #define DPPIC_CHG_CH4_Min (0x0UL)
  #define DPPIC_CHG_CH4_Max (0x1UL)
  #define DPPIC_CHG_CH4_Excluded (0x0UL)
  #define DPPIC_CHG_CH4_Included (0x1UL)

/* CH5 @Bit 5 : Include or exclude channel 5 */
  #define DPPIC_CHG_CH5_Pos (5UL)
  #define DPPIC_CHG_CH5_Msk (0x1UL << DPPIC_CHG_CH5_Pos)
  #define DPPIC_CHG_CH5_Min (0x0UL)
  #define DPPIC_CHG_CH5_Max (0x1UL)
  #define DPPIC_CHG_CH5_Excluded (0x0UL)
  #define DPPIC_CHG_CH5_Included (0x1UL)

/* CH6 @Bit 6 : Include or exclude channel 6 */
  #define DPPIC_CHG_CH6_Pos (6UL)
  #define DPPIC_CHG_CH6_Msk (0x1UL << DPPIC_CHG_CH6_Pos)
  #define DPPIC_CHG_CH6_Min (0x0UL)
  #define DPPIC_CHG_CH6_Max (0x1UL)
  #define DPPIC_CHG_CH6_Excluded (0x0UL)
  #define DPPIC_CHG_CH6_Included (0x1UL)

/* CH7 @Bit 7 : Include or exclude channel 7 */
  #define DPPIC_CHG_CH7_Pos (7UL)
  #define DPPIC_CHG_CH7_Msk (0x1UL << DPPIC_CHG_CH7_Pos)
  #define DPPIC_CHG_CH7_Min (0x0UL)
  #define DPPIC_CHG_CH7_Max (0x1UL)
  #define DPPIC_CHG_CH7_Excluded (0x0UL)
  #define DPPIC_CHG_CH7_Included (0x1UL)

/* CH8 @Bit 8 : Include or exclude channel 8 */
  #define DPPIC_CHG_CH8_Pos (8UL)
  #define DPPIC_CHG_CH8_Msk (0x1UL << DPPIC_CHG_CH8_Pos)
  #define DPPIC_CHG_CH8_Min (0x0UL)
  #define DPPIC_CHG_CH8_Max (0x1UL)
  #define DPPIC_CHG_CH8_Excluded (0x0UL)
  #define DPPIC_CHG_CH8_Included (0x1UL)

/* CH9 @Bit 9 : Include or exclude channel 9 */
  #define DPPIC_CHG_CH9_Pos (9UL)
  #define DPPIC_CHG_CH9_Msk (0x1UL << DPPIC_CHG_CH9_Pos)
  #define DPPIC_CHG_CH9_Min (0x0UL)
  #define DPPIC_CHG_CH9_Max (0x1UL)
  #define DPPIC_CHG_CH9_Excluded (0x0UL)
  #define DPPIC_CHG_CH9_Included (0x1UL)

/* CH10 @Bit 10 : Include or exclude channel 10 */
  #define DPPIC_CHG_CH10_Pos (10UL)
  #define DPPIC_CHG_CH10_Msk (0x1UL << DPPIC_CHG_CH10_Pos)
  #define DPPIC_CHG_CH10_Min (0x0UL)
  #define DPPIC_CHG_CH10_Max (0x1UL)
  #define DPPIC_CHG_CH10_Excluded (0x0UL)
  #define DPPIC_CHG_CH10_Included (0x1UL)

/* CH11 @Bit 11 : Include or exclude channel 11 */
  #define DPPIC_CHG_CH11_Pos (11UL)
  #define DPPIC_CHG_CH11_Msk (0x1UL << DPPIC_CHG_CH11_Pos)
  #define DPPIC_CHG_CH11_Min (0x0UL)
  #define DPPIC_CHG_CH11_Max (0x1UL)
  #define DPPIC_CHG_CH11_Excluded (0x0UL)
  #define DPPIC_CHG_CH11_Included (0x1UL)

/* CH12 @Bit 12 : Include or exclude channel 12 */
  #define DPPIC_CHG_CH12_Pos (12UL)
  #define DPPIC_CHG_CH12_Msk (0x1UL << DPPIC_CHG_CH12_Pos)
  #define DPPIC_CHG_CH12_Min (0x0UL)
  #define DPPIC_CHG_CH12_Max (0x1UL)
  #define DPPIC_CHG_CH12_Excluded (0x0UL)
  #define DPPIC_CHG_CH12_Included (0x1UL)

/* CH13 @Bit 13 : Include or exclude channel 13 */
  #define DPPIC_CHG_CH13_Pos (13UL)
  #define DPPIC_CHG_CH13_Msk (0x1UL << DPPIC_CHG_CH13_Pos)
  #define DPPIC_CHG_CH13_Min (0x0UL)
  #define DPPIC_CHG_CH13_Max (0x1UL)
  #define DPPIC_CHG_CH13_Excluded (0x0UL)
  #define DPPIC_CHG_CH13_Included (0x1UL)

/* CH14 @Bit 14 : Include or exclude channel 14 */
  #define DPPIC_CHG_CH14_Pos (14UL)
  #define DPPIC_CHG_CH14_Msk (0x1UL << DPPIC_CHG_CH14_Pos)
  #define DPPIC_CHG_CH14_Min (0x0UL)
  #define DPPIC_CHG_CH14_Max (0x1UL)
  #define DPPIC_CHG_CH14_Excluded (0x0UL)
  #define DPPIC_CHG_CH14_Included (0x1UL)

/* CH15 @Bit 15 : Include or exclude channel 15 */
  #define DPPIC_CHG_CH15_Pos (15UL)
  #define DPPIC_CHG_CH15_Msk (0x1UL << DPPIC_CHG_CH15_Pos)
  #define DPPIC_CHG_CH15_Min (0x0UL)
  #define DPPIC_CHG_CH15_Max (0x1UL)
  #define DPPIC_CHG_CH15_Excluded (0x0UL)
  #define DPPIC_CHG_CH15_Included (0x1UL)

/* CH16 @Bit 16 : Include or exclude channel 16 */
  #define DPPIC_CHG_CH16_Pos (16UL)
  #define DPPIC_CHG_CH16_Msk (0x1UL << DPPIC_CHG_CH16_Pos)
  #define DPPIC_CHG_CH16_Min (0x0UL)
  #define DPPIC_CHG_CH16_Max (0x1UL)
  #define DPPIC_CHG_CH16_Excluded (0x0UL)
  #define DPPIC_CHG_CH16_Included (0x1UL)

/* CH17 @Bit 17 : Include or exclude channel 17 */
  #define DPPIC_CHG_CH17_Pos (17UL)
  #define DPPIC_CHG_CH17_Msk (0x1UL << DPPIC_CHG_CH17_Pos)
  #define DPPIC_CHG_CH17_Min (0x0UL)
  #define DPPIC_CHG_CH17_Max (0x1UL)
  #define DPPIC_CHG_CH17_Excluded (0x0UL)
  #define DPPIC_CHG_CH17_Included (0x1UL)

/* CH18 @Bit 18 : Include or exclude channel 18 */
  #define DPPIC_CHG_CH18_Pos (18UL)
  #define DPPIC_CHG_CH18_Msk (0x1UL << DPPIC_CHG_CH18_Pos)
  #define DPPIC_CHG_CH18_Min (0x0UL)
  #define DPPIC_CHG_CH18_Max (0x1UL)
  #define DPPIC_CHG_CH18_Excluded (0x0UL)
  #define DPPIC_CHG_CH18_Included (0x1UL)

/* CH19 @Bit 19 : Include or exclude channel 19 */
  #define DPPIC_CHG_CH19_Pos (19UL)
  #define DPPIC_CHG_CH19_Msk (0x1UL << DPPIC_CHG_CH19_Pos)
  #define DPPIC_CHG_CH19_Min (0x0UL)
  #define DPPIC_CHG_CH19_Max (0x1UL)
  #define DPPIC_CHG_CH19_Excluded (0x0UL)
  #define DPPIC_CHG_CH19_Included (0x1UL)

/* CH20 @Bit 20 : Include or exclude channel 20 */
  #define DPPIC_CHG_CH20_Pos (20UL)
  #define DPPIC_CHG_CH20_Msk (0x1UL << DPPIC_CHG_CH20_Pos)
  #define DPPIC_CHG_CH20_Min (0x0UL)
  #define DPPIC_CHG_CH20_Max (0x1UL)
  #define DPPIC_CHG_CH20_Excluded (0x0UL)
  #define DPPIC_CHG_CH20_Included (0x1UL)

/* CH21 @Bit 21 : Include or exclude channel 21 */
  #define DPPIC_CHG_CH21_Pos (21UL)
  #define DPPIC_CHG_CH21_Msk (0x1UL << DPPIC_CHG_CH21_Pos)
  #define DPPIC_CHG_CH21_Min (0x0UL)
  #define DPPIC_CHG_CH21_Max (0x1UL)
  #define DPPIC_CHG_CH21_Excluded (0x0UL)
  #define DPPIC_CHG_CH21_Included (0x1UL)

/* CH22 @Bit 22 : Include or exclude channel 22 */
  #define DPPIC_CHG_CH22_Pos (22UL)
  #define DPPIC_CHG_CH22_Msk (0x1UL << DPPIC_CHG_CH22_Pos)
  #define DPPIC_CHG_CH22_Min (0x0UL)
  #define DPPIC_CHG_CH22_Max (0x1UL)
  #define DPPIC_CHG_CH22_Excluded (0x0UL)
  #define DPPIC_CHG_CH22_Included (0x1UL)

/* CH23 @Bit 23 : Include or exclude channel 23 */
  #define DPPIC_CHG_CH23_Pos (23UL)
  #define DPPIC_CHG_CH23_Msk (0x1UL << DPPIC_CHG_CH23_Pos)
  #define DPPIC_CHG_CH23_Min (0x0UL)
  #define DPPIC_CHG_CH23_Max (0x1UL)
  #define DPPIC_CHG_CH23_Excluded (0x0UL)
  #define DPPIC_CHG_CH23_Included (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            ECB                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ===================================================== Struct ECB_KEY ====================================================== */
/**
  * @brief KEY [ECB_KEY] (unspecified)
  */
typedef struct {
  __OM  uint32_t  VALUE[4];
} NRF_ECB_KEY_Type;

/* ECB_KEY_VALUE: 128-bit AES key */
  #define ECB_KEY_VALUE_MaxCount (4UL)
  #define ECB_KEY_VALUE_MaxIndex (3UL)
  #define ECB_KEY_VALUE_MinIndex (0UL)
  #define ECB_KEY_VALUE_ResetValue (0x00000000UL)

/* VALUE @Bits 0..31 : AES 128-bit key value, bits (32*(n+1))-1 : (32*n) */
  #define ECB_KEY_VALUE_VALUE_Pos (0UL)
  #define ECB_KEY_VALUE_VALUE_Msk (0xFFFFFFFFUL << ECB_KEY_VALUE_VALUE_Pos)



/* ====================================================== Struct ECB_IN ====================================================== */
/**
  * @brief IN [ECB_IN] IN EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;
} NRF_ECB_IN_Type;

/* ECB_IN_PTR: Input pointer */
  #define ECB_IN_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Points to a job list containing unencrypted ECB data structure */
  #define ECB_IN_PTR_PTR_Pos (0UL)
  #define ECB_IN_PTR_PTR_Msk (0xFFFFFFFFUL << ECB_IN_PTR_PTR_Pos)



/* ===================================================== Struct ECB_OUT ====================================================== */
/**
  * @brief OUT [ECB_OUT] OUT EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000000) Output pointer Points to a job list containing
                                                                         encrypted ECB data structure*/
} NRF_ECB_OUT_Type;

/* ECB_OUT_PTR: Output pointer Points to a job list containing encrypted ECB data structure */
  #define ECB_OUT_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Output pointer */
  #define ECB_OUT_PTR_PTR_Pos (0UL)
  #define ECB_OUT_PTR_PTR_Msk (0xFFFFFFFFUL << ECB_OUT_PTR_PTR_Pos)


/* ======================================================= Struct ECB ======================================================== */
/**
  * @brief AES ECB Mode Encryption
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_END;
    __IOM uint32_t EVENTS_ERROR;                     /*!< (@ 0x00000104) ECB block encrypt aborted because of a STOP task or due
                                                                         to an error*/
    __IM uint32_t RESERVED2[30];
    __IOM uint32_t PUBLISH_END;
    __IOM uint32_t PUBLISH_ERROR;
    __IM uint32_t RESERVED3[95];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED4[61];
    __IM uint32_t ERRORSTATUS;
    __IM uint32_t RESERVED5[67];
    __IOM NRF_ECB_KEY_Type KEY;
    __IM uint32_t RESERVED6[4];
    __IOM NRF_ECB_IN_Type IN;
    __IM uint32_t RESERVED7;
    __IOM NRF_ECB_OUT_Type OUT;
  } NRF_ECB_Type;

/* ECB_TASKS_START: Start ECB block encrypt */
  #define ECB_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start ECB block encrypt */
  #define ECB_TASKS_START_TASKS_START_Pos (0UL)
  #define ECB_TASKS_START_TASKS_START_Msk (0x1UL << ECB_TASKS_START_TASKS_START_Pos)
  #define ECB_TASKS_START_TASKS_START_Min (0x1UL)
  #define ECB_TASKS_START_TASKS_START_Max (0x1UL)
  #define ECB_TASKS_START_TASKS_START_Trigger (0x1UL)


/* ECB_TASKS_STOP: Abort a possible executing ECB operation */
  #define ECB_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Abort a possible executing ECB operation */
  #define ECB_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define ECB_TASKS_STOP_TASKS_STOP_Msk (0x1UL << ECB_TASKS_STOP_TASKS_STOP_Pos)
  #define ECB_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define ECB_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define ECB_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* ECB_SUBSCRIBE_START: Subscribe configuration for task START */
  #define ECB_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define ECB_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define ECB_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << ECB_SUBSCRIBE_START_CHIDX_Pos)
  #define ECB_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define ECB_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define ECB_SUBSCRIBE_START_EN_Pos (31UL)
  #define ECB_SUBSCRIBE_START_EN_Msk (0x1UL << ECB_SUBSCRIBE_START_EN_Pos)
  #define ECB_SUBSCRIBE_START_EN_Min (0x0UL)
  #define ECB_SUBSCRIBE_START_EN_Max (0x1UL)
  #define ECB_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define ECB_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* ECB_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define ECB_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define ECB_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define ECB_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << ECB_SUBSCRIBE_STOP_CHIDX_Pos)
  #define ECB_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define ECB_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define ECB_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define ECB_SUBSCRIBE_STOP_EN_Msk (0x1UL << ECB_SUBSCRIBE_STOP_EN_Pos)
  #define ECB_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define ECB_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define ECB_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define ECB_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* ECB_EVENTS_END: ECB block encrypt complete */
  #define ECB_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : ECB block encrypt complete */
  #define ECB_EVENTS_END_EVENTS_END_Pos (0UL)
  #define ECB_EVENTS_END_EVENTS_END_Msk (0x1UL << ECB_EVENTS_END_EVENTS_END_Pos)
  #define ECB_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define ECB_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define ECB_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define ECB_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* ECB_EVENTS_ERROR: ECB block encrypt aborted because of a STOP task or due to an error */
  #define ECB_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : ECB block encrypt aborted because of a STOP task or due to an error */
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << ECB_EVENTS_ERROR_EVENTS_ERROR_Pos)
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* ECB_PUBLISH_END: Publish configuration for event END */
  #define ECB_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define ECB_PUBLISH_END_CHIDX_Pos (0UL)
  #define ECB_PUBLISH_END_CHIDX_Msk (0xFFUL << ECB_PUBLISH_END_CHIDX_Pos)
  #define ECB_PUBLISH_END_CHIDX_Min (0x00UL)
  #define ECB_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define ECB_PUBLISH_END_EN_Pos (31UL)
  #define ECB_PUBLISH_END_EN_Msk (0x1UL << ECB_PUBLISH_END_EN_Pos)
  #define ECB_PUBLISH_END_EN_Min (0x0UL)
  #define ECB_PUBLISH_END_EN_Max (0x1UL)
  #define ECB_PUBLISH_END_EN_Disabled (0x0UL)
  #define ECB_PUBLISH_END_EN_Enabled (0x1UL)


/* ECB_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define ECB_PUBLISH_ERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define ECB_PUBLISH_ERROR_CHIDX_Pos (0UL)
  #define ECB_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << ECB_PUBLISH_ERROR_CHIDX_Pos)
  #define ECB_PUBLISH_ERROR_CHIDX_Min (0x00UL)
  #define ECB_PUBLISH_ERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define ECB_PUBLISH_ERROR_EN_Pos (31UL)
  #define ECB_PUBLISH_ERROR_EN_Msk (0x1UL << ECB_PUBLISH_ERROR_EN_Pos)
  #define ECB_PUBLISH_ERROR_EN_Min (0x0UL)
  #define ECB_PUBLISH_ERROR_EN_Max (0x1UL)
  #define ECB_PUBLISH_ERROR_EN_Disabled (0x0UL)
  #define ECB_PUBLISH_ERROR_EN_Enabled (0x1UL)


/* ECB_INTENSET: Enable interrupt */
  #define ECB_INTENSET_ResetValue (0x00000000UL)

/* END @Bit 0 : Write '1' to enable interrupt for event END */
  #define ECB_INTENSET_END_Pos (0UL)
  #define ECB_INTENSET_END_Msk (0x1UL << ECB_INTENSET_END_Pos)
  #define ECB_INTENSET_END_Min (0x0UL)
  #define ECB_INTENSET_END_Max (0x1UL)
  #define ECB_INTENSET_END_Set (0x1UL)
  #define ECB_INTENSET_END_Disabled (0x0UL)
  #define ECB_INTENSET_END_Enabled (0x1UL)

/* ERROR @Bit 1 : Write '1' to enable interrupt for event ERROR */
  #define ECB_INTENSET_ERROR_Pos (1UL)
  #define ECB_INTENSET_ERROR_Msk (0x1UL << ECB_INTENSET_ERROR_Pos)
  #define ECB_INTENSET_ERROR_Min (0x0UL)
  #define ECB_INTENSET_ERROR_Max (0x1UL)
  #define ECB_INTENSET_ERROR_Set (0x1UL)
  #define ECB_INTENSET_ERROR_Disabled (0x0UL)
  #define ECB_INTENSET_ERROR_Enabled (0x1UL)


/* ECB_INTENCLR: Disable interrupt */
  #define ECB_INTENCLR_ResetValue (0x00000000UL)

/* END @Bit 0 : Write '1' to disable interrupt for event END */
  #define ECB_INTENCLR_END_Pos (0UL)
  #define ECB_INTENCLR_END_Msk (0x1UL << ECB_INTENCLR_END_Pos)
  #define ECB_INTENCLR_END_Min (0x0UL)
  #define ECB_INTENCLR_END_Max (0x1UL)
  #define ECB_INTENCLR_END_Clear (0x1UL)
  #define ECB_INTENCLR_END_Disabled (0x0UL)
  #define ECB_INTENCLR_END_Enabled (0x1UL)

/* ERROR @Bit 1 : Write '1' to disable interrupt for event ERROR */
  #define ECB_INTENCLR_ERROR_Pos (1UL)
  #define ECB_INTENCLR_ERROR_Msk (0x1UL << ECB_INTENCLR_ERROR_Pos)
  #define ECB_INTENCLR_ERROR_Min (0x0UL)
  #define ECB_INTENCLR_ERROR_Max (0x1UL)
  #define ECB_INTENCLR_ERROR_Clear (0x1UL)
  #define ECB_INTENCLR_ERROR_Disabled (0x0UL)
  #define ECB_INTENCLR_ERROR_Enabled (0x1UL)


/* ECB_ERRORSTATUS: Error status */
  #define ECB_ERRORSTATUS_ResetValue (0x00000000UL)

/* ERRORSTATUS @Bits 0..2 : Error status when the ERROR event is generated */
  #define ECB_ERRORSTATUS_ERRORSTATUS_Pos (0UL)
  #define ECB_ERRORSTATUS_ERRORSTATUS_Msk (0x7UL << ECB_ERRORSTATUS_ERRORSTATUS_Pos)
  #define ECB_ERRORSTATUS_ERRORSTATUS_Min (0x0UL)
  #define ECB_ERRORSTATUS_ERRORSTATUS_Max (0x4UL)
  #define ECB_ERRORSTATUS_ERRORSTATUS_NoError (0x0UL)
  #define ECB_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd (0x1UL)
  #define ECB_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd (0x2UL)
  #define ECB_ERRORSTATUS_ERRORSTATUS_EncryptionTooSlow (0x3UL) /*!< Encryption aborted due to higher priority peripheral
                                                                     requesting or using the AES module.*/
  #define ECB_ERRORSTATUS_ERRORSTATUS_Aborted (0x3UL) /*!< Encryption aborted due to higher priority peripheral requesting or
                                                           using the AES module.*/
  #define ECB_ERRORSTATUS_ERRORSTATUS_DmaError (0x4UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            EGU                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct EGU ======================================================== */
/**
  * @brief Event generator unit
  */
  typedef struct {
    __OM uint32_t TASKS_TRIGGER[16];                 /*!< (@ 0x00000000) Trigger n for triggering the corresponding TRIGGERED[n]
                                                                         event*/
    __IM uint32_t RESERVED[16];
    __IOM uint32_t SUBSCRIBE_TRIGGER[16];
    __IM uint32_t RESERVED1[16];
    __IOM uint32_t EVENTS_TRIGGERED[16];             /*!< (@ 0x00000100) Event number n generated by triggering the
                                                                         corresponding TRIGGER[n] task*/
    __IM uint32_t RESERVED2[16];
    __IOM uint32_t PUBLISH_TRIGGERED[16];
    __IM uint32_t RESERVED3[80];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
  } NRF_EGU_Type;

/* EGU_TASKS_TRIGGER: Trigger n for triggering the corresponding TRIGGERED[n] event */
  #define EGU_TASKS_TRIGGER_MaxCount (16UL)
  #define EGU_TASKS_TRIGGER_MaxIndex (15UL)
  #define EGU_TASKS_TRIGGER_MinIndex (0UL)
  #define EGU_TASKS_TRIGGER_ResetValue (0x00000000UL)

/* TASKS_TRIGGER @Bit 0 : Trigger n for triggering the corresponding TRIGGERED[n] event */
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Pos (0UL)
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Msk (0x1UL << EGU_TASKS_TRIGGER_TASKS_TRIGGER_Pos) /*!< Bit mask of TASKS_TRIGGER
                                                                            field.*/
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Min (0x1UL)
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Max (0x1UL)
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Trigger (0x1UL)


/* EGU_SUBSCRIBE_TRIGGER: Subscribe configuration for task TRIGGER[n] */
  #define EGU_SUBSCRIBE_TRIGGER_MaxCount (16UL)
  #define EGU_SUBSCRIBE_TRIGGER_MaxIndex (15UL)
  #define EGU_SUBSCRIBE_TRIGGER_MinIndex (0UL)
  #define EGU_SUBSCRIBE_TRIGGER_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task TRIGGER[n] will subscribe to */
  #define EGU_SUBSCRIBE_TRIGGER_CHIDX_Pos (0UL)
  #define EGU_SUBSCRIBE_TRIGGER_CHIDX_Msk (0xFFUL << EGU_SUBSCRIBE_TRIGGER_CHIDX_Pos)
  #define EGU_SUBSCRIBE_TRIGGER_CHIDX_Min (0x00UL)
  #define EGU_SUBSCRIBE_TRIGGER_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define EGU_SUBSCRIBE_TRIGGER_EN_Pos (31UL)
  #define EGU_SUBSCRIBE_TRIGGER_EN_Msk (0x1UL << EGU_SUBSCRIBE_TRIGGER_EN_Pos)
  #define EGU_SUBSCRIBE_TRIGGER_EN_Min (0x0UL)
  #define EGU_SUBSCRIBE_TRIGGER_EN_Max (0x1UL)
  #define EGU_SUBSCRIBE_TRIGGER_EN_Disabled (0x0UL)
  #define EGU_SUBSCRIBE_TRIGGER_EN_Enabled (0x1UL)


/* EGU_EVENTS_TRIGGERED: Event number n generated by triggering the corresponding TRIGGER[n] task */
  #define EGU_EVENTS_TRIGGERED_MaxCount (16UL)
  #define EGU_EVENTS_TRIGGERED_MaxIndex (15UL)
  #define EGU_EVENTS_TRIGGERED_MinIndex (0UL)
  #define EGU_EVENTS_TRIGGERED_ResetValue (0x00000000UL)

/* EVENTS_TRIGGERED @Bit 0 : Event number n generated by triggering the corresponding TRIGGER[n] task */
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos (0UL)
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Msk (0x1UL << EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos) /*!< Bit mask of
                                                                            EVENTS_TRIGGERED field.*/
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Min (0x0UL)
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Max (0x1UL)
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_NotGenerated (0x0UL)
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Generated (0x1UL)


/* EGU_PUBLISH_TRIGGERED: Publish configuration for event TRIGGERED[n] */
  #define EGU_PUBLISH_TRIGGERED_MaxCount (16UL)
  #define EGU_PUBLISH_TRIGGERED_MaxIndex (15UL)
  #define EGU_PUBLISH_TRIGGERED_MinIndex (0UL)
  #define EGU_PUBLISH_TRIGGERED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event TRIGGERED[n] will publish to */
  #define EGU_PUBLISH_TRIGGERED_CHIDX_Pos (0UL)
  #define EGU_PUBLISH_TRIGGERED_CHIDX_Msk (0xFFUL << EGU_PUBLISH_TRIGGERED_CHIDX_Pos)
  #define EGU_PUBLISH_TRIGGERED_CHIDX_Min (0x00UL)
  #define EGU_PUBLISH_TRIGGERED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define EGU_PUBLISH_TRIGGERED_EN_Pos (31UL)
  #define EGU_PUBLISH_TRIGGERED_EN_Msk (0x1UL << EGU_PUBLISH_TRIGGERED_EN_Pos)
  #define EGU_PUBLISH_TRIGGERED_EN_Min (0x0UL)
  #define EGU_PUBLISH_TRIGGERED_EN_Max (0x1UL)
  #define EGU_PUBLISH_TRIGGERED_EN_Disabled (0x0UL)
  #define EGU_PUBLISH_TRIGGERED_EN_Enabled (0x1UL)


/* EGU_INTEN: Enable or disable interrupt */
  #define EGU_INTEN_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Enable or disable interrupt for event TRIGGERED[0] */
  #define EGU_INTEN_TRIGGERED0_Pos (0UL)
  #define EGU_INTEN_TRIGGERED0_Msk (0x1UL << EGU_INTEN_TRIGGERED0_Pos)
  #define EGU_INTEN_TRIGGERED0_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED0_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED0_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Enable or disable interrupt for event TRIGGERED[1] */
  #define EGU_INTEN_TRIGGERED1_Pos (1UL)
  #define EGU_INTEN_TRIGGERED1_Msk (0x1UL << EGU_INTEN_TRIGGERED1_Pos)
  #define EGU_INTEN_TRIGGERED1_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED1_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED1_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Enable or disable interrupt for event TRIGGERED[2] */
  #define EGU_INTEN_TRIGGERED2_Pos (2UL)
  #define EGU_INTEN_TRIGGERED2_Msk (0x1UL << EGU_INTEN_TRIGGERED2_Pos)
  #define EGU_INTEN_TRIGGERED2_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED2_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED2_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Enable or disable interrupt for event TRIGGERED[3] */
  #define EGU_INTEN_TRIGGERED3_Pos (3UL)
  #define EGU_INTEN_TRIGGERED3_Msk (0x1UL << EGU_INTEN_TRIGGERED3_Pos)
  #define EGU_INTEN_TRIGGERED3_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED3_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED3_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED3_Enabled (0x1UL)

/* TRIGGERED4 @Bit 4 : Enable or disable interrupt for event TRIGGERED[4] */
  #define EGU_INTEN_TRIGGERED4_Pos (4UL)
  #define EGU_INTEN_TRIGGERED4_Msk (0x1UL << EGU_INTEN_TRIGGERED4_Pos)
  #define EGU_INTEN_TRIGGERED4_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED4_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED4_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED4_Enabled (0x1UL)

/* TRIGGERED5 @Bit 5 : Enable or disable interrupt for event TRIGGERED[5] */
  #define EGU_INTEN_TRIGGERED5_Pos (5UL)
  #define EGU_INTEN_TRIGGERED5_Msk (0x1UL << EGU_INTEN_TRIGGERED5_Pos)
  #define EGU_INTEN_TRIGGERED5_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED5_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED5_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED5_Enabled (0x1UL)

/* TRIGGERED6 @Bit 6 : Enable or disable interrupt for event TRIGGERED[6] */
  #define EGU_INTEN_TRIGGERED6_Pos (6UL)
  #define EGU_INTEN_TRIGGERED6_Msk (0x1UL << EGU_INTEN_TRIGGERED6_Pos)
  #define EGU_INTEN_TRIGGERED6_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED6_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED6_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED6_Enabled (0x1UL)

/* TRIGGERED7 @Bit 7 : Enable or disable interrupt for event TRIGGERED[7] */
  #define EGU_INTEN_TRIGGERED7_Pos (7UL)
  #define EGU_INTEN_TRIGGERED7_Msk (0x1UL << EGU_INTEN_TRIGGERED7_Pos)
  #define EGU_INTEN_TRIGGERED7_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED7_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED7_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED7_Enabled (0x1UL)

/* TRIGGERED8 @Bit 8 : Enable or disable interrupt for event TRIGGERED[8] */
  #define EGU_INTEN_TRIGGERED8_Pos (8UL)
  #define EGU_INTEN_TRIGGERED8_Msk (0x1UL << EGU_INTEN_TRIGGERED8_Pos)
  #define EGU_INTEN_TRIGGERED8_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED8_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED8_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED8_Enabled (0x1UL)

/* TRIGGERED9 @Bit 9 : Enable or disable interrupt for event TRIGGERED[9] */
  #define EGU_INTEN_TRIGGERED9_Pos (9UL)
  #define EGU_INTEN_TRIGGERED9_Msk (0x1UL << EGU_INTEN_TRIGGERED9_Pos)
  #define EGU_INTEN_TRIGGERED9_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED9_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED9_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED9_Enabled (0x1UL)

/* TRIGGERED10 @Bit 10 : Enable or disable interrupt for event TRIGGERED[10] */
  #define EGU_INTEN_TRIGGERED10_Pos (10UL)
  #define EGU_INTEN_TRIGGERED10_Msk (0x1UL << EGU_INTEN_TRIGGERED10_Pos)
  #define EGU_INTEN_TRIGGERED10_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED10_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED10_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED10_Enabled (0x1UL)

/* TRIGGERED11 @Bit 11 : Enable or disable interrupt for event TRIGGERED[11] */
  #define EGU_INTEN_TRIGGERED11_Pos (11UL)
  #define EGU_INTEN_TRIGGERED11_Msk (0x1UL << EGU_INTEN_TRIGGERED11_Pos)
  #define EGU_INTEN_TRIGGERED11_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED11_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED11_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED11_Enabled (0x1UL)

/* TRIGGERED12 @Bit 12 : Enable or disable interrupt for event TRIGGERED[12] */
  #define EGU_INTEN_TRIGGERED12_Pos (12UL)
  #define EGU_INTEN_TRIGGERED12_Msk (0x1UL << EGU_INTEN_TRIGGERED12_Pos)
  #define EGU_INTEN_TRIGGERED12_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED12_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED12_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED12_Enabled (0x1UL)

/* TRIGGERED13 @Bit 13 : Enable or disable interrupt for event TRIGGERED[13] */
  #define EGU_INTEN_TRIGGERED13_Pos (13UL)
  #define EGU_INTEN_TRIGGERED13_Msk (0x1UL << EGU_INTEN_TRIGGERED13_Pos)
  #define EGU_INTEN_TRIGGERED13_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED13_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED13_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED13_Enabled (0x1UL)

/* TRIGGERED14 @Bit 14 : Enable or disable interrupt for event TRIGGERED[14] */
  #define EGU_INTEN_TRIGGERED14_Pos (14UL)
  #define EGU_INTEN_TRIGGERED14_Msk (0x1UL << EGU_INTEN_TRIGGERED14_Pos)
  #define EGU_INTEN_TRIGGERED14_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED14_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED14_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED14_Enabled (0x1UL)

/* TRIGGERED15 @Bit 15 : Enable or disable interrupt for event TRIGGERED[15] */
  #define EGU_INTEN_TRIGGERED15_Pos (15UL)
  #define EGU_INTEN_TRIGGERED15_Msk (0x1UL << EGU_INTEN_TRIGGERED15_Pos)
  #define EGU_INTEN_TRIGGERED15_Min (0x0UL)
  #define EGU_INTEN_TRIGGERED15_Max (0x1UL)
  #define EGU_INTEN_TRIGGERED15_Disabled (0x0UL)
  #define EGU_INTEN_TRIGGERED15_Enabled (0x1UL)


/* EGU_INTENSET: Enable interrupt */
  #define EGU_INTENSET_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to enable interrupt for event TRIGGERED[0] */
  #define EGU_INTENSET_TRIGGERED0_Pos (0UL)
  #define EGU_INTENSET_TRIGGERED0_Msk (0x1UL << EGU_INTENSET_TRIGGERED0_Pos)
  #define EGU_INTENSET_TRIGGERED0_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED0_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED0_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED0_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to enable interrupt for event TRIGGERED[1] */
  #define EGU_INTENSET_TRIGGERED1_Pos (1UL)
  #define EGU_INTENSET_TRIGGERED1_Msk (0x1UL << EGU_INTENSET_TRIGGERED1_Pos)
  #define EGU_INTENSET_TRIGGERED1_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED1_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED1_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED1_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to enable interrupt for event TRIGGERED[2] */
  #define EGU_INTENSET_TRIGGERED2_Pos (2UL)
  #define EGU_INTENSET_TRIGGERED2_Msk (0x1UL << EGU_INTENSET_TRIGGERED2_Pos)
  #define EGU_INTENSET_TRIGGERED2_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED2_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED2_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED2_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to enable interrupt for event TRIGGERED[3] */
  #define EGU_INTENSET_TRIGGERED3_Pos (3UL)
  #define EGU_INTENSET_TRIGGERED3_Msk (0x1UL << EGU_INTENSET_TRIGGERED3_Pos)
  #define EGU_INTENSET_TRIGGERED3_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED3_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED3_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED3_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED3_Enabled (0x1UL)

/* TRIGGERED4 @Bit 4 : Write '1' to enable interrupt for event TRIGGERED[4] */
  #define EGU_INTENSET_TRIGGERED4_Pos (4UL)
  #define EGU_INTENSET_TRIGGERED4_Msk (0x1UL << EGU_INTENSET_TRIGGERED4_Pos)
  #define EGU_INTENSET_TRIGGERED4_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED4_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED4_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED4_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED4_Enabled (0x1UL)

/* TRIGGERED5 @Bit 5 : Write '1' to enable interrupt for event TRIGGERED[5] */
  #define EGU_INTENSET_TRIGGERED5_Pos (5UL)
  #define EGU_INTENSET_TRIGGERED5_Msk (0x1UL << EGU_INTENSET_TRIGGERED5_Pos)
  #define EGU_INTENSET_TRIGGERED5_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED5_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED5_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED5_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED5_Enabled (0x1UL)

/* TRIGGERED6 @Bit 6 : Write '1' to enable interrupt for event TRIGGERED[6] */
  #define EGU_INTENSET_TRIGGERED6_Pos (6UL)
  #define EGU_INTENSET_TRIGGERED6_Msk (0x1UL << EGU_INTENSET_TRIGGERED6_Pos)
  #define EGU_INTENSET_TRIGGERED6_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED6_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED6_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED6_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED6_Enabled (0x1UL)

/* TRIGGERED7 @Bit 7 : Write '1' to enable interrupt for event TRIGGERED[7] */
  #define EGU_INTENSET_TRIGGERED7_Pos (7UL)
  #define EGU_INTENSET_TRIGGERED7_Msk (0x1UL << EGU_INTENSET_TRIGGERED7_Pos)
  #define EGU_INTENSET_TRIGGERED7_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED7_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED7_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED7_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED7_Enabled (0x1UL)

/* TRIGGERED8 @Bit 8 : Write '1' to enable interrupt for event TRIGGERED[8] */
  #define EGU_INTENSET_TRIGGERED8_Pos (8UL)
  #define EGU_INTENSET_TRIGGERED8_Msk (0x1UL << EGU_INTENSET_TRIGGERED8_Pos)
  #define EGU_INTENSET_TRIGGERED8_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED8_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED8_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED8_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED8_Enabled (0x1UL)

/* TRIGGERED9 @Bit 9 : Write '1' to enable interrupt for event TRIGGERED[9] */
  #define EGU_INTENSET_TRIGGERED9_Pos (9UL)
  #define EGU_INTENSET_TRIGGERED9_Msk (0x1UL << EGU_INTENSET_TRIGGERED9_Pos)
  #define EGU_INTENSET_TRIGGERED9_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED9_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED9_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED9_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED9_Enabled (0x1UL)

/* TRIGGERED10 @Bit 10 : Write '1' to enable interrupt for event TRIGGERED[10] */
  #define EGU_INTENSET_TRIGGERED10_Pos (10UL)
  #define EGU_INTENSET_TRIGGERED10_Msk (0x1UL << EGU_INTENSET_TRIGGERED10_Pos)
  #define EGU_INTENSET_TRIGGERED10_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED10_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED10_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED10_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED10_Enabled (0x1UL)

/* TRIGGERED11 @Bit 11 : Write '1' to enable interrupt for event TRIGGERED[11] */
  #define EGU_INTENSET_TRIGGERED11_Pos (11UL)
  #define EGU_INTENSET_TRIGGERED11_Msk (0x1UL << EGU_INTENSET_TRIGGERED11_Pos)
  #define EGU_INTENSET_TRIGGERED11_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED11_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED11_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED11_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED11_Enabled (0x1UL)

/* TRIGGERED12 @Bit 12 : Write '1' to enable interrupt for event TRIGGERED[12] */
  #define EGU_INTENSET_TRIGGERED12_Pos (12UL)
  #define EGU_INTENSET_TRIGGERED12_Msk (0x1UL << EGU_INTENSET_TRIGGERED12_Pos)
  #define EGU_INTENSET_TRIGGERED12_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED12_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED12_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED12_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED12_Enabled (0x1UL)

/* TRIGGERED13 @Bit 13 : Write '1' to enable interrupt for event TRIGGERED[13] */
  #define EGU_INTENSET_TRIGGERED13_Pos (13UL)
  #define EGU_INTENSET_TRIGGERED13_Msk (0x1UL << EGU_INTENSET_TRIGGERED13_Pos)
  #define EGU_INTENSET_TRIGGERED13_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED13_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED13_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED13_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED13_Enabled (0x1UL)

/* TRIGGERED14 @Bit 14 : Write '1' to enable interrupt for event TRIGGERED[14] */
  #define EGU_INTENSET_TRIGGERED14_Pos (14UL)
  #define EGU_INTENSET_TRIGGERED14_Msk (0x1UL << EGU_INTENSET_TRIGGERED14_Pos)
  #define EGU_INTENSET_TRIGGERED14_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED14_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED14_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED14_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED14_Enabled (0x1UL)

/* TRIGGERED15 @Bit 15 : Write '1' to enable interrupt for event TRIGGERED[15] */
  #define EGU_INTENSET_TRIGGERED15_Pos (15UL)
  #define EGU_INTENSET_TRIGGERED15_Msk (0x1UL << EGU_INTENSET_TRIGGERED15_Pos)
  #define EGU_INTENSET_TRIGGERED15_Min (0x0UL)
  #define EGU_INTENSET_TRIGGERED15_Max (0x1UL)
  #define EGU_INTENSET_TRIGGERED15_Set (0x1UL)
  #define EGU_INTENSET_TRIGGERED15_Disabled (0x0UL)
  #define EGU_INTENSET_TRIGGERED15_Enabled (0x1UL)


/* EGU_INTENCLR: Disable interrupt */
  #define EGU_INTENCLR_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to disable interrupt for event TRIGGERED[0] */
  #define EGU_INTENCLR_TRIGGERED0_Pos (0UL)
  #define EGU_INTENCLR_TRIGGERED0_Msk (0x1UL << EGU_INTENCLR_TRIGGERED0_Pos)
  #define EGU_INTENCLR_TRIGGERED0_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED0_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED0_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED0_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to disable interrupt for event TRIGGERED[1] */
  #define EGU_INTENCLR_TRIGGERED1_Pos (1UL)
  #define EGU_INTENCLR_TRIGGERED1_Msk (0x1UL << EGU_INTENCLR_TRIGGERED1_Pos)
  #define EGU_INTENCLR_TRIGGERED1_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED1_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED1_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED1_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to disable interrupt for event TRIGGERED[2] */
  #define EGU_INTENCLR_TRIGGERED2_Pos (2UL)
  #define EGU_INTENCLR_TRIGGERED2_Msk (0x1UL << EGU_INTENCLR_TRIGGERED2_Pos)
  #define EGU_INTENCLR_TRIGGERED2_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED2_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED2_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED2_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to disable interrupt for event TRIGGERED[3] */
  #define EGU_INTENCLR_TRIGGERED3_Pos (3UL)
  #define EGU_INTENCLR_TRIGGERED3_Msk (0x1UL << EGU_INTENCLR_TRIGGERED3_Pos)
  #define EGU_INTENCLR_TRIGGERED3_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED3_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED3_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED3_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED3_Enabled (0x1UL)

/* TRIGGERED4 @Bit 4 : Write '1' to disable interrupt for event TRIGGERED[4] */
  #define EGU_INTENCLR_TRIGGERED4_Pos (4UL)
  #define EGU_INTENCLR_TRIGGERED4_Msk (0x1UL << EGU_INTENCLR_TRIGGERED4_Pos)
  #define EGU_INTENCLR_TRIGGERED4_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED4_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED4_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED4_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED4_Enabled (0x1UL)

/* TRIGGERED5 @Bit 5 : Write '1' to disable interrupt for event TRIGGERED[5] */
  #define EGU_INTENCLR_TRIGGERED5_Pos (5UL)
  #define EGU_INTENCLR_TRIGGERED5_Msk (0x1UL << EGU_INTENCLR_TRIGGERED5_Pos)
  #define EGU_INTENCLR_TRIGGERED5_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED5_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED5_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED5_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED5_Enabled (0x1UL)

/* TRIGGERED6 @Bit 6 : Write '1' to disable interrupt for event TRIGGERED[6] */
  #define EGU_INTENCLR_TRIGGERED6_Pos (6UL)
  #define EGU_INTENCLR_TRIGGERED6_Msk (0x1UL << EGU_INTENCLR_TRIGGERED6_Pos)
  #define EGU_INTENCLR_TRIGGERED6_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED6_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED6_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED6_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED6_Enabled (0x1UL)

/* TRIGGERED7 @Bit 7 : Write '1' to disable interrupt for event TRIGGERED[7] */
  #define EGU_INTENCLR_TRIGGERED7_Pos (7UL)
  #define EGU_INTENCLR_TRIGGERED7_Msk (0x1UL << EGU_INTENCLR_TRIGGERED7_Pos)
  #define EGU_INTENCLR_TRIGGERED7_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED7_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED7_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED7_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED7_Enabled (0x1UL)

/* TRIGGERED8 @Bit 8 : Write '1' to disable interrupt for event TRIGGERED[8] */
  #define EGU_INTENCLR_TRIGGERED8_Pos (8UL)
  #define EGU_INTENCLR_TRIGGERED8_Msk (0x1UL << EGU_INTENCLR_TRIGGERED8_Pos)
  #define EGU_INTENCLR_TRIGGERED8_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED8_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED8_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED8_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED8_Enabled (0x1UL)

/* TRIGGERED9 @Bit 9 : Write '1' to disable interrupt for event TRIGGERED[9] */
  #define EGU_INTENCLR_TRIGGERED9_Pos (9UL)
  #define EGU_INTENCLR_TRIGGERED9_Msk (0x1UL << EGU_INTENCLR_TRIGGERED9_Pos)
  #define EGU_INTENCLR_TRIGGERED9_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED9_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED9_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED9_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED9_Enabled (0x1UL)

/* TRIGGERED10 @Bit 10 : Write '1' to disable interrupt for event TRIGGERED[10] */
  #define EGU_INTENCLR_TRIGGERED10_Pos (10UL)
  #define EGU_INTENCLR_TRIGGERED10_Msk (0x1UL << EGU_INTENCLR_TRIGGERED10_Pos)
  #define EGU_INTENCLR_TRIGGERED10_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED10_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED10_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED10_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED10_Enabled (0x1UL)

/* TRIGGERED11 @Bit 11 : Write '1' to disable interrupt for event TRIGGERED[11] */
  #define EGU_INTENCLR_TRIGGERED11_Pos (11UL)
  #define EGU_INTENCLR_TRIGGERED11_Msk (0x1UL << EGU_INTENCLR_TRIGGERED11_Pos)
  #define EGU_INTENCLR_TRIGGERED11_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED11_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED11_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED11_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED11_Enabled (0x1UL)

/* TRIGGERED12 @Bit 12 : Write '1' to disable interrupt for event TRIGGERED[12] */
  #define EGU_INTENCLR_TRIGGERED12_Pos (12UL)
  #define EGU_INTENCLR_TRIGGERED12_Msk (0x1UL << EGU_INTENCLR_TRIGGERED12_Pos)
  #define EGU_INTENCLR_TRIGGERED12_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED12_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED12_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED12_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED12_Enabled (0x1UL)

/* TRIGGERED13 @Bit 13 : Write '1' to disable interrupt for event TRIGGERED[13] */
  #define EGU_INTENCLR_TRIGGERED13_Pos (13UL)
  #define EGU_INTENCLR_TRIGGERED13_Msk (0x1UL << EGU_INTENCLR_TRIGGERED13_Pos)
  #define EGU_INTENCLR_TRIGGERED13_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED13_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED13_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED13_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED13_Enabled (0x1UL)

/* TRIGGERED14 @Bit 14 : Write '1' to disable interrupt for event TRIGGERED[14] */
  #define EGU_INTENCLR_TRIGGERED14_Pos (14UL)
  #define EGU_INTENCLR_TRIGGERED14_Msk (0x1UL << EGU_INTENCLR_TRIGGERED14_Pos)
  #define EGU_INTENCLR_TRIGGERED14_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED14_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED14_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED14_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED14_Enabled (0x1UL)

/* TRIGGERED15 @Bit 15 : Write '1' to disable interrupt for event TRIGGERED[15] */
  #define EGU_INTENCLR_TRIGGERED15_Pos (15UL)
  #define EGU_INTENCLR_TRIGGERED15_Msk (0x1UL << EGU_INTENCLR_TRIGGERED15_Pos)
  #define EGU_INTENCLR_TRIGGERED15_Min (0x0UL)
  #define EGU_INTENCLR_TRIGGERED15_Max (0x1UL)
  #define EGU_INTENCLR_TRIGGERED15_Clear (0x1UL)
  #define EGU_INTENCLR_TRIGGERED15_Disabled (0x0UL)
  #define EGU_INTENCLR_TRIGGERED15_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            ETM                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct ETM ======================================================== */
/**
  * @brief Embedded Trace Macrocell
  */
  typedef struct {
    __IM uint32_t RESERVED;
    __IOM uint32_t TRCPRGCTLR;
    __IOM uint32_t TRCPROCSELR;                      /*!< (@ 0x00000008) Controls which PE to trace. Might ignore writes when
                                                                         the trace unit is enabled or not idle. Before writing
                                                                         to this register, ensure that TRCSTATR.IDLE == 1 so
                                                                         that the trace unit can synchronize with the chosen PE.
                                                                         Implemented if TRCIDR3.NUMPROC is greater than zero.*/
    __IOM uint32_t TRCSTATR;
    __IOM uint32_t TRCCONFIGR;                       /*!< (@ 0x00000010) Controls the tracing options This register must always
                                                                         be programmed as part of trace unit initialization.
                                                                         Might ignore writes when the trace unit is enabled or
                                                                         not idle.*/
    __IM uint32_t RESERVED1[3];
    __IOM uint32_t TRCEVENTCTL0R;                    /*!< (@ 0x00000020) Controls the tracing of arbitrary events. If the
                                                                         selected event occurs a trace element is generated in
                                                                         the trace stream according to the settings in
                                                                         TRCEVENTCTL1R.DATAEN and TRCEVENTCTL1R.INSTEN.*/
    __IOM uint32_t TRCEVENTCTL1R;                    /*!< (@ 0x00000024) Controls the behavior of the events that TRCEVENTCTL0R
                                                                         selects. This register must always be programmed as
                                                                         part of trace unit initialization. Might ignore writes
                                                                         when the trace unit is enabled or not idle.*/
    __IM uint32_t RESERVED2;
    __IOM uint32_t TRCSTALLCTLR;                     /*!< (@ 0x0000002C) Enables trace unit functionality that prevents trace
                                                                         unit buffer overflows. Might ignore writes when the
                                                                         trace unit is enabled or not idle. Must be programmed
                                                                         if TRCIDR3.STALLCTL == 1.*/
    __IOM uint32_t TRCTSCTLR;                        /*!< (@ 0x00000030) Controls the insertion of global timestamps in the
                                                                         trace streams. When the selected event is triggered,
                                                                         the trace unit inserts a global timestamp into the
                                                                         trace streams. Might ignore writes when the trace unit
                                                                         is enabled or not idle. Must be programmed if
                                                                         TRCCONFIGR.TS == 1.*/
    __IOM uint32_t TRCSYNCPR;                        /*!< (@ 0x00000034) Controls how often trace synchronization requests
                                                                         occur. Might ignore writes when the trace unit is
                                                                         enabled or not idle. If writes are permitted then the
                                                                         register must be programmed.*/
    __IOM uint32_t TRCCCCTLR;                        /*!< (@ 0x00000038) Sets the threshold value for cycle counting. Might
                                                                         ignore writes when the trace unit is enabled or not
                                                                         idle. Must be programmed if TRCCONFIGR.CCI==1.*/
    __IOM uint32_t TRCBBCTLR;                        /*!< (@ 0x0000003C) Controls which regions in the memory map are enabled to
                                                                         use branch broadcasting. Might ignore writes when the
                                                                         trace unit is enabled or not idle. Must be programmed
                                                                         if TRCCONFIGR.BB == 1.*/
    __IOM uint32_t TRCTRACEIDR;                      /*!< (@ 0x00000040) Sets the trace ID for instruction trace. If data trace
                                                                         is enabled then it also sets the trace ID for data
                                                                         trace, to (trace ID for instruction trace) + 1. This
                                                                         register must always be programmed as part of trace
                                                                         unit initialization. Might ignore writes when the trace
                                                                         unit is enabled or not idle.*/
    __IOM uint32_t TRCQCTLR;                         /*!< (@ 0x00000044) Controls when Q elements are enabled. Might ignore
                                                                         writes when the trace unit is enabled or not idle. This
                                                                         register must be programmed if it is implemented and
                                                                         TRCCONFIGR.QE is set to any value other than 0b00.*/
    __IM uint32_t RESERVED3[14];
    __IOM uint32_t TRCVICTLR;                        /*!< (@ 0x00000080) Controls instruction trace filtering. Might ignore
                                                                         writes when the trace unit is enabled or not idle. Only
                                                                         returns stable data when TRCSTATR.PMSTABLE == 1. Must
                                                                         be programmed, particularly to set the value of the
                                                                         SSSTATUS bit, which sets the state of the start/stop
                                                                         logic.*/
    __IOM uint32_t TRCVIIECTLR;                      /*!< (@ 0x00000084) ViewInst exclude control. Might ignore writes when the
                                                                         trace unit is enabled or not idle. This register must
                                                                         be programmed when one or more address comparators are
                                                                         implemented.*/
    __IOM uint32_t TRCVISSCTLR;                      /*!< (@ 0x00000088) Use this to set, or read, the single address
                                                                         comparators that control the ViewInst start/stop logic.
                                                                         The start/stop logic is active for an instruction which
                                                                         causes a start and remains active up to and including
                                                                         an instruction which causes a stop, and then the
                                                                         start/stop logic becomes inactive. Might ignore writes
                                                                         when the trace unit is enabled or not idle. If
                                                                         implemented then this register must be programmed.*/
    __IOM uint32_t TRCVIPCSSCTLR;                    /*!< (@ 0x0000008C) Use this to set, or read, which PE comparator inputs
                                                                         can control the ViewInst start/stop logic. Might ignore
                                                                         writes when the trace unit is enabled or not idle. If
                                                                         implemented then this register must be programmed.*/
    __IM uint32_t RESERVED4[4];
    __IOM uint32_t TRCVDCTLR;                        /*!< (@ 0x000000A0) Controls data trace filtering. Might ignore writes when
                                                                         the trace unit is enabled or not idle. This register
                                                                         must be programmed when data tracing is enabled, that
                                                                         is, when either TRCCONFIGR.DA == 1 or TRCCONFIGR.DV ==
                                                                         1.*/
    __IOM uint32_t TRCVDSACCTLR;                     /*!< (@ 0x000000A4) ViewData include / exclude control. Might ignore writes
                                                                         when the trace unit is enabled or not idle. This
                                                                         register must be programmed when one or more address
                                                                         comparators are implemented.*/
    __IOM uint32_t TRCVDARCCTLR;                     /*!< (@ 0x000000A8) ViewData include / exclude control. Might ignore writes
                                                                         when the trace unit is enabled or not idle. This
                                                                         register must be programmed when one or more address
                                                                         comparators are implemented.*/
    __IM uint32_t RESERVED5[21];
    __IOM uint32_t TRCSEQEVR[3];                     /*!< (@ 0x00000100) Moves the sequencer state according to programmed
                                                                         events. Might ignore writes when the trace unit is
                                                                         enabled or not idle. When the sequencer is used, all
                                                                         sequencer state transitions must be programmed with a
                                                                         valid event.*/
    __IM uint32_t RESERVED6[3];
    __IOM uint32_t TRCSEQRSTEVR;                     /*!< (@ 0x00000118) Moves the sequencer to state 0 when a programmed event
                                                                         occurs. Might ignore writes when the trace unit is
                                                                         enabled or not idle. When the sequencer is used, all
                                                                         sequencer state transitions must be programmed with a
                                                                         valid event.*/
    __IOM uint32_t TRCSEQSTR;                        /*!< (@ 0x0000011C) Use this to set, or read, the sequencer state. Might
                                                                         ignore writes when the trace unit is enabled or not
                                                                         idle. Only returns stable data when TRCSTATR.PMSTABLE
                                                                         == 1. When the sequencer is used, all sequencer state
                                                                         transitions must be programmed with a valid event.*/
    __IOM uint32_t TRCEXTINSELR;                     /*!< (@ 0x00000120) Use this to set, or read, which external inputs are
                                                                         resources to the trace unit. Might ignore writes when
                                                                         the trace unit is enabled or not idle. Only returns
                                                                         stable data when TRCSTATR.PMSTABLE == 1. When the
                                                                         sequencer is used, all sequencer state transitions must
                                                                         be programmed with a valid event.*/
    __IM uint32_t RESERVED7[7];
    __IOM uint32_t TRCCNTRLDVR[4];                   /*!< (@ 0x00000140) This sets or returns the reload count value for counter
                                                                         n. Might ignore writes when the trace unit is enabled
                                                                         or not idle.*/
    __IOM uint32_t TRCCNTCTLR[4];                    /*!< (@ 0x00000150) Controls the operation of counter n. Might ignore
                                                                         writes when the trace unit is enabled or not idle.*/
    __IOM uint32_t TRCCNTVR[4];                      /*!< (@ 0x00000160) This sets or returns the value of counter n. The count
                                                                         value is only stable when TRCSTATR.PMSTABLE == 1. If
                                                                         software uses counter n then it must write to this
                                                                         register to set the initial counter value. Might ignore
                                                                         writes when the trace unit is enabled or not idle.*/
    __IM uint32_t RESERVED8[36];
    __IOM uint32_t TRCRSCTLR[32];                    /*!< (@ 0x00000200) Controls the selection of the resources in the trace
                                                                         unit. Might ignore writes when the trace unit is
                                                                         enabled or not idle. If software selects a
                                                                         non-implemented resource then CONSTRAINED UNPREDICTABLE
                                                                         behavior of the resource selector occurs, so the
                                                                         resource selector might fire unexpectedly or might not
                                                                         fire. Reads of the TRCRSCTLRn might return UNKNOWN.*/
    __IOM uint32_t TRCSSCCR0;
    __IM uint32_t RESERVED9[7];
    __IOM uint32_t TRCSSCSR0;                        /*!< (@ 0x000002A0) Indicates the status of the single-shot comparators.
                                                                         TRCSSCSR0 is sensitive toinstruction addresses.*/
    __IM uint32_t RESERVED10[7];
    __IOM uint32_t TRCSSPCICR0;                      /*!< (@ 0x000002C0) Selects the processor comparator inputs for Single-shot
                                                                         control.*/
    __IM uint32_t RESERVED11[19];
    __IOM uint32_t TRCPDCR;
    __IOM uint32_t TRCPDSR;
    __IM uint32_t RESERVED12[755];
    __IOM uint32_t TRCITATBIDR;
    __IM uint32_t RESERVED13[3];
    __IOM uint32_t TRCITIATBINR;
    __IM uint32_t RESERVED14;
    __IOM uint32_t TRCITIATBOUTR;
    __IOM uint32_t TRCITCTRL;                        /*!< (@ 0x00000F00) Enables topology detection or integration testing, by
                                                                         putting ETM-M33 into integration mode.*/
    __IM uint32_t RESERVED15[39];
    __IOM uint32_t TRCCLAIMSET;                      /*!< (@ 0x00000FA0) Sets bits in the claim tag and determines the number of
                                                                         claim tag bits implemented.*/
    __IOM uint32_t TRCCLAIMCLR;                      /*!< (@ 0x00000FA4) Clears bits in the claim tag and determines the current
                                                                         value of the claim tag.*/
    __IM uint32_t RESERVED16[4];
    __IOM uint32_t TRCAUTHSTATUS;                    /*!< (@ 0x00000FB8) Indicates the current level of tracing permitted by the
                                                                         system*/
    __IM uint32_t TRCDEVARCH;                        /*!< (@ 0x00000FBC) The TRCDEVARCH identifies ETM-M33 as an ETMv4.2
                                                                         component*/
    __IM uint32_t RESERVED17[3];
    __IM uint32_t TRCDEVTYPE;
    __IOM uint32_t TRCPIDR[8];
    __IOM uint32_t TRCCIDR[4];
  } NRF_ETM_Type;

/* ETM_TRCPRGCTLR: Enables the trace unit. */
  #define ETM_TRCPRGCTLR_ResetValue (0x00000000UL)

/* EN @Bit 0 : Trace unit enable bit */
  #define ETM_TRCPRGCTLR_EN_Pos (0UL)
  #define ETM_TRCPRGCTLR_EN_Msk (0x1UL << ETM_TRCPRGCTLR_EN_Pos)
  #define ETM_TRCPRGCTLR_EN_Min (0x0UL)
  #define ETM_TRCPRGCTLR_EN_Max (0x1UL)
  #define ETM_TRCPRGCTLR_EN_Disabled (0x0UL)         /*!< The trace unit is disabled. All trace resources are inactive and no
                                                          trace is generated.*/
  #define ETM_TRCPRGCTLR_EN_Enabled (0x1UL)


/* ETM_TRCPROCSELR: Controls which PE to trace. Might ignore writes when the trace unit is enabled or not idle. Before writing
                     to this register, ensure that TRCSTATR.IDLE == 1 so that the trace unit can synchronize with the chosen PE.
                     Implemented if TRCIDR3.NUMPROC is greater than zero. */

  #define ETM_TRCPROCSELR_ResetValue (0x00000000UL)

/* PROCSEL @Bits 0..4 : PE select bits that select the PE to trace. */
  #define ETM_TRCPROCSELR_PROCSEL_Pos (0UL)
  #define ETM_TRCPROCSELR_PROCSEL_Msk (0x1FUL << ETM_TRCPROCSELR_PROCSEL_Pos)


/* ETM_TRCSTATR: Idle status bit */
  #define ETM_TRCSTATR_ResetValue (0x00000000UL)

/* IDLE @Bit 0 : Trace unit enable bit */
  #define ETM_TRCSTATR_IDLE_Pos (0UL)
  #define ETM_TRCSTATR_IDLE_Msk (0x1UL << ETM_TRCSTATR_IDLE_Pos)
  #define ETM_TRCSTATR_IDLE_Min (0x0UL)
  #define ETM_TRCSTATR_IDLE_Max (0x1UL)
  #define ETM_TRCSTATR_IDLE_NotIdle (0x0UL)
  #define ETM_TRCSTATR_IDLE_Idle (0x1UL)

/* PMSTABLE @Bit 1 : Programmers' model stable bit */
  #define ETM_TRCSTATR_PMSTABLE_Pos (1UL)
  #define ETM_TRCSTATR_PMSTABLE_Msk (0x1UL << ETM_TRCSTATR_PMSTABLE_Pos)
  #define ETM_TRCSTATR_PMSTABLE_Min (0x0UL)
  #define ETM_TRCSTATR_PMSTABLE_Max (0x1UL)
  #define ETM_TRCSTATR_PMSTABLE_NotStable (0x0UL)
  #define ETM_TRCSTATR_PMSTABLE_Stable (0x1UL)


/* ETM_TRCCONFIGR: Controls the tracing options This register must always be programmed as part of trace unit initialization.
                    Might ignore writes when the trace unit is enabled or not idle. */

  #define ETM_TRCCONFIGR_ResetValue (0x00000000UL)

/* LOADASP0INST @Bit 1 : Instruction P0 load field. This field controls whether load instructions are traced as P0 instructions.
                         */

  #define ETM_TRCCONFIGR_LOADASP0INST_Pos (1UL)
  #define ETM_TRCCONFIGR_LOADASP0INST_Msk (0x1UL << ETM_TRCCONFIGR_LOADASP0INST_Pos)
  #define ETM_TRCCONFIGR_LOADASP0INST_Min (0x0UL)
  #define ETM_TRCCONFIGR_LOADASP0INST_Max (0x1UL)
  #define ETM_TRCCONFIGR_LOADASP0INST_No (0x0UL)
  #define ETM_TRCCONFIGR_LOADASP0INST_Yes (0x1UL)

/* STOREASP0INST @Bit 2 : Instruction P0 field. This field controls whether store instructions are traced as P0 instructions. */
  #define ETM_TRCCONFIGR_STOREASP0INST_Pos (2UL)
  #define ETM_TRCCONFIGR_STOREASP0INST_Msk (0x1UL << ETM_TRCCONFIGR_STOREASP0INST_Pos)
  #define ETM_TRCCONFIGR_STOREASP0INST_Min (0x0UL)
  #define ETM_TRCCONFIGR_STOREASP0INST_Max (0x1UL)
  #define ETM_TRCCONFIGR_STOREASP0INST_No (0x0UL)
  #define ETM_TRCCONFIGR_STOREASP0INST_Yes (0x1UL)

/* BB @Bit 3 : Branch broadcast mode bit. */
  #define ETM_TRCCONFIGR_BB_Pos (3UL)
  #define ETM_TRCCONFIGR_BB_Msk (0x1UL << ETM_TRCCONFIGR_BB_Pos)
  #define ETM_TRCCONFIGR_BB_Min (0x0UL)
  #define ETM_TRCCONFIGR_BB_Max (0x1UL)
  #define ETM_TRCCONFIGR_BB_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_BB_Enabled (0x1UL)

/* CCI @Bit 4 : Cycle counting instruction trace bit. */
  #define ETM_TRCCONFIGR_CCI_Pos (4UL)
  #define ETM_TRCCONFIGR_CCI_Msk (0x1UL << ETM_TRCCONFIGR_CCI_Pos)
  #define ETM_TRCCONFIGR_CCI_Min (0x0UL)
  #define ETM_TRCCONFIGR_CCI_Max (0x1UL)
  #define ETM_TRCCONFIGR_CCI_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_CCI_Enabled (0x1UL)

/* CID @Bit 6 : Context ID tracing bit. */
  #define ETM_TRCCONFIGR_CID_Pos (6UL)
  #define ETM_TRCCONFIGR_CID_Msk (0x1UL << ETM_TRCCONFIGR_CID_Pos)
  #define ETM_TRCCONFIGR_CID_Min (0x0UL)
  #define ETM_TRCCONFIGR_CID_Max (0x1UL)
  #define ETM_TRCCONFIGR_CID_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_CID_Enabled (0x1UL)

/* VMID @Bit 7 : Virtual context identifier tracing bit. */
  #define ETM_TRCCONFIGR_VMID_Pos (7UL)
  #define ETM_TRCCONFIGR_VMID_Msk (0x1UL << ETM_TRCCONFIGR_VMID_Pos)
  #define ETM_TRCCONFIGR_VMID_Min (0x0UL)
  #define ETM_TRCCONFIGR_VMID_Max (0x1UL)
  #define ETM_TRCCONFIGR_VMID_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_VMID_Enabled (0x1UL)

/* COND @Bits 8..10 : Conditional instruction tracing bit. */
  #define ETM_TRCCONFIGR_COND_Pos (8UL)
  #define ETM_TRCCONFIGR_COND_Msk (0x7UL << ETM_TRCCONFIGR_COND_Pos)
  #define ETM_TRCCONFIGR_COND_Min (0x0UL)
  #define ETM_TRCCONFIGR_COND_Max (0x7UL)
  #define ETM_TRCCONFIGR_COND_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_COND_LoadOnly (0x1UL)
  #define ETM_TRCCONFIGR_COND_StoreOnly (0x2UL)
  #define ETM_TRCCONFIGR_COND_LoadAndStore (0x3UL)
  #define ETM_TRCCONFIGR_COND_All (0x7UL)

/* TS @Bit 11 : Global timestamp tracing bit. */
  #define ETM_TRCCONFIGR_TS_Pos (11UL)
  #define ETM_TRCCONFIGR_TS_Msk (0x1UL << ETM_TRCCONFIGR_TS_Pos)
  #define ETM_TRCCONFIGR_TS_Min (0x0UL)
  #define ETM_TRCCONFIGR_TS_Max (0x1UL)
  #define ETM_TRCCONFIGR_TS_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_TS_Enabled (0x1UL)

/* RS @Bit 12 : Return stack enable bit. */
  #define ETM_TRCCONFIGR_RS_Pos (12UL)
  #define ETM_TRCCONFIGR_RS_Msk (0x1UL << ETM_TRCCONFIGR_RS_Pos)
  #define ETM_TRCCONFIGR_RS_Min (0x0UL)
  #define ETM_TRCCONFIGR_RS_Max (0x1UL)
  #define ETM_TRCCONFIGR_RS_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_RS_Enabled (0x1UL)

/* QE @Bits 13..14 : Q element enable field. */
  #define ETM_TRCCONFIGR_QE_Pos (13UL)
  #define ETM_TRCCONFIGR_QE_Msk (0x3UL << ETM_TRCCONFIGR_QE_Pos)
  #define ETM_TRCCONFIGR_QE_Min (0x0UL)
  #define ETM_TRCCONFIGR_QE_Max (0x3UL)
  #define ETM_TRCCONFIGR_QE_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_QE_OnlyWithoutInstCounts (0x1UL) /*!< Q elements with instruction counts are enabled. Q elements
                                                               without instruction counts are disabled.*/
  #define ETM_TRCCONFIGR_QE_Enabled (0x3UL)

/* VMIDOPT @Bit 15 : Control bit to select the Virtual context identifier value used by the trace unit, both for trace
                     generation and in the Virtual context identifier comparators. */

  #define ETM_TRCCONFIGR_VMIDOPT_Pos (15UL)
  #define ETM_TRCCONFIGR_VMIDOPT_Msk (0x1UL << ETM_TRCCONFIGR_VMIDOPT_Pos)
  #define ETM_TRCCONFIGR_VMIDOPT_Min (0x0UL)
  #define ETM_TRCCONFIGR_VMIDOPT_Max (0x1UL)
  #define ETM_TRCCONFIGR_VMIDOPT_VTTBR_EL2 (0x0UL)   /*!< VTTBR_EL2.VMID is used. If the trace unit supports a Virtual context
                                                          identifier larger than the VTTBR_EL2.VMID, the upper unused bits are
                                                          always zero. If the trace unit supports a Virtual context identifier
                                                          larger than 8 bits and if the VTCR_EL2.VS bit forces use of an 8-bit
                                                          Virtual context identifier, bits [15:8] of the trace unit Virtual
                                                          context identifier are always zero.*/
  #define ETM_TRCCONFIGR_VMIDOPT_CONTEXTIDR_EL2 (0x1UL)

/* DA @Bit 16 : Data address tracing bit. */
  #define ETM_TRCCONFIGR_DA_Pos (16UL)
  #define ETM_TRCCONFIGR_DA_Msk (0x1UL << ETM_TRCCONFIGR_DA_Pos)
  #define ETM_TRCCONFIGR_DA_Min (0x0UL)
  #define ETM_TRCCONFIGR_DA_Max (0x1UL)
  #define ETM_TRCCONFIGR_DA_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_DA_Enabled (0x1UL)

/* DV @Bit 17 : Data value tracing bit. */
  #define ETM_TRCCONFIGR_DV_Pos (17UL)
  #define ETM_TRCCONFIGR_DV_Msk (0x1UL << ETM_TRCCONFIGR_DV_Pos)
  #define ETM_TRCCONFIGR_DV_Min (0x0UL)
  #define ETM_TRCCONFIGR_DV_Max (0x1UL)
  #define ETM_TRCCONFIGR_DV_Disabled (0x0UL)
  #define ETM_TRCCONFIGR_DV_Enabled (0x1UL)


/* ETM_TRCEVENTCTL0R: Controls the tracing of arbitrary events. If the selected event occurs a trace element is generated in the
                       trace stream according to the settings in TRCEVENTCTL1R.DATAEN and TRCEVENTCTL1R.INSTEN. */

  #define ETM_TRCEVENTCTL0R_ResetValue (0x00000000UL)

/* EVENT @Bits 0..7 : Select which event should generate trace elements. */
  #define ETM_TRCEVENTCTL0R_EVENT_Pos (0UL)
  #define ETM_TRCEVENTCTL0R_EVENT_Msk (0xFFUL << ETM_TRCEVENTCTL0R_EVENT_Pos)
  #define ETM_TRCEVENTCTL0R_EVENT_Min (0x00UL)
  #define ETM_TRCEVENTCTL0R_EVENT_Max (0xFFUL)


/* ETM_TRCEVENTCTL1R: Controls the behavior of the events that TRCEVENTCTL0R selects. This register must always be programmed as
                       part of trace unit initialization. Might ignore writes when the trace unit is enabled or not idle. */

  #define ETM_TRCEVENTCTL1R_ResetValue (0x00000000UL)

/* INSTEN0 @Bit 0 : Instruction event enable field. */
  #define ETM_TRCEVENTCTL1R_INSTEN0_Pos (0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN0_Msk (0x1UL << ETM_TRCEVENTCTL1R_INSTEN0_Pos)
  #define ETM_TRCEVENTCTL1R_INSTEN0_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN0_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_INSTEN0_Disabled (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN0_Enabled (0x1UL)  /*!< The trace unit generates an Event element for event 0, in the
                                                          instruction trace stream.*/

/* INSTEN1 @Bit 1 : Instruction event enable field. */
  #define ETM_TRCEVENTCTL1R_INSTEN1_Pos (1UL)
  #define ETM_TRCEVENTCTL1R_INSTEN1_Msk (0x1UL << ETM_TRCEVENTCTL1R_INSTEN1_Pos)
  #define ETM_TRCEVENTCTL1R_INSTEN1_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN1_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_INSTEN1_Disabled (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN1_Enabled (0x1UL)  /*!< The trace unit generates an Event element for event 1, in the
                                                          instruction trace stream.*/

/* INSTEN2 @Bit 2 : Instruction event enable field. */
  #define ETM_TRCEVENTCTL1R_INSTEN2_Pos (2UL)
  #define ETM_TRCEVENTCTL1R_INSTEN2_Msk (0x1UL << ETM_TRCEVENTCTL1R_INSTEN2_Pos)
  #define ETM_TRCEVENTCTL1R_INSTEN2_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN2_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_INSTEN2_Disabled (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN2_Enabled (0x1UL)  /*!< The trace unit generates an Event element for event 2, in the
                                                          instruction trace stream.*/

/* INSTEN3 @Bit 3 : Instruction event enable field. */
  #define ETM_TRCEVENTCTL1R_INSTEN3_Pos (3UL)
  #define ETM_TRCEVENTCTL1R_INSTEN3_Msk (0x1UL << ETM_TRCEVENTCTL1R_INSTEN3_Pos)
  #define ETM_TRCEVENTCTL1R_INSTEN3_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN3_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_INSTEN3_Disabled (0x0UL)
  #define ETM_TRCEVENTCTL1R_INSTEN3_Enabled (0x1UL)  /*!< The trace unit generates an Event element for event 3, in the
                                                          instruction trace stream.*/

/* DATAEN @Bit 4 : Data event enable bit. */
  #define ETM_TRCEVENTCTL1R_DATAEN_Pos (4UL)
  #define ETM_TRCEVENTCTL1R_DATAEN_Msk (0x1UL << ETM_TRCEVENTCTL1R_DATAEN_Pos)
  #define ETM_TRCEVENTCTL1R_DATAEN_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_DATAEN_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_DATAEN_Disabled (0x0UL)
  #define ETM_TRCEVENTCTL1R_DATAEN_Enabled (0x1UL)   /*!< The trace unit generates an Event element in the data trace stream if
                                                          event 0 occurs.*/

/* ATB @Bit 11 : AMBA Trace Bus (ATB) trigger enable bit. */
  #define ETM_TRCEVENTCTL1R_ATB_Pos (11UL)
  #define ETM_TRCEVENTCTL1R_ATB_Msk (0x1UL << ETM_TRCEVENTCTL1R_ATB_Pos)
  #define ETM_TRCEVENTCTL1R_ATB_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_ATB_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_ATB_Disabled (0x0UL)
  #define ETM_TRCEVENTCTL1R_ATB_Enabled (0x1UL)      /*!< ATB trigger is enabled. If a CoreSight ATB interface is implemented
                                                          then when event 0 occurs the trace unit generates an ATB event.*/

/* LPOVERRIDE @Bit 12 : Low-power state behavior override bit. Controls how a trace unit behaves in low-power state. */
  #define ETM_TRCEVENTCTL1R_LPOVERRIDE_Pos (12UL)
  #define ETM_TRCEVENTCTL1R_LPOVERRIDE_Msk (0x1UL << ETM_TRCEVENTCTL1R_LPOVERRIDE_Pos)
  #define ETM_TRCEVENTCTL1R_LPOVERRIDE_Min (0x0UL)
  #define ETM_TRCEVENTCTL1R_LPOVERRIDE_Max (0x1UL)
  #define ETM_TRCEVENTCTL1R_LPOVERRIDE_Disabled (0x0UL) /*!< Trace unit low-power state behavior is not affected. That is, the
                                                             trace unit is enabled to enter low-power state.*/
  #define ETM_TRCEVENTCTL1R_LPOVERRIDE_Enabled (0x1UL) /*!< Trace unit low-power state behavior is overridden. That is, entry to
                                                            a low-power state does not affect the trace unit resources or trace
                                                            generation.*/


/* ETM_TRCSTALLCTLR: Enables trace unit functionality that prevents trace unit buffer overflows. Might ignore writes when the
                      trace unit is enabled or not idle. Must be programmed if TRCIDR3.STALLCTL == 1. */

  #define ETM_TRCSTALLCTLR_ResetValue (0x00000000UL)

/* LEVEL @Bits 0..3 : Threshold level field. If LEVEL is nonzero then a trace unit might suppress the generation of: Global
                      timestamps in the instruction trace stream and the data trace stream. Cycle counting in the instruction
                      trace stream, although the cumulative cycle count remains correct. */

  #define ETM_TRCSTALLCTLR_LEVEL_Pos (0UL)
  #define ETM_TRCSTALLCTLR_LEVEL_Msk (0xFUL << ETM_TRCSTALLCTLR_LEVEL_Pos)
  #define ETM_TRCSTALLCTLR_LEVEL_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_LEVEL_Max (0xFUL)

/* ISTALL @Bit 8 : Instruction stall bit. Controls if a trace unit can stall the PE when the instruction trace buffer space is
                   less than LEVEL. */

  #define ETM_TRCSTALLCTLR_ISTALL_Pos (8UL)
  #define ETM_TRCSTALLCTLR_ISTALL_Msk (0x1UL << ETM_TRCSTALLCTLR_ISTALL_Pos)
  #define ETM_TRCSTALLCTLR_ISTALL_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_ISTALL_Max (0x1UL)
  #define ETM_TRCSTALLCTLR_ISTALL_Disabled (0x0UL)
  #define ETM_TRCSTALLCTLR_ISTALL_Enabled (0x1UL)

/* DSTALL @Bit 9 : Data stall bit. Controls if a trace unit can stall the PE when the data trace buffer space is less than
                   LEVEL. */

  #define ETM_TRCSTALLCTLR_DSTALL_Pos (9UL)
  #define ETM_TRCSTALLCTLR_DSTALL_Msk (0x1UL << ETM_TRCSTALLCTLR_DSTALL_Pos)
  #define ETM_TRCSTALLCTLR_DSTALL_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_DSTALL_Max (0x1UL)
  #define ETM_TRCSTALLCTLR_DSTALL_Disabled (0x0UL)
  #define ETM_TRCSTALLCTLR_DSTALL_Enabled (0x1UL)

/* INSTPRIORITY @Bit 10 : Prioritize instruction trace bit. Controls if a trace unit can prioritize instruction trace when the
                          instruction trace buffer space is less than LEVEL. */

  #define ETM_TRCSTALLCTLR_INSTPRIORITY_Pos (10UL)
  #define ETM_TRCSTALLCTLR_INSTPRIORITY_Msk (0x1UL << ETM_TRCSTALLCTLR_INSTPRIORITY_Pos)
  #define ETM_TRCSTALLCTLR_INSTPRIORITY_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_INSTPRIORITY_Max (0x1UL)
  #define ETM_TRCSTALLCTLR_INSTPRIORITY_Disabled (0x0UL)
  #define ETM_TRCSTALLCTLR_INSTPRIORITY_Enabled (0x1UL) /*!< The trace unit can prioritize instruction trace. A trace unit might
                                                             prioritize instruction trace by preventing output of data trace, or
                                                             other means which ensure that the instruction trace has a higher
                                                             priority than the data trace.*/

/* DATADISCARDLOAD @Bit 11 : Data discard field. Controls if a trace unit can discard data trace elements on a load when the
                             data trace buffer space is less than LEVEL. */

  #define ETM_TRCSTALLCTLR_DATADISCARDLOAD_Pos (11UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDLOAD_Msk (0x1UL << ETM_TRCSTALLCTLR_DATADISCARDLOAD_Pos) /*!< Bit mask of DATADISCARDLOAD
                                                                            field.*/
  #define ETM_TRCSTALLCTLR_DATADISCARDLOAD_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDLOAD_Max (0x1UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDLOAD_Disabled (0x0UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDLOAD_Enabled (0x1UL) /*!< The trace unit can discard P1 and P2 elements associated with
                                                                data loads.*/

/* DATADISCARDSTORE @Bit 12 : Data discard field. Controls if a trace unit can discard data trace elements on a store when the
                              data trace buffer space is less than LEVEL. */

  #define ETM_TRCSTALLCTLR_DATADISCARDSTORE_Pos (12UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDSTORE_Msk (0x1UL << ETM_TRCSTALLCTLR_DATADISCARDSTORE_Pos) /*!< Bit mask of
                                                                            DATADISCARDSTORE field.*/
  #define ETM_TRCSTALLCTLR_DATADISCARDSTORE_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDSTORE_Max (0x1UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDSTORE_Disabled (0x0UL)
  #define ETM_TRCSTALLCTLR_DATADISCARDSTORE_Enabled (0x1UL) /*!< The trace unit can discard P1 and P2 elements associated with
                                                                 data stores.*/

/* NOOVERFLOW @Bit 13 : Trace overflow prevention bit. */
  #define ETM_TRCSTALLCTLR_NOOVERFLOW_Pos (13UL)
  #define ETM_TRCSTALLCTLR_NOOVERFLOW_Msk (0x1UL << ETM_TRCSTALLCTLR_NOOVERFLOW_Pos)
  #define ETM_TRCSTALLCTLR_NOOVERFLOW_Min (0x0UL)
  #define ETM_TRCSTALLCTLR_NOOVERFLOW_Max (0x1UL)
  #define ETM_TRCSTALLCTLR_NOOVERFLOW_Disabled (0x0UL)
  #define ETM_TRCSTALLCTLR_NOOVERFLOW_Enabled (0x1UL) /*!< Trace overflow prevention is enabled. This might cause a significant
                                                           performance impact.*/


/* ETM_TRCTSCTLR: Controls the insertion of global timestamps in the trace streams. When the selected event is triggered, the
                   trace unit inserts a global timestamp into the trace streams. Might ignore writes when the trace unit is
                   enabled or not idle. Must be programmed if TRCCONFIGR.TS == 1. */

  #define ETM_TRCTSCTLR_ResetValue (0x00000000UL)

/* EVENT @Bits 0..7 : Select which event should generate time stamps. */
  #define ETM_TRCTSCTLR_EVENT_Pos (0UL)
  #define ETM_TRCTSCTLR_EVENT_Msk (0xFFUL << ETM_TRCTSCTLR_EVENT_Pos)
  #define ETM_TRCTSCTLR_EVENT_Min (0x00UL)
  #define ETM_TRCTSCTLR_EVENT_Max (0xFFUL)


/* ETM_TRCSYNCPR: Controls how often trace synchronization requests occur. Might ignore writes when the trace unit is enabled or
                   not idle. If writes are permitted then the register must be programmed. */

  #define ETM_TRCSYNCPR_ResetValue (0x00000000UL)

/* PERIOD @Bits 0..4 : Controls how many bytes of trace, the sum of instruction and data, that a trace unit can generate before
                       a trace synchronization request occurs. The number of bytes is always a power of two, calculated by
                       2^PERIOD */

  #define ETM_TRCSYNCPR_PERIOD_Pos (0UL)
  #define ETM_TRCSYNCPR_PERIOD_Msk (0x1FUL << ETM_TRCSYNCPR_PERIOD_Pos)
  #define ETM_TRCSYNCPR_PERIOD_Min (0x00UL)
  #define ETM_TRCSYNCPR_PERIOD_Max (0x1FUL)
  #define ETM_TRCSYNCPR_PERIOD_Disabled (0x00UL)     /*!< Trace synchronization requests are disabled. This setting does not
                                                          disable other types of trace synchronization request.*/


/* ETM_TRCCCCTLR: Sets the threshold value for cycle counting. Might ignore writes when the trace unit is enabled or not idle.
                   Must be programmed if TRCCONFIGR.CCI==1. */

  #define ETM_TRCCCCTLR_ResetValue (0x00000000UL)

/* THRESHOLD @Bits 0..11 : Sets the threshold value for instruction trace cycle counting. */
  #define ETM_TRCCCCTLR_THRESHOLD_Pos (0UL)
  #define ETM_TRCCCCTLR_THRESHOLD_Msk (0xFFFUL << ETM_TRCCCCTLR_THRESHOLD_Pos)
  #define ETM_TRCCCCTLR_THRESHOLD_Min (0x000UL)
  #define ETM_TRCCCCTLR_THRESHOLD_Max (0x7FFUL)


/* ETM_TRCBBCTLR: Controls which regions in the memory map are enabled to use branch broadcasting. Might ignore writes when the
                   trace unit is enabled or not idle. Must be programmed if TRCCONFIGR.BB == 1. */

  #define ETM_TRCBBCTLR_ResetValue (0x00000000UL)

/* RANGE0 @Bit 0 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[0] controls the selection of address range
                   comparator pair 0. */

  #define ETM_TRCBBCTLR_RANGE0_Pos (0UL)
  #define ETM_TRCBBCTLR_RANGE0_Msk (0x1UL << ETM_TRCBBCTLR_RANGE0_Pos)
  #define ETM_TRCBBCTLR_RANGE0_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE0_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE0_Disabled (0x0UL)      /*!< The address range that address range comparator pair 0 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE0_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE1 @Bit 1 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[1] controls the selection of address range
                   comparator pair 1. */

  #define ETM_TRCBBCTLR_RANGE1_Pos (1UL)
  #define ETM_TRCBBCTLR_RANGE1_Msk (0x1UL << ETM_TRCBBCTLR_RANGE1_Pos)
  #define ETM_TRCBBCTLR_RANGE1_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE1_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE1_Disabled (0x0UL)      /*!< The address range that address range comparator pair 1 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE1_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE2 @Bit 2 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[2] controls the selection of address range
                   comparator pair 2. */

  #define ETM_TRCBBCTLR_RANGE2_Pos (2UL)
  #define ETM_TRCBBCTLR_RANGE2_Msk (0x1UL << ETM_TRCBBCTLR_RANGE2_Pos)
  #define ETM_TRCBBCTLR_RANGE2_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE2_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE2_Disabled (0x0UL)      /*!< The address range that address range comparator pair 2 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE2_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE3 @Bit 3 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[3] controls the selection of address range
                   comparator pair 3. */

  #define ETM_TRCBBCTLR_RANGE3_Pos (3UL)
  #define ETM_TRCBBCTLR_RANGE3_Msk (0x1UL << ETM_TRCBBCTLR_RANGE3_Pos)
  #define ETM_TRCBBCTLR_RANGE3_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE3_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE3_Disabled (0x0UL)      /*!< The address range that address range comparator pair 3 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE3_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE4 @Bit 4 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[4] controls the selection of address range
                   comparator pair 4. */

  #define ETM_TRCBBCTLR_RANGE4_Pos (4UL)
  #define ETM_TRCBBCTLR_RANGE4_Msk (0x1UL << ETM_TRCBBCTLR_RANGE4_Pos)
  #define ETM_TRCBBCTLR_RANGE4_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE4_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE4_Disabled (0x0UL)      /*!< The address range that address range comparator pair 4 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE4_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE5 @Bit 5 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[5] controls the selection of address range
                   comparator pair 5. */

  #define ETM_TRCBBCTLR_RANGE5_Pos (5UL)
  #define ETM_TRCBBCTLR_RANGE5_Msk (0x1UL << ETM_TRCBBCTLR_RANGE5_Pos)
  #define ETM_TRCBBCTLR_RANGE5_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE5_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE5_Disabled (0x0UL)      /*!< The address range that address range comparator pair 5 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE5_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE6 @Bit 6 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[6] controls the selection of address range
                   comparator pair 6. */

  #define ETM_TRCBBCTLR_RANGE6_Pos (6UL)
  #define ETM_TRCBBCTLR_RANGE6_Msk (0x1UL << ETM_TRCBBCTLR_RANGE6_Pos)
  #define ETM_TRCBBCTLR_RANGE6_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE6_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE6_Disabled (0x0UL)      /*!< The address range that address range comparator pair 6 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE6_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/

/* RANGE7 @Bit 7 : Address range field. Selects which address range comparator pairs are in use with branch broadcasting. Each
                   field represents an address range comparator pair, so field[7] controls the selection of address range
                   comparator pair 7. */

  #define ETM_TRCBBCTLR_RANGE7_Pos (7UL)
  #define ETM_TRCBBCTLR_RANGE7_Msk (0x1UL << ETM_TRCBBCTLR_RANGE7_Pos)
  #define ETM_TRCBBCTLR_RANGE7_Min (0x0UL)
  #define ETM_TRCBBCTLR_RANGE7_Max (0x1UL)
  #define ETM_TRCBBCTLR_RANGE7_Disabled (0x0UL)      /*!< The address range that address range comparator pair 7 defines, is not
                                                          selected.*/
  #define ETM_TRCBBCTLR_RANGE7_Enabled (0x1UL)       /*!< The address range that address range comparator pair n defines, is
                                                          selected.*/


/* ETM_TRCTRACEIDR: Sets the trace ID for instruction trace. If data trace is enabled then it also sets the trace ID for data
                     trace, to (trace ID for instruction trace) + 1. This register must always be programmed as part of trace
                     unit initialization. Might ignore writes when the trace unit is enabled or not idle. */

  #define ETM_TRCTRACEIDR_ResetValue (0x00000000UL)

/* TRACEID @Bits 0..6 : Trace ID field. Sets the trace ID value for instruction trace. Bit[0] must be zero if data trace is
                        enabled. If data trace is enabled then a trace unit sets the trace ID for data trace, to TRACEID+1. */

  #define ETM_TRCTRACEIDR_TRACEID_Pos (0UL)
  #define ETM_TRCTRACEIDR_TRACEID_Msk (0x7FUL << ETM_TRCTRACEIDR_TRACEID_Pos)


/* ETM_TRCQCTLR: Controls when Q elements are enabled. Might ignore writes when the trace unit is enabled or not idle. This
                  register must be programmed if it is implemented and TRCCONFIGR.QE is set to any value other than 0b00. */

  #define ETM_TRCQCTLR_ResetValue (0x00000000UL)

/* RANGE0 @Bit 0 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE0_Pos (0UL)
  #define ETM_TRCQCTLR_RANGE0_Msk (0x1UL << ETM_TRCQCTLR_RANGE0_Pos)
  #define ETM_TRCQCTLR_RANGE0_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE0_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE0_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE0_Enabled (0x1UL)

/* RANGE1 @Bit 1 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE1_Pos (1UL)
  #define ETM_TRCQCTLR_RANGE1_Msk (0x1UL << ETM_TRCQCTLR_RANGE1_Pos)
  #define ETM_TRCQCTLR_RANGE1_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE1_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE1_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE1_Enabled (0x1UL)

/* RANGE2 @Bit 2 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE2_Pos (2UL)
  #define ETM_TRCQCTLR_RANGE2_Msk (0x1UL << ETM_TRCQCTLR_RANGE2_Pos)
  #define ETM_TRCQCTLR_RANGE2_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE2_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE2_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE2_Enabled (0x1UL)

/* RANGE3 @Bit 3 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE3_Pos (3UL)
  #define ETM_TRCQCTLR_RANGE3_Msk (0x1UL << ETM_TRCQCTLR_RANGE3_Pos)
  #define ETM_TRCQCTLR_RANGE3_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE3_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE3_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE3_Enabled (0x1UL)

/* RANGE4 @Bit 4 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE4_Pos (4UL)
  #define ETM_TRCQCTLR_RANGE4_Msk (0x1UL << ETM_TRCQCTLR_RANGE4_Pos)
  #define ETM_TRCQCTLR_RANGE4_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE4_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE4_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE4_Enabled (0x1UL)

/* RANGE5 @Bit 5 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE5_Pos (5UL)
  #define ETM_TRCQCTLR_RANGE5_Msk (0x1UL << ETM_TRCQCTLR_RANGE5_Pos)
  #define ETM_TRCQCTLR_RANGE5_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE5_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE5_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE5_Enabled (0x1UL)

/* RANGE6 @Bit 6 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE6_Pos (6UL)
  #define ETM_TRCQCTLR_RANGE6_Msk (0x1UL << ETM_TRCQCTLR_RANGE6_Pos)
  #define ETM_TRCQCTLR_RANGE6_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE6_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE6_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE6_Enabled (0x1UL)

/* RANGE7 @Bit 7 : Specifies the address range comparators to be used for controlling Q elements. */
  #define ETM_TRCQCTLR_RANGE7_Pos (7UL)
  #define ETM_TRCQCTLR_RANGE7_Msk (0x1UL << ETM_TRCQCTLR_RANGE7_Pos)
  #define ETM_TRCQCTLR_RANGE7_Min (0x0UL)
  #define ETM_TRCQCTLR_RANGE7_Max (0x1UL)
  #define ETM_TRCQCTLR_RANGE7_Disabled (0x0UL)
  #define ETM_TRCQCTLR_RANGE7_Enabled (0x1UL)

/* MODE @Bit 8 : Selects whether the address range comparators selected by the RANGE field indicate address ranges where the
                 trace unit is permitted to generate Q elements or address ranges where the trace unit is not permitted to
                 generate Q elements: */

  #define ETM_TRCQCTLR_MODE_Pos (8UL)
  #define ETM_TRCQCTLR_MODE_Msk (0x1UL << ETM_TRCQCTLR_MODE_Pos)
  #define ETM_TRCQCTLR_MODE_Min (0x0UL)
  #define ETM_TRCQCTLR_MODE_Max (0x1UL)
  #define ETM_TRCQCTLR_MODE_Exclude (0x0UL)          /*!< Exclude mode. The address range comparators selected by the RANGE
                                                          field indicate address ranges where the trace unit cannot generate Q
                                                          elements. If no ranges are selected, Q elements are permitted across
                                                          the entire memory map.*/
  #define ETM_TRCQCTLR_MODE_Include (0x1UL)          /*!< Include mode. The address range comparators selected by the RANGE
                                                          field indicate address ranges where the trace unit can generate Q
                                                          elements. If all the implemented bits in RANGE are set to 0 then Q
                                                          elements are disabled.*/


/* ETM_TRCVICTLR: Controls instruction trace filtering. Might ignore writes when the trace unit is enabled or not idle. Only
                   returns stable data when TRCSTATR.PMSTABLE == 1. Must be programmed, particularly to set the value of the
                   SSSTATUS bit, which sets the state of the start/stop logic. */

  #define ETM_TRCVICTLR_ResetValue (0x00000000UL)

/* EVENT_SEL @Bits 0..4 : Select which resource number should be filtered. */
  #define ETM_TRCVICTLR_EVENT_SEL_Pos (0UL)
  #define ETM_TRCVICTLR_EVENT_SEL_Msk (0x1FUL << ETM_TRCVICTLR_EVENT_SEL_Pos)
  #define ETM_TRCVICTLR_EVENT_SEL_Min (0x0UL)
  #define ETM_TRCVICTLR_EVENT_SEL_Max (0x1UL)
  #define ETM_TRCVICTLR_EVENT_SEL_Disabled (0x00UL)
  #define ETM_TRCVICTLR_EVENT_SEL_Enabled (0x01UL)

/* SSSTATUS @Bit 9 : When TRCIDR4.NUMACPAIRS > 0 or TRCIDR4.NUMPC > 0, this bit returns the status of the start/stop logic. */
  #define ETM_TRCVICTLR_SSSTATUS_Pos (9UL)
  #define ETM_TRCVICTLR_SSSTATUS_Msk (0x1UL << ETM_TRCVICTLR_SSSTATUS_Pos)
  #define ETM_TRCVICTLR_SSSTATUS_Min (0x0UL)
  #define ETM_TRCVICTLR_SSSTATUS_Max (0x1UL)
  #define ETM_TRCVICTLR_SSSTATUS_Stopped (0x0UL)
  #define ETM_TRCVICTLR_SSSTATUS_Started (0x1UL)

/* TRCRESET @Bit 10 : Controls whether a trace unit must trace a Reset exception. */
  #define ETM_TRCVICTLR_TRCRESET_Pos (10UL)
  #define ETM_TRCVICTLR_TRCRESET_Msk (0x1UL << ETM_TRCVICTLR_TRCRESET_Pos)
  #define ETM_TRCVICTLR_TRCRESET_Min (0x0UL)
  #define ETM_TRCVICTLR_TRCRESET_Max (0x1UL)
  #define ETM_TRCVICTLR_TRCRESET_Disabled (0x0UL)    /*!< The trace unit does not trace a Reset exception unless it traces the
                                                          exception or instruction immediately prior to the Reset exception.*/
  #define ETM_TRCVICTLR_TRCRESET_Enabled (0x1UL)

/* TRCERR @Bit 11 : When TRCIDR3.TRCERR==1, this bit controls whether a trace unit must trace a System error exception. */
  #define ETM_TRCVICTLR_TRCERR_Pos (11UL)
  #define ETM_TRCVICTLR_TRCERR_Msk (0x1UL << ETM_TRCVICTLR_TRCERR_Pos)
  #define ETM_TRCVICTLR_TRCERR_Min (0x0UL)
  #define ETM_TRCVICTLR_TRCERR_Max (0x1UL)
  #define ETM_TRCVICTLR_TRCERR_Disabled (0x0UL)      /*!< The trace unit does not trace a System error exception unless it
                                                          traces the exception or instruction immediately prior to the System
                                                          error exception.*/
  #define ETM_TRCVICTLR_TRCERR_Enabled (0x1UL)       /*!< The trace unit always traces a System error exception, regardless of
                                                          the value of ViewInst.*/

/* EXLEVEL0_S @Bit 16 : In Secure state, each bit controls whether instruction tracing is enabled for the corresponding
                        Exception level 0. */

  #define ETM_TRCVICTLR_EXLEVEL0_S_Pos (16UL)
  #define ETM_TRCVICTLR_EXLEVEL0_S_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL0_S_Pos)
  #define ETM_TRCVICTLR_EXLEVEL0_S_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL0_S_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL0_S_Disabled (0x1UL)  /*!< The trace unit does not generate instruction trace, in Secure state,
                                                          for Exception level 0.*/
  #define ETM_TRCVICTLR_EXLEVEL0_S_Enabled (0x0UL)   /*!< The trace unit generates instruction trace, in Secure state, for
                                                          Exception level 0.*/

/* EXLEVEL1_S @Bit 17 : In Secure state, each bit controls whether instruction tracing is enabled for the corresponding
                        Exception level 1. */

  #define ETM_TRCVICTLR_EXLEVEL1_S_Pos (17UL)
  #define ETM_TRCVICTLR_EXLEVEL1_S_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL1_S_Pos)
  #define ETM_TRCVICTLR_EXLEVEL1_S_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL1_S_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL1_S_Disabled (0x1UL)  /*!< The trace unit does not generate instruction trace, in Secure state,
                                                          for Exception level 1.*/
  #define ETM_TRCVICTLR_EXLEVEL1_S_Enabled (0x0UL)   /*!< The trace unit generates instruction trace, in Secure state, for
                                                          Exception level 1.*/

/* EXLEVEL2_S @Bit 18 : In Secure state, each bit controls whether instruction tracing is enabled for the corresponding
                        Exception level 2. */

  #define ETM_TRCVICTLR_EXLEVEL2_S_Pos (18UL)
  #define ETM_TRCVICTLR_EXLEVEL2_S_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL2_S_Pos)
  #define ETM_TRCVICTLR_EXLEVEL2_S_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL2_S_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL2_S_Disabled (0x1UL)  /*!< The trace unit does not generate instruction trace, in Secure state,
                                                          for Exception level 2.*/
  #define ETM_TRCVICTLR_EXLEVEL2_S_Enabled (0x0UL)   /*!< The trace unit generates instruction trace, in Secure state, for
                                                          Exception level 2.*/

/* EXLEVEL3_S @Bit 19 : In Secure state, each bit controls whether instruction tracing is enabled for the corresponding
                        Exception level 3. */

  #define ETM_TRCVICTLR_EXLEVEL3_S_Pos (19UL)
  #define ETM_TRCVICTLR_EXLEVEL3_S_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL3_S_Pos)
  #define ETM_TRCVICTLR_EXLEVEL3_S_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL3_S_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL3_S_Disabled (0x1UL)  /*!< The trace unit does not generate instruction trace, in Secure state,
                                                          for Exception level 3.*/
  #define ETM_TRCVICTLR_EXLEVEL3_S_Enabled (0x0UL)   /*!< The trace unit generates instruction trace, in Secure state, for
                                                          Exception level 3.*/

/* EXLEVEL0_NS @Bit 20 : In Non-secure state, each bit controls whether instruction tracing is enabled for the corresponding
                         Exception level 0. */

  #define ETM_TRCVICTLR_EXLEVEL0_NS_Pos (20UL)
  #define ETM_TRCVICTLR_EXLEVEL0_NS_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL0_NS_Pos)
  #define ETM_TRCVICTLR_EXLEVEL0_NS_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL0_NS_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL0_NS_Disabled (0x1UL) /*!< The trace unit does not generate instruction trace, in Non-secure
                                                          state, for Exception level 0.*/
  #define ETM_TRCVICTLR_EXLEVEL0_NS_Enabled (0x0UL)  /*!< The trace unit generates instruction trace, in Non-secure state, for
                                                          Exception level 0.*/

/* EXLEVEL1_NS @Bit 21 : In Non-secure state, each bit controls whether instruction tracing is enabled for the corresponding
                         Exception level 1. */

  #define ETM_TRCVICTLR_EXLEVEL1_NS_Pos (21UL)
  #define ETM_TRCVICTLR_EXLEVEL1_NS_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL1_NS_Pos)
  #define ETM_TRCVICTLR_EXLEVEL1_NS_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL1_NS_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL1_NS_Disabled (0x1UL) /*!< The trace unit does not generate instruction trace, in Non-secure
                                                          state, for Exception level 1.*/
  #define ETM_TRCVICTLR_EXLEVEL1_NS_Enabled (0x0UL)  /*!< The trace unit generates instruction trace, in Non-secure state, for
                                                          Exception level 1.*/

/* EXLEVEL2_NS @Bit 22 : In Non-secure state, each bit controls whether instruction tracing is enabled for the corresponding
                         Exception level 2. */

  #define ETM_TRCVICTLR_EXLEVEL2_NS_Pos (22UL)
  #define ETM_TRCVICTLR_EXLEVEL2_NS_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL2_NS_Pos)
  #define ETM_TRCVICTLR_EXLEVEL2_NS_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL2_NS_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL2_NS_Disabled (0x1UL) /*!< The trace unit does not generate instruction trace, in Non-secure
                                                          state, for Exception level 2.*/
  #define ETM_TRCVICTLR_EXLEVEL2_NS_Enabled (0x0UL)  /*!< The trace unit generates instruction trace, in Non-secure state, for
                                                          Exception level 2.*/

/* EXLEVEL3_NS @Bit 23 : In Non-secure state, each bit controls whether instruction tracing is enabled for the corresponding
                         Exception level 3. */

  #define ETM_TRCVICTLR_EXLEVEL3_NS_Pos (23UL)
  #define ETM_TRCVICTLR_EXLEVEL3_NS_Msk (0x1UL << ETM_TRCVICTLR_EXLEVEL3_NS_Pos)
  #define ETM_TRCVICTLR_EXLEVEL3_NS_Min (0x0UL)
  #define ETM_TRCVICTLR_EXLEVEL3_NS_Max (0x1UL)
  #define ETM_TRCVICTLR_EXLEVEL3_NS_Disabled (0x1UL) /*!< The trace unit does not generate instruction trace, in Non-secure
                                                          state, for Exception level 3.*/
  #define ETM_TRCVICTLR_EXLEVEL3_NS_Enabled (0x0UL)  /*!< The trace unit generates instruction trace, in Non-secure state, for
                                                          Exception level 3.*/


/* ETM_TRCVIIECTLR: ViewInst exclude control. Might ignore writes when the trace unit is enabled or not idle. This register must
                     be programmed when one or more address comparators are implemented. */

  #define ETM_TRCVIIECTLR_ResetValue (0x00000000UL)

/* INCLUDE0 @Bit 0 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE0_Pos (0UL)
  #define ETM_TRCVIIECTLR_INCLUDE0_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE0_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE0_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE0_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE0_Disabled (0x0UL)  /*!< The address range that address range comparator pair 0 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE0_Enabled (0x1UL)   /*!< The address range that address range comparator pair 0 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE1 @Bit 1 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE1_Pos (1UL)
  #define ETM_TRCVIIECTLR_INCLUDE1_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE1_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE1_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE1_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE1_Disabled (0x0UL)  /*!< The address range that address range comparator pair 1 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE1_Enabled (0x1UL)   /*!< The address range that address range comparator pair 1 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE2 @Bit 2 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE2_Pos (2UL)
  #define ETM_TRCVIIECTLR_INCLUDE2_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE2_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE2_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE2_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE2_Disabled (0x0UL)  /*!< The address range that address range comparator pair 2 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE2_Enabled (0x1UL)   /*!< The address range that address range comparator pair 2 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE3 @Bit 3 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE3_Pos (3UL)
  #define ETM_TRCVIIECTLR_INCLUDE3_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE3_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE3_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE3_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE3_Disabled (0x0UL)  /*!< The address range that address range comparator pair 3 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE3_Enabled (0x1UL)   /*!< The address range that address range comparator pair 3 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE4 @Bit 4 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE4_Pos (4UL)
  #define ETM_TRCVIIECTLR_INCLUDE4_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE4_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE4_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE4_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE4_Disabled (0x0UL)  /*!< The address range that address range comparator pair 4 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE4_Enabled (0x1UL)   /*!< The address range that address range comparator pair 4 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE5 @Bit 5 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE5_Pos (5UL)
  #define ETM_TRCVIIECTLR_INCLUDE5_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE5_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE5_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE5_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE5_Disabled (0x0UL)  /*!< The address range that address range comparator pair 5 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE5_Enabled (0x1UL)   /*!< The address range that address range comparator pair 5 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE6 @Bit 6 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE6_Pos (6UL)
  #define ETM_TRCVIIECTLR_INCLUDE6_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE6_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE6_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE6_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE6_Disabled (0x0UL)  /*!< The address range that address range comparator pair 6 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE6_Enabled (0x1UL)   /*!< The address range that address range comparator pair 6 defines, is
                                                          selected for ViewInst include control.*/

/* INCLUDE7 @Bit 7 : Include range field. Selects which address range comparator pairs are in use with ViewInst include control.
                     */

  #define ETM_TRCVIIECTLR_INCLUDE7_Pos (7UL)
  #define ETM_TRCVIIECTLR_INCLUDE7_Msk (0x1UL << ETM_TRCVIIECTLR_INCLUDE7_Pos)
  #define ETM_TRCVIIECTLR_INCLUDE7_Min (0x0UL)
  #define ETM_TRCVIIECTLR_INCLUDE7_Max (0x1UL)
  #define ETM_TRCVIIECTLR_INCLUDE7_Disabled (0x0UL)  /*!< The address range that address range comparator pair 7 defines, is not
                                                          selected for ViewInst include control.*/
  #define ETM_TRCVIIECTLR_INCLUDE7_Enabled (0x1UL)   /*!< The address range that address range comparator pair 7 defines, is
                                                          selected for ViewInst include control.*/

/* EXCLUDE0 @Bit 16 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE0_Pos (16UL)
  #define ETM_TRCVIIECTLR_EXCLUDE0_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE0_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE0_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE0_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE0_Disabled (0x0UL)  /*!< The address range that address range comparator pair 0 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE0_Enabled (0x1UL)   /*!< The address range that address range comparator pair 0 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE1 @Bit 17 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE1_Pos (17UL)
  #define ETM_TRCVIIECTLR_EXCLUDE1_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE1_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE1_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE1_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE1_Disabled (0x0UL)  /*!< The address range that address range comparator pair 1 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE1_Enabled (0x1UL)   /*!< The address range that address range comparator pair 1 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE2 @Bit 18 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE2_Pos (18UL)
  #define ETM_TRCVIIECTLR_EXCLUDE2_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE2_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE2_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE2_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE2_Disabled (0x0UL)  /*!< The address range that address range comparator pair 2 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE2_Enabled (0x1UL)   /*!< The address range that address range comparator pair 2 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE3 @Bit 19 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE3_Pos (19UL)
  #define ETM_TRCVIIECTLR_EXCLUDE3_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE3_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE3_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE3_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE3_Disabled (0x0UL)  /*!< The address range that address range comparator pair 3 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE3_Enabled (0x1UL)   /*!< The address range that address range comparator pair 3 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE4 @Bit 20 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE4_Pos (20UL)
  #define ETM_TRCVIIECTLR_EXCLUDE4_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE4_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE4_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE4_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE4_Disabled (0x0UL)  /*!< The address range that address range comparator pair 4 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE4_Enabled (0x1UL)   /*!< The address range that address range comparator pair 4 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE5 @Bit 21 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE5_Pos (21UL)
  #define ETM_TRCVIIECTLR_EXCLUDE5_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE5_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE5_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE5_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE5_Disabled (0x0UL)  /*!< The address range that address range comparator pair 5 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE5_Enabled (0x1UL)   /*!< The address range that address range comparator pair 5 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE6 @Bit 22 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE6_Pos (22UL)
  #define ETM_TRCVIIECTLR_EXCLUDE6_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE6_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE6_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE6_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE6_Disabled (0x0UL)  /*!< The address range that address range comparator pair 6 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE6_Enabled (0x1UL)   /*!< The address range that address range comparator pair 6 defines, is
                                                          selected for ViewInst exclude control.*/

/* EXCLUDE7 @Bit 23 : Exclude range field. Selects which address range comparator pairs are in use with ViewInst exclude
                      control. */

  #define ETM_TRCVIIECTLR_EXCLUDE7_Pos (23UL)
  #define ETM_TRCVIIECTLR_EXCLUDE7_Msk (0x1UL << ETM_TRCVIIECTLR_EXCLUDE7_Pos)
  #define ETM_TRCVIIECTLR_EXCLUDE7_Min (0x0UL)
  #define ETM_TRCVIIECTLR_EXCLUDE7_Max (0x1UL)
  #define ETM_TRCVIIECTLR_EXCLUDE7_Disabled (0x0UL)  /*!< The address range that address range comparator pair 7 defines, is not
                                                          selected for ViewInst exclude control.*/
  #define ETM_TRCVIIECTLR_EXCLUDE7_Enabled (0x1UL)   /*!< The address range that address range comparator pair 7 defines, is
                                                          selected for ViewInst exclude control.*/


/* ETM_TRCVISSCTLR: Use this to set, or read, the single address comparators that control the ViewInst start/stop logic. The
                     start/stop logic is active for an instruction which causes a start and remains active up to and including
                     an instruction which causes a stop, and then the start/stop logic becomes inactive. Might ignore writes
                     when the trace unit is enabled or not idle. If implemented then this register must be programmed. */

  #define ETM_TRCVISSCTLR_ResetValue (0x00000000UL)

/* START0 @Bit 0 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START0_Pos (0UL)
  #define ETM_TRCVISSCTLR_START0_Msk (0x1UL << ETM_TRCVISSCTLR_START0_Pos)
  #define ETM_TRCVISSCTLR_START0_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START0_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START0_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START0_Enabled (0x1UL)

/* START1 @Bit 1 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START1_Pos (1UL)
  #define ETM_TRCVISSCTLR_START1_Msk (0x1UL << ETM_TRCVISSCTLR_START1_Pos)
  #define ETM_TRCVISSCTLR_START1_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START1_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START1_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START1_Enabled (0x1UL)

/* START2 @Bit 2 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START2_Pos (2UL)
  #define ETM_TRCVISSCTLR_START2_Msk (0x1UL << ETM_TRCVISSCTLR_START2_Pos)
  #define ETM_TRCVISSCTLR_START2_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START2_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START2_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START2_Enabled (0x1UL)

/* START3 @Bit 3 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START3_Pos (3UL)
  #define ETM_TRCVISSCTLR_START3_Msk (0x1UL << ETM_TRCVISSCTLR_START3_Pos)
  #define ETM_TRCVISSCTLR_START3_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START3_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START3_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START3_Enabled (0x1UL)

/* START4 @Bit 4 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START4_Pos (4UL)
  #define ETM_TRCVISSCTLR_START4_Msk (0x1UL << ETM_TRCVISSCTLR_START4_Pos)
  #define ETM_TRCVISSCTLR_START4_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START4_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START4_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START4_Enabled (0x1UL)

/* START5 @Bit 5 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START5_Pos (5UL)
  #define ETM_TRCVISSCTLR_START5_Msk (0x1UL << ETM_TRCVISSCTLR_START5_Pos)
  #define ETM_TRCVISSCTLR_START5_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START5_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START5_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START5_Enabled (0x1UL)

/* START6 @Bit 6 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START6_Pos (6UL)
  #define ETM_TRCVISSCTLR_START6_Msk (0x1UL << ETM_TRCVISSCTLR_START6_Pos)
  #define ETM_TRCVISSCTLR_START6_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START6_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START6_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START6_Enabled (0x1UL)

/* START7 @Bit 7 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   starting trace. */

  #define ETM_TRCVISSCTLR_START7_Pos (7UL)
  #define ETM_TRCVISSCTLR_START7_Msk (0x1UL << ETM_TRCVISSCTLR_START7_Pos)
  #define ETM_TRCVISSCTLR_START7_Min (0x0UL)
  #define ETM_TRCVISSCTLR_START7_Max (0x1UL)
  #define ETM_TRCVISSCTLR_START7_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_START7_Enabled (0x1UL)

/* STOP0 @Bit 16 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP0_Pos (16UL)
  #define ETM_TRCVISSCTLR_STOP0_Msk (0x1UL << ETM_TRCVISSCTLR_STOP0_Pos)
  #define ETM_TRCVISSCTLR_STOP0_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP0_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP0_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP0_Enabled (0x1UL)

/* STOP1 @Bit 17 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP1_Pos (17UL)
  #define ETM_TRCVISSCTLR_STOP1_Msk (0x1UL << ETM_TRCVISSCTLR_STOP1_Pos)
  #define ETM_TRCVISSCTLR_STOP1_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP1_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP1_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP1_Enabled (0x1UL)

/* STOP2 @Bit 18 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP2_Pos (18UL)
  #define ETM_TRCVISSCTLR_STOP2_Msk (0x1UL << ETM_TRCVISSCTLR_STOP2_Pos)
  #define ETM_TRCVISSCTLR_STOP2_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP2_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP2_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP2_Enabled (0x1UL)

/* STOP3 @Bit 19 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP3_Pos (19UL)
  #define ETM_TRCVISSCTLR_STOP3_Msk (0x1UL << ETM_TRCVISSCTLR_STOP3_Pos)
  #define ETM_TRCVISSCTLR_STOP3_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP3_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP3_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP3_Enabled (0x1UL)

/* STOP4 @Bit 20 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP4_Pos (20UL)
  #define ETM_TRCVISSCTLR_STOP4_Msk (0x1UL << ETM_TRCVISSCTLR_STOP4_Pos)
  #define ETM_TRCVISSCTLR_STOP4_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP4_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP4_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP4_Enabled (0x1UL)

/* STOP5 @Bit 21 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP5_Pos (21UL)
  #define ETM_TRCVISSCTLR_STOP5_Msk (0x1UL << ETM_TRCVISSCTLR_STOP5_Pos)
  #define ETM_TRCVISSCTLR_STOP5_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP5_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP5_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP5_Enabled (0x1UL)

/* STOP6 @Bit 22 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP6_Pos (22UL)
  #define ETM_TRCVISSCTLR_STOP6_Msk (0x1UL << ETM_TRCVISSCTLR_STOP6_Pos)
  #define ETM_TRCVISSCTLR_STOP6_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP6_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP6_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP6_Enabled (0x1UL)

/* STOP7 @Bit 23 : Selects which single address comparators are in use with ViewInst start/stop control, for the purpose of
                   stopping trace */

  #define ETM_TRCVISSCTLR_STOP7_Pos (23UL)
  #define ETM_TRCVISSCTLR_STOP7_Msk (0x1UL << ETM_TRCVISSCTLR_STOP7_Pos)
  #define ETM_TRCVISSCTLR_STOP7_Min (0x0UL)
  #define ETM_TRCVISSCTLR_STOP7_Max (0x1UL)
  #define ETM_TRCVISSCTLR_STOP7_Disabled (0x0UL)
  #define ETM_TRCVISSCTLR_STOP7_Enabled (0x1UL)


/* ETM_TRCVIPCSSCTLR: Use this to set, or read, which PE comparator inputs can control the ViewInst start/stop logic. Might
                       ignore writes when the trace unit is enabled or not idle. If implemented then this register must be
                       programmed. */

  #define ETM_TRCVIPCSSCTLR_ResetValue (0x00000000UL)

/* START0 @Bit 0 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START0_Pos (0UL)
  #define ETM_TRCVIPCSSCTLR_START0_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START0_Pos)
  #define ETM_TRCVIPCSSCTLR_START0_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START0_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START0_Disabled (0x0UL)  /*!< The single PE comparator input 0, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START0_Enabled (0x1UL)

/* START1 @Bit 1 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START1_Pos (1UL)
  #define ETM_TRCVIPCSSCTLR_START1_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START1_Pos)
  #define ETM_TRCVIPCSSCTLR_START1_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START1_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START1_Disabled (0x0UL)  /*!< The single PE comparator input 1, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START1_Enabled (0x1UL)

/* START2 @Bit 2 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START2_Pos (2UL)
  #define ETM_TRCVIPCSSCTLR_START2_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START2_Pos)
  #define ETM_TRCVIPCSSCTLR_START2_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START2_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START2_Disabled (0x0UL)  /*!< The single PE comparator input 2, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START2_Enabled (0x1UL)

/* START3 @Bit 3 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START3_Pos (3UL)
  #define ETM_TRCVIPCSSCTLR_START3_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START3_Pos)
  #define ETM_TRCVIPCSSCTLR_START3_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START3_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START3_Disabled (0x0UL)  /*!< The single PE comparator input 3, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START3_Enabled (0x1UL)

/* START4 @Bit 4 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START4_Pos (4UL)
  #define ETM_TRCVIPCSSCTLR_START4_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START4_Pos)
  #define ETM_TRCVIPCSSCTLR_START4_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START4_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START4_Disabled (0x0UL)  /*!< The single PE comparator input 4, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START4_Enabled (0x1UL)

/* START5 @Bit 5 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START5_Pos (5UL)
  #define ETM_TRCVIPCSSCTLR_START5_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START5_Pos)
  #define ETM_TRCVIPCSSCTLR_START5_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START5_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START5_Disabled (0x0UL)  /*!< The single PE comparator input 5, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START5_Enabled (0x1UL)

/* START6 @Bit 6 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START6_Pos (6UL)
  #define ETM_TRCVIPCSSCTLR_START6_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START6_Pos)
  #define ETM_TRCVIPCSSCTLR_START6_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START6_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START6_Disabled (0x0UL)  /*!< The single PE comparator input 6, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START6_Enabled (0x1UL)

/* START7 @Bit 7 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of starting
                   trace */

  #define ETM_TRCVIPCSSCTLR_START7_Pos (7UL)
  #define ETM_TRCVIPCSSCTLR_START7_Msk (0x1UL << ETM_TRCVIPCSSCTLR_START7_Pos)
  #define ETM_TRCVIPCSSCTLR_START7_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_START7_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_START7_Disabled (0x0UL)  /*!< The single PE comparator input 7, is not selected as a start
                                                          resource.*/
  #define ETM_TRCVIPCSSCTLR_START7_Enabled (0x1UL)

/* STOP0 @Bit 16 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP0_Pos (16UL)
  #define ETM_TRCVIPCSSCTLR_STOP0_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP0_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP0_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP0_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP0_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP0_Enabled (0x1UL)

/* STOP1 @Bit 17 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP1_Pos (17UL)
  #define ETM_TRCVIPCSSCTLR_STOP1_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP1_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP1_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP1_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP1_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP1_Enabled (0x1UL)

/* STOP2 @Bit 18 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP2_Pos (18UL)
  #define ETM_TRCVIPCSSCTLR_STOP2_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP2_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP2_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP2_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP2_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP2_Enabled (0x1UL)

/* STOP3 @Bit 19 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP3_Pos (19UL)
  #define ETM_TRCVIPCSSCTLR_STOP3_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP3_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP3_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP3_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP3_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP3_Enabled (0x1UL)

/* STOP4 @Bit 20 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP4_Pos (20UL)
  #define ETM_TRCVIPCSSCTLR_STOP4_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP4_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP4_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP4_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP4_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP4_Enabled (0x1UL)

/* STOP5 @Bit 21 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP5_Pos (21UL)
  #define ETM_TRCVIPCSSCTLR_STOP5_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP5_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP5_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP5_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP5_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP5_Enabled (0x1UL)

/* STOP6 @Bit 22 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP6_Pos (22UL)
  #define ETM_TRCVIPCSSCTLR_STOP6_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP6_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP6_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP6_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP6_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP6_Enabled (0x1UL)

/* STOP7 @Bit 23 : Selects which PE comparator inputs are in use with ViewInst start/stop control, for the purpose of stopping
                   trace. */

  #define ETM_TRCVIPCSSCTLR_STOP7_Pos (23UL)
  #define ETM_TRCVIPCSSCTLR_STOP7_Msk (0x1UL << ETM_TRCVIPCSSCTLR_STOP7_Pos)
  #define ETM_TRCVIPCSSCTLR_STOP7_Min (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP7_Max (0x1UL)
  #define ETM_TRCVIPCSSCTLR_STOP7_Disabled (0x0UL)
  #define ETM_TRCVIPCSSCTLR_STOP7_Enabled (0x1UL)


/* ETM_TRCVDCTLR: Controls data trace filtering. Might ignore writes when the trace unit is enabled or not idle. This register
                   must be programmed when data tracing is enabled, that is, when either TRCCONFIGR.DA == 1 or TRCCONFIGR.DV ==
                   1. */

  #define ETM_TRCVDCTLR_ResetValue (0x00000000UL)

/* EVENT0 @Bit 0 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT0_Pos (0UL)
  #define ETM_TRCVDCTLR_EVENT0_Msk (0x1UL << ETM_TRCVDCTLR_EVENT0_Pos)
  #define ETM_TRCVDCTLR_EVENT0_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT0_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT0_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT0_Enabled (0x1UL)

/* EVENT1 @Bit 1 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT1_Pos (1UL)
  #define ETM_TRCVDCTLR_EVENT1_Msk (0x1UL << ETM_TRCVDCTLR_EVENT1_Pos)
  #define ETM_TRCVDCTLR_EVENT1_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT1_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT1_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT1_Enabled (0x1UL)

/* EVENT2 @Bit 2 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT2_Pos (2UL)
  #define ETM_TRCVDCTLR_EVENT2_Msk (0x1UL << ETM_TRCVDCTLR_EVENT2_Pos)
  #define ETM_TRCVDCTLR_EVENT2_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT2_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT2_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT2_Enabled (0x1UL)

/* EVENT3 @Bit 3 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT3_Pos (3UL)
  #define ETM_TRCVDCTLR_EVENT3_Msk (0x1UL << ETM_TRCVDCTLR_EVENT3_Pos)
  #define ETM_TRCVDCTLR_EVENT3_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT3_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT3_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT3_Enabled (0x1UL)

/* EVENT4 @Bit 4 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT4_Pos (4UL)
  #define ETM_TRCVDCTLR_EVENT4_Msk (0x1UL << ETM_TRCVDCTLR_EVENT4_Pos)
  #define ETM_TRCVDCTLR_EVENT4_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT4_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT4_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT4_Enabled (0x1UL)

/* EVENT5 @Bit 5 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT5_Pos (5UL)
  #define ETM_TRCVDCTLR_EVENT5_Msk (0x1UL << ETM_TRCVDCTLR_EVENT5_Pos)
  #define ETM_TRCVDCTLR_EVENT5_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT5_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT5_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT5_Enabled (0x1UL)

/* EVENT6 @Bit 6 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT6_Pos (6UL)
  #define ETM_TRCVDCTLR_EVENT6_Msk (0x1UL << ETM_TRCVDCTLR_EVENT6_Pos)
  #define ETM_TRCVDCTLR_EVENT6_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT6_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT6_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT6_Enabled (0x1UL)

/* EVENT7 @Bit 7 : Event unit enable bit. */
  #define ETM_TRCVDCTLR_EVENT7_Pos (7UL)
  #define ETM_TRCVDCTLR_EVENT7_Msk (0x1UL << ETM_TRCVDCTLR_EVENT7_Pos)
  #define ETM_TRCVDCTLR_EVENT7_Min (0x0UL)
  #define ETM_TRCVDCTLR_EVENT7_Max (0x1UL)
  #define ETM_TRCVDCTLR_EVENT7_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_EVENT7_Enabled (0x1UL)

/* SPREL @Bits 8..9 : Controls whether a trace unit traces data for transfers that are relative to the Stack Pointer (SP). */
  #define ETM_TRCVDCTLR_SPREL_Pos (8UL)
  #define ETM_TRCVDCTLR_SPREL_Msk (0x3UL << ETM_TRCVDCTLR_SPREL_Pos)
  #define ETM_TRCVDCTLR_SPREL_Min (0x0UL)
  #define ETM_TRCVDCTLR_SPREL_Max (0x3UL)
  #define ETM_TRCVDCTLR_SPREL_Enabled (0x0UL)
  #define ETM_TRCVDCTLR_SPREL_DataOnly (0x2UL)       /*!< The trace unit does not trace the address portion of SP-relative
                                                          transfers. If data value tracing is enabled then the trace unit
                                                          generates a P1 data address element.*/
  #define ETM_TRCVDCTLR_SPREL_Disabled (0x3UL)       /*!< The trace unit does not trace the address or value portions of
                                                          SP-relative transfers.*/

/* PCREL @Bit 10 : Controls whether a trace unit traces data for transfers that are relative to the Program Counter (PC). */
  #define ETM_TRCVDCTLR_PCREL_Pos (10UL)
  #define ETM_TRCVDCTLR_PCREL_Msk (0x1UL << ETM_TRCVDCTLR_PCREL_Pos)
  #define ETM_TRCVDCTLR_PCREL_Min (0x0UL)
  #define ETM_TRCVDCTLR_PCREL_Max (0x1UL)
  #define ETM_TRCVDCTLR_PCREL_Enabled (0x0UL)
  #define ETM_TRCVDCTLR_PCREL_Disabled (0x1UL)       /*!< The trace unit does not trace the address or value portions of
                                                          PC-relative transfers.*/

/* TBI @Bit 11 : Controls which information a trace unit populates in bits[63:56] of the data address. */
  #define ETM_TRCVDCTLR_TBI_Pos (11UL)
  #define ETM_TRCVDCTLR_TBI_Msk (0x1UL << ETM_TRCVDCTLR_TBI_Pos)
  #define ETM_TRCVDCTLR_TBI_Min (0x0UL)
  #define ETM_TRCVDCTLR_TBI_Max (0x1UL)
  #define ETM_TRCVDCTLR_TBI_SignExtend (0x0UL)       /*!< The trace unit assigns bits[63:56] to have the same value as bit[55]
                                                          of the data address, that is, it sign-extends the value.*/
  #define ETM_TRCVDCTLR_TBI_Copy (0x1UL)             /*!< The trace unit assigns bits[63:56] to have the same value as
                                                          bits[63:56] of the data address.*/

/* TRCEXDATA @Bit 12 : Controls the tracing of data transfers for exceptions and exception returns on Armv6-M, Armv7-M, and
                       Armv8-M PEs. */

  #define ETM_TRCVDCTLR_TRCEXDATA_Pos (12UL)
  #define ETM_TRCVDCTLR_TRCEXDATA_Msk (0x1UL << ETM_TRCVDCTLR_TRCEXDATA_Pos)
  #define ETM_TRCVDCTLR_TRCEXDATA_Min (0x0UL)
  #define ETM_TRCVDCTLR_TRCEXDATA_Max (0x1UL)
  #define ETM_TRCVDCTLR_TRCEXDATA_Disabled (0x0UL)
  #define ETM_TRCVDCTLR_TRCEXDATA_Enabled (0x1UL)    /*!< Exception and exception return data transfers are traced if the other
                                                          aspects of ViewData indicate that the data transfers must be traced.*/


/* ETM_TRCVDSACCTLR: ViewData include / exclude control. Might ignore writes when the trace unit is enabled or not idle. This
                      register must be programmed when one or more address comparators are implemented. */

  #define ETM_TRCVDSACCTLR_ResetValue (0x00000000UL)

/* INCLUDE0 @Bit 0 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE0_Pos (0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE0_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE0_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE0_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE0_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE0_Disabled (0x0UL) /*!< The single address comparator 0, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE0_Enabled (0x1UL)  /*!< The single address comparator 0, is selected for ViewData include
                                                          control.*/

/* INCLUDE1 @Bit 1 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE1_Pos (1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE1_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE1_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE1_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE1_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE1_Disabled (0x0UL) /*!< The single address comparator 1, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE1_Enabled (0x1UL)  /*!< The single address comparator 1, is selected for ViewData include
                                                          control.*/

/* INCLUDE2 @Bit 2 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE2_Pos (2UL)
  #define ETM_TRCVDSACCTLR_INCLUDE2_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE2_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE2_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE2_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE2_Disabled (0x0UL) /*!< The single address comparator 2, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE2_Enabled (0x1UL)  /*!< The single address comparator 2, is selected for ViewData include
                                                          control.*/

/* INCLUDE3 @Bit 3 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE3_Pos (3UL)
  #define ETM_TRCVDSACCTLR_INCLUDE3_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE3_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE3_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE3_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE3_Disabled (0x0UL) /*!< The single address comparator 3, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE3_Enabled (0x1UL)  /*!< The single address comparator 3, is selected for ViewData include
                                                          control.*/

/* INCLUDE4 @Bit 4 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE4_Pos (4UL)
  #define ETM_TRCVDSACCTLR_INCLUDE4_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE4_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE4_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE4_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE4_Disabled (0x0UL) /*!< The single address comparator 4, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE4_Enabled (0x1UL)  /*!< The single address comparator 4, is selected for ViewData include
                                                          control.*/

/* INCLUDE5 @Bit 5 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE5_Pos (5UL)
  #define ETM_TRCVDSACCTLR_INCLUDE5_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE5_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE5_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE5_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE5_Disabled (0x0UL) /*!< The single address comparator 5, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE5_Enabled (0x1UL)  /*!< The single address comparator 5, is selected for ViewData include
                                                          control.*/

/* INCLUDE6 @Bit 6 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE6_Pos (6UL)
  #define ETM_TRCVDSACCTLR_INCLUDE6_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE6_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE6_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE6_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE6_Disabled (0x0UL) /*!< The single address comparator 6, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE6_Enabled (0x1UL)  /*!< The single address comparator 6, is selected for ViewData include
                                                          control.*/

/* INCLUDE7 @Bit 7 : Selects which single address comparators are in use with ViewData include control. */
  #define ETM_TRCVDSACCTLR_INCLUDE7_Pos (7UL)
  #define ETM_TRCVDSACCTLR_INCLUDE7_Msk (0x1UL << ETM_TRCVDSACCTLR_INCLUDE7_Pos)
  #define ETM_TRCVDSACCTLR_INCLUDE7_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_INCLUDE7_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_INCLUDE7_Disabled (0x0UL) /*!< The single address comparator 7, is not selected for ViewData include
                                                          control.*/
  #define ETM_TRCVDSACCTLR_INCLUDE7_Enabled (0x1UL)  /*!< The single address comparator 7, is selected for ViewData include
                                                          control.*/

/* EXCLUDE0 @Bit 16 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE0_Pos (16UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE0_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE0_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE0_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE0_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE0_Disabled (0x0UL) /*!< The single address comparator 0, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE0_Enabled (0x1UL)  /*!< The single address comparator 0, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE1 @Bit 17 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE1_Pos (17UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE1_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE1_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE1_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE1_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE1_Disabled (0x0UL) /*!< The single address comparator 1, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE1_Enabled (0x1UL)  /*!< The single address comparator 1, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE2 @Bit 18 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE2_Pos (18UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE2_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE2_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE2_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE2_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE2_Disabled (0x0UL) /*!< The single address comparator 2, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE2_Enabled (0x1UL)  /*!< The single address comparator 2, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE3 @Bit 19 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE3_Pos (19UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE3_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE3_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE3_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE3_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE3_Disabled (0x0UL) /*!< The single address comparator 3, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE3_Enabled (0x1UL)  /*!< The single address comparator 3, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE4 @Bit 20 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE4_Pos (20UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE4_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE4_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE4_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE4_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE4_Disabled (0x0UL) /*!< The single address comparator 4, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE4_Enabled (0x1UL)  /*!< The single address comparator 4, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE5 @Bit 21 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE5_Pos (21UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE5_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE5_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE5_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE5_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE5_Disabled (0x0UL) /*!< The single address comparator 5, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE5_Enabled (0x1UL)  /*!< The single address comparator 5, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE6 @Bit 22 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE6_Pos (22UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE6_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE6_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE6_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE6_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE6_Disabled (0x0UL) /*!< The single address comparator 6, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE6_Enabled (0x1UL)  /*!< The single address comparator 6, s selected for ViewData exclude
                                                          control.*/

/* EXCLUDE7 @Bit 23 : Selects which single address comparators are in use with ViewData exclude control. */
  #define ETM_TRCVDSACCTLR_EXCLUDE7_Pos (23UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE7_Msk (0x1UL << ETM_TRCVDSACCTLR_EXCLUDE7_Pos)
  #define ETM_TRCVDSACCTLR_EXCLUDE7_Min (0x0UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE7_Max (0x1UL)
  #define ETM_TRCVDSACCTLR_EXCLUDE7_Disabled (0x0UL) /*!< The single address comparator 7, is not selected for ViewData exclude
                                                          control.*/
  #define ETM_TRCVDSACCTLR_EXCLUDE7_Enabled (0x1UL)  /*!< The single address comparator 7, s selected for ViewData exclude
                                                          control.*/


/* ETM_TRCVDARCCTLR: ViewData include / exclude control. Might ignore writes when the trace unit is enabled or not idle. This
                      register must be programmed when one or more address comparators are implemented. */

  #define ETM_TRCVDARCCTLR_ResetValue (0x00000000UL)

/* INCLUDE0 @Bit 0 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE0_Pos (0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE0_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE0_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE0_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE0_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE0_Disabled (0x0UL) /*!< The address range that address range comparator 0 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE0_Enabled (0x1UL)  /*!< The address range that address range comparator 0 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE1 @Bit 1 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE1_Pos (1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE1_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE1_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE1_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE1_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE1_Disabled (0x0UL) /*!< The address range that address range comparator 1 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE1_Enabled (0x1UL)  /*!< The address range that address range comparator 1 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE2 @Bit 2 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE2_Pos (2UL)
  #define ETM_TRCVDARCCTLR_INCLUDE2_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE2_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE2_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE2_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE2_Disabled (0x0UL) /*!< The address range that address range comparator 2 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE2_Enabled (0x1UL)  /*!< The address range that address range comparator 2 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE3 @Bit 3 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE3_Pos (3UL)
  #define ETM_TRCVDARCCTLR_INCLUDE3_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE3_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE3_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE3_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE3_Disabled (0x0UL) /*!< The address range that address range comparator 3 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE3_Enabled (0x1UL)  /*!< The address range that address range comparator 3 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE4 @Bit 4 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE4_Pos (4UL)
  #define ETM_TRCVDARCCTLR_INCLUDE4_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE4_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE4_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE4_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE4_Disabled (0x0UL) /*!< The address range that address range comparator 4 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE4_Enabled (0x1UL)  /*!< The address range that address range comparator 4 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE5 @Bit 5 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE5_Pos (5UL)
  #define ETM_TRCVDARCCTLR_INCLUDE5_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE5_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE5_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE5_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE5_Disabled (0x0UL) /*!< The address range that address range comparator 5 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE5_Enabled (0x1UL)  /*!< The address range that address range comparator 5 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE6 @Bit 6 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE6_Pos (6UL)
  #define ETM_TRCVDARCCTLR_INCLUDE6_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE6_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE6_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE6_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE6_Disabled (0x0UL) /*!< The address range that address range comparator 6 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE6_Enabled (0x1UL)  /*!< The address range that address range comparator 6 defines, is selected
                                                          for ViewData include control.*/

/* INCLUDE7 @Bit 7 : Include range field. Selects which address range comparator pairs are in use with ViewData include control.
                     */

  #define ETM_TRCVDARCCTLR_INCLUDE7_Pos (7UL)
  #define ETM_TRCVDARCCTLR_INCLUDE7_Msk (0x1UL << ETM_TRCVDARCCTLR_INCLUDE7_Pos)
  #define ETM_TRCVDARCCTLR_INCLUDE7_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_INCLUDE7_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_INCLUDE7_Disabled (0x0UL) /*!< The address range that address range comparator 7 defines, is not
                                                          selected for ViewData include control.*/
  #define ETM_TRCVDARCCTLR_INCLUDE7_Enabled (0x1UL)  /*!< The address range that address range comparator 7 defines, is selected
                                                          for ViewData include control.*/

/* EXCLUDE0 @Bit 16 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE0_Pos (16UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE0_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE0_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE0_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE0_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE0_Disabled (0x0UL) /*!< The address range that address range comparator 0 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE0_Enabled (0x1UL)  /*!< The address range that address range comparator 0 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE1 @Bit 17 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE1_Pos (17UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE1_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE1_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE1_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE1_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE1_Disabled (0x0UL) /*!< The address range that address range comparator 1 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE1_Enabled (0x1UL)  /*!< The address range that address range comparator 1 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE2 @Bit 18 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE2_Pos (18UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE2_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE2_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE2_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE2_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE2_Disabled (0x0UL) /*!< The address range that address range comparator 2 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE2_Enabled (0x1UL)  /*!< The address range that address range comparator 2 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE3 @Bit 19 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE3_Pos (19UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE3_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE3_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE3_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE3_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE3_Disabled (0x0UL) /*!< The address range that address range comparator 3 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE3_Enabled (0x1UL)  /*!< The address range that address range comparator 3 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE4 @Bit 20 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE4_Pos (20UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE4_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE4_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE4_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE4_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE4_Disabled (0x0UL) /*!< The address range that address range comparator 4 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE4_Enabled (0x1UL)  /*!< The address range that address range comparator 4 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE5 @Bit 21 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE5_Pos (21UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE5_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE5_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE5_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE5_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE5_Disabled (0x0UL) /*!< The address range that address range comparator 5 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE5_Enabled (0x1UL)  /*!< The address range that address range comparator 5 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE6 @Bit 22 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE6_Pos (22UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE6_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE6_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE6_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE6_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE6_Disabled (0x0UL) /*!< The address range that address range comparator 6 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE6_Enabled (0x1UL)  /*!< The address range that address range comparator 6 defines, s selected
                                                          for ViewData exclude control.*/

/* EXCLUDE7 @Bit 23 : Exclude range field. Selects which address range comparator pairs are in use with ViewData exclude
                      control. */

  #define ETM_TRCVDARCCTLR_EXCLUDE7_Pos (23UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE7_Msk (0x1UL << ETM_TRCVDARCCTLR_EXCLUDE7_Pos)
  #define ETM_TRCVDARCCTLR_EXCLUDE7_Min (0x0UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE7_Max (0x1UL)
  #define ETM_TRCVDARCCTLR_EXCLUDE7_Disabled (0x0UL) /*!< The address range that address range comparator 7 defines, is not
                                                          selected for ViewData exclude control.*/
  #define ETM_TRCVDARCCTLR_EXCLUDE7_Enabled (0x1UL)  /*!< The address range that address range comparator 7 defines, s selected
                                                          for ViewData exclude control.*/


/* ETM_TRCSEQEVR: Moves the sequencer state according to programmed events. Might ignore writes when the trace unit is enabled
                   or not idle. When the sequencer is used, all sequencer state transitions must be programmed with a valid
                   event. */

  #define ETM_TRCSEQEVR_MaxCount (3UL)
  #define ETM_TRCSEQEVR_MaxIndex (2UL)
  #define ETM_TRCSEQEVR_MinIndex (0UL)
  #define ETM_TRCSEQEVR_ResetValue (0x00000000UL)

/* F0 @Bit 0 : Forward field. */
  #define ETM_TRCSEQEVR_F0_Pos (0UL)
  #define ETM_TRCSEQEVR_F0_Msk (0x1UL << ETM_TRCSEQEVR_F0_Pos)
  #define ETM_TRCSEQEVR_F0_Min (0x0UL)
  #define ETM_TRCSEQEVR_F0_Max (0x1UL)
  #define ETM_TRCSEQEVR_F0_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F0_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F1 @Bit 1 : Forward field. */
  #define ETM_TRCSEQEVR_F1_Pos (1UL)
  #define ETM_TRCSEQEVR_F1_Msk (0x1UL << ETM_TRCSEQEVR_F1_Pos)
  #define ETM_TRCSEQEVR_F1_Min (0x0UL)
  #define ETM_TRCSEQEVR_F1_Max (0x1UL)
  #define ETM_TRCSEQEVR_F1_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F1_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F2 @Bit 2 : Forward field. */
  #define ETM_TRCSEQEVR_F2_Pos (2UL)
  #define ETM_TRCSEQEVR_F2_Msk (0x1UL << ETM_TRCSEQEVR_F2_Pos)
  #define ETM_TRCSEQEVR_F2_Min (0x0UL)
  #define ETM_TRCSEQEVR_F2_Max (0x1UL)
  #define ETM_TRCSEQEVR_F2_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F2_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F3 @Bit 3 : Forward field. */
  #define ETM_TRCSEQEVR_F3_Pos (3UL)
  #define ETM_TRCSEQEVR_F3_Msk (0x1UL << ETM_TRCSEQEVR_F3_Pos)
  #define ETM_TRCSEQEVR_F3_Min (0x0UL)
  #define ETM_TRCSEQEVR_F3_Max (0x1UL)
  #define ETM_TRCSEQEVR_F3_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F3_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F4 @Bit 4 : Forward field. */
  #define ETM_TRCSEQEVR_F4_Pos (4UL)
  #define ETM_TRCSEQEVR_F4_Msk (0x1UL << ETM_TRCSEQEVR_F4_Pos)
  #define ETM_TRCSEQEVR_F4_Min (0x0UL)
  #define ETM_TRCSEQEVR_F4_Max (0x1UL)
  #define ETM_TRCSEQEVR_F4_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F4_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F5 @Bit 5 : Forward field. */
  #define ETM_TRCSEQEVR_F5_Pos (5UL)
  #define ETM_TRCSEQEVR_F5_Msk (0x1UL << ETM_TRCSEQEVR_F5_Pos)
  #define ETM_TRCSEQEVR_F5_Min (0x0UL)
  #define ETM_TRCSEQEVR_F5_Max (0x1UL)
  #define ETM_TRCSEQEVR_F5_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F5_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F6 @Bit 6 : Forward field. */
  #define ETM_TRCSEQEVR_F6_Pos (6UL)
  #define ETM_TRCSEQEVR_F6_Msk (0x1UL << ETM_TRCSEQEVR_F6_Pos)
  #define ETM_TRCSEQEVR_F6_Min (0x0UL)
  #define ETM_TRCSEQEVR_F6_Max (0x1UL)
  #define ETM_TRCSEQEVR_F6_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F6_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* F7 @Bit 7 : Forward field. */
  #define ETM_TRCSEQEVR_F7_Pos (7UL)
  #define ETM_TRCSEQEVR_F7_Msk (0x1UL << ETM_TRCSEQEVR_F7_Pos)
  #define ETM_TRCSEQEVR_F7_Min (0x0UL)
  #define ETM_TRCSEQEVR_F7_Max (0x1UL)
  #define ETM_TRCSEQEVR_F7_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_F7_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n to
                                                          state n+1.*/

/* B0 @Bit 8 : Backward field. */
  #define ETM_TRCSEQEVR_B0_Pos (8UL)
  #define ETM_TRCSEQEVR_B0_Msk (0x1UL << ETM_TRCSEQEVR_B0_Pos)
  #define ETM_TRCSEQEVR_B0_Min (0x0UL)
  #define ETM_TRCSEQEVR_B0_Max (0x1UL)
  #define ETM_TRCSEQEVR_B0_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B0_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B1 @Bit 9 : Backward field. */
  #define ETM_TRCSEQEVR_B1_Pos (9UL)
  #define ETM_TRCSEQEVR_B1_Msk (0x1UL << ETM_TRCSEQEVR_B1_Pos)
  #define ETM_TRCSEQEVR_B1_Min (0x0UL)
  #define ETM_TRCSEQEVR_B1_Max (0x1UL)
  #define ETM_TRCSEQEVR_B1_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B1_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B2 @Bit 10 : Backward field. */
  #define ETM_TRCSEQEVR_B2_Pos (10UL)
  #define ETM_TRCSEQEVR_B2_Msk (0x1UL << ETM_TRCSEQEVR_B2_Pos)
  #define ETM_TRCSEQEVR_B2_Min (0x0UL)
  #define ETM_TRCSEQEVR_B2_Max (0x1UL)
  #define ETM_TRCSEQEVR_B2_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B2_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B3 @Bit 11 : Backward field. */
  #define ETM_TRCSEQEVR_B3_Pos (11UL)
  #define ETM_TRCSEQEVR_B3_Msk (0x1UL << ETM_TRCSEQEVR_B3_Pos)
  #define ETM_TRCSEQEVR_B3_Min (0x0UL)
  #define ETM_TRCSEQEVR_B3_Max (0x1UL)
  #define ETM_TRCSEQEVR_B3_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B3_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B4 @Bit 12 : Backward field. */
  #define ETM_TRCSEQEVR_B4_Pos (12UL)
  #define ETM_TRCSEQEVR_B4_Msk (0x1UL << ETM_TRCSEQEVR_B4_Pos)
  #define ETM_TRCSEQEVR_B4_Min (0x0UL)
  #define ETM_TRCSEQEVR_B4_Max (0x1UL)
  #define ETM_TRCSEQEVR_B4_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B4_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B5 @Bit 13 : Backward field. */
  #define ETM_TRCSEQEVR_B5_Pos (13UL)
  #define ETM_TRCSEQEVR_B5_Msk (0x1UL << ETM_TRCSEQEVR_B5_Pos)
  #define ETM_TRCSEQEVR_B5_Min (0x0UL)
  #define ETM_TRCSEQEVR_B5_Max (0x1UL)
  #define ETM_TRCSEQEVR_B5_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B5_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B6 @Bit 14 : Backward field. */
  #define ETM_TRCSEQEVR_B6_Pos (14UL)
  #define ETM_TRCSEQEVR_B6_Msk (0x1UL << ETM_TRCSEQEVR_B6_Pos)
  #define ETM_TRCSEQEVR_B6_Min (0x0UL)
  #define ETM_TRCSEQEVR_B6_Max (0x1UL)
  #define ETM_TRCSEQEVR_B6_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B6_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/

/* B7 @Bit 15 : Backward field. */
  #define ETM_TRCSEQEVR_B7_Pos (15UL)
  #define ETM_TRCSEQEVR_B7_Msk (0x1UL << ETM_TRCSEQEVR_B7_Pos)
  #define ETM_TRCSEQEVR_B7_Min (0x0UL)
  #define ETM_TRCSEQEVR_B7_Max (0x1UL)
  #define ETM_TRCSEQEVR_B7_Disabled (0x0UL)
  #define ETM_TRCSEQEVR_B7_Enabled (0x1UL)           /*!< When the event occurs then the sequencer state moves from state n+1 to
                                                          state n.*/


/* ETM_TRCSEQRSTEVR: Moves the sequencer to state 0 when a programmed event occurs. Might ignore writes when the trace unit is
                      enabled or not idle. When the sequencer is used, all sequencer state transitions must be programmed with a
                      valid event. */

  #define ETM_TRCSEQRSTEVR_ResetValue (0x00000000UL)

/* EVENT @Bits 0..7 : Select which event should reset the sequencer. */
  #define ETM_TRCSEQRSTEVR_EVENT_Pos (0UL)
  #define ETM_TRCSEQRSTEVR_EVENT_Msk (0xFFUL << ETM_TRCSEQRSTEVR_EVENT_Pos)
  #define ETM_TRCSEQRSTEVR_EVENT_Min (0x00UL)
  #define ETM_TRCSEQRSTEVR_EVENT_Max (0xFFUL)


/* ETM_TRCSEQSTR: Use this to set, or read, the sequencer state. Might ignore writes when the trace unit is enabled or not idle.
                   Only returns stable data when TRCSTATR.PMSTABLE == 1. When the sequencer is used, all sequencer state
                   transitions must be programmed with a valid event. */

  #define ETM_TRCSEQSTR_ResetValue (0x00000000UL)

/* STATE @Bits 0..1 : Sets or returns the state of the sequencer. */
  #define ETM_TRCSEQSTR_STATE_Pos (0UL)
  #define ETM_TRCSEQSTR_STATE_Msk (0x3UL << ETM_TRCSEQSTR_STATE_Pos)
  #define ETM_TRCSEQSTR_STATE_Min (0x0UL)
  #define ETM_TRCSEQSTR_STATE_Max (0x3UL)
  #define ETM_TRCSEQSTR_STATE_State0 (0x0UL)
  #define ETM_TRCSEQSTR_STATE_State1 (0x1UL)
  #define ETM_TRCSEQSTR_STATE_State2 (0x2UL)
  #define ETM_TRCSEQSTR_STATE_State3 (0x3UL)


/* ETM_TRCEXTINSELR: Use this to set, or read, which external inputs are resources to the trace unit. Might ignore writes when
                      the trace unit is enabled or not idle. Only returns stable data when TRCSTATR.PMSTABLE == 1. When the
                      sequencer is used, all sequencer state transitions must be programmed with a valid event. */

  #define ETM_TRCEXTINSELR_ResetValue (0x00000000UL)

/* SEL0 @Bits 0..7 : Each field in this collection selects an external input as a resource for the trace unit. */
  #define ETM_TRCEXTINSELR_SEL0_Pos (0UL)
  #define ETM_TRCEXTINSELR_SEL0_Msk (0xFFUL << ETM_TRCEXTINSELR_SEL0_Pos)
  #define ETM_TRCEXTINSELR_SEL0_Min (0x00UL)
  #define ETM_TRCEXTINSELR_SEL0_Max (0xFFUL)

/* SEL1 @Bits 8..15 : Each field in this collection selects an external input as a resource for the trace unit. */
  #define ETM_TRCEXTINSELR_SEL1_Pos (8UL)
  #define ETM_TRCEXTINSELR_SEL1_Msk (0xFFUL << ETM_TRCEXTINSELR_SEL1_Pos)
  #define ETM_TRCEXTINSELR_SEL1_Min (0x00UL)
  #define ETM_TRCEXTINSELR_SEL1_Max (0xFFUL)

/* SEL2 @Bits 16..23 : Each field in this collection selects an external input as a resource for the trace unit. */
  #define ETM_TRCEXTINSELR_SEL2_Pos (16UL)
  #define ETM_TRCEXTINSELR_SEL2_Msk (0xFFUL << ETM_TRCEXTINSELR_SEL2_Pos)
  #define ETM_TRCEXTINSELR_SEL2_Min (0x00UL)
  #define ETM_TRCEXTINSELR_SEL2_Max (0xFFUL)

/* SEL3 @Bits 24..31 : Each field in this collection selects an external input as a resource for the trace unit. */
  #define ETM_TRCEXTINSELR_SEL3_Pos (24UL)
  #define ETM_TRCEXTINSELR_SEL3_Msk (0xFFUL << ETM_TRCEXTINSELR_SEL3_Pos)
  #define ETM_TRCEXTINSELR_SEL3_Min (0x00UL)
  #define ETM_TRCEXTINSELR_SEL3_Max (0xFFUL)


/* ETM_TRCCNTRLDVR: This sets or returns the reload count value for counter n. Might ignore writes when the trace unit is
                     enabled or not idle. */

  #define ETM_TRCCNTRLDVR_MaxCount (4UL)
  #define ETM_TRCCNTRLDVR_MaxIndex (3UL)
  #define ETM_TRCCNTRLDVR_MinIndex (0UL)
  #define ETM_TRCCNTRLDVR_ResetValue (0x00000000UL)

/* VALUE @Bits 0..15 : Contains the reload value for counter n. When a reload event occurs for counter n then the trace unit
                       copies the VALUEn field into counter n. */

  #define ETM_TRCCNTRLDVR_VALUE_Pos (0UL)
  #define ETM_TRCCNTRLDVR_VALUE_Msk (0xFFFFUL << ETM_TRCCNTRLDVR_VALUE_Pos)
  #define ETM_TRCCNTRLDVR_VALUE_Min (0x0000UL)
  #define ETM_TRCCNTRLDVR_VALUE_Max (0xFFFFUL)


/* ETM_TRCCNTCTLR: Controls the operation of counter n. Might ignore writes when the trace unit is enabled or not idle. */
  #define ETM_TRCCNTCTLR_MaxCount (4UL)
  #define ETM_TRCCNTCTLR_MaxIndex (3UL)
  #define ETM_TRCCNTCTLR_MinIndex (0UL)
  #define ETM_TRCCNTCTLR_ResetValue (0x00000000UL)

/* CNTEVENT @Bits 0..7 : Selects an event, that when it occurs causes counter n to decrement. */
  #define ETM_TRCCNTCTLR_CNTEVENT_Pos (0UL)
  #define ETM_TRCCNTCTLR_CNTEVENT_Msk (0xFFUL << ETM_TRCCNTCTLR_CNTEVENT_Pos)
  #define ETM_TRCCNTCTLR_CNTEVENT_Min (0x00UL)
  #define ETM_TRCCNTCTLR_CNTEVENT_Max (0xFFUL)

/* RLDEVENT @Bits 8..15 : Selects an event, that when it occurs causes a reload event for counter n. */
  #define ETM_TRCCNTCTLR_RLDEVENT_Pos (8UL)
  #define ETM_TRCCNTCTLR_RLDEVENT_Msk (0xFFUL << ETM_TRCCNTCTLR_RLDEVENT_Pos)
  #define ETM_TRCCNTCTLR_RLDEVENT_Min (0x00UL)
  #define ETM_TRCCNTCTLR_RLDEVENT_Max (0xFFUL)

/* RLDSELF @Bit 16 : Controls whether a reload event occurs for counter n, when counter n reaches zero. */
  #define ETM_TRCCNTCTLR_RLDSELF_Pos (16UL)
  #define ETM_TRCCNTCTLR_RLDSELF_Msk (0x1UL << ETM_TRCCNTCTLR_RLDSELF_Pos)
  #define ETM_TRCCNTCTLR_RLDSELF_Min (0x0UL)
  #define ETM_TRCCNTCTLR_RLDSELF_Max (0x1UL)
  #define ETM_TRCCNTCTLR_RLDSELF_Disabled (0x0UL)
  #define ETM_TRCCNTCTLR_RLDSELF_Enabled (0x1UL)

/* CNTCHAIN @Bit 17 : For TRCCNTCTLR3 and TRCCNTCTLR1, this bit controls whether counter n decrements when a reload event occurs
                      for counter n-1. */

  #define ETM_TRCCNTCTLR_CNTCHAIN_Pos (17UL)
  #define ETM_TRCCNTCTLR_CNTCHAIN_Msk (0x1UL << ETM_TRCCNTCTLR_CNTCHAIN_Pos)
  #define ETM_TRCCNTCTLR_CNTCHAIN_Min (0x0UL)
  #define ETM_TRCCNTCTLR_CNTCHAIN_Max (0x1UL)
  #define ETM_TRCCNTCTLR_CNTCHAIN_Disabled (0x0UL)   /*!< Counter n does not decrement when a reload event for counter n-1
                                                          occurs.*/
  #define ETM_TRCCNTCTLR_CNTCHAIN_Enabled (0x1UL)    /*!< Counter n decrements when a reload event for counter n-1 occurs. This
                                                          concatenates counter n and counter n-1, to provide a larger count
                                                          value.*/


/* ETM_TRCCNTVR: This sets or returns the value of counter n. The count value is only stable when TRCSTATR.PMSTABLE == 1. If
                  software uses counter n then it must write to this register to set the initial counter value. Might ignore
                  writes when the trace unit is enabled or not idle. */

  #define ETM_TRCCNTVR_MaxCount (4UL)
  #define ETM_TRCCNTVR_MaxIndex (3UL)
  #define ETM_TRCCNTVR_MinIndex (0UL)
  #define ETM_TRCCNTVR_ResetValue (0x00000000UL)

/* VALUE @Bits 0..15 : Contains the count value of counter n. */
  #define ETM_TRCCNTVR_VALUE_Pos (0UL)
  #define ETM_TRCCNTVR_VALUE_Msk (0xFFFFUL << ETM_TRCCNTVR_VALUE_Pos)
  #define ETM_TRCCNTVR_VALUE_Min (0x0000UL)
  #define ETM_TRCCNTVR_VALUE_Max (0xFFFFUL)


/* ETM_TRCRSCTLR: Controls the selection of the resources in the trace unit. Might ignore writes when the trace unit is enabled
                   or not idle. If software selects a non-implemented resource then CONSTRAINED UNPREDICTABLE behavior of the
                   resource selector occurs, so the resource selector might fire unexpectedly or might not fire. Reads of the
                   TRCRSCTLRn might return UNKNOWN. */

  #define ETM_TRCRSCTLR_MaxCount (30UL)
  #define ETM_TRCRSCTLR_MaxIndex (31UL)
  #define ETM_TRCRSCTLR_MinIndex (2UL)
  #define ETM_TRCRSCTLR_ResetValue (0x00000000UL)

/* EN @Bit 0 : Trace unit enable bit */
  #define ETM_TRCRSCTLR_EN_Pos (0UL)
  #define ETM_TRCRSCTLR_EN_Msk (0x1UL << ETM_TRCRSCTLR_EN_Pos)
  #define ETM_TRCRSCTLR_EN_Min (0x0UL)
  #define ETM_TRCRSCTLR_EN_Max (0x1UL)
  #define ETM_TRCRSCTLR_EN_Disabled (0x0UL)          /*!< The trace unit is disabled. All trace resources are inactive and no
                                                          trace is generated.*/
  #define ETM_TRCRSCTLR_EN_Enabled (0x1UL)


/* ETM_TRCSSCCR0: Controls the single-shot comparator. */
  #define ETM_TRCSSCCR0_ResetValue (0x00000000UL)

/* RST @Bit 24 : Enables the single-shot comparator resource to be reset when it occurs, to enable another comparator match to
                 be detected */

  #define ETM_TRCSSCCR0_RST_Pos (24UL)
  #define ETM_TRCSSCCR0_RST_Msk (0x1UL << ETM_TRCSSCCR0_RST_Pos)
  #define ETM_TRCSSCCR0_RST_Min (0x0UL)
  #define ETM_TRCSSCCR0_RST_Max (0x1UL)
  #define ETM_TRCSSCCR0_RST_Disabled (0x0UL)
  #define ETM_TRCSSCCR0_RST_Enabled (0x1UL)


/* ETM_TRCSSCSR0: Indicates the status of the single-shot comparators. TRCSSCSR0 is sensitive toinstruction addresses. */
  #define ETM_TRCSSCSR0_ResetValue (0x00000000UL)

/* INST @Bit 0 : Instruction address comparator support */
  #define ETM_TRCSSCSR0_INST_Pos (0UL)
  #define ETM_TRCSSCSR0_INST_Msk (0x1UL << ETM_TRCSSCSR0_INST_Pos)
  #define ETM_TRCSSCSR0_INST_Min (0x0UL)
  #define ETM_TRCSSCSR0_INST_Max (0x1UL)
  #define ETM_TRCSSCSR0_INST_False (0x0UL)
  #define ETM_TRCSSCSR0_INST_True (0x1UL)

/* DA @Bit 1 : Data address comparator support */
  #define ETM_TRCSSCSR0_DA_Pos (1UL)
  #define ETM_TRCSSCSR0_DA_Msk (0x1UL << ETM_TRCSSCSR0_DA_Pos)
  #define ETM_TRCSSCSR0_DA_Min (0x0UL)
  #define ETM_TRCSSCSR0_DA_Max (0x1UL)
  #define ETM_TRCSSCSR0_DA_False (0x0UL)
  #define ETM_TRCSSCSR0_DA_True (0x1UL)

/* DV @Bit 2 : Data value comparator support */
  #define ETM_TRCSSCSR0_DV_Pos (2UL)
  #define ETM_TRCSSCSR0_DV_Msk (0x1UL << ETM_TRCSSCSR0_DV_Pos)
  #define ETM_TRCSSCSR0_DV_Min (0x0UL)
  #define ETM_TRCSSCSR0_DV_Max (0x1UL)
  #define ETM_TRCSSCSR0_DV_False (0x0UL)
  #define ETM_TRCSSCSR0_DV_True (0x1UL)

/* PC @Bit 3 : Process counter value comparator support */
  #define ETM_TRCSSCSR0_PC_Pos (3UL)
  #define ETM_TRCSSCSR0_PC_Msk (0x1UL << ETM_TRCSSCSR0_PC_Pos)
  #define ETM_TRCSSCSR0_PC_Min (0x0UL)
  #define ETM_TRCSSCSR0_PC_Max (0x1UL)
  #define ETM_TRCSSCSR0_PC_False (0x0UL)
  #define ETM_TRCSSCSR0_PC_True (0x1UL)

/* STATUS @Bit 31 : Single-shot status. This indicates whether any of the selected comparators have matched. */
  #define ETM_TRCSSCSR0_STATUS_Pos (31UL)
  #define ETM_TRCSSCSR0_STATUS_Msk (0x1UL << ETM_TRCSSCSR0_STATUS_Pos)
  #define ETM_TRCSSCSR0_STATUS_Min (0x0UL)
  #define ETM_TRCSSCSR0_STATUS_Max (0x1UL)
  #define ETM_TRCSSCSR0_STATUS_NoMatch (0x0UL)
  #define ETM_TRCSSCSR0_STATUS_Match (0x1UL)


/* ETM_TRCSSPCICR0: Selects the processor comparator inputs for Single-shot control. */
  #define ETM_TRCSSPCICR0_ResetValue (0x00000000UL)

/* PC0 @Bit 0 : Selects processor comparator 0 inputs for Single-shot control */
  #define ETM_TRCSSPCICR0_PC0_Pos (0UL)
  #define ETM_TRCSSPCICR0_PC0_Msk (0x1UL << ETM_TRCSSPCICR0_PC0_Pos)
  #define ETM_TRCSSPCICR0_PC0_Min (0x0UL)
  #define ETM_TRCSSPCICR0_PC0_Max (0x1UL)
  #define ETM_TRCSSPCICR0_PC0_Disabled (0x0UL)
  #define ETM_TRCSSPCICR0_PC0_Enabled (0x1UL)

/* PC1 @Bit 1 : Selects processor comparator 1 inputs for Single-shot control */
  #define ETM_TRCSSPCICR0_PC1_Pos (1UL)
  #define ETM_TRCSSPCICR0_PC1_Msk (0x1UL << ETM_TRCSSPCICR0_PC1_Pos)
  #define ETM_TRCSSPCICR0_PC1_Min (0x0UL)
  #define ETM_TRCSSPCICR0_PC1_Max (0x1UL)
  #define ETM_TRCSSPCICR0_PC1_Disabled (0x0UL)
  #define ETM_TRCSSPCICR0_PC1_Enabled (0x1UL)

/* PC2 @Bit 2 : Selects processor comparator 2 inputs for Single-shot control */
  #define ETM_TRCSSPCICR0_PC2_Pos (2UL)
  #define ETM_TRCSSPCICR0_PC2_Msk (0x1UL << ETM_TRCSSPCICR0_PC2_Pos)
  #define ETM_TRCSSPCICR0_PC2_Min (0x0UL)
  #define ETM_TRCSSPCICR0_PC2_Max (0x1UL)
  #define ETM_TRCSSPCICR0_PC2_Disabled (0x0UL)
  #define ETM_TRCSSPCICR0_PC2_Enabled (0x1UL)

/* PC3 @Bit 3 : Selects processor comparator 3 inputs for Single-shot control */
  #define ETM_TRCSSPCICR0_PC3_Pos (3UL)
  #define ETM_TRCSSPCICR0_PC3_Msk (0x1UL << ETM_TRCSSPCICR0_PC3_Pos)
  #define ETM_TRCSSPCICR0_PC3_Min (0x0UL)
  #define ETM_TRCSSPCICR0_PC3_Max (0x1UL)
  #define ETM_TRCSSPCICR0_PC3_Disabled (0x0UL)
  #define ETM_TRCSSPCICR0_PC3_Enabled (0x1UL)


/* ETM_TRCPDCR: Controls the single-shot comparator. */
  #define ETM_TRCPDCR_ResetValue (0x00000000UL)

/* PU @Bit 24 : Power up request, to request that power to ETM and access to the trace registers is maintained. */
  #define ETM_TRCPDCR_PU_Pos (24UL)
  #define ETM_TRCPDCR_PU_Msk (0x1UL << ETM_TRCPDCR_PU_Pos)
  #define ETM_TRCPDCR_PU_Min (0x0UL)
  #define ETM_TRCPDCR_PU_Max (0x1UL)
  #define ETM_TRCPDCR_PU_Disabled (0x0UL)
  #define ETM_TRCPDCR_PU_Enabled (0x1UL)


/* ETM_TRCPDSR: Indicates the power down status of the ETM. */
  #define ETM_TRCPDSR_ResetValue (0x00000000UL)

/* POWER @Bit 0 : Indicates ETM is powered up */
  #define ETM_TRCPDSR_POWER_Pos (0UL)
  #define ETM_TRCPDSR_POWER_Msk (0x1UL << ETM_TRCPDSR_POWER_Pos)
  #define ETM_TRCPDSR_POWER_Min (0x0UL)
  #define ETM_TRCPDSR_POWER_Max (0x1UL)
  #define ETM_TRCPDSR_POWER_NotPoweredUp (0x0UL)
  #define ETM_TRCPDSR_POWER_PoweredUp (0x1UL)

/* STICKYPD @Bit 1 : Sticky power down state. This bit is set to 1 when power to the ETM registers is removed, to indicate that
                     programming state has been lost. It is cleared after a read of the TRCPDSR */

  #define ETM_TRCPDSR_STICKYPD_Pos (1UL)
  #define ETM_TRCPDSR_STICKYPD_Msk (0x1UL << ETM_TRCPDSR_STICKYPD_Pos)
  #define ETM_TRCPDSR_STICKYPD_Min (0x0UL)
  #define ETM_TRCPDSR_STICKYPD_Max (0x1UL)
  #define ETM_TRCPDSR_STICKYPD_NotPoweredDown (0x0UL) /*!< Trace register power has not been removed since the TRCPDSR was last
                                                           read.*/
  #define ETM_TRCPDSR_STICKYPD_PoweredDown (0x1UL)   /*!< Trace register power has been removed since the TRCPDSR was last
                                                          read.*/


/* ETM_TRCITATBIDR: Sets the state of output pins. */
  #define ETM_TRCITATBIDR_ResetValue (0x00000000UL)

/* ID0 @Bit 0 : Drives the ATIDMI[0] output pin. */
  #define ETM_TRCITATBIDR_ID0_Pos (0UL)
  #define ETM_TRCITATBIDR_ID0_Msk (0x1UL << ETM_TRCITATBIDR_ID0_Pos)

/* ID1 @Bit 1 : Drives the ATIDMI[1] output pin. */
  #define ETM_TRCITATBIDR_ID1_Pos (1UL)
  #define ETM_TRCITATBIDR_ID1_Msk (0x1UL << ETM_TRCITATBIDR_ID1_Pos)

/* ID2 @Bit 2 : Drives the ATIDMI[2] output pin. */
  #define ETM_TRCITATBIDR_ID2_Pos (2UL)
  #define ETM_TRCITATBIDR_ID2_Msk (0x1UL << ETM_TRCITATBIDR_ID2_Pos)

/* ID3 @Bit 3 : Drives the ATIDMI[3] output pin. */
  #define ETM_TRCITATBIDR_ID3_Pos (3UL)
  #define ETM_TRCITATBIDR_ID3_Msk (0x1UL << ETM_TRCITATBIDR_ID3_Pos)

/* ID4 @Bit 4 : Drives the ATIDMI[4] output pin. */
  #define ETM_TRCITATBIDR_ID4_Pos (4UL)
  #define ETM_TRCITATBIDR_ID4_Msk (0x1UL << ETM_TRCITATBIDR_ID4_Pos)

/* ID5 @Bit 5 : Drives the ATIDMI[5] output pin. */
  #define ETM_TRCITATBIDR_ID5_Pos (5UL)
  #define ETM_TRCITATBIDR_ID5_Msk (0x1UL << ETM_TRCITATBIDR_ID5_Pos)

/* ID6 @Bit 6 : Drives the ATIDMI[6] output pin. */
  #define ETM_TRCITATBIDR_ID6_Pos (6UL)
  #define ETM_TRCITATBIDR_ID6_Msk (0x1UL << ETM_TRCITATBIDR_ID6_Pos)


/* ETM_TRCITIATBINR: Reads the state of the input pins. */
  #define ETM_TRCITIATBINR_ResetValue (0x00000000UL)

/* ATVALID @Bit 0 : Returns the value of the ATVALIDMI input pin. */
  #define ETM_TRCITIATBINR_ATVALID_Pos (0UL)
  #define ETM_TRCITIATBINR_ATVALID_Msk (0x1UL << ETM_TRCITIATBINR_ATVALID_Pos)

/* AFREADY @Bit 1 : Returns the value of the AFREADYMI input pin. */
  #define ETM_TRCITIATBINR_AFREADY_Pos (1UL)
  #define ETM_TRCITIATBINR_AFREADY_Msk (0x1UL << ETM_TRCITIATBINR_AFREADY_Pos)


/* ETM_TRCITIATBOUTR: Sets the state of the output pins. */
  #define ETM_TRCITIATBOUTR_ResetValue (0x00000000UL)

/* ATVALID @Bit 0 : Drives the ATVALIDMI output pin. */
  #define ETM_TRCITIATBOUTR_ATVALID_Pos (0UL)
  #define ETM_TRCITIATBOUTR_ATVALID_Msk (0x1UL << ETM_TRCITIATBOUTR_ATVALID_Pos)

/* AFREADY @Bit 1 : Drives the AFREADYMI output pin. */
  #define ETM_TRCITIATBOUTR_AFREADY_Pos (1UL)
  #define ETM_TRCITIATBOUTR_AFREADY_Msk (0x1UL << ETM_TRCITIATBOUTR_AFREADY_Pos)


/* ETM_TRCITCTRL: Enables topology detection or integration testing, by putting ETM-M33 into integration mode. */
  #define ETM_TRCITCTRL_ResetValue (0x00000000UL)

/* IME @Bit 0 : Integration mode enable */
  #define ETM_TRCITCTRL_IME_Pos (0UL)
  #define ETM_TRCITCTRL_IME_Msk (0x1UL << ETM_TRCITCTRL_IME_Pos)
  #define ETM_TRCITCTRL_IME_Min (0x0UL)
  #define ETM_TRCITCTRL_IME_Max (0x1UL)
  #define ETM_TRCITCTRL_IME_Disabled (0x0UL)
  #define ETM_TRCITCTRL_IME_Enabled (0x1UL)


/* ETM_TRCCLAIMSET: Sets bits in the claim tag and determines the number of claim tag bits implemented. */
  #define ETM_TRCCLAIMSET_ResetValue (0x00000000UL)

/* SET0 @Bit 0 : Claim tag set register */
  #define ETM_TRCCLAIMSET_SET0_Pos (0UL)
  #define ETM_TRCCLAIMSET_SET0_Msk (0x1UL << ETM_TRCCLAIMSET_SET0_Pos)
  #define ETM_TRCCLAIMSET_SET0_Min (0x0UL)
  #define ETM_TRCCLAIMSET_SET0_Max (0x1UL)
  #define ETM_TRCCLAIMSET_SET0_NotSet (0x0UL)
  #define ETM_TRCCLAIMSET_SET0_Set (0x1UL)
  #define ETM_TRCCLAIMSET_SET0_Claim (0x1UL)

/* SET1 @Bit 1 : Claim tag set register */
  #define ETM_TRCCLAIMSET_SET1_Pos (1UL)
  #define ETM_TRCCLAIMSET_SET1_Msk (0x1UL << ETM_TRCCLAIMSET_SET1_Pos)
  #define ETM_TRCCLAIMSET_SET1_Min (0x0UL)
  #define ETM_TRCCLAIMSET_SET1_Max (0x1UL)
  #define ETM_TRCCLAIMSET_SET1_NotSet (0x0UL)
  #define ETM_TRCCLAIMSET_SET1_Set (0x1UL)
  #define ETM_TRCCLAIMSET_SET1_Claim (0x1UL)

/* SET2 @Bit 2 : Claim tag set register */
  #define ETM_TRCCLAIMSET_SET2_Pos (2UL)
  #define ETM_TRCCLAIMSET_SET2_Msk (0x1UL << ETM_TRCCLAIMSET_SET2_Pos)
  #define ETM_TRCCLAIMSET_SET2_Min (0x0UL)
  #define ETM_TRCCLAIMSET_SET2_Max (0x1UL)
  #define ETM_TRCCLAIMSET_SET2_NotSet (0x0UL)
  #define ETM_TRCCLAIMSET_SET2_Set (0x1UL)
  #define ETM_TRCCLAIMSET_SET2_Claim (0x1UL)

/* SET3 @Bit 3 : Claim tag set register */
  #define ETM_TRCCLAIMSET_SET3_Pos (3UL)
  #define ETM_TRCCLAIMSET_SET3_Msk (0x1UL << ETM_TRCCLAIMSET_SET3_Pos)
  #define ETM_TRCCLAIMSET_SET3_Min (0x0UL)
  #define ETM_TRCCLAIMSET_SET3_Max (0x1UL)
  #define ETM_TRCCLAIMSET_SET3_NotSet (0x0UL)
  #define ETM_TRCCLAIMSET_SET3_Set (0x1UL)
  #define ETM_TRCCLAIMSET_SET3_Claim (0x1UL)


/* ETM_TRCCLAIMCLR: Clears bits in the claim tag and determines the current value of the claim tag. */
  #define ETM_TRCCLAIMCLR_ResetValue (0x00000000UL)

/* CLR0 @Bit 0 : Claim tag clear register */
  #define ETM_TRCCLAIMCLR_CLR0_Pos (0UL)
  #define ETM_TRCCLAIMCLR_CLR0_Msk (0x1UL << ETM_TRCCLAIMCLR_CLR0_Pos)
  #define ETM_TRCCLAIMCLR_CLR0_Min (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR0_Max (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR0_NotSet (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR0_Set (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR0_Clear (0x1UL)

/* CLR1 @Bit 1 : Claim tag clear register */
  #define ETM_TRCCLAIMCLR_CLR1_Pos (1UL)
  #define ETM_TRCCLAIMCLR_CLR1_Msk (0x1UL << ETM_TRCCLAIMCLR_CLR1_Pos)
  #define ETM_TRCCLAIMCLR_CLR1_Min (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR1_Max (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR1_NotSet (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR1_Set (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR1_Clear (0x1UL)

/* CLR2 @Bit 2 : Claim tag clear register */
  #define ETM_TRCCLAIMCLR_CLR2_Pos (2UL)
  #define ETM_TRCCLAIMCLR_CLR2_Msk (0x1UL << ETM_TRCCLAIMCLR_CLR2_Pos)
  #define ETM_TRCCLAIMCLR_CLR2_Min (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR2_Max (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR2_NotSet (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR2_Set (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR2_Clear (0x1UL)

/* CLR3 @Bit 3 : Claim tag clear register */
  #define ETM_TRCCLAIMCLR_CLR3_Pos (3UL)
  #define ETM_TRCCLAIMCLR_CLR3_Msk (0x1UL << ETM_TRCCLAIMCLR_CLR3_Pos)
  #define ETM_TRCCLAIMCLR_CLR3_Min (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR3_Max (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR3_NotSet (0x0UL)
  #define ETM_TRCCLAIMCLR_CLR3_Set (0x1UL)
  #define ETM_TRCCLAIMCLR_CLR3_Clear (0x1UL)


/* ETM_TRCAUTHSTATUS: Indicates the current level of tracing permitted by the system */
  #define ETM_TRCAUTHSTATUS_ResetValue (0x00000000UL)

/* NSID @Bits 0..1 : Non-secure Invasive Debug */
  #define ETM_TRCAUTHSTATUS_NSID_Pos (0UL)
  #define ETM_TRCAUTHSTATUS_NSID_Msk (0x3UL << ETM_TRCAUTHSTATUS_NSID_Pos)
  #define ETM_TRCAUTHSTATUS_NSID_Min (0x0UL)
  #define ETM_TRCAUTHSTATUS_NSID_Max (0x1UL)
  #define ETM_TRCAUTHSTATUS_NSID_NotImplemented (0x0UL)
  #define ETM_TRCAUTHSTATUS_NSID_Implemented (0x1UL)

/* NSNID @Bits 2..3 : Non-secure Non-Invasive Debug */
  #define ETM_TRCAUTHSTATUS_NSNID_Pos (2UL)
  #define ETM_TRCAUTHSTATUS_NSNID_Msk (0x3UL << ETM_TRCAUTHSTATUS_NSNID_Pos)
  #define ETM_TRCAUTHSTATUS_NSNID_Min (0x0UL)
  #define ETM_TRCAUTHSTATUS_NSNID_Max (0x1UL)
  #define ETM_TRCAUTHSTATUS_NSNID_NotImplemented (0x0UL)
  #define ETM_TRCAUTHSTATUS_NSNID_Implemented (0x1UL)

/* SID @Bits 4..5 : Secure Invasive Debug */
  #define ETM_TRCAUTHSTATUS_SID_Pos (4UL)
  #define ETM_TRCAUTHSTATUS_SID_Msk (0x3UL << ETM_TRCAUTHSTATUS_SID_Pos)
  #define ETM_TRCAUTHSTATUS_SID_Min (0x0UL)
  #define ETM_TRCAUTHSTATUS_SID_Max (0x1UL)
  #define ETM_TRCAUTHSTATUS_SID_NotImplemented (0x0UL)
  #define ETM_TRCAUTHSTATUS_SID_Implemented (0x1UL)

/* SNID @Bits 6..7 : Secure Non-Invasive Debug */
  #define ETM_TRCAUTHSTATUS_SNID_Pos (6UL)
  #define ETM_TRCAUTHSTATUS_SNID_Msk (0x3UL << ETM_TRCAUTHSTATUS_SNID_Pos)
  #define ETM_TRCAUTHSTATUS_SNID_Min (0x0UL)
  #define ETM_TRCAUTHSTATUS_SNID_Max (0x1UL)
  #define ETM_TRCAUTHSTATUS_SNID_NotImplemented (0x0UL)
  #define ETM_TRCAUTHSTATUS_SNID_Implemented (0x1UL)


/* ETM_TRCDEVARCH: The TRCDEVARCH identifies ETM-M33 as an ETMv4.2 component */
  #define ETM_TRCDEVARCH_ResetValue (0x00000000UL)

/* ARCHID @Bits 0..15 : Architecture ID */
  #define ETM_TRCDEVARCH_ARCHID_Pos (0UL)
  #define ETM_TRCDEVARCH_ARCHID_Msk (0xFFFFUL << ETM_TRCDEVARCH_ARCHID_Pos)
  #define ETM_TRCDEVARCH_ARCHID_Min (0x4A13UL)
  #define ETM_TRCDEVARCH_ARCHID_Max (0x4A13UL)
  #define ETM_TRCDEVARCH_ARCHID_ETMv42 (0x4A13UL)

/* REVISION @Bits 16..19 : Architecture revision */
  #define ETM_TRCDEVARCH_REVISION_Pos (16UL)
  #define ETM_TRCDEVARCH_REVISION_Msk (0xFUL << ETM_TRCDEVARCH_REVISION_Pos)
  #define ETM_TRCDEVARCH_REVISION_Min (0x2UL)
  #define ETM_TRCDEVARCH_REVISION_Max (0x2UL)
  #define ETM_TRCDEVARCH_REVISION_v2 (0x2UL)

/* PRESENT @Bit 20 : This register is implemented */
  #define ETM_TRCDEVARCH_PRESENT_Pos (20UL)
  #define ETM_TRCDEVARCH_PRESENT_Msk (0x1UL << ETM_TRCDEVARCH_PRESENT_Pos)
  #define ETM_TRCDEVARCH_PRESENT_Min (0x0UL)
  #define ETM_TRCDEVARCH_PRESENT_Max (0x1UL)
  #define ETM_TRCDEVARCH_PRESENT_Absent (0x0UL)
  #define ETM_TRCDEVARCH_PRESENT_Present (0x1UL)

/* ARCHITECT @Bits 21..31 : Defines the architect of the component */
  #define ETM_TRCDEVARCH_ARCHITECT_Pos (21UL)
  #define ETM_TRCDEVARCH_ARCHITECT_Msk (0x7FFUL << ETM_TRCDEVARCH_ARCHITECT_Pos)
  #define ETM_TRCDEVARCH_ARCHITECT_Min (0x23BUL)
  #define ETM_TRCDEVARCH_ARCHITECT_Max (0x23BUL)
  #define ETM_TRCDEVARCH_ARCHITECT_Arm (0x23BUL)


/* ETM_TRCDEVTYPE: Controls the single-shot comparator. */
  #define ETM_TRCDEVTYPE_ResetValue (0x00000000UL)

/* MAJOR @Bits 0..3 : The main type of the component */
  #define ETM_TRCDEVTYPE_MAJOR_Pos (0UL)
  #define ETM_TRCDEVTYPE_MAJOR_Msk (0xFUL << ETM_TRCDEVTYPE_MAJOR_Pos)
  #define ETM_TRCDEVTYPE_MAJOR_Min (0x3UL)
  #define ETM_TRCDEVTYPE_MAJOR_Max (0x3UL)
  #define ETM_TRCDEVTYPE_MAJOR_TraceSource (0x3UL)

/* SUB @Bits 4..7 : The sub-type of the component */
  #define ETM_TRCDEVTYPE_SUB_Pos (4UL)
  #define ETM_TRCDEVTYPE_SUB_Msk (0xFUL << ETM_TRCDEVTYPE_SUB_Pos)
  #define ETM_TRCDEVTYPE_SUB_Min (0x1UL)
  #define ETM_TRCDEVTYPE_SUB_Max (0x1UL)
  #define ETM_TRCDEVTYPE_SUB_ProcessorTrace (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           FICR                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ==================================================== Struct FICR_INFO ===================================================== */
/**
  * @brief INFO [FICR_INFO] Device info
  */
typedef struct {
  __IM  uint32_t  CONFIGID;
  __IM  uint32_t  DEVICEID[2];
  __IOM uint32_t  UUID[4];
  __IM  uint32_t  PART;
  __IM  uint32_t  VARIANT;                           /*!< (@ 0x00000020) Part Variant, Hardware version and Production
                                                                         configuration*/
  __IM  uint32_t  PACKAGE;
  __IM  uint32_t  RAM;
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  MRAM;
} NRF_FICR_INFO_Type;

/* FICR_INFO_CONFIGID: Configuration identifier */
  #define FICR_INFO_CONFIGID_ResetValue (0xFFFFFFFFUL)

/* HWID @Bits 0..15 : Identification number for the HW */
  #define FICR_INFO_CONFIGID_HWID_Pos (0UL)
  #define FICR_INFO_CONFIGID_HWID_Msk (0xFFFFUL << FICR_INFO_CONFIGID_HWID_Pos)


/* FICR_INFO_DEVICEID: Device identifier */
  #define FICR_INFO_DEVICEID_MaxCount (2UL)
  #define FICR_INFO_DEVICEID_MaxIndex (1UL)
  #define FICR_INFO_DEVICEID_MinIndex (0UL)
  #define FICR_INFO_DEVICEID_ResetValue (0xFFFFFFFFUL)

/* DEVICEID @Bits 0..31 : 64 bit unique device identifier */
  #define FICR_INFO_DEVICEID_DEVICEID_Pos (0UL)
  #define FICR_INFO_DEVICEID_DEVICEID_Msk (0xFFFFFFFFUL << FICR_INFO_DEVICEID_DEVICEID_Pos)


/* FICR_INFO_UUID: 128-bit Universally Unique IDentifier (UUID). */
  #define FICR_INFO_UUID_MaxCount (4UL)
  #define FICR_INFO_UUID_MaxIndex (3UL)
  #define FICR_INFO_UUID_MinIndex (0UL)
  #define FICR_INFO_UUID_ResetValue (0xFFFFFFFFUL)

/* UUID @Bits 0..31 : Device UUID [n]. */
  #define FICR_INFO_UUID_UUID_Pos (0UL)
  #define FICR_INFO_UUID_UUID_Msk (0xFFFFFFFFUL << FICR_INFO_UUID_UUID_Pos)


/* FICR_INFO_PART: Part code */
  #define FICR_INFO_PART_ResetValue (0xFFFFFFFFUL)

/* PART @Bits 0..31 : Part code */
  #define FICR_INFO_PART_PART_Pos (0UL)
  #define FICR_INFO_PART_PART_Msk (0xFFFFFFFFUL << FICR_INFO_PART_PART_Pos)
  #define FICR_INFO_PART_PART_Min (0xFFFFFFFFUL)
  #define FICR_INFO_PART_PART_Max (0xFFFFFFFFUL)
  #define FICR_INFO_PART_PART_Unspecified (0xFFFFFFFFUL)


/* FICR_INFO_VARIANT: Part Variant, Hardware version and Production configuration */
  #define FICR_INFO_VARIANT_ResetValue (0xFFFFFFFFUL)

/* VARIANT @Bits 0..31 : Part Variant, Hardware version and Production configuration, encoded as ASCII */
  #define FICR_INFO_VARIANT_VARIANT_Pos (0UL)
  #define FICR_INFO_VARIANT_VARIANT_Msk (0xFFFFFFFFUL << FICR_INFO_VARIANT_VARIANT_Pos)
  #define FICR_INFO_VARIANT_VARIANT_Min (0xFFFFFFFFUL)
  #define FICR_INFO_VARIANT_VARIANT_Max (0xFFFFFFFFUL)
  #define FICR_INFO_VARIANT_VARIANT_Unspecified (0xFFFFFFFFUL)


/* FICR_INFO_PACKAGE: Package option */
  #define FICR_INFO_PACKAGE_ResetValue (0xFFFFFFFFUL)

/* PACKAGE @Bits 0..31 : Package option */
  #define FICR_INFO_PACKAGE_PACKAGE_Pos (0UL)
  #define FICR_INFO_PACKAGE_PACKAGE_Msk (0xFFFFFFFFUL << FICR_INFO_PACKAGE_PACKAGE_Pos)
  #define FICR_INFO_PACKAGE_PACKAGE_Min (0xFFFFFFFFUL)
  #define FICR_INFO_PACKAGE_PACKAGE_Max (0xFFFFFFFFUL)
  #define FICR_INFO_PACKAGE_PACKAGE_Unspecified (0xFFFFFFFFUL)


/* FICR_INFO_RAM: RAM size (KB) */
  #define FICR_INFO_RAM_ResetValue (0xFFFFFFFFUL)

/* RAM @Bits 0..31 : RAM size (KB) */
  #define FICR_INFO_RAM_RAM_Pos (0UL)
  #define FICR_INFO_RAM_RAM_Msk (0xFFFFFFFFUL << FICR_INFO_RAM_RAM_Pos)
  #define FICR_INFO_RAM_RAM_Min (0xFFFFFFFFUL)
  #define FICR_INFO_RAM_RAM_Max (0xFFFFFFFFUL)
  #define FICR_INFO_RAM_RAM_Unspecified (0xFFFFFFFFUL)


/* FICR_INFO_MRAM: MRAM size (KB) */
  #define FICR_INFO_MRAM_ResetValue (0xFFFFFFFFUL)

/* MRAM @Bits 0..31 : MRAM size (KB) */
  #define FICR_INFO_MRAM_MRAM_Pos (0UL)
  #define FICR_INFO_MRAM_MRAM_Msk (0xFFFFFFFFUL << FICR_INFO_MRAM_MRAM_Pos)
  #define FICR_INFO_MRAM_MRAM_Min (0x5F4UL)
  #define FICR_INFO_MRAM_MRAM_Max (0xFFFFFFFFUL)
  #define FICR_INFO_MRAM_MRAM_K3072 (0x000005F4UL)
  #define FICR_INFO_MRAM_MRAM_Unspecified (0xFFFFFFFFUL)



/* =================================================== Struct FICR_TRIMCNF =================================================== */
/**
  * @brief TRIMCNF [FICR_TRIMCNF] (unspecified)
  */
typedef struct {
  __IM  uint32_t  ADDR;
  __IM  uint32_t  DATA;
} NRF_FICR_TRIMCNF_Type;
  #define FICR_TRIMCNF_MaxCount (64UL)
  #define FICR_TRIMCNF_MaxIndex (63UL)
  #define FICR_TRIMCNF_MinIndex (0UL)

/* FICR_TRIMCNF_ADDR: Address of the register which will be written */
  #define FICR_TRIMCNF_ADDR_ResetValue (0xFFFFFFFFUL)

/* Address @Bits 0..31 : Address */
  #define FICR_TRIMCNF_ADDR_Address_Pos (0UL)
  #define FICR_TRIMCNF_ADDR_Address_Msk (0xFFFFFFFFUL << FICR_TRIMCNF_ADDR_Address_Pos)


/* FICR_TRIMCNF_DATA: Data to be written into the register */
  #define FICR_TRIMCNF_DATA_ResetValue (0xFFFFFFFFUL)

/* Data @Bits 0..31 : Data */
  #define FICR_TRIMCNF_DATA_Data_Pos (0UL)
  #define FICR_TRIMCNF_DATA_Data_Msk (0xFFFFFFFFUL << FICR_TRIMCNF_DATA_Data_Pos)



/* ===================================================== Struct FICR_NFC ===================================================== */
/**
  * @brief NFC [FICR_NFC] (unspecified)
  */
typedef struct {
  __IM  uint32_t  TAGHEADER0;                        /*!< (@ 0x00000000) Default header for NFC Tag. Software can read these
                                                                         values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and
                                                                         NFCID1_LAST.*/
  __IM  uint32_t  TAGHEADER1;                        /*!< (@ 0x00000004) Default header for NFC Tag. Software can read these
                                                                         values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and
                                                                         NFCID1_LAST.*/
  __IM  uint32_t  TAGHEADER2;                        /*!< (@ 0x00000008) Default header for NFC Tag. Software can read these
                                                                         values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and
                                                                         NFCID1_LAST.*/
  __IM  uint32_t  TAGHEADER3;                        /*!< (@ 0x0000000C) Default header for NFC Tag. Software can read these
                                                                         values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and
                                                                         NFCID1_LAST.*/
} NRF_FICR_NFC_Type;

/* FICR_NFC_TAGHEADER0: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST
                         and NFCID1_LAST. */

  #define FICR_NFC_TAGHEADER0_ResetValue (0xFFFFFF5FUL)

/* MFGID @Bits 0..7 : Default Manufacturer ID: Nordic Semiconductor ASA has ICM 0x5F */
  #define FICR_NFC_TAGHEADER0_MFGID_Pos (0UL)
  #define FICR_NFC_TAGHEADER0_MFGID_Msk (0xFFUL << FICR_NFC_TAGHEADER0_MFGID_Pos)

/* UD1 @Bits 8..15 : Unique identifier byte 1 */
  #define FICR_NFC_TAGHEADER0_UD1_Pos (8UL)
  #define FICR_NFC_TAGHEADER0_UD1_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD1_Pos)

/* UD2 @Bits 16..23 : Unique identifier byte 2 */
  #define FICR_NFC_TAGHEADER0_UD2_Pos (16UL)
  #define FICR_NFC_TAGHEADER0_UD2_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD2_Pos)

/* UD3 @Bits 24..31 : Unique identifier byte 3 */
  #define FICR_NFC_TAGHEADER0_UD3_Pos (24UL)
  #define FICR_NFC_TAGHEADER0_UD3_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD3_Pos)


/* FICR_NFC_TAGHEADER1: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST
                         and NFCID1_LAST. */

  #define FICR_NFC_TAGHEADER1_ResetValue (0xFFFFFFFFUL)

/* UD4 @Bits 0..7 : Unique identifier byte 4 */
  #define FICR_NFC_TAGHEADER1_UD4_Pos (0UL)
  #define FICR_NFC_TAGHEADER1_UD4_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD4_Pos)

/* UD5 @Bits 8..15 : Unique identifier byte 5 */
  #define FICR_NFC_TAGHEADER1_UD5_Pos (8UL)
  #define FICR_NFC_TAGHEADER1_UD5_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD5_Pos)

/* UD6 @Bits 16..23 : Unique identifier byte 6 */
  #define FICR_NFC_TAGHEADER1_UD6_Pos (16UL)
  #define FICR_NFC_TAGHEADER1_UD6_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD6_Pos)

/* UD7 @Bits 24..31 : Unique identifier byte 7 */
  #define FICR_NFC_TAGHEADER1_UD7_Pos (24UL)
  #define FICR_NFC_TAGHEADER1_UD7_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD7_Pos)


/* FICR_NFC_TAGHEADER2: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST
                         and NFCID1_LAST. */

  #define FICR_NFC_TAGHEADER2_ResetValue (0xFFFFFFFFUL)

/* UD8 @Bits 0..7 : Unique identifier byte 8 */
  #define FICR_NFC_TAGHEADER2_UD8_Pos (0UL)
  #define FICR_NFC_TAGHEADER2_UD8_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD8_Pos)

/* UD9 @Bits 8..15 : Unique identifier byte 9 */
  #define FICR_NFC_TAGHEADER2_UD9_Pos (8UL)
  #define FICR_NFC_TAGHEADER2_UD9_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD9_Pos)

/* UD10 @Bits 16..23 : Unique identifier byte 10 */
  #define FICR_NFC_TAGHEADER2_UD10_Pos (16UL)
  #define FICR_NFC_TAGHEADER2_UD10_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD10_Pos)

/* UD11 @Bits 24..31 : Unique identifier byte 11 */
  #define FICR_NFC_TAGHEADER2_UD11_Pos (24UL)
  #define FICR_NFC_TAGHEADER2_UD11_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD11_Pos)


/* FICR_NFC_TAGHEADER3: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST
                         and NFCID1_LAST. */

  #define FICR_NFC_TAGHEADER3_ResetValue (0xFFFFFFFFUL)

/* UD12 @Bits 0..7 : Unique identifier byte 12 */
  #define FICR_NFC_TAGHEADER3_UD12_Pos (0UL)
  #define FICR_NFC_TAGHEADER3_UD12_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD12_Pos)

/* UD13 @Bits 8..15 : Unique identifier byte 13 */
  #define FICR_NFC_TAGHEADER3_UD13_Pos (8UL)
  #define FICR_NFC_TAGHEADER3_UD13_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD13_Pos)

/* UD14 @Bits 16..23 : Unique identifier byte 14 */
  #define FICR_NFC_TAGHEADER3_UD14_Pos (16UL)
  #define FICR_NFC_TAGHEADER3_UD14_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD14_Pos)

/* UD15 @Bits 24..31 : Unique identifier byte 15 */
  #define FICR_NFC_TAGHEADER3_UD15_Pos (24UL)
  #define FICR_NFC_TAGHEADER3_UD15_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD15_Pos)


/* ======================================================= Struct FICR ======================================================= */
/**
  * @brief Factory Information Configuration Registers
  */
  typedef struct {
    __IM uint32_t RESERVED[192];
    __IOM NRF_FICR_INFO_Type INFO;
    __IM uint32_t RESERVED1[19];
    __IM uint32_t ER[4];
    __IM uint32_t IR[4];
    __IM uint32_t DEVICEADDRTYPE;
    __IM uint32_t DEVICEADDR[2];
    __IM uint32_t RESERVED2[21];
    __IOM NRF_FICR_TRIMCNF_Type TRIMCNF[64];
    __IOM NRF_FICR_NFC_Type NFC;
    __IM uint32_t RESERVED3[5];
    __IM uint32_t XOSC32KTRIM;
  } NRF_FICR_Type;

/* FICR_ER: Common encryption root key, word n */
  #define FICR_ER_MaxCount (4UL)
  #define FICR_ER_MaxIndex (3UL)
  #define FICR_ER_MinIndex (0UL)
  #define FICR_ER_ResetValue (0xFFFFFFFFUL)

/* ER @Bits 0..31 : Encryption Root, word n */
  #define FICR_ER_ER_Pos (0UL)
  #define FICR_ER_ER_Msk (0xFFFFFFFFUL << FICR_ER_ER_Pos)


/* FICR_IR: Common identity root key, word n */
  #define FICR_IR_MaxCount (4UL)
  #define FICR_IR_MaxIndex (3UL)
  #define FICR_IR_MinIndex (0UL)
  #define FICR_IR_ResetValue (0xFFFFFFFFUL)

/* IR @Bits 0..31 : Identity Root, word n */
  #define FICR_IR_IR_Pos (0UL)
  #define FICR_IR_IR_Msk (0xFFFFFFFFUL << FICR_IR_IR_Pos)


/* FICR_DEVICEADDRTYPE: Device address type */
  #define FICR_DEVICEADDRTYPE_ResetValue (0xFFFFFFFFUL)

/* DEVICEADDRTYPE @Bit 0 : Device address type */
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Pos (0UL)
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Msk (0x1UL << FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Pos) /*!< Bit mask of
                                                                            DEVICEADDRTYPE field.*/
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Min (0x0UL)
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Max (0x1UL)
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Public (0x0UL)
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Random (0x1UL)


/* FICR_DEVICEADDR: Device address n */
  #define FICR_DEVICEADDR_MaxCount (2UL)
  #define FICR_DEVICEADDR_MaxIndex (1UL)
  #define FICR_DEVICEADDR_MinIndex (0UL)
  #define FICR_DEVICEADDR_ResetValue (0xFFFFFFFFUL)

/* DEVICEADDR @Bits 0..31 : 48 bit device address */
  #define FICR_DEVICEADDR_DEVICEADDR_Pos (0UL)
  #define FICR_DEVICEADDR_DEVICEADDR_Msk (0xFFFFFFFFUL << FICR_DEVICEADDR_DEVICEADDR_Pos)


/* FICR_XOSC32KTRIM: XOSC32K capacitor selection trim values */
  #define FICR_XOSC32KTRIM_ResetValue (0xFFFFFFFFUL)

/* SLOPE @Bits 0..8 : Slope trim factor on twos complement form */
  #define FICR_XOSC32KTRIM_SLOPE_Pos (0UL)
  #define FICR_XOSC32KTRIM_SLOPE_Msk (0x1FFUL << FICR_XOSC32KTRIM_SLOPE_Pos)

/* OFFSET @Bits 16..25 : Offset trim factor on integer form */
  #define FICR_XOSC32KTRIM_OFFSET_Pos (16UL)
  #define FICR_XOSC32KTRIM_OFFSET_Msk (0x3FFUL << FICR_XOSC32KTRIM_OFFSET_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                         GLITCHDET                                         ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ==================================================== Struct GLITCHDET ===================================================== */
/**
  * @brief Voltage glitch detectors
  */
  typedef struct {
    __IM uint32_t RESERVED[360];
    __IOM uint32_t CONFIG;
  } NRF_GLITCHDET_Type;

/* GLITCHDET_CONFIG: Configuration for glitch detector */
  #define GLITCHDET_CONFIG_ResetValue (0x00000001UL)

/* ENABLE @Bit 0 : Enable glitch detector */
  #define GLITCHDET_CONFIG_ENABLE_Pos (0UL)
  #define GLITCHDET_CONFIG_ENABLE_Msk (0x1UL << GLITCHDET_CONFIG_ENABLE_Pos)
  #define GLITCHDET_CONFIG_ENABLE_Min (0x0UL)
  #define GLITCHDET_CONFIG_ENABLE_Max (0x1UL)
  #define GLITCHDET_CONFIG_ENABLE_Disable (0x0UL)
  #define GLITCHDET_CONFIG_ENABLE_Enable (0x1UL)

/* MODE @Bit 4 : Glitch detector mode */
  #define GLITCHDET_CONFIG_MODE_Pos (4UL)
  #define GLITCHDET_CONFIG_MODE_Msk (0x1UL << GLITCHDET_CONFIG_MODE_Pos)
  #define GLITCHDET_CONFIG_MODE_Min (0x0UL)
  #define GLITCHDET_CONFIG_MODE_Max (0x1UL)
  #define GLITCHDET_CONFIG_MODE_HighPassFilter (0x0UL)
  #define GLITCHDET_CONFIG_MODE_CapDiv (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           GPIO                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct GPIO ======================================================= */
/**
  * @brief GPIO Port
  */
  typedef struct {
    __IOM uint32_t OUT;
    __IOM uint32_t OUTSET;
    __IOM uint32_t OUTCLR;
    __IM uint32_t IN;
    __IOM uint32_t DIR;
    __IOM uint32_t DIRSET;
    __IOM uint32_t DIRCLR;
    __IM uint32_t RESERVED;
    __IOM uint32_t LATCH;                            /*!< (@ 0x00000020) Latch register indicating what GPIO pins that have met
                                                                         the criteria set in the PIN_CNF[n].SENSE registers*/
    __IOM uint32_t DETECTMODE;                       /*!< (@ 0x00000024) Select between default DETECT signal behavior and
                                                                         LDETECT mode*/
    __IM uint32_t RESERVED1[22];
    __IOM uint32_t PIN_CNF[32];
  } NRF_GPIO_Type;

/* GPIO_OUT: Write GPIO port */
  #define GPIO_OUT_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_OUT_PIN0_Pos (0UL)
  #define GPIO_OUT_PIN0_Msk (0x1UL << GPIO_OUT_PIN0_Pos)
  #define GPIO_OUT_PIN0_Min (0x0UL)
  #define GPIO_OUT_PIN0_Max (0x1UL)
  #define GPIO_OUT_PIN0_Low (0x0UL)
  #define GPIO_OUT_PIN0_High (0x1UL)

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_OUT_PIN1_Pos (1UL)
  #define GPIO_OUT_PIN1_Msk (0x1UL << GPIO_OUT_PIN1_Pos)
  #define GPIO_OUT_PIN1_Min (0x0UL)
  #define GPIO_OUT_PIN1_Max (0x1UL)
  #define GPIO_OUT_PIN1_Low (0x0UL)
  #define GPIO_OUT_PIN1_High (0x1UL)

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_OUT_PIN2_Pos (2UL)
  #define GPIO_OUT_PIN2_Msk (0x1UL << GPIO_OUT_PIN2_Pos)
  #define GPIO_OUT_PIN2_Min (0x0UL)
  #define GPIO_OUT_PIN2_Max (0x1UL)
  #define GPIO_OUT_PIN2_Low (0x0UL)
  #define GPIO_OUT_PIN2_High (0x1UL)

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_OUT_PIN3_Pos (3UL)
  #define GPIO_OUT_PIN3_Msk (0x1UL << GPIO_OUT_PIN3_Pos)
  #define GPIO_OUT_PIN3_Min (0x0UL)
  #define GPIO_OUT_PIN3_Max (0x1UL)
  #define GPIO_OUT_PIN3_Low (0x0UL)
  #define GPIO_OUT_PIN3_High (0x1UL)

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_OUT_PIN4_Pos (4UL)
  #define GPIO_OUT_PIN4_Msk (0x1UL << GPIO_OUT_PIN4_Pos)
  #define GPIO_OUT_PIN4_Min (0x0UL)
  #define GPIO_OUT_PIN4_Max (0x1UL)
  #define GPIO_OUT_PIN4_Low (0x0UL)
  #define GPIO_OUT_PIN4_High (0x1UL)

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_OUT_PIN5_Pos (5UL)
  #define GPIO_OUT_PIN5_Msk (0x1UL << GPIO_OUT_PIN5_Pos)
  #define GPIO_OUT_PIN5_Min (0x0UL)
  #define GPIO_OUT_PIN5_Max (0x1UL)
  #define GPIO_OUT_PIN5_Low (0x0UL)
  #define GPIO_OUT_PIN5_High (0x1UL)

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_OUT_PIN6_Pos (6UL)
  #define GPIO_OUT_PIN6_Msk (0x1UL << GPIO_OUT_PIN6_Pos)
  #define GPIO_OUT_PIN6_Min (0x0UL)
  #define GPIO_OUT_PIN6_Max (0x1UL)
  #define GPIO_OUT_PIN6_Low (0x0UL)
  #define GPIO_OUT_PIN6_High (0x1UL)

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_OUT_PIN7_Pos (7UL)
  #define GPIO_OUT_PIN7_Msk (0x1UL << GPIO_OUT_PIN7_Pos)
  #define GPIO_OUT_PIN7_Min (0x0UL)
  #define GPIO_OUT_PIN7_Max (0x1UL)
  #define GPIO_OUT_PIN7_Low (0x0UL)
  #define GPIO_OUT_PIN7_High (0x1UL)

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_OUT_PIN8_Pos (8UL)
  #define GPIO_OUT_PIN8_Msk (0x1UL << GPIO_OUT_PIN8_Pos)
  #define GPIO_OUT_PIN8_Min (0x0UL)
  #define GPIO_OUT_PIN8_Max (0x1UL)
  #define GPIO_OUT_PIN8_Low (0x0UL)
  #define GPIO_OUT_PIN8_High (0x1UL)

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_OUT_PIN9_Pos (9UL)
  #define GPIO_OUT_PIN9_Msk (0x1UL << GPIO_OUT_PIN9_Pos)
  #define GPIO_OUT_PIN9_Min (0x0UL)
  #define GPIO_OUT_PIN9_Max (0x1UL)
  #define GPIO_OUT_PIN9_Low (0x0UL)
  #define GPIO_OUT_PIN9_High (0x1UL)

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_OUT_PIN10_Pos (10UL)
  #define GPIO_OUT_PIN10_Msk (0x1UL << GPIO_OUT_PIN10_Pos)
  #define GPIO_OUT_PIN10_Min (0x0UL)
  #define GPIO_OUT_PIN10_Max (0x1UL)
  #define GPIO_OUT_PIN10_Low (0x0UL)
  #define GPIO_OUT_PIN10_High (0x1UL)

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_OUT_PIN11_Pos (11UL)
  #define GPIO_OUT_PIN11_Msk (0x1UL << GPIO_OUT_PIN11_Pos)
  #define GPIO_OUT_PIN11_Min (0x0UL)
  #define GPIO_OUT_PIN11_Max (0x1UL)
  #define GPIO_OUT_PIN11_Low (0x0UL)
  #define GPIO_OUT_PIN11_High (0x1UL)

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_OUT_PIN12_Pos (12UL)
  #define GPIO_OUT_PIN12_Msk (0x1UL << GPIO_OUT_PIN12_Pos)
  #define GPIO_OUT_PIN12_Min (0x0UL)
  #define GPIO_OUT_PIN12_Max (0x1UL)
  #define GPIO_OUT_PIN12_Low (0x0UL)
  #define GPIO_OUT_PIN12_High (0x1UL)

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_OUT_PIN13_Pos (13UL)
  #define GPIO_OUT_PIN13_Msk (0x1UL << GPIO_OUT_PIN13_Pos)
  #define GPIO_OUT_PIN13_Min (0x0UL)
  #define GPIO_OUT_PIN13_Max (0x1UL)
  #define GPIO_OUT_PIN13_Low (0x0UL)
  #define GPIO_OUT_PIN13_High (0x1UL)

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_OUT_PIN14_Pos (14UL)
  #define GPIO_OUT_PIN14_Msk (0x1UL << GPIO_OUT_PIN14_Pos)
  #define GPIO_OUT_PIN14_Min (0x0UL)
  #define GPIO_OUT_PIN14_Max (0x1UL)
  #define GPIO_OUT_PIN14_Low (0x0UL)
  #define GPIO_OUT_PIN14_High (0x1UL)

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_OUT_PIN15_Pos (15UL)
  #define GPIO_OUT_PIN15_Msk (0x1UL << GPIO_OUT_PIN15_Pos)
  #define GPIO_OUT_PIN15_Min (0x0UL)
  #define GPIO_OUT_PIN15_Max (0x1UL)
  #define GPIO_OUT_PIN15_Low (0x0UL)
  #define GPIO_OUT_PIN15_High (0x1UL)

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_OUT_PIN16_Pos (16UL)
  #define GPIO_OUT_PIN16_Msk (0x1UL << GPIO_OUT_PIN16_Pos)
  #define GPIO_OUT_PIN16_Min (0x0UL)
  #define GPIO_OUT_PIN16_Max (0x1UL)
  #define GPIO_OUT_PIN16_Low (0x0UL)
  #define GPIO_OUT_PIN16_High (0x1UL)

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_OUT_PIN17_Pos (17UL)
  #define GPIO_OUT_PIN17_Msk (0x1UL << GPIO_OUT_PIN17_Pos)
  #define GPIO_OUT_PIN17_Min (0x0UL)
  #define GPIO_OUT_PIN17_Max (0x1UL)
  #define GPIO_OUT_PIN17_Low (0x0UL)
  #define GPIO_OUT_PIN17_High (0x1UL)

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_OUT_PIN18_Pos (18UL)
  #define GPIO_OUT_PIN18_Msk (0x1UL << GPIO_OUT_PIN18_Pos)
  #define GPIO_OUT_PIN18_Min (0x0UL)
  #define GPIO_OUT_PIN18_Max (0x1UL)
  #define GPIO_OUT_PIN18_Low (0x0UL)
  #define GPIO_OUT_PIN18_High (0x1UL)

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_OUT_PIN19_Pos (19UL)
  #define GPIO_OUT_PIN19_Msk (0x1UL << GPIO_OUT_PIN19_Pos)
  #define GPIO_OUT_PIN19_Min (0x0UL)
  #define GPIO_OUT_PIN19_Max (0x1UL)
  #define GPIO_OUT_PIN19_Low (0x0UL)
  #define GPIO_OUT_PIN19_High (0x1UL)

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_OUT_PIN20_Pos (20UL)
  #define GPIO_OUT_PIN20_Msk (0x1UL << GPIO_OUT_PIN20_Pos)
  #define GPIO_OUT_PIN20_Min (0x0UL)
  #define GPIO_OUT_PIN20_Max (0x1UL)
  #define GPIO_OUT_PIN20_Low (0x0UL)
  #define GPIO_OUT_PIN20_High (0x1UL)

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_OUT_PIN21_Pos (21UL)
  #define GPIO_OUT_PIN21_Msk (0x1UL << GPIO_OUT_PIN21_Pos)
  #define GPIO_OUT_PIN21_Min (0x0UL)
  #define GPIO_OUT_PIN21_Max (0x1UL)
  #define GPIO_OUT_PIN21_Low (0x0UL)
  #define GPIO_OUT_PIN21_High (0x1UL)

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_OUT_PIN22_Pos (22UL)
  #define GPIO_OUT_PIN22_Msk (0x1UL << GPIO_OUT_PIN22_Pos)
  #define GPIO_OUT_PIN22_Min (0x0UL)
  #define GPIO_OUT_PIN22_Max (0x1UL)
  #define GPIO_OUT_PIN22_Low (0x0UL)
  #define GPIO_OUT_PIN22_High (0x1UL)

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_OUT_PIN23_Pos (23UL)
  #define GPIO_OUT_PIN23_Msk (0x1UL << GPIO_OUT_PIN23_Pos)
  #define GPIO_OUT_PIN23_Min (0x0UL)
  #define GPIO_OUT_PIN23_Max (0x1UL)
  #define GPIO_OUT_PIN23_Low (0x0UL)
  #define GPIO_OUT_PIN23_High (0x1UL)

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_OUT_PIN24_Pos (24UL)
  #define GPIO_OUT_PIN24_Msk (0x1UL << GPIO_OUT_PIN24_Pos)
  #define GPIO_OUT_PIN24_Min (0x0UL)
  #define GPIO_OUT_PIN24_Max (0x1UL)
  #define GPIO_OUT_PIN24_Low (0x0UL)
  #define GPIO_OUT_PIN24_High (0x1UL)

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_OUT_PIN25_Pos (25UL)
  #define GPIO_OUT_PIN25_Msk (0x1UL << GPIO_OUT_PIN25_Pos)
  #define GPIO_OUT_PIN25_Min (0x0UL)
  #define GPIO_OUT_PIN25_Max (0x1UL)
  #define GPIO_OUT_PIN25_Low (0x0UL)
  #define GPIO_OUT_PIN25_High (0x1UL)

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_OUT_PIN26_Pos (26UL)
  #define GPIO_OUT_PIN26_Msk (0x1UL << GPIO_OUT_PIN26_Pos)
  #define GPIO_OUT_PIN26_Min (0x0UL)
  #define GPIO_OUT_PIN26_Max (0x1UL)
  #define GPIO_OUT_PIN26_Low (0x0UL)
  #define GPIO_OUT_PIN26_High (0x1UL)

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_OUT_PIN27_Pos (27UL)
  #define GPIO_OUT_PIN27_Msk (0x1UL << GPIO_OUT_PIN27_Pos)
  #define GPIO_OUT_PIN27_Min (0x0UL)
  #define GPIO_OUT_PIN27_Max (0x1UL)
  #define GPIO_OUT_PIN27_Low (0x0UL)
  #define GPIO_OUT_PIN27_High (0x1UL)

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_OUT_PIN28_Pos (28UL)
  #define GPIO_OUT_PIN28_Msk (0x1UL << GPIO_OUT_PIN28_Pos)
  #define GPIO_OUT_PIN28_Min (0x0UL)
  #define GPIO_OUT_PIN28_Max (0x1UL)
  #define GPIO_OUT_PIN28_Low (0x0UL)
  #define GPIO_OUT_PIN28_High (0x1UL)

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_OUT_PIN29_Pos (29UL)
  #define GPIO_OUT_PIN29_Msk (0x1UL << GPIO_OUT_PIN29_Pos)
  #define GPIO_OUT_PIN29_Min (0x0UL)
  #define GPIO_OUT_PIN29_Max (0x1UL)
  #define GPIO_OUT_PIN29_Low (0x0UL)
  #define GPIO_OUT_PIN29_High (0x1UL)

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_OUT_PIN30_Pos (30UL)
  #define GPIO_OUT_PIN30_Msk (0x1UL << GPIO_OUT_PIN30_Pos)
  #define GPIO_OUT_PIN30_Min (0x0UL)
  #define GPIO_OUT_PIN30_Max (0x1UL)
  #define GPIO_OUT_PIN30_Low (0x0UL)
  #define GPIO_OUT_PIN30_High (0x1UL)

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_OUT_PIN31_Pos (31UL)
  #define GPIO_OUT_PIN31_Msk (0x1UL << GPIO_OUT_PIN31_Pos)
  #define GPIO_OUT_PIN31_Min (0x0UL)
  #define GPIO_OUT_PIN31_Max (0x1UL)
  #define GPIO_OUT_PIN31_Low (0x0UL)
  #define GPIO_OUT_PIN31_High (0x1UL)


/* GPIO_OUTSET: Set individual bits in GPIO port */
  #define GPIO_OUTSET_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_OUTSET_PIN0_Pos (0UL)
  #define GPIO_OUTSET_PIN0_Msk (0x1UL << GPIO_OUTSET_PIN0_Pos)
  #define GPIO_OUTSET_PIN0_Min (0x0UL)
  #define GPIO_OUTSET_PIN0_Max (0x1UL)
  #define GPIO_OUTSET_PIN0_Low (0x0UL)
  #define GPIO_OUTSET_PIN0_High (0x1UL)
  #define GPIO_OUTSET_PIN0_Set (0x1UL)

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_OUTSET_PIN1_Pos (1UL)
  #define GPIO_OUTSET_PIN1_Msk (0x1UL << GPIO_OUTSET_PIN1_Pos)
  #define GPIO_OUTSET_PIN1_Min (0x0UL)
  #define GPIO_OUTSET_PIN1_Max (0x1UL)
  #define GPIO_OUTSET_PIN1_Low (0x0UL)
  #define GPIO_OUTSET_PIN1_High (0x1UL)
  #define GPIO_OUTSET_PIN1_Set (0x1UL)

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_OUTSET_PIN2_Pos (2UL)
  #define GPIO_OUTSET_PIN2_Msk (0x1UL << GPIO_OUTSET_PIN2_Pos)
  #define GPIO_OUTSET_PIN2_Min (0x0UL)
  #define GPIO_OUTSET_PIN2_Max (0x1UL)
  #define GPIO_OUTSET_PIN2_Low (0x0UL)
  #define GPIO_OUTSET_PIN2_High (0x1UL)
  #define GPIO_OUTSET_PIN2_Set (0x1UL)

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_OUTSET_PIN3_Pos (3UL)
  #define GPIO_OUTSET_PIN3_Msk (0x1UL << GPIO_OUTSET_PIN3_Pos)
  #define GPIO_OUTSET_PIN3_Min (0x0UL)
  #define GPIO_OUTSET_PIN3_Max (0x1UL)
  #define GPIO_OUTSET_PIN3_Low (0x0UL)
  #define GPIO_OUTSET_PIN3_High (0x1UL)
  #define GPIO_OUTSET_PIN3_Set (0x1UL)

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_OUTSET_PIN4_Pos (4UL)
  #define GPIO_OUTSET_PIN4_Msk (0x1UL << GPIO_OUTSET_PIN4_Pos)
  #define GPIO_OUTSET_PIN4_Min (0x0UL)
  #define GPIO_OUTSET_PIN4_Max (0x1UL)
  #define GPIO_OUTSET_PIN4_Low (0x0UL)
  #define GPIO_OUTSET_PIN4_High (0x1UL)
  #define GPIO_OUTSET_PIN4_Set (0x1UL)

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_OUTSET_PIN5_Pos (5UL)
  #define GPIO_OUTSET_PIN5_Msk (0x1UL << GPIO_OUTSET_PIN5_Pos)
  #define GPIO_OUTSET_PIN5_Min (0x0UL)
  #define GPIO_OUTSET_PIN5_Max (0x1UL)
  #define GPIO_OUTSET_PIN5_Low (0x0UL)
  #define GPIO_OUTSET_PIN5_High (0x1UL)
  #define GPIO_OUTSET_PIN5_Set (0x1UL)

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_OUTSET_PIN6_Pos (6UL)
  #define GPIO_OUTSET_PIN6_Msk (0x1UL << GPIO_OUTSET_PIN6_Pos)
  #define GPIO_OUTSET_PIN6_Min (0x0UL)
  #define GPIO_OUTSET_PIN6_Max (0x1UL)
  #define GPIO_OUTSET_PIN6_Low (0x0UL)
  #define GPIO_OUTSET_PIN6_High (0x1UL)
  #define GPIO_OUTSET_PIN6_Set (0x1UL)

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_OUTSET_PIN7_Pos (7UL)
  #define GPIO_OUTSET_PIN7_Msk (0x1UL << GPIO_OUTSET_PIN7_Pos)
  #define GPIO_OUTSET_PIN7_Min (0x0UL)
  #define GPIO_OUTSET_PIN7_Max (0x1UL)
  #define GPIO_OUTSET_PIN7_Low (0x0UL)
  #define GPIO_OUTSET_PIN7_High (0x1UL)
  #define GPIO_OUTSET_PIN7_Set (0x1UL)

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_OUTSET_PIN8_Pos (8UL)
  #define GPIO_OUTSET_PIN8_Msk (0x1UL << GPIO_OUTSET_PIN8_Pos)
  #define GPIO_OUTSET_PIN8_Min (0x0UL)
  #define GPIO_OUTSET_PIN8_Max (0x1UL)
  #define GPIO_OUTSET_PIN8_Low (0x0UL)
  #define GPIO_OUTSET_PIN8_High (0x1UL)
  #define GPIO_OUTSET_PIN8_Set (0x1UL)

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_OUTSET_PIN9_Pos (9UL)
  #define GPIO_OUTSET_PIN9_Msk (0x1UL << GPIO_OUTSET_PIN9_Pos)
  #define GPIO_OUTSET_PIN9_Min (0x0UL)
  #define GPIO_OUTSET_PIN9_Max (0x1UL)
  #define GPIO_OUTSET_PIN9_Low (0x0UL)
  #define GPIO_OUTSET_PIN9_High (0x1UL)
  #define GPIO_OUTSET_PIN9_Set (0x1UL)

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_OUTSET_PIN10_Pos (10UL)
  #define GPIO_OUTSET_PIN10_Msk (0x1UL << GPIO_OUTSET_PIN10_Pos)
  #define GPIO_OUTSET_PIN10_Min (0x0UL)
  #define GPIO_OUTSET_PIN10_Max (0x1UL)
  #define GPIO_OUTSET_PIN10_Low (0x0UL)
  #define GPIO_OUTSET_PIN10_High (0x1UL)
  #define GPIO_OUTSET_PIN10_Set (0x1UL)

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_OUTSET_PIN11_Pos (11UL)
  #define GPIO_OUTSET_PIN11_Msk (0x1UL << GPIO_OUTSET_PIN11_Pos)
  #define GPIO_OUTSET_PIN11_Min (0x0UL)
  #define GPIO_OUTSET_PIN11_Max (0x1UL)
  #define GPIO_OUTSET_PIN11_Low (0x0UL)
  #define GPIO_OUTSET_PIN11_High (0x1UL)
  #define GPIO_OUTSET_PIN11_Set (0x1UL)

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_OUTSET_PIN12_Pos (12UL)
  #define GPIO_OUTSET_PIN12_Msk (0x1UL << GPIO_OUTSET_PIN12_Pos)
  #define GPIO_OUTSET_PIN12_Min (0x0UL)
  #define GPIO_OUTSET_PIN12_Max (0x1UL)
  #define GPIO_OUTSET_PIN12_Low (0x0UL)
  #define GPIO_OUTSET_PIN12_High (0x1UL)
  #define GPIO_OUTSET_PIN12_Set (0x1UL)

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_OUTSET_PIN13_Pos (13UL)
  #define GPIO_OUTSET_PIN13_Msk (0x1UL << GPIO_OUTSET_PIN13_Pos)
  #define GPIO_OUTSET_PIN13_Min (0x0UL)
  #define GPIO_OUTSET_PIN13_Max (0x1UL)
  #define GPIO_OUTSET_PIN13_Low (0x0UL)
  #define GPIO_OUTSET_PIN13_High (0x1UL)
  #define GPIO_OUTSET_PIN13_Set (0x1UL)

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_OUTSET_PIN14_Pos (14UL)
  #define GPIO_OUTSET_PIN14_Msk (0x1UL << GPIO_OUTSET_PIN14_Pos)
  #define GPIO_OUTSET_PIN14_Min (0x0UL)
  #define GPIO_OUTSET_PIN14_Max (0x1UL)
  #define GPIO_OUTSET_PIN14_Low (0x0UL)
  #define GPIO_OUTSET_PIN14_High (0x1UL)
  #define GPIO_OUTSET_PIN14_Set (0x1UL)

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_OUTSET_PIN15_Pos (15UL)
  #define GPIO_OUTSET_PIN15_Msk (0x1UL << GPIO_OUTSET_PIN15_Pos)
  #define GPIO_OUTSET_PIN15_Min (0x0UL)
  #define GPIO_OUTSET_PIN15_Max (0x1UL)
  #define GPIO_OUTSET_PIN15_Low (0x0UL)
  #define GPIO_OUTSET_PIN15_High (0x1UL)
  #define GPIO_OUTSET_PIN15_Set (0x1UL)

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_OUTSET_PIN16_Pos (16UL)
  #define GPIO_OUTSET_PIN16_Msk (0x1UL << GPIO_OUTSET_PIN16_Pos)
  #define GPIO_OUTSET_PIN16_Min (0x0UL)
  #define GPIO_OUTSET_PIN16_Max (0x1UL)
  #define GPIO_OUTSET_PIN16_Low (0x0UL)
  #define GPIO_OUTSET_PIN16_High (0x1UL)
  #define GPIO_OUTSET_PIN16_Set (0x1UL)

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_OUTSET_PIN17_Pos (17UL)
  #define GPIO_OUTSET_PIN17_Msk (0x1UL << GPIO_OUTSET_PIN17_Pos)
  #define GPIO_OUTSET_PIN17_Min (0x0UL)
  #define GPIO_OUTSET_PIN17_Max (0x1UL)
  #define GPIO_OUTSET_PIN17_Low (0x0UL)
  #define GPIO_OUTSET_PIN17_High (0x1UL)
  #define GPIO_OUTSET_PIN17_Set (0x1UL)

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_OUTSET_PIN18_Pos (18UL)
  #define GPIO_OUTSET_PIN18_Msk (0x1UL << GPIO_OUTSET_PIN18_Pos)
  #define GPIO_OUTSET_PIN18_Min (0x0UL)
  #define GPIO_OUTSET_PIN18_Max (0x1UL)
  #define GPIO_OUTSET_PIN18_Low (0x0UL)
  #define GPIO_OUTSET_PIN18_High (0x1UL)
  #define GPIO_OUTSET_PIN18_Set (0x1UL)

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_OUTSET_PIN19_Pos (19UL)
  #define GPIO_OUTSET_PIN19_Msk (0x1UL << GPIO_OUTSET_PIN19_Pos)
  #define GPIO_OUTSET_PIN19_Min (0x0UL)
  #define GPIO_OUTSET_PIN19_Max (0x1UL)
  #define GPIO_OUTSET_PIN19_Low (0x0UL)
  #define GPIO_OUTSET_PIN19_High (0x1UL)
  #define GPIO_OUTSET_PIN19_Set (0x1UL)

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_OUTSET_PIN20_Pos (20UL)
  #define GPIO_OUTSET_PIN20_Msk (0x1UL << GPIO_OUTSET_PIN20_Pos)
  #define GPIO_OUTSET_PIN20_Min (0x0UL)
  #define GPIO_OUTSET_PIN20_Max (0x1UL)
  #define GPIO_OUTSET_PIN20_Low (0x0UL)
  #define GPIO_OUTSET_PIN20_High (0x1UL)
  #define GPIO_OUTSET_PIN20_Set (0x1UL)

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_OUTSET_PIN21_Pos (21UL)
  #define GPIO_OUTSET_PIN21_Msk (0x1UL << GPIO_OUTSET_PIN21_Pos)
  #define GPIO_OUTSET_PIN21_Min (0x0UL)
  #define GPIO_OUTSET_PIN21_Max (0x1UL)
  #define GPIO_OUTSET_PIN21_Low (0x0UL)
  #define GPIO_OUTSET_PIN21_High (0x1UL)
  #define GPIO_OUTSET_PIN21_Set (0x1UL)

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_OUTSET_PIN22_Pos (22UL)
  #define GPIO_OUTSET_PIN22_Msk (0x1UL << GPIO_OUTSET_PIN22_Pos)
  #define GPIO_OUTSET_PIN22_Min (0x0UL)
  #define GPIO_OUTSET_PIN22_Max (0x1UL)
  #define GPIO_OUTSET_PIN22_Low (0x0UL)
  #define GPIO_OUTSET_PIN22_High (0x1UL)
  #define GPIO_OUTSET_PIN22_Set (0x1UL)

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_OUTSET_PIN23_Pos (23UL)
  #define GPIO_OUTSET_PIN23_Msk (0x1UL << GPIO_OUTSET_PIN23_Pos)
  #define GPIO_OUTSET_PIN23_Min (0x0UL)
  #define GPIO_OUTSET_PIN23_Max (0x1UL)
  #define GPIO_OUTSET_PIN23_Low (0x0UL)
  #define GPIO_OUTSET_PIN23_High (0x1UL)
  #define GPIO_OUTSET_PIN23_Set (0x1UL)

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_OUTSET_PIN24_Pos (24UL)
  #define GPIO_OUTSET_PIN24_Msk (0x1UL << GPIO_OUTSET_PIN24_Pos)
  #define GPIO_OUTSET_PIN24_Min (0x0UL)
  #define GPIO_OUTSET_PIN24_Max (0x1UL)
  #define GPIO_OUTSET_PIN24_Low (0x0UL)
  #define GPIO_OUTSET_PIN24_High (0x1UL)
  #define GPIO_OUTSET_PIN24_Set (0x1UL)

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_OUTSET_PIN25_Pos (25UL)
  #define GPIO_OUTSET_PIN25_Msk (0x1UL << GPIO_OUTSET_PIN25_Pos)
  #define GPIO_OUTSET_PIN25_Min (0x0UL)
  #define GPIO_OUTSET_PIN25_Max (0x1UL)
  #define GPIO_OUTSET_PIN25_Low (0x0UL)
  #define GPIO_OUTSET_PIN25_High (0x1UL)
  #define GPIO_OUTSET_PIN25_Set (0x1UL)

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_OUTSET_PIN26_Pos (26UL)
  #define GPIO_OUTSET_PIN26_Msk (0x1UL << GPIO_OUTSET_PIN26_Pos)
  #define GPIO_OUTSET_PIN26_Min (0x0UL)
  #define GPIO_OUTSET_PIN26_Max (0x1UL)
  #define GPIO_OUTSET_PIN26_Low (0x0UL)
  #define GPIO_OUTSET_PIN26_High (0x1UL)
  #define GPIO_OUTSET_PIN26_Set (0x1UL)

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_OUTSET_PIN27_Pos (27UL)
  #define GPIO_OUTSET_PIN27_Msk (0x1UL << GPIO_OUTSET_PIN27_Pos)
  #define GPIO_OUTSET_PIN27_Min (0x0UL)
  #define GPIO_OUTSET_PIN27_Max (0x1UL)
  #define GPIO_OUTSET_PIN27_Low (0x0UL)
  #define GPIO_OUTSET_PIN27_High (0x1UL)
  #define GPIO_OUTSET_PIN27_Set (0x1UL)

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_OUTSET_PIN28_Pos (28UL)
  #define GPIO_OUTSET_PIN28_Msk (0x1UL << GPIO_OUTSET_PIN28_Pos)
  #define GPIO_OUTSET_PIN28_Min (0x0UL)
  #define GPIO_OUTSET_PIN28_Max (0x1UL)
  #define GPIO_OUTSET_PIN28_Low (0x0UL)
  #define GPIO_OUTSET_PIN28_High (0x1UL)
  #define GPIO_OUTSET_PIN28_Set (0x1UL)

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_OUTSET_PIN29_Pos (29UL)
  #define GPIO_OUTSET_PIN29_Msk (0x1UL << GPIO_OUTSET_PIN29_Pos)
  #define GPIO_OUTSET_PIN29_Min (0x0UL)
  #define GPIO_OUTSET_PIN29_Max (0x1UL)
  #define GPIO_OUTSET_PIN29_Low (0x0UL)
  #define GPIO_OUTSET_PIN29_High (0x1UL)
  #define GPIO_OUTSET_PIN29_Set (0x1UL)

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_OUTSET_PIN30_Pos (30UL)
  #define GPIO_OUTSET_PIN30_Msk (0x1UL << GPIO_OUTSET_PIN30_Pos)
  #define GPIO_OUTSET_PIN30_Min (0x0UL)
  #define GPIO_OUTSET_PIN30_Max (0x1UL)
  #define GPIO_OUTSET_PIN30_Low (0x0UL)
  #define GPIO_OUTSET_PIN30_High (0x1UL)
  #define GPIO_OUTSET_PIN30_Set (0x1UL)

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_OUTSET_PIN31_Pos (31UL)
  #define GPIO_OUTSET_PIN31_Msk (0x1UL << GPIO_OUTSET_PIN31_Pos)
  #define GPIO_OUTSET_PIN31_Min (0x0UL)
  #define GPIO_OUTSET_PIN31_Max (0x1UL)
  #define GPIO_OUTSET_PIN31_Low (0x0UL)
  #define GPIO_OUTSET_PIN31_High (0x1UL)
  #define GPIO_OUTSET_PIN31_Set (0x1UL)


/* GPIO_OUTCLR: Clear individual bits in GPIO port */
  #define GPIO_OUTCLR_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_OUTCLR_PIN0_Pos (0UL)
  #define GPIO_OUTCLR_PIN0_Msk (0x1UL << GPIO_OUTCLR_PIN0_Pos)
  #define GPIO_OUTCLR_PIN0_Min (0x0UL)
  #define GPIO_OUTCLR_PIN0_Max (0x1UL)
  #define GPIO_OUTCLR_PIN0_Low (0x0UL)
  #define GPIO_OUTCLR_PIN0_High (0x1UL)
  #define GPIO_OUTCLR_PIN0_Clear (0x1UL)

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_OUTCLR_PIN1_Pos (1UL)
  #define GPIO_OUTCLR_PIN1_Msk (0x1UL << GPIO_OUTCLR_PIN1_Pos)
  #define GPIO_OUTCLR_PIN1_Min (0x0UL)
  #define GPIO_OUTCLR_PIN1_Max (0x1UL)
  #define GPIO_OUTCLR_PIN1_Low (0x0UL)
  #define GPIO_OUTCLR_PIN1_High (0x1UL)
  #define GPIO_OUTCLR_PIN1_Clear (0x1UL)

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_OUTCLR_PIN2_Pos (2UL)
  #define GPIO_OUTCLR_PIN2_Msk (0x1UL << GPIO_OUTCLR_PIN2_Pos)
  #define GPIO_OUTCLR_PIN2_Min (0x0UL)
  #define GPIO_OUTCLR_PIN2_Max (0x1UL)
  #define GPIO_OUTCLR_PIN2_Low (0x0UL)
  #define GPIO_OUTCLR_PIN2_High (0x1UL)
  #define GPIO_OUTCLR_PIN2_Clear (0x1UL)

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_OUTCLR_PIN3_Pos (3UL)
  #define GPIO_OUTCLR_PIN3_Msk (0x1UL << GPIO_OUTCLR_PIN3_Pos)
  #define GPIO_OUTCLR_PIN3_Min (0x0UL)
  #define GPIO_OUTCLR_PIN3_Max (0x1UL)
  #define GPIO_OUTCLR_PIN3_Low (0x0UL)
  #define GPIO_OUTCLR_PIN3_High (0x1UL)
  #define GPIO_OUTCLR_PIN3_Clear (0x1UL)

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_OUTCLR_PIN4_Pos (4UL)
  #define GPIO_OUTCLR_PIN4_Msk (0x1UL << GPIO_OUTCLR_PIN4_Pos)
  #define GPIO_OUTCLR_PIN4_Min (0x0UL)
  #define GPIO_OUTCLR_PIN4_Max (0x1UL)
  #define GPIO_OUTCLR_PIN4_Low (0x0UL)
  #define GPIO_OUTCLR_PIN4_High (0x1UL)
  #define GPIO_OUTCLR_PIN4_Clear (0x1UL)

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_OUTCLR_PIN5_Pos (5UL)
  #define GPIO_OUTCLR_PIN5_Msk (0x1UL << GPIO_OUTCLR_PIN5_Pos)
  #define GPIO_OUTCLR_PIN5_Min (0x0UL)
  #define GPIO_OUTCLR_PIN5_Max (0x1UL)
  #define GPIO_OUTCLR_PIN5_Low (0x0UL)
  #define GPIO_OUTCLR_PIN5_High (0x1UL)
  #define GPIO_OUTCLR_PIN5_Clear (0x1UL)

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_OUTCLR_PIN6_Pos (6UL)
  #define GPIO_OUTCLR_PIN6_Msk (0x1UL << GPIO_OUTCLR_PIN6_Pos)
  #define GPIO_OUTCLR_PIN6_Min (0x0UL)
  #define GPIO_OUTCLR_PIN6_Max (0x1UL)
  #define GPIO_OUTCLR_PIN6_Low (0x0UL)
  #define GPIO_OUTCLR_PIN6_High (0x1UL)
  #define GPIO_OUTCLR_PIN6_Clear (0x1UL)

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_OUTCLR_PIN7_Pos (7UL)
  #define GPIO_OUTCLR_PIN7_Msk (0x1UL << GPIO_OUTCLR_PIN7_Pos)
  #define GPIO_OUTCLR_PIN7_Min (0x0UL)
  #define GPIO_OUTCLR_PIN7_Max (0x1UL)
  #define GPIO_OUTCLR_PIN7_Low (0x0UL)
  #define GPIO_OUTCLR_PIN7_High (0x1UL)
  #define GPIO_OUTCLR_PIN7_Clear (0x1UL)

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_OUTCLR_PIN8_Pos (8UL)
  #define GPIO_OUTCLR_PIN8_Msk (0x1UL << GPIO_OUTCLR_PIN8_Pos)
  #define GPIO_OUTCLR_PIN8_Min (0x0UL)
  #define GPIO_OUTCLR_PIN8_Max (0x1UL)
  #define GPIO_OUTCLR_PIN8_Low (0x0UL)
  #define GPIO_OUTCLR_PIN8_High (0x1UL)
  #define GPIO_OUTCLR_PIN8_Clear (0x1UL)

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_OUTCLR_PIN9_Pos (9UL)
  #define GPIO_OUTCLR_PIN9_Msk (0x1UL << GPIO_OUTCLR_PIN9_Pos)
  #define GPIO_OUTCLR_PIN9_Min (0x0UL)
  #define GPIO_OUTCLR_PIN9_Max (0x1UL)
  #define GPIO_OUTCLR_PIN9_Low (0x0UL)
  #define GPIO_OUTCLR_PIN9_High (0x1UL)
  #define GPIO_OUTCLR_PIN9_Clear (0x1UL)

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_OUTCLR_PIN10_Pos (10UL)
  #define GPIO_OUTCLR_PIN10_Msk (0x1UL << GPIO_OUTCLR_PIN10_Pos)
  #define GPIO_OUTCLR_PIN10_Min (0x0UL)
  #define GPIO_OUTCLR_PIN10_Max (0x1UL)
  #define GPIO_OUTCLR_PIN10_Low (0x0UL)
  #define GPIO_OUTCLR_PIN10_High (0x1UL)
  #define GPIO_OUTCLR_PIN10_Clear (0x1UL)

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_OUTCLR_PIN11_Pos (11UL)
  #define GPIO_OUTCLR_PIN11_Msk (0x1UL << GPIO_OUTCLR_PIN11_Pos)
  #define GPIO_OUTCLR_PIN11_Min (0x0UL)
  #define GPIO_OUTCLR_PIN11_Max (0x1UL)
  #define GPIO_OUTCLR_PIN11_Low (0x0UL)
  #define GPIO_OUTCLR_PIN11_High (0x1UL)
  #define GPIO_OUTCLR_PIN11_Clear (0x1UL)

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_OUTCLR_PIN12_Pos (12UL)
  #define GPIO_OUTCLR_PIN12_Msk (0x1UL << GPIO_OUTCLR_PIN12_Pos)
  #define GPIO_OUTCLR_PIN12_Min (0x0UL)
  #define GPIO_OUTCLR_PIN12_Max (0x1UL)
  #define GPIO_OUTCLR_PIN12_Low (0x0UL)
  #define GPIO_OUTCLR_PIN12_High (0x1UL)
  #define GPIO_OUTCLR_PIN12_Clear (0x1UL)

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_OUTCLR_PIN13_Pos (13UL)
  #define GPIO_OUTCLR_PIN13_Msk (0x1UL << GPIO_OUTCLR_PIN13_Pos)
  #define GPIO_OUTCLR_PIN13_Min (0x0UL)
  #define GPIO_OUTCLR_PIN13_Max (0x1UL)
  #define GPIO_OUTCLR_PIN13_Low (0x0UL)
  #define GPIO_OUTCLR_PIN13_High (0x1UL)
  #define GPIO_OUTCLR_PIN13_Clear (0x1UL)

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_OUTCLR_PIN14_Pos (14UL)
  #define GPIO_OUTCLR_PIN14_Msk (0x1UL << GPIO_OUTCLR_PIN14_Pos)
  #define GPIO_OUTCLR_PIN14_Min (0x0UL)
  #define GPIO_OUTCLR_PIN14_Max (0x1UL)
  #define GPIO_OUTCLR_PIN14_Low (0x0UL)
  #define GPIO_OUTCLR_PIN14_High (0x1UL)
  #define GPIO_OUTCLR_PIN14_Clear (0x1UL)

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_OUTCLR_PIN15_Pos (15UL)
  #define GPIO_OUTCLR_PIN15_Msk (0x1UL << GPIO_OUTCLR_PIN15_Pos)
  #define GPIO_OUTCLR_PIN15_Min (0x0UL)
  #define GPIO_OUTCLR_PIN15_Max (0x1UL)
  #define GPIO_OUTCLR_PIN15_Low (0x0UL)
  #define GPIO_OUTCLR_PIN15_High (0x1UL)
  #define GPIO_OUTCLR_PIN15_Clear (0x1UL)

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_OUTCLR_PIN16_Pos (16UL)
  #define GPIO_OUTCLR_PIN16_Msk (0x1UL << GPIO_OUTCLR_PIN16_Pos)
  #define GPIO_OUTCLR_PIN16_Min (0x0UL)
  #define GPIO_OUTCLR_PIN16_Max (0x1UL)
  #define GPIO_OUTCLR_PIN16_Low (0x0UL)
  #define GPIO_OUTCLR_PIN16_High (0x1UL)
  #define GPIO_OUTCLR_PIN16_Clear (0x1UL)

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_OUTCLR_PIN17_Pos (17UL)
  #define GPIO_OUTCLR_PIN17_Msk (0x1UL << GPIO_OUTCLR_PIN17_Pos)
  #define GPIO_OUTCLR_PIN17_Min (0x0UL)
  #define GPIO_OUTCLR_PIN17_Max (0x1UL)
  #define GPIO_OUTCLR_PIN17_Low (0x0UL)
  #define GPIO_OUTCLR_PIN17_High (0x1UL)
  #define GPIO_OUTCLR_PIN17_Clear (0x1UL)

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_OUTCLR_PIN18_Pos (18UL)
  #define GPIO_OUTCLR_PIN18_Msk (0x1UL << GPIO_OUTCLR_PIN18_Pos)
  #define GPIO_OUTCLR_PIN18_Min (0x0UL)
  #define GPIO_OUTCLR_PIN18_Max (0x1UL)
  #define GPIO_OUTCLR_PIN18_Low (0x0UL)
  #define GPIO_OUTCLR_PIN18_High (0x1UL)
  #define GPIO_OUTCLR_PIN18_Clear (0x1UL)

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_OUTCLR_PIN19_Pos (19UL)
  #define GPIO_OUTCLR_PIN19_Msk (0x1UL << GPIO_OUTCLR_PIN19_Pos)
  #define GPIO_OUTCLR_PIN19_Min (0x0UL)
  #define GPIO_OUTCLR_PIN19_Max (0x1UL)
  #define GPIO_OUTCLR_PIN19_Low (0x0UL)
  #define GPIO_OUTCLR_PIN19_High (0x1UL)
  #define GPIO_OUTCLR_PIN19_Clear (0x1UL)

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_OUTCLR_PIN20_Pos (20UL)
  #define GPIO_OUTCLR_PIN20_Msk (0x1UL << GPIO_OUTCLR_PIN20_Pos)
  #define GPIO_OUTCLR_PIN20_Min (0x0UL)
  #define GPIO_OUTCLR_PIN20_Max (0x1UL)
  #define GPIO_OUTCLR_PIN20_Low (0x0UL)
  #define GPIO_OUTCLR_PIN20_High (0x1UL)
  #define GPIO_OUTCLR_PIN20_Clear (0x1UL)

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_OUTCLR_PIN21_Pos (21UL)
  #define GPIO_OUTCLR_PIN21_Msk (0x1UL << GPIO_OUTCLR_PIN21_Pos)
  #define GPIO_OUTCLR_PIN21_Min (0x0UL)
  #define GPIO_OUTCLR_PIN21_Max (0x1UL)
  #define GPIO_OUTCLR_PIN21_Low (0x0UL)
  #define GPIO_OUTCLR_PIN21_High (0x1UL)
  #define GPIO_OUTCLR_PIN21_Clear (0x1UL)

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_OUTCLR_PIN22_Pos (22UL)
  #define GPIO_OUTCLR_PIN22_Msk (0x1UL << GPIO_OUTCLR_PIN22_Pos)
  #define GPIO_OUTCLR_PIN22_Min (0x0UL)
  #define GPIO_OUTCLR_PIN22_Max (0x1UL)
  #define GPIO_OUTCLR_PIN22_Low (0x0UL)
  #define GPIO_OUTCLR_PIN22_High (0x1UL)
  #define GPIO_OUTCLR_PIN22_Clear (0x1UL)

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_OUTCLR_PIN23_Pos (23UL)
  #define GPIO_OUTCLR_PIN23_Msk (0x1UL << GPIO_OUTCLR_PIN23_Pos)
  #define GPIO_OUTCLR_PIN23_Min (0x0UL)
  #define GPIO_OUTCLR_PIN23_Max (0x1UL)
  #define GPIO_OUTCLR_PIN23_Low (0x0UL)
  #define GPIO_OUTCLR_PIN23_High (0x1UL)
  #define GPIO_OUTCLR_PIN23_Clear (0x1UL)

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_OUTCLR_PIN24_Pos (24UL)
  #define GPIO_OUTCLR_PIN24_Msk (0x1UL << GPIO_OUTCLR_PIN24_Pos)
  #define GPIO_OUTCLR_PIN24_Min (0x0UL)
  #define GPIO_OUTCLR_PIN24_Max (0x1UL)
  #define GPIO_OUTCLR_PIN24_Low (0x0UL)
  #define GPIO_OUTCLR_PIN24_High (0x1UL)
  #define GPIO_OUTCLR_PIN24_Clear (0x1UL)

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_OUTCLR_PIN25_Pos (25UL)
  #define GPIO_OUTCLR_PIN25_Msk (0x1UL << GPIO_OUTCLR_PIN25_Pos)
  #define GPIO_OUTCLR_PIN25_Min (0x0UL)
  #define GPIO_OUTCLR_PIN25_Max (0x1UL)
  #define GPIO_OUTCLR_PIN25_Low (0x0UL)
  #define GPIO_OUTCLR_PIN25_High (0x1UL)
  #define GPIO_OUTCLR_PIN25_Clear (0x1UL)

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_OUTCLR_PIN26_Pos (26UL)
  #define GPIO_OUTCLR_PIN26_Msk (0x1UL << GPIO_OUTCLR_PIN26_Pos)
  #define GPIO_OUTCLR_PIN26_Min (0x0UL)
  #define GPIO_OUTCLR_PIN26_Max (0x1UL)
  #define GPIO_OUTCLR_PIN26_Low (0x0UL)
  #define GPIO_OUTCLR_PIN26_High (0x1UL)
  #define GPIO_OUTCLR_PIN26_Clear (0x1UL)

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_OUTCLR_PIN27_Pos (27UL)
  #define GPIO_OUTCLR_PIN27_Msk (0x1UL << GPIO_OUTCLR_PIN27_Pos)
  #define GPIO_OUTCLR_PIN27_Min (0x0UL)
  #define GPIO_OUTCLR_PIN27_Max (0x1UL)
  #define GPIO_OUTCLR_PIN27_Low (0x0UL)
  #define GPIO_OUTCLR_PIN27_High (0x1UL)
  #define GPIO_OUTCLR_PIN27_Clear (0x1UL)

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_OUTCLR_PIN28_Pos (28UL)
  #define GPIO_OUTCLR_PIN28_Msk (0x1UL << GPIO_OUTCLR_PIN28_Pos)
  #define GPIO_OUTCLR_PIN28_Min (0x0UL)
  #define GPIO_OUTCLR_PIN28_Max (0x1UL)
  #define GPIO_OUTCLR_PIN28_Low (0x0UL)
  #define GPIO_OUTCLR_PIN28_High (0x1UL)
  #define GPIO_OUTCLR_PIN28_Clear (0x1UL)

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_OUTCLR_PIN29_Pos (29UL)
  #define GPIO_OUTCLR_PIN29_Msk (0x1UL << GPIO_OUTCLR_PIN29_Pos)
  #define GPIO_OUTCLR_PIN29_Min (0x0UL)
  #define GPIO_OUTCLR_PIN29_Max (0x1UL)
  #define GPIO_OUTCLR_PIN29_Low (0x0UL)
  #define GPIO_OUTCLR_PIN29_High (0x1UL)
  #define GPIO_OUTCLR_PIN29_Clear (0x1UL)

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_OUTCLR_PIN30_Pos (30UL)
  #define GPIO_OUTCLR_PIN30_Msk (0x1UL << GPIO_OUTCLR_PIN30_Pos)
  #define GPIO_OUTCLR_PIN30_Min (0x0UL)
  #define GPIO_OUTCLR_PIN30_Max (0x1UL)
  #define GPIO_OUTCLR_PIN30_Low (0x0UL)
  #define GPIO_OUTCLR_PIN30_High (0x1UL)
  #define GPIO_OUTCLR_PIN30_Clear (0x1UL)

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_OUTCLR_PIN31_Pos (31UL)
  #define GPIO_OUTCLR_PIN31_Msk (0x1UL << GPIO_OUTCLR_PIN31_Pos)
  #define GPIO_OUTCLR_PIN31_Min (0x0UL)
  #define GPIO_OUTCLR_PIN31_Max (0x1UL)
  #define GPIO_OUTCLR_PIN31_Low (0x0UL)
  #define GPIO_OUTCLR_PIN31_High (0x1UL)
  #define GPIO_OUTCLR_PIN31_Clear (0x1UL)


/* GPIO_IN: Read GPIO port */
  #define GPIO_IN_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_IN_PIN0_Pos (0UL)
  #define GPIO_IN_PIN0_Msk (0x1UL << GPIO_IN_PIN0_Pos)
  #define GPIO_IN_PIN0_Min (0x0UL)
  #define GPIO_IN_PIN0_Max (0x1UL)
  #define GPIO_IN_PIN0_Low (0x0UL)
  #define GPIO_IN_PIN0_High (0x1UL)

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_IN_PIN1_Pos (1UL)
  #define GPIO_IN_PIN1_Msk (0x1UL << GPIO_IN_PIN1_Pos)
  #define GPIO_IN_PIN1_Min (0x0UL)
  #define GPIO_IN_PIN1_Max (0x1UL)
  #define GPIO_IN_PIN1_Low (0x0UL)
  #define GPIO_IN_PIN1_High (0x1UL)

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_IN_PIN2_Pos (2UL)
  #define GPIO_IN_PIN2_Msk (0x1UL << GPIO_IN_PIN2_Pos)
  #define GPIO_IN_PIN2_Min (0x0UL)
  #define GPIO_IN_PIN2_Max (0x1UL)
  #define GPIO_IN_PIN2_Low (0x0UL)
  #define GPIO_IN_PIN2_High (0x1UL)

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_IN_PIN3_Pos (3UL)
  #define GPIO_IN_PIN3_Msk (0x1UL << GPIO_IN_PIN3_Pos)
  #define GPIO_IN_PIN3_Min (0x0UL)
  #define GPIO_IN_PIN3_Max (0x1UL)
  #define GPIO_IN_PIN3_Low (0x0UL)
  #define GPIO_IN_PIN3_High (0x1UL)

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_IN_PIN4_Pos (4UL)
  #define GPIO_IN_PIN4_Msk (0x1UL << GPIO_IN_PIN4_Pos)
  #define GPIO_IN_PIN4_Min (0x0UL)
  #define GPIO_IN_PIN4_Max (0x1UL)
  #define GPIO_IN_PIN4_Low (0x0UL)
  #define GPIO_IN_PIN4_High (0x1UL)

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_IN_PIN5_Pos (5UL)
  #define GPIO_IN_PIN5_Msk (0x1UL << GPIO_IN_PIN5_Pos)
  #define GPIO_IN_PIN5_Min (0x0UL)
  #define GPIO_IN_PIN5_Max (0x1UL)
  #define GPIO_IN_PIN5_Low (0x0UL)
  #define GPIO_IN_PIN5_High (0x1UL)

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_IN_PIN6_Pos (6UL)
  #define GPIO_IN_PIN6_Msk (0x1UL << GPIO_IN_PIN6_Pos)
  #define GPIO_IN_PIN6_Min (0x0UL)
  #define GPIO_IN_PIN6_Max (0x1UL)
  #define GPIO_IN_PIN6_Low (0x0UL)
  #define GPIO_IN_PIN6_High (0x1UL)

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_IN_PIN7_Pos (7UL)
  #define GPIO_IN_PIN7_Msk (0x1UL << GPIO_IN_PIN7_Pos)
  #define GPIO_IN_PIN7_Min (0x0UL)
  #define GPIO_IN_PIN7_Max (0x1UL)
  #define GPIO_IN_PIN7_Low (0x0UL)
  #define GPIO_IN_PIN7_High (0x1UL)

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_IN_PIN8_Pos (8UL)
  #define GPIO_IN_PIN8_Msk (0x1UL << GPIO_IN_PIN8_Pos)
  #define GPIO_IN_PIN8_Min (0x0UL)
  #define GPIO_IN_PIN8_Max (0x1UL)
  #define GPIO_IN_PIN8_Low (0x0UL)
  #define GPIO_IN_PIN8_High (0x1UL)

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_IN_PIN9_Pos (9UL)
  #define GPIO_IN_PIN9_Msk (0x1UL << GPIO_IN_PIN9_Pos)
  #define GPIO_IN_PIN9_Min (0x0UL)
  #define GPIO_IN_PIN9_Max (0x1UL)
  #define GPIO_IN_PIN9_Low (0x0UL)
  #define GPIO_IN_PIN9_High (0x1UL)

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_IN_PIN10_Pos (10UL)
  #define GPIO_IN_PIN10_Msk (0x1UL << GPIO_IN_PIN10_Pos)
  #define GPIO_IN_PIN10_Min (0x0UL)
  #define GPIO_IN_PIN10_Max (0x1UL)
  #define GPIO_IN_PIN10_Low (0x0UL)
  #define GPIO_IN_PIN10_High (0x1UL)

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_IN_PIN11_Pos (11UL)
  #define GPIO_IN_PIN11_Msk (0x1UL << GPIO_IN_PIN11_Pos)
  #define GPIO_IN_PIN11_Min (0x0UL)
  #define GPIO_IN_PIN11_Max (0x1UL)
  #define GPIO_IN_PIN11_Low (0x0UL)
  #define GPIO_IN_PIN11_High (0x1UL)

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_IN_PIN12_Pos (12UL)
  #define GPIO_IN_PIN12_Msk (0x1UL << GPIO_IN_PIN12_Pos)
  #define GPIO_IN_PIN12_Min (0x0UL)
  #define GPIO_IN_PIN12_Max (0x1UL)
  #define GPIO_IN_PIN12_Low (0x0UL)
  #define GPIO_IN_PIN12_High (0x1UL)

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_IN_PIN13_Pos (13UL)
  #define GPIO_IN_PIN13_Msk (0x1UL << GPIO_IN_PIN13_Pos)
  #define GPIO_IN_PIN13_Min (0x0UL)
  #define GPIO_IN_PIN13_Max (0x1UL)
  #define GPIO_IN_PIN13_Low (0x0UL)
  #define GPIO_IN_PIN13_High (0x1UL)

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_IN_PIN14_Pos (14UL)
  #define GPIO_IN_PIN14_Msk (0x1UL << GPIO_IN_PIN14_Pos)
  #define GPIO_IN_PIN14_Min (0x0UL)
  #define GPIO_IN_PIN14_Max (0x1UL)
  #define GPIO_IN_PIN14_Low (0x0UL)
  #define GPIO_IN_PIN14_High (0x1UL)

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_IN_PIN15_Pos (15UL)
  #define GPIO_IN_PIN15_Msk (0x1UL << GPIO_IN_PIN15_Pos)
  #define GPIO_IN_PIN15_Min (0x0UL)
  #define GPIO_IN_PIN15_Max (0x1UL)
  #define GPIO_IN_PIN15_Low (0x0UL)
  #define GPIO_IN_PIN15_High (0x1UL)

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_IN_PIN16_Pos (16UL)
  #define GPIO_IN_PIN16_Msk (0x1UL << GPIO_IN_PIN16_Pos)
  #define GPIO_IN_PIN16_Min (0x0UL)
  #define GPIO_IN_PIN16_Max (0x1UL)
  #define GPIO_IN_PIN16_Low (0x0UL)
  #define GPIO_IN_PIN16_High (0x1UL)

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_IN_PIN17_Pos (17UL)
  #define GPIO_IN_PIN17_Msk (0x1UL << GPIO_IN_PIN17_Pos)
  #define GPIO_IN_PIN17_Min (0x0UL)
  #define GPIO_IN_PIN17_Max (0x1UL)
  #define GPIO_IN_PIN17_Low (0x0UL)
  #define GPIO_IN_PIN17_High (0x1UL)

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_IN_PIN18_Pos (18UL)
  #define GPIO_IN_PIN18_Msk (0x1UL << GPIO_IN_PIN18_Pos)
  #define GPIO_IN_PIN18_Min (0x0UL)
  #define GPIO_IN_PIN18_Max (0x1UL)
  #define GPIO_IN_PIN18_Low (0x0UL)
  #define GPIO_IN_PIN18_High (0x1UL)

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_IN_PIN19_Pos (19UL)
  #define GPIO_IN_PIN19_Msk (0x1UL << GPIO_IN_PIN19_Pos)
  #define GPIO_IN_PIN19_Min (0x0UL)
  #define GPIO_IN_PIN19_Max (0x1UL)
  #define GPIO_IN_PIN19_Low (0x0UL)
  #define GPIO_IN_PIN19_High (0x1UL)

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_IN_PIN20_Pos (20UL)
  #define GPIO_IN_PIN20_Msk (0x1UL << GPIO_IN_PIN20_Pos)
  #define GPIO_IN_PIN20_Min (0x0UL)
  #define GPIO_IN_PIN20_Max (0x1UL)
  #define GPIO_IN_PIN20_Low (0x0UL)
  #define GPIO_IN_PIN20_High (0x1UL)

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_IN_PIN21_Pos (21UL)
  #define GPIO_IN_PIN21_Msk (0x1UL << GPIO_IN_PIN21_Pos)
  #define GPIO_IN_PIN21_Min (0x0UL)
  #define GPIO_IN_PIN21_Max (0x1UL)
  #define GPIO_IN_PIN21_Low (0x0UL)
  #define GPIO_IN_PIN21_High (0x1UL)

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_IN_PIN22_Pos (22UL)
  #define GPIO_IN_PIN22_Msk (0x1UL << GPIO_IN_PIN22_Pos)
  #define GPIO_IN_PIN22_Min (0x0UL)
  #define GPIO_IN_PIN22_Max (0x1UL)
  #define GPIO_IN_PIN22_Low (0x0UL)
  #define GPIO_IN_PIN22_High (0x1UL)

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_IN_PIN23_Pos (23UL)
  #define GPIO_IN_PIN23_Msk (0x1UL << GPIO_IN_PIN23_Pos)
  #define GPIO_IN_PIN23_Min (0x0UL)
  #define GPIO_IN_PIN23_Max (0x1UL)
  #define GPIO_IN_PIN23_Low (0x0UL)
  #define GPIO_IN_PIN23_High (0x1UL)

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_IN_PIN24_Pos (24UL)
  #define GPIO_IN_PIN24_Msk (0x1UL << GPIO_IN_PIN24_Pos)
  #define GPIO_IN_PIN24_Min (0x0UL)
  #define GPIO_IN_PIN24_Max (0x1UL)
  #define GPIO_IN_PIN24_Low (0x0UL)
  #define GPIO_IN_PIN24_High (0x1UL)

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_IN_PIN25_Pos (25UL)
  #define GPIO_IN_PIN25_Msk (0x1UL << GPIO_IN_PIN25_Pos)
  #define GPIO_IN_PIN25_Min (0x0UL)
  #define GPIO_IN_PIN25_Max (0x1UL)
  #define GPIO_IN_PIN25_Low (0x0UL)
  #define GPIO_IN_PIN25_High (0x1UL)

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_IN_PIN26_Pos (26UL)
  #define GPIO_IN_PIN26_Msk (0x1UL << GPIO_IN_PIN26_Pos)
  #define GPIO_IN_PIN26_Min (0x0UL)
  #define GPIO_IN_PIN26_Max (0x1UL)
  #define GPIO_IN_PIN26_Low (0x0UL)
  #define GPIO_IN_PIN26_High (0x1UL)

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_IN_PIN27_Pos (27UL)
  #define GPIO_IN_PIN27_Msk (0x1UL << GPIO_IN_PIN27_Pos)
  #define GPIO_IN_PIN27_Min (0x0UL)
  #define GPIO_IN_PIN27_Max (0x1UL)
  #define GPIO_IN_PIN27_Low (0x0UL)
  #define GPIO_IN_PIN27_High (0x1UL)

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_IN_PIN28_Pos (28UL)
  #define GPIO_IN_PIN28_Msk (0x1UL << GPIO_IN_PIN28_Pos)
  #define GPIO_IN_PIN28_Min (0x0UL)
  #define GPIO_IN_PIN28_Max (0x1UL)
  #define GPIO_IN_PIN28_Low (0x0UL)
  #define GPIO_IN_PIN28_High (0x1UL)

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_IN_PIN29_Pos (29UL)
  #define GPIO_IN_PIN29_Msk (0x1UL << GPIO_IN_PIN29_Pos)
  #define GPIO_IN_PIN29_Min (0x0UL)
  #define GPIO_IN_PIN29_Max (0x1UL)
  #define GPIO_IN_PIN29_Low (0x0UL)
  #define GPIO_IN_PIN29_High (0x1UL)

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_IN_PIN30_Pos (30UL)
  #define GPIO_IN_PIN30_Msk (0x1UL << GPIO_IN_PIN30_Pos)
  #define GPIO_IN_PIN30_Min (0x0UL)
  #define GPIO_IN_PIN30_Max (0x1UL)
  #define GPIO_IN_PIN30_Low (0x0UL)
  #define GPIO_IN_PIN30_High (0x1UL)

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_IN_PIN31_Pos (31UL)
  #define GPIO_IN_PIN31_Msk (0x1UL << GPIO_IN_PIN31_Pos)
  #define GPIO_IN_PIN31_Min (0x0UL)
  #define GPIO_IN_PIN31_Max (0x1UL)
  #define GPIO_IN_PIN31_Low (0x0UL)
  #define GPIO_IN_PIN31_High (0x1UL)


/* GPIO_DIR: Direction of GPIO pins */
  #define GPIO_DIR_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_DIR_PIN0_Pos (0UL)
  #define GPIO_DIR_PIN0_Msk (0x1UL << GPIO_DIR_PIN0_Pos)
  #define GPIO_DIR_PIN0_Min (0x0UL)
  #define GPIO_DIR_PIN0_Max (0x1UL)
  #define GPIO_DIR_PIN0_Input (0x0UL)
  #define GPIO_DIR_PIN0_Output (0x1UL)

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_DIR_PIN1_Pos (1UL)
  #define GPIO_DIR_PIN1_Msk (0x1UL << GPIO_DIR_PIN1_Pos)
  #define GPIO_DIR_PIN1_Min (0x0UL)
  #define GPIO_DIR_PIN1_Max (0x1UL)
  #define GPIO_DIR_PIN1_Input (0x0UL)
  #define GPIO_DIR_PIN1_Output (0x1UL)

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_DIR_PIN2_Pos (2UL)
  #define GPIO_DIR_PIN2_Msk (0x1UL << GPIO_DIR_PIN2_Pos)
  #define GPIO_DIR_PIN2_Min (0x0UL)
  #define GPIO_DIR_PIN2_Max (0x1UL)
  #define GPIO_DIR_PIN2_Input (0x0UL)
  #define GPIO_DIR_PIN2_Output (0x1UL)

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_DIR_PIN3_Pos (3UL)
  #define GPIO_DIR_PIN3_Msk (0x1UL << GPIO_DIR_PIN3_Pos)
  #define GPIO_DIR_PIN3_Min (0x0UL)
  #define GPIO_DIR_PIN3_Max (0x1UL)
  #define GPIO_DIR_PIN3_Input (0x0UL)
  #define GPIO_DIR_PIN3_Output (0x1UL)

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_DIR_PIN4_Pos (4UL)
  #define GPIO_DIR_PIN4_Msk (0x1UL << GPIO_DIR_PIN4_Pos)
  #define GPIO_DIR_PIN4_Min (0x0UL)
  #define GPIO_DIR_PIN4_Max (0x1UL)
  #define GPIO_DIR_PIN4_Input (0x0UL)
  #define GPIO_DIR_PIN4_Output (0x1UL)

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_DIR_PIN5_Pos (5UL)
  #define GPIO_DIR_PIN5_Msk (0x1UL << GPIO_DIR_PIN5_Pos)
  #define GPIO_DIR_PIN5_Min (0x0UL)
  #define GPIO_DIR_PIN5_Max (0x1UL)
  #define GPIO_DIR_PIN5_Input (0x0UL)
  #define GPIO_DIR_PIN5_Output (0x1UL)

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_DIR_PIN6_Pos (6UL)
  #define GPIO_DIR_PIN6_Msk (0x1UL << GPIO_DIR_PIN6_Pos)
  #define GPIO_DIR_PIN6_Min (0x0UL)
  #define GPIO_DIR_PIN6_Max (0x1UL)
  #define GPIO_DIR_PIN6_Input (0x0UL)
  #define GPIO_DIR_PIN6_Output (0x1UL)

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_DIR_PIN7_Pos (7UL)
  #define GPIO_DIR_PIN7_Msk (0x1UL << GPIO_DIR_PIN7_Pos)
  #define GPIO_DIR_PIN7_Min (0x0UL)
  #define GPIO_DIR_PIN7_Max (0x1UL)
  #define GPIO_DIR_PIN7_Input (0x0UL)
  #define GPIO_DIR_PIN7_Output (0x1UL)

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_DIR_PIN8_Pos (8UL)
  #define GPIO_DIR_PIN8_Msk (0x1UL << GPIO_DIR_PIN8_Pos)
  #define GPIO_DIR_PIN8_Min (0x0UL)
  #define GPIO_DIR_PIN8_Max (0x1UL)
  #define GPIO_DIR_PIN8_Input (0x0UL)
  #define GPIO_DIR_PIN8_Output (0x1UL)

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_DIR_PIN9_Pos (9UL)
  #define GPIO_DIR_PIN9_Msk (0x1UL << GPIO_DIR_PIN9_Pos)
  #define GPIO_DIR_PIN9_Min (0x0UL)
  #define GPIO_DIR_PIN9_Max (0x1UL)
  #define GPIO_DIR_PIN9_Input (0x0UL)
  #define GPIO_DIR_PIN9_Output (0x1UL)

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_DIR_PIN10_Pos (10UL)
  #define GPIO_DIR_PIN10_Msk (0x1UL << GPIO_DIR_PIN10_Pos)
  #define GPIO_DIR_PIN10_Min (0x0UL)
  #define GPIO_DIR_PIN10_Max (0x1UL)
  #define GPIO_DIR_PIN10_Input (0x0UL)
  #define GPIO_DIR_PIN10_Output (0x1UL)

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_DIR_PIN11_Pos (11UL)
  #define GPIO_DIR_PIN11_Msk (0x1UL << GPIO_DIR_PIN11_Pos)
  #define GPIO_DIR_PIN11_Min (0x0UL)
  #define GPIO_DIR_PIN11_Max (0x1UL)
  #define GPIO_DIR_PIN11_Input (0x0UL)
  #define GPIO_DIR_PIN11_Output (0x1UL)

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_DIR_PIN12_Pos (12UL)
  #define GPIO_DIR_PIN12_Msk (0x1UL << GPIO_DIR_PIN12_Pos)
  #define GPIO_DIR_PIN12_Min (0x0UL)
  #define GPIO_DIR_PIN12_Max (0x1UL)
  #define GPIO_DIR_PIN12_Input (0x0UL)
  #define GPIO_DIR_PIN12_Output (0x1UL)

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_DIR_PIN13_Pos (13UL)
  #define GPIO_DIR_PIN13_Msk (0x1UL << GPIO_DIR_PIN13_Pos)
  #define GPIO_DIR_PIN13_Min (0x0UL)
  #define GPIO_DIR_PIN13_Max (0x1UL)
  #define GPIO_DIR_PIN13_Input (0x0UL)
  #define GPIO_DIR_PIN13_Output (0x1UL)

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_DIR_PIN14_Pos (14UL)
  #define GPIO_DIR_PIN14_Msk (0x1UL << GPIO_DIR_PIN14_Pos)
  #define GPIO_DIR_PIN14_Min (0x0UL)
  #define GPIO_DIR_PIN14_Max (0x1UL)
  #define GPIO_DIR_PIN14_Input (0x0UL)
  #define GPIO_DIR_PIN14_Output (0x1UL)

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_DIR_PIN15_Pos (15UL)
  #define GPIO_DIR_PIN15_Msk (0x1UL << GPIO_DIR_PIN15_Pos)
  #define GPIO_DIR_PIN15_Min (0x0UL)
  #define GPIO_DIR_PIN15_Max (0x1UL)
  #define GPIO_DIR_PIN15_Input (0x0UL)
  #define GPIO_DIR_PIN15_Output (0x1UL)

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_DIR_PIN16_Pos (16UL)
  #define GPIO_DIR_PIN16_Msk (0x1UL << GPIO_DIR_PIN16_Pos)
  #define GPIO_DIR_PIN16_Min (0x0UL)
  #define GPIO_DIR_PIN16_Max (0x1UL)
  #define GPIO_DIR_PIN16_Input (0x0UL)
  #define GPIO_DIR_PIN16_Output (0x1UL)

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_DIR_PIN17_Pos (17UL)
  #define GPIO_DIR_PIN17_Msk (0x1UL << GPIO_DIR_PIN17_Pos)
  #define GPIO_DIR_PIN17_Min (0x0UL)
  #define GPIO_DIR_PIN17_Max (0x1UL)
  #define GPIO_DIR_PIN17_Input (0x0UL)
  #define GPIO_DIR_PIN17_Output (0x1UL)

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_DIR_PIN18_Pos (18UL)
  #define GPIO_DIR_PIN18_Msk (0x1UL << GPIO_DIR_PIN18_Pos)
  #define GPIO_DIR_PIN18_Min (0x0UL)
  #define GPIO_DIR_PIN18_Max (0x1UL)
  #define GPIO_DIR_PIN18_Input (0x0UL)
  #define GPIO_DIR_PIN18_Output (0x1UL)

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_DIR_PIN19_Pos (19UL)
  #define GPIO_DIR_PIN19_Msk (0x1UL << GPIO_DIR_PIN19_Pos)
  #define GPIO_DIR_PIN19_Min (0x0UL)
  #define GPIO_DIR_PIN19_Max (0x1UL)
  #define GPIO_DIR_PIN19_Input (0x0UL)
  #define GPIO_DIR_PIN19_Output (0x1UL)

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_DIR_PIN20_Pos (20UL)
  #define GPIO_DIR_PIN20_Msk (0x1UL << GPIO_DIR_PIN20_Pos)
  #define GPIO_DIR_PIN20_Min (0x0UL)
  #define GPIO_DIR_PIN20_Max (0x1UL)
  #define GPIO_DIR_PIN20_Input (0x0UL)
  #define GPIO_DIR_PIN20_Output (0x1UL)

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_DIR_PIN21_Pos (21UL)
  #define GPIO_DIR_PIN21_Msk (0x1UL << GPIO_DIR_PIN21_Pos)
  #define GPIO_DIR_PIN21_Min (0x0UL)
  #define GPIO_DIR_PIN21_Max (0x1UL)
  #define GPIO_DIR_PIN21_Input (0x0UL)
  #define GPIO_DIR_PIN21_Output (0x1UL)

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_DIR_PIN22_Pos (22UL)
  #define GPIO_DIR_PIN22_Msk (0x1UL << GPIO_DIR_PIN22_Pos)
  #define GPIO_DIR_PIN22_Min (0x0UL)
  #define GPIO_DIR_PIN22_Max (0x1UL)
  #define GPIO_DIR_PIN22_Input (0x0UL)
  #define GPIO_DIR_PIN22_Output (0x1UL)

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_DIR_PIN23_Pos (23UL)
  #define GPIO_DIR_PIN23_Msk (0x1UL << GPIO_DIR_PIN23_Pos)
  #define GPIO_DIR_PIN23_Min (0x0UL)
  #define GPIO_DIR_PIN23_Max (0x1UL)
  #define GPIO_DIR_PIN23_Input (0x0UL)
  #define GPIO_DIR_PIN23_Output (0x1UL)

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_DIR_PIN24_Pos (24UL)
  #define GPIO_DIR_PIN24_Msk (0x1UL << GPIO_DIR_PIN24_Pos)
  #define GPIO_DIR_PIN24_Min (0x0UL)
  #define GPIO_DIR_PIN24_Max (0x1UL)
  #define GPIO_DIR_PIN24_Input (0x0UL)
  #define GPIO_DIR_PIN24_Output (0x1UL)

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_DIR_PIN25_Pos (25UL)
  #define GPIO_DIR_PIN25_Msk (0x1UL << GPIO_DIR_PIN25_Pos)
  #define GPIO_DIR_PIN25_Min (0x0UL)
  #define GPIO_DIR_PIN25_Max (0x1UL)
  #define GPIO_DIR_PIN25_Input (0x0UL)
  #define GPIO_DIR_PIN25_Output (0x1UL)

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_DIR_PIN26_Pos (26UL)
  #define GPIO_DIR_PIN26_Msk (0x1UL << GPIO_DIR_PIN26_Pos)
  #define GPIO_DIR_PIN26_Min (0x0UL)
  #define GPIO_DIR_PIN26_Max (0x1UL)
  #define GPIO_DIR_PIN26_Input (0x0UL)
  #define GPIO_DIR_PIN26_Output (0x1UL)

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_DIR_PIN27_Pos (27UL)
  #define GPIO_DIR_PIN27_Msk (0x1UL << GPIO_DIR_PIN27_Pos)
  #define GPIO_DIR_PIN27_Min (0x0UL)
  #define GPIO_DIR_PIN27_Max (0x1UL)
  #define GPIO_DIR_PIN27_Input (0x0UL)
  #define GPIO_DIR_PIN27_Output (0x1UL)

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_DIR_PIN28_Pos (28UL)
  #define GPIO_DIR_PIN28_Msk (0x1UL << GPIO_DIR_PIN28_Pos)
  #define GPIO_DIR_PIN28_Min (0x0UL)
  #define GPIO_DIR_PIN28_Max (0x1UL)
  #define GPIO_DIR_PIN28_Input (0x0UL)
  #define GPIO_DIR_PIN28_Output (0x1UL)

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_DIR_PIN29_Pos (29UL)
  #define GPIO_DIR_PIN29_Msk (0x1UL << GPIO_DIR_PIN29_Pos)
  #define GPIO_DIR_PIN29_Min (0x0UL)
  #define GPIO_DIR_PIN29_Max (0x1UL)
  #define GPIO_DIR_PIN29_Input (0x0UL)
  #define GPIO_DIR_PIN29_Output (0x1UL)

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_DIR_PIN30_Pos (30UL)
  #define GPIO_DIR_PIN30_Msk (0x1UL << GPIO_DIR_PIN30_Pos)
  #define GPIO_DIR_PIN30_Min (0x0UL)
  #define GPIO_DIR_PIN30_Max (0x1UL)
  #define GPIO_DIR_PIN30_Input (0x0UL)
  #define GPIO_DIR_PIN30_Output (0x1UL)

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_DIR_PIN31_Pos (31UL)
  #define GPIO_DIR_PIN31_Msk (0x1UL << GPIO_DIR_PIN31_Pos)
  #define GPIO_DIR_PIN31_Min (0x0UL)
  #define GPIO_DIR_PIN31_Max (0x1UL)
  #define GPIO_DIR_PIN31_Input (0x0UL)
  #define GPIO_DIR_PIN31_Output (0x1UL)


/* GPIO_DIRSET: DIR set register */
  #define GPIO_DIRSET_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Set as output pin 0 */
  #define GPIO_DIRSET_PIN0_Pos (0UL)
  #define GPIO_DIRSET_PIN0_Msk (0x1UL << GPIO_DIRSET_PIN0_Pos)
  #define GPIO_DIRSET_PIN0_Min (0x0UL)
  #define GPIO_DIRSET_PIN0_Max (0x1UL)
  #define GPIO_DIRSET_PIN0_Input (0x0UL)
  #define GPIO_DIRSET_PIN0_Output (0x1UL)
  #define GPIO_DIRSET_PIN0_Set (0x1UL)

/* PIN1 @Bit 1 : Set as output pin 1 */
  #define GPIO_DIRSET_PIN1_Pos (1UL)
  #define GPIO_DIRSET_PIN1_Msk (0x1UL << GPIO_DIRSET_PIN1_Pos)
  #define GPIO_DIRSET_PIN1_Min (0x0UL)
  #define GPIO_DIRSET_PIN1_Max (0x1UL)
  #define GPIO_DIRSET_PIN1_Input (0x0UL)
  #define GPIO_DIRSET_PIN1_Output (0x1UL)
  #define GPIO_DIRSET_PIN1_Set (0x1UL)

/* PIN2 @Bit 2 : Set as output pin 2 */
  #define GPIO_DIRSET_PIN2_Pos (2UL)
  #define GPIO_DIRSET_PIN2_Msk (0x1UL << GPIO_DIRSET_PIN2_Pos)
  #define GPIO_DIRSET_PIN2_Min (0x0UL)
  #define GPIO_DIRSET_PIN2_Max (0x1UL)
  #define GPIO_DIRSET_PIN2_Input (0x0UL)
  #define GPIO_DIRSET_PIN2_Output (0x1UL)
  #define GPIO_DIRSET_PIN2_Set (0x1UL)

/* PIN3 @Bit 3 : Set as output pin 3 */
  #define GPIO_DIRSET_PIN3_Pos (3UL)
  #define GPIO_DIRSET_PIN3_Msk (0x1UL << GPIO_DIRSET_PIN3_Pos)
  #define GPIO_DIRSET_PIN3_Min (0x0UL)
  #define GPIO_DIRSET_PIN3_Max (0x1UL)
  #define GPIO_DIRSET_PIN3_Input (0x0UL)
  #define GPIO_DIRSET_PIN3_Output (0x1UL)
  #define GPIO_DIRSET_PIN3_Set (0x1UL)

/* PIN4 @Bit 4 : Set as output pin 4 */
  #define GPIO_DIRSET_PIN4_Pos (4UL)
  #define GPIO_DIRSET_PIN4_Msk (0x1UL << GPIO_DIRSET_PIN4_Pos)
  #define GPIO_DIRSET_PIN4_Min (0x0UL)
  #define GPIO_DIRSET_PIN4_Max (0x1UL)
  #define GPIO_DIRSET_PIN4_Input (0x0UL)
  #define GPIO_DIRSET_PIN4_Output (0x1UL)
  #define GPIO_DIRSET_PIN4_Set (0x1UL)

/* PIN5 @Bit 5 : Set as output pin 5 */
  #define GPIO_DIRSET_PIN5_Pos (5UL)
  #define GPIO_DIRSET_PIN5_Msk (0x1UL << GPIO_DIRSET_PIN5_Pos)
  #define GPIO_DIRSET_PIN5_Min (0x0UL)
  #define GPIO_DIRSET_PIN5_Max (0x1UL)
  #define GPIO_DIRSET_PIN5_Input (0x0UL)
  #define GPIO_DIRSET_PIN5_Output (0x1UL)
  #define GPIO_DIRSET_PIN5_Set (0x1UL)

/* PIN6 @Bit 6 : Set as output pin 6 */
  #define GPIO_DIRSET_PIN6_Pos (6UL)
  #define GPIO_DIRSET_PIN6_Msk (0x1UL << GPIO_DIRSET_PIN6_Pos)
  #define GPIO_DIRSET_PIN6_Min (0x0UL)
  #define GPIO_DIRSET_PIN6_Max (0x1UL)
  #define GPIO_DIRSET_PIN6_Input (0x0UL)
  #define GPIO_DIRSET_PIN6_Output (0x1UL)
  #define GPIO_DIRSET_PIN6_Set (0x1UL)

/* PIN7 @Bit 7 : Set as output pin 7 */
  #define GPIO_DIRSET_PIN7_Pos (7UL)
  #define GPIO_DIRSET_PIN7_Msk (0x1UL << GPIO_DIRSET_PIN7_Pos)
  #define GPIO_DIRSET_PIN7_Min (0x0UL)
  #define GPIO_DIRSET_PIN7_Max (0x1UL)
  #define GPIO_DIRSET_PIN7_Input (0x0UL)
  #define GPIO_DIRSET_PIN7_Output (0x1UL)
  #define GPIO_DIRSET_PIN7_Set (0x1UL)

/* PIN8 @Bit 8 : Set as output pin 8 */
  #define GPIO_DIRSET_PIN8_Pos (8UL)
  #define GPIO_DIRSET_PIN8_Msk (0x1UL << GPIO_DIRSET_PIN8_Pos)
  #define GPIO_DIRSET_PIN8_Min (0x0UL)
  #define GPIO_DIRSET_PIN8_Max (0x1UL)
  #define GPIO_DIRSET_PIN8_Input (0x0UL)
  #define GPIO_DIRSET_PIN8_Output (0x1UL)
  #define GPIO_DIRSET_PIN8_Set (0x1UL)

/* PIN9 @Bit 9 : Set as output pin 9 */
  #define GPIO_DIRSET_PIN9_Pos (9UL)
  #define GPIO_DIRSET_PIN9_Msk (0x1UL << GPIO_DIRSET_PIN9_Pos)
  #define GPIO_DIRSET_PIN9_Min (0x0UL)
  #define GPIO_DIRSET_PIN9_Max (0x1UL)
  #define GPIO_DIRSET_PIN9_Input (0x0UL)
  #define GPIO_DIRSET_PIN9_Output (0x1UL)
  #define GPIO_DIRSET_PIN9_Set (0x1UL)

/* PIN10 @Bit 10 : Set as output pin 10 */
  #define GPIO_DIRSET_PIN10_Pos (10UL)
  #define GPIO_DIRSET_PIN10_Msk (0x1UL << GPIO_DIRSET_PIN10_Pos)
  #define GPIO_DIRSET_PIN10_Min (0x0UL)
  #define GPIO_DIRSET_PIN10_Max (0x1UL)
  #define GPIO_DIRSET_PIN10_Input (0x0UL)
  #define GPIO_DIRSET_PIN10_Output (0x1UL)
  #define GPIO_DIRSET_PIN10_Set (0x1UL)

/* PIN11 @Bit 11 : Set as output pin 11 */
  #define GPIO_DIRSET_PIN11_Pos (11UL)
  #define GPIO_DIRSET_PIN11_Msk (0x1UL << GPIO_DIRSET_PIN11_Pos)
  #define GPIO_DIRSET_PIN11_Min (0x0UL)
  #define GPIO_DIRSET_PIN11_Max (0x1UL)
  #define GPIO_DIRSET_PIN11_Input (0x0UL)
  #define GPIO_DIRSET_PIN11_Output (0x1UL)
  #define GPIO_DIRSET_PIN11_Set (0x1UL)

/* PIN12 @Bit 12 : Set as output pin 12 */
  #define GPIO_DIRSET_PIN12_Pos (12UL)
  #define GPIO_DIRSET_PIN12_Msk (0x1UL << GPIO_DIRSET_PIN12_Pos)
  #define GPIO_DIRSET_PIN12_Min (0x0UL)
  #define GPIO_DIRSET_PIN12_Max (0x1UL)
  #define GPIO_DIRSET_PIN12_Input (0x0UL)
  #define GPIO_DIRSET_PIN12_Output (0x1UL)
  #define GPIO_DIRSET_PIN12_Set (0x1UL)

/* PIN13 @Bit 13 : Set as output pin 13 */
  #define GPIO_DIRSET_PIN13_Pos (13UL)
  #define GPIO_DIRSET_PIN13_Msk (0x1UL << GPIO_DIRSET_PIN13_Pos)
  #define GPIO_DIRSET_PIN13_Min (0x0UL)
  #define GPIO_DIRSET_PIN13_Max (0x1UL)
  #define GPIO_DIRSET_PIN13_Input (0x0UL)
  #define GPIO_DIRSET_PIN13_Output (0x1UL)
  #define GPIO_DIRSET_PIN13_Set (0x1UL)

/* PIN14 @Bit 14 : Set as output pin 14 */
  #define GPIO_DIRSET_PIN14_Pos (14UL)
  #define GPIO_DIRSET_PIN14_Msk (0x1UL << GPIO_DIRSET_PIN14_Pos)
  #define GPIO_DIRSET_PIN14_Min (0x0UL)
  #define GPIO_DIRSET_PIN14_Max (0x1UL)
  #define GPIO_DIRSET_PIN14_Input (0x0UL)
  #define GPIO_DIRSET_PIN14_Output (0x1UL)
  #define GPIO_DIRSET_PIN14_Set (0x1UL)

/* PIN15 @Bit 15 : Set as output pin 15 */
  #define GPIO_DIRSET_PIN15_Pos (15UL)
  #define GPIO_DIRSET_PIN15_Msk (0x1UL << GPIO_DIRSET_PIN15_Pos)
  #define GPIO_DIRSET_PIN15_Min (0x0UL)
  #define GPIO_DIRSET_PIN15_Max (0x1UL)
  #define GPIO_DIRSET_PIN15_Input (0x0UL)
  #define GPIO_DIRSET_PIN15_Output (0x1UL)
  #define GPIO_DIRSET_PIN15_Set (0x1UL)

/* PIN16 @Bit 16 : Set as output pin 16 */
  #define GPIO_DIRSET_PIN16_Pos (16UL)
  #define GPIO_DIRSET_PIN16_Msk (0x1UL << GPIO_DIRSET_PIN16_Pos)
  #define GPIO_DIRSET_PIN16_Min (0x0UL)
  #define GPIO_DIRSET_PIN16_Max (0x1UL)
  #define GPIO_DIRSET_PIN16_Input (0x0UL)
  #define GPIO_DIRSET_PIN16_Output (0x1UL)
  #define GPIO_DIRSET_PIN16_Set (0x1UL)

/* PIN17 @Bit 17 : Set as output pin 17 */
  #define GPIO_DIRSET_PIN17_Pos (17UL)
  #define GPIO_DIRSET_PIN17_Msk (0x1UL << GPIO_DIRSET_PIN17_Pos)
  #define GPIO_DIRSET_PIN17_Min (0x0UL)
  #define GPIO_DIRSET_PIN17_Max (0x1UL)
  #define GPIO_DIRSET_PIN17_Input (0x0UL)
  #define GPIO_DIRSET_PIN17_Output (0x1UL)
  #define GPIO_DIRSET_PIN17_Set (0x1UL)

/* PIN18 @Bit 18 : Set as output pin 18 */
  #define GPIO_DIRSET_PIN18_Pos (18UL)
  #define GPIO_DIRSET_PIN18_Msk (0x1UL << GPIO_DIRSET_PIN18_Pos)
  #define GPIO_DIRSET_PIN18_Min (0x0UL)
  #define GPIO_DIRSET_PIN18_Max (0x1UL)
  #define GPIO_DIRSET_PIN18_Input (0x0UL)
  #define GPIO_DIRSET_PIN18_Output (0x1UL)
  #define GPIO_DIRSET_PIN18_Set (0x1UL)

/* PIN19 @Bit 19 : Set as output pin 19 */
  #define GPIO_DIRSET_PIN19_Pos (19UL)
  #define GPIO_DIRSET_PIN19_Msk (0x1UL << GPIO_DIRSET_PIN19_Pos)
  #define GPIO_DIRSET_PIN19_Min (0x0UL)
  #define GPIO_DIRSET_PIN19_Max (0x1UL)
  #define GPIO_DIRSET_PIN19_Input (0x0UL)
  #define GPIO_DIRSET_PIN19_Output (0x1UL)
  #define GPIO_DIRSET_PIN19_Set (0x1UL)

/* PIN20 @Bit 20 : Set as output pin 20 */
  #define GPIO_DIRSET_PIN20_Pos (20UL)
  #define GPIO_DIRSET_PIN20_Msk (0x1UL << GPIO_DIRSET_PIN20_Pos)
  #define GPIO_DIRSET_PIN20_Min (0x0UL)
  #define GPIO_DIRSET_PIN20_Max (0x1UL)
  #define GPIO_DIRSET_PIN20_Input (0x0UL)
  #define GPIO_DIRSET_PIN20_Output (0x1UL)
  #define GPIO_DIRSET_PIN20_Set (0x1UL)

/* PIN21 @Bit 21 : Set as output pin 21 */
  #define GPIO_DIRSET_PIN21_Pos (21UL)
  #define GPIO_DIRSET_PIN21_Msk (0x1UL << GPIO_DIRSET_PIN21_Pos)
  #define GPIO_DIRSET_PIN21_Min (0x0UL)
  #define GPIO_DIRSET_PIN21_Max (0x1UL)
  #define GPIO_DIRSET_PIN21_Input (0x0UL)
  #define GPIO_DIRSET_PIN21_Output (0x1UL)
  #define GPIO_DIRSET_PIN21_Set (0x1UL)

/* PIN22 @Bit 22 : Set as output pin 22 */
  #define GPIO_DIRSET_PIN22_Pos (22UL)
  #define GPIO_DIRSET_PIN22_Msk (0x1UL << GPIO_DIRSET_PIN22_Pos)
  #define GPIO_DIRSET_PIN22_Min (0x0UL)
  #define GPIO_DIRSET_PIN22_Max (0x1UL)
  #define GPIO_DIRSET_PIN22_Input (0x0UL)
  #define GPIO_DIRSET_PIN22_Output (0x1UL)
  #define GPIO_DIRSET_PIN22_Set (0x1UL)

/* PIN23 @Bit 23 : Set as output pin 23 */
  #define GPIO_DIRSET_PIN23_Pos (23UL)
  #define GPIO_DIRSET_PIN23_Msk (0x1UL << GPIO_DIRSET_PIN23_Pos)
  #define GPIO_DIRSET_PIN23_Min (0x0UL)
  #define GPIO_DIRSET_PIN23_Max (0x1UL)
  #define GPIO_DIRSET_PIN23_Input (0x0UL)
  #define GPIO_DIRSET_PIN23_Output (0x1UL)
  #define GPIO_DIRSET_PIN23_Set (0x1UL)

/* PIN24 @Bit 24 : Set as output pin 24 */
  #define GPIO_DIRSET_PIN24_Pos (24UL)
  #define GPIO_DIRSET_PIN24_Msk (0x1UL << GPIO_DIRSET_PIN24_Pos)
  #define GPIO_DIRSET_PIN24_Min (0x0UL)
  #define GPIO_DIRSET_PIN24_Max (0x1UL)
  #define GPIO_DIRSET_PIN24_Input (0x0UL)
  #define GPIO_DIRSET_PIN24_Output (0x1UL)
  #define GPIO_DIRSET_PIN24_Set (0x1UL)

/* PIN25 @Bit 25 : Set as output pin 25 */
  #define GPIO_DIRSET_PIN25_Pos (25UL)
  #define GPIO_DIRSET_PIN25_Msk (0x1UL << GPIO_DIRSET_PIN25_Pos)
  #define GPIO_DIRSET_PIN25_Min (0x0UL)
  #define GPIO_DIRSET_PIN25_Max (0x1UL)
  #define GPIO_DIRSET_PIN25_Input (0x0UL)
  #define GPIO_DIRSET_PIN25_Output (0x1UL)
  #define GPIO_DIRSET_PIN25_Set (0x1UL)

/* PIN26 @Bit 26 : Set as output pin 26 */
  #define GPIO_DIRSET_PIN26_Pos (26UL)
  #define GPIO_DIRSET_PIN26_Msk (0x1UL << GPIO_DIRSET_PIN26_Pos)
  #define GPIO_DIRSET_PIN26_Min (0x0UL)
  #define GPIO_DIRSET_PIN26_Max (0x1UL)
  #define GPIO_DIRSET_PIN26_Input (0x0UL)
  #define GPIO_DIRSET_PIN26_Output (0x1UL)
  #define GPIO_DIRSET_PIN26_Set (0x1UL)

/* PIN27 @Bit 27 : Set as output pin 27 */
  #define GPIO_DIRSET_PIN27_Pos (27UL)
  #define GPIO_DIRSET_PIN27_Msk (0x1UL << GPIO_DIRSET_PIN27_Pos)
  #define GPIO_DIRSET_PIN27_Min (0x0UL)
  #define GPIO_DIRSET_PIN27_Max (0x1UL)
  #define GPIO_DIRSET_PIN27_Input (0x0UL)
  #define GPIO_DIRSET_PIN27_Output (0x1UL)
  #define GPIO_DIRSET_PIN27_Set (0x1UL)

/* PIN28 @Bit 28 : Set as output pin 28 */
  #define GPIO_DIRSET_PIN28_Pos (28UL)
  #define GPIO_DIRSET_PIN28_Msk (0x1UL << GPIO_DIRSET_PIN28_Pos)
  #define GPIO_DIRSET_PIN28_Min (0x0UL)
  #define GPIO_DIRSET_PIN28_Max (0x1UL)
  #define GPIO_DIRSET_PIN28_Input (0x0UL)
  #define GPIO_DIRSET_PIN28_Output (0x1UL)
  #define GPIO_DIRSET_PIN28_Set (0x1UL)

/* PIN29 @Bit 29 : Set as output pin 29 */
  #define GPIO_DIRSET_PIN29_Pos (29UL)
  #define GPIO_DIRSET_PIN29_Msk (0x1UL << GPIO_DIRSET_PIN29_Pos)
  #define GPIO_DIRSET_PIN29_Min (0x0UL)
  #define GPIO_DIRSET_PIN29_Max (0x1UL)
  #define GPIO_DIRSET_PIN29_Input (0x0UL)
  #define GPIO_DIRSET_PIN29_Output (0x1UL)
  #define GPIO_DIRSET_PIN29_Set (0x1UL)

/* PIN30 @Bit 30 : Set as output pin 30 */
  #define GPIO_DIRSET_PIN30_Pos (30UL)
  #define GPIO_DIRSET_PIN30_Msk (0x1UL << GPIO_DIRSET_PIN30_Pos)
  #define GPIO_DIRSET_PIN30_Min (0x0UL)
  #define GPIO_DIRSET_PIN30_Max (0x1UL)
  #define GPIO_DIRSET_PIN30_Input (0x0UL)
  #define GPIO_DIRSET_PIN30_Output (0x1UL)
  #define GPIO_DIRSET_PIN30_Set (0x1UL)

/* PIN31 @Bit 31 : Set as output pin 31 */
  #define GPIO_DIRSET_PIN31_Pos (31UL)
  #define GPIO_DIRSET_PIN31_Msk (0x1UL << GPIO_DIRSET_PIN31_Pos)
  #define GPIO_DIRSET_PIN31_Min (0x0UL)
  #define GPIO_DIRSET_PIN31_Max (0x1UL)
  #define GPIO_DIRSET_PIN31_Input (0x0UL)
  #define GPIO_DIRSET_PIN31_Output (0x1UL)
  #define GPIO_DIRSET_PIN31_Set (0x1UL)


/* GPIO_DIRCLR: DIR clear register */
  #define GPIO_DIRCLR_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Set as input pin 0 */
  #define GPIO_DIRCLR_PIN0_Pos (0UL)
  #define GPIO_DIRCLR_PIN0_Msk (0x1UL << GPIO_DIRCLR_PIN0_Pos)
  #define GPIO_DIRCLR_PIN0_Min (0x0UL)
  #define GPIO_DIRCLR_PIN0_Max (0x1UL)
  #define GPIO_DIRCLR_PIN0_Input (0x0UL)
  #define GPIO_DIRCLR_PIN0_Output (0x1UL)
  #define GPIO_DIRCLR_PIN0_Clear (0x1UL)

/* PIN1 @Bit 1 : Set as input pin 1 */
  #define GPIO_DIRCLR_PIN1_Pos (1UL)
  #define GPIO_DIRCLR_PIN1_Msk (0x1UL << GPIO_DIRCLR_PIN1_Pos)
  #define GPIO_DIRCLR_PIN1_Min (0x0UL)
  #define GPIO_DIRCLR_PIN1_Max (0x1UL)
  #define GPIO_DIRCLR_PIN1_Input (0x0UL)
  #define GPIO_DIRCLR_PIN1_Output (0x1UL)
  #define GPIO_DIRCLR_PIN1_Clear (0x1UL)

/* PIN2 @Bit 2 : Set as input pin 2 */
  #define GPIO_DIRCLR_PIN2_Pos (2UL)
  #define GPIO_DIRCLR_PIN2_Msk (0x1UL << GPIO_DIRCLR_PIN2_Pos)
  #define GPIO_DIRCLR_PIN2_Min (0x0UL)
  #define GPIO_DIRCLR_PIN2_Max (0x1UL)
  #define GPIO_DIRCLR_PIN2_Input (0x0UL)
  #define GPIO_DIRCLR_PIN2_Output (0x1UL)
  #define GPIO_DIRCLR_PIN2_Clear (0x1UL)

/* PIN3 @Bit 3 : Set as input pin 3 */
  #define GPIO_DIRCLR_PIN3_Pos (3UL)
  #define GPIO_DIRCLR_PIN3_Msk (0x1UL << GPIO_DIRCLR_PIN3_Pos)
  #define GPIO_DIRCLR_PIN3_Min (0x0UL)
  #define GPIO_DIRCLR_PIN3_Max (0x1UL)
  #define GPIO_DIRCLR_PIN3_Input (0x0UL)
  #define GPIO_DIRCLR_PIN3_Output (0x1UL)
  #define GPIO_DIRCLR_PIN3_Clear (0x1UL)

/* PIN4 @Bit 4 : Set as input pin 4 */
  #define GPIO_DIRCLR_PIN4_Pos (4UL)
  #define GPIO_DIRCLR_PIN4_Msk (0x1UL << GPIO_DIRCLR_PIN4_Pos)
  #define GPIO_DIRCLR_PIN4_Min (0x0UL)
  #define GPIO_DIRCLR_PIN4_Max (0x1UL)
  #define GPIO_DIRCLR_PIN4_Input (0x0UL)
  #define GPIO_DIRCLR_PIN4_Output (0x1UL)
  #define GPIO_DIRCLR_PIN4_Clear (0x1UL)

/* PIN5 @Bit 5 : Set as input pin 5 */
  #define GPIO_DIRCLR_PIN5_Pos (5UL)
  #define GPIO_DIRCLR_PIN5_Msk (0x1UL << GPIO_DIRCLR_PIN5_Pos)
  #define GPIO_DIRCLR_PIN5_Min (0x0UL)
  #define GPIO_DIRCLR_PIN5_Max (0x1UL)
  #define GPIO_DIRCLR_PIN5_Input (0x0UL)
  #define GPIO_DIRCLR_PIN5_Output (0x1UL)
  #define GPIO_DIRCLR_PIN5_Clear (0x1UL)

/* PIN6 @Bit 6 : Set as input pin 6 */
  #define GPIO_DIRCLR_PIN6_Pos (6UL)
  #define GPIO_DIRCLR_PIN6_Msk (0x1UL << GPIO_DIRCLR_PIN6_Pos)
  #define GPIO_DIRCLR_PIN6_Min (0x0UL)
  #define GPIO_DIRCLR_PIN6_Max (0x1UL)
  #define GPIO_DIRCLR_PIN6_Input (0x0UL)
  #define GPIO_DIRCLR_PIN6_Output (0x1UL)
  #define GPIO_DIRCLR_PIN6_Clear (0x1UL)

/* PIN7 @Bit 7 : Set as input pin 7 */
  #define GPIO_DIRCLR_PIN7_Pos (7UL)
  #define GPIO_DIRCLR_PIN7_Msk (0x1UL << GPIO_DIRCLR_PIN7_Pos)
  #define GPIO_DIRCLR_PIN7_Min (0x0UL)
  #define GPIO_DIRCLR_PIN7_Max (0x1UL)
  #define GPIO_DIRCLR_PIN7_Input (0x0UL)
  #define GPIO_DIRCLR_PIN7_Output (0x1UL)
  #define GPIO_DIRCLR_PIN7_Clear (0x1UL)

/* PIN8 @Bit 8 : Set as input pin 8 */
  #define GPIO_DIRCLR_PIN8_Pos (8UL)
  #define GPIO_DIRCLR_PIN8_Msk (0x1UL << GPIO_DIRCLR_PIN8_Pos)
  #define GPIO_DIRCLR_PIN8_Min (0x0UL)
  #define GPIO_DIRCLR_PIN8_Max (0x1UL)
  #define GPIO_DIRCLR_PIN8_Input (0x0UL)
  #define GPIO_DIRCLR_PIN8_Output (0x1UL)
  #define GPIO_DIRCLR_PIN8_Clear (0x1UL)

/* PIN9 @Bit 9 : Set as input pin 9 */
  #define GPIO_DIRCLR_PIN9_Pos (9UL)
  #define GPIO_DIRCLR_PIN9_Msk (0x1UL << GPIO_DIRCLR_PIN9_Pos)
  #define GPIO_DIRCLR_PIN9_Min (0x0UL)
  #define GPIO_DIRCLR_PIN9_Max (0x1UL)
  #define GPIO_DIRCLR_PIN9_Input (0x0UL)
  #define GPIO_DIRCLR_PIN9_Output (0x1UL)
  #define GPIO_DIRCLR_PIN9_Clear (0x1UL)

/* PIN10 @Bit 10 : Set as input pin 10 */
  #define GPIO_DIRCLR_PIN10_Pos (10UL)
  #define GPIO_DIRCLR_PIN10_Msk (0x1UL << GPIO_DIRCLR_PIN10_Pos)
  #define GPIO_DIRCLR_PIN10_Min (0x0UL)
  #define GPIO_DIRCLR_PIN10_Max (0x1UL)
  #define GPIO_DIRCLR_PIN10_Input (0x0UL)
  #define GPIO_DIRCLR_PIN10_Output (0x1UL)
  #define GPIO_DIRCLR_PIN10_Clear (0x1UL)

/* PIN11 @Bit 11 : Set as input pin 11 */
  #define GPIO_DIRCLR_PIN11_Pos (11UL)
  #define GPIO_DIRCLR_PIN11_Msk (0x1UL << GPIO_DIRCLR_PIN11_Pos)
  #define GPIO_DIRCLR_PIN11_Min (0x0UL)
  #define GPIO_DIRCLR_PIN11_Max (0x1UL)
  #define GPIO_DIRCLR_PIN11_Input (0x0UL)
  #define GPIO_DIRCLR_PIN11_Output (0x1UL)
  #define GPIO_DIRCLR_PIN11_Clear (0x1UL)

/* PIN12 @Bit 12 : Set as input pin 12 */
  #define GPIO_DIRCLR_PIN12_Pos (12UL)
  #define GPIO_DIRCLR_PIN12_Msk (0x1UL << GPIO_DIRCLR_PIN12_Pos)
  #define GPIO_DIRCLR_PIN12_Min (0x0UL)
  #define GPIO_DIRCLR_PIN12_Max (0x1UL)
  #define GPIO_DIRCLR_PIN12_Input (0x0UL)
  #define GPIO_DIRCLR_PIN12_Output (0x1UL)
  #define GPIO_DIRCLR_PIN12_Clear (0x1UL)

/* PIN13 @Bit 13 : Set as input pin 13 */
  #define GPIO_DIRCLR_PIN13_Pos (13UL)
  #define GPIO_DIRCLR_PIN13_Msk (0x1UL << GPIO_DIRCLR_PIN13_Pos)
  #define GPIO_DIRCLR_PIN13_Min (0x0UL)
  #define GPIO_DIRCLR_PIN13_Max (0x1UL)
  #define GPIO_DIRCLR_PIN13_Input (0x0UL)
  #define GPIO_DIRCLR_PIN13_Output (0x1UL)
  #define GPIO_DIRCLR_PIN13_Clear (0x1UL)

/* PIN14 @Bit 14 : Set as input pin 14 */
  #define GPIO_DIRCLR_PIN14_Pos (14UL)
  #define GPIO_DIRCLR_PIN14_Msk (0x1UL << GPIO_DIRCLR_PIN14_Pos)
  #define GPIO_DIRCLR_PIN14_Min (0x0UL)
  #define GPIO_DIRCLR_PIN14_Max (0x1UL)
  #define GPIO_DIRCLR_PIN14_Input (0x0UL)
  #define GPIO_DIRCLR_PIN14_Output (0x1UL)
  #define GPIO_DIRCLR_PIN14_Clear (0x1UL)

/* PIN15 @Bit 15 : Set as input pin 15 */
  #define GPIO_DIRCLR_PIN15_Pos (15UL)
  #define GPIO_DIRCLR_PIN15_Msk (0x1UL << GPIO_DIRCLR_PIN15_Pos)
  #define GPIO_DIRCLR_PIN15_Min (0x0UL)
  #define GPIO_DIRCLR_PIN15_Max (0x1UL)
  #define GPIO_DIRCLR_PIN15_Input (0x0UL)
  #define GPIO_DIRCLR_PIN15_Output (0x1UL)
  #define GPIO_DIRCLR_PIN15_Clear (0x1UL)

/* PIN16 @Bit 16 : Set as input pin 16 */
  #define GPIO_DIRCLR_PIN16_Pos (16UL)
  #define GPIO_DIRCLR_PIN16_Msk (0x1UL << GPIO_DIRCLR_PIN16_Pos)
  #define GPIO_DIRCLR_PIN16_Min (0x0UL)
  #define GPIO_DIRCLR_PIN16_Max (0x1UL)
  #define GPIO_DIRCLR_PIN16_Input (0x0UL)
  #define GPIO_DIRCLR_PIN16_Output (0x1UL)
  #define GPIO_DIRCLR_PIN16_Clear (0x1UL)

/* PIN17 @Bit 17 : Set as input pin 17 */
  #define GPIO_DIRCLR_PIN17_Pos (17UL)
  #define GPIO_DIRCLR_PIN17_Msk (0x1UL << GPIO_DIRCLR_PIN17_Pos)
  #define GPIO_DIRCLR_PIN17_Min (0x0UL)
  #define GPIO_DIRCLR_PIN17_Max (0x1UL)
  #define GPIO_DIRCLR_PIN17_Input (0x0UL)
  #define GPIO_DIRCLR_PIN17_Output (0x1UL)
  #define GPIO_DIRCLR_PIN17_Clear (0x1UL)

/* PIN18 @Bit 18 : Set as input pin 18 */
  #define GPIO_DIRCLR_PIN18_Pos (18UL)
  #define GPIO_DIRCLR_PIN18_Msk (0x1UL << GPIO_DIRCLR_PIN18_Pos)
  #define GPIO_DIRCLR_PIN18_Min (0x0UL)
  #define GPIO_DIRCLR_PIN18_Max (0x1UL)
  #define GPIO_DIRCLR_PIN18_Input (0x0UL)
  #define GPIO_DIRCLR_PIN18_Output (0x1UL)
  #define GPIO_DIRCLR_PIN18_Clear (0x1UL)

/* PIN19 @Bit 19 : Set as input pin 19 */
  #define GPIO_DIRCLR_PIN19_Pos (19UL)
  #define GPIO_DIRCLR_PIN19_Msk (0x1UL << GPIO_DIRCLR_PIN19_Pos)
  #define GPIO_DIRCLR_PIN19_Min (0x0UL)
  #define GPIO_DIRCLR_PIN19_Max (0x1UL)
  #define GPIO_DIRCLR_PIN19_Input (0x0UL)
  #define GPIO_DIRCLR_PIN19_Output (0x1UL)
  #define GPIO_DIRCLR_PIN19_Clear (0x1UL)

/* PIN20 @Bit 20 : Set as input pin 20 */
  #define GPIO_DIRCLR_PIN20_Pos (20UL)
  #define GPIO_DIRCLR_PIN20_Msk (0x1UL << GPIO_DIRCLR_PIN20_Pos)
  #define GPIO_DIRCLR_PIN20_Min (0x0UL)
  #define GPIO_DIRCLR_PIN20_Max (0x1UL)
  #define GPIO_DIRCLR_PIN20_Input (0x0UL)
  #define GPIO_DIRCLR_PIN20_Output (0x1UL)
  #define GPIO_DIRCLR_PIN20_Clear (0x1UL)

/* PIN21 @Bit 21 : Set as input pin 21 */
  #define GPIO_DIRCLR_PIN21_Pos (21UL)
  #define GPIO_DIRCLR_PIN21_Msk (0x1UL << GPIO_DIRCLR_PIN21_Pos)
  #define GPIO_DIRCLR_PIN21_Min (0x0UL)
  #define GPIO_DIRCLR_PIN21_Max (0x1UL)
  #define GPIO_DIRCLR_PIN21_Input (0x0UL)
  #define GPIO_DIRCLR_PIN21_Output (0x1UL)
  #define GPIO_DIRCLR_PIN21_Clear (0x1UL)

/* PIN22 @Bit 22 : Set as input pin 22 */
  #define GPIO_DIRCLR_PIN22_Pos (22UL)
  #define GPIO_DIRCLR_PIN22_Msk (0x1UL << GPIO_DIRCLR_PIN22_Pos)
  #define GPIO_DIRCLR_PIN22_Min (0x0UL)
  #define GPIO_DIRCLR_PIN22_Max (0x1UL)
  #define GPIO_DIRCLR_PIN22_Input (0x0UL)
  #define GPIO_DIRCLR_PIN22_Output (0x1UL)
  #define GPIO_DIRCLR_PIN22_Clear (0x1UL)

/* PIN23 @Bit 23 : Set as input pin 23 */
  #define GPIO_DIRCLR_PIN23_Pos (23UL)
  #define GPIO_DIRCLR_PIN23_Msk (0x1UL << GPIO_DIRCLR_PIN23_Pos)
  #define GPIO_DIRCLR_PIN23_Min (0x0UL)
  #define GPIO_DIRCLR_PIN23_Max (0x1UL)
  #define GPIO_DIRCLR_PIN23_Input (0x0UL)
  #define GPIO_DIRCLR_PIN23_Output (0x1UL)
  #define GPIO_DIRCLR_PIN23_Clear (0x1UL)

/* PIN24 @Bit 24 : Set as input pin 24 */
  #define GPIO_DIRCLR_PIN24_Pos (24UL)
  #define GPIO_DIRCLR_PIN24_Msk (0x1UL << GPIO_DIRCLR_PIN24_Pos)
  #define GPIO_DIRCLR_PIN24_Min (0x0UL)
  #define GPIO_DIRCLR_PIN24_Max (0x1UL)
  #define GPIO_DIRCLR_PIN24_Input (0x0UL)
  #define GPIO_DIRCLR_PIN24_Output (0x1UL)
  #define GPIO_DIRCLR_PIN24_Clear (0x1UL)

/* PIN25 @Bit 25 : Set as input pin 25 */
  #define GPIO_DIRCLR_PIN25_Pos (25UL)
  #define GPIO_DIRCLR_PIN25_Msk (0x1UL << GPIO_DIRCLR_PIN25_Pos)
  #define GPIO_DIRCLR_PIN25_Min (0x0UL)
  #define GPIO_DIRCLR_PIN25_Max (0x1UL)
  #define GPIO_DIRCLR_PIN25_Input (0x0UL)
  #define GPIO_DIRCLR_PIN25_Output (0x1UL)
  #define GPIO_DIRCLR_PIN25_Clear (0x1UL)

/* PIN26 @Bit 26 : Set as input pin 26 */
  #define GPIO_DIRCLR_PIN26_Pos (26UL)
  #define GPIO_DIRCLR_PIN26_Msk (0x1UL << GPIO_DIRCLR_PIN26_Pos)
  #define GPIO_DIRCLR_PIN26_Min (0x0UL)
  #define GPIO_DIRCLR_PIN26_Max (0x1UL)
  #define GPIO_DIRCLR_PIN26_Input (0x0UL)
  #define GPIO_DIRCLR_PIN26_Output (0x1UL)
  #define GPIO_DIRCLR_PIN26_Clear (0x1UL)

/* PIN27 @Bit 27 : Set as input pin 27 */
  #define GPIO_DIRCLR_PIN27_Pos (27UL)
  #define GPIO_DIRCLR_PIN27_Msk (0x1UL << GPIO_DIRCLR_PIN27_Pos)
  #define GPIO_DIRCLR_PIN27_Min (0x0UL)
  #define GPIO_DIRCLR_PIN27_Max (0x1UL)
  #define GPIO_DIRCLR_PIN27_Input (0x0UL)
  #define GPIO_DIRCLR_PIN27_Output (0x1UL)
  #define GPIO_DIRCLR_PIN27_Clear (0x1UL)

/* PIN28 @Bit 28 : Set as input pin 28 */
  #define GPIO_DIRCLR_PIN28_Pos (28UL)
  #define GPIO_DIRCLR_PIN28_Msk (0x1UL << GPIO_DIRCLR_PIN28_Pos)
  #define GPIO_DIRCLR_PIN28_Min (0x0UL)
  #define GPIO_DIRCLR_PIN28_Max (0x1UL)
  #define GPIO_DIRCLR_PIN28_Input (0x0UL)
  #define GPIO_DIRCLR_PIN28_Output (0x1UL)
  #define GPIO_DIRCLR_PIN28_Clear (0x1UL)

/* PIN29 @Bit 29 : Set as input pin 29 */
  #define GPIO_DIRCLR_PIN29_Pos (29UL)
  #define GPIO_DIRCLR_PIN29_Msk (0x1UL << GPIO_DIRCLR_PIN29_Pos)
  #define GPIO_DIRCLR_PIN29_Min (0x0UL)
  #define GPIO_DIRCLR_PIN29_Max (0x1UL)
  #define GPIO_DIRCLR_PIN29_Input (0x0UL)
  #define GPIO_DIRCLR_PIN29_Output (0x1UL)
  #define GPIO_DIRCLR_PIN29_Clear (0x1UL)

/* PIN30 @Bit 30 : Set as input pin 30 */
  #define GPIO_DIRCLR_PIN30_Pos (30UL)
  #define GPIO_DIRCLR_PIN30_Msk (0x1UL << GPIO_DIRCLR_PIN30_Pos)
  #define GPIO_DIRCLR_PIN30_Min (0x0UL)
  #define GPIO_DIRCLR_PIN30_Max (0x1UL)
  #define GPIO_DIRCLR_PIN30_Input (0x0UL)
  #define GPIO_DIRCLR_PIN30_Output (0x1UL)
  #define GPIO_DIRCLR_PIN30_Clear (0x1UL)

/* PIN31 @Bit 31 : Set as input pin 31 */
  #define GPIO_DIRCLR_PIN31_Pos (31UL)
  #define GPIO_DIRCLR_PIN31_Msk (0x1UL << GPIO_DIRCLR_PIN31_Pos)
  #define GPIO_DIRCLR_PIN31_Min (0x0UL)
  #define GPIO_DIRCLR_PIN31_Max (0x1UL)
  #define GPIO_DIRCLR_PIN31_Input (0x0UL)
  #define GPIO_DIRCLR_PIN31_Output (0x1UL)
  #define GPIO_DIRCLR_PIN31_Clear (0x1UL)


/* GPIO_LATCH: Latch register indicating what GPIO pins that have met the criteria set in the PIN_CNF[n].SENSE registers */
  #define GPIO_LATCH_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : Status on whether PIN0 has met criteria set in PIN_CNF[0].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN0_Pos (0UL)
  #define GPIO_LATCH_PIN0_Msk (0x1UL << GPIO_LATCH_PIN0_Pos)
  #define GPIO_LATCH_PIN0_Min (0x0UL)
  #define GPIO_LATCH_PIN0_Max (0x1UL)
  #define GPIO_LATCH_PIN0_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN0_Latched (0x1UL)

/* PIN1 @Bit 1 : Status on whether PIN1 has met criteria set in PIN_CNF[1].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN1_Pos (1UL)
  #define GPIO_LATCH_PIN1_Msk (0x1UL << GPIO_LATCH_PIN1_Pos)
  #define GPIO_LATCH_PIN1_Min (0x0UL)
  #define GPIO_LATCH_PIN1_Max (0x1UL)
  #define GPIO_LATCH_PIN1_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN1_Latched (0x1UL)

/* PIN2 @Bit 2 : Status on whether PIN2 has met criteria set in PIN_CNF[2].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN2_Pos (2UL)
  #define GPIO_LATCH_PIN2_Msk (0x1UL << GPIO_LATCH_PIN2_Pos)
  #define GPIO_LATCH_PIN2_Min (0x0UL)
  #define GPIO_LATCH_PIN2_Max (0x1UL)
  #define GPIO_LATCH_PIN2_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN2_Latched (0x1UL)

/* PIN3 @Bit 3 : Status on whether PIN3 has met criteria set in PIN_CNF[3].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN3_Pos (3UL)
  #define GPIO_LATCH_PIN3_Msk (0x1UL << GPIO_LATCH_PIN3_Pos)
  #define GPIO_LATCH_PIN3_Min (0x0UL)
  #define GPIO_LATCH_PIN3_Max (0x1UL)
  #define GPIO_LATCH_PIN3_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN3_Latched (0x1UL)

/* PIN4 @Bit 4 : Status on whether PIN4 has met criteria set in PIN_CNF[4].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN4_Pos (4UL)
  #define GPIO_LATCH_PIN4_Msk (0x1UL << GPIO_LATCH_PIN4_Pos)
  #define GPIO_LATCH_PIN4_Min (0x0UL)
  #define GPIO_LATCH_PIN4_Max (0x1UL)
  #define GPIO_LATCH_PIN4_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN4_Latched (0x1UL)

/* PIN5 @Bit 5 : Status on whether PIN5 has met criteria set in PIN_CNF[5].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN5_Pos (5UL)
  #define GPIO_LATCH_PIN5_Msk (0x1UL << GPIO_LATCH_PIN5_Pos)
  #define GPIO_LATCH_PIN5_Min (0x0UL)
  #define GPIO_LATCH_PIN5_Max (0x1UL)
  #define GPIO_LATCH_PIN5_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN5_Latched (0x1UL)

/* PIN6 @Bit 6 : Status on whether PIN6 has met criteria set in PIN_CNF[6].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN6_Pos (6UL)
  #define GPIO_LATCH_PIN6_Msk (0x1UL << GPIO_LATCH_PIN6_Pos)
  #define GPIO_LATCH_PIN6_Min (0x0UL)
  #define GPIO_LATCH_PIN6_Max (0x1UL)
  #define GPIO_LATCH_PIN6_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN6_Latched (0x1UL)

/* PIN7 @Bit 7 : Status on whether PIN7 has met criteria set in PIN_CNF[7].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN7_Pos (7UL)
  #define GPIO_LATCH_PIN7_Msk (0x1UL << GPIO_LATCH_PIN7_Pos)
  #define GPIO_LATCH_PIN7_Min (0x0UL)
  #define GPIO_LATCH_PIN7_Max (0x1UL)
  #define GPIO_LATCH_PIN7_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN7_Latched (0x1UL)

/* PIN8 @Bit 8 : Status on whether PIN8 has met criteria set in PIN_CNF[8].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN8_Pos (8UL)
  #define GPIO_LATCH_PIN8_Msk (0x1UL << GPIO_LATCH_PIN8_Pos)
  #define GPIO_LATCH_PIN8_Min (0x0UL)
  #define GPIO_LATCH_PIN8_Max (0x1UL)
  #define GPIO_LATCH_PIN8_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN8_Latched (0x1UL)

/* PIN9 @Bit 9 : Status on whether PIN9 has met criteria set in PIN_CNF[9].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN9_Pos (9UL)
  #define GPIO_LATCH_PIN9_Msk (0x1UL << GPIO_LATCH_PIN9_Pos)
  #define GPIO_LATCH_PIN9_Min (0x0UL)
  #define GPIO_LATCH_PIN9_Max (0x1UL)
  #define GPIO_LATCH_PIN9_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN9_Latched (0x1UL)

/* PIN10 @Bit 10 : Status on whether PIN10 has met criteria set in PIN_CNF[10].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN10_Pos (10UL)
  #define GPIO_LATCH_PIN10_Msk (0x1UL << GPIO_LATCH_PIN10_Pos)
  #define GPIO_LATCH_PIN10_Min (0x0UL)
  #define GPIO_LATCH_PIN10_Max (0x1UL)
  #define GPIO_LATCH_PIN10_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN10_Latched (0x1UL)

/* PIN11 @Bit 11 : Status on whether PIN11 has met criteria set in PIN_CNF[11].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN11_Pos (11UL)
  #define GPIO_LATCH_PIN11_Msk (0x1UL << GPIO_LATCH_PIN11_Pos)
  #define GPIO_LATCH_PIN11_Min (0x0UL)
  #define GPIO_LATCH_PIN11_Max (0x1UL)
  #define GPIO_LATCH_PIN11_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN11_Latched (0x1UL)

/* PIN12 @Bit 12 : Status on whether PIN12 has met criteria set in PIN_CNF[12].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN12_Pos (12UL)
  #define GPIO_LATCH_PIN12_Msk (0x1UL << GPIO_LATCH_PIN12_Pos)
  #define GPIO_LATCH_PIN12_Min (0x0UL)
  #define GPIO_LATCH_PIN12_Max (0x1UL)
  #define GPIO_LATCH_PIN12_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN12_Latched (0x1UL)

/* PIN13 @Bit 13 : Status on whether PIN13 has met criteria set in PIN_CNF[13].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN13_Pos (13UL)
  #define GPIO_LATCH_PIN13_Msk (0x1UL << GPIO_LATCH_PIN13_Pos)
  #define GPIO_LATCH_PIN13_Min (0x0UL)
  #define GPIO_LATCH_PIN13_Max (0x1UL)
  #define GPIO_LATCH_PIN13_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN13_Latched (0x1UL)

/* PIN14 @Bit 14 : Status on whether PIN14 has met criteria set in PIN_CNF[14].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN14_Pos (14UL)
  #define GPIO_LATCH_PIN14_Msk (0x1UL << GPIO_LATCH_PIN14_Pos)
  #define GPIO_LATCH_PIN14_Min (0x0UL)
  #define GPIO_LATCH_PIN14_Max (0x1UL)
  #define GPIO_LATCH_PIN14_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN14_Latched (0x1UL)

/* PIN15 @Bit 15 : Status on whether PIN15 has met criteria set in PIN_CNF[15].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN15_Pos (15UL)
  #define GPIO_LATCH_PIN15_Msk (0x1UL << GPIO_LATCH_PIN15_Pos)
  #define GPIO_LATCH_PIN15_Min (0x0UL)
  #define GPIO_LATCH_PIN15_Max (0x1UL)
  #define GPIO_LATCH_PIN15_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN15_Latched (0x1UL)

/* PIN16 @Bit 16 : Status on whether PIN16 has met criteria set in PIN_CNF[16].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN16_Pos (16UL)
  #define GPIO_LATCH_PIN16_Msk (0x1UL << GPIO_LATCH_PIN16_Pos)
  #define GPIO_LATCH_PIN16_Min (0x0UL)
  #define GPIO_LATCH_PIN16_Max (0x1UL)
  #define GPIO_LATCH_PIN16_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN16_Latched (0x1UL)

/* PIN17 @Bit 17 : Status on whether PIN17 has met criteria set in PIN_CNF[17].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN17_Pos (17UL)
  #define GPIO_LATCH_PIN17_Msk (0x1UL << GPIO_LATCH_PIN17_Pos)
  #define GPIO_LATCH_PIN17_Min (0x0UL)
  #define GPIO_LATCH_PIN17_Max (0x1UL)
  #define GPIO_LATCH_PIN17_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN17_Latched (0x1UL)

/* PIN18 @Bit 18 : Status on whether PIN18 has met criteria set in PIN_CNF[18].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN18_Pos (18UL)
  #define GPIO_LATCH_PIN18_Msk (0x1UL << GPIO_LATCH_PIN18_Pos)
  #define GPIO_LATCH_PIN18_Min (0x0UL)
  #define GPIO_LATCH_PIN18_Max (0x1UL)
  #define GPIO_LATCH_PIN18_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN18_Latched (0x1UL)

/* PIN19 @Bit 19 : Status on whether PIN19 has met criteria set in PIN_CNF[19].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN19_Pos (19UL)
  #define GPIO_LATCH_PIN19_Msk (0x1UL << GPIO_LATCH_PIN19_Pos)
  #define GPIO_LATCH_PIN19_Min (0x0UL)
  #define GPIO_LATCH_PIN19_Max (0x1UL)
  #define GPIO_LATCH_PIN19_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN19_Latched (0x1UL)

/* PIN20 @Bit 20 : Status on whether PIN20 has met criteria set in PIN_CNF[20].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN20_Pos (20UL)
  #define GPIO_LATCH_PIN20_Msk (0x1UL << GPIO_LATCH_PIN20_Pos)
  #define GPIO_LATCH_PIN20_Min (0x0UL)
  #define GPIO_LATCH_PIN20_Max (0x1UL)
  #define GPIO_LATCH_PIN20_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN20_Latched (0x1UL)

/* PIN21 @Bit 21 : Status on whether PIN21 has met criteria set in PIN_CNF[21].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN21_Pos (21UL)
  #define GPIO_LATCH_PIN21_Msk (0x1UL << GPIO_LATCH_PIN21_Pos)
  #define GPIO_LATCH_PIN21_Min (0x0UL)
  #define GPIO_LATCH_PIN21_Max (0x1UL)
  #define GPIO_LATCH_PIN21_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN21_Latched (0x1UL)

/* PIN22 @Bit 22 : Status on whether PIN22 has met criteria set in PIN_CNF[22].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN22_Pos (22UL)
  #define GPIO_LATCH_PIN22_Msk (0x1UL << GPIO_LATCH_PIN22_Pos)
  #define GPIO_LATCH_PIN22_Min (0x0UL)
  #define GPIO_LATCH_PIN22_Max (0x1UL)
  #define GPIO_LATCH_PIN22_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN22_Latched (0x1UL)

/* PIN23 @Bit 23 : Status on whether PIN23 has met criteria set in PIN_CNF[23].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN23_Pos (23UL)
  #define GPIO_LATCH_PIN23_Msk (0x1UL << GPIO_LATCH_PIN23_Pos)
  #define GPIO_LATCH_PIN23_Min (0x0UL)
  #define GPIO_LATCH_PIN23_Max (0x1UL)
  #define GPIO_LATCH_PIN23_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN23_Latched (0x1UL)

/* PIN24 @Bit 24 : Status on whether PIN24 has met criteria set in PIN_CNF[24].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN24_Pos (24UL)
  #define GPIO_LATCH_PIN24_Msk (0x1UL << GPIO_LATCH_PIN24_Pos)
  #define GPIO_LATCH_PIN24_Min (0x0UL)
  #define GPIO_LATCH_PIN24_Max (0x1UL)
  #define GPIO_LATCH_PIN24_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN24_Latched (0x1UL)

/* PIN25 @Bit 25 : Status on whether PIN25 has met criteria set in PIN_CNF[25].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN25_Pos (25UL)
  #define GPIO_LATCH_PIN25_Msk (0x1UL << GPIO_LATCH_PIN25_Pos)
  #define GPIO_LATCH_PIN25_Min (0x0UL)
  #define GPIO_LATCH_PIN25_Max (0x1UL)
  #define GPIO_LATCH_PIN25_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN25_Latched (0x1UL)

/* PIN26 @Bit 26 : Status on whether PIN26 has met criteria set in PIN_CNF[26].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN26_Pos (26UL)
  #define GPIO_LATCH_PIN26_Msk (0x1UL << GPIO_LATCH_PIN26_Pos)
  #define GPIO_LATCH_PIN26_Min (0x0UL)
  #define GPIO_LATCH_PIN26_Max (0x1UL)
  #define GPIO_LATCH_PIN26_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN26_Latched (0x1UL)

/* PIN27 @Bit 27 : Status on whether PIN27 has met criteria set in PIN_CNF[27].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN27_Pos (27UL)
  #define GPIO_LATCH_PIN27_Msk (0x1UL << GPIO_LATCH_PIN27_Pos)
  #define GPIO_LATCH_PIN27_Min (0x0UL)
  #define GPIO_LATCH_PIN27_Max (0x1UL)
  #define GPIO_LATCH_PIN27_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN27_Latched (0x1UL)

/* PIN28 @Bit 28 : Status on whether PIN28 has met criteria set in PIN_CNF[28].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN28_Pos (28UL)
  #define GPIO_LATCH_PIN28_Msk (0x1UL << GPIO_LATCH_PIN28_Pos)
  #define GPIO_LATCH_PIN28_Min (0x0UL)
  #define GPIO_LATCH_PIN28_Max (0x1UL)
  #define GPIO_LATCH_PIN28_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN28_Latched (0x1UL)

/* PIN29 @Bit 29 : Status on whether PIN29 has met criteria set in PIN_CNF[29].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN29_Pos (29UL)
  #define GPIO_LATCH_PIN29_Msk (0x1UL << GPIO_LATCH_PIN29_Pos)
  #define GPIO_LATCH_PIN29_Min (0x0UL)
  #define GPIO_LATCH_PIN29_Max (0x1UL)
  #define GPIO_LATCH_PIN29_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN29_Latched (0x1UL)

/* PIN30 @Bit 30 : Status on whether PIN30 has met criteria set in PIN_CNF[30].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN30_Pos (30UL)
  #define GPIO_LATCH_PIN30_Msk (0x1UL << GPIO_LATCH_PIN30_Pos)
  #define GPIO_LATCH_PIN30_Min (0x0UL)
  #define GPIO_LATCH_PIN30_Max (0x1UL)
  #define GPIO_LATCH_PIN30_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN30_Latched (0x1UL)

/* PIN31 @Bit 31 : Status on whether PIN31 has met criteria set in PIN_CNF[31].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN31_Pos (31UL)
  #define GPIO_LATCH_PIN31_Msk (0x1UL << GPIO_LATCH_PIN31_Pos)
  #define GPIO_LATCH_PIN31_Min (0x0UL)
  #define GPIO_LATCH_PIN31_Max (0x1UL)
  #define GPIO_LATCH_PIN31_NotLatched (0x0UL)
  #define GPIO_LATCH_PIN31_Latched (0x1UL)


/* GPIO_DETECTMODE: Select between default DETECT signal behavior and LDETECT mode */
  #define GPIO_DETECTMODE_ResetValue (0x00000000UL)

/* DETECTMODE @Bit 0 : Select between default DETECT signal behavior and LDETECT mode */
  #define GPIO_DETECTMODE_DETECTMODE_Pos (0UL)
  #define GPIO_DETECTMODE_DETECTMODE_Msk (0x1UL << GPIO_DETECTMODE_DETECTMODE_Pos)
  #define GPIO_DETECTMODE_DETECTMODE_Min (0x0UL)
  #define GPIO_DETECTMODE_DETECTMODE_Max (0x1UL)
  #define GPIO_DETECTMODE_DETECTMODE_Default (0x0UL)
  #define GPIO_DETECTMODE_DETECTMODE_LDETECT (0x1UL)


/* GPIO_PIN_CNF: Pin n configuration of GPIO pin */
  #define GPIO_PIN_CNF_MaxCount (32UL)
  #define GPIO_PIN_CNF_MaxIndex (31UL)
  #define GPIO_PIN_CNF_MinIndex (0UL)
  #define GPIO_PIN_CNF_ResetValue (0x00000002UL)

/* DIR @Bit 0 : Pin direction. Same physical register as DIR register */
  #define GPIO_PIN_CNF_DIR_Pos (0UL)
  #define GPIO_PIN_CNF_DIR_Msk (0x1UL << GPIO_PIN_CNF_DIR_Pos)
  #define GPIO_PIN_CNF_DIR_Min (0x0UL)
  #define GPIO_PIN_CNF_DIR_Max (0x1UL)
  #define GPIO_PIN_CNF_DIR_Input (0x0UL)
  #define GPIO_PIN_CNF_DIR_Output (0x1UL)

/* INPUT @Bit 1 : Connect or disconnect input buffer */
  #define GPIO_PIN_CNF_INPUT_Pos (1UL)
  #define GPIO_PIN_CNF_INPUT_Msk (0x1UL << GPIO_PIN_CNF_INPUT_Pos)
  #define GPIO_PIN_CNF_INPUT_Min (0x0UL)
  #define GPIO_PIN_CNF_INPUT_Max (0x1UL)
  #define GPIO_PIN_CNF_INPUT_Connect (0x0UL)
  #define GPIO_PIN_CNF_INPUT_Disconnect (0x1UL)

/* PULL @Bits 2..3 : Pull configuration */
  #define GPIO_PIN_CNF_PULL_Pos (2UL)
  #define GPIO_PIN_CNF_PULL_Msk (0x3UL << GPIO_PIN_CNF_PULL_Pos)
  #define GPIO_PIN_CNF_PULL_Min (0x0UL)
  #define GPIO_PIN_CNF_PULL_Max (0x3UL)
  #define GPIO_PIN_CNF_PULL_Disabled (0x0UL)
  #define GPIO_PIN_CNF_PULL_Pulldown (0x1UL)
  #define GPIO_PIN_CNF_PULL_Pullup (0x3UL)

/* DRIVE0 @Bits 8..9 : Drive configuration for '0' */
  #define GPIO_PIN_CNF_DRIVE0_Pos (8UL)
  #define GPIO_PIN_CNF_DRIVE0_Msk (0x3UL << GPIO_PIN_CNF_DRIVE0_Pos)
  #define GPIO_PIN_CNF_DRIVE0_Min (0x0UL)
  #define GPIO_PIN_CNF_DRIVE0_Max (0x3UL)
  #define GPIO_PIN_CNF_DRIVE0_S0 (0x0UL)
  #define GPIO_PIN_CNF_DRIVE0_H0 (0x1UL)
  #define GPIO_PIN_CNF_DRIVE0_D0 (0x2UL)
  #define GPIO_PIN_CNF_DRIVE0_E0 (0x3UL)

/* DRIVE1 @Bits 10..11 : Drive configuration for '1' */
  #define GPIO_PIN_CNF_DRIVE1_Pos (10UL)
  #define GPIO_PIN_CNF_DRIVE1_Msk (0x3UL << GPIO_PIN_CNF_DRIVE1_Pos)
  #define GPIO_PIN_CNF_DRIVE1_Min (0x0UL)
  #define GPIO_PIN_CNF_DRIVE1_Max (0x3UL)
  #define GPIO_PIN_CNF_DRIVE1_S1 (0x0UL)
  #define GPIO_PIN_CNF_DRIVE1_H1 (0x1UL)
  #define GPIO_PIN_CNF_DRIVE1_D1 (0x2UL)
  #define GPIO_PIN_CNF_DRIVE1_E1 (0x3UL)

/* SENSE @Bits 16..17 : Pin sensing mechanism */
  #define GPIO_PIN_CNF_SENSE_Pos (16UL)
  #define GPIO_PIN_CNF_SENSE_Msk (0x3UL << GPIO_PIN_CNF_SENSE_Pos)
  #define GPIO_PIN_CNF_SENSE_Min (0x0UL)
  #define GPIO_PIN_CNF_SENSE_Max (0x3UL)
  #define GPIO_PIN_CNF_SENSE_Disabled (0x0UL)
  #define GPIO_PIN_CNF_SENSE_High (0x2UL)
  #define GPIO_PIN_CNF_SENSE_Low (0x3UL)

/* CTRLSEL @Bits 28..30 : Select which module has direct control over this pin */
  #define GPIO_PIN_CNF_CTRLSEL_Pos (28UL)
  #define GPIO_PIN_CNF_CTRLSEL_Msk (0x7UL << GPIO_PIN_CNF_CTRLSEL_Pos)
  #define GPIO_PIN_CNF_CTRLSEL_Min (0x0UL)
  #define GPIO_PIN_CNF_CTRLSEL_Max (0x4UL)
  #define GPIO_PIN_CNF_CTRLSEL_GPIO (0x0UL)
  #define GPIO_PIN_CNF_CTRLSEL_VPR (0x1UL)
  #define GPIO_PIN_CNF_CTRLSEL_GRTC (0x4UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                       GPIOHSPADCTRL                                       ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ================================================== Struct GPIOHSPADCTRL =================================================== */
/**
  * @brief GPIO high-speed pad control
  */
  typedef struct {
    __IM uint32_t RESERVED[12];
    __IOM uint32_t BIAS;
    __IOM uint32_t OVERRIDE;
    __IOM uint32_t CTRL;
  } NRF_GPIOHSPADCTRL_Type;

/* GPIOHSPADCTRL_BIAS: Bias control */
  #define GPIOHSPADCTRL_BIAS_ResetValue (0x00000000UL)

/* HSBIAS @Bits 0..1 : Bias setting for high-speed pad */
  #define GPIOHSPADCTRL_BIAS_HSBIAS_Pos (0UL)
  #define GPIOHSPADCTRL_BIAS_HSBIAS_Msk (0x3UL << GPIOHSPADCTRL_BIAS_HSBIAS_Pos)

/* REPLICABIAS @Bit 2 : Bias setting for replica pad */
  #define GPIOHSPADCTRL_BIAS_REPLICABIAS_Pos (2UL)
  #define GPIOHSPADCTRL_BIAS_REPLICABIAS_Msk (0x1UL << GPIOHSPADCTRL_BIAS_REPLICABIAS_Pos)


/* GPIOHSPADCTRL_OVERRIDE: Override control */
  #define GPIOHSPADCTRL_OVERRIDE_ResetValue (0x00000000UL)

/* FORCEON @Bit 0 : Force on */
  #define GPIOHSPADCTRL_OVERRIDE_FORCEON_Pos (0UL)
  #define GPIOHSPADCTRL_OVERRIDE_FORCEON_Msk (0x1UL << GPIOHSPADCTRL_OVERRIDE_FORCEON_Pos)

/* ATB0 @Bits 1..3 : ATB0 settings */
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_Pos (1UL)
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_Msk (0x7UL << GPIOHSPADCTRL_OVERRIDE_ATB0_Pos)
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_Min (0x5UL)
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_Max (0x7UL)
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_BiasTrim (0x7UL)
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_BiasSupply (0x6UL)
  #define GPIOHSPADCTRL_OVERRIDE_ATB0_BiasPTAT (0x5UL)

/* DUALDRIVE @Bit 4 : Drive pad from both high-speed pad and regular pad (when highspeed is enabled) */
  #define GPIOHSPADCTRL_OVERRIDE_DUALDRIVE_Pos (4UL)
  #define GPIOHSPADCTRL_OVERRIDE_DUALDRIVE_Msk (0x1UL << GPIOHSPADCTRL_OVERRIDE_DUALDRIVE_Pos) /*!< Bit mask of DUALDRIVE
                                                                            field.*/


/* GPIOHSPADCTRL_CTRL: HS pad control register */
  #define GPIOHSPADCTRL_CTRL_ResetValue (0x00000000UL)

/* RXDELAY @Bits 0..2 : RXDELAY setting */
  #define GPIOHSPADCTRL_CTRL_RXDELAY_Pos (0UL)
  #define GPIOHSPADCTRL_CTRL_RXDELAY_Msk (0x7UL << GPIOHSPADCTRL_CTRL_RXDELAY_Pos)

/* SCKEN @Bit 3 : Enable SCK */
  #define GPIOHSPADCTRL_CTRL_SCKEN_Pos (3UL)
  #define GPIOHSPADCTRL_CTRL_SCKEN_Msk (0x1UL << GPIOHSPADCTRL_CTRL_SCKEN_Pos)

/* SCKPHASE @Bit 4 : SCK phase */
  #define GPIOHSPADCTRL_CTRL_SCKPHASE_Pos (4UL)
  #define GPIOHSPADCTRL_CTRL_SCKPHASE_Msk (0x1UL << GPIOHSPADCTRL_CTRL_SCKPHASE_Pos)

/* CSNEN @Bit 5 : CSN enable */
  #define GPIOHSPADCTRL_CTRL_CSNEN_Pos (5UL)
  #define GPIOHSPADCTRL_CTRL_CSNEN_Msk (0x1UL << GPIOHSPADCTRL_CTRL_CSNEN_Pos)

/* DATAENABLE @Bits 6..9 : Enable re-clocking for data bit 0-3 through pad-sync module */
  #define GPIOHSPADCTRL_CTRL_DATAENABLE_Pos (6UL)
  #define GPIOHSPADCTRL_CTRL_DATAENABLE_Msk (0xFUL << GPIOHSPADCTRL_CTRL_DATAENABLE_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                       GPIOINTERNAL                                       ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* =================================================== Struct GPIOINTERNAL =================================================== */
/**
  * @brief GPIO Internal
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_GPIOINTERNAL_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          GPIOTE                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct GPIOTE_EVENTS_PORT ================================================ */
/**
  * @brief EVENTS_PORT [GPIOTE_EVENTS_PORT] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  NONSECURE;
  __IOM uint32_t  SECURE;
} NRF_GPIOTE_EVENTS_PORT_Type;
  #define GPIOTE_EVENTS_PORT_MaxCount (1UL)
  #define GPIOTE_EVENTS_PORT_MaxIndex (0UL)
  #define GPIOTE_EVENTS_PORT_MinIndex (0UL)

/* GPIOTE_EVENTS_PORT_NONSECURE: Non-secure port event from owner n */
  #define GPIOTE_EVENTS_PORT_NONSECURE_ResetValue (0x00000000UL)

/* NONSECURE @Bit 0 : Non-secure port event from owner n */
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Pos (0UL)
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Msk (0x1UL << GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Pos) /*!< Bit mask of
                                                                            NONSECURE field.*/
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Min (0x0UL)
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Max (0x1UL)
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_NotGenerated (0x0UL)
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Generated (0x1UL)


/* GPIOTE_EVENTS_PORT_SECURE: Secure port event from owner n */
  #define GPIOTE_EVENTS_PORT_SECURE_ResetValue (0x00000000UL)

/* SECURE @Bit 0 : Secure port event from owner n */
  #define GPIOTE_EVENTS_PORT_SECURE_SECURE_Pos (0UL)
  #define GPIOTE_EVENTS_PORT_SECURE_SECURE_Msk (0x1UL << GPIOTE_EVENTS_PORT_SECURE_SECURE_Pos)
  #define GPIOTE_EVENTS_PORT_SECURE_SECURE_Min (0x0UL)
  #define GPIOTE_EVENTS_PORT_SECURE_SECURE_Max (0x1UL)
  #define GPIOTE_EVENTS_PORT_SECURE_SECURE_NotGenerated (0x0UL)
  #define GPIOTE_EVENTS_PORT_SECURE_SECURE_Generated (0x1UL)



/* =============================================== Struct GPIOTE_PUBLISH_PORT ================================================ */
/**
  * @brief PUBLISH_PORT [GPIOTE_PUBLISH_PORT] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  NONSECURE;
  __IOM uint32_t  SECURE;
} NRF_GPIOTE_PUBLISH_PORT_Type;
  #define GPIOTE_PUBLISH_PORT_MaxCount (1UL)
  #define GPIOTE_PUBLISH_PORT_MaxIndex (0UL)
  #define GPIOTE_PUBLISH_PORT_MinIndex (0UL)

/* GPIOTE_PUBLISH_PORT_NONSECURE: Publish configuration for event PORT[n].NONSECURE */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event PORT[n].NONSECURE will publish to */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Pos (0UL)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Msk (0xFFUL << GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Min (0x00UL)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Pos (31UL)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Msk (0x1UL << GPIOTE_PUBLISH_PORT_NONSECURE_EN_Pos)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Min (0x0UL)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Max (0x1UL)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Disabled (0x0UL)
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Enabled (0x1UL)


/* GPIOTE_PUBLISH_PORT_SECURE: Publish configuration for event PORT[n].SECURE */
  #define GPIOTE_PUBLISH_PORT_SECURE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event PORT[n].SECURE will publish to */
  #define GPIOTE_PUBLISH_PORT_SECURE_CHIDX_Pos (0UL)
  #define GPIOTE_PUBLISH_PORT_SECURE_CHIDX_Msk (0xFFUL << GPIOTE_PUBLISH_PORT_SECURE_CHIDX_Pos)
  #define GPIOTE_PUBLISH_PORT_SECURE_CHIDX_Min (0x00UL)
  #define GPIOTE_PUBLISH_PORT_SECURE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_PUBLISH_PORT_SECURE_EN_Pos (31UL)
  #define GPIOTE_PUBLISH_PORT_SECURE_EN_Msk (0x1UL << GPIOTE_PUBLISH_PORT_SECURE_EN_Pos)
  #define GPIOTE_PUBLISH_PORT_SECURE_EN_Min (0x0UL)
  #define GPIOTE_PUBLISH_PORT_SECURE_EN_Max (0x1UL)
  #define GPIOTE_PUBLISH_PORT_SECURE_EN_Disabled (0x0UL)
  #define GPIOTE_PUBLISH_PORT_SECURE_EN_Enabled (0x1UL)


/* ====================================================== Struct GPIOTE ====================================================== */
/**
  * @brief GPIO Tasks and Events
  */
  typedef struct {
    __OM uint32_t TASKS_OUT[8];                      /*!< (@ 0x00000000) Task for writing to pin specified in CONFIG[n].PSEL.
                                                                         Action on pin is configured in CONFIG[n].POLARITY.*/
    __IM uint32_t RESERVED[4];
    __OM uint32_t TASKS_SET[8];                      /*!< (@ 0x00000030) Task for writing to pin specified in CONFIG[n].PSEL.
                                                                         Action on pin is to set it high.*/
    __IM uint32_t RESERVED1[4];
    __OM uint32_t TASKS_CLR[8];                      /*!< (@ 0x00000060) Task for writing to pin specified in CONFIG[n].PSEL.
                                                                         Action on pin is to set it low.*/
    __IOM uint32_t SUBSCRIBE_OUT[8];
    __IM uint32_t RESERVED2[4];
    __IOM uint32_t SUBSCRIBE_SET[8];
    __IM uint32_t RESERVED3[4];
    __IOM uint32_t SUBSCRIBE_CLR[8];
    __IOM uint32_t EVENTS_IN[8];
    __IM uint32_t RESERVED4[8];
    __IOM NRF_GPIOTE_EVENTS_PORT_Type EVENTS_PORT[1];
    __IM uint32_t RESERVED5[14];
    __IOM uint32_t PUBLISH_IN[8];
    __IM uint32_t RESERVED6[8];
    __IOM NRF_GPIOTE_PUBLISH_PORT_Type PUBLISH_PORT[1];
    __IM uint32_t RESERVED7[79];
    __IOM uint32_t INTENSET0;
    __IOM uint32_t INTENCLR0;
    __IM uint32_t RESERVED8[2];
    __IOM uint32_t INTENSET1;
    __IOM uint32_t INTENCLR1;
    __IM uint32_t RESERVED9[125];
    __IOM uint32_t CONFIG[8];                        /*!< (@ 0x00000510) Configuration for OUT[n], SET[n], and CLR[n] tasks and
                                                                         IN[n] event*/
  } NRF_GPIOTE_Type;

/* GPIOTE_TASKS_OUT: Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is configured in CONFIG[n].POLARITY. */
  #define GPIOTE_TASKS_OUT_MaxCount (8UL)
  #define GPIOTE_TASKS_OUT_MaxIndex (7UL)
  #define GPIOTE_TASKS_OUT_MinIndex (0UL)
  #define GPIOTE_TASKS_OUT_ResetValue (0x00000000UL)

/* TASKS_OUT @Bit 0 : Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is configured in CONFIG[n].POLARITY. */
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Pos (0UL)
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Msk (0x1UL << GPIOTE_TASKS_OUT_TASKS_OUT_Pos)
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Min (0x1UL)
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Max (0x1UL)
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Trigger (0x1UL)


/* GPIOTE_TASKS_SET: Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it high. */
  #define GPIOTE_TASKS_SET_MaxCount (8UL)
  #define GPIOTE_TASKS_SET_MaxIndex (7UL)
  #define GPIOTE_TASKS_SET_MinIndex (0UL)
  #define GPIOTE_TASKS_SET_ResetValue (0x00000000UL)

/* TASKS_SET @Bit 0 : Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it high. */
  #define GPIOTE_TASKS_SET_TASKS_SET_Pos (0UL)
  #define GPIOTE_TASKS_SET_TASKS_SET_Msk (0x1UL << GPIOTE_TASKS_SET_TASKS_SET_Pos)
  #define GPIOTE_TASKS_SET_TASKS_SET_Min (0x1UL)
  #define GPIOTE_TASKS_SET_TASKS_SET_Max (0x1UL)
  #define GPIOTE_TASKS_SET_TASKS_SET_Trigger (0x1UL)


/* GPIOTE_TASKS_CLR: Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it low. */
  #define GPIOTE_TASKS_CLR_MaxCount (8UL)
  #define GPIOTE_TASKS_CLR_MaxIndex (7UL)
  #define GPIOTE_TASKS_CLR_MinIndex (0UL)
  #define GPIOTE_TASKS_CLR_ResetValue (0x00000000UL)

/* TASKS_CLR @Bit 0 : Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it low. */
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Pos (0UL)
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Msk (0x1UL << GPIOTE_TASKS_CLR_TASKS_CLR_Pos)
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Min (0x1UL)
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Max (0x1UL)
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Trigger (0x1UL)


/* GPIOTE_SUBSCRIBE_OUT: Subscribe configuration for task OUT[n] */
  #define GPIOTE_SUBSCRIBE_OUT_MaxCount (8UL)
  #define GPIOTE_SUBSCRIBE_OUT_MaxIndex (7UL)
  #define GPIOTE_SUBSCRIBE_OUT_MinIndex (0UL)
  #define GPIOTE_SUBSCRIBE_OUT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task OUT[n] will subscribe to */
  #define GPIOTE_SUBSCRIBE_OUT_CHIDX_Pos (0UL)
  #define GPIOTE_SUBSCRIBE_OUT_CHIDX_Msk (0xFFUL << GPIOTE_SUBSCRIBE_OUT_CHIDX_Pos)
  #define GPIOTE_SUBSCRIBE_OUT_CHIDX_Min (0x00UL)
  #define GPIOTE_SUBSCRIBE_OUT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_SUBSCRIBE_OUT_EN_Pos (31UL)
  #define GPIOTE_SUBSCRIBE_OUT_EN_Msk (0x1UL << GPIOTE_SUBSCRIBE_OUT_EN_Pos)
  #define GPIOTE_SUBSCRIBE_OUT_EN_Min (0x0UL)
  #define GPIOTE_SUBSCRIBE_OUT_EN_Max (0x1UL)
  #define GPIOTE_SUBSCRIBE_OUT_EN_Disabled (0x0UL)
  #define GPIOTE_SUBSCRIBE_OUT_EN_Enabled (0x1UL)


/* GPIOTE_SUBSCRIBE_SET: Subscribe configuration for task SET[n] */
  #define GPIOTE_SUBSCRIBE_SET_MaxCount (8UL)
  #define GPIOTE_SUBSCRIBE_SET_MaxIndex (7UL)
  #define GPIOTE_SUBSCRIBE_SET_MinIndex (0UL)
  #define GPIOTE_SUBSCRIBE_SET_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SET[n] will subscribe to */
  #define GPIOTE_SUBSCRIBE_SET_CHIDX_Pos (0UL)
  #define GPIOTE_SUBSCRIBE_SET_CHIDX_Msk (0xFFUL << GPIOTE_SUBSCRIBE_SET_CHIDX_Pos)
  #define GPIOTE_SUBSCRIBE_SET_CHIDX_Min (0x00UL)
  #define GPIOTE_SUBSCRIBE_SET_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_SUBSCRIBE_SET_EN_Pos (31UL)
  #define GPIOTE_SUBSCRIBE_SET_EN_Msk (0x1UL << GPIOTE_SUBSCRIBE_SET_EN_Pos)
  #define GPIOTE_SUBSCRIBE_SET_EN_Min (0x0UL)
  #define GPIOTE_SUBSCRIBE_SET_EN_Max (0x1UL)
  #define GPIOTE_SUBSCRIBE_SET_EN_Disabled (0x0UL)
  #define GPIOTE_SUBSCRIBE_SET_EN_Enabled (0x1UL)


/* GPIOTE_SUBSCRIBE_CLR: Subscribe configuration for task CLR[n] */
  #define GPIOTE_SUBSCRIBE_CLR_MaxCount (8UL)
  #define GPIOTE_SUBSCRIBE_CLR_MaxIndex (7UL)
  #define GPIOTE_SUBSCRIBE_CLR_MinIndex (0UL)
  #define GPIOTE_SUBSCRIBE_CLR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CLR[n] will subscribe to */
  #define GPIOTE_SUBSCRIBE_CLR_CHIDX_Pos (0UL)
  #define GPIOTE_SUBSCRIBE_CLR_CHIDX_Msk (0xFFUL << GPIOTE_SUBSCRIBE_CLR_CHIDX_Pos)
  #define GPIOTE_SUBSCRIBE_CLR_CHIDX_Min (0x00UL)
  #define GPIOTE_SUBSCRIBE_CLR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_SUBSCRIBE_CLR_EN_Pos (31UL)
  #define GPIOTE_SUBSCRIBE_CLR_EN_Msk (0x1UL << GPIOTE_SUBSCRIBE_CLR_EN_Pos)
  #define GPIOTE_SUBSCRIBE_CLR_EN_Min (0x0UL)
  #define GPIOTE_SUBSCRIBE_CLR_EN_Max (0x1UL)
  #define GPIOTE_SUBSCRIBE_CLR_EN_Disabled (0x0UL)
  #define GPIOTE_SUBSCRIBE_CLR_EN_Enabled (0x1UL)


/* GPIOTE_EVENTS_IN: Event from pin specified in CONFIG[n].PSEL */
  #define GPIOTE_EVENTS_IN_MaxCount (8UL)
  #define GPIOTE_EVENTS_IN_MaxIndex (7UL)
  #define GPIOTE_EVENTS_IN_MinIndex (0UL)
  #define GPIOTE_EVENTS_IN_ResetValue (0x00000000UL)

/* EVENTS_IN @Bit 0 : Event from pin specified in CONFIG[n].PSEL */
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Pos (0UL)
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Msk (0x1UL << GPIOTE_EVENTS_IN_EVENTS_IN_Pos)
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Min (0x0UL)
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Max (0x1UL)
  #define GPIOTE_EVENTS_IN_EVENTS_IN_NotGenerated (0x0UL)
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Generated (0x1UL)


/* GPIOTE_PUBLISH_IN: Publish configuration for event IN[n] */
  #define GPIOTE_PUBLISH_IN_MaxCount (8UL)
  #define GPIOTE_PUBLISH_IN_MaxIndex (7UL)
  #define GPIOTE_PUBLISH_IN_MinIndex (0UL)
  #define GPIOTE_PUBLISH_IN_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event IN[n] will publish to */
  #define GPIOTE_PUBLISH_IN_CHIDX_Pos (0UL)
  #define GPIOTE_PUBLISH_IN_CHIDX_Msk (0xFFUL << GPIOTE_PUBLISH_IN_CHIDX_Pos)
  #define GPIOTE_PUBLISH_IN_CHIDX_Min (0x00UL)
  #define GPIOTE_PUBLISH_IN_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_PUBLISH_IN_EN_Pos (31UL)
  #define GPIOTE_PUBLISH_IN_EN_Msk (0x1UL << GPIOTE_PUBLISH_IN_EN_Pos)
  #define GPIOTE_PUBLISH_IN_EN_Min (0x0UL)
  #define GPIOTE_PUBLISH_IN_EN_Max (0x1UL)
  #define GPIOTE_PUBLISH_IN_EN_Disabled (0x0UL)
  #define GPIOTE_PUBLISH_IN_EN_Enabled (0x1UL)


/* GPIOTE_INTENSET0: Enable interrupt */
  #define GPIOTE_INTENSET0_ResetValue (0x00000000UL)

/* IN0 @Bit 0 : Write '1' to enable interrupt for event IN[0] */
  #define GPIOTE_INTENSET0_IN0_Pos (0UL)
  #define GPIOTE_INTENSET0_IN0_Msk (0x1UL << GPIOTE_INTENSET0_IN0_Pos)
  #define GPIOTE_INTENSET0_IN0_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN0_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN0_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN0_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN0_Enabled (0x1UL)

/* IN1 @Bit 1 : Write '1' to enable interrupt for event IN[1] */
  #define GPIOTE_INTENSET0_IN1_Pos (1UL)
  #define GPIOTE_INTENSET0_IN1_Msk (0x1UL << GPIOTE_INTENSET0_IN1_Pos)
  #define GPIOTE_INTENSET0_IN1_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN1_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN1_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN1_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN1_Enabled (0x1UL)

/* IN2 @Bit 2 : Write '1' to enable interrupt for event IN[2] */
  #define GPIOTE_INTENSET0_IN2_Pos (2UL)
  #define GPIOTE_INTENSET0_IN2_Msk (0x1UL << GPIOTE_INTENSET0_IN2_Pos)
  #define GPIOTE_INTENSET0_IN2_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN2_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN2_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN2_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN2_Enabled (0x1UL)

/* IN3 @Bit 3 : Write '1' to enable interrupt for event IN[3] */
  #define GPIOTE_INTENSET0_IN3_Pos (3UL)
  #define GPIOTE_INTENSET0_IN3_Msk (0x1UL << GPIOTE_INTENSET0_IN3_Pos)
  #define GPIOTE_INTENSET0_IN3_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN3_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN3_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN3_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN3_Enabled (0x1UL)

/* IN4 @Bit 4 : Write '1' to enable interrupt for event IN[4] */
  #define GPIOTE_INTENSET0_IN4_Pos (4UL)
  #define GPIOTE_INTENSET0_IN4_Msk (0x1UL << GPIOTE_INTENSET0_IN4_Pos)
  #define GPIOTE_INTENSET0_IN4_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN4_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN4_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN4_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN4_Enabled (0x1UL)

/* IN5 @Bit 5 : Write '1' to enable interrupt for event IN[5] */
  #define GPIOTE_INTENSET0_IN5_Pos (5UL)
  #define GPIOTE_INTENSET0_IN5_Msk (0x1UL << GPIOTE_INTENSET0_IN5_Pos)
  #define GPIOTE_INTENSET0_IN5_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN5_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN5_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN5_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN5_Enabled (0x1UL)

/* IN6 @Bit 6 : Write '1' to enable interrupt for event IN[6] */
  #define GPIOTE_INTENSET0_IN6_Pos (6UL)
  #define GPIOTE_INTENSET0_IN6_Msk (0x1UL << GPIOTE_INTENSET0_IN6_Pos)
  #define GPIOTE_INTENSET0_IN6_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN6_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN6_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN6_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN6_Enabled (0x1UL)

/* IN7 @Bit 7 : Write '1' to enable interrupt for event IN[7] */
  #define GPIOTE_INTENSET0_IN7_Pos (7UL)
  #define GPIOTE_INTENSET0_IN7_Msk (0x1UL << GPIOTE_INTENSET0_IN7_Pos)
  #define GPIOTE_INTENSET0_IN7_Min (0x0UL)
  #define GPIOTE_INTENSET0_IN7_Max (0x1UL)
  #define GPIOTE_INTENSET0_IN7_Set (0x1UL)
  #define GPIOTE_INTENSET0_IN7_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_IN7_Enabled (0x1UL)

/* PORT0NONSECURE @Bit 16 : Write '1' to enable interrupt for event PORT0NONSECURE */
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Pos (16UL)
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Msk (0x1UL << GPIOTE_INTENSET0_PORT0NONSECURE_Pos) /*!< Bit mask of PORT0NONSECURE
                                                                            field.*/
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Min (0x0UL)
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Max (0x1UL)
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Set (0x1UL)
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Enabled (0x1UL)

/* PORT0SECURE @Bit 17 : Write '1' to enable interrupt for event PORT0SECURE */
  #define GPIOTE_INTENSET0_PORT0SECURE_Pos (17UL)
  #define GPIOTE_INTENSET0_PORT0SECURE_Msk (0x1UL << GPIOTE_INTENSET0_PORT0SECURE_Pos)
  #define GPIOTE_INTENSET0_PORT0SECURE_Min (0x0UL)
  #define GPIOTE_INTENSET0_PORT0SECURE_Max (0x1UL)
  #define GPIOTE_INTENSET0_PORT0SECURE_Set (0x1UL)
  #define GPIOTE_INTENSET0_PORT0SECURE_Disabled (0x0UL)
  #define GPIOTE_INTENSET0_PORT0SECURE_Enabled (0x1UL)


/* GPIOTE_INTENCLR0: Disable interrupt */
  #define GPIOTE_INTENCLR0_ResetValue (0x00000000UL)

/* IN0 @Bit 0 : Write '1' to disable interrupt for event IN[0] */
  #define GPIOTE_INTENCLR0_IN0_Pos (0UL)
  #define GPIOTE_INTENCLR0_IN0_Msk (0x1UL << GPIOTE_INTENCLR0_IN0_Pos)
  #define GPIOTE_INTENCLR0_IN0_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN0_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN0_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN0_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN0_Enabled (0x1UL)

/* IN1 @Bit 1 : Write '1' to disable interrupt for event IN[1] */
  #define GPIOTE_INTENCLR0_IN1_Pos (1UL)
  #define GPIOTE_INTENCLR0_IN1_Msk (0x1UL << GPIOTE_INTENCLR0_IN1_Pos)
  #define GPIOTE_INTENCLR0_IN1_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN1_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN1_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN1_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN1_Enabled (0x1UL)

/* IN2 @Bit 2 : Write '1' to disable interrupt for event IN[2] */
  #define GPIOTE_INTENCLR0_IN2_Pos (2UL)
  #define GPIOTE_INTENCLR0_IN2_Msk (0x1UL << GPIOTE_INTENCLR0_IN2_Pos)
  #define GPIOTE_INTENCLR0_IN2_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN2_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN2_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN2_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN2_Enabled (0x1UL)

/* IN3 @Bit 3 : Write '1' to disable interrupt for event IN[3] */
  #define GPIOTE_INTENCLR0_IN3_Pos (3UL)
  #define GPIOTE_INTENCLR0_IN3_Msk (0x1UL << GPIOTE_INTENCLR0_IN3_Pos)
  #define GPIOTE_INTENCLR0_IN3_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN3_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN3_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN3_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN3_Enabled (0x1UL)

/* IN4 @Bit 4 : Write '1' to disable interrupt for event IN[4] */
  #define GPIOTE_INTENCLR0_IN4_Pos (4UL)
  #define GPIOTE_INTENCLR0_IN4_Msk (0x1UL << GPIOTE_INTENCLR0_IN4_Pos)
  #define GPIOTE_INTENCLR0_IN4_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN4_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN4_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN4_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN4_Enabled (0x1UL)

/* IN5 @Bit 5 : Write '1' to disable interrupt for event IN[5] */
  #define GPIOTE_INTENCLR0_IN5_Pos (5UL)
  #define GPIOTE_INTENCLR0_IN5_Msk (0x1UL << GPIOTE_INTENCLR0_IN5_Pos)
  #define GPIOTE_INTENCLR0_IN5_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN5_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN5_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN5_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN5_Enabled (0x1UL)

/* IN6 @Bit 6 : Write '1' to disable interrupt for event IN[6] */
  #define GPIOTE_INTENCLR0_IN6_Pos (6UL)
  #define GPIOTE_INTENCLR0_IN6_Msk (0x1UL << GPIOTE_INTENCLR0_IN6_Pos)
  #define GPIOTE_INTENCLR0_IN6_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN6_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN6_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN6_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN6_Enabled (0x1UL)

/* IN7 @Bit 7 : Write '1' to disable interrupt for event IN[7] */
  #define GPIOTE_INTENCLR0_IN7_Pos (7UL)
  #define GPIOTE_INTENCLR0_IN7_Msk (0x1UL << GPIOTE_INTENCLR0_IN7_Pos)
  #define GPIOTE_INTENCLR0_IN7_Min (0x0UL)
  #define GPIOTE_INTENCLR0_IN7_Max (0x1UL)
  #define GPIOTE_INTENCLR0_IN7_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_IN7_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_IN7_Enabled (0x1UL)

/* PORT0NONSECURE @Bit 16 : Write '1' to disable interrupt for event PORT0NONSECURE */
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Pos (16UL)
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Msk (0x1UL << GPIOTE_INTENCLR0_PORT0NONSECURE_Pos) /*!< Bit mask of PORT0NONSECURE
                                                                            field.*/
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Min (0x0UL)
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Max (0x1UL)
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Enabled (0x1UL)

/* PORT0SECURE @Bit 17 : Write '1' to disable interrupt for event PORT0SECURE */
  #define GPIOTE_INTENCLR0_PORT0SECURE_Pos (17UL)
  #define GPIOTE_INTENCLR0_PORT0SECURE_Msk (0x1UL << GPIOTE_INTENCLR0_PORT0SECURE_Pos)
  #define GPIOTE_INTENCLR0_PORT0SECURE_Min (0x0UL)
  #define GPIOTE_INTENCLR0_PORT0SECURE_Max (0x1UL)
  #define GPIOTE_INTENCLR0_PORT0SECURE_Clear (0x1UL)
  #define GPIOTE_INTENCLR0_PORT0SECURE_Disabled (0x0UL)
  #define GPIOTE_INTENCLR0_PORT0SECURE_Enabled (0x1UL)


/* GPIOTE_INTENSET1: Enable interrupt */
  #define GPIOTE_INTENSET1_ResetValue (0x00000000UL)

/* IN0 @Bit 0 : Write '1' to enable interrupt for event IN[0] */
  #define GPIOTE_INTENSET1_IN0_Pos (0UL)
  #define GPIOTE_INTENSET1_IN0_Msk (0x1UL << GPIOTE_INTENSET1_IN0_Pos)
  #define GPIOTE_INTENSET1_IN0_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN0_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN0_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN0_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN0_Enabled (0x1UL)

/* IN1 @Bit 1 : Write '1' to enable interrupt for event IN[1] */
  #define GPIOTE_INTENSET1_IN1_Pos (1UL)
  #define GPIOTE_INTENSET1_IN1_Msk (0x1UL << GPIOTE_INTENSET1_IN1_Pos)
  #define GPIOTE_INTENSET1_IN1_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN1_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN1_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN1_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN1_Enabled (0x1UL)

/* IN2 @Bit 2 : Write '1' to enable interrupt for event IN[2] */
  #define GPIOTE_INTENSET1_IN2_Pos (2UL)
  #define GPIOTE_INTENSET1_IN2_Msk (0x1UL << GPIOTE_INTENSET1_IN2_Pos)
  #define GPIOTE_INTENSET1_IN2_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN2_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN2_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN2_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN2_Enabled (0x1UL)

/* IN3 @Bit 3 : Write '1' to enable interrupt for event IN[3] */
  #define GPIOTE_INTENSET1_IN3_Pos (3UL)
  #define GPIOTE_INTENSET1_IN3_Msk (0x1UL << GPIOTE_INTENSET1_IN3_Pos)
  #define GPIOTE_INTENSET1_IN3_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN3_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN3_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN3_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN3_Enabled (0x1UL)

/* IN4 @Bit 4 : Write '1' to enable interrupt for event IN[4] */
  #define GPIOTE_INTENSET1_IN4_Pos (4UL)
  #define GPIOTE_INTENSET1_IN4_Msk (0x1UL << GPIOTE_INTENSET1_IN4_Pos)
  #define GPIOTE_INTENSET1_IN4_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN4_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN4_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN4_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN4_Enabled (0x1UL)

/* IN5 @Bit 5 : Write '1' to enable interrupt for event IN[5] */
  #define GPIOTE_INTENSET1_IN5_Pos (5UL)
  #define GPIOTE_INTENSET1_IN5_Msk (0x1UL << GPIOTE_INTENSET1_IN5_Pos)
  #define GPIOTE_INTENSET1_IN5_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN5_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN5_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN5_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN5_Enabled (0x1UL)

/* IN6 @Bit 6 : Write '1' to enable interrupt for event IN[6] */
  #define GPIOTE_INTENSET1_IN6_Pos (6UL)
  #define GPIOTE_INTENSET1_IN6_Msk (0x1UL << GPIOTE_INTENSET1_IN6_Pos)
  #define GPIOTE_INTENSET1_IN6_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN6_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN6_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN6_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN6_Enabled (0x1UL)

/* IN7 @Bit 7 : Write '1' to enable interrupt for event IN[7] */
  #define GPIOTE_INTENSET1_IN7_Pos (7UL)
  #define GPIOTE_INTENSET1_IN7_Msk (0x1UL << GPIOTE_INTENSET1_IN7_Pos)
  #define GPIOTE_INTENSET1_IN7_Min (0x0UL)
  #define GPIOTE_INTENSET1_IN7_Max (0x1UL)
  #define GPIOTE_INTENSET1_IN7_Set (0x1UL)
  #define GPIOTE_INTENSET1_IN7_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_IN7_Enabled (0x1UL)

/* PORT0NONSECURE @Bit 16 : Write '1' to enable interrupt for event PORT0NONSECURE */
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Pos (16UL)
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Msk (0x1UL << GPIOTE_INTENSET1_PORT0NONSECURE_Pos) /*!< Bit mask of PORT0NONSECURE
                                                                            field.*/
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Min (0x0UL)
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Max (0x1UL)
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Set (0x1UL)
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Enabled (0x1UL)

/* PORT0SECURE @Bit 17 : Write '1' to enable interrupt for event PORT0SECURE */
  #define GPIOTE_INTENSET1_PORT0SECURE_Pos (17UL)
  #define GPIOTE_INTENSET1_PORT0SECURE_Msk (0x1UL << GPIOTE_INTENSET1_PORT0SECURE_Pos)
  #define GPIOTE_INTENSET1_PORT0SECURE_Min (0x0UL)
  #define GPIOTE_INTENSET1_PORT0SECURE_Max (0x1UL)
  #define GPIOTE_INTENSET1_PORT0SECURE_Set (0x1UL)
  #define GPIOTE_INTENSET1_PORT0SECURE_Disabled (0x0UL)
  #define GPIOTE_INTENSET1_PORT0SECURE_Enabled (0x1UL)


/* GPIOTE_INTENCLR1: Disable interrupt */
  #define GPIOTE_INTENCLR1_ResetValue (0x00000000UL)

/* IN0 @Bit 0 : Write '1' to disable interrupt for event IN[0] */
  #define GPIOTE_INTENCLR1_IN0_Pos (0UL)
  #define GPIOTE_INTENCLR1_IN0_Msk (0x1UL << GPIOTE_INTENCLR1_IN0_Pos)
  #define GPIOTE_INTENCLR1_IN0_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN0_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN0_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN0_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN0_Enabled (0x1UL)

/* IN1 @Bit 1 : Write '1' to disable interrupt for event IN[1] */
  #define GPIOTE_INTENCLR1_IN1_Pos (1UL)
  #define GPIOTE_INTENCLR1_IN1_Msk (0x1UL << GPIOTE_INTENCLR1_IN1_Pos)
  #define GPIOTE_INTENCLR1_IN1_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN1_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN1_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN1_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN1_Enabled (0x1UL)

/* IN2 @Bit 2 : Write '1' to disable interrupt for event IN[2] */
  #define GPIOTE_INTENCLR1_IN2_Pos (2UL)
  #define GPIOTE_INTENCLR1_IN2_Msk (0x1UL << GPIOTE_INTENCLR1_IN2_Pos)
  #define GPIOTE_INTENCLR1_IN2_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN2_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN2_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN2_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN2_Enabled (0x1UL)

/* IN3 @Bit 3 : Write '1' to disable interrupt for event IN[3] */
  #define GPIOTE_INTENCLR1_IN3_Pos (3UL)
  #define GPIOTE_INTENCLR1_IN3_Msk (0x1UL << GPIOTE_INTENCLR1_IN3_Pos)
  #define GPIOTE_INTENCLR1_IN3_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN3_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN3_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN3_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN3_Enabled (0x1UL)

/* IN4 @Bit 4 : Write '1' to disable interrupt for event IN[4] */
  #define GPIOTE_INTENCLR1_IN4_Pos (4UL)
  #define GPIOTE_INTENCLR1_IN4_Msk (0x1UL << GPIOTE_INTENCLR1_IN4_Pos)
  #define GPIOTE_INTENCLR1_IN4_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN4_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN4_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN4_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN4_Enabled (0x1UL)

/* IN5 @Bit 5 : Write '1' to disable interrupt for event IN[5] */
  #define GPIOTE_INTENCLR1_IN5_Pos (5UL)
  #define GPIOTE_INTENCLR1_IN5_Msk (0x1UL << GPIOTE_INTENCLR1_IN5_Pos)
  #define GPIOTE_INTENCLR1_IN5_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN5_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN5_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN5_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN5_Enabled (0x1UL)

/* IN6 @Bit 6 : Write '1' to disable interrupt for event IN[6] */
  #define GPIOTE_INTENCLR1_IN6_Pos (6UL)
  #define GPIOTE_INTENCLR1_IN6_Msk (0x1UL << GPIOTE_INTENCLR1_IN6_Pos)
  #define GPIOTE_INTENCLR1_IN6_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN6_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN6_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN6_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN6_Enabled (0x1UL)

/* IN7 @Bit 7 : Write '1' to disable interrupt for event IN[7] */
  #define GPIOTE_INTENCLR1_IN7_Pos (7UL)
  #define GPIOTE_INTENCLR1_IN7_Msk (0x1UL << GPIOTE_INTENCLR1_IN7_Pos)
  #define GPIOTE_INTENCLR1_IN7_Min (0x0UL)
  #define GPIOTE_INTENCLR1_IN7_Max (0x1UL)
  #define GPIOTE_INTENCLR1_IN7_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_IN7_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_IN7_Enabled (0x1UL)

/* PORT0NONSECURE @Bit 16 : Write '1' to disable interrupt for event PORT0NONSECURE */
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Pos (16UL)
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Msk (0x1UL << GPIOTE_INTENCLR1_PORT0NONSECURE_Pos) /*!< Bit mask of PORT0NONSECURE
                                                                            field.*/
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Min (0x0UL)
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Max (0x1UL)
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Enabled (0x1UL)

/* PORT0SECURE @Bit 17 : Write '1' to disable interrupt for event PORT0SECURE */
  #define GPIOTE_INTENCLR1_PORT0SECURE_Pos (17UL)
  #define GPIOTE_INTENCLR1_PORT0SECURE_Msk (0x1UL << GPIOTE_INTENCLR1_PORT0SECURE_Pos)
  #define GPIOTE_INTENCLR1_PORT0SECURE_Min (0x0UL)
  #define GPIOTE_INTENCLR1_PORT0SECURE_Max (0x1UL)
  #define GPIOTE_INTENCLR1_PORT0SECURE_Clear (0x1UL)
  #define GPIOTE_INTENCLR1_PORT0SECURE_Disabled (0x0UL)
  #define GPIOTE_INTENCLR1_PORT0SECURE_Enabled (0x1UL)


/* GPIOTE_CONFIG: Configuration for OUT[n], SET[n], and CLR[n] tasks and IN[n] event */
  #define GPIOTE_CONFIG_MaxCount (8UL)
  #define GPIOTE_CONFIG_MaxIndex (7UL)
  #define GPIOTE_CONFIG_MinIndex (0UL)
  #define GPIOTE_CONFIG_ResetValue (0x00000000UL)

/* MODE @Bits 0..1 : Mode */
  #define GPIOTE_CONFIG_MODE_Pos (0UL)
  #define GPIOTE_CONFIG_MODE_Msk (0x3UL << GPIOTE_CONFIG_MODE_Pos)
  #define GPIOTE_CONFIG_MODE_Min (0x0UL)
  #define GPIOTE_CONFIG_MODE_Max (0x3UL)
  #define GPIOTE_CONFIG_MODE_Disabled (0x0UL)        /*!< Disabled. Pin specified by PSEL will not be acquired by the GPIOTE
                                                          module.*/
  #define GPIOTE_CONFIG_MODE_Event (0x1UL)
  #define GPIOTE_CONFIG_MODE_Task (0x3UL)

/* PSEL @Bits 4..8 : GPIO number associated with SET[n], CLR[n], and OUT[n] tasks and IN[n] event */
  #define GPIOTE_CONFIG_PSEL_Pos (4UL)
  #define GPIOTE_CONFIG_PSEL_Msk (0x1FUL << GPIOTE_CONFIG_PSEL_Pos)
  #define GPIOTE_CONFIG_PSEL_Min (0x00UL)
  #define GPIOTE_CONFIG_PSEL_Max (0x1FUL)

/* PORT @Bits 9..12 : Port number */
  #define GPIOTE_CONFIG_PORT_Pos (9UL)
  #define GPIOTE_CONFIG_PORT_Msk (0xFUL << GPIOTE_CONFIG_PORT_Pos)
  #define GPIOTE_CONFIG_PORT_Min (0x0UL)
  #define GPIOTE_CONFIG_PORT_Max (0xFUL)

/* POLARITY @Bits 16..17 : When In task mode: Operation to be performed on output when OUT[n] task is triggered. When In event
                           mode: Operation on input that shall trigger IN[n] event. */

  #define GPIOTE_CONFIG_POLARITY_Pos (16UL)
  #define GPIOTE_CONFIG_POLARITY_Msk (0x3UL << GPIOTE_CONFIG_POLARITY_Pos)
  #define GPIOTE_CONFIG_POLARITY_Min (0x0UL)
  #define GPIOTE_CONFIG_POLARITY_Max (0x3UL)
  #define GPIOTE_CONFIG_POLARITY_None (0x0UL)        /*!< Task mode: No effect on pin from OUT[n] task. Event mode: no IN[n]
                                                          event generated on pin activity.*/
  #define GPIOTE_CONFIG_POLARITY_LoToHi (0x1UL)      /*!< Task mode: Set pin from OUT[n] task. Event mode: Generate IN[n] event
                                                          when rising edge on pin.*/
  #define GPIOTE_CONFIG_POLARITY_HiToLo (0x2UL)      /*!< Task mode: Clear pin from OUT[n] task. Event mode: Generate IN[n]
                                                          event when falling edge on pin.*/
  #define GPIOTE_CONFIG_POLARITY_Toggle (0x3UL)      /*!< Task mode: Toggle pin from OUT[n]. Event mode: Generate IN[n] when any
                                                          change on pin.*/

/* OUTINIT @Bit 20 : When in task mode: Initial value of the output when the GPIOTE channel is configured. When in event mode:
                     No effect. */

  #define GPIOTE_CONFIG_OUTINIT_Pos (20UL)
  #define GPIOTE_CONFIG_OUTINIT_Msk (0x1UL << GPIOTE_CONFIG_OUTINIT_Pos)
  #define GPIOTE_CONFIG_OUTINIT_Min (0x0UL)
  #define GPIOTE_CONFIG_OUTINIT_Max (0x1UL)
  #define GPIOTE_CONFIG_OUTINIT_Low (0x0UL)
  #define GPIOTE_CONFIG_OUTINIT_High (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           GRTC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ===================================================== Struct GRTC_CC ====================================================== */
/**
  * @brief CC [GRTC_CC] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CCL;
  __IOM uint32_t  CCH;
  __IOM uint32_t  CCADD;
  __IOM uint32_t  CCEN;
} NRF_GRTC_CC_Type;
  #define GRTC_CC_MaxCount (16UL)
  #define GRTC_CC_MaxIndex (15UL)
  #define GRTC_CC_MinIndex (0UL)

/* GRTC_CC_CCL: The lower 32-bits of Capture/Compare register CC[n] */
  #define GRTC_CC_CCL_ResetValue (0x00000000UL)

/* CCL @Bits 0..31 : Capture/Compare low value in 1 us */
  #define GRTC_CC_CCL_CCL_Pos (0UL)
  #define GRTC_CC_CCL_CCL_Msk (0xFFFFFFFFUL << GRTC_CC_CCL_CCL_Pos)


/* GRTC_CC_CCH: The higher 32-bits of Capture/Compare register CC[n] */
  #define GRTC_CC_CCH_ResetValue (0x00000000UL)

/* CCH @Bits 0..19 : Capture/Compare high value in 1 us */
  #define GRTC_CC_CCH_CCH_Pos (0UL)
  #define GRTC_CC_CCH_CCH_Msk (0xFFFFFUL << GRTC_CC_CCH_CCH_Pos)


/* GRTC_CC_CCADD: Count to add to CC[n] when this register is written. */
  #define GRTC_CC_CCADD_ResetValue (0x00000000UL)

/* VALUE @Bits 0..30 : Count to add to CC[n] */
  #define GRTC_CC_CCADD_VALUE_Pos (0UL)
  #define GRTC_CC_CCADD_VALUE_Msk (0x7FFFFFFFUL << GRTC_CC_CCADD_VALUE_Pos)

/* REFERENCE @Bit 31 : Configure the Capture/Compare register */
  #define GRTC_CC_CCADD_REFERENCE_Pos (31UL)
  #define GRTC_CC_CCADD_REFERENCE_Msk (0x1UL << GRTC_CC_CCADD_REFERENCE_Pos)
  #define GRTC_CC_CCADD_REFERENCE_Min (0x0UL)
  #define GRTC_CC_CCADD_REFERENCE_Max (0x1UL)
  #define GRTC_CC_CCADD_REFERENCE_SYSCOUNTER (0x0UL)
  #define GRTC_CC_CCADD_REFERENCE_CC (0x1UL)


/* GRTC_CC_CCEN: Configure Capture/Compare register CC[n] */
  #define GRTC_CC_CCEN_ResetValue (0x00000000UL)

/* ACTIVE @Bit 0 : Configure the Capture/Compare register */
  #define GRTC_CC_CCEN_ACTIVE_Pos (0UL)
  #define GRTC_CC_CCEN_ACTIVE_Msk (0x1UL << GRTC_CC_CCEN_ACTIVE_Pos)
  #define GRTC_CC_CCEN_ACTIVE_Min (0x0UL)
  #define GRTC_CC_CCEN_ACTIVE_Max (0x1UL)
  #define GRTC_CC_CCEN_ACTIVE_Disable (0x0UL)
  #define GRTC_CC_CCEN_ACTIVE_Enable (0x1UL)

/* PASTCC @Bit 1 : Status of event EVENTS_COMPARE[n] caused by the configured CC value is in past */
  #define GRTC_CC_CCEN_PASTCC_Pos (1UL)
  #define GRTC_CC_CCEN_PASTCC_Msk (0x1UL << GRTC_CC_CCEN_PASTCC_Pos)
  #define GRTC_CC_CCEN_PASTCC_Min (0x0UL)
  #define GRTC_CC_CCEN_PASTCC_Max (0x1UL)
  #define GRTC_CC_CCEN_PASTCC_Inactive (0x0UL)
  #define GRTC_CC_CCEN_PASTCC_Active (0x1UL)



/* ================================================= Struct GRTC_SYSCOUNTER ================================================== */
/**
  * @brief SYSCOUNTER [GRTC_SYSCOUNTER] (unspecified)
  */
typedef struct {
  __IM  uint32_t  SYSCOUNTERL;
  __IM  uint32_t  SYSCOUNTERH;
  __IOM uint32_t  ACTIVE;                            /*!< (@ 0x00000008) Request to keep the SYSCOUNTER in the active state and
                                                                         prevent going to sleep for index [n]*/
  __IM  uint32_t  RESERVED;
} NRF_GRTC_SYSCOUNTER_Type;
  #define GRTC_SYSCOUNTER_MaxCount (6UL)
  #define GRTC_SYSCOUNTER_MaxIndex (5UL)
  #define GRTC_SYSCOUNTER_MinIndex (0UL)

/* GRTC_SYSCOUNTER_SYSCOUNTERL: The lower 32-bits of the SYSCOUNTER for index [n] */
  #define GRTC_SYSCOUNTER_SYSCOUNTERL_ResetValue (0x00000000UL)

/* VALUE @Bits 0..31 : The lower 32-bits of the SYSCOUNTER value. */
  #define GRTC_SYSCOUNTER_SYSCOUNTERL_VALUE_Pos (0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERL_VALUE_Msk (0xFFFFFFFFUL << GRTC_SYSCOUNTER_SYSCOUNTERL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/


/* GRTC_SYSCOUNTER_SYSCOUNTERH: The higher 20-bits of the SYSCOUNTER for index [n] */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_ResetValue (0x60000000UL)

/* VALUE @Bits 0..19 : The higher 20-bits of the SYSCOUNTER value. */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_VALUE_Pos (0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_VALUE_Msk (0xFFFFFUL << GRTC_SYSCOUNTER_SYSCOUNTERH_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/

/* LOADED @Bit 29 : SYSCOUNTER loaded status */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Pos (29UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Msk (0x1UL << GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Pos) /*!< Bit mask of LOADED
                                                                            field.*/
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Min (0x0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Max (0x1UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_NotLoaded (0x0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Loaded (0x1UL)

/* BUSY @Bit 30 : SYSCOUNTER busy status */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Pos (30UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Msk (0x1UL << GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Pos)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Min (0x0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Max (0x1UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Ready (0x0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Busy (0x1UL) /*!< SYSCOUNTER is busy, so not ready for read (value returned in the
                                                             VALUE field of this register is not valid)*/

/* OVERFLOW @Bit 31 : The SYSCOUNTERL overflow indication after reading it. */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Pos (31UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Msk (0x1UL << GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Pos) /*!< Bit mask of OVERFLOW
                                                                            field.*/
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Min (0x0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Max (0x1UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_NoOverflow (0x0UL)
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Overflow (0x1UL)


/* GRTC_SYSCOUNTER_ACTIVE: Request to keep the SYSCOUNTER in the active state and prevent going to sleep for index [n] */
  #define GRTC_SYSCOUNTER_ACTIVE_ResetValue (0x00000000UL)

/* ACTIVE @Bit 0 : Keep SYSCOUNTER in active state */
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Pos (0UL)
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Msk (0x1UL << GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Pos)
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Min (0x0UL)
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Max (0x1UL)
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_NotActive (0x0UL)
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Active (0x1UL)


/* ======================================================= Struct GRTC ======================================================= */
/**
  * @brief Global Real-time counter
  */
  typedef struct {
    __OM uint32_t TASKS_CAPTURE[16];
    __IM uint32_t RESERVED[8];
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_CLEAR;
    __OM uint32_t TASKS_PWMSTART;
    __OM uint32_t TASKS_PWMSTOP;
    __IM uint32_t RESERVED1[3];
    __IOM uint32_t SUBSCRIBE_CAPTURE[16];
    __IM uint32_t RESERVED2[16];
    __IOM uint32_t EVENTS_COMPARE[16];
    __IM uint32_t RESERVED3[9];
    __IOM uint32_t EVENTS_RTCOMPARESYNC;             /*!< (@ 0x00000164) The GRTC low frequency timer is synchronized with the
                                                                         SYSCOUNTER*/
    __IM uint32_t RESERVED4;
    __IOM uint32_t EVENTS_PWMPERIODEND;
    __IM uint32_t RESERVED5[4];
    __IOM uint32_t PUBLISH_COMPARE[16];
    __IM uint32_t RESERVED6[16];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED7[63];
    __IOM uint32_t INTEN0;
    __IOM uint32_t INTENSET0;
    __IOM uint32_t INTENCLR0;
    __IM uint32_t INTPEND0;
    __IOM uint32_t INTEN1;
    __IOM uint32_t INTENSET1;
    __IOM uint32_t INTENCLR1;
    __IM uint32_t INTPEND1;
    __IOM uint32_t INTEN2;
    __IOM uint32_t INTENSET2;
    __IOM uint32_t INTENCLR2;
    __IM uint32_t INTPEND2;
    __IOM uint32_t INTEN3;
    __IOM uint32_t INTENSET3;
    __IOM uint32_t INTENCLR3;
    __IM uint32_t INTPEND3;
    __IOM uint32_t INTEN4;
    __IOM uint32_t INTENSET4;
    __IOM uint32_t INTENCLR4;
    __IM uint32_t INTPEND4;
    __IOM uint32_t INTEN5;
    __IOM uint32_t INTENSET5;
    __IOM uint32_t INTENCLR5;
    __IM uint32_t INTPEND5;
    __IM uint32_t RESERVED8[40];
    __IOM uint32_t EVTEN;
    __IOM uint32_t EVTENSET;
    __IOM uint32_t EVTENCLR;
    __IM uint32_t RESERVED9[65];
    __IOM uint32_t MODE;
    __IM uint32_t RESERVED10[3];
    __IOM NRF_GRTC_CC_Type CC[16];
    __IM uint32_t RESERVED11[33];
    __IOM uint32_t TIMEOUT;                          /*!< (@ 0x000006A4) Timeout after all CPUs gone into sleep state to stop
                                                                         the SYSCOUNTER*/
    __IOM uint32_t INTERVAL;                         /*!< (@ 0x000006A8) Count to add to CC[0] when the event EVENTS_COMPARE[0]
                                                                         triggers.*/
    __IOM uint32_t WAKETIME;
    __IM uint32_t RESERVED12[24];
    __IOM uint32_t PWMCONFIG;
    __IOM uint32_t CLKOUT;
    __IOM uint32_t CLKCFG;
    __IM uint32_t RESERVED13;
    __IOM NRF_GRTC_SYSCOUNTER_Type SYSCOUNTER[6];
  } NRF_GRTC_Type;

/* GRTC_TASKS_CAPTURE: Capture the counter value to CC[n] register */
  #define GRTC_TASKS_CAPTURE_MaxCount (16UL)
  #define GRTC_TASKS_CAPTURE_MaxIndex (15UL)
  #define GRTC_TASKS_CAPTURE_MinIndex (0UL)
  #define GRTC_TASKS_CAPTURE_ResetValue (0x00000000UL)

/* TASKS_CAPTURE @Bit 0 : Capture the counter value to CC[n] register */
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Pos (0UL)
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Msk (0x1UL << GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Pos) /*!< Bit mask of TASKS_CAPTURE
                                                                            field.*/
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Min (0x1UL)
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Max (0x1UL)
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Trigger (0x1UL)


/* GRTC_TASKS_START: Start the counter */
  #define GRTC_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start the counter */
  #define GRTC_TASKS_START_TASKS_START_Pos (0UL)
  #define GRTC_TASKS_START_TASKS_START_Msk (0x1UL << GRTC_TASKS_START_TASKS_START_Pos)
  #define GRTC_TASKS_START_TASKS_START_Min (0x1UL)
  #define GRTC_TASKS_START_TASKS_START_Max (0x1UL)
  #define GRTC_TASKS_START_TASKS_START_Trigger (0x1UL)


/* GRTC_TASKS_STOP: Stop the counter */
  #define GRTC_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop the counter */
  #define GRTC_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define GRTC_TASKS_STOP_TASKS_STOP_Msk (0x1UL << GRTC_TASKS_STOP_TASKS_STOP_Pos)
  #define GRTC_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define GRTC_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define GRTC_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* GRTC_TASKS_CLEAR: Clear the counter */
  #define GRTC_TASKS_CLEAR_ResetValue (0x00000000UL)

/* TASKS_CLEAR @Bit 0 : Clear the counter */
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Pos (0UL)
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Msk (0x1UL << GRTC_TASKS_CLEAR_TASKS_CLEAR_Pos)
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Min (0x1UL)
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Max (0x1UL)
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Trigger (0x1UL)


/* GRTC_TASKS_PWMSTART: Start the PWM */
  #define GRTC_TASKS_PWMSTART_ResetValue (0x00000000UL)

/* TASKS_PWMSTART @Bit 0 : Start the PWM */
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Pos (0UL)
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Msk (0x1UL << GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Pos) /*!< Bit mask of
                                                                            TASKS_PWMSTART field.*/
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Min (0x1UL)
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Max (0x1UL)
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Trigger (0x1UL)


/* GRTC_TASKS_PWMSTOP: Stop the PWM */
  #define GRTC_TASKS_PWMSTOP_ResetValue (0x00000000UL)

/* TASKS_PWMSTOP @Bit 0 : Stop the PWM */
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Pos (0UL)
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Msk (0x1UL << GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Pos) /*!< Bit mask of TASKS_PWMSTOP
                                                                            field.*/
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Min (0x1UL)
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Max (0x1UL)
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Trigger (0x1UL)


/* GRTC_SUBSCRIBE_CAPTURE: Subscribe configuration for task CAPTURE[n] */
  #define GRTC_SUBSCRIBE_CAPTURE_MaxCount (16UL)
  #define GRTC_SUBSCRIBE_CAPTURE_MaxIndex (15UL)
  #define GRTC_SUBSCRIBE_CAPTURE_MinIndex (0UL)
  #define GRTC_SUBSCRIBE_CAPTURE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CAPTURE[n] will subscribe to */
  #define GRTC_SUBSCRIBE_CAPTURE_CHIDX_Pos (0UL)
  #define GRTC_SUBSCRIBE_CAPTURE_CHIDX_Msk (0xFFUL << GRTC_SUBSCRIBE_CAPTURE_CHIDX_Pos)
  #define GRTC_SUBSCRIBE_CAPTURE_CHIDX_Min (0x00UL)
  #define GRTC_SUBSCRIBE_CAPTURE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Pos (31UL)
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Msk (0x1UL << GRTC_SUBSCRIBE_CAPTURE_EN_Pos)
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Min (0x0UL)
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Max (0x1UL)
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Disabled (0x0UL)
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Enabled (0x1UL)


/* GRTC_EVENTS_COMPARE: Compare event on CC[n] match */
  #define GRTC_EVENTS_COMPARE_MaxCount (16UL)
  #define GRTC_EVENTS_COMPARE_MaxIndex (15UL)
  #define GRTC_EVENTS_COMPARE_MinIndex (0UL)
  #define GRTC_EVENTS_COMPARE_ResetValue (0x00000000UL)

/* EVENTS_COMPARE @Bit 0 : Compare event on CC[n] match */
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Pos (0UL)
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Msk (0x1UL << GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Pos) /*!< Bit mask of
                                                                            EVENTS_COMPARE field.*/
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Min (0x0UL)
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Max (0x1UL)
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_NotGenerated (0x0UL)
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Generated (0x1UL)


/* GRTC_EVENTS_RTCOMPARESYNC: The GRTC low frequency timer is synchronized with the SYSCOUNTER */
  #define GRTC_EVENTS_RTCOMPARESYNC_ResetValue (0x00000000UL)

/* EVENTS_RTCOMPARESYNC @Bit 0 : The GRTC low frequency timer is synchronized with the SYSCOUNTER */
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Pos (0UL)
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Msk (0x1UL << GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Pos) /*!<
                                                                            Bit mask of EVENTS_RTCOMPARESYNC field.*/
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_NotGenerated (0x0UL)
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Generated (0x1UL)


/* GRTC_EVENTS_PWMPERIODEND: Event on end of each PWM period */
  #define GRTC_EVENTS_PWMPERIODEND_ResetValue (0x00000000UL)

/* EVENTS_PWMPERIODEND @Bit 0 : Event on end of each PWM period */
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos (0UL)
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Msk (0x1UL << GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos) /*!< Bit
                                                                            mask of EVENTS_PWMPERIODEND field.*/
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Min (0x0UL)
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Max (0x1UL)
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_NotGenerated (0x0UL)
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Generated (0x1UL)


/* GRTC_PUBLISH_COMPARE: Publish configuration for event COMPARE[n] */
  #define GRTC_PUBLISH_COMPARE_MaxCount (16UL)
  #define GRTC_PUBLISH_COMPARE_MaxIndex (15UL)
  #define GRTC_PUBLISH_COMPARE_MinIndex (0UL)
  #define GRTC_PUBLISH_COMPARE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event COMPARE[n] will publish to */
  #define GRTC_PUBLISH_COMPARE_CHIDX_Pos (0UL)
  #define GRTC_PUBLISH_COMPARE_CHIDX_Msk (0xFFUL << GRTC_PUBLISH_COMPARE_CHIDX_Pos)
  #define GRTC_PUBLISH_COMPARE_CHIDX_Min (0x00UL)
  #define GRTC_PUBLISH_COMPARE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define GRTC_PUBLISH_COMPARE_EN_Pos (31UL)
  #define GRTC_PUBLISH_COMPARE_EN_Msk (0x1UL << GRTC_PUBLISH_COMPARE_EN_Pos)
  #define GRTC_PUBLISH_COMPARE_EN_Min (0x0UL)
  #define GRTC_PUBLISH_COMPARE_EN_Max (0x1UL)
  #define GRTC_PUBLISH_COMPARE_EN_Disabled (0x0UL)
  #define GRTC_PUBLISH_COMPARE_EN_Enabled (0x1UL)


/* GRTC_SHORTS: Shortcuts between local events and tasks */
  #define GRTC_SHORTS_ResetValue (0x00000000UL)

/* RTCOMPARE_CLEAR @Bit 0 : Shortcut between event RTCOMPARE and task CLEAR */
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Pos (0UL)
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Msk (0x1UL << GRTC_SHORTS_RTCOMPARE_CLEAR_Pos)
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Min (0x0UL)
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Max (0x1UL)
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Disabled (0x0UL)
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Enabled (0x1UL)


/* GRTC_INTEN0: Enable or disable interrupt */
  #define GRTC_INTEN0_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN0_COMPARE0_Pos (0UL)
  #define GRTC_INTEN0_COMPARE0_Msk (0x1UL << GRTC_INTEN0_COMPARE0_Pos)
  #define GRTC_INTEN0_COMPARE0_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE0_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN0_COMPARE1_Pos (1UL)
  #define GRTC_INTEN0_COMPARE1_Msk (0x1UL << GRTC_INTEN0_COMPARE1_Pos)
  #define GRTC_INTEN0_COMPARE1_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE1_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN0_COMPARE2_Pos (2UL)
  #define GRTC_INTEN0_COMPARE2_Msk (0x1UL << GRTC_INTEN0_COMPARE2_Pos)
  #define GRTC_INTEN0_COMPARE2_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE2_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN0_COMPARE3_Pos (3UL)
  #define GRTC_INTEN0_COMPARE3_Msk (0x1UL << GRTC_INTEN0_COMPARE3_Pos)
  #define GRTC_INTEN0_COMPARE3_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE3_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN0_COMPARE4_Pos (4UL)
  #define GRTC_INTEN0_COMPARE4_Msk (0x1UL << GRTC_INTEN0_COMPARE4_Pos)
  #define GRTC_INTEN0_COMPARE4_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE4_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN0_COMPARE5_Pos (5UL)
  #define GRTC_INTEN0_COMPARE5_Msk (0x1UL << GRTC_INTEN0_COMPARE5_Pos)
  #define GRTC_INTEN0_COMPARE5_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE5_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN0_COMPARE6_Pos (6UL)
  #define GRTC_INTEN0_COMPARE6_Msk (0x1UL << GRTC_INTEN0_COMPARE6_Pos)
  #define GRTC_INTEN0_COMPARE6_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE6_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN0_COMPARE7_Pos (7UL)
  #define GRTC_INTEN0_COMPARE7_Msk (0x1UL << GRTC_INTEN0_COMPARE7_Pos)
  #define GRTC_INTEN0_COMPARE7_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE7_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN0_COMPARE8_Pos (8UL)
  #define GRTC_INTEN0_COMPARE8_Msk (0x1UL << GRTC_INTEN0_COMPARE8_Pos)
  #define GRTC_INTEN0_COMPARE8_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE8_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN0_COMPARE9_Pos (9UL)
  #define GRTC_INTEN0_COMPARE9_Msk (0x1UL << GRTC_INTEN0_COMPARE9_Pos)
  #define GRTC_INTEN0_COMPARE9_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE9_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN0_COMPARE10_Pos (10UL)
  #define GRTC_INTEN0_COMPARE10_Msk (0x1UL << GRTC_INTEN0_COMPARE10_Pos)
  #define GRTC_INTEN0_COMPARE10_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE10_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN0_COMPARE11_Pos (11UL)
  #define GRTC_INTEN0_COMPARE11_Msk (0x1UL << GRTC_INTEN0_COMPARE11_Pos)
  #define GRTC_INTEN0_COMPARE11_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE11_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Enable or disable interrupt for event COMPARE[12] */
  #define GRTC_INTEN0_COMPARE12_Pos (12UL)
  #define GRTC_INTEN0_COMPARE12_Msk (0x1UL << GRTC_INTEN0_COMPARE12_Pos)
  #define GRTC_INTEN0_COMPARE12_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE12_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Enable or disable interrupt for event COMPARE[13] */
  #define GRTC_INTEN0_COMPARE13_Pos (13UL)
  #define GRTC_INTEN0_COMPARE13_Msk (0x1UL << GRTC_INTEN0_COMPARE13_Pos)
  #define GRTC_INTEN0_COMPARE13_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE13_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Enable or disable interrupt for event COMPARE[14] */
  #define GRTC_INTEN0_COMPARE14_Pos (14UL)
  #define GRTC_INTEN0_COMPARE14_Msk (0x1UL << GRTC_INTEN0_COMPARE14_Pos)
  #define GRTC_INTEN0_COMPARE14_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE14_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Enable or disable interrupt for event COMPARE[15] */
  #define GRTC_INTEN0_COMPARE15_Pos (15UL)
  #define GRTC_INTEN0_COMPARE15_Msk (0x1UL << GRTC_INTEN0_COMPARE15_Pos)
  #define GRTC_INTEN0_COMPARE15_Min (0x0UL)
  #define GRTC_INTEN0_COMPARE15_Max (0x1UL)
  #define GRTC_INTEN0_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTEN0_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN0_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTEN0_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN0_RTCOMPARESYNC_Pos)
  #define GRTC_INTEN0_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTEN0_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTEN0_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTEN0_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN0_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTEN0_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN0_PWMPERIODEND_Pos)
  #define GRTC_INTEN0_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTEN0_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTEN0_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTEN0_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENSET0: Enable interrupt */
  #define GRTC_INTENSET0_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET0_COMPARE0_Pos (0UL)
  #define GRTC_INTENSET0_COMPARE0_Msk (0x1UL << GRTC_INTENSET0_COMPARE0_Pos)
  #define GRTC_INTENSET0_COMPARE0_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE0_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE0_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET0_COMPARE1_Pos (1UL)
  #define GRTC_INTENSET0_COMPARE1_Msk (0x1UL << GRTC_INTENSET0_COMPARE1_Pos)
  #define GRTC_INTENSET0_COMPARE1_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE1_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE1_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET0_COMPARE2_Pos (2UL)
  #define GRTC_INTENSET0_COMPARE2_Msk (0x1UL << GRTC_INTENSET0_COMPARE2_Pos)
  #define GRTC_INTENSET0_COMPARE2_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE2_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE2_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET0_COMPARE3_Pos (3UL)
  #define GRTC_INTENSET0_COMPARE3_Msk (0x1UL << GRTC_INTENSET0_COMPARE3_Pos)
  #define GRTC_INTENSET0_COMPARE3_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE3_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE3_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET0_COMPARE4_Pos (4UL)
  #define GRTC_INTENSET0_COMPARE4_Msk (0x1UL << GRTC_INTENSET0_COMPARE4_Pos)
  #define GRTC_INTENSET0_COMPARE4_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE4_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE4_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET0_COMPARE5_Pos (5UL)
  #define GRTC_INTENSET0_COMPARE5_Msk (0x1UL << GRTC_INTENSET0_COMPARE5_Pos)
  #define GRTC_INTENSET0_COMPARE5_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE5_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE5_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET0_COMPARE6_Pos (6UL)
  #define GRTC_INTENSET0_COMPARE6_Msk (0x1UL << GRTC_INTENSET0_COMPARE6_Pos)
  #define GRTC_INTENSET0_COMPARE6_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE6_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE6_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET0_COMPARE7_Pos (7UL)
  #define GRTC_INTENSET0_COMPARE7_Msk (0x1UL << GRTC_INTENSET0_COMPARE7_Pos)
  #define GRTC_INTENSET0_COMPARE7_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE7_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE7_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET0_COMPARE8_Pos (8UL)
  #define GRTC_INTENSET0_COMPARE8_Msk (0x1UL << GRTC_INTENSET0_COMPARE8_Pos)
  #define GRTC_INTENSET0_COMPARE8_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE8_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE8_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET0_COMPARE9_Pos (9UL)
  #define GRTC_INTENSET0_COMPARE9_Msk (0x1UL << GRTC_INTENSET0_COMPARE9_Pos)
  #define GRTC_INTENSET0_COMPARE9_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE9_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE9_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET0_COMPARE10_Pos (10UL)
  #define GRTC_INTENSET0_COMPARE10_Msk (0x1UL << GRTC_INTENSET0_COMPARE10_Pos)
  #define GRTC_INTENSET0_COMPARE10_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE10_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE10_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET0_COMPARE11_Pos (11UL)
  #define GRTC_INTENSET0_COMPARE11_Msk (0x1UL << GRTC_INTENSET0_COMPARE11_Pos)
  #define GRTC_INTENSET0_COMPARE11_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE11_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE11_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Write '1' to enable interrupt for event COMPARE[12] */
  #define GRTC_INTENSET0_COMPARE12_Pos (12UL)
  #define GRTC_INTENSET0_COMPARE12_Msk (0x1UL << GRTC_INTENSET0_COMPARE12_Pos)
  #define GRTC_INTENSET0_COMPARE12_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE12_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE12_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Write '1' to enable interrupt for event COMPARE[13] */
  #define GRTC_INTENSET0_COMPARE13_Pos (13UL)
  #define GRTC_INTENSET0_COMPARE13_Msk (0x1UL << GRTC_INTENSET0_COMPARE13_Pos)
  #define GRTC_INTENSET0_COMPARE13_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE13_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE13_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Write '1' to enable interrupt for event COMPARE[14] */
  #define GRTC_INTENSET0_COMPARE14_Pos (14UL)
  #define GRTC_INTENSET0_COMPARE14_Msk (0x1UL << GRTC_INTENSET0_COMPARE14_Pos)
  #define GRTC_INTENSET0_COMPARE14_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE14_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE14_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Write '1' to enable interrupt for event COMPARE[15] */
  #define GRTC_INTENSET0_COMPARE15_Pos (15UL)
  #define GRTC_INTENSET0_COMPARE15_Msk (0x1UL << GRTC_INTENSET0_COMPARE15_Pos)
  #define GRTC_INTENSET0_COMPARE15_Min (0x0UL)
  #define GRTC_INTENSET0_COMPARE15_Max (0x1UL)
  #define GRTC_INTENSET0_COMPARE15_Set (0x1UL)
  #define GRTC_INTENSET0_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTENSET0_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET0_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENSET0_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET0_RTCOMPARESYNC_Pos)
  #define GRTC_INTENSET0_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENSET0_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENSET0_RTCOMPARESYNC_Set (0x1UL)
  #define GRTC_INTENSET0_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENSET0_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET0_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENSET0_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET0_PWMPERIODEND_Pos)
  #define GRTC_INTENSET0_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENSET0_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENSET0_PWMPERIODEND_Set (0x1UL)
  #define GRTC_INTENSET0_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENSET0_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENCLR0: Disable interrupt */
  #define GRTC_INTENCLR0_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR0_COMPARE0_Pos (0UL)
  #define GRTC_INTENCLR0_COMPARE0_Msk (0x1UL << GRTC_INTENCLR0_COMPARE0_Pos)
  #define GRTC_INTENCLR0_COMPARE0_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE0_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE0_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR0_COMPARE1_Pos (1UL)
  #define GRTC_INTENCLR0_COMPARE1_Msk (0x1UL << GRTC_INTENCLR0_COMPARE1_Pos)
  #define GRTC_INTENCLR0_COMPARE1_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE1_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE1_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR0_COMPARE2_Pos (2UL)
  #define GRTC_INTENCLR0_COMPARE2_Msk (0x1UL << GRTC_INTENCLR0_COMPARE2_Pos)
  #define GRTC_INTENCLR0_COMPARE2_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE2_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE2_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR0_COMPARE3_Pos (3UL)
  #define GRTC_INTENCLR0_COMPARE3_Msk (0x1UL << GRTC_INTENCLR0_COMPARE3_Pos)
  #define GRTC_INTENCLR0_COMPARE3_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE3_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE3_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR0_COMPARE4_Pos (4UL)
  #define GRTC_INTENCLR0_COMPARE4_Msk (0x1UL << GRTC_INTENCLR0_COMPARE4_Pos)
  #define GRTC_INTENCLR0_COMPARE4_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE4_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE4_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR0_COMPARE5_Pos (5UL)
  #define GRTC_INTENCLR0_COMPARE5_Msk (0x1UL << GRTC_INTENCLR0_COMPARE5_Pos)
  #define GRTC_INTENCLR0_COMPARE5_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE5_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE5_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR0_COMPARE6_Pos (6UL)
  #define GRTC_INTENCLR0_COMPARE6_Msk (0x1UL << GRTC_INTENCLR0_COMPARE6_Pos)
  #define GRTC_INTENCLR0_COMPARE6_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE6_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE6_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR0_COMPARE7_Pos (7UL)
  #define GRTC_INTENCLR0_COMPARE7_Msk (0x1UL << GRTC_INTENCLR0_COMPARE7_Pos)
  #define GRTC_INTENCLR0_COMPARE7_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE7_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE7_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR0_COMPARE8_Pos (8UL)
  #define GRTC_INTENCLR0_COMPARE8_Msk (0x1UL << GRTC_INTENCLR0_COMPARE8_Pos)
  #define GRTC_INTENCLR0_COMPARE8_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE8_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE8_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR0_COMPARE9_Pos (9UL)
  #define GRTC_INTENCLR0_COMPARE9_Msk (0x1UL << GRTC_INTENCLR0_COMPARE9_Pos)
  #define GRTC_INTENCLR0_COMPARE9_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE9_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE9_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR0_COMPARE10_Pos (10UL)
  #define GRTC_INTENCLR0_COMPARE10_Msk (0x1UL << GRTC_INTENCLR0_COMPARE10_Pos)
  #define GRTC_INTENCLR0_COMPARE10_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE10_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE10_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR0_COMPARE11_Pos (11UL)
  #define GRTC_INTENCLR0_COMPARE11_Msk (0x1UL << GRTC_INTENCLR0_COMPARE11_Pos)
  #define GRTC_INTENCLR0_COMPARE11_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE11_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE11_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Write '1' to disable interrupt for event COMPARE[12] */
  #define GRTC_INTENCLR0_COMPARE12_Pos (12UL)
  #define GRTC_INTENCLR0_COMPARE12_Msk (0x1UL << GRTC_INTENCLR0_COMPARE12_Pos)
  #define GRTC_INTENCLR0_COMPARE12_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE12_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE12_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Write '1' to disable interrupt for event COMPARE[13] */
  #define GRTC_INTENCLR0_COMPARE13_Pos (13UL)
  #define GRTC_INTENCLR0_COMPARE13_Msk (0x1UL << GRTC_INTENCLR0_COMPARE13_Pos)
  #define GRTC_INTENCLR0_COMPARE13_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE13_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE13_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Write '1' to disable interrupt for event COMPARE[14] */
  #define GRTC_INTENCLR0_COMPARE14_Pos (14UL)
  #define GRTC_INTENCLR0_COMPARE14_Msk (0x1UL << GRTC_INTENCLR0_COMPARE14_Pos)
  #define GRTC_INTENCLR0_COMPARE14_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE14_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE14_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Write '1' to disable interrupt for event COMPARE[15] */
  #define GRTC_INTENCLR0_COMPARE15_Pos (15UL)
  #define GRTC_INTENCLR0_COMPARE15_Msk (0x1UL << GRTC_INTENCLR0_COMPARE15_Pos)
  #define GRTC_INTENCLR0_COMPARE15_Min (0x0UL)
  #define GRTC_INTENCLR0_COMPARE15_Max (0x1UL)
  #define GRTC_INTENCLR0_COMPARE15_Clear (0x1UL)
  #define GRTC_INTENCLR0_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTENCLR0_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR0_RTCOMPARESYNC_Pos)
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Clear (0x1UL)
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR0_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENCLR0_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR0_PWMPERIODEND_Pos)
  #define GRTC_INTENCLR0_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENCLR0_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENCLR0_PWMPERIODEND_Clear (0x1UL)
  #define GRTC_INTENCLR0_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENCLR0_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTPEND0: Pending interrupts */
  #define GRTC_INTPEND0_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND0_COMPARE0_Pos (0UL)
  #define GRTC_INTPEND0_COMPARE0_Msk (0x1UL << GRTC_INTPEND0_COMPARE0_Pos)
  #define GRTC_INTPEND0_COMPARE0_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE0_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE0_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE0_Pending (0x1UL)

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND0_COMPARE1_Pos (1UL)
  #define GRTC_INTPEND0_COMPARE1_Msk (0x1UL << GRTC_INTPEND0_COMPARE1_Pos)
  #define GRTC_INTPEND0_COMPARE1_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE1_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE1_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE1_Pending (0x1UL)

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND0_COMPARE2_Pos (2UL)
  #define GRTC_INTPEND0_COMPARE2_Msk (0x1UL << GRTC_INTPEND0_COMPARE2_Pos)
  #define GRTC_INTPEND0_COMPARE2_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE2_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE2_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE2_Pending (0x1UL)

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND0_COMPARE3_Pos (3UL)
  #define GRTC_INTPEND0_COMPARE3_Msk (0x1UL << GRTC_INTPEND0_COMPARE3_Pos)
  #define GRTC_INTPEND0_COMPARE3_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE3_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE3_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE3_Pending (0x1UL)

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND0_COMPARE4_Pos (4UL)
  #define GRTC_INTPEND0_COMPARE4_Msk (0x1UL << GRTC_INTPEND0_COMPARE4_Pos)
  #define GRTC_INTPEND0_COMPARE4_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE4_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE4_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE4_Pending (0x1UL)

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND0_COMPARE5_Pos (5UL)
  #define GRTC_INTPEND0_COMPARE5_Msk (0x1UL << GRTC_INTPEND0_COMPARE5_Pos)
  #define GRTC_INTPEND0_COMPARE5_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE5_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE5_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE5_Pending (0x1UL)

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND0_COMPARE6_Pos (6UL)
  #define GRTC_INTPEND0_COMPARE6_Msk (0x1UL << GRTC_INTPEND0_COMPARE6_Pos)
  #define GRTC_INTPEND0_COMPARE6_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE6_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE6_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE6_Pending (0x1UL)

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND0_COMPARE7_Pos (7UL)
  #define GRTC_INTPEND0_COMPARE7_Msk (0x1UL << GRTC_INTPEND0_COMPARE7_Pos)
  #define GRTC_INTPEND0_COMPARE7_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE7_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE7_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE7_Pending (0x1UL)

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND0_COMPARE8_Pos (8UL)
  #define GRTC_INTPEND0_COMPARE8_Msk (0x1UL << GRTC_INTPEND0_COMPARE8_Pos)
  #define GRTC_INTPEND0_COMPARE8_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE8_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE8_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE8_Pending (0x1UL)

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND0_COMPARE9_Pos (9UL)
  #define GRTC_INTPEND0_COMPARE9_Msk (0x1UL << GRTC_INTPEND0_COMPARE9_Pos)
  #define GRTC_INTPEND0_COMPARE9_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE9_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE9_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE9_Pending (0x1UL)

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND0_COMPARE10_Pos (10UL)
  #define GRTC_INTPEND0_COMPARE10_Msk (0x1UL << GRTC_INTPEND0_COMPARE10_Pos)
  #define GRTC_INTPEND0_COMPARE10_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE10_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE10_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE10_Pending (0x1UL)

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND0_COMPARE11_Pos (11UL)
  #define GRTC_INTPEND0_COMPARE11_Msk (0x1UL << GRTC_INTPEND0_COMPARE11_Pos)
  #define GRTC_INTPEND0_COMPARE11_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE11_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE11_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE11_Pending (0x1UL)

/* COMPARE12 @Bit 12 : Read pending status of interrupt for event COMPARE[12] */
  #define GRTC_INTPEND0_COMPARE12_Pos (12UL)
  #define GRTC_INTPEND0_COMPARE12_Msk (0x1UL << GRTC_INTPEND0_COMPARE12_Pos)
  #define GRTC_INTPEND0_COMPARE12_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE12_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE12_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE12_Pending (0x1UL)

/* COMPARE13 @Bit 13 : Read pending status of interrupt for event COMPARE[13] */
  #define GRTC_INTPEND0_COMPARE13_Pos (13UL)
  #define GRTC_INTPEND0_COMPARE13_Msk (0x1UL << GRTC_INTPEND0_COMPARE13_Pos)
  #define GRTC_INTPEND0_COMPARE13_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE13_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE13_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE13_Pending (0x1UL)

/* COMPARE14 @Bit 14 : Read pending status of interrupt for event COMPARE[14] */
  #define GRTC_INTPEND0_COMPARE14_Pos (14UL)
  #define GRTC_INTPEND0_COMPARE14_Msk (0x1UL << GRTC_INTPEND0_COMPARE14_Pos)
  #define GRTC_INTPEND0_COMPARE14_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE14_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE14_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE14_Pending (0x1UL)

/* COMPARE15 @Bit 15 : Read pending status of interrupt for event COMPARE[15] */
  #define GRTC_INTPEND0_COMPARE15_Pos (15UL)
  #define GRTC_INTPEND0_COMPARE15_Msk (0x1UL << GRTC_INTPEND0_COMPARE15_Pos)
  #define GRTC_INTPEND0_COMPARE15_Min (0x0UL)
  #define GRTC_INTPEND0_COMPARE15_Max (0x1UL)
  #define GRTC_INTPEND0_COMPARE15_NotPending (0x0UL)
  #define GRTC_INTPEND0_COMPARE15_Pending (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND0_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTPEND0_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND0_RTCOMPARESYNC_Pos)
  #define GRTC_INTPEND0_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTPEND0_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTPEND0_RTCOMPARESYNC_NotPending (0x0UL)
  #define GRTC_INTPEND0_RTCOMPARESYNC_Pending (0x1UL)

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND0_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTPEND0_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND0_PWMPERIODEND_Pos)
  #define GRTC_INTPEND0_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTPEND0_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTPEND0_PWMPERIODEND_NotPending (0x0UL)
  #define GRTC_INTPEND0_PWMPERIODEND_Pending (0x1UL)


/* GRTC_INTEN1: Enable or disable interrupt */
  #define GRTC_INTEN1_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN1_COMPARE0_Pos (0UL)
  #define GRTC_INTEN1_COMPARE0_Msk (0x1UL << GRTC_INTEN1_COMPARE0_Pos)
  #define GRTC_INTEN1_COMPARE0_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE0_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN1_COMPARE1_Pos (1UL)
  #define GRTC_INTEN1_COMPARE1_Msk (0x1UL << GRTC_INTEN1_COMPARE1_Pos)
  #define GRTC_INTEN1_COMPARE1_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE1_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN1_COMPARE2_Pos (2UL)
  #define GRTC_INTEN1_COMPARE2_Msk (0x1UL << GRTC_INTEN1_COMPARE2_Pos)
  #define GRTC_INTEN1_COMPARE2_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE2_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN1_COMPARE3_Pos (3UL)
  #define GRTC_INTEN1_COMPARE3_Msk (0x1UL << GRTC_INTEN1_COMPARE3_Pos)
  #define GRTC_INTEN1_COMPARE3_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE3_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN1_COMPARE4_Pos (4UL)
  #define GRTC_INTEN1_COMPARE4_Msk (0x1UL << GRTC_INTEN1_COMPARE4_Pos)
  #define GRTC_INTEN1_COMPARE4_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE4_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN1_COMPARE5_Pos (5UL)
  #define GRTC_INTEN1_COMPARE5_Msk (0x1UL << GRTC_INTEN1_COMPARE5_Pos)
  #define GRTC_INTEN1_COMPARE5_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE5_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN1_COMPARE6_Pos (6UL)
  #define GRTC_INTEN1_COMPARE6_Msk (0x1UL << GRTC_INTEN1_COMPARE6_Pos)
  #define GRTC_INTEN1_COMPARE6_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE6_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN1_COMPARE7_Pos (7UL)
  #define GRTC_INTEN1_COMPARE7_Msk (0x1UL << GRTC_INTEN1_COMPARE7_Pos)
  #define GRTC_INTEN1_COMPARE7_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE7_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN1_COMPARE8_Pos (8UL)
  #define GRTC_INTEN1_COMPARE8_Msk (0x1UL << GRTC_INTEN1_COMPARE8_Pos)
  #define GRTC_INTEN1_COMPARE8_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE8_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN1_COMPARE9_Pos (9UL)
  #define GRTC_INTEN1_COMPARE9_Msk (0x1UL << GRTC_INTEN1_COMPARE9_Pos)
  #define GRTC_INTEN1_COMPARE9_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE9_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN1_COMPARE10_Pos (10UL)
  #define GRTC_INTEN1_COMPARE10_Msk (0x1UL << GRTC_INTEN1_COMPARE10_Pos)
  #define GRTC_INTEN1_COMPARE10_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE10_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN1_COMPARE11_Pos (11UL)
  #define GRTC_INTEN1_COMPARE11_Msk (0x1UL << GRTC_INTEN1_COMPARE11_Pos)
  #define GRTC_INTEN1_COMPARE11_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE11_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Enable or disable interrupt for event COMPARE[12] */
  #define GRTC_INTEN1_COMPARE12_Pos (12UL)
  #define GRTC_INTEN1_COMPARE12_Msk (0x1UL << GRTC_INTEN1_COMPARE12_Pos)
  #define GRTC_INTEN1_COMPARE12_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE12_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Enable or disable interrupt for event COMPARE[13] */
  #define GRTC_INTEN1_COMPARE13_Pos (13UL)
  #define GRTC_INTEN1_COMPARE13_Msk (0x1UL << GRTC_INTEN1_COMPARE13_Pos)
  #define GRTC_INTEN1_COMPARE13_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE13_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Enable or disable interrupt for event COMPARE[14] */
  #define GRTC_INTEN1_COMPARE14_Pos (14UL)
  #define GRTC_INTEN1_COMPARE14_Msk (0x1UL << GRTC_INTEN1_COMPARE14_Pos)
  #define GRTC_INTEN1_COMPARE14_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE14_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Enable or disable interrupt for event COMPARE[15] */
  #define GRTC_INTEN1_COMPARE15_Pos (15UL)
  #define GRTC_INTEN1_COMPARE15_Msk (0x1UL << GRTC_INTEN1_COMPARE15_Pos)
  #define GRTC_INTEN1_COMPARE15_Min (0x0UL)
  #define GRTC_INTEN1_COMPARE15_Max (0x1UL)
  #define GRTC_INTEN1_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTEN1_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN1_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTEN1_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN1_RTCOMPARESYNC_Pos)
  #define GRTC_INTEN1_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTEN1_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTEN1_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTEN1_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN1_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTEN1_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN1_PWMPERIODEND_Pos)
  #define GRTC_INTEN1_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTEN1_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTEN1_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTEN1_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENSET1: Enable interrupt */
  #define GRTC_INTENSET1_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET1_COMPARE0_Pos (0UL)
  #define GRTC_INTENSET1_COMPARE0_Msk (0x1UL << GRTC_INTENSET1_COMPARE0_Pos)
  #define GRTC_INTENSET1_COMPARE0_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE0_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE0_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET1_COMPARE1_Pos (1UL)
  #define GRTC_INTENSET1_COMPARE1_Msk (0x1UL << GRTC_INTENSET1_COMPARE1_Pos)
  #define GRTC_INTENSET1_COMPARE1_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE1_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE1_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET1_COMPARE2_Pos (2UL)
  #define GRTC_INTENSET1_COMPARE2_Msk (0x1UL << GRTC_INTENSET1_COMPARE2_Pos)
  #define GRTC_INTENSET1_COMPARE2_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE2_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE2_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET1_COMPARE3_Pos (3UL)
  #define GRTC_INTENSET1_COMPARE3_Msk (0x1UL << GRTC_INTENSET1_COMPARE3_Pos)
  #define GRTC_INTENSET1_COMPARE3_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE3_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE3_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET1_COMPARE4_Pos (4UL)
  #define GRTC_INTENSET1_COMPARE4_Msk (0x1UL << GRTC_INTENSET1_COMPARE4_Pos)
  #define GRTC_INTENSET1_COMPARE4_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE4_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE4_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET1_COMPARE5_Pos (5UL)
  #define GRTC_INTENSET1_COMPARE5_Msk (0x1UL << GRTC_INTENSET1_COMPARE5_Pos)
  #define GRTC_INTENSET1_COMPARE5_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE5_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE5_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET1_COMPARE6_Pos (6UL)
  #define GRTC_INTENSET1_COMPARE6_Msk (0x1UL << GRTC_INTENSET1_COMPARE6_Pos)
  #define GRTC_INTENSET1_COMPARE6_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE6_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE6_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET1_COMPARE7_Pos (7UL)
  #define GRTC_INTENSET1_COMPARE7_Msk (0x1UL << GRTC_INTENSET1_COMPARE7_Pos)
  #define GRTC_INTENSET1_COMPARE7_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE7_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE7_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET1_COMPARE8_Pos (8UL)
  #define GRTC_INTENSET1_COMPARE8_Msk (0x1UL << GRTC_INTENSET1_COMPARE8_Pos)
  #define GRTC_INTENSET1_COMPARE8_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE8_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE8_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET1_COMPARE9_Pos (9UL)
  #define GRTC_INTENSET1_COMPARE9_Msk (0x1UL << GRTC_INTENSET1_COMPARE9_Pos)
  #define GRTC_INTENSET1_COMPARE9_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE9_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE9_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET1_COMPARE10_Pos (10UL)
  #define GRTC_INTENSET1_COMPARE10_Msk (0x1UL << GRTC_INTENSET1_COMPARE10_Pos)
  #define GRTC_INTENSET1_COMPARE10_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE10_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE10_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET1_COMPARE11_Pos (11UL)
  #define GRTC_INTENSET1_COMPARE11_Msk (0x1UL << GRTC_INTENSET1_COMPARE11_Pos)
  #define GRTC_INTENSET1_COMPARE11_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE11_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE11_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Write '1' to enable interrupt for event COMPARE[12] */
  #define GRTC_INTENSET1_COMPARE12_Pos (12UL)
  #define GRTC_INTENSET1_COMPARE12_Msk (0x1UL << GRTC_INTENSET1_COMPARE12_Pos)
  #define GRTC_INTENSET1_COMPARE12_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE12_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE12_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Write '1' to enable interrupt for event COMPARE[13] */
  #define GRTC_INTENSET1_COMPARE13_Pos (13UL)
  #define GRTC_INTENSET1_COMPARE13_Msk (0x1UL << GRTC_INTENSET1_COMPARE13_Pos)
  #define GRTC_INTENSET1_COMPARE13_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE13_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE13_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Write '1' to enable interrupt for event COMPARE[14] */
  #define GRTC_INTENSET1_COMPARE14_Pos (14UL)
  #define GRTC_INTENSET1_COMPARE14_Msk (0x1UL << GRTC_INTENSET1_COMPARE14_Pos)
  #define GRTC_INTENSET1_COMPARE14_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE14_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE14_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Write '1' to enable interrupt for event COMPARE[15] */
  #define GRTC_INTENSET1_COMPARE15_Pos (15UL)
  #define GRTC_INTENSET1_COMPARE15_Msk (0x1UL << GRTC_INTENSET1_COMPARE15_Pos)
  #define GRTC_INTENSET1_COMPARE15_Min (0x0UL)
  #define GRTC_INTENSET1_COMPARE15_Max (0x1UL)
  #define GRTC_INTENSET1_COMPARE15_Set (0x1UL)
  #define GRTC_INTENSET1_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTENSET1_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET1_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENSET1_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET1_RTCOMPARESYNC_Pos)
  #define GRTC_INTENSET1_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENSET1_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENSET1_RTCOMPARESYNC_Set (0x1UL)
  #define GRTC_INTENSET1_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENSET1_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET1_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENSET1_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET1_PWMPERIODEND_Pos)
  #define GRTC_INTENSET1_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENSET1_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENSET1_PWMPERIODEND_Set (0x1UL)
  #define GRTC_INTENSET1_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENSET1_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENCLR1: Disable interrupt */
  #define GRTC_INTENCLR1_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR1_COMPARE0_Pos (0UL)
  #define GRTC_INTENCLR1_COMPARE0_Msk (0x1UL << GRTC_INTENCLR1_COMPARE0_Pos)
  #define GRTC_INTENCLR1_COMPARE0_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE0_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE0_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR1_COMPARE1_Pos (1UL)
  #define GRTC_INTENCLR1_COMPARE1_Msk (0x1UL << GRTC_INTENCLR1_COMPARE1_Pos)
  #define GRTC_INTENCLR1_COMPARE1_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE1_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE1_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR1_COMPARE2_Pos (2UL)
  #define GRTC_INTENCLR1_COMPARE2_Msk (0x1UL << GRTC_INTENCLR1_COMPARE2_Pos)
  #define GRTC_INTENCLR1_COMPARE2_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE2_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE2_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR1_COMPARE3_Pos (3UL)
  #define GRTC_INTENCLR1_COMPARE3_Msk (0x1UL << GRTC_INTENCLR1_COMPARE3_Pos)
  #define GRTC_INTENCLR1_COMPARE3_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE3_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE3_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR1_COMPARE4_Pos (4UL)
  #define GRTC_INTENCLR1_COMPARE4_Msk (0x1UL << GRTC_INTENCLR1_COMPARE4_Pos)
  #define GRTC_INTENCLR1_COMPARE4_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE4_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE4_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR1_COMPARE5_Pos (5UL)
  #define GRTC_INTENCLR1_COMPARE5_Msk (0x1UL << GRTC_INTENCLR1_COMPARE5_Pos)
  #define GRTC_INTENCLR1_COMPARE5_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE5_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE5_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR1_COMPARE6_Pos (6UL)
  #define GRTC_INTENCLR1_COMPARE6_Msk (0x1UL << GRTC_INTENCLR1_COMPARE6_Pos)
  #define GRTC_INTENCLR1_COMPARE6_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE6_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE6_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR1_COMPARE7_Pos (7UL)
  #define GRTC_INTENCLR1_COMPARE7_Msk (0x1UL << GRTC_INTENCLR1_COMPARE7_Pos)
  #define GRTC_INTENCLR1_COMPARE7_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE7_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE7_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR1_COMPARE8_Pos (8UL)
  #define GRTC_INTENCLR1_COMPARE8_Msk (0x1UL << GRTC_INTENCLR1_COMPARE8_Pos)
  #define GRTC_INTENCLR1_COMPARE8_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE8_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE8_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR1_COMPARE9_Pos (9UL)
  #define GRTC_INTENCLR1_COMPARE9_Msk (0x1UL << GRTC_INTENCLR1_COMPARE9_Pos)
  #define GRTC_INTENCLR1_COMPARE9_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE9_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE9_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR1_COMPARE10_Pos (10UL)
  #define GRTC_INTENCLR1_COMPARE10_Msk (0x1UL << GRTC_INTENCLR1_COMPARE10_Pos)
  #define GRTC_INTENCLR1_COMPARE10_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE10_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE10_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR1_COMPARE11_Pos (11UL)
  #define GRTC_INTENCLR1_COMPARE11_Msk (0x1UL << GRTC_INTENCLR1_COMPARE11_Pos)
  #define GRTC_INTENCLR1_COMPARE11_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE11_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE11_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Write '1' to disable interrupt for event COMPARE[12] */
  #define GRTC_INTENCLR1_COMPARE12_Pos (12UL)
  #define GRTC_INTENCLR1_COMPARE12_Msk (0x1UL << GRTC_INTENCLR1_COMPARE12_Pos)
  #define GRTC_INTENCLR1_COMPARE12_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE12_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE12_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Write '1' to disable interrupt for event COMPARE[13] */
  #define GRTC_INTENCLR1_COMPARE13_Pos (13UL)
  #define GRTC_INTENCLR1_COMPARE13_Msk (0x1UL << GRTC_INTENCLR1_COMPARE13_Pos)
  #define GRTC_INTENCLR1_COMPARE13_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE13_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE13_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Write '1' to disable interrupt for event COMPARE[14] */
  #define GRTC_INTENCLR1_COMPARE14_Pos (14UL)
  #define GRTC_INTENCLR1_COMPARE14_Msk (0x1UL << GRTC_INTENCLR1_COMPARE14_Pos)
  #define GRTC_INTENCLR1_COMPARE14_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE14_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE14_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Write '1' to disable interrupt for event COMPARE[15] */
  #define GRTC_INTENCLR1_COMPARE15_Pos (15UL)
  #define GRTC_INTENCLR1_COMPARE15_Msk (0x1UL << GRTC_INTENCLR1_COMPARE15_Pos)
  #define GRTC_INTENCLR1_COMPARE15_Min (0x0UL)
  #define GRTC_INTENCLR1_COMPARE15_Max (0x1UL)
  #define GRTC_INTENCLR1_COMPARE15_Clear (0x1UL)
  #define GRTC_INTENCLR1_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTENCLR1_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR1_RTCOMPARESYNC_Pos)
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Clear (0x1UL)
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR1_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENCLR1_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR1_PWMPERIODEND_Pos)
  #define GRTC_INTENCLR1_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENCLR1_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENCLR1_PWMPERIODEND_Clear (0x1UL)
  #define GRTC_INTENCLR1_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENCLR1_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTPEND1: Pending interrupts */
  #define GRTC_INTPEND1_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND1_COMPARE0_Pos (0UL)
  #define GRTC_INTPEND1_COMPARE0_Msk (0x1UL << GRTC_INTPEND1_COMPARE0_Pos)
  #define GRTC_INTPEND1_COMPARE0_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE0_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE0_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE0_Pending (0x1UL)

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND1_COMPARE1_Pos (1UL)
  #define GRTC_INTPEND1_COMPARE1_Msk (0x1UL << GRTC_INTPEND1_COMPARE1_Pos)
  #define GRTC_INTPEND1_COMPARE1_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE1_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE1_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE1_Pending (0x1UL)

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND1_COMPARE2_Pos (2UL)
  #define GRTC_INTPEND1_COMPARE2_Msk (0x1UL << GRTC_INTPEND1_COMPARE2_Pos)
  #define GRTC_INTPEND1_COMPARE2_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE2_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE2_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE2_Pending (0x1UL)

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND1_COMPARE3_Pos (3UL)
  #define GRTC_INTPEND1_COMPARE3_Msk (0x1UL << GRTC_INTPEND1_COMPARE3_Pos)
  #define GRTC_INTPEND1_COMPARE3_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE3_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE3_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE3_Pending (0x1UL)

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND1_COMPARE4_Pos (4UL)
  #define GRTC_INTPEND1_COMPARE4_Msk (0x1UL << GRTC_INTPEND1_COMPARE4_Pos)
  #define GRTC_INTPEND1_COMPARE4_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE4_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE4_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE4_Pending (0x1UL)

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND1_COMPARE5_Pos (5UL)
  #define GRTC_INTPEND1_COMPARE5_Msk (0x1UL << GRTC_INTPEND1_COMPARE5_Pos)
  #define GRTC_INTPEND1_COMPARE5_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE5_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE5_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE5_Pending (0x1UL)

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND1_COMPARE6_Pos (6UL)
  #define GRTC_INTPEND1_COMPARE6_Msk (0x1UL << GRTC_INTPEND1_COMPARE6_Pos)
  #define GRTC_INTPEND1_COMPARE6_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE6_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE6_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE6_Pending (0x1UL)

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND1_COMPARE7_Pos (7UL)
  #define GRTC_INTPEND1_COMPARE7_Msk (0x1UL << GRTC_INTPEND1_COMPARE7_Pos)
  #define GRTC_INTPEND1_COMPARE7_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE7_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE7_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE7_Pending (0x1UL)

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND1_COMPARE8_Pos (8UL)
  #define GRTC_INTPEND1_COMPARE8_Msk (0x1UL << GRTC_INTPEND1_COMPARE8_Pos)
  #define GRTC_INTPEND1_COMPARE8_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE8_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE8_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE8_Pending (0x1UL)

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND1_COMPARE9_Pos (9UL)
  #define GRTC_INTPEND1_COMPARE9_Msk (0x1UL << GRTC_INTPEND1_COMPARE9_Pos)
  #define GRTC_INTPEND1_COMPARE9_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE9_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE9_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE9_Pending (0x1UL)

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND1_COMPARE10_Pos (10UL)
  #define GRTC_INTPEND1_COMPARE10_Msk (0x1UL << GRTC_INTPEND1_COMPARE10_Pos)
  #define GRTC_INTPEND1_COMPARE10_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE10_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE10_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE10_Pending (0x1UL)

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND1_COMPARE11_Pos (11UL)
  #define GRTC_INTPEND1_COMPARE11_Msk (0x1UL << GRTC_INTPEND1_COMPARE11_Pos)
  #define GRTC_INTPEND1_COMPARE11_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE11_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE11_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE11_Pending (0x1UL)

/* COMPARE12 @Bit 12 : Read pending status of interrupt for event COMPARE[12] */
  #define GRTC_INTPEND1_COMPARE12_Pos (12UL)
  #define GRTC_INTPEND1_COMPARE12_Msk (0x1UL << GRTC_INTPEND1_COMPARE12_Pos)
  #define GRTC_INTPEND1_COMPARE12_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE12_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE12_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE12_Pending (0x1UL)

/* COMPARE13 @Bit 13 : Read pending status of interrupt for event COMPARE[13] */
  #define GRTC_INTPEND1_COMPARE13_Pos (13UL)
  #define GRTC_INTPEND1_COMPARE13_Msk (0x1UL << GRTC_INTPEND1_COMPARE13_Pos)
  #define GRTC_INTPEND1_COMPARE13_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE13_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE13_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE13_Pending (0x1UL)

/* COMPARE14 @Bit 14 : Read pending status of interrupt for event COMPARE[14] */
  #define GRTC_INTPEND1_COMPARE14_Pos (14UL)
  #define GRTC_INTPEND1_COMPARE14_Msk (0x1UL << GRTC_INTPEND1_COMPARE14_Pos)
  #define GRTC_INTPEND1_COMPARE14_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE14_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE14_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE14_Pending (0x1UL)

/* COMPARE15 @Bit 15 : Read pending status of interrupt for event COMPARE[15] */
  #define GRTC_INTPEND1_COMPARE15_Pos (15UL)
  #define GRTC_INTPEND1_COMPARE15_Msk (0x1UL << GRTC_INTPEND1_COMPARE15_Pos)
  #define GRTC_INTPEND1_COMPARE15_Min (0x0UL)
  #define GRTC_INTPEND1_COMPARE15_Max (0x1UL)
  #define GRTC_INTPEND1_COMPARE15_NotPending (0x0UL)
  #define GRTC_INTPEND1_COMPARE15_Pending (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND1_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTPEND1_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND1_RTCOMPARESYNC_Pos)
  #define GRTC_INTPEND1_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTPEND1_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTPEND1_RTCOMPARESYNC_NotPending (0x0UL)
  #define GRTC_INTPEND1_RTCOMPARESYNC_Pending (0x1UL)

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND1_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTPEND1_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND1_PWMPERIODEND_Pos)
  #define GRTC_INTPEND1_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTPEND1_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTPEND1_PWMPERIODEND_NotPending (0x0UL)
  #define GRTC_INTPEND1_PWMPERIODEND_Pending (0x1UL)


/* GRTC_INTEN2: Enable or disable interrupt */
  #define GRTC_INTEN2_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN2_COMPARE0_Pos (0UL)
  #define GRTC_INTEN2_COMPARE0_Msk (0x1UL << GRTC_INTEN2_COMPARE0_Pos)
  #define GRTC_INTEN2_COMPARE0_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE0_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN2_COMPARE1_Pos (1UL)
  #define GRTC_INTEN2_COMPARE1_Msk (0x1UL << GRTC_INTEN2_COMPARE1_Pos)
  #define GRTC_INTEN2_COMPARE1_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE1_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN2_COMPARE2_Pos (2UL)
  #define GRTC_INTEN2_COMPARE2_Msk (0x1UL << GRTC_INTEN2_COMPARE2_Pos)
  #define GRTC_INTEN2_COMPARE2_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE2_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN2_COMPARE3_Pos (3UL)
  #define GRTC_INTEN2_COMPARE3_Msk (0x1UL << GRTC_INTEN2_COMPARE3_Pos)
  #define GRTC_INTEN2_COMPARE3_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE3_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN2_COMPARE4_Pos (4UL)
  #define GRTC_INTEN2_COMPARE4_Msk (0x1UL << GRTC_INTEN2_COMPARE4_Pos)
  #define GRTC_INTEN2_COMPARE4_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE4_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN2_COMPARE5_Pos (5UL)
  #define GRTC_INTEN2_COMPARE5_Msk (0x1UL << GRTC_INTEN2_COMPARE5_Pos)
  #define GRTC_INTEN2_COMPARE5_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE5_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN2_COMPARE6_Pos (6UL)
  #define GRTC_INTEN2_COMPARE6_Msk (0x1UL << GRTC_INTEN2_COMPARE6_Pos)
  #define GRTC_INTEN2_COMPARE6_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE6_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN2_COMPARE7_Pos (7UL)
  #define GRTC_INTEN2_COMPARE7_Msk (0x1UL << GRTC_INTEN2_COMPARE7_Pos)
  #define GRTC_INTEN2_COMPARE7_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE7_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN2_COMPARE8_Pos (8UL)
  #define GRTC_INTEN2_COMPARE8_Msk (0x1UL << GRTC_INTEN2_COMPARE8_Pos)
  #define GRTC_INTEN2_COMPARE8_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE8_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN2_COMPARE9_Pos (9UL)
  #define GRTC_INTEN2_COMPARE9_Msk (0x1UL << GRTC_INTEN2_COMPARE9_Pos)
  #define GRTC_INTEN2_COMPARE9_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE9_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN2_COMPARE10_Pos (10UL)
  #define GRTC_INTEN2_COMPARE10_Msk (0x1UL << GRTC_INTEN2_COMPARE10_Pos)
  #define GRTC_INTEN2_COMPARE10_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE10_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN2_COMPARE11_Pos (11UL)
  #define GRTC_INTEN2_COMPARE11_Msk (0x1UL << GRTC_INTEN2_COMPARE11_Pos)
  #define GRTC_INTEN2_COMPARE11_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE11_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Enable or disable interrupt for event COMPARE[12] */
  #define GRTC_INTEN2_COMPARE12_Pos (12UL)
  #define GRTC_INTEN2_COMPARE12_Msk (0x1UL << GRTC_INTEN2_COMPARE12_Pos)
  #define GRTC_INTEN2_COMPARE12_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE12_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Enable or disable interrupt for event COMPARE[13] */
  #define GRTC_INTEN2_COMPARE13_Pos (13UL)
  #define GRTC_INTEN2_COMPARE13_Msk (0x1UL << GRTC_INTEN2_COMPARE13_Pos)
  #define GRTC_INTEN2_COMPARE13_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE13_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Enable or disable interrupt for event COMPARE[14] */
  #define GRTC_INTEN2_COMPARE14_Pos (14UL)
  #define GRTC_INTEN2_COMPARE14_Msk (0x1UL << GRTC_INTEN2_COMPARE14_Pos)
  #define GRTC_INTEN2_COMPARE14_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE14_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Enable or disable interrupt for event COMPARE[15] */
  #define GRTC_INTEN2_COMPARE15_Pos (15UL)
  #define GRTC_INTEN2_COMPARE15_Msk (0x1UL << GRTC_INTEN2_COMPARE15_Pos)
  #define GRTC_INTEN2_COMPARE15_Min (0x0UL)
  #define GRTC_INTEN2_COMPARE15_Max (0x1UL)
  #define GRTC_INTEN2_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTEN2_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN2_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTEN2_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN2_RTCOMPARESYNC_Pos)
  #define GRTC_INTEN2_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTEN2_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTEN2_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTEN2_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN2_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTEN2_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN2_PWMPERIODEND_Pos)
  #define GRTC_INTEN2_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTEN2_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTEN2_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTEN2_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENSET2: Enable interrupt */
  #define GRTC_INTENSET2_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET2_COMPARE0_Pos (0UL)
  #define GRTC_INTENSET2_COMPARE0_Msk (0x1UL << GRTC_INTENSET2_COMPARE0_Pos)
  #define GRTC_INTENSET2_COMPARE0_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE0_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE0_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET2_COMPARE1_Pos (1UL)
  #define GRTC_INTENSET2_COMPARE1_Msk (0x1UL << GRTC_INTENSET2_COMPARE1_Pos)
  #define GRTC_INTENSET2_COMPARE1_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE1_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE1_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET2_COMPARE2_Pos (2UL)
  #define GRTC_INTENSET2_COMPARE2_Msk (0x1UL << GRTC_INTENSET2_COMPARE2_Pos)
  #define GRTC_INTENSET2_COMPARE2_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE2_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE2_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET2_COMPARE3_Pos (3UL)
  #define GRTC_INTENSET2_COMPARE3_Msk (0x1UL << GRTC_INTENSET2_COMPARE3_Pos)
  #define GRTC_INTENSET2_COMPARE3_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE3_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE3_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET2_COMPARE4_Pos (4UL)
  #define GRTC_INTENSET2_COMPARE4_Msk (0x1UL << GRTC_INTENSET2_COMPARE4_Pos)
  #define GRTC_INTENSET2_COMPARE4_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE4_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE4_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET2_COMPARE5_Pos (5UL)
  #define GRTC_INTENSET2_COMPARE5_Msk (0x1UL << GRTC_INTENSET2_COMPARE5_Pos)
  #define GRTC_INTENSET2_COMPARE5_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE5_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE5_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET2_COMPARE6_Pos (6UL)
  #define GRTC_INTENSET2_COMPARE6_Msk (0x1UL << GRTC_INTENSET2_COMPARE6_Pos)
  #define GRTC_INTENSET2_COMPARE6_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE6_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE6_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET2_COMPARE7_Pos (7UL)
  #define GRTC_INTENSET2_COMPARE7_Msk (0x1UL << GRTC_INTENSET2_COMPARE7_Pos)
  #define GRTC_INTENSET2_COMPARE7_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE7_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE7_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET2_COMPARE8_Pos (8UL)
  #define GRTC_INTENSET2_COMPARE8_Msk (0x1UL << GRTC_INTENSET2_COMPARE8_Pos)
  #define GRTC_INTENSET2_COMPARE8_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE8_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE8_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET2_COMPARE9_Pos (9UL)
  #define GRTC_INTENSET2_COMPARE9_Msk (0x1UL << GRTC_INTENSET2_COMPARE9_Pos)
  #define GRTC_INTENSET2_COMPARE9_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE9_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE9_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET2_COMPARE10_Pos (10UL)
  #define GRTC_INTENSET2_COMPARE10_Msk (0x1UL << GRTC_INTENSET2_COMPARE10_Pos)
  #define GRTC_INTENSET2_COMPARE10_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE10_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE10_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET2_COMPARE11_Pos (11UL)
  #define GRTC_INTENSET2_COMPARE11_Msk (0x1UL << GRTC_INTENSET2_COMPARE11_Pos)
  #define GRTC_INTENSET2_COMPARE11_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE11_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE11_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Write '1' to enable interrupt for event COMPARE[12] */
  #define GRTC_INTENSET2_COMPARE12_Pos (12UL)
  #define GRTC_INTENSET2_COMPARE12_Msk (0x1UL << GRTC_INTENSET2_COMPARE12_Pos)
  #define GRTC_INTENSET2_COMPARE12_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE12_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE12_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Write '1' to enable interrupt for event COMPARE[13] */
  #define GRTC_INTENSET2_COMPARE13_Pos (13UL)
  #define GRTC_INTENSET2_COMPARE13_Msk (0x1UL << GRTC_INTENSET2_COMPARE13_Pos)
  #define GRTC_INTENSET2_COMPARE13_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE13_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE13_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Write '1' to enable interrupt for event COMPARE[14] */
  #define GRTC_INTENSET2_COMPARE14_Pos (14UL)
  #define GRTC_INTENSET2_COMPARE14_Msk (0x1UL << GRTC_INTENSET2_COMPARE14_Pos)
  #define GRTC_INTENSET2_COMPARE14_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE14_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE14_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Write '1' to enable interrupt for event COMPARE[15] */
  #define GRTC_INTENSET2_COMPARE15_Pos (15UL)
  #define GRTC_INTENSET2_COMPARE15_Msk (0x1UL << GRTC_INTENSET2_COMPARE15_Pos)
  #define GRTC_INTENSET2_COMPARE15_Min (0x0UL)
  #define GRTC_INTENSET2_COMPARE15_Max (0x1UL)
  #define GRTC_INTENSET2_COMPARE15_Set (0x1UL)
  #define GRTC_INTENSET2_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTENSET2_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET2_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENSET2_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET2_RTCOMPARESYNC_Pos)
  #define GRTC_INTENSET2_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENSET2_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENSET2_RTCOMPARESYNC_Set (0x1UL)
  #define GRTC_INTENSET2_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENSET2_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET2_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENSET2_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET2_PWMPERIODEND_Pos)
  #define GRTC_INTENSET2_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENSET2_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENSET2_PWMPERIODEND_Set (0x1UL)
  #define GRTC_INTENSET2_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENSET2_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENCLR2: Disable interrupt */
  #define GRTC_INTENCLR2_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR2_COMPARE0_Pos (0UL)
  #define GRTC_INTENCLR2_COMPARE0_Msk (0x1UL << GRTC_INTENCLR2_COMPARE0_Pos)
  #define GRTC_INTENCLR2_COMPARE0_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE0_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE0_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR2_COMPARE1_Pos (1UL)
  #define GRTC_INTENCLR2_COMPARE1_Msk (0x1UL << GRTC_INTENCLR2_COMPARE1_Pos)
  #define GRTC_INTENCLR2_COMPARE1_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE1_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE1_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR2_COMPARE2_Pos (2UL)
  #define GRTC_INTENCLR2_COMPARE2_Msk (0x1UL << GRTC_INTENCLR2_COMPARE2_Pos)
  #define GRTC_INTENCLR2_COMPARE2_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE2_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE2_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR2_COMPARE3_Pos (3UL)
  #define GRTC_INTENCLR2_COMPARE3_Msk (0x1UL << GRTC_INTENCLR2_COMPARE3_Pos)
  #define GRTC_INTENCLR2_COMPARE3_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE3_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE3_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR2_COMPARE4_Pos (4UL)
  #define GRTC_INTENCLR2_COMPARE4_Msk (0x1UL << GRTC_INTENCLR2_COMPARE4_Pos)
  #define GRTC_INTENCLR2_COMPARE4_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE4_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE4_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR2_COMPARE5_Pos (5UL)
  #define GRTC_INTENCLR2_COMPARE5_Msk (0x1UL << GRTC_INTENCLR2_COMPARE5_Pos)
  #define GRTC_INTENCLR2_COMPARE5_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE5_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE5_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR2_COMPARE6_Pos (6UL)
  #define GRTC_INTENCLR2_COMPARE6_Msk (0x1UL << GRTC_INTENCLR2_COMPARE6_Pos)
  #define GRTC_INTENCLR2_COMPARE6_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE6_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE6_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR2_COMPARE7_Pos (7UL)
  #define GRTC_INTENCLR2_COMPARE7_Msk (0x1UL << GRTC_INTENCLR2_COMPARE7_Pos)
  #define GRTC_INTENCLR2_COMPARE7_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE7_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE7_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR2_COMPARE8_Pos (8UL)
  #define GRTC_INTENCLR2_COMPARE8_Msk (0x1UL << GRTC_INTENCLR2_COMPARE8_Pos)
  #define GRTC_INTENCLR2_COMPARE8_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE8_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE8_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR2_COMPARE9_Pos (9UL)
  #define GRTC_INTENCLR2_COMPARE9_Msk (0x1UL << GRTC_INTENCLR2_COMPARE9_Pos)
  #define GRTC_INTENCLR2_COMPARE9_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE9_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE9_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR2_COMPARE10_Pos (10UL)
  #define GRTC_INTENCLR2_COMPARE10_Msk (0x1UL << GRTC_INTENCLR2_COMPARE10_Pos)
  #define GRTC_INTENCLR2_COMPARE10_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE10_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE10_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR2_COMPARE11_Pos (11UL)
  #define GRTC_INTENCLR2_COMPARE11_Msk (0x1UL << GRTC_INTENCLR2_COMPARE11_Pos)
  #define GRTC_INTENCLR2_COMPARE11_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE11_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE11_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Write '1' to disable interrupt for event COMPARE[12] */
  #define GRTC_INTENCLR2_COMPARE12_Pos (12UL)
  #define GRTC_INTENCLR2_COMPARE12_Msk (0x1UL << GRTC_INTENCLR2_COMPARE12_Pos)
  #define GRTC_INTENCLR2_COMPARE12_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE12_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE12_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Write '1' to disable interrupt for event COMPARE[13] */
  #define GRTC_INTENCLR2_COMPARE13_Pos (13UL)
  #define GRTC_INTENCLR2_COMPARE13_Msk (0x1UL << GRTC_INTENCLR2_COMPARE13_Pos)
  #define GRTC_INTENCLR2_COMPARE13_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE13_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE13_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Write '1' to disable interrupt for event COMPARE[14] */
  #define GRTC_INTENCLR2_COMPARE14_Pos (14UL)
  #define GRTC_INTENCLR2_COMPARE14_Msk (0x1UL << GRTC_INTENCLR2_COMPARE14_Pos)
  #define GRTC_INTENCLR2_COMPARE14_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE14_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE14_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Write '1' to disable interrupt for event COMPARE[15] */
  #define GRTC_INTENCLR2_COMPARE15_Pos (15UL)
  #define GRTC_INTENCLR2_COMPARE15_Msk (0x1UL << GRTC_INTENCLR2_COMPARE15_Pos)
  #define GRTC_INTENCLR2_COMPARE15_Min (0x0UL)
  #define GRTC_INTENCLR2_COMPARE15_Max (0x1UL)
  #define GRTC_INTENCLR2_COMPARE15_Clear (0x1UL)
  #define GRTC_INTENCLR2_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTENCLR2_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR2_RTCOMPARESYNC_Pos)
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Clear (0x1UL)
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR2_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENCLR2_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR2_PWMPERIODEND_Pos)
  #define GRTC_INTENCLR2_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENCLR2_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENCLR2_PWMPERIODEND_Clear (0x1UL)
  #define GRTC_INTENCLR2_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENCLR2_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTPEND2: Pending interrupts */
  #define GRTC_INTPEND2_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND2_COMPARE0_Pos (0UL)
  #define GRTC_INTPEND2_COMPARE0_Msk (0x1UL << GRTC_INTPEND2_COMPARE0_Pos)
  #define GRTC_INTPEND2_COMPARE0_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE0_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE0_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE0_Pending (0x1UL)

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND2_COMPARE1_Pos (1UL)
  #define GRTC_INTPEND2_COMPARE1_Msk (0x1UL << GRTC_INTPEND2_COMPARE1_Pos)
  #define GRTC_INTPEND2_COMPARE1_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE1_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE1_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE1_Pending (0x1UL)

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND2_COMPARE2_Pos (2UL)
  #define GRTC_INTPEND2_COMPARE2_Msk (0x1UL << GRTC_INTPEND2_COMPARE2_Pos)
  #define GRTC_INTPEND2_COMPARE2_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE2_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE2_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE2_Pending (0x1UL)

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND2_COMPARE3_Pos (3UL)
  #define GRTC_INTPEND2_COMPARE3_Msk (0x1UL << GRTC_INTPEND2_COMPARE3_Pos)
  #define GRTC_INTPEND2_COMPARE3_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE3_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE3_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE3_Pending (0x1UL)

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND2_COMPARE4_Pos (4UL)
  #define GRTC_INTPEND2_COMPARE4_Msk (0x1UL << GRTC_INTPEND2_COMPARE4_Pos)
  #define GRTC_INTPEND2_COMPARE4_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE4_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE4_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE4_Pending (0x1UL)

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND2_COMPARE5_Pos (5UL)
  #define GRTC_INTPEND2_COMPARE5_Msk (0x1UL << GRTC_INTPEND2_COMPARE5_Pos)
  #define GRTC_INTPEND2_COMPARE5_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE5_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE5_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE5_Pending (0x1UL)

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND2_COMPARE6_Pos (6UL)
  #define GRTC_INTPEND2_COMPARE6_Msk (0x1UL << GRTC_INTPEND2_COMPARE6_Pos)
  #define GRTC_INTPEND2_COMPARE6_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE6_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE6_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE6_Pending (0x1UL)

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND2_COMPARE7_Pos (7UL)
  #define GRTC_INTPEND2_COMPARE7_Msk (0x1UL << GRTC_INTPEND2_COMPARE7_Pos)
  #define GRTC_INTPEND2_COMPARE7_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE7_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE7_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE7_Pending (0x1UL)

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND2_COMPARE8_Pos (8UL)
  #define GRTC_INTPEND2_COMPARE8_Msk (0x1UL << GRTC_INTPEND2_COMPARE8_Pos)
  #define GRTC_INTPEND2_COMPARE8_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE8_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE8_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE8_Pending (0x1UL)

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND2_COMPARE9_Pos (9UL)
  #define GRTC_INTPEND2_COMPARE9_Msk (0x1UL << GRTC_INTPEND2_COMPARE9_Pos)
  #define GRTC_INTPEND2_COMPARE9_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE9_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE9_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE9_Pending (0x1UL)

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND2_COMPARE10_Pos (10UL)
  #define GRTC_INTPEND2_COMPARE10_Msk (0x1UL << GRTC_INTPEND2_COMPARE10_Pos)
  #define GRTC_INTPEND2_COMPARE10_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE10_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE10_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE10_Pending (0x1UL)

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND2_COMPARE11_Pos (11UL)
  #define GRTC_INTPEND2_COMPARE11_Msk (0x1UL << GRTC_INTPEND2_COMPARE11_Pos)
  #define GRTC_INTPEND2_COMPARE11_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE11_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE11_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE11_Pending (0x1UL)

/* COMPARE12 @Bit 12 : Read pending status of interrupt for event COMPARE[12] */
  #define GRTC_INTPEND2_COMPARE12_Pos (12UL)
  #define GRTC_INTPEND2_COMPARE12_Msk (0x1UL << GRTC_INTPEND2_COMPARE12_Pos)
  #define GRTC_INTPEND2_COMPARE12_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE12_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE12_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE12_Pending (0x1UL)

/* COMPARE13 @Bit 13 : Read pending status of interrupt for event COMPARE[13] */
  #define GRTC_INTPEND2_COMPARE13_Pos (13UL)
  #define GRTC_INTPEND2_COMPARE13_Msk (0x1UL << GRTC_INTPEND2_COMPARE13_Pos)
  #define GRTC_INTPEND2_COMPARE13_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE13_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE13_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE13_Pending (0x1UL)

/* COMPARE14 @Bit 14 : Read pending status of interrupt for event COMPARE[14] */
  #define GRTC_INTPEND2_COMPARE14_Pos (14UL)
  #define GRTC_INTPEND2_COMPARE14_Msk (0x1UL << GRTC_INTPEND2_COMPARE14_Pos)
  #define GRTC_INTPEND2_COMPARE14_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE14_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE14_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE14_Pending (0x1UL)

/* COMPARE15 @Bit 15 : Read pending status of interrupt for event COMPARE[15] */
  #define GRTC_INTPEND2_COMPARE15_Pos (15UL)
  #define GRTC_INTPEND2_COMPARE15_Msk (0x1UL << GRTC_INTPEND2_COMPARE15_Pos)
  #define GRTC_INTPEND2_COMPARE15_Min (0x0UL)
  #define GRTC_INTPEND2_COMPARE15_Max (0x1UL)
  #define GRTC_INTPEND2_COMPARE15_NotPending (0x0UL)
  #define GRTC_INTPEND2_COMPARE15_Pending (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND2_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTPEND2_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND2_RTCOMPARESYNC_Pos)
  #define GRTC_INTPEND2_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTPEND2_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTPEND2_RTCOMPARESYNC_NotPending (0x0UL)
  #define GRTC_INTPEND2_RTCOMPARESYNC_Pending (0x1UL)

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND2_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTPEND2_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND2_PWMPERIODEND_Pos)
  #define GRTC_INTPEND2_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTPEND2_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTPEND2_PWMPERIODEND_NotPending (0x0UL)
  #define GRTC_INTPEND2_PWMPERIODEND_Pending (0x1UL)


/* GRTC_INTEN3: Enable or disable interrupt */
  #define GRTC_INTEN3_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN3_COMPARE0_Pos (0UL)
  #define GRTC_INTEN3_COMPARE0_Msk (0x1UL << GRTC_INTEN3_COMPARE0_Pos)
  #define GRTC_INTEN3_COMPARE0_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE0_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN3_COMPARE1_Pos (1UL)
  #define GRTC_INTEN3_COMPARE1_Msk (0x1UL << GRTC_INTEN3_COMPARE1_Pos)
  #define GRTC_INTEN3_COMPARE1_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE1_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN3_COMPARE2_Pos (2UL)
  #define GRTC_INTEN3_COMPARE2_Msk (0x1UL << GRTC_INTEN3_COMPARE2_Pos)
  #define GRTC_INTEN3_COMPARE2_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE2_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN3_COMPARE3_Pos (3UL)
  #define GRTC_INTEN3_COMPARE3_Msk (0x1UL << GRTC_INTEN3_COMPARE3_Pos)
  #define GRTC_INTEN3_COMPARE3_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE3_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN3_COMPARE4_Pos (4UL)
  #define GRTC_INTEN3_COMPARE4_Msk (0x1UL << GRTC_INTEN3_COMPARE4_Pos)
  #define GRTC_INTEN3_COMPARE4_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE4_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN3_COMPARE5_Pos (5UL)
  #define GRTC_INTEN3_COMPARE5_Msk (0x1UL << GRTC_INTEN3_COMPARE5_Pos)
  #define GRTC_INTEN3_COMPARE5_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE5_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN3_COMPARE6_Pos (6UL)
  #define GRTC_INTEN3_COMPARE6_Msk (0x1UL << GRTC_INTEN3_COMPARE6_Pos)
  #define GRTC_INTEN3_COMPARE6_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE6_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN3_COMPARE7_Pos (7UL)
  #define GRTC_INTEN3_COMPARE7_Msk (0x1UL << GRTC_INTEN3_COMPARE7_Pos)
  #define GRTC_INTEN3_COMPARE7_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE7_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN3_COMPARE8_Pos (8UL)
  #define GRTC_INTEN3_COMPARE8_Msk (0x1UL << GRTC_INTEN3_COMPARE8_Pos)
  #define GRTC_INTEN3_COMPARE8_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE8_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN3_COMPARE9_Pos (9UL)
  #define GRTC_INTEN3_COMPARE9_Msk (0x1UL << GRTC_INTEN3_COMPARE9_Pos)
  #define GRTC_INTEN3_COMPARE9_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE9_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN3_COMPARE10_Pos (10UL)
  #define GRTC_INTEN3_COMPARE10_Msk (0x1UL << GRTC_INTEN3_COMPARE10_Pos)
  #define GRTC_INTEN3_COMPARE10_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE10_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN3_COMPARE11_Pos (11UL)
  #define GRTC_INTEN3_COMPARE11_Msk (0x1UL << GRTC_INTEN3_COMPARE11_Pos)
  #define GRTC_INTEN3_COMPARE11_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE11_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Enable or disable interrupt for event COMPARE[12] */
  #define GRTC_INTEN3_COMPARE12_Pos (12UL)
  #define GRTC_INTEN3_COMPARE12_Msk (0x1UL << GRTC_INTEN3_COMPARE12_Pos)
  #define GRTC_INTEN3_COMPARE12_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE12_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Enable or disable interrupt for event COMPARE[13] */
  #define GRTC_INTEN3_COMPARE13_Pos (13UL)
  #define GRTC_INTEN3_COMPARE13_Msk (0x1UL << GRTC_INTEN3_COMPARE13_Pos)
  #define GRTC_INTEN3_COMPARE13_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE13_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Enable or disable interrupt for event COMPARE[14] */
  #define GRTC_INTEN3_COMPARE14_Pos (14UL)
  #define GRTC_INTEN3_COMPARE14_Msk (0x1UL << GRTC_INTEN3_COMPARE14_Pos)
  #define GRTC_INTEN3_COMPARE14_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE14_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Enable or disable interrupt for event COMPARE[15] */
  #define GRTC_INTEN3_COMPARE15_Pos (15UL)
  #define GRTC_INTEN3_COMPARE15_Msk (0x1UL << GRTC_INTEN3_COMPARE15_Pos)
  #define GRTC_INTEN3_COMPARE15_Min (0x0UL)
  #define GRTC_INTEN3_COMPARE15_Max (0x1UL)
  #define GRTC_INTEN3_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTEN3_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN3_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTEN3_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN3_RTCOMPARESYNC_Pos)
  #define GRTC_INTEN3_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTEN3_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTEN3_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTEN3_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN3_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTEN3_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN3_PWMPERIODEND_Pos)
  #define GRTC_INTEN3_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTEN3_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTEN3_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTEN3_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENSET3: Enable interrupt */
  #define GRTC_INTENSET3_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET3_COMPARE0_Pos (0UL)
  #define GRTC_INTENSET3_COMPARE0_Msk (0x1UL << GRTC_INTENSET3_COMPARE0_Pos)
  #define GRTC_INTENSET3_COMPARE0_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE0_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE0_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET3_COMPARE1_Pos (1UL)
  #define GRTC_INTENSET3_COMPARE1_Msk (0x1UL << GRTC_INTENSET3_COMPARE1_Pos)
  #define GRTC_INTENSET3_COMPARE1_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE1_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE1_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET3_COMPARE2_Pos (2UL)
  #define GRTC_INTENSET3_COMPARE2_Msk (0x1UL << GRTC_INTENSET3_COMPARE2_Pos)
  #define GRTC_INTENSET3_COMPARE2_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE2_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE2_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET3_COMPARE3_Pos (3UL)
  #define GRTC_INTENSET3_COMPARE3_Msk (0x1UL << GRTC_INTENSET3_COMPARE3_Pos)
  #define GRTC_INTENSET3_COMPARE3_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE3_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE3_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET3_COMPARE4_Pos (4UL)
  #define GRTC_INTENSET3_COMPARE4_Msk (0x1UL << GRTC_INTENSET3_COMPARE4_Pos)
  #define GRTC_INTENSET3_COMPARE4_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE4_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE4_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET3_COMPARE5_Pos (5UL)
  #define GRTC_INTENSET3_COMPARE5_Msk (0x1UL << GRTC_INTENSET3_COMPARE5_Pos)
  #define GRTC_INTENSET3_COMPARE5_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE5_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE5_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET3_COMPARE6_Pos (6UL)
  #define GRTC_INTENSET3_COMPARE6_Msk (0x1UL << GRTC_INTENSET3_COMPARE6_Pos)
  #define GRTC_INTENSET3_COMPARE6_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE6_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE6_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET3_COMPARE7_Pos (7UL)
  #define GRTC_INTENSET3_COMPARE7_Msk (0x1UL << GRTC_INTENSET3_COMPARE7_Pos)
  #define GRTC_INTENSET3_COMPARE7_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE7_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE7_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET3_COMPARE8_Pos (8UL)
  #define GRTC_INTENSET3_COMPARE8_Msk (0x1UL << GRTC_INTENSET3_COMPARE8_Pos)
  #define GRTC_INTENSET3_COMPARE8_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE8_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE8_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET3_COMPARE9_Pos (9UL)
  #define GRTC_INTENSET3_COMPARE9_Msk (0x1UL << GRTC_INTENSET3_COMPARE9_Pos)
  #define GRTC_INTENSET3_COMPARE9_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE9_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE9_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET3_COMPARE10_Pos (10UL)
  #define GRTC_INTENSET3_COMPARE10_Msk (0x1UL << GRTC_INTENSET3_COMPARE10_Pos)
  #define GRTC_INTENSET3_COMPARE10_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE10_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE10_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET3_COMPARE11_Pos (11UL)
  #define GRTC_INTENSET3_COMPARE11_Msk (0x1UL << GRTC_INTENSET3_COMPARE11_Pos)
  #define GRTC_INTENSET3_COMPARE11_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE11_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE11_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Write '1' to enable interrupt for event COMPARE[12] */
  #define GRTC_INTENSET3_COMPARE12_Pos (12UL)
  #define GRTC_INTENSET3_COMPARE12_Msk (0x1UL << GRTC_INTENSET3_COMPARE12_Pos)
  #define GRTC_INTENSET3_COMPARE12_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE12_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE12_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Write '1' to enable interrupt for event COMPARE[13] */
  #define GRTC_INTENSET3_COMPARE13_Pos (13UL)
  #define GRTC_INTENSET3_COMPARE13_Msk (0x1UL << GRTC_INTENSET3_COMPARE13_Pos)
  #define GRTC_INTENSET3_COMPARE13_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE13_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE13_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Write '1' to enable interrupt for event COMPARE[14] */
  #define GRTC_INTENSET3_COMPARE14_Pos (14UL)
  #define GRTC_INTENSET3_COMPARE14_Msk (0x1UL << GRTC_INTENSET3_COMPARE14_Pos)
  #define GRTC_INTENSET3_COMPARE14_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE14_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE14_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Write '1' to enable interrupt for event COMPARE[15] */
  #define GRTC_INTENSET3_COMPARE15_Pos (15UL)
  #define GRTC_INTENSET3_COMPARE15_Msk (0x1UL << GRTC_INTENSET3_COMPARE15_Pos)
  #define GRTC_INTENSET3_COMPARE15_Min (0x0UL)
  #define GRTC_INTENSET3_COMPARE15_Max (0x1UL)
  #define GRTC_INTENSET3_COMPARE15_Set (0x1UL)
  #define GRTC_INTENSET3_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTENSET3_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET3_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENSET3_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET3_RTCOMPARESYNC_Pos)
  #define GRTC_INTENSET3_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENSET3_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENSET3_RTCOMPARESYNC_Set (0x1UL)
  #define GRTC_INTENSET3_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENSET3_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET3_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENSET3_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET3_PWMPERIODEND_Pos)
  #define GRTC_INTENSET3_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENSET3_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENSET3_PWMPERIODEND_Set (0x1UL)
  #define GRTC_INTENSET3_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENSET3_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENCLR3: Disable interrupt */
  #define GRTC_INTENCLR3_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR3_COMPARE0_Pos (0UL)
  #define GRTC_INTENCLR3_COMPARE0_Msk (0x1UL << GRTC_INTENCLR3_COMPARE0_Pos)
  #define GRTC_INTENCLR3_COMPARE0_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE0_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE0_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR3_COMPARE1_Pos (1UL)
  #define GRTC_INTENCLR3_COMPARE1_Msk (0x1UL << GRTC_INTENCLR3_COMPARE1_Pos)
  #define GRTC_INTENCLR3_COMPARE1_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE1_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE1_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR3_COMPARE2_Pos (2UL)
  #define GRTC_INTENCLR3_COMPARE2_Msk (0x1UL << GRTC_INTENCLR3_COMPARE2_Pos)
  #define GRTC_INTENCLR3_COMPARE2_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE2_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE2_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR3_COMPARE3_Pos (3UL)
  #define GRTC_INTENCLR3_COMPARE3_Msk (0x1UL << GRTC_INTENCLR3_COMPARE3_Pos)
  #define GRTC_INTENCLR3_COMPARE3_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE3_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE3_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR3_COMPARE4_Pos (4UL)
  #define GRTC_INTENCLR3_COMPARE4_Msk (0x1UL << GRTC_INTENCLR3_COMPARE4_Pos)
  #define GRTC_INTENCLR3_COMPARE4_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE4_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE4_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR3_COMPARE5_Pos (5UL)
  #define GRTC_INTENCLR3_COMPARE5_Msk (0x1UL << GRTC_INTENCLR3_COMPARE5_Pos)
  #define GRTC_INTENCLR3_COMPARE5_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE5_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE5_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR3_COMPARE6_Pos (6UL)
  #define GRTC_INTENCLR3_COMPARE6_Msk (0x1UL << GRTC_INTENCLR3_COMPARE6_Pos)
  #define GRTC_INTENCLR3_COMPARE6_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE6_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE6_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR3_COMPARE7_Pos (7UL)
  #define GRTC_INTENCLR3_COMPARE7_Msk (0x1UL << GRTC_INTENCLR3_COMPARE7_Pos)
  #define GRTC_INTENCLR3_COMPARE7_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE7_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE7_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR3_COMPARE8_Pos (8UL)
  #define GRTC_INTENCLR3_COMPARE8_Msk (0x1UL << GRTC_INTENCLR3_COMPARE8_Pos)
  #define GRTC_INTENCLR3_COMPARE8_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE8_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE8_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR3_COMPARE9_Pos (9UL)
  #define GRTC_INTENCLR3_COMPARE9_Msk (0x1UL << GRTC_INTENCLR3_COMPARE9_Pos)
  #define GRTC_INTENCLR3_COMPARE9_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE9_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE9_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR3_COMPARE10_Pos (10UL)
  #define GRTC_INTENCLR3_COMPARE10_Msk (0x1UL << GRTC_INTENCLR3_COMPARE10_Pos)
  #define GRTC_INTENCLR3_COMPARE10_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE10_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE10_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR3_COMPARE11_Pos (11UL)
  #define GRTC_INTENCLR3_COMPARE11_Msk (0x1UL << GRTC_INTENCLR3_COMPARE11_Pos)
  #define GRTC_INTENCLR3_COMPARE11_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE11_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE11_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Write '1' to disable interrupt for event COMPARE[12] */
  #define GRTC_INTENCLR3_COMPARE12_Pos (12UL)
  #define GRTC_INTENCLR3_COMPARE12_Msk (0x1UL << GRTC_INTENCLR3_COMPARE12_Pos)
  #define GRTC_INTENCLR3_COMPARE12_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE12_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE12_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Write '1' to disable interrupt for event COMPARE[13] */
  #define GRTC_INTENCLR3_COMPARE13_Pos (13UL)
  #define GRTC_INTENCLR3_COMPARE13_Msk (0x1UL << GRTC_INTENCLR3_COMPARE13_Pos)
  #define GRTC_INTENCLR3_COMPARE13_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE13_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE13_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Write '1' to disable interrupt for event COMPARE[14] */
  #define GRTC_INTENCLR3_COMPARE14_Pos (14UL)
  #define GRTC_INTENCLR3_COMPARE14_Msk (0x1UL << GRTC_INTENCLR3_COMPARE14_Pos)
  #define GRTC_INTENCLR3_COMPARE14_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE14_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE14_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Write '1' to disable interrupt for event COMPARE[15] */
  #define GRTC_INTENCLR3_COMPARE15_Pos (15UL)
  #define GRTC_INTENCLR3_COMPARE15_Msk (0x1UL << GRTC_INTENCLR3_COMPARE15_Pos)
  #define GRTC_INTENCLR3_COMPARE15_Min (0x0UL)
  #define GRTC_INTENCLR3_COMPARE15_Max (0x1UL)
  #define GRTC_INTENCLR3_COMPARE15_Clear (0x1UL)
  #define GRTC_INTENCLR3_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTENCLR3_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR3_RTCOMPARESYNC_Pos)
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Clear (0x1UL)
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR3_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENCLR3_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR3_PWMPERIODEND_Pos)
  #define GRTC_INTENCLR3_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENCLR3_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENCLR3_PWMPERIODEND_Clear (0x1UL)
  #define GRTC_INTENCLR3_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENCLR3_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTPEND3: Pending interrupts */
  #define GRTC_INTPEND3_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND3_COMPARE0_Pos (0UL)
  #define GRTC_INTPEND3_COMPARE0_Msk (0x1UL << GRTC_INTPEND3_COMPARE0_Pos)
  #define GRTC_INTPEND3_COMPARE0_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE0_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE0_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE0_Pending (0x1UL)

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND3_COMPARE1_Pos (1UL)
  #define GRTC_INTPEND3_COMPARE1_Msk (0x1UL << GRTC_INTPEND3_COMPARE1_Pos)
  #define GRTC_INTPEND3_COMPARE1_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE1_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE1_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE1_Pending (0x1UL)

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND3_COMPARE2_Pos (2UL)
  #define GRTC_INTPEND3_COMPARE2_Msk (0x1UL << GRTC_INTPEND3_COMPARE2_Pos)
  #define GRTC_INTPEND3_COMPARE2_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE2_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE2_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE2_Pending (0x1UL)

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND3_COMPARE3_Pos (3UL)
  #define GRTC_INTPEND3_COMPARE3_Msk (0x1UL << GRTC_INTPEND3_COMPARE3_Pos)
  #define GRTC_INTPEND3_COMPARE3_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE3_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE3_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE3_Pending (0x1UL)

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND3_COMPARE4_Pos (4UL)
  #define GRTC_INTPEND3_COMPARE4_Msk (0x1UL << GRTC_INTPEND3_COMPARE4_Pos)
  #define GRTC_INTPEND3_COMPARE4_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE4_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE4_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE4_Pending (0x1UL)

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND3_COMPARE5_Pos (5UL)
  #define GRTC_INTPEND3_COMPARE5_Msk (0x1UL << GRTC_INTPEND3_COMPARE5_Pos)
  #define GRTC_INTPEND3_COMPARE5_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE5_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE5_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE5_Pending (0x1UL)

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND3_COMPARE6_Pos (6UL)
  #define GRTC_INTPEND3_COMPARE6_Msk (0x1UL << GRTC_INTPEND3_COMPARE6_Pos)
  #define GRTC_INTPEND3_COMPARE6_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE6_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE6_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE6_Pending (0x1UL)

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND3_COMPARE7_Pos (7UL)
  #define GRTC_INTPEND3_COMPARE7_Msk (0x1UL << GRTC_INTPEND3_COMPARE7_Pos)
  #define GRTC_INTPEND3_COMPARE7_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE7_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE7_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE7_Pending (0x1UL)

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND3_COMPARE8_Pos (8UL)
  #define GRTC_INTPEND3_COMPARE8_Msk (0x1UL << GRTC_INTPEND3_COMPARE8_Pos)
  #define GRTC_INTPEND3_COMPARE8_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE8_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE8_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE8_Pending (0x1UL)

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND3_COMPARE9_Pos (9UL)
  #define GRTC_INTPEND3_COMPARE9_Msk (0x1UL << GRTC_INTPEND3_COMPARE9_Pos)
  #define GRTC_INTPEND3_COMPARE9_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE9_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE9_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE9_Pending (0x1UL)

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND3_COMPARE10_Pos (10UL)
  #define GRTC_INTPEND3_COMPARE10_Msk (0x1UL << GRTC_INTPEND3_COMPARE10_Pos)
  #define GRTC_INTPEND3_COMPARE10_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE10_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE10_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE10_Pending (0x1UL)

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND3_COMPARE11_Pos (11UL)
  #define GRTC_INTPEND3_COMPARE11_Msk (0x1UL << GRTC_INTPEND3_COMPARE11_Pos)
  #define GRTC_INTPEND3_COMPARE11_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE11_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE11_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE11_Pending (0x1UL)

/* COMPARE12 @Bit 12 : Read pending status of interrupt for event COMPARE[12] */
  #define GRTC_INTPEND3_COMPARE12_Pos (12UL)
  #define GRTC_INTPEND3_COMPARE12_Msk (0x1UL << GRTC_INTPEND3_COMPARE12_Pos)
  #define GRTC_INTPEND3_COMPARE12_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE12_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE12_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE12_Pending (0x1UL)

/* COMPARE13 @Bit 13 : Read pending status of interrupt for event COMPARE[13] */
  #define GRTC_INTPEND3_COMPARE13_Pos (13UL)
  #define GRTC_INTPEND3_COMPARE13_Msk (0x1UL << GRTC_INTPEND3_COMPARE13_Pos)
  #define GRTC_INTPEND3_COMPARE13_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE13_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE13_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE13_Pending (0x1UL)

/* COMPARE14 @Bit 14 : Read pending status of interrupt for event COMPARE[14] */
  #define GRTC_INTPEND3_COMPARE14_Pos (14UL)
  #define GRTC_INTPEND3_COMPARE14_Msk (0x1UL << GRTC_INTPEND3_COMPARE14_Pos)
  #define GRTC_INTPEND3_COMPARE14_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE14_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE14_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE14_Pending (0x1UL)

/* COMPARE15 @Bit 15 : Read pending status of interrupt for event COMPARE[15] */
  #define GRTC_INTPEND3_COMPARE15_Pos (15UL)
  #define GRTC_INTPEND3_COMPARE15_Msk (0x1UL << GRTC_INTPEND3_COMPARE15_Pos)
  #define GRTC_INTPEND3_COMPARE15_Min (0x0UL)
  #define GRTC_INTPEND3_COMPARE15_Max (0x1UL)
  #define GRTC_INTPEND3_COMPARE15_NotPending (0x0UL)
  #define GRTC_INTPEND3_COMPARE15_Pending (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND3_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTPEND3_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND3_RTCOMPARESYNC_Pos)
  #define GRTC_INTPEND3_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTPEND3_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTPEND3_RTCOMPARESYNC_NotPending (0x0UL)
  #define GRTC_INTPEND3_RTCOMPARESYNC_Pending (0x1UL)

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND3_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTPEND3_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND3_PWMPERIODEND_Pos)
  #define GRTC_INTPEND3_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTPEND3_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTPEND3_PWMPERIODEND_NotPending (0x0UL)
  #define GRTC_INTPEND3_PWMPERIODEND_Pending (0x1UL)


/* GRTC_INTEN4: Enable or disable interrupt */
  #define GRTC_INTEN4_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN4_COMPARE0_Pos (0UL)
  #define GRTC_INTEN4_COMPARE0_Msk (0x1UL << GRTC_INTEN4_COMPARE0_Pos)
  #define GRTC_INTEN4_COMPARE0_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE0_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN4_COMPARE1_Pos (1UL)
  #define GRTC_INTEN4_COMPARE1_Msk (0x1UL << GRTC_INTEN4_COMPARE1_Pos)
  #define GRTC_INTEN4_COMPARE1_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE1_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN4_COMPARE2_Pos (2UL)
  #define GRTC_INTEN4_COMPARE2_Msk (0x1UL << GRTC_INTEN4_COMPARE2_Pos)
  #define GRTC_INTEN4_COMPARE2_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE2_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN4_COMPARE3_Pos (3UL)
  #define GRTC_INTEN4_COMPARE3_Msk (0x1UL << GRTC_INTEN4_COMPARE3_Pos)
  #define GRTC_INTEN4_COMPARE3_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE3_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN4_COMPARE4_Pos (4UL)
  #define GRTC_INTEN4_COMPARE4_Msk (0x1UL << GRTC_INTEN4_COMPARE4_Pos)
  #define GRTC_INTEN4_COMPARE4_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE4_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN4_COMPARE5_Pos (5UL)
  #define GRTC_INTEN4_COMPARE5_Msk (0x1UL << GRTC_INTEN4_COMPARE5_Pos)
  #define GRTC_INTEN4_COMPARE5_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE5_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN4_COMPARE6_Pos (6UL)
  #define GRTC_INTEN4_COMPARE6_Msk (0x1UL << GRTC_INTEN4_COMPARE6_Pos)
  #define GRTC_INTEN4_COMPARE6_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE6_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN4_COMPARE7_Pos (7UL)
  #define GRTC_INTEN4_COMPARE7_Msk (0x1UL << GRTC_INTEN4_COMPARE7_Pos)
  #define GRTC_INTEN4_COMPARE7_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE7_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN4_COMPARE8_Pos (8UL)
  #define GRTC_INTEN4_COMPARE8_Msk (0x1UL << GRTC_INTEN4_COMPARE8_Pos)
  #define GRTC_INTEN4_COMPARE8_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE8_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN4_COMPARE9_Pos (9UL)
  #define GRTC_INTEN4_COMPARE9_Msk (0x1UL << GRTC_INTEN4_COMPARE9_Pos)
  #define GRTC_INTEN4_COMPARE9_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE9_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN4_COMPARE10_Pos (10UL)
  #define GRTC_INTEN4_COMPARE10_Msk (0x1UL << GRTC_INTEN4_COMPARE10_Pos)
  #define GRTC_INTEN4_COMPARE10_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE10_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN4_COMPARE11_Pos (11UL)
  #define GRTC_INTEN4_COMPARE11_Msk (0x1UL << GRTC_INTEN4_COMPARE11_Pos)
  #define GRTC_INTEN4_COMPARE11_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE11_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Enable or disable interrupt for event COMPARE[12] */
  #define GRTC_INTEN4_COMPARE12_Pos (12UL)
  #define GRTC_INTEN4_COMPARE12_Msk (0x1UL << GRTC_INTEN4_COMPARE12_Pos)
  #define GRTC_INTEN4_COMPARE12_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE12_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Enable or disable interrupt for event COMPARE[13] */
  #define GRTC_INTEN4_COMPARE13_Pos (13UL)
  #define GRTC_INTEN4_COMPARE13_Msk (0x1UL << GRTC_INTEN4_COMPARE13_Pos)
  #define GRTC_INTEN4_COMPARE13_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE13_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Enable or disable interrupt for event COMPARE[14] */
  #define GRTC_INTEN4_COMPARE14_Pos (14UL)
  #define GRTC_INTEN4_COMPARE14_Msk (0x1UL << GRTC_INTEN4_COMPARE14_Pos)
  #define GRTC_INTEN4_COMPARE14_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE14_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Enable or disable interrupt for event COMPARE[15] */
  #define GRTC_INTEN4_COMPARE15_Pos (15UL)
  #define GRTC_INTEN4_COMPARE15_Msk (0x1UL << GRTC_INTEN4_COMPARE15_Pos)
  #define GRTC_INTEN4_COMPARE15_Min (0x0UL)
  #define GRTC_INTEN4_COMPARE15_Max (0x1UL)
  #define GRTC_INTEN4_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTEN4_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN4_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTEN4_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN4_RTCOMPARESYNC_Pos)
  #define GRTC_INTEN4_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTEN4_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTEN4_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTEN4_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN4_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTEN4_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN4_PWMPERIODEND_Pos)
  #define GRTC_INTEN4_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTEN4_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTEN4_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTEN4_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENSET4: Enable interrupt */
  #define GRTC_INTENSET4_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET4_COMPARE0_Pos (0UL)
  #define GRTC_INTENSET4_COMPARE0_Msk (0x1UL << GRTC_INTENSET4_COMPARE0_Pos)
  #define GRTC_INTENSET4_COMPARE0_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE0_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE0_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET4_COMPARE1_Pos (1UL)
  #define GRTC_INTENSET4_COMPARE1_Msk (0x1UL << GRTC_INTENSET4_COMPARE1_Pos)
  #define GRTC_INTENSET4_COMPARE1_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE1_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE1_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET4_COMPARE2_Pos (2UL)
  #define GRTC_INTENSET4_COMPARE2_Msk (0x1UL << GRTC_INTENSET4_COMPARE2_Pos)
  #define GRTC_INTENSET4_COMPARE2_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE2_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE2_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET4_COMPARE3_Pos (3UL)
  #define GRTC_INTENSET4_COMPARE3_Msk (0x1UL << GRTC_INTENSET4_COMPARE3_Pos)
  #define GRTC_INTENSET4_COMPARE3_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE3_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE3_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET4_COMPARE4_Pos (4UL)
  #define GRTC_INTENSET4_COMPARE4_Msk (0x1UL << GRTC_INTENSET4_COMPARE4_Pos)
  #define GRTC_INTENSET4_COMPARE4_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE4_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE4_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET4_COMPARE5_Pos (5UL)
  #define GRTC_INTENSET4_COMPARE5_Msk (0x1UL << GRTC_INTENSET4_COMPARE5_Pos)
  #define GRTC_INTENSET4_COMPARE5_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE5_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE5_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET4_COMPARE6_Pos (6UL)
  #define GRTC_INTENSET4_COMPARE6_Msk (0x1UL << GRTC_INTENSET4_COMPARE6_Pos)
  #define GRTC_INTENSET4_COMPARE6_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE6_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE6_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET4_COMPARE7_Pos (7UL)
  #define GRTC_INTENSET4_COMPARE7_Msk (0x1UL << GRTC_INTENSET4_COMPARE7_Pos)
  #define GRTC_INTENSET4_COMPARE7_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE7_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE7_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET4_COMPARE8_Pos (8UL)
  #define GRTC_INTENSET4_COMPARE8_Msk (0x1UL << GRTC_INTENSET4_COMPARE8_Pos)
  #define GRTC_INTENSET4_COMPARE8_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE8_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE8_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET4_COMPARE9_Pos (9UL)
  #define GRTC_INTENSET4_COMPARE9_Msk (0x1UL << GRTC_INTENSET4_COMPARE9_Pos)
  #define GRTC_INTENSET4_COMPARE9_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE9_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE9_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET4_COMPARE10_Pos (10UL)
  #define GRTC_INTENSET4_COMPARE10_Msk (0x1UL << GRTC_INTENSET4_COMPARE10_Pos)
  #define GRTC_INTENSET4_COMPARE10_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE10_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE10_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET4_COMPARE11_Pos (11UL)
  #define GRTC_INTENSET4_COMPARE11_Msk (0x1UL << GRTC_INTENSET4_COMPARE11_Pos)
  #define GRTC_INTENSET4_COMPARE11_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE11_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE11_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Write '1' to enable interrupt for event COMPARE[12] */
  #define GRTC_INTENSET4_COMPARE12_Pos (12UL)
  #define GRTC_INTENSET4_COMPARE12_Msk (0x1UL << GRTC_INTENSET4_COMPARE12_Pos)
  #define GRTC_INTENSET4_COMPARE12_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE12_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE12_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Write '1' to enable interrupt for event COMPARE[13] */
  #define GRTC_INTENSET4_COMPARE13_Pos (13UL)
  #define GRTC_INTENSET4_COMPARE13_Msk (0x1UL << GRTC_INTENSET4_COMPARE13_Pos)
  #define GRTC_INTENSET4_COMPARE13_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE13_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE13_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Write '1' to enable interrupt for event COMPARE[14] */
  #define GRTC_INTENSET4_COMPARE14_Pos (14UL)
  #define GRTC_INTENSET4_COMPARE14_Msk (0x1UL << GRTC_INTENSET4_COMPARE14_Pos)
  #define GRTC_INTENSET4_COMPARE14_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE14_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE14_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Write '1' to enable interrupt for event COMPARE[15] */
  #define GRTC_INTENSET4_COMPARE15_Pos (15UL)
  #define GRTC_INTENSET4_COMPARE15_Msk (0x1UL << GRTC_INTENSET4_COMPARE15_Pos)
  #define GRTC_INTENSET4_COMPARE15_Min (0x0UL)
  #define GRTC_INTENSET4_COMPARE15_Max (0x1UL)
  #define GRTC_INTENSET4_COMPARE15_Set (0x1UL)
  #define GRTC_INTENSET4_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTENSET4_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET4_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENSET4_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET4_RTCOMPARESYNC_Pos)
  #define GRTC_INTENSET4_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENSET4_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENSET4_RTCOMPARESYNC_Set (0x1UL)
  #define GRTC_INTENSET4_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENSET4_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET4_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENSET4_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET4_PWMPERIODEND_Pos)
  #define GRTC_INTENSET4_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENSET4_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENSET4_PWMPERIODEND_Set (0x1UL)
  #define GRTC_INTENSET4_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENSET4_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENCLR4: Disable interrupt */
  #define GRTC_INTENCLR4_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR4_COMPARE0_Pos (0UL)
  #define GRTC_INTENCLR4_COMPARE0_Msk (0x1UL << GRTC_INTENCLR4_COMPARE0_Pos)
  #define GRTC_INTENCLR4_COMPARE0_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE0_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE0_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR4_COMPARE1_Pos (1UL)
  #define GRTC_INTENCLR4_COMPARE1_Msk (0x1UL << GRTC_INTENCLR4_COMPARE1_Pos)
  #define GRTC_INTENCLR4_COMPARE1_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE1_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE1_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR4_COMPARE2_Pos (2UL)
  #define GRTC_INTENCLR4_COMPARE2_Msk (0x1UL << GRTC_INTENCLR4_COMPARE2_Pos)
  #define GRTC_INTENCLR4_COMPARE2_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE2_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE2_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR4_COMPARE3_Pos (3UL)
  #define GRTC_INTENCLR4_COMPARE3_Msk (0x1UL << GRTC_INTENCLR4_COMPARE3_Pos)
  #define GRTC_INTENCLR4_COMPARE3_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE3_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE3_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR4_COMPARE4_Pos (4UL)
  #define GRTC_INTENCLR4_COMPARE4_Msk (0x1UL << GRTC_INTENCLR4_COMPARE4_Pos)
  #define GRTC_INTENCLR4_COMPARE4_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE4_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE4_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR4_COMPARE5_Pos (5UL)
  #define GRTC_INTENCLR4_COMPARE5_Msk (0x1UL << GRTC_INTENCLR4_COMPARE5_Pos)
  #define GRTC_INTENCLR4_COMPARE5_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE5_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE5_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR4_COMPARE6_Pos (6UL)
  #define GRTC_INTENCLR4_COMPARE6_Msk (0x1UL << GRTC_INTENCLR4_COMPARE6_Pos)
  #define GRTC_INTENCLR4_COMPARE6_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE6_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE6_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR4_COMPARE7_Pos (7UL)
  #define GRTC_INTENCLR4_COMPARE7_Msk (0x1UL << GRTC_INTENCLR4_COMPARE7_Pos)
  #define GRTC_INTENCLR4_COMPARE7_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE7_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE7_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR4_COMPARE8_Pos (8UL)
  #define GRTC_INTENCLR4_COMPARE8_Msk (0x1UL << GRTC_INTENCLR4_COMPARE8_Pos)
  #define GRTC_INTENCLR4_COMPARE8_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE8_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE8_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR4_COMPARE9_Pos (9UL)
  #define GRTC_INTENCLR4_COMPARE9_Msk (0x1UL << GRTC_INTENCLR4_COMPARE9_Pos)
  #define GRTC_INTENCLR4_COMPARE9_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE9_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE9_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR4_COMPARE10_Pos (10UL)
  #define GRTC_INTENCLR4_COMPARE10_Msk (0x1UL << GRTC_INTENCLR4_COMPARE10_Pos)
  #define GRTC_INTENCLR4_COMPARE10_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE10_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE10_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR4_COMPARE11_Pos (11UL)
  #define GRTC_INTENCLR4_COMPARE11_Msk (0x1UL << GRTC_INTENCLR4_COMPARE11_Pos)
  #define GRTC_INTENCLR4_COMPARE11_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE11_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE11_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Write '1' to disable interrupt for event COMPARE[12] */
  #define GRTC_INTENCLR4_COMPARE12_Pos (12UL)
  #define GRTC_INTENCLR4_COMPARE12_Msk (0x1UL << GRTC_INTENCLR4_COMPARE12_Pos)
  #define GRTC_INTENCLR4_COMPARE12_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE12_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE12_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Write '1' to disable interrupt for event COMPARE[13] */
  #define GRTC_INTENCLR4_COMPARE13_Pos (13UL)
  #define GRTC_INTENCLR4_COMPARE13_Msk (0x1UL << GRTC_INTENCLR4_COMPARE13_Pos)
  #define GRTC_INTENCLR4_COMPARE13_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE13_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE13_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Write '1' to disable interrupt for event COMPARE[14] */
  #define GRTC_INTENCLR4_COMPARE14_Pos (14UL)
  #define GRTC_INTENCLR4_COMPARE14_Msk (0x1UL << GRTC_INTENCLR4_COMPARE14_Pos)
  #define GRTC_INTENCLR4_COMPARE14_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE14_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE14_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Write '1' to disable interrupt for event COMPARE[15] */
  #define GRTC_INTENCLR4_COMPARE15_Pos (15UL)
  #define GRTC_INTENCLR4_COMPARE15_Msk (0x1UL << GRTC_INTENCLR4_COMPARE15_Pos)
  #define GRTC_INTENCLR4_COMPARE15_Min (0x0UL)
  #define GRTC_INTENCLR4_COMPARE15_Max (0x1UL)
  #define GRTC_INTENCLR4_COMPARE15_Clear (0x1UL)
  #define GRTC_INTENCLR4_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTENCLR4_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR4_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENCLR4_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR4_RTCOMPARESYNC_Pos)
  #define GRTC_INTENCLR4_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENCLR4_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENCLR4_RTCOMPARESYNC_Clear (0x1UL)
  #define GRTC_INTENCLR4_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENCLR4_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR4_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENCLR4_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR4_PWMPERIODEND_Pos)
  #define GRTC_INTENCLR4_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENCLR4_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENCLR4_PWMPERIODEND_Clear (0x1UL)
  #define GRTC_INTENCLR4_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENCLR4_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTPEND4: Pending interrupts */
  #define GRTC_INTPEND4_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND4_COMPARE0_Pos (0UL)
  #define GRTC_INTPEND4_COMPARE0_Msk (0x1UL << GRTC_INTPEND4_COMPARE0_Pos)
  #define GRTC_INTPEND4_COMPARE0_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE0_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE0_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE0_Pending (0x1UL)

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND4_COMPARE1_Pos (1UL)
  #define GRTC_INTPEND4_COMPARE1_Msk (0x1UL << GRTC_INTPEND4_COMPARE1_Pos)
  #define GRTC_INTPEND4_COMPARE1_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE1_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE1_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE1_Pending (0x1UL)

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND4_COMPARE2_Pos (2UL)
  #define GRTC_INTPEND4_COMPARE2_Msk (0x1UL << GRTC_INTPEND4_COMPARE2_Pos)
  #define GRTC_INTPEND4_COMPARE2_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE2_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE2_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE2_Pending (0x1UL)

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND4_COMPARE3_Pos (3UL)
  #define GRTC_INTPEND4_COMPARE3_Msk (0x1UL << GRTC_INTPEND4_COMPARE3_Pos)
  #define GRTC_INTPEND4_COMPARE3_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE3_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE3_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE3_Pending (0x1UL)

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND4_COMPARE4_Pos (4UL)
  #define GRTC_INTPEND4_COMPARE4_Msk (0x1UL << GRTC_INTPEND4_COMPARE4_Pos)
  #define GRTC_INTPEND4_COMPARE4_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE4_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE4_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE4_Pending (0x1UL)

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND4_COMPARE5_Pos (5UL)
  #define GRTC_INTPEND4_COMPARE5_Msk (0x1UL << GRTC_INTPEND4_COMPARE5_Pos)
  #define GRTC_INTPEND4_COMPARE5_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE5_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE5_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE5_Pending (0x1UL)

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND4_COMPARE6_Pos (6UL)
  #define GRTC_INTPEND4_COMPARE6_Msk (0x1UL << GRTC_INTPEND4_COMPARE6_Pos)
  #define GRTC_INTPEND4_COMPARE6_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE6_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE6_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE6_Pending (0x1UL)

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND4_COMPARE7_Pos (7UL)
  #define GRTC_INTPEND4_COMPARE7_Msk (0x1UL << GRTC_INTPEND4_COMPARE7_Pos)
  #define GRTC_INTPEND4_COMPARE7_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE7_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE7_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE7_Pending (0x1UL)

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND4_COMPARE8_Pos (8UL)
  #define GRTC_INTPEND4_COMPARE8_Msk (0x1UL << GRTC_INTPEND4_COMPARE8_Pos)
  #define GRTC_INTPEND4_COMPARE8_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE8_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE8_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE8_Pending (0x1UL)

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND4_COMPARE9_Pos (9UL)
  #define GRTC_INTPEND4_COMPARE9_Msk (0x1UL << GRTC_INTPEND4_COMPARE9_Pos)
  #define GRTC_INTPEND4_COMPARE9_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE9_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE9_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE9_Pending (0x1UL)

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND4_COMPARE10_Pos (10UL)
  #define GRTC_INTPEND4_COMPARE10_Msk (0x1UL << GRTC_INTPEND4_COMPARE10_Pos)
  #define GRTC_INTPEND4_COMPARE10_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE10_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE10_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE10_Pending (0x1UL)

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND4_COMPARE11_Pos (11UL)
  #define GRTC_INTPEND4_COMPARE11_Msk (0x1UL << GRTC_INTPEND4_COMPARE11_Pos)
  #define GRTC_INTPEND4_COMPARE11_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE11_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE11_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE11_Pending (0x1UL)

/* COMPARE12 @Bit 12 : Read pending status of interrupt for event COMPARE[12] */
  #define GRTC_INTPEND4_COMPARE12_Pos (12UL)
  #define GRTC_INTPEND4_COMPARE12_Msk (0x1UL << GRTC_INTPEND4_COMPARE12_Pos)
  #define GRTC_INTPEND4_COMPARE12_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE12_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE12_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE12_Pending (0x1UL)

/* COMPARE13 @Bit 13 : Read pending status of interrupt for event COMPARE[13] */
  #define GRTC_INTPEND4_COMPARE13_Pos (13UL)
  #define GRTC_INTPEND4_COMPARE13_Msk (0x1UL << GRTC_INTPEND4_COMPARE13_Pos)
  #define GRTC_INTPEND4_COMPARE13_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE13_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE13_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE13_Pending (0x1UL)

/* COMPARE14 @Bit 14 : Read pending status of interrupt for event COMPARE[14] */
  #define GRTC_INTPEND4_COMPARE14_Pos (14UL)
  #define GRTC_INTPEND4_COMPARE14_Msk (0x1UL << GRTC_INTPEND4_COMPARE14_Pos)
  #define GRTC_INTPEND4_COMPARE14_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE14_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE14_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE14_Pending (0x1UL)

/* COMPARE15 @Bit 15 : Read pending status of interrupt for event COMPARE[15] */
  #define GRTC_INTPEND4_COMPARE15_Pos (15UL)
  #define GRTC_INTPEND4_COMPARE15_Msk (0x1UL << GRTC_INTPEND4_COMPARE15_Pos)
  #define GRTC_INTPEND4_COMPARE15_Min (0x0UL)
  #define GRTC_INTPEND4_COMPARE15_Max (0x1UL)
  #define GRTC_INTPEND4_COMPARE15_NotPending (0x0UL)
  #define GRTC_INTPEND4_COMPARE15_Pending (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND4_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTPEND4_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND4_RTCOMPARESYNC_Pos)
  #define GRTC_INTPEND4_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTPEND4_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTPEND4_RTCOMPARESYNC_NotPending (0x0UL)
  #define GRTC_INTPEND4_RTCOMPARESYNC_Pending (0x1UL)

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND4_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTPEND4_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND4_PWMPERIODEND_Pos)
  #define GRTC_INTPEND4_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTPEND4_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTPEND4_PWMPERIODEND_NotPending (0x0UL)
  #define GRTC_INTPEND4_PWMPERIODEND_Pending (0x1UL)


/* GRTC_INTEN5: Enable or disable interrupt */
  #define GRTC_INTEN5_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN5_COMPARE0_Pos (0UL)
  #define GRTC_INTEN5_COMPARE0_Msk (0x1UL << GRTC_INTEN5_COMPARE0_Pos)
  #define GRTC_INTEN5_COMPARE0_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE0_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN5_COMPARE1_Pos (1UL)
  #define GRTC_INTEN5_COMPARE1_Msk (0x1UL << GRTC_INTEN5_COMPARE1_Pos)
  #define GRTC_INTEN5_COMPARE1_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE1_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN5_COMPARE2_Pos (2UL)
  #define GRTC_INTEN5_COMPARE2_Msk (0x1UL << GRTC_INTEN5_COMPARE2_Pos)
  #define GRTC_INTEN5_COMPARE2_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE2_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN5_COMPARE3_Pos (3UL)
  #define GRTC_INTEN5_COMPARE3_Msk (0x1UL << GRTC_INTEN5_COMPARE3_Pos)
  #define GRTC_INTEN5_COMPARE3_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE3_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN5_COMPARE4_Pos (4UL)
  #define GRTC_INTEN5_COMPARE4_Msk (0x1UL << GRTC_INTEN5_COMPARE4_Pos)
  #define GRTC_INTEN5_COMPARE4_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE4_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN5_COMPARE5_Pos (5UL)
  #define GRTC_INTEN5_COMPARE5_Msk (0x1UL << GRTC_INTEN5_COMPARE5_Pos)
  #define GRTC_INTEN5_COMPARE5_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE5_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN5_COMPARE6_Pos (6UL)
  #define GRTC_INTEN5_COMPARE6_Msk (0x1UL << GRTC_INTEN5_COMPARE6_Pos)
  #define GRTC_INTEN5_COMPARE6_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE6_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN5_COMPARE7_Pos (7UL)
  #define GRTC_INTEN5_COMPARE7_Msk (0x1UL << GRTC_INTEN5_COMPARE7_Pos)
  #define GRTC_INTEN5_COMPARE7_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE7_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN5_COMPARE8_Pos (8UL)
  #define GRTC_INTEN5_COMPARE8_Msk (0x1UL << GRTC_INTEN5_COMPARE8_Pos)
  #define GRTC_INTEN5_COMPARE8_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE8_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN5_COMPARE9_Pos (9UL)
  #define GRTC_INTEN5_COMPARE9_Msk (0x1UL << GRTC_INTEN5_COMPARE9_Pos)
  #define GRTC_INTEN5_COMPARE9_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE9_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN5_COMPARE10_Pos (10UL)
  #define GRTC_INTEN5_COMPARE10_Msk (0x1UL << GRTC_INTEN5_COMPARE10_Pos)
  #define GRTC_INTEN5_COMPARE10_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE10_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN5_COMPARE11_Pos (11UL)
  #define GRTC_INTEN5_COMPARE11_Msk (0x1UL << GRTC_INTEN5_COMPARE11_Pos)
  #define GRTC_INTEN5_COMPARE11_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE11_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Enable or disable interrupt for event COMPARE[12] */
  #define GRTC_INTEN5_COMPARE12_Pos (12UL)
  #define GRTC_INTEN5_COMPARE12_Msk (0x1UL << GRTC_INTEN5_COMPARE12_Pos)
  #define GRTC_INTEN5_COMPARE12_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE12_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Enable or disable interrupt for event COMPARE[13] */
  #define GRTC_INTEN5_COMPARE13_Pos (13UL)
  #define GRTC_INTEN5_COMPARE13_Msk (0x1UL << GRTC_INTEN5_COMPARE13_Pos)
  #define GRTC_INTEN5_COMPARE13_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE13_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Enable or disable interrupt for event COMPARE[14] */
  #define GRTC_INTEN5_COMPARE14_Pos (14UL)
  #define GRTC_INTEN5_COMPARE14_Msk (0x1UL << GRTC_INTEN5_COMPARE14_Pos)
  #define GRTC_INTEN5_COMPARE14_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE14_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Enable or disable interrupt for event COMPARE[15] */
  #define GRTC_INTEN5_COMPARE15_Pos (15UL)
  #define GRTC_INTEN5_COMPARE15_Msk (0x1UL << GRTC_INTEN5_COMPARE15_Pos)
  #define GRTC_INTEN5_COMPARE15_Min (0x0UL)
  #define GRTC_INTEN5_COMPARE15_Max (0x1UL)
  #define GRTC_INTEN5_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTEN5_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN5_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTEN5_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN5_RTCOMPARESYNC_Pos)
  #define GRTC_INTEN5_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTEN5_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTEN5_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTEN5_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN5_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTEN5_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN5_PWMPERIODEND_Pos)
  #define GRTC_INTEN5_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTEN5_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTEN5_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTEN5_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENSET5: Enable interrupt */
  #define GRTC_INTENSET5_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET5_COMPARE0_Pos (0UL)
  #define GRTC_INTENSET5_COMPARE0_Msk (0x1UL << GRTC_INTENSET5_COMPARE0_Pos)
  #define GRTC_INTENSET5_COMPARE0_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE0_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE0_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET5_COMPARE1_Pos (1UL)
  #define GRTC_INTENSET5_COMPARE1_Msk (0x1UL << GRTC_INTENSET5_COMPARE1_Pos)
  #define GRTC_INTENSET5_COMPARE1_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE1_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE1_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET5_COMPARE2_Pos (2UL)
  #define GRTC_INTENSET5_COMPARE2_Msk (0x1UL << GRTC_INTENSET5_COMPARE2_Pos)
  #define GRTC_INTENSET5_COMPARE2_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE2_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE2_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET5_COMPARE3_Pos (3UL)
  #define GRTC_INTENSET5_COMPARE3_Msk (0x1UL << GRTC_INTENSET5_COMPARE3_Pos)
  #define GRTC_INTENSET5_COMPARE3_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE3_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE3_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET5_COMPARE4_Pos (4UL)
  #define GRTC_INTENSET5_COMPARE4_Msk (0x1UL << GRTC_INTENSET5_COMPARE4_Pos)
  #define GRTC_INTENSET5_COMPARE4_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE4_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE4_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET5_COMPARE5_Pos (5UL)
  #define GRTC_INTENSET5_COMPARE5_Msk (0x1UL << GRTC_INTENSET5_COMPARE5_Pos)
  #define GRTC_INTENSET5_COMPARE5_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE5_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE5_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET5_COMPARE6_Pos (6UL)
  #define GRTC_INTENSET5_COMPARE6_Msk (0x1UL << GRTC_INTENSET5_COMPARE6_Pos)
  #define GRTC_INTENSET5_COMPARE6_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE6_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE6_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET5_COMPARE7_Pos (7UL)
  #define GRTC_INTENSET5_COMPARE7_Msk (0x1UL << GRTC_INTENSET5_COMPARE7_Pos)
  #define GRTC_INTENSET5_COMPARE7_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE7_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE7_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET5_COMPARE8_Pos (8UL)
  #define GRTC_INTENSET5_COMPARE8_Msk (0x1UL << GRTC_INTENSET5_COMPARE8_Pos)
  #define GRTC_INTENSET5_COMPARE8_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE8_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE8_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET5_COMPARE9_Pos (9UL)
  #define GRTC_INTENSET5_COMPARE9_Msk (0x1UL << GRTC_INTENSET5_COMPARE9_Pos)
  #define GRTC_INTENSET5_COMPARE9_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE9_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE9_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET5_COMPARE10_Pos (10UL)
  #define GRTC_INTENSET5_COMPARE10_Msk (0x1UL << GRTC_INTENSET5_COMPARE10_Pos)
  #define GRTC_INTENSET5_COMPARE10_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE10_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE10_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET5_COMPARE11_Pos (11UL)
  #define GRTC_INTENSET5_COMPARE11_Msk (0x1UL << GRTC_INTENSET5_COMPARE11_Pos)
  #define GRTC_INTENSET5_COMPARE11_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE11_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE11_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Write '1' to enable interrupt for event COMPARE[12] */
  #define GRTC_INTENSET5_COMPARE12_Pos (12UL)
  #define GRTC_INTENSET5_COMPARE12_Msk (0x1UL << GRTC_INTENSET5_COMPARE12_Pos)
  #define GRTC_INTENSET5_COMPARE12_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE12_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE12_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Write '1' to enable interrupt for event COMPARE[13] */
  #define GRTC_INTENSET5_COMPARE13_Pos (13UL)
  #define GRTC_INTENSET5_COMPARE13_Msk (0x1UL << GRTC_INTENSET5_COMPARE13_Pos)
  #define GRTC_INTENSET5_COMPARE13_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE13_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE13_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Write '1' to enable interrupt for event COMPARE[14] */
  #define GRTC_INTENSET5_COMPARE14_Pos (14UL)
  #define GRTC_INTENSET5_COMPARE14_Msk (0x1UL << GRTC_INTENSET5_COMPARE14_Pos)
  #define GRTC_INTENSET5_COMPARE14_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE14_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE14_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Write '1' to enable interrupt for event COMPARE[15] */
  #define GRTC_INTENSET5_COMPARE15_Pos (15UL)
  #define GRTC_INTENSET5_COMPARE15_Msk (0x1UL << GRTC_INTENSET5_COMPARE15_Pos)
  #define GRTC_INTENSET5_COMPARE15_Min (0x0UL)
  #define GRTC_INTENSET5_COMPARE15_Max (0x1UL)
  #define GRTC_INTENSET5_COMPARE15_Set (0x1UL)
  #define GRTC_INTENSET5_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTENSET5_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET5_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENSET5_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET5_RTCOMPARESYNC_Pos)
  #define GRTC_INTENSET5_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENSET5_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENSET5_RTCOMPARESYNC_Set (0x1UL)
  #define GRTC_INTENSET5_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENSET5_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET5_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENSET5_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET5_PWMPERIODEND_Pos)
  #define GRTC_INTENSET5_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENSET5_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENSET5_PWMPERIODEND_Set (0x1UL)
  #define GRTC_INTENSET5_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENSET5_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTENCLR5: Disable interrupt */
  #define GRTC_INTENCLR5_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR5_COMPARE0_Pos (0UL)
  #define GRTC_INTENCLR5_COMPARE0_Msk (0x1UL << GRTC_INTENCLR5_COMPARE0_Pos)
  #define GRTC_INTENCLR5_COMPARE0_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE0_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE0_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE0_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR5_COMPARE1_Pos (1UL)
  #define GRTC_INTENCLR5_COMPARE1_Msk (0x1UL << GRTC_INTENCLR5_COMPARE1_Pos)
  #define GRTC_INTENCLR5_COMPARE1_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE1_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE1_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE1_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR5_COMPARE2_Pos (2UL)
  #define GRTC_INTENCLR5_COMPARE2_Msk (0x1UL << GRTC_INTENCLR5_COMPARE2_Pos)
  #define GRTC_INTENCLR5_COMPARE2_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE2_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE2_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE2_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR5_COMPARE3_Pos (3UL)
  #define GRTC_INTENCLR5_COMPARE3_Msk (0x1UL << GRTC_INTENCLR5_COMPARE3_Pos)
  #define GRTC_INTENCLR5_COMPARE3_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE3_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE3_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE3_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR5_COMPARE4_Pos (4UL)
  #define GRTC_INTENCLR5_COMPARE4_Msk (0x1UL << GRTC_INTENCLR5_COMPARE4_Pos)
  #define GRTC_INTENCLR5_COMPARE4_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE4_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE4_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE4_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR5_COMPARE5_Pos (5UL)
  #define GRTC_INTENCLR5_COMPARE5_Msk (0x1UL << GRTC_INTENCLR5_COMPARE5_Pos)
  #define GRTC_INTENCLR5_COMPARE5_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE5_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE5_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE5_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR5_COMPARE6_Pos (6UL)
  #define GRTC_INTENCLR5_COMPARE6_Msk (0x1UL << GRTC_INTENCLR5_COMPARE6_Pos)
  #define GRTC_INTENCLR5_COMPARE6_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE6_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE6_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE6_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR5_COMPARE7_Pos (7UL)
  #define GRTC_INTENCLR5_COMPARE7_Msk (0x1UL << GRTC_INTENCLR5_COMPARE7_Pos)
  #define GRTC_INTENCLR5_COMPARE7_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE7_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE7_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE7_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE7_Enabled (0x1UL)

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR5_COMPARE8_Pos (8UL)
  #define GRTC_INTENCLR5_COMPARE8_Msk (0x1UL << GRTC_INTENCLR5_COMPARE8_Pos)
  #define GRTC_INTENCLR5_COMPARE8_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE8_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE8_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE8_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE8_Enabled (0x1UL)

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR5_COMPARE9_Pos (9UL)
  #define GRTC_INTENCLR5_COMPARE9_Msk (0x1UL << GRTC_INTENCLR5_COMPARE9_Pos)
  #define GRTC_INTENCLR5_COMPARE9_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE9_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE9_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE9_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE9_Enabled (0x1UL)

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR5_COMPARE10_Pos (10UL)
  #define GRTC_INTENCLR5_COMPARE10_Msk (0x1UL << GRTC_INTENCLR5_COMPARE10_Pos)
  #define GRTC_INTENCLR5_COMPARE10_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE10_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE10_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE10_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE10_Enabled (0x1UL)

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR5_COMPARE11_Pos (11UL)
  #define GRTC_INTENCLR5_COMPARE11_Msk (0x1UL << GRTC_INTENCLR5_COMPARE11_Pos)
  #define GRTC_INTENCLR5_COMPARE11_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE11_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE11_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE11_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE11_Enabled (0x1UL)

/* COMPARE12 @Bit 12 : Write '1' to disable interrupt for event COMPARE[12] */
  #define GRTC_INTENCLR5_COMPARE12_Pos (12UL)
  #define GRTC_INTENCLR5_COMPARE12_Msk (0x1UL << GRTC_INTENCLR5_COMPARE12_Pos)
  #define GRTC_INTENCLR5_COMPARE12_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE12_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE12_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE12_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE12_Enabled (0x1UL)

/* COMPARE13 @Bit 13 : Write '1' to disable interrupt for event COMPARE[13] */
  #define GRTC_INTENCLR5_COMPARE13_Pos (13UL)
  #define GRTC_INTENCLR5_COMPARE13_Msk (0x1UL << GRTC_INTENCLR5_COMPARE13_Pos)
  #define GRTC_INTENCLR5_COMPARE13_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE13_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE13_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE13_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE13_Enabled (0x1UL)

/* COMPARE14 @Bit 14 : Write '1' to disable interrupt for event COMPARE[14] */
  #define GRTC_INTENCLR5_COMPARE14_Pos (14UL)
  #define GRTC_INTENCLR5_COMPARE14_Msk (0x1UL << GRTC_INTENCLR5_COMPARE14_Pos)
  #define GRTC_INTENCLR5_COMPARE14_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE14_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE14_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE14_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE14_Enabled (0x1UL)

/* COMPARE15 @Bit 15 : Write '1' to disable interrupt for event COMPARE[15] */
  #define GRTC_INTENCLR5_COMPARE15_Pos (15UL)
  #define GRTC_INTENCLR5_COMPARE15_Msk (0x1UL << GRTC_INTENCLR5_COMPARE15_Pos)
  #define GRTC_INTENCLR5_COMPARE15_Min (0x0UL)
  #define GRTC_INTENCLR5_COMPARE15_Max (0x1UL)
  #define GRTC_INTENCLR5_COMPARE15_Clear (0x1UL)
  #define GRTC_INTENCLR5_COMPARE15_Disabled (0x0UL)
  #define GRTC_INTENCLR5_COMPARE15_Enabled (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR5_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTENCLR5_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR5_RTCOMPARESYNC_Pos)
  #define GRTC_INTENCLR5_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTENCLR5_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTENCLR5_RTCOMPARESYNC_Clear (0x1UL)
  #define GRTC_INTENCLR5_RTCOMPARESYNC_Disabled (0x0UL)
  #define GRTC_INTENCLR5_RTCOMPARESYNC_Enabled (0x1UL)

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR5_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTENCLR5_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR5_PWMPERIODEND_Pos)
  #define GRTC_INTENCLR5_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTENCLR5_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTENCLR5_PWMPERIODEND_Clear (0x1UL)
  #define GRTC_INTENCLR5_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_INTENCLR5_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_INTPEND5: Pending interrupts */
  #define GRTC_INTPEND5_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND5_COMPARE0_Pos (0UL)
  #define GRTC_INTPEND5_COMPARE0_Msk (0x1UL << GRTC_INTPEND5_COMPARE0_Pos)
  #define GRTC_INTPEND5_COMPARE0_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE0_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE0_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE0_Pending (0x1UL)

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND5_COMPARE1_Pos (1UL)
  #define GRTC_INTPEND5_COMPARE1_Msk (0x1UL << GRTC_INTPEND5_COMPARE1_Pos)
  #define GRTC_INTPEND5_COMPARE1_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE1_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE1_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE1_Pending (0x1UL)

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND5_COMPARE2_Pos (2UL)
  #define GRTC_INTPEND5_COMPARE2_Msk (0x1UL << GRTC_INTPEND5_COMPARE2_Pos)
  #define GRTC_INTPEND5_COMPARE2_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE2_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE2_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE2_Pending (0x1UL)

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND5_COMPARE3_Pos (3UL)
  #define GRTC_INTPEND5_COMPARE3_Msk (0x1UL << GRTC_INTPEND5_COMPARE3_Pos)
  #define GRTC_INTPEND5_COMPARE3_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE3_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE3_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE3_Pending (0x1UL)

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND5_COMPARE4_Pos (4UL)
  #define GRTC_INTPEND5_COMPARE4_Msk (0x1UL << GRTC_INTPEND5_COMPARE4_Pos)
  #define GRTC_INTPEND5_COMPARE4_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE4_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE4_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE4_Pending (0x1UL)

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND5_COMPARE5_Pos (5UL)
  #define GRTC_INTPEND5_COMPARE5_Msk (0x1UL << GRTC_INTPEND5_COMPARE5_Pos)
  #define GRTC_INTPEND5_COMPARE5_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE5_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE5_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE5_Pending (0x1UL)

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND5_COMPARE6_Pos (6UL)
  #define GRTC_INTPEND5_COMPARE6_Msk (0x1UL << GRTC_INTPEND5_COMPARE6_Pos)
  #define GRTC_INTPEND5_COMPARE6_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE6_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE6_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE6_Pending (0x1UL)

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND5_COMPARE7_Pos (7UL)
  #define GRTC_INTPEND5_COMPARE7_Msk (0x1UL << GRTC_INTPEND5_COMPARE7_Pos)
  #define GRTC_INTPEND5_COMPARE7_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE7_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE7_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE7_Pending (0x1UL)

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND5_COMPARE8_Pos (8UL)
  #define GRTC_INTPEND5_COMPARE8_Msk (0x1UL << GRTC_INTPEND5_COMPARE8_Pos)
  #define GRTC_INTPEND5_COMPARE8_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE8_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE8_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE8_Pending (0x1UL)

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND5_COMPARE9_Pos (9UL)
  #define GRTC_INTPEND5_COMPARE9_Msk (0x1UL << GRTC_INTPEND5_COMPARE9_Pos)
  #define GRTC_INTPEND5_COMPARE9_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE9_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE9_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE9_Pending (0x1UL)

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND5_COMPARE10_Pos (10UL)
  #define GRTC_INTPEND5_COMPARE10_Msk (0x1UL << GRTC_INTPEND5_COMPARE10_Pos)
  #define GRTC_INTPEND5_COMPARE10_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE10_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE10_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE10_Pending (0x1UL)

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND5_COMPARE11_Pos (11UL)
  #define GRTC_INTPEND5_COMPARE11_Msk (0x1UL << GRTC_INTPEND5_COMPARE11_Pos)
  #define GRTC_INTPEND5_COMPARE11_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE11_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE11_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE11_Pending (0x1UL)

/* COMPARE12 @Bit 12 : Read pending status of interrupt for event COMPARE[12] */
  #define GRTC_INTPEND5_COMPARE12_Pos (12UL)
  #define GRTC_INTPEND5_COMPARE12_Msk (0x1UL << GRTC_INTPEND5_COMPARE12_Pos)
  #define GRTC_INTPEND5_COMPARE12_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE12_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE12_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE12_Pending (0x1UL)

/* COMPARE13 @Bit 13 : Read pending status of interrupt for event COMPARE[13] */
  #define GRTC_INTPEND5_COMPARE13_Pos (13UL)
  #define GRTC_INTPEND5_COMPARE13_Msk (0x1UL << GRTC_INTPEND5_COMPARE13_Pos)
  #define GRTC_INTPEND5_COMPARE13_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE13_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE13_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE13_Pending (0x1UL)

/* COMPARE14 @Bit 14 : Read pending status of interrupt for event COMPARE[14] */
  #define GRTC_INTPEND5_COMPARE14_Pos (14UL)
  #define GRTC_INTPEND5_COMPARE14_Msk (0x1UL << GRTC_INTPEND5_COMPARE14_Pos)
  #define GRTC_INTPEND5_COMPARE14_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE14_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE14_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE14_Pending (0x1UL)

/* COMPARE15 @Bit 15 : Read pending status of interrupt for event COMPARE[15] */
  #define GRTC_INTPEND5_COMPARE15_Pos (15UL)
  #define GRTC_INTPEND5_COMPARE15_Msk (0x1UL << GRTC_INTPEND5_COMPARE15_Pos)
  #define GRTC_INTPEND5_COMPARE15_Min (0x0UL)
  #define GRTC_INTPEND5_COMPARE15_Max (0x1UL)
  #define GRTC_INTPEND5_COMPARE15_NotPending (0x0UL)
  #define GRTC_INTPEND5_COMPARE15_Pending (0x1UL)

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND5_RTCOMPARESYNC_Pos (25UL)
  #define GRTC_INTPEND5_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND5_RTCOMPARESYNC_Pos)
  #define GRTC_INTPEND5_RTCOMPARESYNC_Min (0x0UL)
  #define GRTC_INTPEND5_RTCOMPARESYNC_Max (0x1UL)
  #define GRTC_INTPEND5_RTCOMPARESYNC_NotPending (0x0UL)
  #define GRTC_INTPEND5_RTCOMPARESYNC_Pending (0x1UL)

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND5_PWMPERIODEND_Pos (27UL)
  #define GRTC_INTPEND5_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND5_PWMPERIODEND_Pos)
  #define GRTC_INTPEND5_PWMPERIODEND_Min (0x0UL)
  #define GRTC_INTPEND5_PWMPERIODEND_Max (0x1UL)
  #define GRTC_INTPEND5_PWMPERIODEND_NotPending (0x0UL)
  #define GRTC_INTPEND5_PWMPERIODEND_Pending (0x1UL)


/* GRTC_EVTEN: Enable or disable event routing */
  #define GRTC_EVTEN_ResetValue (0x00000000UL)

/* PWMPERIODEND @Bit 27 : Enable or disable event routing for event PWMPERIODEND */
  #define GRTC_EVTEN_PWMPERIODEND_Pos (27UL)
  #define GRTC_EVTEN_PWMPERIODEND_Msk (0x1UL << GRTC_EVTEN_PWMPERIODEND_Pos)
  #define GRTC_EVTEN_PWMPERIODEND_Min (0x0UL)
  #define GRTC_EVTEN_PWMPERIODEND_Max (0x1UL)
  #define GRTC_EVTEN_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_EVTEN_PWMPERIODEND_Enabled (0x1UL)


/* GRTC_EVTENSET: Enable event routing */
  #define GRTC_EVTENSET_ResetValue (0x00000000UL)

/* PWMPERIODEND @Bit 27 : Write '1' to enable event routing for event PWMPERIODEND */
  #define GRTC_EVTENSET_PWMPERIODEND_Pos (27UL)
  #define GRTC_EVTENSET_PWMPERIODEND_Msk (0x1UL << GRTC_EVTENSET_PWMPERIODEND_Pos)
  #define GRTC_EVTENSET_PWMPERIODEND_Min (0x0UL)
  #define GRTC_EVTENSET_PWMPERIODEND_Max (0x1UL)
  #define GRTC_EVTENSET_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_EVTENSET_PWMPERIODEND_Enabled (0x1UL)
  #define GRTC_EVTENSET_PWMPERIODEND_Set (0x1UL)


/* GRTC_EVTENCLR: Disable event routing */
  #define GRTC_EVTENCLR_ResetValue (0x00000000UL)

/* PWMPERIODEND @Bit 27 : Write '1' to disable event routing for event PWMPERIODEND */
  #define GRTC_EVTENCLR_PWMPERIODEND_Pos (27UL)
  #define GRTC_EVTENCLR_PWMPERIODEND_Msk (0x1UL << GRTC_EVTENCLR_PWMPERIODEND_Pos)
  #define GRTC_EVTENCLR_PWMPERIODEND_Min (0x0UL)
  #define GRTC_EVTENCLR_PWMPERIODEND_Max (0x1UL)
  #define GRTC_EVTENCLR_PWMPERIODEND_Disabled (0x0UL)
  #define GRTC_EVTENCLR_PWMPERIODEND_Enabled (0x1UL)
  #define GRTC_EVTENCLR_PWMPERIODEND_Clear (0x1UL)


/* GRTC_MODE: Counter mode selection */
  #define GRTC_MODE_ResetValue (0x00000000UL)

/* AUTOEN @Bit 0 : Automatic enable to keep the SYSCOUNTER active. */
  #define GRTC_MODE_AUTOEN_Pos (0UL)
  #define GRTC_MODE_AUTOEN_Msk (0x1UL << GRTC_MODE_AUTOEN_Pos)
  #define GRTC_MODE_AUTOEN_Min (0x0UL)
  #define GRTC_MODE_AUTOEN_Max (0x1UL)
  #define GRTC_MODE_AUTOEN_Default (0x0UL)
  #define GRTC_MODE_AUTOEN_CpuActive (0x1UL)         /*!< In addition to the above mode, any local CPU that is not sleeping keep
                                                          the SYSCOUNTER active.*/

/* SYSCOUNTEREN @Bit 1 : Enable the SYSCOUNTER */
  #define GRTC_MODE_SYSCOUNTEREN_Pos (1UL)
  #define GRTC_MODE_SYSCOUNTEREN_Msk (0x1UL << GRTC_MODE_SYSCOUNTEREN_Pos)
  #define GRTC_MODE_SYSCOUNTEREN_Min (0x0UL)
  #define GRTC_MODE_SYSCOUNTEREN_Max (0x1UL)
  #define GRTC_MODE_SYSCOUNTEREN_Disabled (0x0UL)
  #define GRTC_MODE_SYSCOUNTEREN_Enabled (0x1UL)


/* GRTC_TIMEOUT: Timeout after all CPUs gone into sleep state to stop the SYSCOUNTER */
  #define GRTC_TIMEOUT_ResetValue (0x00000000UL)

/* VALUE @Bits 0..15 : Number of 32Ki cycles */
  #define GRTC_TIMEOUT_VALUE_Pos (0UL)
  #define GRTC_TIMEOUT_VALUE_Msk (0xFFFFUL << GRTC_TIMEOUT_VALUE_Pos)


/* GRTC_INTERVAL: Count to add to CC[0] when the event EVENTS_COMPARE[0] triggers. */
  #define GRTC_INTERVAL_ResetValue (0x00000000UL)

/* VALUE @Bits 0..15 : Count to add to CC[0] */
  #define GRTC_INTERVAL_VALUE_Pos (0UL)
  #define GRTC_INTERVAL_VALUE_Msk (0xFFFFUL << GRTC_INTERVAL_VALUE_Pos)


/* GRTC_WAKETIME: GRTC wake up time. */
  #define GRTC_WAKETIME_ResetValue (0x00000001UL)

/* VALUE @Bits 0..7 : Number of LFCLK clock cycles to wake up before the next scheduled EVENTS_COMPARE event */
  #define GRTC_WAKETIME_VALUE_Pos (0UL)
  #define GRTC_WAKETIME_VALUE_Msk (0xFFUL << GRTC_WAKETIME_VALUE_Pos)


/* GRTC_PWMCONFIG: PWM configuration. */
  #define GRTC_PWMCONFIG_ResetValue (0x00000000UL)

/* COMPAREVALUE @Bits 0..7 : The PWM compare value */
  #define GRTC_PWMCONFIG_COMPAREVALUE_Pos (0UL)
  #define GRTC_PWMCONFIG_COMPAREVALUE_Msk (0xFFUL << GRTC_PWMCONFIG_COMPAREVALUE_Pos)


/* GRTC_CLKOUT: Configuration of clock output */
  #define GRTC_CLKOUT_ResetValue (0x00000000UL)

/* CLKOUT32K @Bit 0 : Enable 32Ki clock output on pin */
  #define GRTC_CLKOUT_CLKOUT32K_Pos (0UL)
  #define GRTC_CLKOUT_CLKOUT32K_Msk (0x1UL << GRTC_CLKOUT_CLKOUT32K_Pos)
  #define GRTC_CLKOUT_CLKOUT32K_Min (0x0UL)
  #define GRTC_CLKOUT_CLKOUT32K_Max (0x1UL)
  #define GRTC_CLKOUT_CLKOUT32K_Disabled (0x0UL)
  #define GRTC_CLKOUT_CLKOUT32K_Enabled (0x1UL)

/* CLKOUTFAST @Bit 1 : Enable fast clock output on pin */
  #define GRTC_CLKOUT_CLKOUTFAST_Pos (1UL)
  #define GRTC_CLKOUT_CLKOUTFAST_Msk (0x1UL << GRTC_CLKOUT_CLKOUTFAST_Pos)
  #define GRTC_CLKOUT_CLKOUTFAST_Min (0x0UL)
  #define GRTC_CLKOUT_CLKOUTFAST_Max (0x1UL)
  #define GRTC_CLKOUT_CLKOUTFAST_Disabled (0x0UL)
  #define GRTC_CLKOUT_CLKOUTFAST_Enabled (0x1UL)


/* GRTC_CLKCFG: Clock Configuration */
  #define GRTC_CLKCFG_ResetValue (0x00010001UL)

/* CLKFASTDIV @Bits 0..7 : Fast clock divisor value of clock output */
  #define GRTC_CLKCFG_CLKFASTDIV_Pos (0UL)
  #define GRTC_CLKCFG_CLKFASTDIV_Msk (0xFFUL << GRTC_CLKCFG_CLKFASTDIV_Pos)
  #define GRTC_CLKCFG_CLKFASTDIV_Min (0x01UL)
  #define GRTC_CLKCFG_CLKFASTDIV_Max (0xFFUL)

/* CLKSEL @Bits 16..17 : GRTC LFCLK clock source selection */
  #define GRTC_CLKCFG_CLKSEL_Pos (16UL)
  #define GRTC_CLKCFG_CLKSEL_Msk (0x3UL << GRTC_CLKCFG_CLKSEL_Pos)
  #define GRTC_CLKCFG_CLKSEL_Min (0x0UL)
  #define GRTC_CLKCFG_CLKSEL_Max (0x2UL)
  #define GRTC_CLKCFG_CLKSEL_LFXO (0x0UL)
  #define GRTC_CLKCFG_CLKSEL_SystemLFCLK (0x1UL)
  #define GRTC_CLKCFG_CLKSEL_LFLPRC (0x2UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          HFXO64M                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ===================================================== Struct HFXO64M ====================================================== */
/**
  * @brief HFXO64M peripheral
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_STARTED;
    __IOM uint32_t EVENTS_STOPPED;
    __IOM uint32_t EVENTS_ERRORBIAS;
    __IOM uint32_t EVENTS_ERRORDETECTOR;
    __IOM uint32_t EVENTS_ERRORTCXO;
    __IOM uint32_t EVENTS_STARTREQ;
    __IOM uint32_t EVENTS_STOPREQ;
    __IM uint32_t RESERVED1[121];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
  } NRF_HFXO64M_Type;

/* HFXO64M_EVENTS_STARTED: HFXO64M started */
  #define HFXO64M_EVENTS_STARTED_ResetValue (0x00000000UL)

/* EVENTS_STARTED @Bit 0 : HFXO64M started */
  #define HFXO64M_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL)
  #define HFXO64M_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << HFXO64M_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_STARTED field.*/
  #define HFXO64M_EVENTS_STARTED_EVENTS_STARTED_Min (0x0UL)
  #define HFXO64M_EVENTS_STARTED_EVENTS_STARTED_Max (0x1UL)
  #define HFXO64M_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0x0UL)
  #define HFXO64M_EVENTS_STARTED_EVENTS_STARTED_Generated (0x1UL)


/* HFXO64M_EVENTS_STOPPED: HFXO64M stopped */
  #define HFXO64M_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : HFXO64M stopped */
  #define HFXO64M_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define HFXO64M_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << HFXO64M_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define HFXO64M_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define HFXO64M_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define HFXO64M_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define HFXO64M_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* HFXO64M_EVENTS_ERRORBIAS: Error with BIAS setup */
  #define HFXO64M_EVENTS_ERRORBIAS_ResetValue (0x00000000UL)

/* EVENTS_ERRORBIAS @Bit 0 : Error with BIAS setup */
  #define HFXO64M_EVENTS_ERRORBIAS_EVENTS_ERRORBIAS_Pos (0UL)
  #define HFXO64M_EVENTS_ERRORBIAS_EVENTS_ERRORBIAS_Msk (0x1UL << HFXO64M_EVENTS_ERRORBIAS_EVENTS_ERRORBIAS_Pos) /*!< Bit mask
                                                                            of EVENTS_ERRORBIAS field.*/
  #define HFXO64M_EVENTS_ERRORBIAS_EVENTS_ERRORBIAS_Min (0x0UL)
  #define HFXO64M_EVENTS_ERRORBIAS_EVENTS_ERRORBIAS_Max (0x1UL)
  #define HFXO64M_EVENTS_ERRORBIAS_EVENTS_ERRORBIAS_NotGenerated (0x0UL)
  #define HFXO64M_EVENTS_ERRORBIAS_EVENTS_ERRORBIAS_Generated (0x1UL)


/* HFXO64M_EVENTS_ERRORDETECTOR: Error with DETECTOR */
  #define HFXO64M_EVENTS_ERRORDETECTOR_ResetValue (0x00000000UL)

/* EVENTS_ERRORDETECTOR @Bit 0 : Error with DETECTOR */
  #define HFXO64M_EVENTS_ERRORDETECTOR_EVENTS_ERRORDETECTOR_Pos (0UL)
  #define HFXO64M_EVENTS_ERRORDETECTOR_EVENTS_ERRORDETECTOR_Msk (0x1UL << HFXO64M_EVENTS_ERRORDETECTOR_EVENTS_ERRORDETECTOR_Pos)
                                                                            /*!< Bit mask of EVENTS_ERRORDETECTOR field.*/
  #define HFXO64M_EVENTS_ERRORDETECTOR_EVENTS_ERRORDETECTOR_Min (0x0UL) /*!< Min enumerator value of EVENTS_ERRORDETECTOR
                                                                            field.*/
  #define HFXO64M_EVENTS_ERRORDETECTOR_EVENTS_ERRORDETECTOR_Max (0x1UL) /*!< Max enumerator value of EVENTS_ERRORDETECTOR
                                                                            field.*/
  #define HFXO64M_EVENTS_ERRORDETECTOR_EVENTS_ERRORDETECTOR_NotGenerated (0x0UL)
  #define HFXO64M_EVENTS_ERRORDETECTOR_EVENTS_ERRORDETECTOR_Generated (0x1UL)


/* HFXO64M_EVENTS_ERRORTCXO: Error with TCXO startup */
  #define HFXO64M_EVENTS_ERRORTCXO_ResetValue (0x00000000UL)

/* EVENTS_ERRORTCXO @Bit 0 : Error with TCXO startup */
  #define HFXO64M_EVENTS_ERRORTCXO_EVENTS_ERRORTCXO_Pos (0UL)
  #define HFXO64M_EVENTS_ERRORTCXO_EVENTS_ERRORTCXO_Msk (0x1UL << HFXO64M_EVENTS_ERRORTCXO_EVENTS_ERRORTCXO_Pos) /*!< Bit mask
                                                                            of EVENTS_ERRORTCXO field.*/
  #define HFXO64M_EVENTS_ERRORTCXO_EVENTS_ERRORTCXO_Min (0x0UL)
  #define HFXO64M_EVENTS_ERRORTCXO_EVENTS_ERRORTCXO_Max (0x1UL)
  #define HFXO64M_EVENTS_ERRORTCXO_EVENTS_ERRORTCXO_NotGenerated (0x0UL)
  #define HFXO64M_EVENTS_ERRORTCXO_EVENTS_ERRORTCXO_Generated (0x1UL)


/* HFXO64M_EVENTS_STARTREQ: Clock start has been requested */
  #define HFXO64M_EVENTS_STARTREQ_ResetValue (0x00000000UL)

/* EVENTS_STARTREQ @Bit 0 : Clock start has been requested */
  #define HFXO64M_EVENTS_STARTREQ_EVENTS_STARTREQ_Pos (0UL)
  #define HFXO64M_EVENTS_STARTREQ_EVENTS_STARTREQ_Msk (0x1UL << HFXO64M_EVENTS_STARTREQ_EVENTS_STARTREQ_Pos) /*!< Bit mask of
                                                                            EVENTS_STARTREQ field.*/
  #define HFXO64M_EVENTS_STARTREQ_EVENTS_STARTREQ_Min (0x0UL)
  #define HFXO64M_EVENTS_STARTREQ_EVENTS_STARTREQ_Max (0x1UL)
  #define HFXO64M_EVENTS_STARTREQ_EVENTS_STARTREQ_NotGenerated (0x0UL)
  #define HFXO64M_EVENTS_STARTREQ_EVENTS_STARTREQ_Generated (0x1UL)


/* HFXO64M_EVENTS_STOPREQ: Clock stop has been requested */
  #define HFXO64M_EVENTS_STOPREQ_ResetValue (0x00000000UL)

/* EVENTS_STOPREQ @Bit 0 : Clock stop has been requested */
  #define HFXO64M_EVENTS_STOPREQ_EVENTS_STOPREQ_Pos (0UL)
  #define HFXO64M_EVENTS_STOPREQ_EVENTS_STOPREQ_Msk (0x1UL << HFXO64M_EVENTS_STOPREQ_EVENTS_STOPREQ_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPREQ field.*/
  #define HFXO64M_EVENTS_STOPREQ_EVENTS_STOPREQ_Min (0x0UL)
  #define HFXO64M_EVENTS_STOPREQ_EVENTS_STOPREQ_Max (0x1UL)
  #define HFXO64M_EVENTS_STOPREQ_EVENTS_STOPREQ_NotGenerated (0x0UL)
  #define HFXO64M_EVENTS_STOPREQ_EVENTS_STOPREQ_Generated (0x1UL)


/* HFXO64M_INTEN: Enable or disable interrupt */
  #define HFXO64M_INTEN_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Enable or disable interrupt for event STARTED */
  #define HFXO64M_INTEN_STARTED_Pos (0UL)
  #define HFXO64M_INTEN_STARTED_Msk (0x1UL << HFXO64M_INTEN_STARTED_Pos)
  #define HFXO64M_INTEN_STARTED_Min (0x0UL)
  #define HFXO64M_INTEN_STARTED_Max (0x1UL)
  #define HFXO64M_INTEN_STARTED_Disabled (0x0UL)
  #define HFXO64M_INTEN_STARTED_Enabled (0x1UL)

/* STOPPED @Bit 1 : Enable or disable interrupt for event STOPPED */
  #define HFXO64M_INTEN_STOPPED_Pos (1UL)
  #define HFXO64M_INTEN_STOPPED_Msk (0x1UL << HFXO64M_INTEN_STOPPED_Pos)
  #define HFXO64M_INTEN_STOPPED_Min (0x0UL)
  #define HFXO64M_INTEN_STOPPED_Max (0x1UL)
  #define HFXO64M_INTEN_STOPPED_Disabled (0x0UL)
  #define HFXO64M_INTEN_STOPPED_Enabled (0x1UL)

/* ERRORBIAS @Bit 2 : Enable or disable interrupt for event ERRORBIAS */
  #define HFXO64M_INTEN_ERRORBIAS_Pos (2UL)
  #define HFXO64M_INTEN_ERRORBIAS_Msk (0x1UL << HFXO64M_INTEN_ERRORBIAS_Pos)
  #define HFXO64M_INTEN_ERRORBIAS_Min (0x0UL)
  #define HFXO64M_INTEN_ERRORBIAS_Max (0x1UL)
  #define HFXO64M_INTEN_ERRORBIAS_Disabled (0x0UL)
  #define HFXO64M_INTEN_ERRORBIAS_Enabled (0x1UL)

/* ERRORDETECTOR @Bit 3 : Enable or disable interrupt for event ERRORDETECTOR */
  #define HFXO64M_INTEN_ERRORDETECTOR_Pos (3UL)
  #define HFXO64M_INTEN_ERRORDETECTOR_Msk (0x1UL << HFXO64M_INTEN_ERRORDETECTOR_Pos)
  #define HFXO64M_INTEN_ERRORDETECTOR_Min (0x0UL)
  #define HFXO64M_INTEN_ERRORDETECTOR_Max (0x1UL)
  #define HFXO64M_INTEN_ERRORDETECTOR_Disabled (0x0UL)
  #define HFXO64M_INTEN_ERRORDETECTOR_Enabled (0x1UL)

/* ERRORTCXO @Bit 4 : Enable or disable interrupt for event ERRORTCXO */
  #define HFXO64M_INTEN_ERRORTCXO_Pos (4UL)
  #define HFXO64M_INTEN_ERRORTCXO_Msk (0x1UL << HFXO64M_INTEN_ERRORTCXO_Pos)
  #define HFXO64M_INTEN_ERRORTCXO_Min (0x0UL)
  #define HFXO64M_INTEN_ERRORTCXO_Max (0x1UL)
  #define HFXO64M_INTEN_ERRORTCXO_Disabled (0x0UL)
  #define HFXO64M_INTEN_ERRORTCXO_Enabled (0x1UL)

/* STARTREQ @Bit 5 : Enable or disable interrupt for event STARTREQ */
  #define HFXO64M_INTEN_STARTREQ_Pos (5UL)
  #define HFXO64M_INTEN_STARTREQ_Msk (0x1UL << HFXO64M_INTEN_STARTREQ_Pos)
  #define HFXO64M_INTEN_STARTREQ_Min (0x0UL)
  #define HFXO64M_INTEN_STARTREQ_Max (0x1UL)
  #define HFXO64M_INTEN_STARTREQ_Disabled (0x0UL)
  #define HFXO64M_INTEN_STARTREQ_Enabled (0x1UL)

/* STOPREQ @Bit 6 : Enable or disable interrupt for event STOPREQ */
  #define HFXO64M_INTEN_STOPREQ_Pos (6UL)
  #define HFXO64M_INTEN_STOPREQ_Msk (0x1UL << HFXO64M_INTEN_STOPREQ_Pos)
  #define HFXO64M_INTEN_STOPREQ_Min (0x0UL)
  #define HFXO64M_INTEN_STOPREQ_Max (0x1UL)
  #define HFXO64M_INTEN_STOPREQ_Disabled (0x0UL)
  #define HFXO64M_INTEN_STOPREQ_Enabled (0x1UL)


/* HFXO64M_INTENSET: Enable interrupt */
  #define HFXO64M_INTENSET_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to enable interrupt for event STARTED */
  #define HFXO64M_INTENSET_STARTED_Pos (0UL)
  #define HFXO64M_INTENSET_STARTED_Msk (0x1UL << HFXO64M_INTENSET_STARTED_Pos)
  #define HFXO64M_INTENSET_STARTED_Min (0x0UL)
  #define HFXO64M_INTENSET_STARTED_Max (0x1UL)
  #define HFXO64M_INTENSET_STARTED_Set (0x1UL)
  #define HFXO64M_INTENSET_STARTED_Disabled (0x0UL)
  #define HFXO64M_INTENSET_STARTED_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define HFXO64M_INTENSET_STOPPED_Pos (1UL)
  #define HFXO64M_INTENSET_STOPPED_Msk (0x1UL << HFXO64M_INTENSET_STOPPED_Pos)
  #define HFXO64M_INTENSET_STOPPED_Min (0x0UL)
  #define HFXO64M_INTENSET_STOPPED_Max (0x1UL)
  #define HFXO64M_INTENSET_STOPPED_Set (0x1UL)
  #define HFXO64M_INTENSET_STOPPED_Disabled (0x0UL)
  #define HFXO64M_INTENSET_STOPPED_Enabled (0x1UL)

/* ERRORBIAS @Bit 2 : Write '1' to enable interrupt for event ERRORBIAS */
  #define HFXO64M_INTENSET_ERRORBIAS_Pos (2UL)
  #define HFXO64M_INTENSET_ERRORBIAS_Msk (0x1UL << HFXO64M_INTENSET_ERRORBIAS_Pos)
  #define HFXO64M_INTENSET_ERRORBIAS_Min (0x0UL)
  #define HFXO64M_INTENSET_ERRORBIAS_Max (0x1UL)
  #define HFXO64M_INTENSET_ERRORBIAS_Set (0x1UL)
  #define HFXO64M_INTENSET_ERRORBIAS_Disabled (0x0UL)
  #define HFXO64M_INTENSET_ERRORBIAS_Enabled (0x1UL)

/* ERRORDETECTOR @Bit 3 : Write '1' to enable interrupt for event ERRORDETECTOR */
  #define HFXO64M_INTENSET_ERRORDETECTOR_Pos (3UL)
  #define HFXO64M_INTENSET_ERRORDETECTOR_Msk (0x1UL << HFXO64M_INTENSET_ERRORDETECTOR_Pos) /*!< Bit mask of ERRORDETECTOR
                                                                            field.*/
  #define HFXO64M_INTENSET_ERRORDETECTOR_Min (0x0UL)
  #define HFXO64M_INTENSET_ERRORDETECTOR_Max (0x1UL)
  #define HFXO64M_INTENSET_ERRORDETECTOR_Set (0x1UL)
  #define HFXO64M_INTENSET_ERRORDETECTOR_Disabled (0x0UL)
  #define HFXO64M_INTENSET_ERRORDETECTOR_Enabled (0x1UL)

/* ERRORTCXO @Bit 4 : Write '1' to enable interrupt for event ERRORTCXO */
  #define HFXO64M_INTENSET_ERRORTCXO_Pos (4UL)
  #define HFXO64M_INTENSET_ERRORTCXO_Msk (0x1UL << HFXO64M_INTENSET_ERRORTCXO_Pos)
  #define HFXO64M_INTENSET_ERRORTCXO_Min (0x0UL)
  #define HFXO64M_INTENSET_ERRORTCXO_Max (0x1UL)
  #define HFXO64M_INTENSET_ERRORTCXO_Set (0x1UL)
  #define HFXO64M_INTENSET_ERRORTCXO_Disabled (0x0UL)
  #define HFXO64M_INTENSET_ERRORTCXO_Enabled (0x1UL)

/* STARTREQ @Bit 5 : Write '1' to enable interrupt for event STARTREQ */
  #define HFXO64M_INTENSET_STARTREQ_Pos (5UL)
  #define HFXO64M_INTENSET_STARTREQ_Msk (0x1UL << HFXO64M_INTENSET_STARTREQ_Pos)
  #define HFXO64M_INTENSET_STARTREQ_Min (0x0UL)
  #define HFXO64M_INTENSET_STARTREQ_Max (0x1UL)
  #define HFXO64M_INTENSET_STARTREQ_Set (0x1UL)
  #define HFXO64M_INTENSET_STARTREQ_Disabled (0x0UL)
  #define HFXO64M_INTENSET_STARTREQ_Enabled (0x1UL)

/* STOPREQ @Bit 6 : Write '1' to enable interrupt for event STOPREQ */
  #define HFXO64M_INTENSET_STOPREQ_Pos (6UL)
  #define HFXO64M_INTENSET_STOPREQ_Msk (0x1UL << HFXO64M_INTENSET_STOPREQ_Pos)
  #define HFXO64M_INTENSET_STOPREQ_Min (0x0UL)
  #define HFXO64M_INTENSET_STOPREQ_Max (0x1UL)
  #define HFXO64M_INTENSET_STOPREQ_Set (0x1UL)
  #define HFXO64M_INTENSET_STOPREQ_Disabled (0x0UL)
  #define HFXO64M_INTENSET_STOPREQ_Enabled (0x1UL)


/* HFXO64M_INTENCLR: Disable interrupt */
  #define HFXO64M_INTENCLR_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to disable interrupt for event STARTED */
  #define HFXO64M_INTENCLR_STARTED_Pos (0UL)
  #define HFXO64M_INTENCLR_STARTED_Msk (0x1UL << HFXO64M_INTENCLR_STARTED_Pos)
  #define HFXO64M_INTENCLR_STARTED_Min (0x0UL)
  #define HFXO64M_INTENCLR_STARTED_Max (0x1UL)
  #define HFXO64M_INTENCLR_STARTED_Clear (0x1UL)
  #define HFXO64M_INTENCLR_STARTED_Disabled (0x0UL)
  #define HFXO64M_INTENCLR_STARTED_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define HFXO64M_INTENCLR_STOPPED_Pos (1UL)
  #define HFXO64M_INTENCLR_STOPPED_Msk (0x1UL << HFXO64M_INTENCLR_STOPPED_Pos)
  #define HFXO64M_INTENCLR_STOPPED_Min (0x0UL)
  #define HFXO64M_INTENCLR_STOPPED_Max (0x1UL)
  #define HFXO64M_INTENCLR_STOPPED_Clear (0x1UL)
  #define HFXO64M_INTENCLR_STOPPED_Disabled (0x0UL)
  #define HFXO64M_INTENCLR_STOPPED_Enabled (0x1UL)

/* ERRORBIAS @Bit 2 : Write '1' to disable interrupt for event ERRORBIAS */
  #define HFXO64M_INTENCLR_ERRORBIAS_Pos (2UL)
  #define HFXO64M_INTENCLR_ERRORBIAS_Msk (0x1UL << HFXO64M_INTENCLR_ERRORBIAS_Pos)
  #define HFXO64M_INTENCLR_ERRORBIAS_Min (0x0UL)
  #define HFXO64M_INTENCLR_ERRORBIAS_Max (0x1UL)
  #define HFXO64M_INTENCLR_ERRORBIAS_Clear (0x1UL)
  #define HFXO64M_INTENCLR_ERRORBIAS_Disabled (0x0UL)
  #define HFXO64M_INTENCLR_ERRORBIAS_Enabled (0x1UL)

/* ERRORDETECTOR @Bit 3 : Write '1' to disable interrupt for event ERRORDETECTOR */
  #define HFXO64M_INTENCLR_ERRORDETECTOR_Pos (3UL)
  #define HFXO64M_INTENCLR_ERRORDETECTOR_Msk (0x1UL << HFXO64M_INTENCLR_ERRORDETECTOR_Pos) /*!< Bit mask of ERRORDETECTOR
                                                                            field.*/
  #define HFXO64M_INTENCLR_ERRORDETECTOR_Min (0x0UL)
  #define HFXO64M_INTENCLR_ERRORDETECTOR_Max (0x1UL)
  #define HFXO64M_INTENCLR_ERRORDETECTOR_Clear (0x1UL)
  #define HFXO64M_INTENCLR_ERRORDETECTOR_Disabled (0x0UL)
  #define HFXO64M_INTENCLR_ERRORDETECTOR_Enabled (0x1UL)

/* ERRORTCXO @Bit 4 : Write '1' to disable interrupt for event ERRORTCXO */
  #define HFXO64M_INTENCLR_ERRORTCXO_Pos (4UL)
  #define HFXO64M_INTENCLR_ERRORTCXO_Msk (0x1UL << HFXO64M_INTENCLR_ERRORTCXO_Pos)
  #define HFXO64M_INTENCLR_ERRORTCXO_Min (0x0UL)
  #define HFXO64M_INTENCLR_ERRORTCXO_Max (0x1UL)
  #define HFXO64M_INTENCLR_ERRORTCXO_Clear (0x1UL)
  #define HFXO64M_INTENCLR_ERRORTCXO_Disabled (0x0UL)
  #define HFXO64M_INTENCLR_ERRORTCXO_Enabled (0x1UL)

/* STARTREQ @Bit 5 : Write '1' to disable interrupt for event STARTREQ */
  #define HFXO64M_INTENCLR_STARTREQ_Pos (5UL)
  #define HFXO64M_INTENCLR_STARTREQ_Msk (0x1UL << HFXO64M_INTENCLR_STARTREQ_Pos)
  #define HFXO64M_INTENCLR_STARTREQ_Min (0x0UL)
  #define HFXO64M_INTENCLR_STARTREQ_Max (0x1UL)
  #define HFXO64M_INTENCLR_STARTREQ_Clear (0x1UL)
  #define HFXO64M_INTENCLR_STARTREQ_Disabled (0x0UL)
  #define HFXO64M_INTENCLR_STARTREQ_Enabled (0x1UL)

/* STOPREQ @Bit 6 : Write '1' to disable interrupt for event STOPREQ */
  #define HFXO64M_INTENCLR_STOPREQ_Pos (6UL)
  #define HFXO64M_INTENCLR_STOPREQ_Msk (0x1UL << HFXO64M_INTENCLR_STOPREQ_Pos)
  #define HFXO64M_INTENCLR_STOPREQ_Min (0x0UL)
  #define HFXO64M_INTENCLR_STOPREQ_Max (0x1UL)
  #define HFXO64M_INTENCLR_STOPREQ_Clear (0x1UL)
  #define HFXO64M_INTENCLR_STOPREQ_Disabled (0x0UL)
  #define HFXO64M_INTENCLR_STOPREQ_Enabled (0x1UL)


/* HFXO64M_INTPEND: Pending interrupts */
  #define HFXO64M_INTPEND_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Read pending status of interrupt for event STARTED */
  #define HFXO64M_INTPEND_STARTED_Pos (0UL)
  #define HFXO64M_INTPEND_STARTED_Msk (0x1UL << HFXO64M_INTPEND_STARTED_Pos)
  #define HFXO64M_INTPEND_STARTED_Min (0x0UL)
  #define HFXO64M_INTPEND_STARTED_Max (0x1UL)
  #define HFXO64M_INTPEND_STARTED_NotPending (0x0UL)
  #define HFXO64M_INTPEND_STARTED_Pending (0x1UL)

/* STOPPED @Bit 1 : Read pending status of interrupt for event STOPPED */
  #define HFXO64M_INTPEND_STOPPED_Pos (1UL)
  #define HFXO64M_INTPEND_STOPPED_Msk (0x1UL << HFXO64M_INTPEND_STOPPED_Pos)
  #define HFXO64M_INTPEND_STOPPED_Min (0x0UL)
  #define HFXO64M_INTPEND_STOPPED_Max (0x1UL)
  #define HFXO64M_INTPEND_STOPPED_NotPending (0x0UL)
  #define HFXO64M_INTPEND_STOPPED_Pending (0x1UL)

/* ERRORBIAS @Bit 2 : Read pending status of interrupt for event ERRORBIAS */
  #define HFXO64M_INTPEND_ERRORBIAS_Pos (2UL)
  #define HFXO64M_INTPEND_ERRORBIAS_Msk (0x1UL << HFXO64M_INTPEND_ERRORBIAS_Pos)
  #define HFXO64M_INTPEND_ERRORBIAS_Min (0x0UL)
  #define HFXO64M_INTPEND_ERRORBIAS_Max (0x1UL)
  #define HFXO64M_INTPEND_ERRORBIAS_NotPending (0x0UL)
  #define HFXO64M_INTPEND_ERRORBIAS_Pending (0x1UL)

/* ERRORDETECTOR @Bit 3 : Read pending status of interrupt for event ERRORDETECTOR */
  #define HFXO64M_INTPEND_ERRORDETECTOR_Pos (3UL)
  #define HFXO64M_INTPEND_ERRORDETECTOR_Msk (0x1UL << HFXO64M_INTPEND_ERRORDETECTOR_Pos)
  #define HFXO64M_INTPEND_ERRORDETECTOR_Min (0x0UL)
  #define HFXO64M_INTPEND_ERRORDETECTOR_Max (0x1UL)
  #define HFXO64M_INTPEND_ERRORDETECTOR_NotPending (0x0UL)
  #define HFXO64M_INTPEND_ERRORDETECTOR_Pending (0x1UL)

/* ERRORTCXO @Bit 4 : Read pending status of interrupt for event ERRORTCXO */
  #define HFXO64M_INTPEND_ERRORTCXO_Pos (4UL)
  #define HFXO64M_INTPEND_ERRORTCXO_Msk (0x1UL << HFXO64M_INTPEND_ERRORTCXO_Pos)
  #define HFXO64M_INTPEND_ERRORTCXO_Min (0x0UL)
  #define HFXO64M_INTPEND_ERRORTCXO_Max (0x1UL)
  #define HFXO64M_INTPEND_ERRORTCXO_NotPending (0x0UL)
  #define HFXO64M_INTPEND_ERRORTCXO_Pending (0x1UL)

/* STARTREQ @Bit 5 : Read pending status of interrupt for event STARTREQ */
  #define HFXO64M_INTPEND_STARTREQ_Pos (5UL)
  #define HFXO64M_INTPEND_STARTREQ_Msk (0x1UL << HFXO64M_INTPEND_STARTREQ_Pos)
  #define HFXO64M_INTPEND_STARTREQ_Min (0x0UL)
  #define HFXO64M_INTPEND_STARTREQ_Max (0x1UL)
  #define HFXO64M_INTPEND_STARTREQ_NotPending (0x0UL)
  #define HFXO64M_INTPEND_STARTREQ_Pending (0x1UL)

/* STOPREQ @Bit 6 : Read pending status of interrupt for event STOPREQ */
  #define HFXO64M_INTPEND_STOPREQ_Pos (6UL)
  #define HFXO64M_INTPEND_STOPREQ_Msk (0x1UL << HFXO64M_INTPEND_STOPREQ_Pos)
  #define HFXO64M_INTPEND_STOPREQ_Min (0x0UL)
  #define HFXO64M_INTPEND_STOPREQ_Max (0x1UL)
  #define HFXO64M_INTPEND_STOPREQ_NotPending (0x0UL)
  #define HFXO64M_INTPEND_STOPREQ_Pending (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           IPCT                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct IPCT_OVERFLOW =================================================== */
/**
  * @brief OVERFLOW [IPCT_OVERFLOW] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SEND;
} NRF_IPCT_OVERFLOW_Type;

/* IPCT_OVERFLOW_SEND: Overflow status for SEND tasks Write 0 to clear */
  #define IPCT_OVERFLOW_SEND_ResetValue (0x00000000UL)

/* SEND0 @Bit 0 : Overflow status for SEND[0] task */
  #define IPCT_OVERFLOW_SEND_SEND0_Pos (0UL)
  #define IPCT_OVERFLOW_SEND_SEND0_Msk (0x1UL << IPCT_OVERFLOW_SEND_SEND0_Pos)
  #define IPCT_OVERFLOW_SEND_SEND0_Min (0x0UL)
  #define IPCT_OVERFLOW_SEND_SEND0_Max (0x1UL)
  #define IPCT_OVERFLOW_SEND_SEND0_Overflow (0x1UL)
  #define IPCT_OVERFLOW_SEND_SEND0_NoOverflow (0x0UL)

/* SEND1 @Bit 1 : Overflow status for SEND[1] task */
  #define IPCT_OVERFLOW_SEND_SEND1_Pos (1UL)
  #define IPCT_OVERFLOW_SEND_SEND1_Msk (0x1UL << IPCT_OVERFLOW_SEND_SEND1_Pos)
  #define IPCT_OVERFLOW_SEND_SEND1_Min (0x0UL)
  #define IPCT_OVERFLOW_SEND_SEND1_Max (0x1UL)
  #define IPCT_OVERFLOW_SEND_SEND1_Overflow (0x1UL)
  #define IPCT_OVERFLOW_SEND_SEND1_NoOverflow (0x0UL)

/* SEND2 @Bit 2 : Overflow status for SEND[2] task */
  #define IPCT_OVERFLOW_SEND_SEND2_Pos (2UL)
  #define IPCT_OVERFLOW_SEND_SEND2_Msk (0x1UL << IPCT_OVERFLOW_SEND_SEND2_Pos)
  #define IPCT_OVERFLOW_SEND_SEND2_Min (0x0UL)
  #define IPCT_OVERFLOW_SEND_SEND2_Max (0x1UL)
  #define IPCT_OVERFLOW_SEND_SEND2_Overflow (0x1UL)
  #define IPCT_OVERFLOW_SEND_SEND2_NoOverflow (0x0UL)

/* SEND3 @Bit 3 : Overflow status for SEND[3] task */
  #define IPCT_OVERFLOW_SEND_SEND3_Pos (3UL)
  #define IPCT_OVERFLOW_SEND_SEND3_Msk (0x1UL << IPCT_OVERFLOW_SEND_SEND3_Pos)
  #define IPCT_OVERFLOW_SEND_SEND3_Min (0x0UL)
  #define IPCT_OVERFLOW_SEND_SEND3_Max (0x1UL)
  #define IPCT_OVERFLOW_SEND_SEND3_Overflow (0x1UL)
  #define IPCT_OVERFLOW_SEND_SEND3_NoOverflow (0x0UL)


/* ======================================================= Struct IPCT ======================================================= */
/**
  * @brief IPCT APB registers
  */
  typedef struct {
    __OM uint32_t TASKS_SEND[4];                     /*!< (@ 0x00000000) Trigger event on IPCT source channel n if there are no
                                                                         active signals present on that channel*/
    __IM uint32_t RESERVED[12];
    __OM uint32_t TASKS_FLUSH[4];                    /*!< (@ 0x00000040) Flush IPCT sink channel n. Any pending IPCT signal on
                                                                         that channel will re-trigger the RECEIVE[n] event. The
                                                                         flush can happen automatically by configuring the
                                                                         SHORTS register accordingly.*/
    __IM uint32_t RESERVED1[12];
    __IOM uint32_t SUBSCRIBE_SEND[4];
    __IM uint32_t RESERVED2[12];
    __IOM uint32_t SUBSCRIBE_FLUSH[4];
    __IM uint32_t RESERVED3[12];
    __IOM uint32_t EVENTS_RECEIVE[4];
    __IM uint32_t RESERVED4[12];
    __IOM uint32_t EVENTS_READY[4];                  /*!< (@ 0x00000140) Event received when hardware handshake of SEND task for
                                                                         IPCT source channel n is complete and a new signal can
                                                                         be triggered on that channel.*/
    __IM uint32_t RESERVED5[12];
    __IOM uint32_t PUBLISH_RECEIVE[4];
    __IM uint32_t RESERVED6[12];
    __IOM uint32_t PUBLISH_READY[4];
    __IM uint32_t RESERVED7[12];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED8[63];
    __IOM uint32_t INTEN0;
    __IOM uint32_t INTENSET0;
    __IOM uint32_t INTENCLR0;
    __IM uint32_t INTPEND0;
    __IOM uint32_t INTEN1;
    __IOM uint32_t INTENSET1;
    __IOM uint32_t INTENCLR1;
    __IM uint32_t INTPEND1;
    __IOM uint32_t INTEN2;
    __IOM uint32_t INTENSET2;
    __IOM uint32_t INTENCLR2;
    __IM uint32_t INTPEND2;
    __IOM uint32_t INTEN3;
    __IOM uint32_t INTENSET3;
    __IOM uint32_t INTENCLR3;
    __IM uint32_t INTPEND3;
    __IM uint32_t RESERVED9[48];
    __IOM NRF_IPCT_OVERFLOW_Type OVERFLOW;
  } NRF_IPCT_Type;

/* IPCT_TASKS_SEND: Trigger event on IPCT source channel n if there are no active signals present on that channel */
  #define IPCT_TASKS_SEND_MaxCount (4UL)
  #define IPCT_TASKS_SEND_MaxIndex (3UL)
  #define IPCT_TASKS_SEND_MinIndex (0UL)
  #define IPCT_TASKS_SEND_ResetValue (0x00000000UL)

/* TASKS_SEND @Bit 0 : Trigger event on IPCT source channel n if there are no active signals present on that channel */
  #define IPCT_TASKS_SEND_TASKS_SEND_Pos (0UL)
  #define IPCT_TASKS_SEND_TASKS_SEND_Msk (0x1UL << IPCT_TASKS_SEND_TASKS_SEND_Pos)
  #define IPCT_TASKS_SEND_TASKS_SEND_Min (0x1UL)
  #define IPCT_TASKS_SEND_TASKS_SEND_Max (0x1UL)
  #define IPCT_TASKS_SEND_TASKS_SEND_Trigger (0x1UL)


/* IPCT_TASKS_FLUSH: Flush IPCT sink channel n. Any pending IPCT signal on that channel will re-trigger the RECEIVE[n] event.
                      The flush can happen automatically by configuring the SHORTS register accordingly. */

  #define IPCT_TASKS_FLUSH_MaxCount (4UL)
  #define IPCT_TASKS_FLUSH_MaxIndex (3UL)
  #define IPCT_TASKS_FLUSH_MinIndex (0UL)
  #define IPCT_TASKS_FLUSH_ResetValue (0x00000000UL)

/* TASKS_FLUSH @Bit 0 : Flush IPCT sink channel n. Any pending IPCT signal on that channel will re-trigger the RECEIVE[n] event.
                        The flush can happen automatically by configuring the SHORTS register accordingly. */

  #define IPCT_TASKS_FLUSH_TASKS_FLUSH_Pos (0UL)
  #define IPCT_TASKS_FLUSH_TASKS_FLUSH_Msk (0x1UL << IPCT_TASKS_FLUSH_TASKS_FLUSH_Pos)
  #define IPCT_TASKS_FLUSH_TASKS_FLUSH_Min (0x1UL)
  #define IPCT_TASKS_FLUSH_TASKS_FLUSH_Max (0x1UL)
  #define IPCT_TASKS_FLUSH_TASKS_FLUSH_Trigger (0x1UL)


/* IPCT_SUBSCRIBE_SEND: Subscribe configuration for task SEND[n] */
  #define IPCT_SUBSCRIBE_SEND_MaxCount (4UL)
  #define IPCT_SUBSCRIBE_SEND_MaxIndex (3UL)
  #define IPCT_SUBSCRIBE_SEND_MinIndex (0UL)
  #define IPCT_SUBSCRIBE_SEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SEND[n] will subscribe to */
  #define IPCT_SUBSCRIBE_SEND_CHIDX_Pos (0UL)
  #define IPCT_SUBSCRIBE_SEND_CHIDX_Msk (0xFFUL << IPCT_SUBSCRIBE_SEND_CHIDX_Pos)
  #define IPCT_SUBSCRIBE_SEND_CHIDX_Min (0x00UL)
  #define IPCT_SUBSCRIBE_SEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define IPCT_SUBSCRIBE_SEND_EN_Pos (31UL)
  #define IPCT_SUBSCRIBE_SEND_EN_Msk (0x1UL << IPCT_SUBSCRIBE_SEND_EN_Pos)
  #define IPCT_SUBSCRIBE_SEND_EN_Min (0x0UL)
  #define IPCT_SUBSCRIBE_SEND_EN_Max (0x1UL)
  #define IPCT_SUBSCRIBE_SEND_EN_Disabled (0x0UL)
  #define IPCT_SUBSCRIBE_SEND_EN_Enabled (0x1UL)


/* IPCT_SUBSCRIBE_FLUSH: Subscribe configuration for task FLUSH[n] */
  #define IPCT_SUBSCRIBE_FLUSH_MaxCount (4UL)
  #define IPCT_SUBSCRIBE_FLUSH_MaxIndex (3UL)
  #define IPCT_SUBSCRIBE_FLUSH_MinIndex (0UL)
  #define IPCT_SUBSCRIBE_FLUSH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task FLUSH[n] will subscribe to */
  #define IPCT_SUBSCRIBE_FLUSH_CHIDX_Pos (0UL)
  #define IPCT_SUBSCRIBE_FLUSH_CHIDX_Msk (0xFFUL << IPCT_SUBSCRIBE_FLUSH_CHIDX_Pos)
  #define IPCT_SUBSCRIBE_FLUSH_CHIDX_Min (0x00UL)
  #define IPCT_SUBSCRIBE_FLUSH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define IPCT_SUBSCRIBE_FLUSH_EN_Pos (31UL)
  #define IPCT_SUBSCRIBE_FLUSH_EN_Msk (0x1UL << IPCT_SUBSCRIBE_FLUSH_EN_Pos)
  #define IPCT_SUBSCRIBE_FLUSH_EN_Min (0x0UL)
  #define IPCT_SUBSCRIBE_FLUSH_EN_Max (0x1UL)
  #define IPCT_SUBSCRIBE_FLUSH_EN_Disabled (0x0UL)
  #define IPCT_SUBSCRIBE_FLUSH_EN_Enabled (0x1UL)


/* IPCT_EVENTS_RECEIVE: Event received on IPCT sink channel n */
  #define IPCT_EVENTS_RECEIVE_MaxCount (4UL)
  #define IPCT_EVENTS_RECEIVE_MaxIndex (3UL)
  #define IPCT_EVENTS_RECEIVE_MinIndex (0UL)
  #define IPCT_EVENTS_RECEIVE_ResetValue (0x00000000UL)

/* EVENTS_RECEIVE @Bit 0 : Event received on IPCT sink channel n */
  #define IPCT_EVENTS_RECEIVE_EVENTS_RECEIVE_Pos (0UL)
  #define IPCT_EVENTS_RECEIVE_EVENTS_RECEIVE_Msk (0x1UL << IPCT_EVENTS_RECEIVE_EVENTS_RECEIVE_Pos) /*!< Bit mask of
                                                                            EVENTS_RECEIVE field.*/
  #define IPCT_EVENTS_RECEIVE_EVENTS_RECEIVE_Min (0x0UL)
  #define IPCT_EVENTS_RECEIVE_EVENTS_RECEIVE_Max (0x1UL)
  #define IPCT_EVENTS_RECEIVE_EVENTS_RECEIVE_NotGenerated (0x0UL)
  #define IPCT_EVENTS_RECEIVE_EVENTS_RECEIVE_Generated (0x1UL)


/* IPCT_EVENTS_READY: Event received when hardware handshake of SEND task for IPCT source channel n is complete and a new signal
                       can be triggered on that channel. */

  #define IPCT_EVENTS_READY_MaxCount (4UL)
  #define IPCT_EVENTS_READY_MaxIndex (3UL)
  #define IPCT_EVENTS_READY_MinIndex (0UL)
  #define IPCT_EVENTS_READY_ResetValue (0x00000000UL)

/* EVENTS_READY @Bit 0 : Event received when hardware handshake of SEND task for IPCT source channel n is complete and a new
                         signal can be triggered on that channel. */

  #define IPCT_EVENTS_READY_EVENTS_READY_Pos (0UL)
  #define IPCT_EVENTS_READY_EVENTS_READY_Msk (0x1UL << IPCT_EVENTS_READY_EVENTS_READY_Pos)
  #define IPCT_EVENTS_READY_EVENTS_READY_Min (0x0UL)
  #define IPCT_EVENTS_READY_EVENTS_READY_Max (0x1UL)
  #define IPCT_EVENTS_READY_EVENTS_READY_NotGenerated (0x0UL)
  #define IPCT_EVENTS_READY_EVENTS_READY_Generated (0x1UL)


/* IPCT_PUBLISH_RECEIVE: Publish configuration for event RECEIVE[n] */
  #define IPCT_PUBLISH_RECEIVE_MaxCount (4UL)
  #define IPCT_PUBLISH_RECEIVE_MaxIndex (3UL)
  #define IPCT_PUBLISH_RECEIVE_MinIndex (0UL)
  #define IPCT_PUBLISH_RECEIVE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RECEIVE[n] will publish to */
  #define IPCT_PUBLISH_RECEIVE_CHIDX_Pos (0UL)
  #define IPCT_PUBLISH_RECEIVE_CHIDX_Msk (0xFFUL << IPCT_PUBLISH_RECEIVE_CHIDX_Pos)
  #define IPCT_PUBLISH_RECEIVE_CHIDX_Min (0x00UL)
  #define IPCT_PUBLISH_RECEIVE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define IPCT_PUBLISH_RECEIVE_EN_Pos (31UL)
  #define IPCT_PUBLISH_RECEIVE_EN_Msk (0x1UL << IPCT_PUBLISH_RECEIVE_EN_Pos)
  #define IPCT_PUBLISH_RECEIVE_EN_Min (0x0UL)
  #define IPCT_PUBLISH_RECEIVE_EN_Max (0x1UL)
  #define IPCT_PUBLISH_RECEIVE_EN_Disabled (0x0UL)
  #define IPCT_PUBLISH_RECEIVE_EN_Enabled (0x1UL)


/* IPCT_PUBLISH_READY: Publish configuration for event READY[n] */
  #define IPCT_PUBLISH_READY_MaxCount (4UL)
  #define IPCT_PUBLISH_READY_MaxIndex (3UL)
  #define IPCT_PUBLISH_READY_MinIndex (0UL)
  #define IPCT_PUBLISH_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY[n] will publish to */
  #define IPCT_PUBLISH_READY_CHIDX_Pos (0UL)
  #define IPCT_PUBLISH_READY_CHIDX_Msk (0xFFUL << IPCT_PUBLISH_READY_CHIDX_Pos)
  #define IPCT_PUBLISH_READY_CHIDX_Min (0x00UL)
  #define IPCT_PUBLISH_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define IPCT_PUBLISH_READY_EN_Pos (31UL)
  #define IPCT_PUBLISH_READY_EN_Msk (0x1UL << IPCT_PUBLISH_READY_EN_Pos)
  #define IPCT_PUBLISH_READY_EN_Min (0x0UL)
  #define IPCT_PUBLISH_READY_EN_Max (0x1UL)
  #define IPCT_PUBLISH_READY_EN_Disabled (0x0UL)
  #define IPCT_PUBLISH_READY_EN_Enabled (0x1UL)


/* IPCT_SHORTS: Shortcuts between local events and tasks */
  #define IPCT_SHORTS_ResetValue (0x00000000UL)

/* RECEIVE0_FLUSH0 @Bit 0 : Shortcut between event RECEIVE[0] and task FLUSH[0] */
  #define IPCT_SHORTS_RECEIVE0_FLUSH0_Pos (0UL)
  #define IPCT_SHORTS_RECEIVE0_FLUSH0_Msk (0x1UL << IPCT_SHORTS_RECEIVE0_FLUSH0_Pos)
  #define IPCT_SHORTS_RECEIVE0_FLUSH0_Min (0x0UL)
  #define IPCT_SHORTS_RECEIVE0_FLUSH0_Max (0x1UL)
  #define IPCT_SHORTS_RECEIVE0_FLUSH0_Disabled (0x0UL)
  #define IPCT_SHORTS_RECEIVE0_FLUSH0_Enabled (0x1UL)

/* RECEIVE1_FLUSH1 @Bit 1 : Shortcut between event RECEIVE[1] and task FLUSH[1] */
  #define IPCT_SHORTS_RECEIVE1_FLUSH1_Pos (1UL)
  #define IPCT_SHORTS_RECEIVE1_FLUSH1_Msk (0x1UL << IPCT_SHORTS_RECEIVE1_FLUSH1_Pos)
  #define IPCT_SHORTS_RECEIVE1_FLUSH1_Min (0x0UL)
  #define IPCT_SHORTS_RECEIVE1_FLUSH1_Max (0x1UL)
  #define IPCT_SHORTS_RECEIVE1_FLUSH1_Disabled (0x0UL)
  #define IPCT_SHORTS_RECEIVE1_FLUSH1_Enabled (0x1UL)

/* RECEIVE2_FLUSH2 @Bit 2 : Shortcut between event RECEIVE[2] and task FLUSH[2] */
  #define IPCT_SHORTS_RECEIVE2_FLUSH2_Pos (2UL)
  #define IPCT_SHORTS_RECEIVE2_FLUSH2_Msk (0x1UL << IPCT_SHORTS_RECEIVE2_FLUSH2_Pos)
  #define IPCT_SHORTS_RECEIVE2_FLUSH2_Min (0x0UL)
  #define IPCT_SHORTS_RECEIVE2_FLUSH2_Max (0x1UL)
  #define IPCT_SHORTS_RECEIVE2_FLUSH2_Disabled (0x0UL)
  #define IPCT_SHORTS_RECEIVE2_FLUSH2_Enabled (0x1UL)

/* RECEIVE3_FLUSH3 @Bit 3 : Shortcut between event RECEIVE[3] and task FLUSH[3] */
  #define IPCT_SHORTS_RECEIVE3_FLUSH3_Pos (3UL)
  #define IPCT_SHORTS_RECEIVE3_FLUSH3_Msk (0x1UL << IPCT_SHORTS_RECEIVE3_FLUSH3_Pos)
  #define IPCT_SHORTS_RECEIVE3_FLUSH3_Min (0x0UL)
  #define IPCT_SHORTS_RECEIVE3_FLUSH3_Max (0x1UL)
  #define IPCT_SHORTS_RECEIVE3_FLUSH3_Disabled (0x0UL)
  #define IPCT_SHORTS_RECEIVE3_FLUSH3_Enabled (0x1UL)


/* IPCT_INTEN0: Enable or disable interrupt */
  #define IPCT_INTEN0_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Enable or disable interrupt for event RECEIVE[0] */
  #define IPCT_INTEN0_RECEIVE0_Pos (0UL)
  #define IPCT_INTEN0_RECEIVE0_Msk (0x1UL << IPCT_INTEN0_RECEIVE0_Pos)
  #define IPCT_INTEN0_RECEIVE0_Min (0x0UL)
  #define IPCT_INTEN0_RECEIVE0_Max (0x1UL)
  #define IPCT_INTEN0_RECEIVE0_Disabled (0x0UL)
  #define IPCT_INTEN0_RECEIVE0_Enabled (0x1UL)

/* RECEIVE1 @Bit 1 : Enable or disable interrupt for event RECEIVE[1] */
  #define IPCT_INTEN0_RECEIVE1_Pos (1UL)
  #define IPCT_INTEN0_RECEIVE1_Msk (0x1UL << IPCT_INTEN0_RECEIVE1_Pos)
  #define IPCT_INTEN0_RECEIVE1_Min (0x0UL)
  #define IPCT_INTEN0_RECEIVE1_Max (0x1UL)
  #define IPCT_INTEN0_RECEIVE1_Disabled (0x0UL)
  #define IPCT_INTEN0_RECEIVE1_Enabled (0x1UL)

/* RECEIVE2 @Bit 2 : Enable or disable interrupt for event RECEIVE[2] */
  #define IPCT_INTEN0_RECEIVE2_Pos (2UL)
  #define IPCT_INTEN0_RECEIVE2_Msk (0x1UL << IPCT_INTEN0_RECEIVE2_Pos)
  #define IPCT_INTEN0_RECEIVE2_Min (0x0UL)
  #define IPCT_INTEN0_RECEIVE2_Max (0x1UL)
  #define IPCT_INTEN0_RECEIVE2_Disabled (0x0UL)
  #define IPCT_INTEN0_RECEIVE2_Enabled (0x1UL)

/* RECEIVE3 @Bit 3 : Enable or disable interrupt for event RECEIVE[3] */
  #define IPCT_INTEN0_RECEIVE3_Pos (3UL)
  #define IPCT_INTEN0_RECEIVE3_Msk (0x1UL << IPCT_INTEN0_RECEIVE3_Pos)
  #define IPCT_INTEN0_RECEIVE3_Min (0x0UL)
  #define IPCT_INTEN0_RECEIVE3_Max (0x1UL)
  #define IPCT_INTEN0_RECEIVE3_Disabled (0x0UL)
  #define IPCT_INTEN0_RECEIVE3_Enabled (0x1UL)

/* READY0 @Bit 16 : Enable or disable interrupt for event READY[0] */
  #define IPCT_INTEN0_READY0_Pos (16UL)
  #define IPCT_INTEN0_READY0_Msk (0x1UL << IPCT_INTEN0_READY0_Pos)
  #define IPCT_INTEN0_READY0_Min (0x0UL)
  #define IPCT_INTEN0_READY0_Max (0x1UL)
  #define IPCT_INTEN0_READY0_Disabled (0x0UL)
  #define IPCT_INTEN0_READY0_Enabled (0x1UL)

/* READY1 @Bit 17 : Enable or disable interrupt for event READY[1] */
  #define IPCT_INTEN0_READY1_Pos (17UL)
  #define IPCT_INTEN0_READY1_Msk (0x1UL << IPCT_INTEN0_READY1_Pos)
  #define IPCT_INTEN0_READY1_Min (0x0UL)
  #define IPCT_INTEN0_READY1_Max (0x1UL)
  #define IPCT_INTEN0_READY1_Disabled (0x0UL)
  #define IPCT_INTEN0_READY1_Enabled (0x1UL)

/* READY2 @Bit 18 : Enable or disable interrupt for event READY[2] */
  #define IPCT_INTEN0_READY2_Pos (18UL)
  #define IPCT_INTEN0_READY2_Msk (0x1UL << IPCT_INTEN0_READY2_Pos)
  #define IPCT_INTEN0_READY2_Min (0x0UL)
  #define IPCT_INTEN0_READY2_Max (0x1UL)
  #define IPCT_INTEN0_READY2_Disabled (0x0UL)
  #define IPCT_INTEN0_READY2_Enabled (0x1UL)

/* READY3 @Bit 19 : Enable or disable interrupt for event READY[3] */
  #define IPCT_INTEN0_READY3_Pos (19UL)
  #define IPCT_INTEN0_READY3_Msk (0x1UL << IPCT_INTEN0_READY3_Pos)
  #define IPCT_INTEN0_READY3_Min (0x0UL)
  #define IPCT_INTEN0_READY3_Max (0x1UL)
  #define IPCT_INTEN0_READY3_Disabled (0x0UL)
  #define IPCT_INTEN0_READY3_Enabled (0x1UL)


/* IPCT_INTENSET0: Enable interrupt */
  #define IPCT_INTENSET0_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Write '1' to enable interrupt for event RECEIVE[0] */
  #define IPCT_INTENSET0_RECEIVE0_Pos (0UL)
  #define IPCT_INTENSET0_RECEIVE0_Msk (0x1UL << IPCT_INTENSET0_RECEIVE0_Pos)
  #define IPCT_INTENSET0_RECEIVE0_Min (0x0UL)
  #define IPCT_INTENSET0_RECEIVE0_Max (0x1UL)
  #define IPCT_INTENSET0_RECEIVE0_Set (0x1UL)
  #define IPCT_INTENSET0_RECEIVE0_Disabled (0x0UL)
  #define IPCT_INTENSET0_RECEIVE0_Enabled (0x1UL)

/* RECEIVE1 @Bit 1 : Write '1' to enable interrupt for event RECEIVE[1] */
  #define IPCT_INTENSET0_RECEIVE1_Pos (1UL)
  #define IPCT_INTENSET0_RECEIVE1_Msk (0x1UL << IPCT_INTENSET0_RECEIVE1_Pos)
  #define IPCT_INTENSET0_RECEIVE1_Min (0x0UL)
  #define IPCT_INTENSET0_RECEIVE1_Max (0x1UL)
  #define IPCT_INTENSET0_RECEIVE1_Set (0x1UL)
  #define IPCT_INTENSET0_RECEIVE1_Disabled (0x0UL)
  #define IPCT_INTENSET0_RECEIVE1_Enabled (0x1UL)

/* RECEIVE2 @Bit 2 : Write '1' to enable interrupt for event RECEIVE[2] */
  #define IPCT_INTENSET0_RECEIVE2_Pos (2UL)
  #define IPCT_INTENSET0_RECEIVE2_Msk (0x1UL << IPCT_INTENSET0_RECEIVE2_Pos)
  #define IPCT_INTENSET0_RECEIVE2_Min (0x0UL)
  #define IPCT_INTENSET0_RECEIVE2_Max (0x1UL)
  #define IPCT_INTENSET0_RECEIVE2_Set (0x1UL)
  #define IPCT_INTENSET0_RECEIVE2_Disabled (0x0UL)
  #define IPCT_INTENSET0_RECEIVE2_Enabled (0x1UL)

/* RECEIVE3 @Bit 3 : Write '1' to enable interrupt for event RECEIVE[3] */
  #define IPCT_INTENSET0_RECEIVE3_Pos (3UL)
  #define IPCT_INTENSET0_RECEIVE3_Msk (0x1UL << IPCT_INTENSET0_RECEIVE3_Pos)
  #define IPCT_INTENSET0_RECEIVE3_Min (0x0UL)
  #define IPCT_INTENSET0_RECEIVE3_Max (0x1UL)
  #define IPCT_INTENSET0_RECEIVE3_Set (0x1UL)
  #define IPCT_INTENSET0_RECEIVE3_Disabled (0x0UL)
  #define IPCT_INTENSET0_RECEIVE3_Enabled (0x1UL)

/* READY0 @Bit 16 : Write '1' to enable interrupt for event READY[0] */
  #define IPCT_INTENSET0_READY0_Pos (16UL)
  #define IPCT_INTENSET0_READY0_Msk (0x1UL << IPCT_INTENSET0_READY0_Pos)
  #define IPCT_INTENSET0_READY0_Min (0x0UL)
  #define IPCT_INTENSET0_READY0_Max (0x1UL)
  #define IPCT_INTENSET0_READY0_Set (0x1UL)
  #define IPCT_INTENSET0_READY0_Disabled (0x0UL)
  #define IPCT_INTENSET0_READY0_Enabled (0x1UL)

/* READY1 @Bit 17 : Write '1' to enable interrupt for event READY[1] */
  #define IPCT_INTENSET0_READY1_Pos (17UL)
  #define IPCT_INTENSET0_READY1_Msk (0x1UL << IPCT_INTENSET0_READY1_Pos)
  #define IPCT_INTENSET0_READY1_Min (0x0UL)
  #define IPCT_INTENSET0_READY1_Max (0x1UL)
  #define IPCT_INTENSET0_READY1_Set (0x1UL)
  #define IPCT_INTENSET0_READY1_Disabled (0x0UL)
  #define IPCT_INTENSET0_READY1_Enabled (0x1UL)

/* READY2 @Bit 18 : Write '1' to enable interrupt for event READY[2] */
  #define IPCT_INTENSET0_READY2_Pos (18UL)
  #define IPCT_INTENSET0_READY2_Msk (0x1UL << IPCT_INTENSET0_READY2_Pos)
  #define IPCT_INTENSET0_READY2_Min (0x0UL)
  #define IPCT_INTENSET0_READY2_Max (0x1UL)
  #define IPCT_INTENSET0_READY2_Set (0x1UL)
  #define IPCT_INTENSET0_READY2_Disabled (0x0UL)
  #define IPCT_INTENSET0_READY2_Enabled (0x1UL)

/* READY3 @Bit 19 : Write '1' to enable interrupt for event READY[3] */
  #define IPCT_INTENSET0_READY3_Pos (19UL)
  #define IPCT_INTENSET0_READY3_Msk (0x1UL << IPCT_INTENSET0_READY3_Pos)
  #define IPCT_INTENSET0_READY3_Min (0x0UL)
  #define IPCT_INTENSET0_READY3_Max (0x1UL)
  #define IPCT_INTENSET0_READY3_Set (0x1UL)
  #define IPCT_INTENSET0_READY3_Disabled (0x0UL)
  #define IPCT_INTENSET0_READY3_Enabled (0x1UL)


/* IPCT_INTENCLR0: Disable interrupt */
  #define IPCT_INTENCLR0_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Write '1' to disable interrupt for event RECEIVE[0] */
  #define IPCT_INTENCLR0_RECEIVE0_Pos (0UL)
  #define IPCT_INTENCLR0_RECEIVE0_Msk (0x1UL << IPCT_INTENCLR0_RECEIVE0_Pos)
  #define IPCT_INTENCLR0_RECEIVE0_Min (0x0UL)
  #define IPCT_INTENCLR0_RECEIVE0_Max (0x1UL)
  #define IPCT_INTENCLR0_RECEIVE0_Clear (0x1UL)
  #define IPCT_INTENCLR0_RECEIVE0_Disabled (0x0UL)
  #define IPCT_INTENCLR0_RECEIVE0_Enabled (0x1UL)

/* RECEIVE1 @Bit 1 : Write '1' to disable interrupt for event RECEIVE[1] */
  #define IPCT_INTENCLR0_RECEIVE1_Pos (1UL)
  #define IPCT_INTENCLR0_RECEIVE1_Msk (0x1UL << IPCT_INTENCLR0_RECEIVE1_Pos)
  #define IPCT_INTENCLR0_RECEIVE1_Min (0x0UL)
  #define IPCT_INTENCLR0_RECEIVE1_Max (0x1UL)
  #define IPCT_INTENCLR0_RECEIVE1_Clear (0x1UL)
  #define IPCT_INTENCLR0_RECEIVE1_Disabled (0x0UL)
  #define IPCT_INTENCLR0_RECEIVE1_Enabled (0x1UL)

/* RECEIVE2 @Bit 2 : Write '1' to disable interrupt for event RECEIVE[2] */
  #define IPCT_INTENCLR0_RECEIVE2_Pos (2UL)
  #define IPCT_INTENCLR0_RECEIVE2_Msk (0x1UL << IPCT_INTENCLR0_RECEIVE2_Pos)
  #define IPCT_INTENCLR0_RECEIVE2_Min (0x0UL)
  #define IPCT_INTENCLR0_RECEIVE2_Max (0x1UL)
  #define IPCT_INTENCLR0_RECEIVE2_Clear (0x1UL)
  #define IPCT_INTENCLR0_RECEIVE2_Disabled (0x0UL)
  #define IPCT_INTENCLR0_RECEIVE2_Enabled (0x1UL)

/* RECEIVE3 @Bit 3 : Write '1' to disable interrupt for event RECEIVE[3] */
  #define IPCT_INTENCLR0_RECEIVE3_Pos (3UL)
  #define IPCT_INTENCLR0_RECEIVE3_Msk (0x1UL << IPCT_INTENCLR0_RECEIVE3_Pos)
  #define IPCT_INTENCLR0_RECEIVE3_Min (0x0UL)
  #define IPCT_INTENCLR0_RECEIVE3_Max (0x1UL)
  #define IPCT_INTENCLR0_RECEIVE3_Clear (0x1UL)
  #define IPCT_INTENCLR0_RECEIVE3_Disabled (0x0UL)
  #define IPCT_INTENCLR0_RECEIVE3_Enabled (0x1UL)

/* READY0 @Bit 16 : Write '1' to disable interrupt for event READY[0] */
  #define IPCT_INTENCLR0_READY0_Pos (16UL)
  #define IPCT_INTENCLR0_READY0_Msk (0x1UL << IPCT_INTENCLR0_READY0_Pos)
  #define IPCT_INTENCLR0_READY0_Min (0x0UL)
  #define IPCT_INTENCLR0_READY0_Max (0x1UL)
  #define IPCT_INTENCLR0_READY0_Clear (0x1UL)
  #define IPCT_INTENCLR0_READY0_Disabled (0x0UL)
  #define IPCT_INTENCLR0_READY0_Enabled (0x1UL)

/* READY1 @Bit 17 : Write '1' to disable interrupt for event READY[1] */
  #define IPCT_INTENCLR0_READY1_Pos (17UL)
  #define IPCT_INTENCLR0_READY1_Msk (0x1UL << IPCT_INTENCLR0_READY1_Pos)
  #define IPCT_INTENCLR0_READY1_Min (0x0UL)
  #define IPCT_INTENCLR0_READY1_Max (0x1UL)
  #define IPCT_INTENCLR0_READY1_Clear (0x1UL)
  #define IPCT_INTENCLR0_READY1_Disabled (0x0UL)
  #define IPCT_INTENCLR0_READY1_Enabled (0x1UL)

/* READY2 @Bit 18 : Write '1' to disable interrupt for event READY[2] */
  #define IPCT_INTENCLR0_READY2_Pos (18UL)
  #define IPCT_INTENCLR0_READY2_Msk (0x1UL << IPCT_INTENCLR0_READY2_Pos)
  #define IPCT_INTENCLR0_READY2_Min (0x0UL)
  #define IPCT_INTENCLR0_READY2_Max (0x1UL)
  #define IPCT_INTENCLR0_READY2_Clear (0x1UL)
  #define IPCT_INTENCLR0_READY2_Disabled (0x0UL)
  #define IPCT_INTENCLR0_READY2_Enabled (0x1UL)

/* READY3 @Bit 19 : Write '1' to disable interrupt for event READY[3] */
  #define IPCT_INTENCLR0_READY3_Pos (19UL)
  #define IPCT_INTENCLR0_READY3_Msk (0x1UL << IPCT_INTENCLR0_READY3_Pos)
  #define IPCT_INTENCLR0_READY3_Min (0x0UL)
  #define IPCT_INTENCLR0_READY3_Max (0x1UL)
  #define IPCT_INTENCLR0_READY3_Clear (0x1UL)
  #define IPCT_INTENCLR0_READY3_Disabled (0x0UL)
  #define IPCT_INTENCLR0_READY3_Enabled (0x1UL)


/* IPCT_INTPEND0: Pending interrupts */
  #define IPCT_INTPEND0_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Read pending status of interrupt for event RECEIVE[0] */
  #define IPCT_INTPEND0_RECEIVE0_Pos (0UL)
  #define IPCT_INTPEND0_RECEIVE0_Msk (0x1UL << IPCT_INTPEND0_RECEIVE0_Pos)
  #define IPCT_INTPEND0_RECEIVE0_Min (0x0UL)
  #define IPCT_INTPEND0_RECEIVE0_Max (0x1UL)
  #define IPCT_INTPEND0_RECEIVE0_NotPending (0x0UL)
  #define IPCT_INTPEND0_RECEIVE0_Pending (0x1UL)

/* RECEIVE1 @Bit 1 : Read pending status of interrupt for event RECEIVE[1] */
  #define IPCT_INTPEND0_RECEIVE1_Pos (1UL)
  #define IPCT_INTPEND0_RECEIVE1_Msk (0x1UL << IPCT_INTPEND0_RECEIVE1_Pos)
  #define IPCT_INTPEND0_RECEIVE1_Min (0x0UL)
  #define IPCT_INTPEND0_RECEIVE1_Max (0x1UL)
  #define IPCT_INTPEND0_RECEIVE1_NotPending (0x0UL)
  #define IPCT_INTPEND0_RECEIVE1_Pending (0x1UL)

/* RECEIVE2 @Bit 2 : Read pending status of interrupt for event RECEIVE[2] */
  #define IPCT_INTPEND0_RECEIVE2_Pos (2UL)
  #define IPCT_INTPEND0_RECEIVE2_Msk (0x1UL << IPCT_INTPEND0_RECEIVE2_Pos)
  #define IPCT_INTPEND0_RECEIVE2_Min (0x0UL)
  #define IPCT_INTPEND0_RECEIVE2_Max (0x1UL)
  #define IPCT_INTPEND0_RECEIVE2_NotPending (0x0UL)
  #define IPCT_INTPEND0_RECEIVE2_Pending (0x1UL)

/* RECEIVE3 @Bit 3 : Read pending status of interrupt for event RECEIVE[3] */
  #define IPCT_INTPEND0_RECEIVE3_Pos (3UL)
  #define IPCT_INTPEND0_RECEIVE3_Msk (0x1UL << IPCT_INTPEND0_RECEIVE3_Pos)
  #define IPCT_INTPEND0_RECEIVE3_Min (0x0UL)
  #define IPCT_INTPEND0_RECEIVE3_Max (0x1UL)
  #define IPCT_INTPEND0_RECEIVE3_NotPending (0x0UL)
  #define IPCT_INTPEND0_RECEIVE3_Pending (0x1UL)

/* READY0 @Bit 16 : Read pending status of interrupt for event READY[0] */
  #define IPCT_INTPEND0_READY0_Pos (16UL)
  #define IPCT_INTPEND0_READY0_Msk (0x1UL << IPCT_INTPEND0_READY0_Pos)
  #define IPCT_INTPEND0_READY0_Min (0x0UL)
  #define IPCT_INTPEND0_READY0_Max (0x1UL)
  #define IPCT_INTPEND0_READY0_NotPending (0x0UL)
  #define IPCT_INTPEND0_READY0_Pending (0x1UL)

/* READY1 @Bit 17 : Read pending status of interrupt for event READY[1] */
  #define IPCT_INTPEND0_READY1_Pos (17UL)
  #define IPCT_INTPEND0_READY1_Msk (0x1UL << IPCT_INTPEND0_READY1_Pos)
  #define IPCT_INTPEND0_READY1_Min (0x0UL)
  #define IPCT_INTPEND0_READY1_Max (0x1UL)
  #define IPCT_INTPEND0_READY1_NotPending (0x0UL)
  #define IPCT_INTPEND0_READY1_Pending (0x1UL)

/* READY2 @Bit 18 : Read pending status of interrupt for event READY[2] */
  #define IPCT_INTPEND0_READY2_Pos (18UL)
  #define IPCT_INTPEND0_READY2_Msk (0x1UL << IPCT_INTPEND0_READY2_Pos)
  #define IPCT_INTPEND0_READY2_Min (0x0UL)
  #define IPCT_INTPEND0_READY2_Max (0x1UL)
  #define IPCT_INTPEND0_READY2_NotPending (0x0UL)
  #define IPCT_INTPEND0_READY2_Pending (0x1UL)

/* READY3 @Bit 19 : Read pending status of interrupt for event READY[3] */
  #define IPCT_INTPEND0_READY3_Pos (19UL)
  #define IPCT_INTPEND0_READY3_Msk (0x1UL << IPCT_INTPEND0_READY3_Pos)
  #define IPCT_INTPEND0_READY3_Min (0x0UL)
  #define IPCT_INTPEND0_READY3_Max (0x1UL)
  #define IPCT_INTPEND0_READY3_NotPending (0x0UL)
  #define IPCT_INTPEND0_READY3_Pending (0x1UL)


/* IPCT_INTEN1: Enable or disable interrupt */
  #define IPCT_INTEN1_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Enable or disable interrupt for event RECEIVE[0] */
  #define IPCT_INTEN1_RECEIVE0_Pos (0UL)
  #define IPCT_INTEN1_RECEIVE0_Msk (0x1UL << IPCT_INTEN1_RECEIVE0_Pos)
  #define IPCT_INTEN1_RECEIVE0_Min (0x0UL)
  #define IPCT_INTEN1_RECEIVE0_Max (0x1UL)
  #define IPCT_INTEN1_RECEIVE0_Disabled (0x0UL)
  #define IPCT_INTEN1_RECEIVE0_Enabled (0x1UL)

/* RECEIVE1 @Bit 1 : Enable or disable interrupt for event RECEIVE[1] */
  #define IPCT_INTEN1_RECEIVE1_Pos (1UL)
  #define IPCT_INTEN1_RECEIVE1_Msk (0x1UL << IPCT_INTEN1_RECEIVE1_Pos)
  #define IPCT_INTEN1_RECEIVE1_Min (0x0UL)
  #define IPCT_INTEN1_RECEIVE1_Max (0x1UL)
  #define IPCT_INTEN1_RECEIVE1_Disabled (0x0UL)
  #define IPCT_INTEN1_RECEIVE1_Enabled (0x1UL)

/* RECEIVE2 @Bit 2 : Enable or disable interrupt for event RECEIVE[2] */
  #define IPCT_INTEN1_RECEIVE2_Pos (2UL)
  #define IPCT_INTEN1_RECEIVE2_Msk (0x1UL << IPCT_INTEN1_RECEIVE2_Pos)
  #define IPCT_INTEN1_RECEIVE2_Min (0x0UL)
  #define IPCT_INTEN1_RECEIVE2_Max (0x1UL)
  #define IPCT_INTEN1_RECEIVE2_Disabled (0x0UL)
  #define IPCT_INTEN1_RECEIVE2_Enabled (0x1UL)

/* RECEIVE3 @Bit 3 : Enable or disable interrupt for event RECEIVE[3] */
  #define IPCT_INTEN1_RECEIVE3_Pos (3UL)
  #define IPCT_INTEN1_RECEIVE3_Msk (0x1UL << IPCT_INTEN1_RECEIVE3_Pos)
  #define IPCT_INTEN1_RECEIVE3_Min (0x0UL)
  #define IPCT_INTEN1_RECEIVE3_Max (0x1UL)
  #define IPCT_INTEN1_RECEIVE3_Disabled (0x0UL)
  #define IPCT_INTEN1_RECEIVE3_Enabled (0x1UL)

/* READY0 @Bit 16 : Enable or disable interrupt for event READY[0] */
  #define IPCT_INTEN1_READY0_Pos (16UL)
  #define IPCT_INTEN1_READY0_Msk (0x1UL << IPCT_INTEN1_READY0_Pos)
  #define IPCT_INTEN1_READY0_Min (0x0UL)
  #define IPCT_INTEN1_READY0_Max (0x1UL)
  #define IPCT_INTEN1_READY0_Disabled (0x0UL)
  #define IPCT_INTEN1_READY0_Enabled (0x1UL)

/* READY1 @Bit 17 : Enable or disable interrupt for event READY[1] */
  #define IPCT_INTEN1_READY1_Pos (17UL)
  #define IPCT_INTEN1_READY1_Msk (0x1UL << IPCT_INTEN1_READY1_Pos)
  #define IPCT_INTEN1_READY1_Min (0x0UL)
  #define IPCT_INTEN1_READY1_Max (0x1UL)
  #define IPCT_INTEN1_READY1_Disabled (0x0UL)
  #define IPCT_INTEN1_READY1_Enabled (0x1UL)

/* READY2 @Bit 18 : Enable or disable interrupt for event READY[2] */
  #define IPCT_INTEN1_READY2_Pos (18UL)
  #define IPCT_INTEN1_READY2_Msk (0x1UL << IPCT_INTEN1_READY2_Pos)
  #define IPCT_INTEN1_READY2_Min (0x0UL)
  #define IPCT_INTEN1_READY2_Max (0x1UL)
  #define IPCT_INTEN1_READY2_Disabled (0x0UL)
  #define IPCT_INTEN1_READY2_Enabled (0x1UL)

/* READY3 @Bit 19 : Enable or disable interrupt for event READY[3] */
  #define IPCT_INTEN1_READY3_Pos (19UL)
  #define IPCT_INTEN1_READY3_Msk (0x1UL << IPCT_INTEN1_READY3_Pos)
  #define IPCT_INTEN1_READY3_Min (0x0UL)
  #define IPCT_INTEN1_READY3_Max (0x1UL)
  #define IPCT_INTEN1_READY3_Disabled (0x0UL)
  #define IPCT_INTEN1_READY3_Enabled (0x1UL)


/* IPCT_INTENSET1: Enable interrupt */
  #define IPCT_INTENSET1_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Write '1' to enable interrupt for event RECEIVE[0] */
  #define IPCT_INTENSET1_RECEIVE0_Pos (0UL)
  #define IPCT_INTENSET1_RECEIVE0_Msk (0x1UL << IPCT_INTENSET1_RECEIVE0_Pos)
  #define IPCT_INTENSET1_RECEIVE0_Min (0x0UL)
  #define IPCT_INTENSET1_RECEIVE0_Max (0x1UL)
  #define IPCT_INTENSET1_RECEIVE0_Set (0x1UL)
  #define IPCT_INTENSET1_RECEIVE0_Disabled (0x0UL)
  #define IPCT_INTENSET1_RECEIVE0_Enabled (0x1UL)

/* RECEIVE1 @Bit 1 : Write '1' to enable interrupt for event RECEIVE[1] */
  #define IPCT_INTENSET1_RECEIVE1_Pos (1UL)
  #define IPCT_INTENSET1_RECEIVE1_Msk (0x1UL << IPCT_INTENSET1_RECEIVE1_Pos)
  #define IPCT_INTENSET1_RECEIVE1_Min (0x0UL)
  #define IPCT_INTENSET1_RECEIVE1_Max (0x1UL)
  #define IPCT_INTENSET1_RECEIVE1_Set (0x1UL)
  #define IPCT_INTENSET1_RECEIVE1_Disabled (0x0UL)
  #define IPCT_INTENSET1_RECEIVE1_Enabled (0x1UL)

/* RECEIVE2 @Bit 2 : Write '1' to enable interrupt for event RECEIVE[2] */
  #define IPCT_INTENSET1_RECEIVE2_Pos (2UL)
  #define IPCT_INTENSET1_RECEIVE2_Msk (0x1UL << IPCT_INTENSET1_RECEIVE2_Pos)
  #define IPCT_INTENSET1_RECEIVE2_Min (0x0UL)
  #define IPCT_INTENSET1_RECEIVE2_Max (0x1UL)
  #define IPCT_INTENSET1_RECEIVE2_Set (0x1UL)
  #define IPCT_INTENSET1_RECEIVE2_Disabled (0x0UL)
  #define IPCT_INTENSET1_RECEIVE2_Enabled (0x1UL)

/* RECEIVE3 @Bit 3 : Write '1' to enable interrupt for event RECEIVE[3] */
  #define IPCT_INTENSET1_RECEIVE3_Pos (3UL)
  #define IPCT_INTENSET1_RECEIVE3_Msk (0x1UL << IPCT_INTENSET1_RECEIVE3_Pos)
  #define IPCT_INTENSET1_RECEIVE3_Min (0x0UL)
  #define IPCT_INTENSET1_RECEIVE3_Max (0x1UL)
  #define IPCT_INTENSET1_RECEIVE3_Set (0x1UL)
  #define IPCT_INTENSET1_RECEIVE3_Disabled (0x0UL)
  #define IPCT_INTENSET1_RECEIVE3_Enabled (0x1UL)

/* READY0 @Bit 16 : Write '1' to enable interrupt for event READY[0] */
  #define IPCT_INTENSET1_READY0_Pos (16UL)
  #define IPCT_INTENSET1_READY0_Msk (0x1UL << IPCT_INTENSET1_READY0_Pos)
  #define IPCT_INTENSET1_READY0_Min (0x0UL)
  #define IPCT_INTENSET1_READY0_Max (0x1UL)
  #define IPCT_INTENSET1_READY0_Set (0x1UL)
  #define IPCT_INTENSET1_READY0_Disabled (0x0UL)
  #define IPCT_INTENSET1_READY0_Enabled (0x1UL)

/* READY1 @Bit 17 : Write '1' to enable interrupt for event READY[1] */
  #define IPCT_INTENSET1_READY1_Pos (17UL)
  #define IPCT_INTENSET1_READY1_Msk (0x1UL << IPCT_INTENSET1_READY1_Pos)
  #define IPCT_INTENSET1_READY1_Min (0x0UL)
  #define IPCT_INTENSET1_READY1_Max (0x1UL)
  #define IPCT_INTENSET1_READY1_Set (0x1UL)
  #define IPCT_INTENSET1_READY1_Disabled (0x0UL)
  #define IPCT_INTENSET1_READY1_Enabled (0x1UL)

/* READY2 @Bit 18 : Write '1' to enable interrupt for event READY[2] */
  #define IPCT_INTENSET1_READY2_Pos (18UL)
  #define IPCT_INTENSET1_READY2_Msk (0x1UL << IPCT_INTENSET1_READY2_Pos)
  #define IPCT_INTENSET1_READY2_Min (0x0UL)
  #define IPCT_INTENSET1_READY2_Max (0x1UL)
  #define IPCT_INTENSET1_READY2_Set (0x1UL)
  #define IPCT_INTENSET1_READY2_Disabled (0x0UL)
  #define IPCT_INTENSET1_READY2_Enabled (0x1UL)

/* READY3 @Bit 19 : Write '1' to enable interrupt for event READY[3] */
  #define IPCT_INTENSET1_READY3_Pos (19UL)
  #define IPCT_INTENSET1_READY3_Msk (0x1UL << IPCT_INTENSET1_READY3_Pos)
  #define IPCT_INTENSET1_READY3_Min (0x0UL)
  #define IPCT_INTENSET1_READY3_Max (0x1UL)
  #define IPCT_INTENSET1_READY3_Set (0x1UL)
  #define IPCT_INTENSET1_READY3_Disabled (0x0UL)
  #define IPCT_INTENSET1_READY3_Enabled (0x1UL)


/* IPCT_INTENCLR1: Disable interrupt */
  #define IPCT_INTENCLR1_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Write '1' to disable interrupt for event RECEIVE[0] */
  #define IPCT_INTENCLR1_RECEIVE0_Pos (0UL)
  #define IPCT_INTENCLR1_RECEIVE0_Msk (0x1UL << IPCT_INTENCLR1_RECEIVE0_Pos)
  #define IPCT_INTENCLR1_RECEIVE0_Min (0x0UL)
  #define IPCT_INTENCLR1_RECEIVE0_Max (0x1UL)
  #define IPCT_INTENCLR1_RECEIVE0_Clear (0x1UL)
  #define IPCT_INTENCLR1_RECEIVE0_Disabled (0x0UL)
  #define IPCT_INTENCLR1_RECEIVE0_Enabled (0x1UL)

/* RECEIVE1 @Bit 1 : Write '1' to disable interrupt for event RECEIVE[1] */
  #define IPCT_INTENCLR1_RECEIVE1_Pos (1UL)
  #define IPCT_INTENCLR1_RECEIVE1_Msk (0x1UL << IPCT_INTENCLR1_RECEIVE1_Pos)
  #define IPCT_INTENCLR1_RECEIVE1_Min (0x0UL)
  #define IPCT_INTENCLR1_RECEIVE1_Max (0x1UL)
  #define IPCT_INTENCLR1_RECEIVE1_Clear (0x1UL)
  #define IPCT_INTENCLR1_RECEIVE1_Disabled (0x0UL)
  #define IPCT_INTENCLR1_RECEIVE1_Enabled (0x1UL)

/* RECEIVE2 @Bit 2 : Write '1' to disable interrupt for event RECEIVE[2] */
  #define IPCT_INTENCLR1_RECEIVE2_Pos (2UL)
  #define IPCT_INTENCLR1_RECEIVE2_Msk (0x1UL << IPCT_INTENCLR1_RECEIVE2_Pos)
  #define IPCT_INTENCLR1_RECEIVE2_Min (0x0UL)
  #define IPCT_INTENCLR1_RECEIVE2_Max (0x1UL)
  #define IPCT_INTENCLR1_RECEIVE2_Clear (0x1UL)
  #define IPCT_INTENCLR1_RECEIVE2_Disabled (0x0UL)
  #define IPCT_INTENCLR1_RECEIVE2_Enabled (0x1UL)

/* RECEIVE3 @Bit 3 : Write '1' to disable interrupt for event RECEIVE[3] */
  #define IPCT_INTENCLR1_RECEIVE3_Pos (3UL)
  #define IPCT_INTENCLR1_RECEIVE3_Msk (0x1UL << IPCT_INTENCLR1_RECEIVE3_Pos)
  #define IPCT_INTENCLR1_RECEIVE3_Min (0x0UL)
  #define IPCT_INTENCLR1_RECEIVE3_Max (0x1UL)
  #define IPCT_INTENCLR1_RECEIVE3_Clear (0x1UL)
  #define IPCT_INTENCLR1_RECEIVE3_Disabled (0x0UL)
  #define IPCT_INTENCLR1_RECEIVE3_Enabled (0x1UL)

/* READY0 @Bit 16 : Write '1' to disable interrupt for event READY[0] */
  #define IPCT_INTENCLR1_READY0_Pos (16UL)
  #define IPCT_INTENCLR1_READY0_Msk (0x1UL << IPCT_INTENCLR1_READY0_Pos)
  #define IPCT_INTENCLR1_READY0_Min (0x0UL)
  #define IPCT_INTENCLR1_READY0_Max (0x1UL)
  #define IPCT_INTENCLR1_READY0_Clear (0x1UL)
  #define IPCT_INTENCLR1_READY0_Disabled (0x0UL)
  #define IPCT_INTENCLR1_READY0_Enabled (0x1UL)

/* READY1 @Bit 17 : Write '1' to disable interrupt for event READY[1] */
  #define IPCT_INTENCLR1_READY1_Pos (17UL)
  #define IPCT_INTENCLR1_READY1_Msk (0x1UL << IPCT_INTENCLR1_READY1_Pos)
  #define IPCT_INTENCLR1_READY1_Min (0x0UL)
  #define IPCT_INTENCLR1_READY1_Max (0x1UL)
  #define IPCT_INTENCLR1_READY1_Clear (0x1UL)
  #define IPCT_INTENCLR1_READY1_Disabled (0x0UL)
  #define IPCT_INTENCLR1_READY1_Enabled (0x1UL)

/* READY2 @Bit 18 : Write '1' to disable interrupt for event READY[2] */
  #define IPCT_INTENCLR1_READY2_Pos (18UL)
  #define IPCT_INTENCLR1_READY2_Msk (0x1UL << IPCT_INTENCLR1_READY2_Pos)
  #define IPCT_INTENCLR1_READY2_Min (0x0UL)
  #define IPCT_INTENCLR1_READY2_Max (0x1UL)
  #define IPCT_INTENCLR1_READY2_Clear (0x1UL)
  #define IPCT_INTENCLR1_READY2_Disabled (0x0UL)
  #define IPCT_INTENCLR1_READY2_Enabled (0x1UL)

/* READY3 @Bit 19 : Write '1' to disable interrupt for event READY[3] */
  #define IPCT_INTENCLR1_READY3_Pos (19UL)
  #define IPCT_INTENCLR1_READY3_Msk (0x1UL << IPCT_INTENCLR1_READY3_Pos)
  #define IPCT_INTENCLR1_READY3_Min (0x0UL)
  #define IPCT_INTENCLR1_READY3_Max (0x1UL)
  #define IPCT_INTENCLR1_READY3_Clear (0x1UL)
  #define IPCT_INTENCLR1_READY3_Disabled (0x0UL)
  #define IPCT_INTENCLR1_READY3_Enabled (0x1UL)


/* IPCT_INTPEND1: Pending interrupts */
  #define IPCT_INTPEND1_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Read pending status of interrupt for event RECEIVE[0] */
  #define IPCT_INTPEND1_RECEIVE0_Pos (0UL)
  #define IPCT_INTPEND1_RECEIVE0_Msk (0x1UL << IPCT_INTPEND1_RECEIVE0_Pos)
  #define IPCT_INTPEND1_RECEIVE0_Min (0x0UL)
  #define IPCT_INTPEND1_RECEIVE0_Max (0x1UL)
  #define IPCT_INTPEND1_RECEIVE0_NotPending (0x0UL)
  #define IPCT_INTPEND1_RECEIVE0_Pending (0x1UL)

/* RECEIVE1 @Bit 1 : Read pending status of interrupt for event RECEIVE[1] */
  #define IPCT_INTPEND1_RECEIVE1_Pos (1UL)
  #define IPCT_INTPEND1_RECEIVE1_Msk (0x1UL << IPCT_INTPEND1_RECEIVE1_Pos)
  #define IPCT_INTPEND1_RECEIVE1_Min (0x0UL)
  #define IPCT_INTPEND1_RECEIVE1_Max (0x1UL)
  #define IPCT_INTPEND1_RECEIVE1_NotPending (0x0UL)
  #define IPCT_INTPEND1_RECEIVE1_Pending (0x1UL)

/* RECEIVE2 @Bit 2 : Read pending status of interrupt for event RECEIVE[2] */
  #define IPCT_INTPEND1_RECEIVE2_Pos (2UL)
  #define IPCT_INTPEND1_RECEIVE2_Msk (0x1UL << IPCT_INTPEND1_RECEIVE2_Pos)
  #define IPCT_INTPEND1_RECEIVE2_Min (0x0UL)
  #define IPCT_INTPEND1_RECEIVE2_Max (0x1UL)
  #define IPCT_INTPEND1_RECEIVE2_NotPending (0x0UL)
  #define IPCT_INTPEND1_RECEIVE2_Pending (0x1UL)

/* RECEIVE3 @Bit 3 : Read pending status of interrupt for event RECEIVE[3] */
  #define IPCT_INTPEND1_RECEIVE3_Pos (3UL)
  #define IPCT_INTPEND1_RECEIVE3_Msk (0x1UL << IPCT_INTPEND1_RECEIVE3_Pos)
  #define IPCT_INTPEND1_RECEIVE3_Min (0x0UL)
  #define IPCT_INTPEND1_RECEIVE3_Max (0x1UL)
  #define IPCT_INTPEND1_RECEIVE3_NotPending (0x0UL)
  #define IPCT_INTPEND1_RECEIVE3_Pending (0x1UL)

/* READY0 @Bit 16 : Read pending status of interrupt for event READY[0] */
  #define IPCT_INTPEND1_READY0_Pos (16UL)
  #define IPCT_INTPEND1_READY0_Msk (0x1UL << IPCT_INTPEND1_READY0_Pos)
  #define IPCT_INTPEND1_READY0_Min (0x0UL)
  #define IPCT_INTPEND1_READY0_Max (0x1UL)
  #define IPCT_INTPEND1_READY0_NotPending (0x0UL)
  #define IPCT_INTPEND1_READY0_Pending (0x1UL)

/* READY1 @Bit 17 : Read pending status of interrupt for event READY[1] */
  #define IPCT_INTPEND1_READY1_Pos (17UL)
  #define IPCT_INTPEND1_READY1_Msk (0x1UL << IPCT_INTPEND1_READY1_Pos)
  #define IPCT_INTPEND1_READY1_Min (0x0UL)
  #define IPCT_INTPEND1_READY1_Max (0x1UL)
  #define IPCT_INTPEND1_READY1_NotPending (0x0UL)
  #define IPCT_INTPEND1_READY1_Pending (0x1UL)

/* READY2 @Bit 18 : Read pending status of interrupt for event READY[2] */
  #define IPCT_INTPEND1_READY2_Pos (18UL)
  #define IPCT_INTPEND1_READY2_Msk (0x1UL << IPCT_INTPEND1_READY2_Pos)
  #define IPCT_INTPEND1_READY2_Min (0x0UL)
  #define IPCT_INTPEND1_READY2_Max (0x1UL)
  #define IPCT_INTPEND1_READY2_NotPending (0x0UL)
  #define IPCT_INTPEND1_READY2_Pending (0x1UL)

/* READY3 @Bit 19 : Read pending status of interrupt for event READY[3] */
  #define IPCT_INTPEND1_READY3_Pos (19UL)
  #define IPCT_INTPEND1_READY3_Msk (0x1UL << IPCT_INTPEND1_READY3_Pos)
  #define IPCT_INTPEND1_READY3_Min (0x0UL)
  #define IPCT_INTPEND1_READY3_Max (0x1UL)
  #define IPCT_INTPEND1_READY3_NotPending (0x0UL)
  #define IPCT_INTPEND1_READY3_Pending (0x1UL)


/* IPCT_INTEN2: Enable or disable interrupt */
  #define IPCT_INTEN2_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Enable or disable interrupt for event RECEIVE[0] */
  #define IPCT_INTEN2_RECEIVE0_Pos (0UL)
  #define IPCT_INTEN2_RECEIVE0_Msk (0x1UL << IPCT_INTEN2_RECEIVE0_Pos)
  #define IPCT_INTEN2_RECEIVE0_Min (0x0UL)
  #define IPCT_INTEN2_RECEIVE0_Max (0x1UL)
  #define IPCT_INTEN2_RECEIVE0_Disabled (0x0UL)
  #define IPCT_INTEN2_RECEIVE0_Enabled (0x1UL)

/* RECEIVE1 @Bit 1 : Enable or disable interrupt for event RECEIVE[1] */
  #define IPCT_INTEN2_RECEIVE1_Pos (1UL)
  #define IPCT_INTEN2_RECEIVE1_Msk (0x1UL << IPCT_INTEN2_RECEIVE1_Pos)
  #define IPCT_INTEN2_RECEIVE1_Min (0x0UL)
  #define IPCT_INTEN2_RECEIVE1_Max (0x1UL)
  #define IPCT_INTEN2_RECEIVE1_Disabled (0x0UL)
  #define IPCT_INTEN2_RECEIVE1_Enabled (0x1UL)

/* RECEIVE2 @Bit 2 : Enable or disable interrupt for event RECEIVE[2] */
  #define IPCT_INTEN2_RECEIVE2_Pos (2UL)
  #define IPCT_INTEN2_RECEIVE2_Msk (0x1UL << IPCT_INTEN2_RECEIVE2_Pos)
  #define IPCT_INTEN2_RECEIVE2_Min (0x0UL)
  #define IPCT_INTEN2_RECEIVE2_Max (0x1UL)
  #define IPCT_INTEN2_RECEIVE2_Disabled (0x0UL)
  #define IPCT_INTEN2_RECEIVE2_Enabled (0x1UL)

/* RECEIVE3 @Bit 3 : Enable or disable interrupt for event RECEIVE[3] */
  #define IPCT_INTEN2_RECEIVE3_Pos (3UL)
  #define IPCT_INTEN2_RECEIVE3_Msk (0x1UL << IPCT_INTEN2_RECEIVE3_Pos)
  #define IPCT_INTEN2_RECEIVE3_Min (0x0UL)
  #define IPCT_INTEN2_RECEIVE3_Max (0x1UL)
  #define IPCT_INTEN2_RECEIVE3_Disabled (0x0UL)
  #define IPCT_INTEN2_RECEIVE3_Enabled (0x1UL)

/* READY0 @Bit 16 : Enable or disable interrupt for event READY[0] */
  #define IPCT_INTEN2_READY0_Pos (16UL)
  #define IPCT_INTEN2_READY0_Msk (0x1UL << IPCT_INTEN2_READY0_Pos)
  #define IPCT_INTEN2_READY0_Min (0x0UL)
  #define IPCT_INTEN2_READY0_Max (0x1UL)
  #define IPCT_INTEN2_READY0_Disabled (0x0UL)
  #define IPCT_INTEN2_READY0_Enabled (0x1UL)

/* READY1 @Bit 17 : Enable or disable interrupt for event READY[1] */
  #define IPCT_INTEN2_READY1_Pos (17UL)
  #define IPCT_INTEN2_READY1_Msk (0x1UL << IPCT_INTEN2_READY1_Pos)
  #define IPCT_INTEN2_READY1_Min (0x0UL)
  #define IPCT_INTEN2_READY1_Max (0x1UL)
  #define IPCT_INTEN2_READY1_Disabled (0x0UL)
  #define IPCT_INTEN2_READY1_Enabled (0x1UL)

/* READY2 @Bit 18 : Enable or disable interrupt for event READY[2] */
  #define IPCT_INTEN2_READY2_Pos (18UL)
  #define IPCT_INTEN2_READY2_Msk (0x1UL << IPCT_INTEN2_READY2_Pos)
  #define IPCT_INTEN2_READY2_Min (0x0UL)
  #define IPCT_INTEN2_READY2_Max (0x1UL)
  #define IPCT_INTEN2_READY2_Disabled (0x0UL)
  #define IPCT_INTEN2_READY2_Enabled (0x1UL)

/* READY3 @Bit 19 : Enable or disable interrupt for event READY[3] */
  #define IPCT_INTEN2_READY3_Pos (19UL)
  #define IPCT_INTEN2_READY3_Msk (0x1UL << IPCT_INTEN2_READY3_Pos)
  #define IPCT_INTEN2_READY3_Min (0x0UL)
  #define IPCT_INTEN2_READY3_Max (0x1UL)
  #define IPCT_INTEN2_READY3_Disabled (0x0UL)
  #define IPCT_INTEN2_READY3_Enabled (0x1UL)


/* IPCT_INTENSET2: Enable interrupt */
  #define IPCT_INTENSET2_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Write '1' to enable interrupt for event RECEIVE[0] */
  #define IPCT_INTENSET2_RECEIVE0_Pos (0UL)
  #define IPCT_INTENSET2_RECEIVE0_Msk (0x1UL << IPCT_INTENSET2_RECEIVE0_Pos)
  #define IPCT_INTENSET2_RECEIVE0_Min (0x0UL)
  #define IPCT_INTENSET2_RECEIVE0_Max (0x1UL)
  #define IPCT_INTENSET2_RECEIVE0_Set (0x1UL)
  #define IPCT_INTENSET2_RECEIVE0_Disabled (0x0UL)
  #define IPCT_INTENSET2_RECEIVE0_Enabled (0x1UL)

/* RECEIVE1 @Bit 1 : Write '1' to enable interrupt for event RECEIVE[1] */
  #define IPCT_INTENSET2_RECEIVE1_Pos (1UL)
  #define IPCT_INTENSET2_RECEIVE1_Msk (0x1UL << IPCT_INTENSET2_RECEIVE1_Pos)
  #define IPCT_INTENSET2_RECEIVE1_Min (0x0UL)
  #define IPCT_INTENSET2_RECEIVE1_Max (0x1UL)
  #define IPCT_INTENSET2_RECEIVE1_Set (0x1UL)
  #define IPCT_INTENSET2_RECEIVE1_Disabled (0x0UL)
  #define IPCT_INTENSET2_RECEIVE1_Enabled (0x1UL)

/* RECEIVE2 @Bit 2 : Write '1' to enable interrupt for event RECEIVE[2] */
  #define IPCT_INTENSET2_RECEIVE2_Pos (2UL)
  #define IPCT_INTENSET2_RECEIVE2_Msk (0x1UL << IPCT_INTENSET2_RECEIVE2_Pos)
  #define IPCT_INTENSET2_RECEIVE2_Min (0x0UL)
  #define IPCT_INTENSET2_RECEIVE2_Max (0x1UL)
  #define IPCT_INTENSET2_RECEIVE2_Set (0x1UL)
  #define IPCT_INTENSET2_RECEIVE2_Disabled (0x0UL)
  #define IPCT_INTENSET2_RECEIVE2_Enabled (0x1UL)

/* RECEIVE3 @Bit 3 : Write '1' to enable interrupt for event RECEIVE[3] */
  #define IPCT_INTENSET2_RECEIVE3_Pos (3UL)
  #define IPCT_INTENSET2_RECEIVE3_Msk (0x1UL << IPCT_INTENSET2_RECEIVE3_Pos)
  #define IPCT_INTENSET2_RECEIVE3_Min (0x0UL)
  #define IPCT_INTENSET2_RECEIVE3_Max (0x1UL)
  #define IPCT_INTENSET2_RECEIVE3_Set (0x1UL)
  #define IPCT_INTENSET2_RECEIVE3_Disabled (0x0UL)
  #define IPCT_INTENSET2_RECEIVE3_Enabled (0x1UL)

/* READY0 @Bit 16 : Write '1' to enable interrupt for event READY[0] */
  #define IPCT_INTENSET2_READY0_Pos (16UL)
  #define IPCT_INTENSET2_READY0_Msk (0x1UL << IPCT_INTENSET2_READY0_Pos)
  #define IPCT_INTENSET2_READY0_Min (0x0UL)
  #define IPCT_INTENSET2_READY0_Max (0x1UL)
  #define IPCT_INTENSET2_READY0_Set (0x1UL)
  #define IPCT_INTENSET2_READY0_Disabled (0x0UL)
  #define IPCT_INTENSET2_READY0_Enabled (0x1UL)

/* READY1 @Bit 17 : Write '1' to enable interrupt for event READY[1] */
  #define IPCT_INTENSET2_READY1_Pos (17UL)
  #define IPCT_INTENSET2_READY1_Msk (0x1UL << IPCT_INTENSET2_READY1_Pos)
  #define IPCT_INTENSET2_READY1_Min (0x0UL)
  #define IPCT_INTENSET2_READY1_Max (0x1UL)
  #define IPCT_INTENSET2_READY1_Set (0x1UL)
  #define IPCT_INTENSET2_READY1_Disabled (0x0UL)
  #define IPCT_INTENSET2_READY1_Enabled (0x1UL)

/* READY2 @Bit 18 : Write '1' to enable interrupt for event READY[2] */
  #define IPCT_INTENSET2_READY2_Pos (18UL)
  #define IPCT_INTENSET2_READY2_Msk (0x1UL << IPCT_INTENSET2_READY2_Pos)
  #define IPCT_INTENSET2_READY2_Min (0x0UL)
  #define IPCT_INTENSET2_READY2_Max (0x1UL)
  #define IPCT_INTENSET2_READY2_Set (0x1UL)
  #define IPCT_INTENSET2_READY2_Disabled (0x0UL)
  #define IPCT_INTENSET2_READY2_Enabled (0x1UL)

/* READY3 @Bit 19 : Write '1' to enable interrupt for event READY[3] */
  #define IPCT_INTENSET2_READY3_Pos (19UL)
  #define IPCT_INTENSET2_READY3_Msk (0x1UL << IPCT_INTENSET2_READY3_Pos)
  #define IPCT_INTENSET2_READY3_Min (0x0UL)
  #define IPCT_INTENSET2_READY3_Max (0x1UL)
  #define IPCT_INTENSET2_READY3_Set (0x1UL)
  #define IPCT_INTENSET2_READY3_Disabled (0x0UL)
  #define IPCT_INTENSET2_READY3_Enabled (0x1UL)


/* IPCT_INTENCLR2: Disable interrupt */
  #define IPCT_INTENCLR2_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Write '1' to disable interrupt for event RECEIVE[0] */
  #define IPCT_INTENCLR2_RECEIVE0_Pos (0UL)
  #define IPCT_INTENCLR2_RECEIVE0_Msk (0x1UL << IPCT_INTENCLR2_RECEIVE0_Pos)
  #define IPCT_INTENCLR2_RECEIVE0_Min (0x0UL)
  #define IPCT_INTENCLR2_RECEIVE0_Max (0x1UL)
  #define IPCT_INTENCLR2_RECEIVE0_Clear (0x1UL)
  #define IPCT_INTENCLR2_RECEIVE0_Disabled (0x0UL)
  #define IPCT_INTENCLR2_RECEIVE0_Enabled (0x1UL)

/* RECEIVE1 @Bit 1 : Write '1' to disable interrupt for event RECEIVE[1] */
  #define IPCT_INTENCLR2_RECEIVE1_Pos (1UL)
  #define IPCT_INTENCLR2_RECEIVE1_Msk (0x1UL << IPCT_INTENCLR2_RECEIVE1_Pos)
  #define IPCT_INTENCLR2_RECEIVE1_Min (0x0UL)
  #define IPCT_INTENCLR2_RECEIVE1_Max (0x1UL)
  #define IPCT_INTENCLR2_RECEIVE1_Clear (0x1UL)
  #define IPCT_INTENCLR2_RECEIVE1_Disabled (0x0UL)
  #define IPCT_INTENCLR2_RECEIVE1_Enabled (0x1UL)

/* RECEIVE2 @Bit 2 : Write '1' to disable interrupt for event RECEIVE[2] */
  #define IPCT_INTENCLR2_RECEIVE2_Pos (2UL)
  #define IPCT_INTENCLR2_RECEIVE2_Msk (0x1UL << IPCT_INTENCLR2_RECEIVE2_Pos)
  #define IPCT_INTENCLR2_RECEIVE2_Min (0x0UL)
  #define IPCT_INTENCLR2_RECEIVE2_Max (0x1UL)
  #define IPCT_INTENCLR2_RECEIVE2_Clear (0x1UL)
  #define IPCT_INTENCLR2_RECEIVE2_Disabled (0x0UL)
  #define IPCT_INTENCLR2_RECEIVE2_Enabled (0x1UL)

/* RECEIVE3 @Bit 3 : Write '1' to disable interrupt for event RECEIVE[3] */
  #define IPCT_INTENCLR2_RECEIVE3_Pos (3UL)
  #define IPCT_INTENCLR2_RECEIVE3_Msk (0x1UL << IPCT_INTENCLR2_RECEIVE3_Pos)
  #define IPCT_INTENCLR2_RECEIVE3_Min (0x0UL)
  #define IPCT_INTENCLR2_RECEIVE3_Max (0x1UL)
  #define IPCT_INTENCLR2_RECEIVE3_Clear (0x1UL)
  #define IPCT_INTENCLR2_RECEIVE3_Disabled (0x0UL)
  #define IPCT_INTENCLR2_RECEIVE3_Enabled (0x1UL)

/* READY0 @Bit 16 : Write '1' to disable interrupt for event READY[0] */
  #define IPCT_INTENCLR2_READY0_Pos (16UL)
  #define IPCT_INTENCLR2_READY0_Msk (0x1UL << IPCT_INTENCLR2_READY0_Pos)
  #define IPCT_INTENCLR2_READY0_Min (0x0UL)
  #define IPCT_INTENCLR2_READY0_Max (0x1UL)
  #define IPCT_INTENCLR2_READY0_Clear (0x1UL)
  #define IPCT_INTENCLR2_READY0_Disabled (0x0UL)
  #define IPCT_INTENCLR2_READY0_Enabled (0x1UL)

/* READY1 @Bit 17 : Write '1' to disable interrupt for event READY[1] */
  #define IPCT_INTENCLR2_READY1_Pos (17UL)
  #define IPCT_INTENCLR2_READY1_Msk (0x1UL << IPCT_INTENCLR2_READY1_Pos)
  #define IPCT_INTENCLR2_READY1_Min (0x0UL)
  #define IPCT_INTENCLR2_READY1_Max (0x1UL)
  #define IPCT_INTENCLR2_READY1_Clear (0x1UL)
  #define IPCT_INTENCLR2_READY1_Disabled (0x0UL)
  #define IPCT_INTENCLR2_READY1_Enabled (0x1UL)

/* READY2 @Bit 18 : Write '1' to disable interrupt for event READY[2] */
  #define IPCT_INTENCLR2_READY2_Pos (18UL)
  #define IPCT_INTENCLR2_READY2_Msk (0x1UL << IPCT_INTENCLR2_READY2_Pos)
  #define IPCT_INTENCLR2_READY2_Min (0x0UL)
  #define IPCT_INTENCLR2_READY2_Max (0x1UL)
  #define IPCT_INTENCLR2_READY2_Clear (0x1UL)
  #define IPCT_INTENCLR2_READY2_Disabled (0x0UL)
  #define IPCT_INTENCLR2_READY2_Enabled (0x1UL)

/* READY3 @Bit 19 : Write '1' to disable interrupt for event READY[3] */
  #define IPCT_INTENCLR2_READY3_Pos (19UL)
  #define IPCT_INTENCLR2_READY3_Msk (0x1UL << IPCT_INTENCLR2_READY3_Pos)
  #define IPCT_INTENCLR2_READY3_Min (0x0UL)
  #define IPCT_INTENCLR2_READY3_Max (0x1UL)
  #define IPCT_INTENCLR2_READY3_Clear (0x1UL)
  #define IPCT_INTENCLR2_READY3_Disabled (0x0UL)
  #define IPCT_INTENCLR2_READY3_Enabled (0x1UL)


/* IPCT_INTPEND2: Pending interrupts */
  #define IPCT_INTPEND2_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Read pending status of interrupt for event RECEIVE[0] */
  #define IPCT_INTPEND2_RECEIVE0_Pos (0UL)
  #define IPCT_INTPEND2_RECEIVE0_Msk (0x1UL << IPCT_INTPEND2_RECEIVE0_Pos)
  #define IPCT_INTPEND2_RECEIVE0_Min (0x0UL)
  #define IPCT_INTPEND2_RECEIVE0_Max (0x1UL)
  #define IPCT_INTPEND2_RECEIVE0_NotPending (0x0UL)
  #define IPCT_INTPEND2_RECEIVE0_Pending (0x1UL)

/* RECEIVE1 @Bit 1 : Read pending status of interrupt for event RECEIVE[1] */
  #define IPCT_INTPEND2_RECEIVE1_Pos (1UL)
  #define IPCT_INTPEND2_RECEIVE1_Msk (0x1UL << IPCT_INTPEND2_RECEIVE1_Pos)
  #define IPCT_INTPEND2_RECEIVE1_Min (0x0UL)
  #define IPCT_INTPEND2_RECEIVE1_Max (0x1UL)
  #define IPCT_INTPEND2_RECEIVE1_NotPending (0x0UL)
  #define IPCT_INTPEND2_RECEIVE1_Pending (0x1UL)

/* RECEIVE2 @Bit 2 : Read pending status of interrupt for event RECEIVE[2] */
  #define IPCT_INTPEND2_RECEIVE2_Pos (2UL)
  #define IPCT_INTPEND2_RECEIVE2_Msk (0x1UL << IPCT_INTPEND2_RECEIVE2_Pos)
  #define IPCT_INTPEND2_RECEIVE2_Min (0x0UL)
  #define IPCT_INTPEND2_RECEIVE2_Max (0x1UL)
  #define IPCT_INTPEND2_RECEIVE2_NotPending (0x0UL)
  #define IPCT_INTPEND2_RECEIVE2_Pending (0x1UL)

/* RECEIVE3 @Bit 3 : Read pending status of interrupt for event RECEIVE[3] */
  #define IPCT_INTPEND2_RECEIVE3_Pos (3UL)
  #define IPCT_INTPEND2_RECEIVE3_Msk (0x1UL << IPCT_INTPEND2_RECEIVE3_Pos)
  #define IPCT_INTPEND2_RECEIVE3_Min (0x0UL)
  #define IPCT_INTPEND2_RECEIVE3_Max (0x1UL)
  #define IPCT_INTPEND2_RECEIVE3_NotPending (0x0UL)
  #define IPCT_INTPEND2_RECEIVE3_Pending (0x1UL)

/* READY0 @Bit 16 : Read pending status of interrupt for event READY[0] */
  #define IPCT_INTPEND2_READY0_Pos (16UL)
  #define IPCT_INTPEND2_READY0_Msk (0x1UL << IPCT_INTPEND2_READY0_Pos)
  #define IPCT_INTPEND2_READY0_Min (0x0UL)
  #define IPCT_INTPEND2_READY0_Max (0x1UL)
  #define IPCT_INTPEND2_READY0_NotPending (0x0UL)
  #define IPCT_INTPEND2_READY0_Pending (0x1UL)

/* READY1 @Bit 17 : Read pending status of interrupt for event READY[1] */
  #define IPCT_INTPEND2_READY1_Pos (17UL)
  #define IPCT_INTPEND2_READY1_Msk (0x1UL << IPCT_INTPEND2_READY1_Pos)
  #define IPCT_INTPEND2_READY1_Min (0x0UL)
  #define IPCT_INTPEND2_READY1_Max (0x1UL)
  #define IPCT_INTPEND2_READY1_NotPending (0x0UL)
  #define IPCT_INTPEND2_READY1_Pending (0x1UL)

/* READY2 @Bit 18 : Read pending status of interrupt for event READY[2] */
  #define IPCT_INTPEND2_READY2_Pos (18UL)
  #define IPCT_INTPEND2_READY2_Msk (0x1UL << IPCT_INTPEND2_READY2_Pos)
  #define IPCT_INTPEND2_READY2_Min (0x0UL)
  #define IPCT_INTPEND2_READY2_Max (0x1UL)
  #define IPCT_INTPEND2_READY2_NotPending (0x0UL)
  #define IPCT_INTPEND2_READY2_Pending (0x1UL)

/* READY3 @Bit 19 : Read pending status of interrupt for event READY[3] */
  #define IPCT_INTPEND2_READY3_Pos (19UL)
  #define IPCT_INTPEND2_READY3_Msk (0x1UL << IPCT_INTPEND2_READY3_Pos)
  #define IPCT_INTPEND2_READY3_Min (0x0UL)
  #define IPCT_INTPEND2_READY3_Max (0x1UL)
  #define IPCT_INTPEND2_READY3_NotPending (0x0UL)
  #define IPCT_INTPEND2_READY3_Pending (0x1UL)


/* IPCT_INTEN3: Enable or disable interrupt */
  #define IPCT_INTEN3_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Enable or disable interrupt for event RECEIVE[0] */
  #define IPCT_INTEN3_RECEIVE0_Pos (0UL)
  #define IPCT_INTEN3_RECEIVE0_Msk (0x1UL << IPCT_INTEN3_RECEIVE0_Pos)
  #define IPCT_INTEN3_RECEIVE0_Min (0x0UL)
  #define IPCT_INTEN3_RECEIVE0_Max (0x1UL)
  #define IPCT_INTEN3_RECEIVE0_Disabled (0x0UL)
  #define IPCT_INTEN3_RECEIVE0_Enabled (0x1UL)

/* RECEIVE1 @Bit 1 : Enable or disable interrupt for event RECEIVE[1] */
  #define IPCT_INTEN3_RECEIVE1_Pos (1UL)
  #define IPCT_INTEN3_RECEIVE1_Msk (0x1UL << IPCT_INTEN3_RECEIVE1_Pos)
  #define IPCT_INTEN3_RECEIVE1_Min (0x0UL)
  #define IPCT_INTEN3_RECEIVE1_Max (0x1UL)
  #define IPCT_INTEN3_RECEIVE1_Disabled (0x0UL)
  #define IPCT_INTEN3_RECEIVE1_Enabled (0x1UL)

/* RECEIVE2 @Bit 2 : Enable or disable interrupt for event RECEIVE[2] */
  #define IPCT_INTEN3_RECEIVE2_Pos (2UL)
  #define IPCT_INTEN3_RECEIVE2_Msk (0x1UL << IPCT_INTEN3_RECEIVE2_Pos)
  #define IPCT_INTEN3_RECEIVE2_Min (0x0UL)
  #define IPCT_INTEN3_RECEIVE2_Max (0x1UL)
  #define IPCT_INTEN3_RECEIVE2_Disabled (0x0UL)
  #define IPCT_INTEN3_RECEIVE2_Enabled (0x1UL)

/* RECEIVE3 @Bit 3 : Enable or disable interrupt for event RECEIVE[3] */
  #define IPCT_INTEN3_RECEIVE3_Pos (3UL)
  #define IPCT_INTEN3_RECEIVE3_Msk (0x1UL << IPCT_INTEN3_RECEIVE3_Pos)
  #define IPCT_INTEN3_RECEIVE3_Min (0x0UL)
  #define IPCT_INTEN3_RECEIVE3_Max (0x1UL)
  #define IPCT_INTEN3_RECEIVE3_Disabled (0x0UL)
  #define IPCT_INTEN3_RECEIVE3_Enabled (0x1UL)

/* READY0 @Bit 16 : Enable or disable interrupt for event READY[0] */
  #define IPCT_INTEN3_READY0_Pos (16UL)
  #define IPCT_INTEN3_READY0_Msk (0x1UL << IPCT_INTEN3_READY0_Pos)
  #define IPCT_INTEN3_READY0_Min (0x0UL)
  #define IPCT_INTEN3_READY0_Max (0x1UL)
  #define IPCT_INTEN3_READY0_Disabled (0x0UL)
  #define IPCT_INTEN3_READY0_Enabled (0x1UL)

/* READY1 @Bit 17 : Enable or disable interrupt for event READY[1] */
  #define IPCT_INTEN3_READY1_Pos (17UL)
  #define IPCT_INTEN3_READY1_Msk (0x1UL << IPCT_INTEN3_READY1_Pos)
  #define IPCT_INTEN3_READY1_Min (0x0UL)
  #define IPCT_INTEN3_READY1_Max (0x1UL)
  #define IPCT_INTEN3_READY1_Disabled (0x0UL)
  #define IPCT_INTEN3_READY1_Enabled (0x1UL)

/* READY2 @Bit 18 : Enable or disable interrupt for event READY[2] */
  #define IPCT_INTEN3_READY2_Pos (18UL)
  #define IPCT_INTEN3_READY2_Msk (0x1UL << IPCT_INTEN3_READY2_Pos)
  #define IPCT_INTEN3_READY2_Min (0x0UL)
  #define IPCT_INTEN3_READY2_Max (0x1UL)
  #define IPCT_INTEN3_READY2_Disabled (0x0UL)
  #define IPCT_INTEN3_READY2_Enabled (0x1UL)

/* READY3 @Bit 19 : Enable or disable interrupt for event READY[3] */
  #define IPCT_INTEN3_READY3_Pos (19UL)
  #define IPCT_INTEN3_READY3_Msk (0x1UL << IPCT_INTEN3_READY3_Pos)
  #define IPCT_INTEN3_READY3_Min (0x0UL)
  #define IPCT_INTEN3_READY3_Max (0x1UL)
  #define IPCT_INTEN3_READY3_Disabled (0x0UL)
  #define IPCT_INTEN3_READY3_Enabled (0x1UL)


/* IPCT_INTENSET3: Enable interrupt */
  #define IPCT_INTENSET3_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Write '1' to enable interrupt for event RECEIVE[0] */
  #define IPCT_INTENSET3_RECEIVE0_Pos (0UL)
  #define IPCT_INTENSET3_RECEIVE0_Msk (0x1UL << IPCT_INTENSET3_RECEIVE0_Pos)
  #define IPCT_INTENSET3_RECEIVE0_Min (0x0UL)
  #define IPCT_INTENSET3_RECEIVE0_Max (0x1UL)
  #define IPCT_INTENSET3_RECEIVE0_Set (0x1UL)
  #define IPCT_INTENSET3_RECEIVE0_Disabled (0x0UL)
  #define IPCT_INTENSET3_RECEIVE0_Enabled (0x1UL)

/* RECEIVE1 @Bit 1 : Write '1' to enable interrupt for event RECEIVE[1] */
  #define IPCT_INTENSET3_RECEIVE1_Pos (1UL)
  #define IPCT_INTENSET3_RECEIVE1_Msk (0x1UL << IPCT_INTENSET3_RECEIVE1_Pos)
  #define IPCT_INTENSET3_RECEIVE1_Min (0x0UL)
  #define IPCT_INTENSET3_RECEIVE1_Max (0x1UL)
  #define IPCT_INTENSET3_RECEIVE1_Set (0x1UL)
  #define IPCT_INTENSET3_RECEIVE1_Disabled (0x0UL)
  #define IPCT_INTENSET3_RECEIVE1_Enabled (0x1UL)

/* RECEIVE2 @Bit 2 : Write '1' to enable interrupt for event RECEIVE[2] */
  #define IPCT_INTENSET3_RECEIVE2_Pos (2UL)
  #define IPCT_INTENSET3_RECEIVE2_Msk (0x1UL << IPCT_INTENSET3_RECEIVE2_Pos)
  #define IPCT_INTENSET3_RECEIVE2_Min (0x0UL)
  #define IPCT_INTENSET3_RECEIVE2_Max (0x1UL)
  #define IPCT_INTENSET3_RECEIVE2_Set (0x1UL)
  #define IPCT_INTENSET3_RECEIVE2_Disabled (0x0UL)
  #define IPCT_INTENSET3_RECEIVE2_Enabled (0x1UL)

/* RECEIVE3 @Bit 3 : Write '1' to enable interrupt for event RECEIVE[3] */
  #define IPCT_INTENSET3_RECEIVE3_Pos (3UL)
  #define IPCT_INTENSET3_RECEIVE3_Msk (0x1UL << IPCT_INTENSET3_RECEIVE3_Pos)
  #define IPCT_INTENSET3_RECEIVE3_Min (0x0UL)
  #define IPCT_INTENSET3_RECEIVE3_Max (0x1UL)
  #define IPCT_INTENSET3_RECEIVE3_Set (0x1UL)
  #define IPCT_INTENSET3_RECEIVE3_Disabled (0x0UL)
  #define IPCT_INTENSET3_RECEIVE3_Enabled (0x1UL)

/* READY0 @Bit 16 : Write '1' to enable interrupt for event READY[0] */
  #define IPCT_INTENSET3_READY0_Pos (16UL)
  #define IPCT_INTENSET3_READY0_Msk (0x1UL << IPCT_INTENSET3_READY0_Pos)
  #define IPCT_INTENSET3_READY0_Min (0x0UL)
  #define IPCT_INTENSET3_READY0_Max (0x1UL)
  #define IPCT_INTENSET3_READY0_Set (0x1UL)
  #define IPCT_INTENSET3_READY0_Disabled (0x0UL)
  #define IPCT_INTENSET3_READY0_Enabled (0x1UL)

/* READY1 @Bit 17 : Write '1' to enable interrupt for event READY[1] */
  #define IPCT_INTENSET3_READY1_Pos (17UL)
  #define IPCT_INTENSET3_READY1_Msk (0x1UL << IPCT_INTENSET3_READY1_Pos)
  #define IPCT_INTENSET3_READY1_Min (0x0UL)
  #define IPCT_INTENSET3_READY1_Max (0x1UL)
  #define IPCT_INTENSET3_READY1_Set (0x1UL)
  #define IPCT_INTENSET3_READY1_Disabled (0x0UL)
  #define IPCT_INTENSET3_READY1_Enabled (0x1UL)

/* READY2 @Bit 18 : Write '1' to enable interrupt for event READY[2] */
  #define IPCT_INTENSET3_READY2_Pos (18UL)
  #define IPCT_INTENSET3_READY2_Msk (0x1UL << IPCT_INTENSET3_READY2_Pos)
  #define IPCT_INTENSET3_READY2_Min (0x0UL)
  #define IPCT_INTENSET3_READY2_Max (0x1UL)
  #define IPCT_INTENSET3_READY2_Set (0x1UL)
  #define IPCT_INTENSET3_READY2_Disabled (0x0UL)
  #define IPCT_INTENSET3_READY2_Enabled (0x1UL)

/* READY3 @Bit 19 : Write '1' to enable interrupt for event READY[3] */
  #define IPCT_INTENSET3_READY3_Pos (19UL)
  #define IPCT_INTENSET3_READY3_Msk (0x1UL << IPCT_INTENSET3_READY3_Pos)
  #define IPCT_INTENSET3_READY3_Min (0x0UL)
  #define IPCT_INTENSET3_READY3_Max (0x1UL)
  #define IPCT_INTENSET3_READY3_Set (0x1UL)
  #define IPCT_INTENSET3_READY3_Disabled (0x0UL)
  #define IPCT_INTENSET3_READY3_Enabled (0x1UL)


/* IPCT_INTENCLR3: Disable interrupt */
  #define IPCT_INTENCLR3_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Write '1' to disable interrupt for event RECEIVE[0] */
  #define IPCT_INTENCLR3_RECEIVE0_Pos (0UL)
  #define IPCT_INTENCLR3_RECEIVE0_Msk (0x1UL << IPCT_INTENCLR3_RECEIVE0_Pos)
  #define IPCT_INTENCLR3_RECEIVE0_Min (0x0UL)
  #define IPCT_INTENCLR3_RECEIVE0_Max (0x1UL)
  #define IPCT_INTENCLR3_RECEIVE0_Clear (0x1UL)
  #define IPCT_INTENCLR3_RECEIVE0_Disabled (0x0UL)
  #define IPCT_INTENCLR3_RECEIVE0_Enabled (0x1UL)

/* RECEIVE1 @Bit 1 : Write '1' to disable interrupt for event RECEIVE[1] */
  #define IPCT_INTENCLR3_RECEIVE1_Pos (1UL)
  #define IPCT_INTENCLR3_RECEIVE1_Msk (0x1UL << IPCT_INTENCLR3_RECEIVE1_Pos)
  #define IPCT_INTENCLR3_RECEIVE1_Min (0x0UL)
  #define IPCT_INTENCLR3_RECEIVE1_Max (0x1UL)
  #define IPCT_INTENCLR3_RECEIVE1_Clear (0x1UL)
  #define IPCT_INTENCLR3_RECEIVE1_Disabled (0x0UL)
  #define IPCT_INTENCLR3_RECEIVE1_Enabled (0x1UL)

/* RECEIVE2 @Bit 2 : Write '1' to disable interrupt for event RECEIVE[2] */
  #define IPCT_INTENCLR3_RECEIVE2_Pos (2UL)
  #define IPCT_INTENCLR3_RECEIVE2_Msk (0x1UL << IPCT_INTENCLR3_RECEIVE2_Pos)
  #define IPCT_INTENCLR3_RECEIVE2_Min (0x0UL)
  #define IPCT_INTENCLR3_RECEIVE2_Max (0x1UL)
  #define IPCT_INTENCLR3_RECEIVE2_Clear (0x1UL)
  #define IPCT_INTENCLR3_RECEIVE2_Disabled (0x0UL)
  #define IPCT_INTENCLR3_RECEIVE2_Enabled (0x1UL)

/* RECEIVE3 @Bit 3 : Write '1' to disable interrupt for event RECEIVE[3] */
  #define IPCT_INTENCLR3_RECEIVE3_Pos (3UL)
  #define IPCT_INTENCLR3_RECEIVE3_Msk (0x1UL << IPCT_INTENCLR3_RECEIVE3_Pos)
  #define IPCT_INTENCLR3_RECEIVE3_Min (0x0UL)
  #define IPCT_INTENCLR3_RECEIVE3_Max (0x1UL)
  #define IPCT_INTENCLR3_RECEIVE3_Clear (0x1UL)
  #define IPCT_INTENCLR3_RECEIVE3_Disabled (0x0UL)
  #define IPCT_INTENCLR3_RECEIVE3_Enabled (0x1UL)

/* READY0 @Bit 16 : Write '1' to disable interrupt for event READY[0] */
  #define IPCT_INTENCLR3_READY0_Pos (16UL)
  #define IPCT_INTENCLR3_READY0_Msk (0x1UL << IPCT_INTENCLR3_READY0_Pos)
  #define IPCT_INTENCLR3_READY0_Min (0x0UL)
  #define IPCT_INTENCLR3_READY0_Max (0x1UL)
  #define IPCT_INTENCLR3_READY0_Clear (0x1UL)
  #define IPCT_INTENCLR3_READY0_Disabled (0x0UL)
  #define IPCT_INTENCLR3_READY0_Enabled (0x1UL)

/* READY1 @Bit 17 : Write '1' to disable interrupt for event READY[1] */
  #define IPCT_INTENCLR3_READY1_Pos (17UL)
  #define IPCT_INTENCLR3_READY1_Msk (0x1UL << IPCT_INTENCLR3_READY1_Pos)
  #define IPCT_INTENCLR3_READY1_Min (0x0UL)
  #define IPCT_INTENCLR3_READY1_Max (0x1UL)
  #define IPCT_INTENCLR3_READY1_Clear (0x1UL)
  #define IPCT_INTENCLR3_READY1_Disabled (0x0UL)
  #define IPCT_INTENCLR3_READY1_Enabled (0x1UL)

/* READY2 @Bit 18 : Write '1' to disable interrupt for event READY[2] */
  #define IPCT_INTENCLR3_READY2_Pos (18UL)
  #define IPCT_INTENCLR3_READY2_Msk (0x1UL << IPCT_INTENCLR3_READY2_Pos)
  #define IPCT_INTENCLR3_READY2_Min (0x0UL)
  #define IPCT_INTENCLR3_READY2_Max (0x1UL)
  #define IPCT_INTENCLR3_READY2_Clear (0x1UL)
  #define IPCT_INTENCLR3_READY2_Disabled (0x0UL)
  #define IPCT_INTENCLR3_READY2_Enabled (0x1UL)

/* READY3 @Bit 19 : Write '1' to disable interrupt for event READY[3] */
  #define IPCT_INTENCLR3_READY3_Pos (19UL)
  #define IPCT_INTENCLR3_READY3_Msk (0x1UL << IPCT_INTENCLR3_READY3_Pos)
  #define IPCT_INTENCLR3_READY3_Min (0x0UL)
  #define IPCT_INTENCLR3_READY3_Max (0x1UL)
  #define IPCT_INTENCLR3_READY3_Clear (0x1UL)
  #define IPCT_INTENCLR3_READY3_Disabled (0x0UL)
  #define IPCT_INTENCLR3_READY3_Enabled (0x1UL)


/* IPCT_INTPEND3: Pending interrupts */
  #define IPCT_INTPEND3_ResetValue (0x00000000UL)

/* RECEIVE0 @Bit 0 : Read pending status of interrupt for event RECEIVE[0] */
  #define IPCT_INTPEND3_RECEIVE0_Pos (0UL)
  #define IPCT_INTPEND3_RECEIVE0_Msk (0x1UL << IPCT_INTPEND3_RECEIVE0_Pos)
  #define IPCT_INTPEND3_RECEIVE0_Min (0x0UL)
  #define IPCT_INTPEND3_RECEIVE0_Max (0x1UL)
  #define IPCT_INTPEND3_RECEIVE0_NotPending (0x0UL)
  #define IPCT_INTPEND3_RECEIVE0_Pending (0x1UL)

/* RECEIVE1 @Bit 1 : Read pending status of interrupt for event RECEIVE[1] */
  #define IPCT_INTPEND3_RECEIVE1_Pos (1UL)
  #define IPCT_INTPEND3_RECEIVE1_Msk (0x1UL << IPCT_INTPEND3_RECEIVE1_Pos)
  #define IPCT_INTPEND3_RECEIVE1_Min (0x0UL)
  #define IPCT_INTPEND3_RECEIVE1_Max (0x1UL)
  #define IPCT_INTPEND3_RECEIVE1_NotPending (0x0UL)
  #define IPCT_INTPEND3_RECEIVE1_Pending (0x1UL)

/* RECEIVE2 @Bit 2 : Read pending status of interrupt for event RECEIVE[2] */
  #define IPCT_INTPEND3_RECEIVE2_Pos (2UL)
  #define IPCT_INTPEND3_RECEIVE2_Msk (0x1UL << IPCT_INTPEND3_RECEIVE2_Pos)
  #define IPCT_INTPEND3_RECEIVE2_Min (0x0UL)
  #define IPCT_INTPEND3_RECEIVE2_Max (0x1UL)
  #define IPCT_INTPEND3_RECEIVE2_NotPending (0x0UL)
  #define IPCT_INTPEND3_RECEIVE2_Pending (0x1UL)

/* RECEIVE3 @Bit 3 : Read pending status of interrupt for event RECEIVE[3] */
  #define IPCT_INTPEND3_RECEIVE3_Pos (3UL)
  #define IPCT_INTPEND3_RECEIVE3_Msk (0x1UL << IPCT_INTPEND3_RECEIVE3_Pos)
  #define IPCT_INTPEND3_RECEIVE3_Min (0x0UL)
  #define IPCT_INTPEND3_RECEIVE3_Max (0x1UL)
  #define IPCT_INTPEND3_RECEIVE3_NotPending (0x0UL)
  #define IPCT_INTPEND3_RECEIVE3_Pending (0x1UL)

/* READY0 @Bit 16 : Read pending status of interrupt for event READY[0] */
  #define IPCT_INTPEND3_READY0_Pos (16UL)
  #define IPCT_INTPEND3_READY0_Msk (0x1UL << IPCT_INTPEND3_READY0_Pos)
  #define IPCT_INTPEND3_READY0_Min (0x0UL)
  #define IPCT_INTPEND3_READY0_Max (0x1UL)
  #define IPCT_INTPEND3_READY0_NotPending (0x0UL)
  #define IPCT_INTPEND3_READY0_Pending (0x1UL)

/* READY1 @Bit 17 : Read pending status of interrupt for event READY[1] */
  #define IPCT_INTPEND3_READY1_Pos (17UL)
  #define IPCT_INTPEND3_READY1_Msk (0x1UL << IPCT_INTPEND3_READY1_Pos)
  #define IPCT_INTPEND3_READY1_Min (0x0UL)
  #define IPCT_INTPEND3_READY1_Max (0x1UL)
  #define IPCT_INTPEND3_READY1_NotPending (0x0UL)
  #define IPCT_INTPEND3_READY1_Pending (0x1UL)

/* READY2 @Bit 18 : Read pending status of interrupt for event READY[2] */
  #define IPCT_INTPEND3_READY2_Pos (18UL)
  #define IPCT_INTPEND3_READY2_Msk (0x1UL << IPCT_INTPEND3_READY2_Pos)
  #define IPCT_INTPEND3_READY2_Min (0x0UL)
  #define IPCT_INTPEND3_READY2_Max (0x1UL)
  #define IPCT_INTPEND3_READY2_NotPending (0x0UL)
  #define IPCT_INTPEND3_READY2_Pending (0x1UL)

/* READY3 @Bit 19 : Read pending status of interrupt for event READY[3] */
  #define IPCT_INTPEND3_READY3_Pos (19UL)
  #define IPCT_INTPEND3_READY3_Msk (0x1UL << IPCT_INTPEND3_READY3_Pos)
  #define IPCT_INTPEND3_READY3_Min (0x0UL)
  #define IPCT_INTPEND3_READY3_Max (0x1UL)
  #define IPCT_INTPEND3_READY3_NotPending (0x0UL)
  #define IPCT_INTPEND3_READY3_Pending (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            KMU                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct KMU ======================================================== */
/**
  * @brief Key management unit
  */
  typedef struct {
    __OM uint32_t TASKS_PROVISION;
    __OM uint32_t TASKS_PUSH;
    __OM uint32_t TASKS_REVOKE;
    __OM uint32_t TASKS_READMETADATA;
    __OM uint32_t TASKS_PUSHBLOCK;                   /*!< (@ 0x00000010) Block only the PUSH operation of a key slot, preventing
                                                                         the key slot from being PUSHED until next reset. The
                                                                         task is kept for backwards compatibility.*/
    __OM uint32_t TASKS_BLOCK;                       /*!< (@ 0x00000014) Block the PROVISION, PUSH, and REVOKE operations of a
                                                                         key slot, preventing the key slot from being
                                                                         PROVISIONED, PUSHED, or REVOKED until next reset*/
    __IM uint32_t RESERVED[58];
    __IOM uint32_t EVENTS_PROVISIONED;
    __IOM uint32_t EVENTS_PUSHED;
    __IOM uint32_t EVENTS_REVOKED;
    __IOM uint32_t EVENTS_ERROR;                     /*!< (@ 0x0000010C) Error generated during PROVISION, PUSH, READMETADATA or
                                                                         REVOKE operations. Triggering the PROVISION, PUSH and
                                                                         REVOKE tasks on a BLOCKED keyslot will also generate
                                                                         this event.*/
    __IOM uint32_t EVENTS_METADATAREAD;
    __IOM uint32_t EVENTS_PUSHBLOCKED;               /*!< (@ 0x00000114) The PUSHBLOCK operation was successful. The event is
                                                                         kept for backwards compatibility.*/
    __IOM uint32_t EVENTS_BLOCKED;
    __IM uint32_t RESERVED1[185];
    __IM uint32_t STATUS;
    __IM uint32_t RESERVED2[63];
    __IOM uint32_t KEYSLOT;
    __IOM uint32_t SRC;
    __IOM uint32_t METADATA;
  } NRF_KMU_Type;

/* KMU_TASKS_PROVISION: Provision key slot */
  #define KMU_TASKS_PROVISION_ResetValue (0x00000000UL)

/* TASKS_PROVISION @Bit 0 : Provision key slot */
  #define KMU_TASKS_PROVISION_TASKS_PROVISION_Pos (0UL)
  #define KMU_TASKS_PROVISION_TASKS_PROVISION_Msk (0x1UL << KMU_TASKS_PROVISION_TASKS_PROVISION_Pos) /*!< Bit mask of
                                                                            TASKS_PROVISION field.*/
  #define KMU_TASKS_PROVISION_TASKS_PROVISION_Min (0x1UL)
  #define KMU_TASKS_PROVISION_TASKS_PROVISION_Max (0x1UL)
  #define KMU_TASKS_PROVISION_TASKS_PROVISION_Trigger (0x1UL)


/* KMU_TASKS_PUSH: Push key slot */
  #define KMU_TASKS_PUSH_ResetValue (0x00000000UL)

/* TASKS_PUSH @Bit 0 : Push key slot */
  #define KMU_TASKS_PUSH_TASKS_PUSH_Pos (0UL)
  #define KMU_TASKS_PUSH_TASKS_PUSH_Msk (0x1UL << KMU_TASKS_PUSH_TASKS_PUSH_Pos)
  #define KMU_TASKS_PUSH_TASKS_PUSH_Min (0x1UL)
  #define KMU_TASKS_PUSH_TASKS_PUSH_Max (0x1UL)
  #define KMU_TASKS_PUSH_TASKS_PUSH_Trigger (0x1UL)


/* KMU_TASKS_REVOKE: Revoke key slot */
  #define KMU_TASKS_REVOKE_ResetValue (0x00000000UL)

/* TASKS_REVOKE @Bit 0 : Revoke key slot */
  #define KMU_TASKS_REVOKE_TASKS_REVOKE_Pos (0UL)
  #define KMU_TASKS_REVOKE_TASKS_REVOKE_Msk (0x1UL << KMU_TASKS_REVOKE_TASKS_REVOKE_Pos)
  #define KMU_TASKS_REVOKE_TASKS_REVOKE_Min (0x1UL)
  #define KMU_TASKS_REVOKE_TASKS_REVOKE_Max (0x1UL)
  #define KMU_TASKS_REVOKE_TASKS_REVOKE_Trigger (0x1UL)


/* KMU_TASKS_READMETADATA: Read key slot metadata into METADATA register */
  #define KMU_TASKS_READMETADATA_ResetValue (0x00000000UL)

/* TASKS_READMETADATA @Bit 0 : Read key slot metadata into METADATA register */
  #define KMU_TASKS_READMETADATA_TASKS_READMETADATA_Pos (0UL)
  #define KMU_TASKS_READMETADATA_TASKS_READMETADATA_Msk (0x1UL << KMU_TASKS_READMETADATA_TASKS_READMETADATA_Pos) /*!< Bit mask
                                                                            of TASKS_READMETADATA field.*/
  #define KMU_TASKS_READMETADATA_TASKS_READMETADATA_Min (0x1UL)
  #define KMU_TASKS_READMETADATA_TASKS_READMETADATA_Max (0x1UL)
  #define KMU_TASKS_READMETADATA_TASKS_READMETADATA_Trigger (0x1UL)


/* KMU_TASKS_PUSHBLOCK: Block only the PUSH operation of a key slot, preventing the key slot from being PUSHED until next reset.
                         The task is kept for backwards compatibility. */

  #define KMU_TASKS_PUSHBLOCK_ResetValue (0x00000000UL)

/* TASKS_PUSHBLOCK @Bit 0 : Block only the PUSH operation of a key slot, preventing the key slot from being PUSHED until next
                            reset. The task is kept for backwards compatibility. */

  #define KMU_TASKS_PUSHBLOCK_TASKS_PUSHBLOCK_Pos (0UL)
  #define KMU_TASKS_PUSHBLOCK_TASKS_PUSHBLOCK_Msk (0x1UL << KMU_TASKS_PUSHBLOCK_TASKS_PUSHBLOCK_Pos) /*!< Bit mask of
                                                                            TASKS_PUSHBLOCK field.*/
  #define KMU_TASKS_PUSHBLOCK_TASKS_PUSHBLOCK_Min (0x1UL)
  #define KMU_TASKS_PUSHBLOCK_TASKS_PUSHBLOCK_Max (0x1UL)
  #define KMU_TASKS_PUSHBLOCK_TASKS_PUSHBLOCK_Trigger (0x1UL)


/* KMU_TASKS_BLOCK: Block the PROVISION, PUSH, and REVOKE operations of a key slot, preventing the key slot from being
                     PROVISIONED, PUSHED, or REVOKED until next reset */

  #define KMU_TASKS_BLOCK_ResetValue (0x00000000UL)

/* TASKS_BLOCK @Bit 0 : Block the PROVISION, PUSH, and REVOKE operations of a key slot, preventing the key slot from being
                        PROVISIONED, PUSHED, or REVOKED until next reset */

  #define KMU_TASKS_BLOCK_TASKS_BLOCK_Pos (0UL)
  #define KMU_TASKS_BLOCK_TASKS_BLOCK_Msk (0x1UL << KMU_TASKS_BLOCK_TASKS_BLOCK_Pos)
  #define KMU_TASKS_BLOCK_TASKS_BLOCK_Min (0x1UL)
  #define KMU_TASKS_BLOCK_TASKS_BLOCK_Max (0x1UL)
  #define KMU_TASKS_BLOCK_TASKS_BLOCK_Trigger (0x1UL)


/* KMU_EVENTS_PROVISIONED: Key slot successfully provisioned */
  #define KMU_EVENTS_PROVISIONED_ResetValue (0x00000000UL)

/* EVENTS_PROVISIONED @Bit 0 : Key slot successfully provisioned */
  #define KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_Pos (0UL)
  #define KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_Msk (0x1UL << KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_Pos) /*!< Bit mask
                                                                            of EVENTS_PROVISIONED field.*/
  #define KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_Min (0x0UL)
  #define KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_Max (0x1UL)
  #define KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_NotGenerated (0x0UL)
  #define KMU_EVENTS_PROVISIONED_EVENTS_PROVISIONED_Generated (0x1UL)


/* KMU_EVENTS_PUSHED: Key slot successfully pushed */
  #define KMU_EVENTS_PUSHED_ResetValue (0x00000000UL)

/* EVENTS_PUSHED @Bit 0 : Key slot successfully pushed */
  #define KMU_EVENTS_PUSHED_EVENTS_PUSHED_Pos (0UL)
  #define KMU_EVENTS_PUSHED_EVENTS_PUSHED_Msk (0x1UL << KMU_EVENTS_PUSHED_EVENTS_PUSHED_Pos) /*!< Bit mask of EVENTS_PUSHED
                                                                            field.*/
  #define KMU_EVENTS_PUSHED_EVENTS_PUSHED_Min (0x0UL)
  #define KMU_EVENTS_PUSHED_EVENTS_PUSHED_Max (0x1UL)
  #define KMU_EVENTS_PUSHED_EVENTS_PUSHED_NotGenerated (0x0UL)
  #define KMU_EVENTS_PUSHED_EVENTS_PUSHED_Generated (0x1UL)


/* KMU_EVENTS_REVOKED: Key slot has been revoked and can no longer be used */
  #define KMU_EVENTS_REVOKED_ResetValue (0x00000000UL)

/* EVENTS_REVOKED @Bit 0 : Key slot has been revoked and can no longer be used */
  #define KMU_EVENTS_REVOKED_EVENTS_REVOKED_Pos (0UL)
  #define KMU_EVENTS_REVOKED_EVENTS_REVOKED_Msk (0x1UL << KMU_EVENTS_REVOKED_EVENTS_REVOKED_Pos) /*!< Bit mask of EVENTS_REVOKED
                                                                            field.*/
  #define KMU_EVENTS_REVOKED_EVENTS_REVOKED_Min (0x0UL)
  #define KMU_EVENTS_REVOKED_EVENTS_REVOKED_Max (0x1UL)
  #define KMU_EVENTS_REVOKED_EVENTS_REVOKED_NotGenerated (0x0UL)
  #define KMU_EVENTS_REVOKED_EVENTS_REVOKED_Generated (0x1UL)


/* KMU_EVENTS_ERROR: Error generated during PROVISION, PUSH, READMETADATA or REVOKE operations. Triggering the PROVISION, PUSH
                      and REVOKE tasks on a BLOCKED keyslot will also generate this event. */

  #define KMU_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : Error generated during PROVISION, PUSH, READMETADATA or REVOKE operations. Triggering the PROVISION,
                         PUSH and REVOKE tasks on a BLOCKED keyslot will also generate this event. */

  #define KMU_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define KMU_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << KMU_EVENTS_ERROR_EVENTS_ERROR_Pos)
  #define KMU_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define KMU_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define KMU_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define KMU_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* KMU_EVENTS_METADATAREAD: Key slot metadata has been read into METADATA register */
  #define KMU_EVENTS_METADATAREAD_ResetValue (0x00000000UL)

/* EVENTS_METADATAREAD @Bit 0 : Key slot metadata has been read into METADATA register */
  #define KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_Pos (0UL)
  #define KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_Msk (0x1UL << KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_Pos) /*!< Bit
                                                                            mask of EVENTS_METADATAREAD field.*/
  #define KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_Min (0x0UL)
  #define KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_Max (0x1UL)
  #define KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_NotGenerated (0x0UL)
  #define KMU_EVENTS_METADATAREAD_EVENTS_METADATAREAD_Generated (0x1UL)


/* KMU_EVENTS_PUSHBLOCKED: The PUSHBLOCK operation was successful. The event is kept for backwards compatibility. */
  #define KMU_EVENTS_PUSHBLOCKED_ResetValue (0x00000000UL)

/* EVENTS_PUSHBLOCKED @Bit 0 : The PUSHBLOCK operation was successful. The event is kept for backwards compatibility. */
  #define KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_Pos (0UL)
  #define KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_Msk (0x1UL << KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_Pos) /*!< Bit mask
                                                                            of EVENTS_PUSHBLOCKED field.*/
  #define KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_Min (0x0UL)
  #define KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_Max (0x1UL)
  #define KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_NotGenerated (0x0UL)
  #define KMU_EVENTS_PUSHBLOCKED_EVENTS_PUSHBLOCKED_Generated (0x1UL)


/* KMU_EVENTS_BLOCKED: The BLOCK operation was successful */
  #define KMU_EVENTS_BLOCKED_ResetValue (0x00000000UL)

/* EVENTS_BLOCKED @Bit 0 : The BLOCK operation was successful */
  #define KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_Pos (0UL)
  #define KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_Msk (0x1UL << KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_Pos) /*!< Bit mask of EVENTS_BLOCKED
                                                                            field.*/
  #define KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_Min (0x0UL)
  #define KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_Max (0x1UL)
  #define KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_NotGenerated (0x0UL)
  #define KMU_EVENTS_BLOCKED_EVENTS_BLOCKED_Generated (0x1UL)


/* KMU_STATUS: KMU status register */
  #define KMU_STATUS_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : KMU status */
  #define KMU_STATUS_STATUS_Pos (0UL)
  #define KMU_STATUS_STATUS_Msk (0x1UL << KMU_STATUS_STATUS_Pos)
  #define KMU_STATUS_STATUS_Min (0x0UL)
  #define KMU_STATUS_STATUS_Max (0x1UL)
  #define KMU_STATUS_STATUS_Ready (0x0UL)
  #define KMU_STATUS_STATUS_Busy (0x1UL)


/* KMU_KEYSLOT: Select key slot to operate on */
  #define KMU_KEYSLOT_ResetValue (0x00000000UL)

/* ID @Bits 0..7 : Select key slot ID to provision, push, read METADATA, revoke or block when the corresponding task is
                   triggered. */

  #define KMU_KEYSLOT_ID_Pos (0UL)
  #define KMU_KEYSLOT_ID_Msk (0xFFUL << KMU_KEYSLOT_ID_Pos)
  #define KMU_KEYSLOT_ID_Min (0x00UL)
  #define KMU_KEYSLOT_ID_Max (0xF9UL)


/* KMU_SRC: Source address for provisioning */
  #define KMU_SRC_ResetValue (0x00000000UL)

/* SRC @Bits 0..31 : Source address for TASKS_PROVISION. */
  #define KMU_SRC_SRC_Pos (0UL)
  #define KMU_SRC_SRC_Msk (0xFFFFFFFFUL << KMU_SRC_SRC_Pos)


/* KMU_METADATA: Key slot metadata as read by TASKS_READMETADATA. */
  #define KMU_METADATA_ResetValue (0x00000000UL)

/* METADATA @Bits 0..31 : Read metadata. */
  #define KMU_METADATA_METADATA_Pos (0UL)
  #define KMU_METADATA_METADATA_Msk (0xFFFFFFFFUL << KMU_METADATA_METADATA_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           LFRC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ===================================================== Struct LFRC_CAL ===================================================== */
/**
  * @brief CAL [LFRC_CAL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  LENGTH;
} NRF_LFRC_CAL_Type;

/* LFRC_CAL_LENGTH: Measurement cycle count length used while calibration */
  #define LFRC_CAL_LENGTH_ResetValue (0x00000002UL)

/* LENGTH @Bits 0..2 : Number of cycles */
  #define LFRC_CAL_LENGTH_LENGTH_Pos (0UL)
  #define LFRC_CAL_LENGTH_LENGTH_Msk (0x7UL << LFRC_CAL_LENGTH_LENGTH_Pos)
  #define LFRC_CAL_LENGTH_LENGTH_Min (0x0UL)
  #define LFRC_CAL_LENGTH_LENGTH_Max (0x3UL)
  #define LFRC_CAL_LENGTH_LENGTH_N64 (0x0UL)
  #define LFRC_CAL_LENGTH_LENGTH_N128 (0x1UL)
  #define LFRC_CAL_LENGTH_LENGTH_N256 (0x2UL)
  #define LFRC_CAL_LENGTH_LENGTH_N512 (0x3UL)


/* ======================================================= Struct LFRC ======================================================= */
/**
  * @brief LFRC peripheral
  */
  typedef struct {
    __OM uint32_t TASKS_CAL;
    __OM uint32_t TASKS_CANCELCAL;
    __IM uint32_t RESERVED[62];
    __IOM uint32_t EVENTS_CALDONE;
    __IOM uint32_t EVENTS_TRIMDONE;
    __IOM uint32_t EVENTS_TRIMERROR;
    __IM uint32_t RESERVED1[125];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED2[68];
    __IOM NRF_LFRC_CAL_Type CAL;
  } NRF_LFRC_Type;

/* LFRC_TASKS_CAL: Start the calibration of RC oscillator */
  #define LFRC_TASKS_CAL_ResetValue (0x00000000UL)

/* TASKS_CAL @Bit 0 : Start the calibration of RC oscillator */
  #define LFRC_TASKS_CAL_TASKS_CAL_Pos (0UL)
  #define LFRC_TASKS_CAL_TASKS_CAL_Msk (0x1UL << LFRC_TASKS_CAL_TASKS_CAL_Pos)
  #define LFRC_TASKS_CAL_TASKS_CAL_Min (0x1UL)
  #define LFRC_TASKS_CAL_TASKS_CAL_Max (0x1UL)
  #define LFRC_TASKS_CAL_TASKS_CAL_Trigger (0x1UL)


/* LFRC_TASKS_CANCELCAL: Cancel the calibration */
  #define LFRC_TASKS_CANCELCAL_ResetValue (0x00000000UL)

/* TASKS_CANCELCAL @Bit 0 : Cancel the calibration */
  #define LFRC_TASKS_CANCELCAL_TASKS_CANCELCAL_Pos (0UL)
  #define LFRC_TASKS_CANCELCAL_TASKS_CANCELCAL_Msk (0x1UL << LFRC_TASKS_CANCELCAL_TASKS_CANCELCAL_Pos) /*!< Bit mask of
                                                                            TASKS_CANCELCAL field.*/
  #define LFRC_TASKS_CANCELCAL_TASKS_CANCELCAL_Min (0x1UL)
  #define LFRC_TASKS_CANCELCAL_TASKS_CANCELCAL_Max (0x1UL)
  #define LFRC_TASKS_CANCELCAL_TASKS_CANCELCAL_Trigger (0x1UL)


/* LFRC_EVENTS_CALDONE: Calibration done */
  #define LFRC_EVENTS_CALDONE_ResetValue (0x00000000UL)

/* EVENTS_CALDONE @Bit 0 : Calibration done */
  #define LFRC_EVENTS_CALDONE_EVENTS_CALDONE_Pos (0UL)
  #define LFRC_EVENTS_CALDONE_EVENTS_CALDONE_Msk (0x1UL << LFRC_EVENTS_CALDONE_EVENTS_CALDONE_Pos) /*!< Bit mask of
                                                                            EVENTS_CALDONE field.*/
  #define LFRC_EVENTS_CALDONE_EVENTS_CALDONE_Min (0x0UL)
  #define LFRC_EVENTS_CALDONE_EVENTS_CALDONE_Max (0x1UL)
  #define LFRC_EVENTS_CALDONE_EVENTS_CALDONE_NotGenerated (0x0UL)
  #define LFRC_EVENTS_CALDONE_EVENTS_CALDONE_Generated (0x1UL)


/* LFRC_EVENTS_TRIMDONE: Trim done */
  #define LFRC_EVENTS_TRIMDONE_ResetValue (0x00000000UL)

/* EVENTS_TRIMDONE @Bit 0 : Trim done */
  #define LFRC_EVENTS_TRIMDONE_EVENTS_TRIMDONE_Pos (0UL)
  #define LFRC_EVENTS_TRIMDONE_EVENTS_TRIMDONE_Msk (0x1UL << LFRC_EVENTS_TRIMDONE_EVENTS_TRIMDONE_Pos) /*!< Bit mask of
                                                                            EVENTS_TRIMDONE field.*/
  #define LFRC_EVENTS_TRIMDONE_EVENTS_TRIMDONE_Min (0x0UL)
  #define LFRC_EVENTS_TRIMDONE_EVENTS_TRIMDONE_Max (0x1UL)
  #define LFRC_EVENTS_TRIMDONE_EVENTS_TRIMDONE_NotGenerated (0x0UL)
  #define LFRC_EVENTS_TRIMDONE_EVENTS_TRIMDONE_Generated (0x1UL)


/* LFRC_EVENTS_TRIMERROR: Trim error */
  #define LFRC_EVENTS_TRIMERROR_ResetValue (0x00000000UL)

/* EVENTS_TRIMERROR @Bit 0 : Trim error */
  #define LFRC_EVENTS_TRIMERROR_EVENTS_TRIMERROR_Pos (0UL)
  #define LFRC_EVENTS_TRIMERROR_EVENTS_TRIMERROR_Msk (0x1UL << LFRC_EVENTS_TRIMERROR_EVENTS_TRIMERROR_Pos) /*!< Bit mask of
                                                                            EVENTS_TRIMERROR field.*/
  #define LFRC_EVENTS_TRIMERROR_EVENTS_TRIMERROR_Min (0x0UL)
  #define LFRC_EVENTS_TRIMERROR_EVENTS_TRIMERROR_Max (0x1UL)
  #define LFRC_EVENTS_TRIMERROR_EVENTS_TRIMERROR_NotGenerated (0x0UL)
  #define LFRC_EVENTS_TRIMERROR_EVENTS_TRIMERROR_Generated (0x1UL)


/* LFRC_INTEN: Enable or disable interrupt */
  #define LFRC_INTEN_ResetValue (0x00000000UL)

/* CALDONE @Bit 0 : Enable or disable interrupt for event CALDONE */
  #define LFRC_INTEN_CALDONE_Pos (0UL)
  #define LFRC_INTEN_CALDONE_Msk (0x1UL << LFRC_INTEN_CALDONE_Pos)
  #define LFRC_INTEN_CALDONE_Min (0x0UL)
  #define LFRC_INTEN_CALDONE_Max (0x1UL)
  #define LFRC_INTEN_CALDONE_Disabled (0x0UL)
  #define LFRC_INTEN_CALDONE_Enabled (0x1UL)

/* TRIMDONE @Bit 1 : Enable or disable interrupt for event TRIMDONE */
  #define LFRC_INTEN_TRIMDONE_Pos (1UL)
  #define LFRC_INTEN_TRIMDONE_Msk (0x1UL << LFRC_INTEN_TRIMDONE_Pos)
  #define LFRC_INTEN_TRIMDONE_Min (0x0UL)
  #define LFRC_INTEN_TRIMDONE_Max (0x1UL)
  #define LFRC_INTEN_TRIMDONE_Disabled (0x0UL)
  #define LFRC_INTEN_TRIMDONE_Enabled (0x1UL)

/* TRIMERROR @Bit 2 : Enable or disable interrupt for event TRIMERROR */
  #define LFRC_INTEN_TRIMERROR_Pos (2UL)
  #define LFRC_INTEN_TRIMERROR_Msk (0x1UL << LFRC_INTEN_TRIMERROR_Pos)
  #define LFRC_INTEN_TRIMERROR_Min (0x0UL)
  #define LFRC_INTEN_TRIMERROR_Max (0x1UL)
  #define LFRC_INTEN_TRIMERROR_Disabled (0x0UL)
  #define LFRC_INTEN_TRIMERROR_Enabled (0x1UL)


/* LFRC_INTENSET: Enable interrupt */
  #define LFRC_INTENSET_ResetValue (0x00000000UL)

/* CALDONE @Bit 0 : Write '1' to enable interrupt for event CALDONE */
  #define LFRC_INTENSET_CALDONE_Pos (0UL)
  #define LFRC_INTENSET_CALDONE_Msk (0x1UL << LFRC_INTENSET_CALDONE_Pos)
  #define LFRC_INTENSET_CALDONE_Min (0x0UL)
  #define LFRC_INTENSET_CALDONE_Max (0x1UL)
  #define LFRC_INTENSET_CALDONE_Set (0x1UL)
  #define LFRC_INTENSET_CALDONE_Disabled (0x0UL)
  #define LFRC_INTENSET_CALDONE_Enabled (0x1UL)

/* TRIMDONE @Bit 1 : Write '1' to enable interrupt for event TRIMDONE */
  #define LFRC_INTENSET_TRIMDONE_Pos (1UL)
  #define LFRC_INTENSET_TRIMDONE_Msk (0x1UL << LFRC_INTENSET_TRIMDONE_Pos)
  #define LFRC_INTENSET_TRIMDONE_Min (0x0UL)
  #define LFRC_INTENSET_TRIMDONE_Max (0x1UL)
  #define LFRC_INTENSET_TRIMDONE_Set (0x1UL)
  #define LFRC_INTENSET_TRIMDONE_Disabled (0x0UL)
  #define LFRC_INTENSET_TRIMDONE_Enabled (0x1UL)

/* TRIMERROR @Bit 2 : Write '1' to enable interrupt for event TRIMERROR */
  #define LFRC_INTENSET_TRIMERROR_Pos (2UL)
  #define LFRC_INTENSET_TRIMERROR_Msk (0x1UL << LFRC_INTENSET_TRIMERROR_Pos)
  #define LFRC_INTENSET_TRIMERROR_Min (0x0UL)
  #define LFRC_INTENSET_TRIMERROR_Max (0x1UL)
  #define LFRC_INTENSET_TRIMERROR_Set (0x1UL)
  #define LFRC_INTENSET_TRIMERROR_Disabled (0x0UL)
  #define LFRC_INTENSET_TRIMERROR_Enabled (0x1UL)


/* LFRC_INTENCLR: Disable interrupt */
  #define LFRC_INTENCLR_ResetValue (0x00000000UL)

/* CALDONE @Bit 0 : Write '1' to disable interrupt for event CALDONE */
  #define LFRC_INTENCLR_CALDONE_Pos (0UL)
  #define LFRC_INTENCLR_CALDONE_Msk (0x1UL << LFRC_INTENCLR_CALDONE_Pos)
  #define LFRC_INTENCLR_CALDONE_Min (0x0UL)
  #define LFRC_INTENCLR_CALDONE_Max (0x1UL)
  #define LFRC_INTENCLR_CALDONE_Clear (0x1UL)
  #define LFRC_INTENCLR_CALDONE_Disabled (0x0UL)
  #define LFRC_INTENCLR_CALDONE_Enabled (0x1UL)

/* TRIMDONE @Bit 1 : Write '1' to disable interrupt for event TRIMDONE */
  #define LFRC_INTENCLR_TRIMDONE_Pos (1UL)
  #define LFRC_INTENCLR_TRIMDONE_Msk (0x1UL << LFRC_INTENCLR_TRIMDONE_Pos)
  #define LFRC_INTENCLR_TRIMDONE_Min (0x0UL)
  #define LFRC_INTENCLR_TRIMDONE_Max (0x1UL)
  #define LFRC_INTENCLR_TRIMDONE_Clear (0x1UL)
  #define LFRC_INTENCLR_TRIMDONE_Disabled (0x0UL)
  #define LFRC_INTENCLR_TRIMDONE_Enabled (0x1UL)

/* TRIMERROR @Bit 2 : Write '1' to disable interrupt for event TRIMERROR */
  #define LFRC_INTENCLR_TRIMERROR_Pos (2UL)
  #define LFRC_INTENCLR_TRIMERROR_Msk (0x1UL << LFRC_INTENCLR_TRIMERROR_Pos)
  #define LFRC_INTENCLR_TRIMERROR_Min (0x0UL)
  #define LFRC_INTENCLR_TRIMERROR_Max (0x1UL)
  #define LFRC_INTENCLR_TRIMERROR_Clear (0x1UL)
  #define LFRC_INTENCLR_TRIMERROR_Disabled (0x0UL)
  #define LFRC_INTENCLR_TRIMERROR_Enabled (0x1UL)


/* LFRC_INTPEND: Pending interrupts */
  #define LFRC_INTPEND_ResetValue (0x00000000UL)

/* CALDONE @Bit 0 : Read pending status of interrupt for event CALDONE */
  #define LFRC_INTPEND_CALDONE_Pos (0UL)
  #define LFRC_INTPEND_CALDONE_Msk (0x1UL << LFRC_INTPEND_CALDONE_Pos)
  #define LFRC_INTPEND_CALDONE_Min (0x0UL)
  #define LFRC_INTPEND_CALDONE_Max (0x1UL)
  #define LFRC_INTPEND_CALDONE_NotPending (0x0UL)
  #define LFRC_INTPEND_CALDONE_Pending (0x1UL)

/* TRIMDONE @Bit 1 : Read pending status of interrupt for event TRIMDONE */
  #define LFRC_INTPEND_TRIMDONE_Pos (1UL)
  #define LFRC_INTPEND_TRIMDONE_Msk (0x1UL << LFRC_INTPEND_TRIMDONE_Pos)
  #define LFRC_INTPEND_TRIMDONE_Min (0x0UL)
  #define LFRC_INTPEND_TRIMDONE_Max (0x1UL)
  #define LFRC_INTPEND_TRIMDONE_NotPending (0x0UL)
  #define LFRC_INTPEND_TRIMDONE_Pending (0x1UL)

/* TRIMERROR @Bit 2 : Read pending status of interrupt for event TRIMERROR */
  #define LFRC_INTPEND_TRIMERROR_Pos (2UL)
  #define LFRC_INTPEND_TRIMERROR_Msk (0x1UL << LFRC_INTPEND_TRIMERROR_Pos)
  #define LFRC_INTPEND_TRIMERROR_Min (0x0UL)
  #define LFRC_INTPEND_TRIMERROR_Max (0x1UL)
  #define LFRC_INTPEND_TRIMERROR_NotPending (0x0UL)
  #define LFRC_INTPEND_TRIMERROR_Pending (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           LFXO                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct LFXO ======================================================= */
/**
  * @brief LFXO peripheral
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_MODECHANGED;
    __IOM uint32_t EVENTS_ERRORSTARTING;
    __IOM uint32_t EVENTS_ERRORRUNNING;
    __IM uint32_t RESERVED1[125];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED2[60];
    __IM uint32_t STATUS;
    __IM uint32_t RESERVED3[32];
    __IOM uint32_t CLOAD;
    __IOM uint32_t AMPLITUDECTRL;
    __IOM uint32_t PWRUPCTRL;
    __IOM uint32_t MODE;
  } NRF_LFXO_Type;

/* LFXO_EVENTS_MODECHANGED: LFXO mode changed */
  #define LFXO_EVENTS_MODECHANGED_ResetValue (0x00000000UL)

/* EVENTS_MODECHANGED @Bit 0 : LFXO mode changed */
  #define LFXO_EVENTS_MODECHANGED_EVENTS_MODECHANGED_Pos (0UL)
  #define LFXO_EVENTS_MODECHANGED_EVENTS_MODECHANGED_Msk (0x1UL << LFXO_EVENTS_MODECHANGED_EVENTS_MODECHANGED_Pos) /*!< Bit mask
                                                                            of EVENTS_MODECHANGED field.*/
  #define LFXO_EVENTS_MODECHANGED_EVENTS_MODECHANGED_Min (0x0UL)
  #define LFXO_EVENTS_MODECHANGED_EVENTS_MODECHANGED_Max (0x1UL)
  #define LFXO_EVENTS_MODECHANGED_EVENTS_MODECHANGED_NotGenerated (0x0UL)
  #define LFXO_EVENTS_MODECHANGED_EVENTS_MODECHANGED_Generated (0x1UL)


/* LFXO_EVENTS_ERRORSTARTING: Error while starting the LFXO in PIERCE mode */
  #define LFXO_EVENTS_ERRORSTARTING_ResetValue (0x00000000UL)

/* EVENTS_ERRORSTARTING @Bit 0 : Error while starting the LFXO in PIERCE mode */
  #define LFXO_EVENTS_ERRORSTARTING_EVENTS_ERRORSTARTING_Pos (0UL)
  #define LFXO_EVENTS_ERRORSTARTING_EVENTS_ERRORSTARTING_Msk (0x1UL << LFXO_EVENTS_ERRORSTARTING_EVENTS_ERRORSTARTING_Pos) /*!<
                                                                            Bit mask of EVENTS_ERRORSTARTING field.*/
  #define LFXO_EVENTS_ERRORSTARTING_EVENTS_ERRORSTARTING_Min (0x0UL)
  #define LFXO_EVENTS_ERRORSTARTING_EVENTS_ERRORSTARTING_Max (0x1UL)
  #define LFXO_EVENTS_ERRORSTARTING_EVENTS_ERRORSTARTING_NotGenerated (0x0UL)
  #define LFXO_EVENTS_ERRORSTARTING_EVENTS_ERRORSTARTING_Generated (0x1UL)


/* LFXO_EVENTS_ERRORRUNNING: Error detected while LFXO was running */
  #define LFXO_EVENTS_ERRORRUNNING_ResetValue (0x00000000UL)

/* EVENTS_ERRORRUNNING @Bit 0 : Error detected while LFXO was running */
  #define LFXO_EVENTS_ERRORRUNNING_EVENTS_ERRORRUNNING_Pos (0UL)
  #define LFXO_EVENTS_ERRORRUNNING_EVENTS_ERRORRUNNING_Msk (0x1UL << LFXO_EVENTS_ERRORRUNNING_EVENTS_ERRORRUNNING_Pos) /*!< Bit
                                                                            mask of EVENTS_ERRORRUNNING field.*/
  #define LFXO_EVENTS_ERRORRUNNING_EVENTS_ERRORRUNNING_Min (0x0UL)
  #define LFXO_EVENTS_ERRORRUNNING_EVENTS_ERRORRUNNING_Max (0x1UL)
  #define LFXO_EVENTS_ERRORRUNNING_EVENTS_ERRORRUNNING_NotGenerated (0x0UL)
  #define LFXO_EVENTS_ERRORRUNNING_EVENTS_ERRORRUNNING_Generated (0x1UL)


/* LFXO_INTEN: Enable or disable interrupt */
  #define LFXO_INTEN_ResetValue (0x00000000UL)

/* MODECHANGED @Bit 0 : Enable or disable interrupt for event MODECHANGED */
  #define LFXO_INTEN_MODECHANGED_Pos (0UL)
  #define LFXO_INTEN_MODECHANGED_Msk (0x1UL << LFXO_INTEN_MODECHANGED_Pos)
  #define LFXO_INTEN_MODECHANGED_Min (0x0UL)
  #define LFXO_INTEN_MODECHANGED_Max (0x1UL)
  #define LFXO_INTEN_MODECHANGED_Disabled (0x0UL)
  #define LFXO_INTEN_MODECHANGED_Enabled (0x1UL)

/* ERRORSTARTING @Bit 1 : Enable or disable interrupt for event ERRORSTARTING */
  #define LFXO_INTEN_ERRORSTARTING_Pos (1UL)
  #define LFXO_INTEN_ERRORSTARTING_Msk (0x1UL << LFXO_INTEN_ERRORSTARTING_Pos)
  #define LFXO_INTEN_ERRORSTARTING_Min (0x0UL)
  #define LFXO_INTEN_ERRORSTARTING_Max (0x1UL)
  #define LFXO_INTEN_ERRORSTARTING_Disabled (0x0UL)
  #define LFXO_INTEN_ERRORSTARTING_Enabled (0x1UL)

/* ERRORRUNNING @Bit 2 : Enable or disable interrupt for event ERRORRUNNING */
  #define LFXO_INTEN_ERRORRUNNING_Pos (2UL)
  #define LFXO_INTEN_ERRORRUNNING_Msk (0x1UL << LFXO_INTEN_ERRORRUNNING_Pos)
  #define LFXO_INTEN_ERRORRUNNING_Min (0x0UL)
  #define LFXO_INTEN_ERRORRUNNING_Max (0x1UL)
  #define LFXO_INTEN_ERRORRUNNING_Disabled (0x0UL)
  #define LFXO_INTEN_ERRORRUNNING_Enabled (0x1UL)


/* LFXO_INTENSET: Enable interrupt */
  #define LFXO_INTENSET_ResetValue (0x00000000UL)

/* MODECHANGED @Bit 0 : Write '1' to enable interrupt for event MODECHANGED */
  #define LFXO_INTENSET_MODECHANGED_Pos (0UL)
  #define LFXO_INTENSET_MODECHANGED_Msk (0x1UL << LFXO_INTENSET_MODECHANGED_Pos)
  #define LFXO_INTENSET_MODECHANGED_Min (0x0UL)
  #define LFXO_INTENSET_MODECHANGED_Max (0x1UL)
  #define LFXO_INTENSET_MODECHANGED_Set (0x1UL)
  #define LFXO_INTENSET_MODECHANGED_Disabled (0x0UL)
  #define LFXO_INTENSET_MODECHANGED_Enabled (0x1UL)

/* ERRORSTARTING @Bit 1 : Write '1' to enable interrupt for event ERRORSTARTING */
  #define LFXO_INTENSET_ERRORSTARTING_Pos (1UL)
  #define LFXO_INTENSET_ERRORSTARTING_Msk (0x1UL << LFXO_INTENSET_ERRORSTARTING_Pos)
  #define LFXO_INTENSET_ERRORSTARTING_Min (0x0UL)
  #define LFXO_INTENSET_ERRORSTARTING_Max (0x1UL)
  #define LFXO_INTENSET_ERRORSTARTING_Set (0x1UL)
  #define LFXO_INTENSET_ERRORSTARTING_Disabled (0x0UL)
  #define LFXO_INTENSET_ERRORSTARTING_Enabled (0x1UL)

/* ERRORRUNNING @Bit 2 : Write '1' to enable interrupt for event ERRORRUNNING */
  #define LFXO_INTENSET_ERRORRUNNING_Pos (2UL)
  #define LFXO_INTENSET_ERRORRUNNING_Msk (0x1UL << LFXO_INTENSET_ERRORRUNNING_Pos)
  #define LFXO_INTENSET_ERRORRUNNING_Min (0x0UL)
  #define LFXO_INTENSET_ERRORRUNNING_Max (0x1UL)
  #define LFXO_INTENSET_ERRORRUNNING_Set (0x1UL)
  #define LFXO_INTENSET_ERRORRUNNING_Disabled (0x0UL)
  #define LFXO_INTENSET_ERRORRUNNING_Enabled (0x1UL)


/* LFXO_INTENCLR: Disable interrupt */
  #define LFXO_INTENCLR_ResetValue (0x00000000UL)

/* MODECHANGED @Bit 0 : Write '1' to disable interrupt for event MODECHANGED */
  #define LFXO_INTENCLR_MODECHANGED_Pos (0UL)
  #define LFXO_INTENCLR_MODECHANGED_Msk (0x1UL << LFXO_INTENCLR_MODECHANGED_Pos)
  #define LFXO_INTENCLR_MODECHANGED_Min (0x0UL)
  #define LFXO_INTENCLR_MODECHANGED_Max (0x1UL)
  #define LFXO_INTENCLR_MODECHANGED_Clear (0x1UL)
  #define LFXO_INTENCLR_MODECHANGED_Disabled (0x0UL)
  #define LFXO_INTENCLR_MODECHANGED_Enabled (0x1UL)

/* ERRORSTARTING @Bit 1 : Write '1' to disable interrupt for event ERRORSTARTING */
  #define LFXO_INTENCLR_ERRORSTARTING_Pos (1UL)
  #define LFXO_INTENCLR_ERRORSTARTING_Msk (0x1UL << LFXO_INTENCLR_ERRORSTARTING_Pos)
  #define LFXO_INTENCLR_ERRORSTARTING_Min (0x0UL)
  #define LFXO_INTENCLR_ERRORSTARTING_Max (0x1UL)
  #define LFXO_INTENCLR_ERRORSTARTING_Clear (0x1UL)
  #define LFXO_INTENCLR_ERRORSTARTING_Disabled (0x0UL)
  #define LFXO_INTENCLR_ERRORSTARTING_Enabled (0x1UL)

/* ERRORRUNNING @Bit 2 : Write '1' to disable interrupt for event ERRORRUNNING */
  #define LFXO_INTENCLR_ERRORRUNNING_Pos (2UL)
  #define LFXO_INTENCLR_ERRORRUNNING_Msk (0x1UL << LFXO_INTENCLR_ERRORRUNNING_Pos)
  #define LFXO_INTENCLR_ERRORRUNNING_Min (0x0UL)
  #define LFXO_INTENCLR_ERRORRUNNING_Max (0x1UL)
  #define LFXO_INTENCLR_ERRORRUNNING_Clear (0x1UL)
  #define LFXO_INTENCLR_ERRORRUNNING_Disabled (0x0UL)
  #define LFXO_INTENCLR_ERRORRUNNING_Enabled (0x1UL)


/* LFXO_INTPEND: Pending interrupts */
  #define LFXO_INTPEND_ResetValue (0x00000000UL)

/* MODECHANGED @Bit 0 : Read pending status of interrupt for event MODECHANGED */
  #define LFXO_INTPEND_MODECHANGED_Pos (0UL)
  #define LFXO_INTPEND_MODECHANGED_Msk (0x1UL << LFXO_INTPEND_MODECHANGED_Pos)
  #define LFXO_INTPEND_MODECHANGED_Min (0x0UL)
  #define LFXO_INTPEND_MODECHANGED_Max (0x1UL)
  #define LFXO_INTPEND_MODECHANGED_NotPending (0x0UL)
  #define LFXO_INTPEND_MODECHANGED_Pending (0x1UL)

/* ERRORSTARTING @Bit 1 : Read pending status of interrupt for event ERRORSTARTING */
  #define LFXO_INTPEND_ERRORSTARTING_Pos (1UL)
  #define LFXO_INTPEND_ERRORSTARTING_Msk (0x1UL << LFXO_INTPEND_ERRORSTARTING_Pos)
  #define LFXO_INTPEND_ERRORSTARTING_Min (0x0UL)
  #define LFXO_INTPEND_ERRORSTARTING_Max (0x1UL)
  #define LFXO_INTPEND_ERRORSTARTING_NotPending (0x0UL)
  #define LFXO_INTPEND_ERRORSTARTING_Pending (0x1UL)

/* ERRORRUNNING @Bit 2 : Read pending status of interrupt for event ERRORRUNNING */
  #define LFXO_INTPEND_ERRORRUNNING_Pos (2UL)
  #define LFXO_INTPEND_ERRORRUNNING_Msk (0x1UL << LFXO_INTPEND_ERRORRUNNING_Pos)
  #define LFXO_INTPEND_ERRORRUNNING_Min (0x0UL)
  #define LFXO_INTPEND_ERRORRUNNING_Max (0x1UL)
  #define LFXO_INTPEND_ERRORRUNNING_NotPending (0x0UL)
  #define LFXO_INTPEND_ERRORRUNNING_Pending (0x1UL)


/* LFXO_STATUS: LFXO status */
  #define LFXO_STATUS_ResetValue (0x00000000UL)

/* MODE @Bits 0..1 : Current mode */
  #define LFXO_STATUS_MODE_Pos (0UL)
  #define LFXO_STATUS_MODE_Msk (0x3UL << LFXO_STATUS_MODE_Pos)
  #define LFXO_STATUS_MODE_Min (0x0UL)
  #define LFXO_STATUS_MODE_Max (0x3UL)
  #define LFXO_STATUS_MODE_Pierce (0x0UL)
  #define LFXO_STATUS_MODE_Pixo (0x1UL)
  #define LFXO_STATUS_MODE_ExternalSine (0x2UL)
  #define LFXO_STATUS_MODE_ExternalSquare (0x3UL)

/* HPMODE @Bit 4 : High performance mode */
  #define LFXO_STATUS_HPMODE_Pos (4UL)
  #define LFXO_STATUS_HPMODE_Msk (0x1UL << LFXO_STATUS_HPMODE_Pos)
  #define LFXO_STATUS_HPMODE_Min (0x0UL)
  #define LFXO_STATUS_HPMODE_Max (0x1UL)
  #define LFXO_STATUS_HPMODE_Disabled (0x0UL)
  #define LFXO_STATUS_HPMODE_Enabled (0x1UL)

/* RUNNING @Bit 5 : LFXO running status */
  #define LFXO_STATUS_RUNNING_Pos (5UL)
  #define LFXO_STATUS_RUNNING_Msk (0x1UL << LFXO_STATUS_RUNNING_Pos)
  #define LFXO_STATUS_RUNNING_Min (0x0UL)
  #define LFXO_STATUS_RUNNING_Max (0x1UL)
  #define LFXO_STATUS_RUNNING_NotRunning (0x0UL)
  #define LFXO_STATUS_RUNNING_Running (0x1UL)


/* LFXO_CLOAD: Internal capacitive load */
  #define LFXO_CLOAD_ResetValue (0x00000000UL)

/* VAL0 @Bits 0..3 : Capacitive load value */
  #define LFXO_CLOAD_VAL0_Pos (0UL)
  #define LFXO_CLOAD_VAL0_Msk (0xFUL << LFXO_CLOAD_VAL0_Pos)

/* VAL1 @Bit 4 : Capacitive load value */
  #define LFXO_CLOAD_VAL1_Pos (4UL)
  #define LFXO_CLOAD_VAL1_Msk (0x1UL << LFXO_CLOAD_VAL1_Pos)
  #define LFXO_CLOAD_VAL1_Min (0x0UL)
  #define LFXO_CLOAD_VAL1_Max (0x1UL)


/* LFXO_AMPLITUDECTRL: Amplitude control */
  #define LFXO_AMPLITUDECTRL_ResetValue (0x0110010AUL)

/* INTERVAL @Bits 0..4 : Amplitude check interval */
  #define LFXO_AMPLITUDECTRL_INTERVAL_Pos (0UL)
  #define LFXO_AMPLITUDECTRL_INTERVAL_Msk (0x1FUL << LFXO_AMPLITUDECTRL_INTERVAL_Pos)
  #define LFXO_AMPLITUDECTRL_INTERVAL_Min (0x01UL)
  #define LFXO_AMPLITUDECTRL_INTERVAL_Max (0x1FUL)

/* STEP @Bits 8..10 : Step to adjust the IDAC when the peak detector triggers */
  #define LFXO_AMPLITUDECTRL_STEP_Pos (8UL)
  #define LFXO_AMPLITUDECTRL_STEP_Msk (0x7UL << LFXO_AMPLITUDECTRL_STEP_Pos)
  #define LFXO_AMPLITUDECTRL_STEP_Min (0x0UL)
  #define LFXO_AMPLITUDECTRL_STEP_Max (0x7UL)

/* IDACINIT @Bits 16..20 : Initial IDAC code for the pierce oscillator */
  #define LFXO_AMPLITUDECTRL_IDACINIT_Pos (16UL)
  #define LFXO_AMPLITUDECTRL_IDACINIT_Msk (0x1FUL << LFXO_AMPLITUDECTRL_IDACINIT_Pos)
  #define LFXO_AMPLITUDECTRL_IDACINIT_Min (0x00UL)
  #define LFXO_AMPLITUDECTRL_IDACINIT_Max (0x1FUL)

/* PDCTRL @Bit 24 : Peak detector control */
  #define LFXO_AMPLITUDECTRL_PDCTRL_Pos (24UL)
  #define LFXO_AMPLITUDECTRL_PDCTRL_Msk (0x1UL << LFXO_AMPLITUDECTRL_PDCTRL_Pos)
  #define LFXO_AMPLITUDECTRL_PDCTRL_Min (0x0UL)
  #define LFXO_AMPLITUDECTRL_PDCTRL_Max (0x1UL)
  #define LFXO_AMPLITUDECTRL_PDCTRL_Disabled (0x0UL)
  #define LFXO_AMPLITUDECTRL_PDCTRL_Enabled (0x1UL)


/* LFXO_PWRUPCTRL: Power up control */
  #define LFXO_PWRUPCTRL_ResetValue (0x00000000UL)

/* CTRL @Bits 0..1 : Power up control */
  #define LFXO_PWRUPCTRL_CTRL_Pos (0UL)
  #define LFXO_PWRUPCTRL_CTRL_Msk (0x3UL << LFXO_PWRUPCTRL_CTRL_Pos)
  #define LFXO_PWRUPCTRL_CTRL_Min (0x0UL)
  #define LFXO_PWRUPCTRL_CTRL_Max (0x2UL)
  #define LFXO_PWRUPCTRL_CTRL_Auto (0x0UL)
  #define LFXO_PWRUPCTRL_CTRL_PowerUp (0x1UL)
  #define LFXO_PWRUPCTRL_CTRL_PowerDown (0x2UL)


/* LFXO_MODE: LFXO mode */
  #define LFXO_MODE_ResetValue (0x00000000UL)

/* MODE @Bits 0..1 : Mode */
  #define LFXO_MODE_MODE_Pos (0UL)
  #define LFXO_MODE_MODE_Msk (0x3UL << LFXO_MODE_MODE_Pos)
  #define LFXO_MODE_MODE_Min (0x0UL)
  #define LFXO_MODE_MODE_Max (0x3UL)
  #define LFXO_MODE_MODE_Pierce (0x0UL)
  #define LFXO_MODE_MODE_Pixo (0x1UL)
  #define LFXO_MODE_MODE_ExternalSine (0x2UL)
  #define LFXO_MODE_MODE_ExternalSquare (0x3UL)

/* HPMODE @Bit 4 : High performance mode */
  #define LFXO_MODE_HPMODE_Pos (4UL)
  #define LFXO_MODE_HPMODE_Msk (0x1UL << LFXO_MODE_HPMODE_Pos)
  #define LFXO_MODE_HPMODE_Min (0x0UL)
  #define LFXO_MODE_HPMODE_Max (0x1UL)
  #define LFXO_MODE_HPMODE_Disabled (0x0UL)
  #define LFXO_MODE_HPMODE_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          LPCOMP                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct LPCOMP ====================================================== */
/**
  * @brief Low-power comparator
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_SAMPLE;                      /*!< (@ 0x00000008) Sample comparator value. This task requires that LPCOMP
                                                                         has been started by the START task.*/
    __IM uint32_t RESERVED[29];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_SAMPLE;
    __IM uint32_t RESERVED1[29];
    __IOM uint32_t EVENTS_READY;
    __IOM uint32_t EVENTS_DOWN;
    __IOM uint32_t EVENTS_UP;
    __IOM uint32_t EVENTS_CROSS;
    __IM uint32_t RESERVED2[28];
    __IOM uint32_t PUBLISH_READY;
    __IOM uint32_t PUBLISH_DOWN;
    __IOM uint32_t PUBLISH_UP;
    __IOM uint32_t PUBLISH_CROSS;
    __IM uint32_t RESERVED3[28];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED4[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED5[60];
    __IM uint32_t RESULT;
    __IM uint32_t RESERVED6[63];
    __IOM uint32_t ENABLE;
    __IOM uint32_t PSEL;
    __IOM uint32_t REFSEL;
    __IOM uint32_t EXTREFSEL;
    __IM uint32_t RESERVED7[4];
    __IOM uint32_t ANADETECT;
    __IM uint32_t RESERVED8[5];
    __IOM uint32_t HYST;
  } NRF_LPCOMP_Type;

/* LPCOMP_TASKS_START: Start comparator */
  #define LPCOMP_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start comparator */
  #define LPCOMP_TASKS_START_TASKS_START_Pos (0UL)
  #define LPCOMP_TASKS_START_TASKS_START_Msk (0x1UL << LPCOMP_TASKS_START_TASKS_START_Pos)
  #define LPCOMP_TASKS_START_TASKS_START_Min (0x1UL)
  #define LPCOMP_TASKS_START_TASKS_START_Max (0x1UL)
  #define LPCOMP_TASKS_START_TASKS_START_Trigger (0x1UL)


/* LPCOMP_TASKS_STOP: Stop comparator */
  #define LPCOMP_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop comparator */
  #define LPCOMP_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define LPCOMP_TASKS_STOP_TASKS_STOP_Msk (0x1UL << LPCOMP_TASKS_STOP_TASKS_STOP_Pos)
  #define LPCOMP_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define LPCOMP_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define LPCOMP_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* LPCOMP_TASKS_SAMPLE: Sample comparator value. This task requires that LPCOMP has been started by the START task. */
  #define LPCOMP_TASKS_SAMPLE_ResetValue (0x00000000UL)

/* TASKS_SAMPLE @Bit 0 : Sample comparator value. This task requires that LPCOMP has been started by the START task. */
  #define LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos (0UL)
  #define LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Msk (0x1UL << LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos) /*!< Bit mask of TASKS_SAMPLE
                                                                            field.*/
  #define LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Min (0x1UL)
  #define LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Max (0x1UL)
  #define LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Trigger (0x1UL)


/* LPCOMP_SUBSCRIBE_START: Subscribe configuration for task START */
  #define LPCOMP_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define LPCOMP_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define LPCOMP_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << LPCOMP_SUBSCRIBE_START_CHIDX_Pos)
  #define LPCOMP_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define LPCOMP_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_SUBSCRIBE_START_EN_Pos (31UL)
  #define LPCOMP_SUBSCRIBE_START_EN_Msk (0x1UL << LPCOMP_SUBSCRIBE_START_EN_Pos)
  #define LPCOMP_SUBSCRIBE_START_EN_Min (0x0UL)
  #define LPCOMP_SUBSCRIBE_START_EN_Max (0x1UL)
  #define LPCOMP_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define LPCOMP_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* LPCOMP_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define LPCOMP_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define LPCOMP_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define LPCOMP_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << LPCOMP_SUBSCRIBE_STOP_CHIDX_Pos)
  #define LPCOMP_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define LPCOMP_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define LPCOMP_SUBSCRIBE_STOP_EN_Msk (0x1UL << LPCOMP_SUBSCRIBE_STOP_EN_Pos)
  #define LPCOMP_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define LPCOMP_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define LPCOMP_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define LPCOMP_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* LPCOMP_SUBSCRIBE_SAMPLE: Subscribe configuration for task SAMPLE */
  #define LPCOMP_SUBSCRIBE_SAMPLE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SAMPLE will subscribe to */
  #define LPCOMP_SUBSCRIBE_SAMPLE_CHIDX_Pos (0UL)
  #define LPCOMP_SUBSCRIBE_SAMPLE_CHIDX_Msk (0xFFUL << LPCOMP_SUBSCRIBE_SAMPLE_CHIDX_Pos)
  #define LPCOMP_SUBSCRIBE_SAMPLE_CHIDX_Min (0x00UL)
  #define LPCOMP_SUBSCRIBE_SAMPLE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_SUBSCRIBE_SAMPLE_EN_Pos (31UL)
  #define LPCOMP_SUBSCRIBE_SAMPLE_EN_Msk (0x1UL << LPCOMP_SUBSCRIBE_SAMPLE_EN_Pos)
  #define LPCOMP_SUBSCRIBE_SAMPLE_EN_Min (0x0UL)
  #define LPCOMP_SUBSCRIBE_SAMPLE_EN_Max (0x1UL)
  #define LPCOMP_SUBSCRIBE_SAMPLE_EN_Disabled (0x0UL)
  #define LPCOMP_SUBSCRIBE_SAMPLE_EN_Enabled (0x1UL)


/* LPCOMP_EVENTS_READY: LPCOMP is ready and output is valid */
  #define LPCOMP_EVENTS_READY_ResetValue (0x00000000UL)

/* EVENTS_READY @Bit 0 : LPCOMP is ready and output is valid */
  #define LPCOMP_EVENTS_READY_EVENTS_READY_Pos (0UL)
  #define LPCOMP_EVENTS_READY_EVENTS_READY_Msk (0x1UL << LPCOMP_EVENTS_READY_EVENTS_READY_Pos) /*!< Bit mask of EVENTS_READY
                                                                            field.*/
  #define LPCOMP_EVENTS_READY_EVENTS_READY_Min (0x0UL)
  #define LPCOMP_EVENTS_READY_EVENTS_READY_Max (0x1UL)
  #define LPCOMP_EVENTS_READY_EVENTS_READY_NotGenerated (0x0UL)
  #define LPCOMP_EVENTS_READY_EVENTS_READY_Generated (0x1UL)


/* LPCOMP_EVENTS_DOWN: Downward crossing */
  #define LPCOMP_EVENTS_DOWN_ResetValue (0x00000000UL)

/* EVENTS_DOWN @Bit 0 : Downward crossing */
  #define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Pos (0UL)
  #define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Msk (0x1UL << LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Pos)
  #define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Min (0x0UL)
  #define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Max (0x1UL)
  #define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_NotGenerated (0x0UL)
  #define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Generated (0x1UL)


/* LPCOMP_EVENTS_UP: Upward crossing */
  #define LPCOMP_EVENTS_UP_ResetValue (0x00000000UL)

/* EVENTS_UP @Bit 0 : Upward crossing */
  #define LPCOMP_EVENTS_UP_EVENTS_UP_Pos (0UL)
  #define LPCOMP_EVENTS_UP_EVENTS_UP_Msk (0x1UL << LPCOMP_EVENTS_UP_EVENTS_UP_Pos)
  #define LPCOMP_EVENTS_UP_EVENTS_UP_Min (0x0UL)
  #define LPCOMP_EVENTS_UP_EVENTS_UP_Max (0x1UL)
  #define LPCOMP_EVENTS_UP_EVENTS_UP_NotGenerated (0x0UL)
  #define LPCOMP_EVENTS_UP_EVENTS_UP_Generated (0x1UL)


/* LPCOMP_EVENTS_CROSS: Downward or upward crossing */
  #define LPCOMP_EVENTS_CROSS_ResetValue (0x00000000UL)

/* EVENTS_CROSS @Bit 0 : Downward or upward crossing */
  #define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Pos (0UL)
  #define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Msk (0x1UL << LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Pos) /*!< Bit mask of EVENTS_CROSS
                                                                            field.*/
  #define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Min (0x0UL)
  #define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Max (0x1UL)
  #define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_NotGenerated (0x0UL)
  #define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Generated (0x1UL)


/* LPCOMP_PUBLISH_READY: Publish configuration for event READY */
  #define LPCOMP_PUBLISH_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define LPCOMP_PUBLISH_READY_CHIDX_Pos (0UL)
  #define LPCOMP_PUBLISH_READY_CHIDX_Msk (0xFFUL << LPCOMP_PUBLISH_READY_CHIDX_Pos)
  #define LPCOMP_PUBLISH_READY_CHIDX_Min (0x00UL)
  #define LPCOMP_PUBLISH_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_PUBLISH_READY_EN_Pos (31UL)
  #define LPCOMP_PUBLISH_READY_EN_Msk (0x1UL << LPCOMP_PUBLISH_READY_EN_Pos)
  #define LPCOMP_PUBLISH_READY_EN_Min (0x0UL)
  #define LPCOMP_PUBLISH_READY_EN_Max (0x1UL)
  #define LPCOMP_PUBLISH_READY_EN_Disabled (0x0UL)
  #define LPCOMP_PUBLISH_READY_EN_Enabled (0x1UL)


/* LPCOMP_PUBLISH_DOWN: Publish configuration for event DOWN */
  #define LPCOMP_PUBLISH_DOWN_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DOWN will publish to */
  #define LPCOMP_PUBLISH_DOWN_CHIDX_Pos (0UL)
  #define LPCOMP_PUBLISH_DOWN_CHIDX_Msk (0xFFUL << LPCOMP_PUBLISH_DOWN_CHIDX_Pos)
  #define LPCOMP_PUBLISH_DOWN_CHIDX_Min (0x00UL)
  #define LPCOMP_PUBLISH_DOWN_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_PUBLISH_DOWN_EN_Pos (31UL)
  #define LPCOMP_PUBLISH_DOWN_EN_Msk (0x1UL << LPCOMP_PUBLISH_DOWN_EN_Pos)
  #define LPCOMP_PUBLISH_DOWN_EN_Min (0x0UL)
  #define LPCOMP_PUBLISH_DOWN_EN_Max (0x1UL)
  #define LPCOMP_PUBLISH_DOWN_EN_Disabled (0x0UL)
  #define LPCOMP_PUBLISH_DOWN_EN_Enabled (0x1UL)


/* LPCOMP_PUBLISH_UP: Publish configuration for event UP */
  #define LPCOMP_PUBLISH_UP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event UP will publish to */
  #define LPCOMP_PUBLISH_UP_CHIDX_Pos (0UL)
  #define LPCOMP_PUBLISH_UP_CHIDX_Msk (0xFFUL << LPCOMP_PUBLISH_UP_CHIDX_Pos)
  #define LPCOMP_PUBLISH_UP_CHIDX_Min (0x00UL)
  #define LPCOMP_PUBLISH_UP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_PUBLISH_UP_EN_Pos (31UL)
  #define LPCOMP_PUBLISH_UP_EN_Msk (0x1UL << LPCOMP_PUBLISH_UP_EN_Pos)
  #define LPCOMP_PUBLISH_UP_EN_Min (0x0UL)
  #define LPCOMP_PUBLISH_UP_EN_Max (0x1UL)
  #define LPCOMP_PUBLISH_UP_EN_Disabled (0x0UL)
  #define LPCOMP_PUBLISH_UP_EN_Enabled (0x1UL)


/* LPCOMP_PUBLISH_CROSS: Publish configuration for event CROSS */
  #define LPCOMP_PUBLISH_CROSS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CROSS will publish to */
  #define LPCOMP_PUBLISH_CROSS_CHIDX_Pos (0UL)
  #define LPCOMP_PUBLISH_CROSS_CHIDX_Msk (0xFFUL << LPCOMP_PUBLISH_CROSS_CHIDX_Pos)
  #define LPCOMP_PUBLISH_CROSS_CHIDX_Min (0x00UL)
  #define LPCOMP_PUBLISH_CROSS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define LPCOMP_PUBLISH_CROSS_EN_Pos (31UL)
  #define LPCOMP_PUBLISH_CROSS_EN_Msk (0x1UL << LPCOMP_PUBLISH_CROSS_EN_Pos)
  #define LPCOMP_PUBLISH_CROSS_EN_Min (0x0UL)
  #define LPCOMP_PUBLISH_CROSS_EN_Max (0x1UL)
  #define LPCOMP_PUBLISH_CROSS_EN_Disabled (0x0UL)
  #define LPCOMP_PUBLISH_CROSS_EN_Enabled (0x1UL)


/* LPCOMP_SHORTS: Shortcuts between local events and tasks */
  #define LPCOMP_SHORTS_ResetValue (0x00000000UL)

/* READY_SAMPLE @Bit 0 : Shortcut between event READY and task SAMPLE */
  #define LPCOMP_SHORTS_READY_SAMPLE_Pos (0UL)
  #define LPCOMP_SHORTS_READY_SAMPLE_Msk (0x1UL << LPCOMP_SHORTS_READY_SAMPLE_Pos)
  #define LPCOMP_SHORTS_READY_SAMPLE_Min (0x0UL)
  #define LPCOMP_SHORTS_READY_SAMPLE_Max (0x1UL)
  #define LPCOMP_SHORTS_READY_SAMPLE_Disabled (0x0UL)
  #define LPCOMP_SHORTS_READY_SAMPLE_Enabled (0x1UL)

/* READY_STOP @Bit 1 : Shortcut between event READY and task STOP */
  #define LPCOMP_SHORTS_READY_STOP_Pos (1UL)
  #define LPCOMP_SHORTS_READY_STOP_Msk (0x1UL << LPCOMP_SHORTS_READY_STOP_Pos)
  #define LPCOMP_SHORTS_READY_STOP_Min (0x0UL)
  #define LPCOMP_SHORTS_READY_STOP_Max (0x1UL)
  #define LPCOMP_SHORTS_READY_STOP_Disabled (0x0UL)
  #define LPCOMP_SHORTS_READY_STOP_Enabled (0x1UL)

/* DOWN_STOP @Bit 2 : Shortcut between event DOWN and task STOP */
  #define LPCOMP_SHORTS_DOWN_STOP_Pos (2UL)
  #define LPCOMP_SHORTS_DOWN_STOP_Msk (0x1UL << LPCOMP_SHORTS_DOWN_STOP_Pos)
  #define LPCOMP_SHORTS_DOWN_STOP_Min (0x0UL)
  #define LPCOMP_SHORTS_DOWN_STOP_Max (0x1UL)
  #define LPCOMP_SHORTS_DOWN_STOP_Disabled (0x0UL)
  #define LPCOMP_SHORTS_DOWN_STOP_Enabled (0x1UL)

/* UP_STOP @Bit 3 : Shortcut between event UP and task STOP */
  #define LPCOMP_SHORTS_UP_STOP_Pos (3UL)
  #define LPCOMP_SHORTS_UP_STOP_Msk (0x1UL << LPCOMP_SHORTS_UP_STOP_Pos)
  #define LPCOMP_SHORTS_UP_STOP_Min (0x0UL)
  #define LPCOMP_SHORTS_UP_STOP_Max (0x1UL)
  #define LPCOMP_SHORTS_UP_STOP_Disabled (0x0UL)
  #define LPCOMP_SHORTS_UP_STOP_Enabled (0x1UL)

/* CROSS_STOP @Bit 4 : Shortcut between event CROSS and task STOP */
  #define LPCOMP_SHORTS_CROSS_STOP_Pos (4UL)
  #define LPCOMP_SHORTS_CROSS_STOP_Msk (0x1UL << LPCOMP_SHORTS_CROSS_STOP_Pos)
  #define LPCOMP_SHORTS_CROSS_STOP_Min (0x0UL)
  #define LPCOMP_SHORTS_CROSS_STOP_Max (0x1UL)
  #define LPCOMP_SHORTS_CROSS_STOP_Disabled (0x0UL)
  #define LPCOMP_SHORTS_CROSS_STOP_Enabled (0x1UL)


/* LPCOMP_INTEN: Enable or disable interrupt */
  #define LPCOMP_INTEN_ResetValue (0x00000000UL)

/* READY @Bit 0 : Enable or disable interrupt for event READY */
  #define LPCOMP_INTEN_READY_Pos (0UL)
  #define LPCOMP_INTEN_READY_Msk (0x1UL << LPCOMP_INTEN_READY_Pos)
  #define LPCOMP_INTEN_READY_Min (0x0UL)
  #define LPCOMP_INTEN_READY_Max (0x1UL)
  #define LPCOMP_INTEN_READY_Disabled (0x0UL)
  #define LPCOMP_INTEN_READY_Enabled (0x1UL)

/* DOWN @Bit 1 : Enable or disable interrupt for event DOWN */
  #define LPCOMP_INTEN_DOWN_Pos (1UL)
  #define LPCOMP_INTEN_DOWN_Msk (0x1UL << LPCOMP_INTEN_DOWN_Pos)
  #define LPCOMP_INTEN_DOWN_Min (0x0UL)
  #define LPCOMP_INTEN_DOWN_Max (0x1UL)
  #define LPCOMP_INTEN_DOWN_Disabled (0x0UL)
  #define LPCOMP_INTEN_DOWN_Enabled (0x1UL)

/* UP @Bit 2 : Enable or disable interrupt for event UP */
  #define LPCOMP_INTEN_UP_Pos (2UL)
  #define LPCOMP_INTEN_UP_Msk (0x1UL << LPCOMP_INTEN_UP_Pos)
  #define LPCOMP_INTEN_UP_Min (0x0UL)
  #define LPCOMP_INTEN_UP_Max (0x1UL)
  #define LPCOMP_INTEN_UP_Disabled (0x0UL)
  #define LPCOMP_INTEN_UP_Enabled (0x1UL)

/* CROSS @Bit 3 : Enable or disable interrupt for event CROSS */
  #define LPCOMP_INTEN_CROSS_Pos (3UL)
  #define LPCOMP_INTEN_CROSS_Msk (0x1UL << LPCOMP_INTEN_CROSS_Pos)
  #define LPCOMP_INTEN_CROSS_Min (0x0UL)
  #define LPCOMP_INTEN_CROSS_Max (0x1UL)
  #define LPCOMP_INTEN_CROSS_Disabled (0x0UL)
  #define LPCOMP_INTEN_CROSS_Enabled (0x1UL)


/* LPCOMP_INTENSET: Enable interrupt */
  #define LPCOMP_INTENSET_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to enable interrupt for event READY */
  #define LPCOMP_INTENSET_READY_Pos (0UL)
  #define LPCOMP_INTENSET_READY_Msk (0x1UL << LPCOMP_INTENSET_READY_Pos)
  #define LPCOMP_INTENSET_READY_Min (0x0UL)
  #define LPCOMP_INTENSET_READY_Max (0x1UL)
  #define LPCOMP_INTENSET_READY_Set (0x1UL)
  #define LPCOMP_INTENSET_READY_Disabled (0x0UL)
  #define LPCOMP_INTENSET_READY_Enabled (0x1UL)

/* DOWN @Bit 1 : Write '1' to enable interrupt for event DOWN */
  #define LPCOMP_INTENSET_DOWN_Pos (1UL)
  #define LPCOMP_INTENSET_DOWN_Msk (0x1UL << LPCOMP_INTENSET_DOWN_Pos)
  #define LPCOMP_INTENSET_DOWN_Min (0x0UL)
  #define LPCOMP_INTENSET_DOWN_Max (0x1UL)
  #define LPCOMP_INTENSET_DOWN_Set (0x1UL)
  #define LPCOMP_INTENSET_DOWN_Disabled (0x0UL)
  #define LPCOMP_INTENSET_DOWN_Enabled (0x1UL)

/* UP @Bit 2 : Write '1' to enable interrupt for event UP */
  #define LPCOMP_INTENSET_UP_Pos (2UL)
  #define LPCOMP_INTENSET_UP_Msk (0x1UL << LPCOMP_INTENSET_UP_Pos)
  #define LPCOMP_INTENSET_UP_Min (0x0UL)
  #define LPCOMP_INTENSET_UP_Max (0x1UL)
  #define LPCOMP_INTENSET_UP_Set (0x1UL)
  #define LPCOMP_INTENSET_UP_Disabled (0x0UL)
  #define LPCOMP_INTENSET_UP_Enabled (0x1UL)

/* CROSS @Bit 3 : Write '1' to enable interrupt for event CROSS */
  #define LPCOMP_INTENSET_CROSS_Pos (3UL)
  #define LPCOMP_INTENSET_CROSS_Msk (0x1UL << LPCOMP_INTENSET_CROSS_Pos)
  #define LPCOMP_INTENSET_CROSS_Min (0x0UL)
  #define LPCOMP_INTENSET_CROSS_Max (0x1UL)
  #define LPCOMP_INTENSET_CROSS_Set (0x1UL)
  #define LPCOMP_INTENSET_CROSS_Disabled (0x0UL)
  #define LPCOMP_INTENSET_CROSS_Enabled (0x1UL)


/* LPCOMP_INTENCLR: Disable interrupt */
  #define LPCOMP_INTENCLR_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to disable interrupt for event READY */
  #define LPCOMP_INTENCLR_READY_Pos (0UL)
  #define LPCOMP_INTENCLR_READY_Msk (0x1UL << LPCOMP_INTENCLR_READY_Pos)
  #define LPCOMP_INTENCLR_READY_Min (0x0UL)
  #define LPCOMP_INTENCLR_READY_Max (0x1UL)
  #define LPCOMP_INTENCLR_READY_Clear (0x1UL)
  #define LPCOMP_INTENCLR_READY_Disabled (0x0UL)
  #define LPCOMP_INTENCLR_READY_Enabled (0x1UL)

/* DOWN @Bit 1 : Write '1' to disable interrupt for event DOWN */
  #define LPCOMP_INTENCLR_DOWN_Pos (1UL)
  #define LPCOMP_INTENCLR_DOWN_Msk (0x1UL << LPCOMP_INTENCLR_DOWN_Pos)
  #define LPCOMP_INTENCLR_DOWN_Min (0x0UL)
  #define LPCOMP_INTENCLR_DOWN_Max (0x1UL)
  #define LPCOMP_INTENCLR_DOWN_Clear (0x1UL)
  #define LPCOMP_INTENCLR_DOWN_Disabled (0x0UL)
  #define LPCOMP_INTENCLR_DOWN_Enabled (0x1UL)

/* UP @Bit 2 : Write '1' to disable interrupt for event UP */
  #define LPCOMP_INTENCLR_UP_Pos (2UL)
  #define LPCOMP_INTENCLR_UP_Msk (0x1UL << LPCOMP_INTENCLR_UP_Pos)
  #define LPCOMP_INTENCLR_UP_Min (0x0UL)
  #define LPCOMP_INTENCLR_UP_Max (0x1UL)
  #define LPCOMP_INTENCLR_UP_Clear (0x1UL)
  #define LPCOMP_INTENCLR_UP_Disabled (0x0UL)
  #define LPCOMP_INTENCLR_UP_Enabled (0x1UL)

/* CROSS @Bit 3 : Write '1' to disable interrupt for event CROSS */
  #define LPCOMP_INTENCLR_CROSS_Pos (3UL)
  #define LPCOMP_INTENCLR_CROSS_Msk (0x1UL << LPCOMP_INTENCLR_CROSS_Pos)
  #define LPCOMP_INTENCLR_CROSS_Min (0x0UL)
  #define LPCOMP_INTENCLR_CROSS_Max (0x1UL)
  #define LPCOMP_INTENCLR_CROSS_Clear (0x1UL)
  #define LPCOMP_INTENCLR_CROSS_Disabled (0x0UL)
  #define LPCOMP_INTENCLR_CROSS_Enabled (0x1UL)


/* LPCOMP_INTPEND: Pending interrupts */
  #define LPCOMP_INTPEND_ResetValue (0x00000000UL)

/* READY @Bit 0 : Read pending status of interrupt for event READY */
  #define LPCOMP_INTPEND_READY_Pos (0UL)
  #define LPCOMP_INTPEND_READY_Msk (0x1UL << LPCOMP_INTPEND_READY_Pos)
  #define LPCOMP_INTPEND_READY_Min (0x0UL)
  #define LPCOMP_INTPEND_READY_Max (0x1UL)
  #define LPCOMP_INTPEND_READY_NotPending (0x0UL)
  #define LPCOMP_INTPEND_READY_Pending (0x1UL)

/* DOWN @Bit 1 : Read pending status of interrupt for event DOWN */
  #define LPCOMP_INTPEND_DOWN_Pos (1UL)
  #define LPCOMP_INTPEND_DOWN_Msk (0x1UL << LPCOMP_INTPEND_DOWN_Pos)
  #define LPCOMP_INTPEND_DOWN_Min (0x0UL)
  #define LPCOMP_INTPEND_DOWN_Max (0x1UL)
  #define LPCOMP_INTPEND_DOWN_NotPending (0x0UL)
  #define LPCOMP_INTPEND_DOWN_Pending (0x1UL)

/* UP @Bit 2 : Read pending status of interrupt for event UP */
  #define LPCOMP_INTPEND_UP_Pos (2UL)
  #define LPCOMP_INTPEND_UP_Msk (0x1UL << LPCOMP_INTPEND_UP_Pos)
  #define LPCOMP_INTPEND_UP_Min (0x0UL)
  #define LPCOMP_INTPEND_UP_Max (0x1UL)
  #define LPCOMP_INTPEND_UP_NotPending (0x0UL)
  #define LPCOMP_INTPEND_UP_Pending (0x1UL)

/* CROSS @Bit 3 : Read pending status of interrupt for event CROSS */
  #define LPCOMP_INTPEND_CROSS_Pos (3UL)
  #define LPCOMP_INTPEND_CROSS_Msk (0x1UL << LPCOMP_INTPEND_CROSS_Pos)
  #define LPCOMP_INTPEND_CROSS_Min (0x0UL)
  #define LPCOMP_INTPEND_CROSS_Max (0x1UL)
  #define LPCOMP_INTPEND_CROSS_NotPending (0x0UL)
  #define LPCOMP_INTPEND_CROSS_Pending (0x1UL)


/* LPCOMP_RESULT: Compare result */
  #define LPCOMP_RESULT_ResetValue (0x00000000UL)

/* RESULT @Bit 0 : Result of last compare. Decision point SAMPLE task. */
  #define LPCOMP_RESULT_RESULT_Pos (0UL)
  #define LPCOMP_RESULT_RESULT_Msk (0x1UL << LPCOMP_RESULT_RESULT_Pos)
  #define LPCOMP_RESULT_RESULT_Min (0x0UL)
  #define LPCOMP_RESULT_RESULT_Max (0x1UL)
  #define LPCOMP_RESULT_RESULT_Below (0x0UL)
  #define LPCOMP_RESULT_RESULT_Above (0x1UL)


/* LPCOMP_ENABLE: Enable LPCOMP */
  #define LPCOMP_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..1 : Enable or disable LPCOMP */
  #define LPCOMP_ENABLE_ENABLE_Pos (0UL)
  #define LPCOMP_ENABLE_ENABLE_Msk (0x3UL << LPCOMP_ENABLE_ENABLE_Pos)
  #define LPCOMP_ENABLE_ENABLE_Min (0x0UL)
  #define LPCOMP_ENABLE_ENABLE_Max (0x1UL)
  #define LPCOMP_ENABLE_ENABLE_Disabled (0x0UL)
  #define LPCOMP_ENABLE_ENABLE_Enabled (0x1UL)


/* LPCOMP_PSEL: Input pin select */
  #define LPCOMP_PSEL_ResetValue (0x00000000UL)

/* PIN @Bits 0..4 : Analog pin select */
  #define LPCOMP_PSEL_PIN_Pos (0UL)
  #define LPCOMP_PSEL_PIN_Msk (0x1FUL << LPCOMP_PSEL_PIN_Pos)

/* PORT @Bits 8..11 : GPIO Port selection */
  #define LPCOMP_PSEL_PORT_Pos (8UL)
  #define LPCOMP_PSEL_PORT_Msk (0xFUL << LPCOMP_PSEL_PORT_Pos)


/* LPCOMP_REFSEL: Reference select */
  #define LPCOMP_REFSEL_ResetValue (0x00000004UL)

/* REFSEL @Bits 0..3 : Reference select */
  #define LPCOMP_REFSEL_REFSEL_Pos (0UL)
  #define LPCOMP_REFSEL_REFSEL_Msk (0xFUL << LPCOMP_REFSEL_REFSEL_Pos)
  #define LPCOMP_REFSEL_REFSEL_Min (0x0UL)
  #define LPCOMP_REFSEL_REFSEL_Max (0xFUL)
  #define LPCOMP_REFSEL_REFSEL_Ref1_8Vdd (0x0UL)
  #define LPCOMP_REFSEL_REFSEL_Ref2_8Vdd (0x1UL)
  #define LPCOMP_REFSEL_REFSEL_Ref3_8Vdd (0x2UL)
  #define LPCOMP_REFSEL_REFSEL_Ref4_8Vdd (0x3UL)
  #define LPCOMP_REFSEL_REFSEL_Ref5_8Vdd (0x4UL)
  #define LPCOMP_REFSEL_REFSEL_Ref6_8Vdd (0x5UL)
  #define LPCOMP_REFSEL_REFSEL_Ref7_8Vdd (0x6UL)
  #define LPCOMP_REFSEL_REFSEL_ARef (0x7UL)
  #define LPCOMP_REFSEL_REFSEL_Ref1_16Vdd (0x8UL)
  #define LPCOMP_REFSEL_REFSEL_Ref3_16Vdd (0x9UL)
  #define LPCOMP_REFSEL_REFSEL_Ref5_16Vdd (0xAUL)
  #define LPCOMP_REFSEL_REFSEL_Ref7_16Vdd (0xBUL)
  #define LPCOMP_REFSEL_REFSEL_Ref9_16Vdd (0xCUL)
  #define LPCOMP_REFSEL_REFSEL_Ref11_16Vdd (0xDUL)
  #define LPCOMP_REFSEL_REFSEL_Ref13_16Vdd (0xEUL)
  #define LPCOMP_REFSEL_REFSEL_Ref15_16Vdd (0xFUL)


/* LPCOMP_EXTREFSEL: External reference select */
  #define LPCOMP_EXTREFSEL_ResetValue (0x00000000UL)

/* PIN @Bits 0..4 : External analog reference pin select */
  #define LPCOMP_EXTREFSEL_PIN_Pos (0UL)
  #define LPCOMP_EXTREFSEL_PIN_Msk (0x1FUL << LPCOMP_EXTREFSEL_PIN_Pos)

/* PORT @Bits 8..11 : GPIO Port selection */
  #define LPCOMP_EXTREFSEL_PORT_Pos (8UL)
  #define LPCOMP_EXTREFSEL_PORT_Msk (0xFUL << LPCOMP_EXTREFSEL_PORT_Pos)


/* LPCOMP_ANADETECT: Analog detect configuration */
  #define LPCOMP_ANADETECT_ResetValue (0x00000000UL)

/* ANADETECT @Bits 0..1 : Analog detect configuration */
  #define LPCOMP_ANADETECT_ANADETECT_Pos (0UL)
  #define LPCOMP_ANADETECT_ANADETECT_Msk (0x3UL << LPCOMP_ANADETECT_ANADETECT_Pos)
  #define LPCOMP_ANADETECT_ANADETECT_Min (0x0UL)
  #define LPCOMP_ANADETECT_ANADETECT_Max (0x2UL)
  #define LPCOMP_ANADETECT_ANADETECT_Cross (0x0UL)   /*!< Generate ANADETECT on crossing, both upward crossing and downward
                                                          crossing*/
  #define LPCOMP_ANADETECT_ANADETECT_Up (0x1UL)
  #define LPCOMP_ANADETECT_ANADETECT_Down (0x2UL)


/* LPCOMP_HYST: Comparator hysteresis enable */
  #define LPCOMP_HYST_ResetValue (0x00000000UL)

/* HYST @Bit 0 : Comparator hysteresis enable */
  #define LPCOMP_HYST_HYST_Pos (0UL)
  #define LPCOMP_HYST_HYST_Msk (0x1UL << LPCOMP_HYST_HYST_Pos)
  #define LPCOMP_HYST_HYST_Min (0x0UL)
  #define LPCOMP_HYST_HYST_Max (0x1UL)
  #define LPCOMP_HYST_HYST_Disabled (0x0UL)
  #define LPCOMP_HYST_HYST_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          LRCCONF                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ============================================== Struct LRCCONF_TASKS_CONSTLAT ============================================== */
/**
  * @brief TASKS_CONSTLAT [LRCCONF_TASKS_CONSTLAT] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  ENABLE;
  __OM  uint32_t  DISABLE;
} NRF_LRCCONF_TASKS_CONSTLAT_Type;

/* LRCCONF_TASKS_CONSTLAT_ENABLE: Enable constant latency mode */
  #define LRCCONF_TASKS_CONSTLAT_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable constant latency mode */
  #define LRCCONF_TASKS_CONSTLAT_ENABLE_ENABLE_Pos (0UL)
  #define LRCCONF_TASKS_CONSTLAT_ENABLE_ENABLE_Msk (0x1UL << LRCCONF_TASKS_CONSTLAT_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE
                                                                            field.*/
  #define LRCCONF_TASKS_CONSTLAT_ENABLE_ENABLE_Min (0x1UL)
  #define LRCCONF_TASKS_CONSTLAT_ENABLE_ENABLE_Max (0x1UL)
  #define LRCCONF_TASKS_CONSTLAT_ENABLE_ENABLE_Trigger (0x1UL)


/* LRCCONF_TASKS_CONSTLAT_DISABLE: Disable constant latency mode */
  #define LRCCONF_TASKS_CONSTLAT_DISABLE_ResetValue (0x00000000UL)

/* DISABLE @Bit 0 : Disable constant latency mode */
  #define LRCCONF_TASKS_CONSTLAT_DISABLE_DISABLE_Pos (0UL)
  #define LRCCONF_TASKS_CONSTLAT_DISABLE_DISABLE_Msk (0x1UL << LRCCONF_TASKS_CONSTLAT_DISABLE_DISABLE_Pos) /*!< Bit mask of
                                                                            DISABLE field.*/
  #define LRCCONF_TASKS_CONSTLAT_DISABLE_DISABLE_Min (0x1UL)
  #define LRCCONF_TASKS_CONSTLAT_DISABLE_DISABLE_Max (0x1UL)
  #define LRCCONF_TASKS_CONSTLAT_DISABLE_DISABLE_Trigger (0x1UL)



/* ============================================= Struct LRCCONF_TASKS_SYSTEMOFF ============================================== */
/**
  * @brief TASKS_SYSTEMOFF [LRCCONF_TASKS_SYSTEMOFF] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  NOTREADY;
  __OM  uint32_t  READY;
} NRF_LRCCONF_TASKS_SYSTEMOFF_Type;

/* LRCCONF_TASKS_SYSTEMOFF_NOTREADY: Not ready to go to System OFF */
  #define LRCCONF_TASKS_SYSTEMOFF_NOTREADY_ResetValue (0x00000000UL)

/* NOTREADY @Bit 0 : Not ready to go to System OFF */
  #define LRCCONF_TASKS_SYSTEMOFF_NOTREADY_NOTREADY_Pos (0UL)
  #define LRCCONF_TASKS_SYSTEMOFF_NOTREADY_NOTREADY_Msk (0x1UL << LRCCONF_TASKS_SYSTEMOFF_NOTREADY_NOTREADY_Pos) /*!< Bit mask
                                                                            of NOTREADY field.*/
  #define LRCCONF_TASKS_SYSTEMOFF_NOTREADY_NOTREADY_Min (0x1UL)
  #define LRCCONF_TASKS_SYSTEMOFF_NOTREADY_NOTREADY_Max (0x1UL)
  #define LRCCONF_TASKS_SYSTEMOFF_NOTREADY_NOTREADY_Trigger (0x1UL)


/* LRCCONF_TASKS_SYSTEMOFF_READY: Ready to go to System OFF */
  #define LRCCONF_TASKS_SYSTEMOFF_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Ready to go to System OFF */
  #define LRCCONF_TASKS_SYSTEMOFF_READY_READY_Pos (0UL)
  #define LRCCONF_TASKS_SYSTEMOFF_READY_READY_Msk (0x1UL << LRCCONF_TASKS_SYSTEMOFF_READY_READY_Pos) /*!< Bit mask of READY
                                                                            field.*/
  #define LRCCONF_TASKS_SYSTEMOFF_READY_READY_Min (0x1UL)
  #define LRCCONF_TASKS_SYSTEMOFF_READY_READY_Max (0x1UL)
  #define LRCCONF_TASKS_SYSTEMOFF_READY_READY_Trigger (0x1UL)



/* ================================================= Struct LRCCONF_CLKSTAT ================================================== */
/**
  * @brief CLKSTAT [LRCCONF_CLKSTAT] (unspecified)
  */
typedef struct {
  __IOM uint32_t  RUN;                               /*!< (@ 0x00000000) Status indicating that TASKS_REQCLKSRC task has been
                                                                         triggered for clock [n].*/
  __IOM uint32_t  SRC;
} NRF_LRCCONF_CLKSTAT_Type;
  #define LRCCONF_CLKSTAT_MaxCount (8UL)
  #define LRCCONF_CLKSTAT_MaxIndex (7UL)
  #define LRCCONF_CLKSTAT_MinIndex (0UL)

/* LRCCONF_CLKSTAT_RUN: Status indicating that TASKS_REQCLKSRC task has been triggered for clock [n]. */
  #define LRCCONF_CLKSTAT_RUN_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : Clock start task triggered or not */
  #define LRCCONF_CLKSTAT_RUN_STATUS_Pos (0UL)
  #define LRCCONF_CLKSTAT_RUN_STATUS_Msk (0x1UL << LRCCONF_CLKSTAT_RUN_STATUS_Pos)
  #define LRCCONF_CLKSTAT_RUN_STATUS_Min (0x0UL)
  #define LRCCONF_CLKSTAT_RUN_STATUS_Max (0x1UL)
  #define LRCCONF_CLKSTAT_RUN_STATUS_NotTriggered (0x0UL)
  #define LRCCONF_CLKSTAT_RUN_STATUS_Triggered (0x1UL)


/* LRCCONF_CLKSTAT_SRC: Status indicating clock source for clock [n] */
  #define LRCCONF_CLKSTAT_SRC_ResetValue (0x00000000UL)

/* SRC @Bit 0 : Clock source status */
  #define LRCCONF_CLKSTAT_SRC_SRC_Pos (0UL)
  #define LRCCONF_CLKSTAT_SRC_SRC_Msk (0x1UL << LRCCONF_CLKSTAT_SRC_SRC_Pos)
  #define LRCCONF_CLKSTAT_SRC_SRC_Min (0x0UL)
  #define LRCCONF_CLKSTAT_SRC_SRC_Max (0x1UL)
  #define LRCCONF_CLKSTAT_SRC_SRC_OpenLoop (0x0UL)
  #define LRCCONF_CLKSTAT_SRC_SRC_ClosedLoop (0x1UL)

/* BYPASS @Bit 1 : Clock source bypass status */
  #define LRCCONF_CLKSTAT_SRC_BYPASS_Pos (1UL)
  #define LRCCONF_CLKSTAT_SRC_BYPASS_Msk (0x1UL << LRCCONF_CLKSTAT_SRC_BYPASS_Pos)
  #define LRCCONF_CLKSTAT_SRC_BYPASS_Min (0x0UL)
  #define LRCCONF_CLKSTAT_SRC_BYPASS_Max (0x1UL)
  #define LRCCONF_CLKSTAT_SRC_BYPASS_Disable (0x0UL)
  #define LRCCONF_CLKSTAT_SRC_BYPASS_Enable (0x1UL)



/* ================================================= Struct LRCCONF_CLKCTRL ================================================== */
/**
  * @brief CLKCTRL [LRCCONF_CLKCTRL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  ALWAYSRUN;
  __IOM uint32_t  SRC;
} NRF_LRCCONF_CLKCTRL_Type;
  #define LRCCONF_CLKCTRL_MaxCount (8UL)
  #define LRCCONF_CLKCTRL_MaxIndex (7UL)
  #define LRCCONF_CLKCTRL_MinIndex (0UL)

/* LRCCONF_CLKCTRL_ALWAYSRUN: Force the clock [n] and tree running always */
  #define LRCCONF_CLKCTRL_ALWAYSRUN_ResetValue (0x00000000UL)

/* FORCE @Bit 0 : Force the clock always running */
  #define LRCCONF_CLKCTRL_ALWAYSRUN_FORCE_Pos (0UL)
  #define LRCCONF_CLKCTRL_ALWAYSRUN_FORCE_Msk (0x1UL << LRCCONF_CLKCTRL_ALWAYSRUN_FORCE_Pos)
  #define LRCCONF_CLKCTRL_ALWAYSRUN_FORCE_Min (0x0UL)
  #define LRCCONF_CLKCTRL_ALWAYSRUN_FORCE_Max (0x1UL)
  #define LRCCONF_CLKCTRL_ALWAYSRUN_FORCE_Automatic (0x0UL)
  #define LRCCONF_CLKCTRL_ALWAYSRUN_FORCE_AlwaysRun (0x1UL)


/* LRCCONF_CLKCTRL_SRC: Select the clock source for clock [n] */
  #define LRCCONF_CLKCTRL_SRC_ResetValue (0x00000000UL)

/* SRC @Bit 0 : Clock source */
  #define LRCCONF_CLKCTRL_SRC_SRC_Pos (0UL)
  #define LRCCONF_CLKCTRL_SRC_SRC_Msk (0x1UL << LRCCONF_CLKCTRL_SRC_SRC_Pos)
  #define LRCCONF_CLKCTRL_SRC_SRC_Min (0x0UL)
  #define LRCCONF_CLKCTRL_SRC_SRC_Max (0x1UL)
  #define LRCCONF_CLKCTRL_SRC_SRC_OpenLoop (0x0UL)
  #define LRCCONF_CLKCTRL_SRC_SRC_ClosedLoop (0x1UL)

/* BYPASS @Bit 1 : Clock source bypass */
  #define LRCCONF_CLKCTRL_SRC_BYPASS_Pos (1UL)
  #define LRCCONF_CLKCTRL_SRC_BYPASS_Msk (0x1UL << LRCCONF_CLKCTRL_SRC_BYPASS_Pos)
  #define LRCCONF_CLKCTRL_SRC_BYPASS_Min (0x0UL)
  #define LRCCONF_CLKCTRL_SRC_BYPASS_Max (0x1UL)
  #define LRCCONF_CLKCTRL_SRC_BYPASS_Disable (0x0UL)
  #define LRCCONF_CLKCTRL_SRC_BYPASS_Enable (0x1UL)


/* ===================================================== Struct LRCCONF ====================================================== */
/**
  * @brief LRCCONF
  */
  typedef struct {
    __OM uint32_t TASKS_REQCLKSRC[8];
    __OM uint32_t TASKS_STOPREQCLKSRC[8];
    __OM NRF_LRCCONF_TASKS_CONSTLAT_Type TASKS_CONSTLAT;
    __OM NRF_LRCCONF_TASKS_SYSTEMOFF_Type TASKS_SYSTEMOFF;
    __OM uint32_t TASKS_REQHFXO;
    __OM uint32_t TASKS_STOPREQHFXO;
    __IM uint32_t RESERVED[42];
    __IOM uint32_t EVENTS_CLKSRCSTARTED[8];
    __IOM uint32_t EVENTS_HFXOSTARTED;
    __IM uint32_t RESERVED1[183];
    __IOM NRF_LRCCONF_CLKSTAT_Type CLKSTAT[8];
    __IOM NRF_LRCCONF_CLKCTRL_Type CLKCTRL[8];
    __IM uint32_t CONSTLATSTAT;
    __IM uint32_t RESERVED2[3];
    __IOM uint32_t POWERON;
    __IOM uint32_t RETAIN;
    __IM uint32_t RESERVED3[26];
    __IOM uint32_t AX2XWAITSTATES[16];               /*!< (@ 0x00000500) AX2X bridge waitstates for the domain [n], where n is
                                                                         the Domain ID.*/
  } NRF_LRCCONF_Type;

/* LRCCONF_TASKS_REQCLKSRC: Request the clock source for clock [n] */
  #define LRCCONF_TASKS_REQCLKSRC_MaxCount (8UL)
  #define LRCCONF_TASKS_REQCLKSRC_MaxIndex (7UL)
  #define LRCCONF_TASKS_REQCLKSRC_MinIndex (0UL)
  #define LRCCONF_TASKS_REQCLKSRC_ResetValue (0x00000000UL)

/* TASKS_REQCLKSRC @Bit 0 : Request the clock source for clock [n] */
  #define LRCCONF_TASKS_REQCLKSRC_TASKS_REQCLKSRC_Pos (0UL)
  #define LRCCONF_TASKS_REQCLKSRC_TASKS_REQCLKSRC_Msk (0x1UL << LRCCONF_TASKS_REQCLKSRC_TASKS_REQCLKSRC_Pos) /*!< Bit mask of
                                                                            TASKS_REQCLKSRC field.*/
  #define LRCCONF_TASKS_REQCLKSRC_TASKS_REQCLKSRC_Min (0x1UL)
  #define LRCCONF_TASKS_REQCLKSRC_TASKS_REQCLKSRC_Max (0x1UL)
  #define LRCCONF_TASKS_REQCLKSRC_TASKS_REQCLKSRC_Trigger (0x1UL)


/* LRCCONF_TASKS_STOPREQCLKSRC: Stop requesting the clock source for clock [n] */
  #define LRCCONF_TASKS_STOPREQCLKSRC_MaxCount (8UL)
  #define LRCCONF_TASKS_STOPREQCLKSRC_MaxIndex (7UL)
  #define LRCCONF_TASKS_STOPREQCLKSRC_MinIndex (0UL)
  #define LRCCONF_TASKS_STOPREQCLKSRC_ResetValue (0x00000000UL)

/* TASKS_STOPREQCLKSRC @Bit 0 : Stop requesting the clock source for clock [n] */
  #define LRCCONF_TASKS_STOPREQCLKSRC_TASKS_STOPREQCLKSRC_Pos (0UL)
  #define LRCCONF_TASKS_STOPREQCLKSRC_TASKS_STOPREQCLKSRC_Msk (0x1UL << LRCCONF_TASKS_STOPREQCLKSRC_TASKS_STOPREQCLKSRC_Pos)
                                                                            /*!< Bit mask of TASKS_STOPREQCLKSRC field.*/
  #define LRCCONF_TASKS_STOPREQCLKSRC_TASKS_STOPREQCLKSRC_Min (0x1UL)
  #define LRCCONF_TASKS_STOPREQCLKSRC_TASKS_STOPREQCLKSRC_Max (0x1UL)
  #define LRCCONF_TASKS_STOPREQCLKSRC_TASKS_STOPREQCLKSRC_Trigger (0x1UL)


/* LRCCONF_TASKS_REQHFXO: Request HFXO */
  #define LRCCONF_TASKS_REQHFXO_ResetValue (0x00000000UL)

/* TASKS_REQHFXO @Bit 0 : Request HFXO */
  #define LRCCONF_TASKS_REQHFXO_TASKS_REQHFXO_Pos (0UL)
  #define LRCCONF_TASKS_REQHFXO_TASKS_REQHFXO_Msk (0x1UL << LRCCONF_TASKS_REQHFXO_TASKS_REQHFXO_Pos) /*!< Bit mask of
                                                                            TASKS_REQHFXO field.*/
  #define LRCCONF_TASKS_REQHFXO_TASKS_REQHFXO_Min (0x1UL)
  #define LRCCONF_TASKS_REQHFXO_TASKS_REQHFXO_Max (0x1UL)
  #define LRCCONF_TASKS_REQHFXO_TASKS_REQHFXO_Trigger (0x1UL)


/* LRCCONF_TASKS_STOPREQHFXO: Stop requesting HFXO */
  #define LRCCONF_TASKS_STOPREQHFXO_ResetValue (0x00000000UL)

/* TASKS_STOPREQHFXO @Bit 0 : Stop requesting HFXO */
  #define LRCCONF_TASKS_STOPREQHFXO_TASKS_STOPREQHFXO_Pos (0UL)
  #define LRCCONF_TASKS_STOPREQHFXO_TASKS_STOPREQHFXO_Msk (0x1UL << LRCCONF_TASKS_STOPREQHFXO_TASKS_STOPREQHFXO_Pos) /*!< Bit
                                                                            mask of TASKS_STOPREQHFXO field.*/
  #define LRCCONF_TASKS_STOPREQHFXO_TASKS_STOPREQHFXO_Min (0x1UL)
  #define LRCCONF_TASKS_STOPREQHFXO_TASKS_STOPREQHFXO_Max (0x1UL)
  #define LRCCONF_TASKS_STOPREQHFXO_TASKS_STOPREQHFXO_Trigger (0x1UL)


/* LRCCONF_EVENTS_CLKSRCSTARTED: Clock source is started for clock [n] */
  #define LRCCONF_EVENTS_CLKSRCSTARTED_MaxCount (8UL)
  #define LRCCONF_EVENTS_CLKSRCSTARTED_MaxIndex (7UL)
  #define LRCCONF_EVENTS_CLKSRCSTARTED_MinIndex (0UL)
  #define LRCCONF_EVENTS_CLKSRCSTARTED_ResetValue (0x00000000UL)

/* EVENTS_CLKSRCSTARTED @Bit 0 : Clock source is started for clock [n] */
  #define LRCCONF_EVENTS_CLKSRCSTARTED_EVENTS_CLKSRCSTARTED_Pos (0UL)
  #define LRCCONF_EVENTS_CLKSRCSTARTED_EVENTS_CLKSRCSTARTED_Msk (0x1UL << LRCCONF_EVENTS_CLKSRCSTARTED_EVENTS_CLKSRCSTARTED_Pos)
                                                                            /*!< Bit mask of EVENTS_CLKSRCSTARTED field.*/
  #define LRCCONF_EVENTS_CLKSRCSTARTED_EVENTS_CLKSRCSTARTED_Min (0x0UL) /*!< Min enumerator value of EVENTS_CLKSRCSTARTED
                                                                            field.*/
  #define LRCCONF_EVENTS_CLKSRCSTARTED_EVENTS_CLKSRCSTARTED_Max (0x1UL) /*!< Max enumerator value of EVENTS_CLKSRCSTARTED
                                                                            field.*/
  #define LRCCONF_EVENTS_CLKSRCSTARTED_EVENTS_CLKSRCSTARTED_NotGenerated (0x0UL)
  #define LRCCONF_EVENTS_CLKSRCSTARTED_EVENTS_CLKSRCSTARTED_Generated (0x1UL)


/* LRCCONF_EVENTS_HFXOSTARTED: HFXO is started */
  #define LRCCONF_EVENTS_HFXOSTARTED_ResetValue (0x00000000UL)

/* EVENTS_HFXOSTARTED @Bit 0 : HFXO is started */
  #define LRCCONF_EVENTS_HFXOSTARTED_EVENTS_HFXOSTARTED_Pos (0UL)
  #define LRCCONF_EVENTS_HFXOSTARTED_EVENTS_HFXOSTARTED_Msk (0x1UL << LRCCONF_EVENTS_HFXOSTARTED_EVENTS_HFXOSTARTED_Pos) /*!<
                                                                            Bit mask of EVENTS_HFXOSTARTED field.*/
  #define LRCCONF_EVENTS_HFXOSTARTED_EVENTS_HFXOSTARTED_Min (0x0UL)
  #define LRCCONF_EVENTS_HFXOSTARTED_EVENTS_HFXOSTARTED_Max (0x1UL)
  #define LRCCONF_EVENTS_HFXOSTARTED_EVENTS_HFXOSTARTED_NotGenerated (0x0UL)
  #define LRCCONF_EVENTS_HFXOSTARTED_EVENTS_HFXOSTARTED_Generated (0x1UL)


/* LRCCONF_CONSTLATSTAT: Status of constant latency */
  #define LRCCONF_CONSTLATSTAT_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : Status */
  #define LRCCONF_CONSTLATSTAT_STATUS_Pos (0UL)
  #define LRCCONF_CONSTLATSTAT_STATUS_Msk (0x1UL << LRCCONF_CONSTLATSTAT_STATUS_Pos)
  #define LRCCONF_CONSTLATSTAT_STATUS_Min (0x0UL)
  #define LRCCONF_CONSTLATSTAT_STATUS_Max (0x1UL)
  #define LRCCONF_CONSTLATSTAT_STATUS_Disable (0x0UL)
  #define LRCCONF_CONSTLATSTAT_STATUS_Enable (0x1UL)


/* LRCCONF_POWERON: Force power domain ON */
  #define LRCCONF_POWERON_ResetValue (0x00000000UL)

/* MAIN @Bit 0 : Force the main power domain ON */
  #define LRCCONF_POWERON_MAIN_Pos (0UL)
  #define LRCCONF_POWERON_MAIN_Msk (0x1UL << LRCCONF_POWERON_MAIN_Pos)
  #define LRCCONF_POWERON_MAIN_Min (0x0UL)
  #define LRCCONF_POWERON_MAIN_Max (0x1UL)
  #define LRCCONF_POWERON_MAIN_Automatic (0x0UL)
  #define LRCCONF_POWERON_MAIN_AlwaysOn (0x1UL)

/* ACTIVE0 @Bit 4 : Force the active power domain[0] ON */
  #define LRCCONF_POWERON_ACTIVE0_Pos (4UL)
  #define LRCCONF_POWERON_ACTIVE0_Msk (0x1UL << LRCCONF_POWERON_ACTIVE0_Pos)
  #define LRCCONF_POWERON_ACTIVE0_Min (0x0UL)
  #define LRCCONF_POWERON_ACTIVE0_Max (0x1UL)
  #define LRCCONF_POWERON_ACTIVE0_Automatic (0x0UL)
  #define LRCCONF_POWERON_ACTIVE0_AlwaysOn (0x1UL)

/* ACTIVE1 @Bit 5 : Force the active power domain[1] ON */
  #define LRCCONF_POWERON_ACTIVE1_Pos (5UL)
  #define LRCCONF_POWERON_ACTIVE1_Msk (0x1UL << LRCCONF_POWERON_ACTIVE1_Pos)
  #define LRCCONF_POWERON_ACTIVE1_Min (0x0UL)
  #define LRCCONF_POWERON_ACTIVE1_Max (0x1UL)
  #define LRCCONF_POWERON_ACTIVE1_Automatic (0x0UL)
  #define LRCCONF_POWERON_ACTIVE1_AlwaysOn (0x1UL)

/* ACTIVE2 @Bit 6 : Force the active power domain[2] ON */
  #define LRCCONF_POWERON_ACTIVE2_Pos (6UL)
  #define LRCCONF_POWERON_ACTIVE2_Msk (0x1UL << LRCCONF_POWERON_ACTIVE2_Pos)
  #define LRCCONF_POWERON_ACTIVE2_Min (0x0UL)
  #define LRCCONF_POWERON_ACTIVE2_Max (0x1UL)
  #define LRCCONF_POWERON_ACTIVE2_Automatic (0x0UL)
  #define LRCCONF_POWERON_ACTIVE2_AlwaysOn (0x1UL)

/* ACTIVE3 @Bit 7 : Force the active power domain[3] ON */
  #define LRCCONF_POWERON_ACTIVE3_Pos (7UL)
  #define LRCCONF_POWERON_ACTIVE3_Msk (0x1UL << LRCCONF_POWERON_ACTIVE3_Pos)
  #define LRCCONF_POWERON_ACTIVE3_Min (0x0UL)
  #define LRCCONF_POWERON_ACTIVE3_Max (0x1UL)
  #define LRCCONF_POWERON_ACTIVE3_Automatic (0x0UL)
  #define LRCCONF_POWERON_ACTIVE3_AlwaysOn (0x1UL)

/* ACTIVE4 @Bit 8 : Force the active power domain[4] ON */
  #define LRCCONF_POWERON_ACTIVE4_Pos (8UL)
  #define LRCCONF_POWERON_ACTIVE4_Msk (0x1UL << LRCCONF_POWERON_ACTIVE4_Pos)
  #define LRCCONF_POWERON_ACTIVE4_Min (0x0UL)
  #define LRCCONF_POWERON_ACTIVE4_Max (0x1UL)
  #define LRCCONF_POWERON_ACTIVE4_Automatic (0x0UL)
  #define LRCCONF_POWERON_ACTIVE4_AlwaysOn (0x1UL)

/* ACTIVE5 @Bit 9 : Force the active power domain[5] ON */
  #define LRCCONF_POWERON_ACTIVE5_Pos (9UL)
  #define LRCCONF_POWERON_ACTIVE5_Msk (0x1UL << LRCCONF_POWERON_ACTIVE5_Pos)
  #define LRCCONF_POWERON_ACTIVE5_Min (0x0UL)
  #define LRCCONF_POWERON_ACTIVE5_Max (0x1UL)
  #define LRCCONF_POWERON_ACTIVE5_Automatic (0x0UL)
  #define LRCCONF_POWERON_ACTIVE5_AlwaysOn (0x1UL)

/* ACTIVE6 @Bit 10 : Force the active power domain[6] ON */
  #define LRCCONF_POWERON_ACTIVE6_Pos (10UL)
  #define LRCCONF_POWERON_ACTIVE6_Msk (0x1UL << LRCCONF_POWERON_ACTIVE6_Pos)
  #define LRCCONF_POWERON_ACTIVE6_Min (0x0UL)
  #define LRCCONF_POWERON_ACTIVE6_Max (0x1UL)
  #define LRCCONF_POWERON_ACTIVE6_Automatic (0x0UL)
  #define LRCCONF_POWERON_ACTIVE6_AlwaysOn (0x1UL)

/* ACTIVE7 @Bit 11 : Force the active power domain[7] ON */
  #define LRCCONF_POWERON_ACTIVE7_Pos (11UL)
  #define LRCCONF_POWERON_ACTIVE7_Msk (0x1UL << LRCCONF_POWERON_ACTIVE7_Pos)
  #define LRCCONF_POWERON_ACTIVE7_Min (0x0UL)
  #define LRCCONF_POWERON_ACTIVE7_Max (0x1UL)
  #define LRCCONF_POWERON_ACTIVE7_Automatic (0x0UL)
  #define LRCCONF_POWERON_ACTIVE7_AlwaysOn (0x1UL)


/* LRCCONF_RETAIN: Retain power domain */
  #define LRCCONF_RETAIN_ResetValue (0x00000FF1UL)

/* MAIN @Bit 0 : Retain the main power domain */
  #define LRCCONF_RETAIN_MAIN_Pos (0UL)
  #define LRCCONF_RETAIN_MAIN_Msk (0x1UL << LRCCONF_RETAIN_MAIN_Pos)
  #define LRCCONF_RETAIN_MAIN_Min (0x0UL)
  #define LRCCONF_RETAIN_MAIN_Max (0x1UL)
  #define LRCCONF_RETAIN_MAIN_Disable (0x0UL)
  #define LRCCONF_RETAIN_MAIN_Enable (0x1UL)

/* ACTIVE0 @Bit 4 : Retain the active power domain[0] */
  #define LRCCONF_RETAIN_ACTIVE0_Pos (4UL)
  #define LRCCONF_RETAIN_ACTIVE0_Msk (0x1UL << LRCCONF_RETAIN_ACTIVE0_Pos)
  #define LRCCONF_RETAIN_ACTIVE0_Min (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE0_Max (0x1UL)
  #define LRCCONF_RETAIN_ACTIVE0_Disable (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE0_Enable (0x1UL)

/* ACTIVE1 @Bit 5 : Retain the active power domain[1] */
  #define LRCCONF_RETAIN_ACTIVE1_Pos (5UL)
  #define LRCCONF_RETAIN_ACTIVE1_Msk (0x1UL << LRCCONF_RETAIN_ACTIVE1_Pos)
  #define LRCCONF_RETAIN_ACTIVE1_Min (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE1_Max (0x1UL)
  #define LRCCONF_RETAIN_ACTIVE1_Disable (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE1_Enable (0x1UL)

/* ACTIVE2 @Bit 6 : Retain the active power domain[2] */
  #define LRCCONF_RETAIN_ACTIVE2_Pos (6UL)
  #define LRCCONF_RETAIN_ACTIVE2_Msk (0x1UL << LRCCONF_RETAIN_ACTIVE2_Pos)
  #define LRCCONF_RETAIN_ACTIVE2_Min (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE2_Max (0x1UL)
  #define LRCCONF_RETAIN_ACTIVE2_Disable (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE2_Enable (0x1UL)

/* ACTIVE3 @Bit 7 : Retain the active power domain[3] */
  #define LRCCONF_RETAIN_ACTIVE3_Pos (7UL)
  #define LRCCONF_RETAIN_ACTIVE3_Msk (0x1UL << LRCCONF_RETAIN_ACTIVE3_Pos)
  #define LRCCONF_RETAIN_ACTIVE3_Min (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE3_Max (0x1UL)
  #define LRCCONF_RETAIN_ACTIVE3_Disable (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE3_Enable (0x1UL)

/* ACTIVE4 @Bit 8 : Retain the active power domain[4] */
  #define LRCCONF_RETAIN_ACTIVE4_Pos (8UL)
  #define LRCCONF_RETAIN_ACTIVE4_Msk (0x1UL << LRCCONF_RETAIN_ACTIVE4_Pos)
  #define LRCCONF_RETAIN_ACTIVE4_Min (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE4_Max (0x1UL)
  #define LRCCONF_RETAIN_ACTIVE4_Disable (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE4_Enable (0x1UL)

/* ACTIVE5 @Bit 9 : Retain the active power domain[5] */
  #define LRCCONF_RETAIN_ACTIVE5_Pos (9UL)
  #define LRCCONF_RETAIN_ACTIVE5_Msk (0x1UL << LRCCONF_RETAIN_ACTIVE5_Pos)
  #define LRCCONF_RETAIN_ACTIVE5_Min (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE5_Max (0x1UL)
  #define LRCCONF_RETAIN_ACTIVE5_Disable (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE5_Enable (0x1UL)

/* ACTIVE6 @Bit 10 : Retain the active power domain[6] */
  #define LRCCONF_RETAIN_ACTIVE6_Pos (10UL)
  #define LRCCONF_RETAIN_ACTIVE6_Msk (0x1UL << LRCCONF_RETAIN_ACTIVE6_Pos)
  #define LRCCONF_RETAIN_ACTIVE6_Min (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE6_Max (0x1UL)
  #define LRCCONF_RETAIN_ACTIVE6_Disable (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE6_Enable (0x1UL)

/* ACTIVE7 @Bit 11 : Retain the active power domain[7] */
  #define LRCCONF_RETAIN_ACTIVE7_Pos (11UL)
  #define LRCCONF_RETAIN_ACTIVE7_Msk (0x1UL << LRCCONF_RETAIN_ACTIVE7_Pos)
  #define LRCCONF_RETAIN_ACTIVE7_Min (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE7_Max (0x1UL)
  #define LRCCONF_RETAIN_ACTIVE7_Disable (0x0UL)
  #define LRCCONF_RETAIN_ACTIVE7_Enable (0x1UL)


/* LRCCONF_AX2XWAITSTATES: AX2X bridge waitstates for the domain [n], where n is the Domain ID. */
  #define LRCCONF_AX2XWAITSTATES_MaxCount (16UL)
  #define LRCCONF_AX2XWAITSTATES_MaxIndex (15UL)
  #define LRCCONF_AX2XWAITSTATES_MinIndex (0UL)
  #define LRCCONF_AX2XWAITSTATES_ResetValue (0x00000000UL)

/* WAITSTATES @Bits 0..2 : Number of waitstates */
  #define LRCCONF_AX2XWAITSTATES_WAITSTATES_Pos (0UL)
  #define LRCCONF_AX2XWAITSTATES_WAITSTATES_Msk (0x7UL << LRCCONF_AX2XWAITSTATES_WAITSTATES_Pos) /*!< Bit mask of WAITSTATES
                                                                            field.*/


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          MEMCONF                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct MEMCONF_POWER =================================================== */
/**
  * @brief POWER [MEMCONF_POWER] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CONTROL;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  RET;
  __IOM uint32_t  RET2;
} NRF_MEMCONF_POWER_Type;
  #define MEMCONF_POWER_MaxCount (2UL)
  #define MEMCONF_POWER_MaxIndex (1UL)
  #define MEMCONF_POWER_MinIndex (0UL)

/* MEMCONF_POWER_CONTROL: Control memory block power. */
  #define MEMCONF_POWER_CONTROL_ResetValue (0xFFFFFFFFUL)

/* MEM0 @Bit 0 : Keep the memory block MEM[0] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM0_Pos (0UL)
  #define MEMCONF_POWER_CONTROL_MEM0_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM0_Pos)
  #define MEMCONF_POWER_CONTROL_MEM0_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM0_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM0_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM0_On (0x1UL)

/* MEM1 @Bit 1 : Keep the memory block MEM[1] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM1_Pos (1UL)
  #define MEMCONF_POWER_CONTROL_MEM1_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM1_Pos)
  #define MEMCONF_POWER_CONTROL_MEM1_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM1_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM1_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM1_On (0x1UL)

/* MEM2 @Bit 2 : Keep the memory block MEM[2] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM2_Pos (2UL)
  #define MEMCONF_POWER_CONTROL_MEM2_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM2_Pos)
  #define MEMCONF_POWER_CONTROL_MEM2_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM2_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM2_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM2_On (0x1UL)

/* MEM3 @Bit 3 : Keep the memory block MEM[3] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM3_Pos (3UL)
  #define MEMCONF_POWER_CONTROL_MEM3_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM3_Pos)
  #define MEMCONF_POWER_CONTROL_MEM3_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM3_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM3_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM3_On (0x1UL)

/* MEM4 @Bit 4 : Keep the memory block MEM[4] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM4_Pos (4UL)
  #define MEMCONF_POWER_CONTROL_MEM4_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM4_Pos)
  #define MEMCONF_POWER_CONTROL_MEM4_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM4_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM4_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM4_On (0x1UL)

/* MEM5 @Bit 5 : Keep the memory block MEM[5] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM5_Pos (5UL)
  #define MEMCONF_POWER_CONTROL_MEM5_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM5_Pos)
  #define MEMCONF_POWER_CONTROL_MEM5_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM5_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM5_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM5_On (0x1UL)

/* MEM6 @Bit 6 : Keep the memory block MEM[6] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM6_Pos (6UL)
  #define MEMCONF_POWER_CONTROL_MEM6_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM6_Pos)
  #define MEMCONF_POWER_CONTROL_MEM6_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM6_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM6_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM6_On (0x1UL)

/* MEM7 @Bit 7 : Keep the memory block MEM[7] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM7_Pos (7UL)
  #define MEMCONF_POWER_CONTROL_MEM7_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM7_Pos)
  #define MEMCONF_POWER_CONTROL_MEM7_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM7_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM7_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM7_On (0x1UL)

/* MEM8 @Bit 8 : Keep the memory block MEM[8] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM8_Pos (8UL)
  #define MEMCONF_POWER_CONTROL_MEM8_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM8_Pos)
  #define MEMCONF_POWER_CONTROL_MEM8_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM8_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM8_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM8_On (0x1UL)

/* MEM9 @Bit 9 : Keep the memory block MEM[9] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM9_Pos (9UL)
  #define MEMCONF_POWER_CONTROL_MEM9_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM9_Pos)
  #define MEMCONF_POWER_CONTROL_MEM9_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM9_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM9_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM9_On (0x1UL)

/* MEM10 @Bit 10 : Keep the memory block MEM[10] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM10_Pos (10UL)
  #define MEMCONF_POWER_CONTROL_MEM10_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM10_Pos)
  #define MEMCONF_POWER_CONTROL_MEM10_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM10_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM10_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM10_On (0x1UL)

/* MEM11 @Bit 11 : Keep the memory block MEM[11] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM11_Pos (11UL)
  #define MEMCONF_POWER_CONTROL_MEM11_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM11_Pos)
  #define MEMCONF_POWER_CONTROL_MEM11_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM11_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM11_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM11_On (0x1UL)

/* MEM12 @Bit 12 : Keep the memory block MEM[12] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM12_Pos (12UL)
  #define MEMCONF_POWER_CONTROL_MEM12_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM12_Pos)
  #define MEMCONF_POWER_CONTROL_MEM12_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM12_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM12_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM12_On (0x1UL)

/* MEM13 @Bit 13 : Keep the memory block MEM[13] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM13_Pos (13UL)
  #define MEMCONF_POWER_CONTROL_MEM13_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM13_Pos)
  #define MEMCONF_POWER_CONTROL_MEM13_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM13_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM13_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM13_On (0x1UL)

/* MEM14 @Bit 14 : Keep the memory block MEM[14] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM14_Pos (14UL)
  #define MEMCONF_POWER_CONTROL_MEM14_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM14_Pos)
  #define MEMCONF_POWER_CONTROL_MEM14_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM14_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM14_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM14_On (0x1UL)

/* MEM15 @Bit 15 : Keep the memory block MEM[15] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM15_Pos (15UL)
  #define MEMCONF_POWER_CONTROL_MEM15_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM15_Pos)
  #define MEMCONF_POWER_CONTROL_MEM15_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM15_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM15_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM15_On (0x1UL)

/* MEM16 @Bit 16 : Keep the memory block MEM[16] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM16_Pos (16UL)
  #define MEMCONF_POWER_CONTROL_MEM16_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM16_Pos)
  #define MEMCONF_POWER_CONTROL_MEM16_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM16_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM16_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM16_On (0x1UL)

/* MEM17 @Bit 17 : Keep the memory block MEM[17] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM17_Pos (17UL)
  #define MEMCONF_POWER_CONTROL_MEM17_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM17_Pos)
  #define MEMCONF_POWER_CONTROL_MEM17_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM17_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM17_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM17_On (0x1UL)

/* MEM18 @Bit 18 : Keep the memory block MEM[18] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM18_Pos (18UL)
  #define MEMCONF_POWER_CONTROL_MEM18_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM18_Pos)
  #define MEMCONF_POWER_CONTROL_MEM18_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM18_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM18_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM18_On (0x1UL)

/* MEM19 @Bit 19 : Keep the memory block MEM[19] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM19_Pos (19UL)
  #define MEMCONF_POWER_CONTROL_MEM19_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM19_Pos)
  #define MEMCONF_POWER_CONTROL_MEM19_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM19_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM19_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM19_On (0x1UL)

/* MEM20 @Bit 20 : Keep the memory block MEM[20] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM20_Pos (20UL)
  #define MEMCONF_POWER_CONTROL_MEM20_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM20_Pos)
  #define MEMCONF_POWER_CONTROL_MEM20_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM20_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM20_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM20_On (0x1UL)

/* MEM21 @Bit 21 : Keep the memory block MEM[21] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM21_Pos (21UL)
  #define MEMCONF_POWER_CONTROL_MEM21_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM21_Pos)
  #define MEMCONF_POWER_CONTROL_MEM21_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM21_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM21_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM21_On (0x1UL)

/* MEM22 @Bit 22 : Keep the memory block MEM[22] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM22_Pos (22UL)
  #define MEMCONF_POWER_CONTROL_MEM22_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM22_Pos)
  #define MEMCONF_POWER_CONTROL_MEM22_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM22_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM22_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM22_On (0x1UL)

/* MEM23 @Bit 23 : Keep the memory block MEM[23] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM23_Pos (23UL)
  #define MEMCONF_POWER_CONTROL_MEM23_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM23_Pos)
  #define MEMCONF_POWER_CONTROL_MEM23_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM23_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM23_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM23_On (0x1UL)

/* MEM24 @Bit 24 : Keep the memory block MEM[24] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM24_Pos (24UL)
  #define MEMCONF_POWER_CONTROL_MEM24_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM24_Pos)
  #define MEMCONF_POWER_CONTROL_MEM24_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM24_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM24_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM24_On (0x1UL)

/* MEM25 @Bit 25 : Keep the memory block MEM[25] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM25_Pos (25UL)
  #define MEMCONF_POWER_CONTROL_MEM25_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM25_Pos)
  #define MEMCONF_POWER_CONTROL_MEM25_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM25_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM25_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM25_On (0x1UL)

/* MEM26 @Bit 26 : Keep the memory block MEM[26] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM26_Pos (26UL)
  #define MEMCONF_POWER_CONTROL_MEM26_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM26_Pos)
  #define MEMCONF_POWER_CONTROL_MEM26_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM26_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM26_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM26_On (0x1UL)

/* MEM27 @Bit 27 : Keep the memory block MEM[27] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM27_Pos (27UL)
  #define MEMCONF_POWER_CONTROL_MEM27_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM27_Pos)
  #define MEMCONF_POWER_CONTROL_MEM27_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM27_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM27_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM27_On (0x1UL)

/* MEM28 @Bit 28 : Keep the memory block MEM[28] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM28_Pos (28UL)
  #define MEMCONF_POWER_CONTROL_MEM28_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM28_Pos)
  #define MEMCONF_POWER_CONTROL_MEM28_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM28_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM28_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM28_On (0x1UL)

/* MEM29 @Bit 29 : Keep the memory block MEM[29] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM29_Pos (29UL)
  #define MEMCONF_POWER_CONTROL_MEM29_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM29_Pos)
  #define MEMCONF_POWER_CONTROL_MEM29_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM29_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM29_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM29_On (0x1UL)

/* MEM30 @Bit 30 : Keep the memory block MEM[30] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM30_Pos (30UL)
  #define MEMCONF_POWER_CONTROL_MEM30_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM30_Pos)
  #define MEMCONF_POWER_CONTROL_MEM30_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM30_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM30_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM30_On (0x1UL)

/* MEM31 @Bit 31 : Keep the memory block MEM[31] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM31_Pos (31UL)
  #define MEMCONF_POWER_CONTROL_MEM31_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM31_Pos)
  #define MEMCONF_POWER_CONTROL_MEM31_Min (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM31_Max (0x1UL)
  #define MEMCONF_POWER_CONTROL_MEM31_Off (0x0UL)
  #define MEMCONF_POWER_CONTROL_MEM31_On (0x1UL)


/* MEMCONF_POWER_RET: RAM retention for RAM [n]. */
  #define MEMCONF_POWER_RET_ResetValue (0xFFFFFFFFUL)

/* MEM0 @Bit 0 : Keep the RAM block MEM[0] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM0_Pos (0UL)
  #define MEMCONF_POWER_RET_MEM0_Msk (0x1UL << MEMCONF_POWER_RET_MEM0_Pos)
  #define MEMCONF_POWER_RET_MEM0_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM0_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM0_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM0_On (0x1UL)

/* MEM1 @Bit 1 : Keep the RAM block MEM[1] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM1_Pos (1UL)
  #define MEMCONF_POWER_RET_MEM1_Msk (0x1UL << MEMCONF_POWER_RET_MEM1_Pos)
  #define MEMCONF_POWER_RET_MEM1_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM1_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM1_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM1_On (0x1UL)

/* MEM2 @Bit 2 : Keep the RAM block MEM[2] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM2_Pos (2UL)
  #define MEMCONF_POWER_RET_MEM2_Msk (0x1UL << MEMCONF_POWER_RET_MEM2_Pos)
  #define MEMCONF_POWER_RET_MEM2_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM2_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM2_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM2_On (0x1UL)

/* MEM3 @Bit 3 : Keep the RAM block MEM[3] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM3_Pos (3UL)
  #define MEMCONF_POWER_RET_MEM3_Msk (0x1UL << MEMCONF_POWER_RET_MEM3_Pos)
  #define MEMCONF_POWER_RET_MEM3_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM3_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM3_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM3_On (0x1UL)

/* MEM4 @Bit 4 : Keep the RAM block MEM[4] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM4_Pos (4UL)
  #define MEMCONF_POWER_RET_MEM4_Msk (0x1UL << MEMCONF_POWER_RET_MEM4_Pos)
  #define MEMCONF_POWER_RET_MEM4_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM4_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM4_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM4_On (0x1UL)

/* MEM5 @Bit 5 : Keep the RAM block MEM[5] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM5_Pos (5UL)
  #define MEMCONF_POWER_RET_MEM5_Msk (0x1UL << MEMCONF_POWER_RET_MEM5_Pos)
  #define MEMCONF_POWER_RET_MEM5_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM5_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM5_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM5_On (0x1UL)

/* MEM6 @Bit 6 : Keep the RAM block MEM[6] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM6_Pos (6UL)
  #define MEMCONF_POWER_RET_MEM6_Msk (0x1UL << MEMCONF_POWER_RET_MEM6_Pos)
  #define MEMCONF_POWER_RET_MEM6_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM6_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM6_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM6_On (0x1UL)

/* MEM7 @Bit 7 : Keep the RAM block MEM[7] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM7_Pos (7UL)
  #define MEMCONF_POWER_RET_MEM7_Msk (0x1UL << MEMCONF_POWER_RET_MEM7_Pos)
  #define MEMCONF_POWER_RET_MEM7_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM7_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM7_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM7_On (0x1UL)

/* MEM8 @Bit 8 : Keep the RAM block MEM[8] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM8_Pos (8UL)
  #define MEMCONF_POWER_RET_MEM8_Msk (0x1UL << MEMCONF_POWER_RET_MEM8_Pos)
  #define MEMCONF_POWER_RET_MEM8_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM8_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM8_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM8_On (0x1UL)

/* MEM9 @Bit 9 : Keep the RAM block MEM[9] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM9_Pos (9UL)
  #define MEMCONF_POWER_RET_MEM9_Msk (0x1UL << MEMCONF_POWER_RET_MEM9_Pos)
  #define MEMCONF_POWER_RET_MEM9_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM9_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM9_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM9_On (0x1UL)

/* MEM10 @Bit 10 : Keep the RAM block MEM[10] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM10_Pos (10UL)
  #define MEMCONF_POWER_RET_MEM10_Msk (0x1UL << MEMCONF_POWER_RET_MEM10_Pos)
  #define MEMCONF_POWER_RET_MEM10_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM10_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM10_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM10_On (0x1UL)

/* MEM11 @Bit 11 : Keep the RAM block MEM[11] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM11_Pos (11UL)
  #define MEMCONF_POWER_RET_MEM11_Msk (0x1UL << MEMCONF_POWER_RET_MEM11_Pos)
  #define MEMCONF_POWER_RET_MEM11_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM11_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM11_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM11_On (0x1UL)

/* MEM12 @Bit 12 : Keep the RAM block MEM[12] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM12_Pos (12UL)
  #define MEMCONF_POWER_RET_MEM12_Msk (0x1UL << MEMCONF_POWER_RET_MEM12_Pos)
  #define MEMCONF_POWER_RET_MEM12_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM12_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM12_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM12_On (0x1UL)

/* MEM13 @Bit 13 : Keep the RAM block MEM[13] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM13_Pos (13UL)
  #define MEMCONF_POWER_RET_MEM13_Msk (0x1UL << MEMCONF_POWER_RET_MEM13_Pos)
  #define MEMCONF_POWER_RET_MEM13_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM13_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM13_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM13_On (0x1UL)

/* MEM14 @Bit 14 : Keep the RAM block MEM[14] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM14_Pos (14UL)
  #define MEMCONF_POWER_RET_MEM14_Msk (0x1UL << MEMCONF_POWER_RET_MEM14_Pos)
  #define MEMCONF_POWER_RET_MEM14_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM14_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM14_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM14_On (0x1UL)

/* MEM15 @Bit 15 : Keep the RAM block MEM[15] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM15_Pos (15UL)
  #define MEMCONF_POWER_RET_MEM15_Msk (0x1UL << MEMCONF_POWER_RET_MEM15_Pos)
  #define MEMCONF_POWER_RET_MEM15_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM15_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM15_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM15_On (0x1UL)

/* MEM16 @Bit 16 : Keep the RAM block MEM[16] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM16_Pos (16UL)
  #define MEMCONF_POWER_RET_MEM16_Msk (0x1UL << MEMCONF_POWER_RET_MEM16_Pos)
  #define MEMCONF_POWER_RET_MEM16_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM16_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM16_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM16_On (0x1UL)

/* MEM17 @Bit 17 : Keep the RAM block MEM[17] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM17_Pos (17UL)
  #define MEMCONF_POWER_RET_MEM17_Msk (0x1UL << MEMCONF_POWER_RET_MEM17_Pos)
  #define MEMCONF_POWER_RET_MEM17_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM17_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM17_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM17_On (0x1UL)

/* MEM18 @Bit 18 : Keep the RAM block MEM[18] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM18_Pos (18UL)
  #define MEMCONF_POWER_RET_MEM18_Msk (0x1UL << MEMCONF_POWER_RET_MEM18_Pos)
  #define MEMCONF_POWER_RET_MEM18_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM18_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM18_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM18_On (0x1UL)

/* MEM19 @Bit 19 : Keep the RAM block MEM[19] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM19_Pos (19UL)
  #define MEMCONF_POWER_RET_MEM19_Msk (0x1UL << MEMCONF_POWER_RET_MEM19_Pos)
  #define MEMCONF_POWER_RET_MEM19_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM19_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM19_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM19_On (0x1UL)

/* MEM20 @Bit 20 : Keep the RAM block MEM[20] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM20_Pos (20UL)
  #define MEMCONF_POWER_RET_MEM20_Msk (0x1UL << MEMCONF_POWER_RET_MEM20_Pos)
  #define MEMCONF_POWER_RET_MEM20_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM20_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM20_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM20_On (0x1UL)

/* MEM21 @Bit 21 : Keep the RAM block MEM[21] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM21_Pos (21UL)
  #define MEMCONF_POWER_RET_MEM21_Msk (0x1UL << MEMCONF_POWER_RET_MEM21_Pos)
  #define MEMCONF_POWER_RET_MEM21_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM21_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM21_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM21_On (0x1UL)

/* MEM22 @Bit 22 : Keep the RAM block MEM[22] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM22_Pos (22UL)
  #define MEMCONF_POWER_RET_MEM22_Msk (0x1UL << MEMCONF_POWER_RET_MEM22_Pos)
  #define MEMCONF_POWER_RET_MEM22_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM22_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM22_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM22_On (0x1UL)

/* MEM23 @Bit 23 : Keep the RAM block MEM[23] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM23_Pos (23UL)
  #define MEMCONF_POWER_RET_MEM23_Msk (0x1UL << MEMCONF_POWER_RET_MEM23_Pos)
  #define MEMCONF_POWER_RET_MEM23_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM23_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM23_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM23_On (0x1UL)

/* MEM24 @Bit 24 : Keep the RAM block MEM[24] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM24_Pos (24UL)
  #define MEMCONF_POWER_RET_MEM24_Msk (0x1UL << MEMCONF_POWER_RET_MEM24_Pos)
  #define MEMCONF_POWER_RET_MEM24_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM24_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM24_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM24_On (0x1UL)

/* MEM25 @Bit 25 : Keep the RAM block MEM[25] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM25_Pos (25UL)
  #define MEMCONF_POWER_RET_MEM25_Msk (0x1UL << MEMCONF_POWER_RET_MEM25_Pos)
  #define MEMCONF_POWER_RET_MEM25_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM25_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM25_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM25_On (0x1UL)

/* MEM26 @Bit 26 : Keep the RAM block MEM[26] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM26_Pos (26UL)
  #define MEMCONF_POWER_RET_MEM26_Msk (0x1UL << MEMCONF_POWER_RET_MEM26_Pos)
  #define MEMCONF_POWER_RET_MEM26_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM26_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM26_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM26_On (0x1UL)

/* MEM27 @Bit 27 : Keep the RAM block MEM[27] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM27_Pos (27UL)
  #define MEMCONF_POWER_RET_MEM27_Msk (0x1UL << MEMCONF_POWER_RET_MEM27_Pos)
  #define MEMCONF_POWER_RET_MEM27_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM27_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM27_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM27_On (0x1UL)

/* MEM28 @Bit 28 : Keep the RAM block MEM[28] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM28_Pos (28UL)
  #define MEMCONF_POWER_RET_MEM28_Msk (0x1UL << MEMCONF_POWER_RET_MEM28_Pos)
  #define MEMCONF_POWER_RET_MEM28_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM28_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM28_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM28_On (0x1UL)

/* MEM29 @Bit 29 : Keep the RAM block MEM[29] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM29_Pos (29UL)
  #define MEMCONF_POWER_RET_MEM29_Msk (0x1UL << MEMCONF_POWER_RET_MEM29_Pos)
  #define MEMCONF_POWER_RET_MEM29_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM29_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM29_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM29_On (0x1UL)

/* MEM30 @Bit 30 : Keep the RAM block MEM[30] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM30_Pos (30UL)
  #define MEMCONF_POWER_RET_MEM30_Msk (0x1UL << MEMCONF_POWER_RET_MEM30_Pos)
  #define MEMCONF_POWER_RET_MEM30_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM30_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM30_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM30_On (0x1UL)

/* MEM31 @Bit 31 : Keep the RAM block MEM[31] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM31_Pos (31UL)
  #define MEMCONF_POWER_RET_MEM31_Msk (0x1UL << MEMCONF_POWER_RET_MEM31_Pos)
  #define MEMCONF_POWER_RET_MEM31_Min (0x0UL)
  #define MEMCONF_POWER_RET_MEM31_Max (0x1UL)
  #define MEMCONF_POWER_RET_MEM31_Off (0x0UL)
  #define MEMCONF_POWER_RET_MEM31_On (0x1UL)


/* MEMCONF_POWER_RET2: RAM retention for the second bank in the RAM block */
  #define MEMCONF_POWER_RET2_ResetValue (0x00000000UL)

/* MEM0 @Bit 0 : Keep the second bank in RAM block MEM[0] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM0_Pos (0UL)
  #define MEMCONF_POWER_RET2_MEM0_Msk (0x1UL << MEMCONF_POWER_RET2_MEM0_Pos)
  #define MEMCONF_POWER_RET2_MEM0_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM0_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM0_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM0_On (0x1UL)

/* MEM1 @Bit 1 : Keep the second bank in RAM block MEM[1] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM1_Pos (1UL)
  #define MEMCONF_POWER_RET2_MEM1_Msk (0x1UL << MEMCONF_POWER_RET2_MEM1_Pos)
  #define MEMCONF_POWER_RET2_MEM1_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM1_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM1_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM1_On (0x1UL)

/* MEM2 @Bit 2 : Keep the second bank in RAM block MEM[2] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM2_Pos (2UL)
  #define MEMCONF_POWER_RET2_MEM2_Msk (0x1UL << MEMCONF_POWER_RET2_MEM2_Pos)
  #define MEMCONF_POWER_RET2_MEM2_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM2_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM2_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM2_On (0x1UL)

/* MEM3 @Bit 3 : Keep the second bank in RAM block MEM[3] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM3_Pos (3UL)
  #define MEMCONF_POWER_RET2_MEM3_Msk (0x1UL << MEMCONF_POWER_RET2_MEM3_Pos)
  #define MEMCONF_POWER_RET2_MEM3_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM3_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM3_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM3_On (0x1UL)

/* MEM4 @Bit 4 : Keep the second bank in RAM block MEM[4] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM4_Pos (4UL)
  #define MEMCONF_POWER_RET2_MEM4_Msk (0x1UL << MEMCONF_POWER_RET2_MEM4_Pos)
  #define MEMCONF_POWER_RET2_MEM4_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM4_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM4_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM4_On (0x1UL)

/* MEM5 @Bit 5 : Keep the second bank in RAM block MEM[5] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM5_Pos (5UL)
  #define MEMCONF_POWER_RET2_MEM5_Msk (0x1UL << MEMCONF_POWER_RET2_MEM5_Pos)
  #define MEMCONF_POWER_RET2_MEM5_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM5_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM5_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM5_On (0x1UL)

/* MEM6 @Bit 6 : Keep the second bank in RAM block MEM[6] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM6_Pos (6UL)
  #define MEMCONF_POWER_RET2_MEM6_Msk (0x1UL << MEMCONF_POWER_RET2_MEM6_Pos)
  #define MEMCONF_POWER_RET2_MEM6_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM6_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM6_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM6_On (0x1UL)

/* MEM7 @Bit 7 : Keep the second bank in RAM block MEM[7] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM7_Pos (7UL)
  #define MEMCONF_POWER_RET2_MEM7_Msk (0x1UL << MEMCONF_POWER_RET2_MEM7_Pos)
  #define MEMCONF_POWER_RET2_MEM7_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM7_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM7_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM7_On (0x1UL)

/* MEM8 @Bit 8 : Keep the second bank in RAM block MEM[8] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM8_Pos (8UL)
  #define MEMCONF_POWER_RET2_MEM8_Msk (0x1UL << MEMCONF_POWER_RET2_MEM8_Pos)
  #define MEMCONF_POWER_RET2_MEM8_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM8_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM8_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM8_On (0x1UL)

/* MEM9 @Bit 9 : Keep the second bank in RAM block MEM[9] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM9_Pos (9UL)
  #define MEMCONF_POWER_RET2_MEM9_Msk (0x1UL << MEMCONF_POWER_RET2_MEM9_Pos)
  #define MEMCONF_POWER_RET2_MEM9_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM9_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM9_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM9_On (0x1UL)

/* MEM10 @Bit 10 : Keep the second bank in RAM block MEM[10] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM10_Pos (10UL)
  #define MEMCONF_POWER_RET2_MEM10_Msk (0x1UL << MEMCONF_POWER_RET2_MEM10_Pos)
  #define MEMCONF_POWER_RET2_MEM10_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM10_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM10_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM10_On (0x1UL)

/* MEM11 @Bit 11 : Keep the second bank in RAM block MEM[11] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM11_Pos (11UL)
  #define MEMCONF_POWER_RET2_MEM11_Msk (0x1UL << MEMCONF_POWER_RET2_MEM11_Pos)
  #define MEMCONF_POWER_RET2_MEM11_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM11_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM11_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM11_On (0x1UL)

/* MEM12 @Bit 12 : Keep the second bank in RAM block MEM[12] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM12_Pos (12UL)
  #define MEMCONF_POWER_RET2_MEM12_Msk (0x1UL << MEMCONF_POWER_RET2_MEM12_Pos)
  #define MEMCONF_POWER_RET2_MEM12_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM12_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM12_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM12_On (0x1UL)

/* MEM13 @Bit 13 : Keep the second bank in RAM block MEM[13] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM13_Pos (13UL)
  #define MEMCONF_POWER_RET2_MEM13_Msk (0x1UL << MEMCONF_POWER_RET2_MEM13_Pos)
  #define MEMCONF_POWER_RET2_MEM13_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM13_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM13_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM13_On (0x1UL)

/* MEM14 @Bit 14 : Keep the second bank in RAM block MEM[14] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM14_Pos (14UL)
  #define MEMCONF_POWER_RET2_MEM14_Msk (0x1UL << MEMCONF_POWER_RET2_MEM14_Pos)
  #define MEMCONF_POWER_RET2_MEM14_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM14_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM14_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM14_On (0x1UL)

/* MEM15 @Bit 15 : Keep the second bank in RAM block MEM[15] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM15_Pos (15UL)
  #define MEMCONF_POWER_RET2_MEM15_Msk (0x1UL << MEMCONF_POWER_RET2_MEM15_Pos)
  #define MEMCONF_POWER_RET2_MEM15_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM15_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM15_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM15_On (0x1UL)

/* MEM16 @Bit 16 : Keep the second bank in RAM block MEM[16] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM16_Pos (16UL)
  #define MEMCONF_POWER_RET2_MEM16_Msk (0x1UL << MEMCONF_POWER_RET2_MEM16_Pos)
  #define MEMCONF_POWER_RET2_MEM16_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM16_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM16_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM16_On (0x1UL)

/* MEM17 @Bit 17 : Keep the second bank in RAM block MEM[17] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM17_Pos (17UL)
  #define MEMCONF_POWER_RET2_MEM17_Msk (0x1UL << MEMCONF_POWER_RET2_MEM17_Pos)
  #define MEMCONF_POWER_RET2_MEM17_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM17_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM17_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM17_On (0x1UL)

/* MEM18 @Bit 18 : Keep the second bank in RAM block MEM[18] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM18_Pos (18UL)
  #define MEMCONF_POWER_RET2_MEM18_Msk (0x1UL << MEMCONF_POWER_RET2_MEM18_Pos)
  #define MEMCONF_POWER_RET2_MEM18_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM18_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM18_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM18_On (0x1UL)

/* MEM19 @Bit 19 : Keep the second bank in RAM block MEM[19] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM19_Pos (19UL)
  #define MEMCONF_POWER_RET2_MEM19_Msk (0x1UL << MEMCONF_POWER_RET2_MEM19_Pos)
  #define MEMCONF_POWER_RET2_MEM19_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM19_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM19_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM19_On (0x1UL)

/* MEM20 @Bit 20 : Keep the second bank in RAM block MEM[20] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM20_Pos (20UL)
  #define MEMCONF_POWER_RET2_MEM20_Msk (0x1UL << MEMCONF_POWER_RET2_MEM20_Pos)
  #define MEMCONF_POWER_RET2_MEM20_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM20_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM20_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM20_On (0x1UL)

/* MEM21 @Bit 21 : Keep the second bank in RAM block MEM[21] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM21_Pos (21UL)
  #define MEMCONF_POWER_RET2_MEM21_Msk (0x1UL << MEMCONF_POWER_RET2_MEM21_Pos)
  #define MEMCONF_POWER_RET2_MEM21_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM21_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM21_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM21_On (0x1UL)

/* MEM22 @Bit 22 : Keep the second bank in RAM block MEM[22] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM22_Pos (22UL)
  #define MEMCONF_POWER_RET2_MEM22_Msk (0x1UL << MEMCONF_POWER_RET2_MEM22_Pos)
  #define MEMCONF_POWER_RET2_MEM22_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM22_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM22_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM22_On (0x1UL)

/* MEM23 @Bit 23 : Keep the second bank in RAM block MEM[23] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM23_Pos (23UL)
  #define MEMCONF_POWER_RET2_MEM23_Msk (0x1UL << MEMCONF_POWER_RET2_MEM23_Pos)
  #define MEMCONF_POWER_RET2_MEM23_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM23_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM23_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM23_On (0x1UL)

/* MEM24 @Bit 24 : Keep the second bank in RAM block MEM[24] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM24_Pos (24UL)
  #define MEMCONF_POWER_RET2_MEM24_Msk (0x1UL << MEMCONF_POWER_RET2_MEM24_Pos)
  #define MEMCONF_POWER_RET2_MEM24_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM24_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM24_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM24_On (0x1UL)

/* MEM25 @Bit 25 : Keep the second bank in RAM block MEM[25] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM25_Pos (25UL)
  #define MEMCONF_POWER_RET2_MEM25_Msk (0x1UL << MEMCONF_POWER_RET2_MEM25_Pos)
  #define MEMCONF_POWER_RET2_MEM25_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM25_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM25_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM25_On (0x1UL)

/* MEM26 @Bit 26 : Keep the second bank in RAM block MEM[26] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM26_Pos (26UL)
  #define MEMCONF_POWER_RET2_MEM26_Msk (0x1UL << MEMCONF_POWER_RET2_MEM26_Pos)
  #define MEMCONF_POWER_RET2_MEM26_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM26_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM26_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM26_On (0x1UL)

/* MEM27 @Bit 27 : Keep the second bank in RAM block MEM[27] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM27_Pos (27UL)
  #define MEMCONF_POWER_RET2_MEM27_Msk (0x1UL << MEMCONF_POWER_RET2_MEM27_Pos)
  #define MEMCONF_POWER_RET2_MEM27_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM27_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM27_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM27_On (0x1UL)

/* MEM28 @Bit 28 : Keep the second bank in RAM block MEM[28] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM28_Pos (28UL)
  #define MEMCONF_POWER_RET2_MEM28_Msk (0x1UL << MEMCONF_POWER_RET2_MEM28_Pos)
  #define MEMCONF_POWER_RET2_MEM28_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM28_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM28_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM28_On (0x1UL)

/* MEM29 @Bit 29 : Keep the second bank in RAM block MEM[29] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM29_Pos (29UL)
  #define MEMCONF_POWER_RET2_MEM29_Msk (0x1UL << MEMCONF_POWER_RET2_MEM29_Pos)
  #define MEMCONF_POWER_RET2_MEM29_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM29_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM29_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM29_On (0x1UL)

/* MEM30 @Bit 30 : Keep the second bank in RAM block MEM[30] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM30_Pos (30UL)
  #define MEMCONF_POWER_RET2_MEM30_Msk (0x1UL << MEMCONF_POWER_RET2_MEM30_Pos)
  #define MEMCONF_POWER_RET2_MEM30_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM30_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM30_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM30_On (0x1UL)

/* MEM31 @Bit 31 : Keep the second bank in RAM block MEM[31] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET2_MEM31_Pos (31UL)
  #define MEMCONF_POWER_RET2_MEM31_Msk (0x1UL << MEMCONF_POWER_RET2_MEM31_Pos)
  #define MEMCONF_POWER_RET2_MEM31_Min (0x0UL)
  #define MEMCONF_POWER_RET2_MEM31_Max (0x1UL)
  #define MEMCONF_POWER_RET2_MEM31_Off (0x0UL)
  #define MEMCONF_POWER_RET2_MEM31_On (0x1UL)


/* ===================================================== Struct MEMCONF ====================================================== */
/**
  * @brief Memory configuration
  */
  typedef struct {
    __IM uint32_t RESERVED[320];
    __IOM NRF_MEMCONF_POWER_Type POWER[2];
  } NRF_MEMCONF_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            MPC                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct MPC_MEMACCERR =================================================== */
/**
  * @brief MEMACCERR [MPC_MEMACCERR] Memory Access Error status registers
  */
typedef struct {
  __IM  uint32_t  ADDRESS;                           /*!< (@ 0x00000000) Target Address of Memory Access Error. Register content
                                                                         won't be changed as long as MEMACCERR event is active.*/
  __IM  uint32_t  INFO;                              /*!< (@ 0x00000004) Access information for the transaction that triggered a
                                                                         memory access error. Register content won't be changed
                                                                         as long as MEMACCERR event is active.*/
} NRF_MPC_MEMACCERR_Type;

/* MPC_MEMACCERR_ADDRESS: Target Address of Memory Access Error. Register content won't be changed as long as MEMACCERR event is
                           active. */

  #define MPC_MEMACCERR_ADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Target address for erroneous access */
  #define MPC_MEMACCERR_ADDRESS_ADDRESS_Pos (0UL)
  #define MPC_MEMACCERR_ADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << MPC_MEMACCERR_ADDRESS_ADDRESS_Pos)


/* MPC_MEMACCERR_INFO: Access information for the transaction that triggered a memory access error. Register content won't be
                        changed as long as MEMACCERR event is active. */

  #define MPC_MEMACCERR_INFO_ResetValue (0x00000000UL)

/* READ @Bit 12 : Read bit of bus access */
  #define MPC_MEMACCERR_INFO_READ_Pos (12UL)
  #define MPC_MEMACCERR_INFO_READ_Msk (0x1UL << MPC_MEMACCERR_INFO_READ_Pos)
  #define MPC_MEMACCERR_INFO_READ_Min (0x0UL)
  #define MPC_MEMACCERR_INFO_READ_Max (0x1UL)
  #define MPC_MEMACCERR_INFO_READ_Set (0x1UL)
  #define MPC_MEMACCERR_INFO_READ_NotSet (0x0UL)

/* WRITE @Bit 13 : Write bit of bus access */
  #define MPC_MEMACCERR_INFO_WRITE_Pos (13UL)
  #define MPC_MEMACCERR_INFO_WRITE_Msk (0x1UL << MPC_MEMACCERR_INFO_WRITE_Pos)
  #define MPC_MEMACCERR_INFO_WRITE_Min (0x0UL)
  #define MPC_MEMACCERR_INFO_WRITE_Max (0x1UL)
  #define MPC_MEMACCERR_INFO_WRITE_Set (0x1UL)
  #define MPC_MEMACCERR_INFO_WRITE_NotSet (0x0UL)

/* EXECUTE @Bit 14 : Execute bit of bus access */
  #define MPC_MEMACCERR_INFO_EXECUTE_Pos (14UL)
  #define MPC_MEMACCERR_INFO_EXECUTE_Msk (0x1UL << MPC_MEMACCERR_INFO_EXECUTE_Pos)
  #define MPC_MEMACCERR_INFO_EXECUTE_Min (0x0UL)
  #define MPC_MEMACCERR_INFO_EXECUTE_Max (0x1UL)
  #define MPC_MEMACCERR_INFO_EXECUTE_Set (0x1UL)
  #define MPC_MEMACCERR_INFO_EXECUTE_NotSet (0x0UL)

/* SECURE @Bit 15 : Secure bit of bus access */
  #define MPC_MEMACCERR_INFO_SECURE_Pos (15UL)
  #define MPC_MEMACCERR_INFO_SECURE_Msk (0x1UL << MPC_MEMACCERR_INFO_SECURE_Pos)
  #define MPC_MEMACCERR_INFO_SECURE_Min (0x0UL)
  #define MPC_MEMACCERR_INFO_SECURE_Max (0x1UL)
  #define MPC_MEMACCERR_INFO_SECURE_Set (0x1UL)
  #define MPC_MEMACCERR_INFO_SECURE_NotSet (0x0UL)

/* ERRORSOURCE @Bit 16 : Source of memory access error */
  #define MPC_MEMACCERR_INFO_ERRORSOURCE_Pos (16UL)
  #define MPC_MEMACCERR_INFO_ERRORSOURCE_Msk (0x1UL << MPC_MEMACCERR_INFO_ERRORSOURCE_Pos)
  #define MPC_MEMACCERR_INFO_ERRORSOURCE_Min (0x0UL)
  #define MPC_MEMACCERR_INFO_ERRORSOURCE_Max (0x1UL)
  #define MPC_MEMACCERR_INFO_ERRORSOURCE_MPC (0x1UL)
  #define MPC_MEMACCERR_INFO_ERRORSOURCE_Slave (0x0UL)



/* =================================================== Struct MPC_OVERRIDE =================================================== */
/**
  * @brief OVERRIDE [MPC_OVERRIDE] Special privilege tables
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  STARTADDR;
  __IOM uint32_t  ENDADDR;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PERM;
  __IOM uint32_t  PERMMASK;                          /*!< (@ 0x00000014) Masks permission setting fields from register
                                                                         OVERRIDE.PERM*/
  __IM  uint32_t  RESERVED1[2];
} NRF_MPC_OVERRIDE_Type;
  #define MPC_OVERRIDE_MaxCount (14UL)
  #define MPC_OVERRIDE_MaxIndex (13UL)
  #define MPC_OVERRIDE_MinIndex (0UL)

/* MPC_OVERRIDE_CONFIG: Override region n Configuration register */
  #define MPC_OVERRIDE_CONFIG_ResetValue (0x00000000UL)

/* LOCK @Bit 8 : Lock Override region n */
  #define MPC_OVERRIDE_CONFIG_LOCK_Pos (8UL)
  #define MPC_OVERRIDE_CONFIG_LOCK_Msk (0x1UL << MPC_OVERRIDE_CONFIG_LOCK_Pos)
  #define MPC_OVERRIDE_CONFIG_LOCK_Min (0x0UL)
  #define MPC_OVERRIDE_CONFIG_LOCK_Max (0x1UL)
  #define MPC_OVERRIDE_CONFIG_LOCK_Unlocked (0x0UL)
  #define MPC_OVERRIDE_CONFIG_LOCK_Locked (0x1UL)

/* ENABLE @Bit 9 : Enable Override region n */
  #define MPC_OVERRIDE_CONFIG_ENABLE_Pos (9UL)
  #define MPC_OVERRIDE_CONFIG_ENABLE_Msk (0x1UL << MPC_OVERRIDE_CONFIG_ENABLE_Pos)
  #define MPC_OVERRIDE_CONFIG_ENABLE_Min (0x0UL)
  #define MPC_OVERRIDE_CONFIG_ENABLE_Max (0x1UL)
  #define MPC_OVERRIDE_CONFIG_ENABLE_Disabled (0x0UL)
  #define MPC_OVERRIDE_CONFIG_ENABLE_Enabled (0x1UL)


/* MPC_OVERRIDE_STARTADDR: Override region n Start Address */
  #define MPC_OVERRIDE_STARTADDR_ResetValue (0x00000000UL)

/* STARTADDR @Bits 0..31 : Start address for override region n */
  #define MPC_OVERRIDE_STARTADDR_STARTADDR_Pos (0UL)
  #define MPC_OVERRIDE_STARTADDR_STARTADDR_Msk (0xFFFFFFFFUL << MPC_OVERRIDE_STARTADDR_STARTADDR_Pos) /*!< Bit mask of STARTADDR
                                                                            field.*/


/* MPC_OVERRIDE_ENDADDR: Override region n End Address */
  #define MPC_OVERRIDE_ENDADDR_ResetValue (0x00000000UL)

/* ENDADDR @Bits 0..31 : End address for override region n */
  #define MPC_OVERRIDE_ENDADDR_ENDADDR_Pos (0UL)
  #define MPC_OVERRIDE_ENDADDR_ENDADDR_Msk (0xFFFFFFFFUL << MPC_OVERRIDE_ENDADDR_ENDADDR_Pos)


/* MPC_OVERRIDE_PERM: Permission settings for override region n */
  #define MPC_OVERRIDE_PERM_ResetValue (0x00000000UL)

/* READ @Bit 0 : Read access */
  #define MPC_OVERRIDE_PERM_READ_Pos (0UL)
  #define MPC_OVERRIDE_PERM_READ_Msk (0x1UL << MPC_OVERRIDE_PERM_READ_Pos)
  #define MPC_OVERRIDE_PERM_READ_Min (0x0UL)
  #define MPC_OVERRIDE_PERM_READ_Max (0x1UL)
  #define MPC_OVERRIDE_PERM_READ_NotAllowed (0x0UL)
  #define MPC_OVERRIDE_PERM_READ_Allowed (0x1UL)

/* WRITE @Bit 1 : Write access */
  #define MPC_OVERRIDE_PERM_WRITE_Pos (1UL)
  #define MPC_OVERRIDE_PERM_WRITE_Msk (0x1UL << MPC_OVERRIDE_PERM_WRITE_Pos)
  #define MPC_OVERRIDE_PERM_WRITE_Min (0x0UL)
  #define MPC_OVERRIDE_PERM_WRITE_Max (0x1UL)
  #define MPC_OVERRIDE_PERM_WRITE_NotAllowed (0x0UL)
  #define MPC_OVERRIDE_PERM_WRITE_Allowed (0x1UL)

/* EXECUTE @Bit 2 : Software execute */
  #define MPC_OVERRIDE_PERM_EXECUTE_Pos (2UL)
  #define MPC_OVERRIDE_PERM_EXECUTE_Msk (0x1UL << MPC_OVERRIDE_PERM_EXECUTE_Pos)
  #define MPC_OVERRIDE_PERM_EXECUTE_Min (0x0UL)
  #define MPC_OVERRIDE_PERM_EXECUTE_Max (0x1UL)
  #define MPC_OVERRIDE_PERM_EXECUTE_NotAllowed (0x0UL)
  #define MPC_OVERRIDE_PERM_EXECUTE_Allowed (0x1UL)

/* SECATTR @Bit 3 : Security mapping */
  #define MPC_OVERRIDE_PERM_SECATTR_Pos (3UL)
  #define MPC_OVERRIDE_PERM_SECATTR_Msk (0x1UL << MPC_OVERRIDE_PERM_SECATTR_Pos)
  #define MPC_OVERRIDE_PERM_SECATTR_Min (0x0UL)
  #define MPC_OVERRIDE_PERM_SECATTR_Max (0x1UL)
  #define MPC_OVERRIDE_PERM_SECATTR_Secure (0x1UL)
  #define MPC_OVERRIDE_PERM_SECATTR_NonSecure (0x0UL)


/* MPC_OVERRIDE_PERMMASK: Masks permission setting fields from register OVERRIDE.PERM */
  #define MPC_OVERRIDE_PERMMASK_ResetValue (0x00000000UL)

/* READ @Bit 0 : Read mask */
  #define MPC_OVERRIDE_PERMMASK_READ_Pos (0UL)
  #define MPC_OVERRIDE_PERMMASK_READ_Msk (0x1UL << MPC_OVERRIDE_PERMMASK_READ_Pos)
  #define MPC_OVERRIDE_PERMMASK_READ_Min (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_READ_Max (0x1UL)
  #define MPC_OVERRIDE_PERMMASK_READ_Masked (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_READ_UnMasked (0x1UL)

/* WRITE @Bit 1 : Write mask */
  #define MPC_OVERRIDE_PERMMASK_WRITE_Pos (1UL)
  #define MPC_OVERRIDE_PERMMASK_WRITE_Msk (0x1UL << MPC_OVERRIDE_PERMMASK_WRITE_Pos)
  #define MPC_OVERRIDE_PERMMASK_WRITE_Min (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_WRITE_Max (0x1UL)
  #define MPC_OVERRIDE_PERMMASK_WRITE_Masked (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_WRITE_UnMasked (0x1UL)

/* EXECUTE @Bit 2 : Execute mask */
  #define MPC_OVERRIDE_PERMMASK_EXECUTE_Pos (2UL)
  #define MPC_OVERRIDE_PERMMASK_EXECUTE_Msk (0x1UL << MPC_OVERRIDE_PERMMASK_EXECUTE_Pos)
  #define MPC_OVERRIDE_PERMMASK_EXECUTE_Min (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_EXECUTE_Max (0x1UL)
  #define MPC_OVERRIDE_PERMMASK_EXECUTE_Masked (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_EXECUTE_UnMasked (0x1UL)

/* SECATTR @Bit 3 : Security mapping mask */
  #define MPC_OVERRIDE_PERMMASK_SECATTR_Pos (3UL)
  #define MPC_OVERRIDE_PERMMASK_SECATTR_Msk (0x1UL << MPC_OVERRIDE_PERMMASK_SECATTR_Pos)
  #define MPC_OVERRIDE_PERMMASK_SECATTR_Min (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_SECATTR_Max (0x1UL)
  #define MPC_OVERRIDE_PERMMASK_SECATTR_Masked (0x0UL)
  #define MPC_OVERRIDE_PERMMASK_SECATTR_UnMasked (0x1UL)


/* ======================================================= Struct MPC ======================================================== */
/**
  * @brief Memory Privilege Controller
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_MEMACCERR;
    __IM uint32_t RESERVED1[127];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED2[61];
    __IOM NRF_MPC_MEMACCERR_Type MEMACCERR;
    __IM uint32_t RESERVED3[254];
    __IOM NRF_MPC_OVERRIDE_Type OVERRIDE[14];
  } NRF_MPC_Type;

/* MPC_EVENTS_MEMACCERR: Memory Access Error event */
  #define MPC_EVENTS_MEMACCERR_ResetValue (0x00000000UL)

/* EVENTS_MEMACCERR @Bit 0 : Memory Access Error event */
  #define MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_Pos (0UL)
  #define MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_Msk (0x1UL << MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_Pos) /*!< Bit mask of
                                                                            EVENTS_MEMACCERR field.*/
  #define MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_Min (0x0UL)
  #define MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_Max (0x1UL)
  #define MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_NotGenerated (0x0UL)
  #define MPC_EVENTS_MEMACCERR_EVENTS_MEMACCERR_Generated (0x1UL)


/* MPC_INTEN: Enable or disable interrupt */
  #define MPC_INTEN_ResetValue (0x00000000UL)

/* MEMACCERR @Bit 0 : Enable or disable interrupt for event MEMACCERR */
  #define MPC_INTEN_MEMACCERR_Pos (0UL)
  #define MPC_INTEN_MEMACCERR_Msk (0x1UL << MPC_INTEN_MEMACCERR_Pos)
  #define MPC_INTEN_MEMACCERR_Min (0x0UL)
  #define MPC_INTEN_MEMACCERR_Max (0x1UL)
  #define MPC_INTEN_MEMACCERR_Disabled (0x0UL)
  #define MPC_INTEN_MEMACCERR_Enabled (0x1UL)


/* MPC_INTENSET: Enable interrupt */
  #define MPC_INTENSET_ResetValue (0x00000000UL)

/* MEMACCERR @Bit 0 : Write '1' to enable interrupt for event MEMACCERR */
  #define MPC_INTENSET_MEMACCERR_Pos (0UL)
  #define MPC_INTENSET_MEMACCERR_Msk (0x1UL << MPC_INTENSET_MEMACCERR_Pos)
  #define MPC_INTENSET_MEMACCERR_Min (0x0UL)
  #define MPC_INTENSET_MEMACCERR_Max (0x1UL)
  #define MPC_INTENSET_MEMACCERR_Set (0x1UL)
  #define MPC_INTENSET_MEMACCERR_Disabled (0x0UL)
  #define MPC_INTENSET_MEMACCERR_Enabled (0x1UL)


/* MPC_INTENCLR: Disable interrupt */
  #define MPC_INTENCLR_ResetValue (0x00000000UL)

/* MEMACCERR @Bit 0 : Write '1' to disable interrupt for event MEMACCERR */
  #define MPC_INTENCLR_MEMACCERR_Pos (0UL)
  #define MPC_INTENCLR_MEMACCERR_Msk (0x1UL << MPC_INTENCLR_MEMACCERR_Pos)
  #define MPC_INTENCLR_MEMACCERR_Min (0x0UL)
  #define MPC_INTENCLR_MEMACCERR_Max (0x1UL)
  #define MPC_INTENCLR_MEMACCERR_Clear (0x1UL)
  #define MPC_INTENCLR_MEMACCERR_Disabled (0x0UL)
  #define MPC_INTENCLR_MEMACCERR_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           MRAMC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ==================================================== Struct MRAMC_ECC ===================================================== */
/**
  * @brief ECC [MRAMC_ECC] (unspecified)
  */
typedef struct {
  __IOM uint32_t  ERROR;
  __IOM uint32_t  ERRORCORR;
  __IM  uint32_t  ERRORADDR;                         /*!< (@ 0x00000008) Address of the first ECC error that could not be
                                                                         corrected.*/
  __IM  uint32_t  CORRADDR;
} NRF_MRAMC_ECC_Type;

/* MRAMC_ECC_ERROR: ECC Error status. */
  #define MRAMC_ECC_ERROR_ResetValue (0x00000000UL)

/* ECCERROR @Bit 0 : ECC error detected for a read which could not be corrected. Write 0 to clear. */
  #define MRAMC_ECC_ERROR_ECCERROR_Pos (0UL)
  #define MRAMC_ECC_ERROR_ECCERROR_Msk (0x1UL << MRAMC_ECC_ERROR_ECCERROR_Pos)
  #define MRAMC_ECC_ERROR_ECCERROR_Min (0x0UL)
  #define MRAMC_ECC_ERROR_ECCERROR_Max (0x1UL)
  #define MRAMC_ECC_ERROR_ECCERROR_NoEccError (0x0UL)
  #define MRAMC_ECC_ERROR_ECCERROR_EccError (0x1UL)


/* MRAMC_ECC_ERRORCORR: ECC error detected and corrected. */
  #define MRAMC_ECC_ERRORCORR_ResetValue (0x00000000UL)

/* ERRORCORR @Bit 0 : ECC error detected and corrected for a read. Write 0 to clear. */
  #define MRAMC_ECC_ERRORCORR_ERRORCORR_Pos (0UL)
  #define MRAMC_ECC_ERRORCORR_ERRORCORR_Msk (0x1UL << MRAMC_ECC_ERRORCORR_ERRORCORR_Pos)
  #define MRAMC_ECC_ERRORCORR_ERRORCORR_Min (0x0UL)
  #define MRAMC_ECC_ERRORCORR_ERRORCORR_Max (0x1UL)
  #define MRAMC_ECC_ERRORCORR_ERRORCORR_NoEccError (0x0UL)
  #define MRAMC_ECC_ERRORCORR_ERRORCORR_ErrorCorr (0x1UL)


/* MRAMC_ECC_ERRORADDR: Address of the first ECC error that could not be corrected. */
  #define MRAMC_ECC_ERRORADDR_ResetValue (0xFFFFFFFFUL)

/* ERRORADDR @Bits 0..31 : Address */
  #define MRAMC_ECC_ERRORADDR_ERRORADDR_Pos (0UL)
  #define MRAMC_ECC_ERRORADDR_ERRORADDR_Msk (0xFFFFFFFFUL << MRAMC_ECC_ERRORADDR_ERRORADDR_Pos) /*!< Bit mask of ERRORADDR
                                                                            field.*/


/* MRAMC_ECC_CORRADDR: Address of the first ECC error that was corrected. */
  #define MRAMC_ECC_CORRADDR_ResetValue (0xFFFFFFFFUL)

/* CORRADDR @Bits 0..31 : Address */
  #define MRAMC_ECC_CORRADDR_CORRADDR_Pos (0UL)
  #define MRAMC_ECC_CORRADDR_CORRADDR_Msk (0xFFFFFFFFUL << MRAMC_ECC_CORRADDR_CORRADDR_Pos)



/* ================================================= Struct MRAMC_LOWAVGCURR ================================================= */
/**
  * @brief LOWAVGCURR [MRAMC_LOWAVGCURR] (unspecified)
  */
typedef struct {
  __IOM uint32_t  READ;                              /*!< (@ 0x00000000) Preload timeout value for low average current in case
                                                                         of read*/
  __IOM uint32_t  WRITE;                             /*!< (@ 0x00000004) Preload timeout value for low average current in case
                                                                         of write*/
  __IOM uint32_t  ERASE;                             /*!< (@ 0x00000008) Preload timeout value for low average current in case
                                                                         of erase*/
} NRF_MRAMC_LOWAVGCURR_Type;

/* MRAMC_LOWAVGCURR_READ: Preload timeout value for low average current in case of read */
  #define MRAMC_LOWAVGCURR_READ_ResetValue (0x00000000UL)

/* VALUE @Bits 0..11 : Preload value */
  #define MRAMC_LOWAVGCURR_READ_VALUE_Pos (0UL)
  #define MRAMC_LOWAVGCURR_READ_VALUE_Msk (0xFFFUL << MRAMC_LOWAVGCURR_READ_VALUE_Pos)
  #define MRAMC_LOWAVGCURR_READ_VALUE_Min (0x000UL)
  #define MRAMC_LOWAVGCURR_READ_VALUE_Max (0xFFFUL)


/* MRAMC_LOWAVGCURR_WRITE: Preload timeout value for low average current in case of write */
  #define MRAMC_LOWAVGCURR_WRITE_ResetValue (0x00000000UL)

/* VALUE @Bits 0..11 : Preload value */
  #define MRAMC_LOWAVGCURR_WRITE_VALUE_Pos (0UL)
  #define MRAMC_LOWAVGCURR_WRITE_VALUE_Msk (0xFFFUL << MRAMC_LOWAVGCURR_WRITE_VALUE_Pos)
  #define MRAMC_LOWAVGCURR_WRITE_VALUE_Min (0x000UL)
  #define MRAMC_LOWAVGCURR_WRITE_VALUE_Max (0xFFFUL)


/* MRAMC_LOWAVGCURR_ERASE: Preload timeout value for low average current in case of erase */
  #define MRAMC_LOWAVGCURR_ERASE_ResetValue (0x00000000UL)

/* VALUE @Bits 0..11 : Preload value */
  #define MRAMC_LOWAVGCURR_ERASE_VALUE_Pos (0UL)
  #define MRAMC_LOWAVGCURR_ERASE_VALUE_Msk (0xFFFUL << MRAMC_LOWAVGCURR_ERASE_VALUE_Pos)
  #define MRAMC_LOWAVGCURR_ERASE_VALUE_Min (0x000UL)
  #define MRAMC_LOWAVGCURR_ERASE_VALUE_Max (0xFFFUL)



/* =================================================== Struct MRAMC_POWER ==================================================== */
/**
  * @brief POWER [MRAMC_POWER] (unspecified)
  */
typedef struct {
  __IOM uint32_t  INIT;
  __IOM uint32_t  AUTOPOWERDOWN;                     /*!< (@ 0x00000004) Configures the automatic power down feature using the
                                                                         inactive time period of MRAM.*/
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  STATUS;
  __IM  uint32_t  POWERUPACK;                        /*!< (@ 0x00000010) Status of the power control signals acknowledgement
                                                                         during power up sequence.*/
  __IM  uint32_t  POWERDOWNACK;                      /*!< (@ 0x00000014) Status of the power control signals acknowledgement
                                                                         during power down sequence.*/
} NRF_MRAMC_POWER_Type;

/* MRAMC_POWER_INIT: Initiates power up or down sequence. */
  #define MRAMC_POWER_INIT_ResetValue (0x00000000UL)

/* MODE @Bits 0..1 : Power mode. */
  #define MRAMC_POWER_INIT_MODE_Pos (0UL)
  #define MRAMC_POWER_INIT_MODE_Msk (0x3UL << MRAMC_POWER_INIT_MODE_Pos)
  #define MRAMC_POWER_INIT_MODE_Min (0x0UL)
  #define MRAMC_POWER_INIT_MODE_Max (0x3UL)
  #define MRAMC_POWER_INIT_MODE_NoOperation (0x0UL)
  #define MRAMC_POWER_INIT_MODE_PowerUp (0x1UL)      /*!< Triggers power up sequence. Ignored if MRAM is already in Active mode
                                                          or Standby mode.*/
  #define MRAMC_POWER_INIT_MODE_PowerDown (0x2UL)    /*!< Initiates power down sequence. Ignored if MRAM is already in MRAM_OFF
                                                          mode.*/
  #define MRAMC_POWER_INIT_MODE_PowerDownTrimRet (0x3UL) /*!< Initiates power down sequence with trim retained. Ignored if MRAM
                                                              is already in MRAM_OFF_TRIM_RETAIN mode.*/

/* KEY @Bits 16..31 : Key to enable the writing to this register. */
  #define MRAMC_POWER_INIT_KEY_Pos (16UL)
  #define MRAMC_POWER_INIT_KEY_Msk (0xFFFFUL << MRAMC_POWER_INIT_KEY_Pos)
  #define MRAMC_POWER_INIT_KEY_Min (0x0UL)
  #define MRAMC_POWER_INIT_KEY_Max (0xA66DUL)
  #define MRAMC_POWER_INIT_KEY_Disable (0x0000UL)
  #define MRAMC_POWER_INIT_KEY_Enable (0xA66DUL)


/* MRAMC_POWER_AUTOPOWERDOWN: Configures the automatic power down feature using the inactive time period of MRAM. */
  #define MRAMC_POWER_AUTOPOWERDOWN_ResetValue (0x00000000UL)

/* TIMEOUTVALUE @Bits 0..15 : Timeout value for the power down. */
  #define MRAMC_POWER_AUTOPOWERDOWN_TIMEOUTVALUE_Pos (0UL)
  #define MRAMC_POWER_AUTOPOWERDOWN_TIMEOUTVALUE_Msk (0xFFFFUL << MRAMC_POWER_AUTOPOWERDOWN_TIMEOUTVALUE_Pos) /*!< Bit mask of
                                                                            TIMEOUTVALUE field.*/
  #define MRAMC_POWER_AUTOPOWERDOWN_TIMEOUTVALUE_Min (0x0000UL)
  #define MRAMC_POWER_AUTOPOWERDOWN_TIMEOUTVALUE_Max (0xFFFFUL)

/* POWERDOWNCFG @Bit 30 : Power down mode when the timeout happens. */
  #define MRAMC_POWER_AUTOPOWERDOWN_POWERDOWNCFG_Pos (30UL)
  #define MRAMC_POWER_AUTOPOWERDOWN_POWERDOWNCFG_Msk (0x1UL << MRAMC_POWER_AUTOPOWERDOWN_POWERDOWNCFG_Pos) /*!< Bit mask of
                                                                            POWERDOWNCFG field.*/
  #define MRAMC_POWER_AUTOPOWERDOWN_POWERDOWNCFG_Min (0x0UL)
  #define MRAMC_POWER_AUTOPOWERDOWN_POWERDOWNCFG_Max (0x1UL)
  #define MRAMC_POWER_AUTOPOWERDOWN_POWERDOWNCFG_MramOffTrimRetain (0x0UL)
  #define MRAMC_POWER_AUTOPOWERDOWN_POWERDOWNCFG_MramOff (0x1UL)

/* ENABLE @Bit 31 : Enable the automatic power down feature. */
  #define MRAMC_POWER_AUTOPOWERDOWN_ENABLE_Pos (31UL)
  #define MRAMC_POWER_AUTOPOWERDOWN_ENABLE_Msk (0x1UL << MRAMC_POWER_AUTOPOWERDOWN_ENABLE_Pos)
  #define MRAMC_POWER_AUTOPOWERDOWN_ENABLE_Min (0x0UL)
  #define MRAMC_POWER_AUTOPOWERDOWN_ENABLE_Max (0x1UL)
  #define MRAMC_POWER_AUTOPOWERDOWN_ENABLE_Disable (0x0UL)
  #define MRAMC_POWER_AUTOPOWERDOWN_ENABLE_Enable (0x1UL)


/* MRAMC_POWER_STATUS: Status of the power up/down sequence. */
  #define MRAMC_POWER_STATUS_ResetValue (0x00000000UL)

/* STATE @Bits 0..3 : The current power up/down state. */
  #define MRAMC_POWER_STATUS_STATE_Pos (0UL)
  #define MRAMC_POWER_STATUS_STATE_Msk (0xFUL << MRAMC_POWER_STATUS_STATE_Pos)
  #define MRAMC_POWER_STATUS_STATE_Min (0x0UL)
  #define MRAMC_POWER_STATUS_STATE_Max (0x8UL)
  #define MRAMC_POWER_STATUS_STATE_Off (0x0UL)
  #define MRAMC_POWER_STATUS_STATE_PowerUpSeq (0x1UL)
  #define MRAMC_POWER_STATUS_STATE_TrimConfigSeq (0x2UL)
  #define MRAMC_POWER_STATUS_STATE_TrimConfigWait (0x3UL)
  #define MRAMC_POWER_STATUS_STATE_TrimConfigDone (0x4UL) /*!< The MRAM trim configuration to completed (This is momentary
                                                               state).*/
  #define MRAMC_POWER_STATUS_STATE_Standby (0x5UL)
  #define MRAMC_POWER_STATUS_STATE_Active (0x6UL)
  #define MRAMC_POWER_STATUS_STATE_PowerDownSeq (0x7UL)
  #define MRAMC_POWER_STATUS_STATE_OffTrimRetain (0x8UL)


/* MRAMC_POWER_POWERUPACK: Status of the power control signals acknowledgement during power up sequence. */
  #define MRAMC_POWER_POWERUPACK_ResetValue (0x00000000UL)

/* VREFVPR @Bit 0 : Waiting for VREF and VPR up ACK or not */
  #define MRAMC_POWER_POWERUPACK_VREFVPR_Pos (0UL)
  #define MRAMC_POWER_POWERUPACK_VREFVPR_Msk (0x1UL << MRAMC_POWER_POWERUPACK_VREFVPR_Pos)
  #define MRAMC_POWER_POWERUPACK_VREFVPR_Min (0x0UL)
  #define MRAMC_POWER_POWERUPACK_VREFVPR_Max (0x1UL)
  #define MRAMC_POWER_POWERUPACK_VREFVPR_Busy (0x0UL)
  #define MRAMC_POWER_POWERUPACK_VREFVPR_Ready (0x1UL)

/* VDD @Bit 2 : Waiting for VDD up ACK or not */
  #define MRAMC_POWER_POWERUPACK_VDD_Pos (2UL)
  #define MRAMC_POWER_POWERUPACK_VDD_Msk (0x1UL << MRAMC_POWER_POWERUPACK_VDD_Pos)
  #define MRAMC_POWER_POWERUPACK_VDD_Min (0x0UL)
  #define MRAMC_POWER_POWERUPACK_VDD_Max (0x1UL)
  #define MRAMC_POWER_POWERUPACK_VDD_Busy (0x0UL)
  #define MRAMC_POWER_POWERUPACK_VDD_Ready (0x1UL)

/* VDDCFG @Bit 3 : Waiting for VDD_CFG up ACK or not */
  #define MRAMC_POWER_POWERUPACK_VDDCFG_Pos (3UL)
  #define MRAMC_POWER_POWERUPACK_VDDCFG_Msk (0x1UL << MRAMC_POWER_POWERUPACK_VDDCFG_Pos)
  #define MRAMC_POWER_POWERUPACK_VDDCFG_Min (0x0UL)
  #define MRAMC_POWER_POWERUPACK_VDDCFG_Max (0x1UL)
  #define MRAMC_POWER_POWERUPACK_VDDCFG_Busy (0x0UL)
  #define MRAMC_POWER_POWERUPACK_VDDCFG_Ready (0x1UL)

/* VDDA @Bit 4 : Waiting for VDDA up ACK or not */
  #define MRAMC_POWER_POWERUPACK_VDDA_Pos (4UL)
  #define MRAMC_POWER_POWERUPACK_VDDA_Msk (0x1UL << MRAMC_POWER_POWERUPACK_VDDA_Pos)
  #define MRAMC_POWER_POWERUPACK_VDDA_Min (0x0UL)
  #define MRAMC_POWER_POWERUPACK_VDDA_Max (0x1UL)
  #define MRAMC_POWER_POWERUPACK_VDDA_Busy (0x0UL)
  #define MRAMC_POWER_POWERUPACK_VDDA_Ready (0x1UL)


/* MRAMC_POWER_POWERDOWNACK: Status of the power control signals acknowledgement during power down sequence. */
  #define MRAMC_POWER_POWERDOWNACK_ResetValue (0x00000000UL)

/* VREFVPR @Bit 0 : Waiting for VREF and VPR down ACK or not */
  #define MRAMC_POWER_POWERDOWNACK_VREFVPR_Pos (0UL)
  #define MRAMC_POWER_POWERDOWNACK_VREFVPR_Msk (0x1UL << MRAMC_POWER_POWERDOWNACK_VREFVPR_Pos)
  #define MRAMC_POWER_POWERDOWNACK_VREFVPR_Min (0x0UL)
  #define MRAMC_POWER_POWERDOWNACK_VREFVPR_Max (0x1UL)
  #define MRAMC_POWER_POWERDOWNACK_VREFVPR_Busy (0x0UL)
  #define MRAMC_POWER_POWERDOWNACK_VREFVPR_Ready (0x1UL)

/* VDD @Bit 2 : Waiting for VDD down ACK or not */
  #define MRAMC_POWER_POWERDOWNACK_VDD_Pos (2UL)
  #define MRAMC_POWER_POWERDOWNACK_VDD_Msk (0x1UL << MRAMC_POWER_POWERDOWNACK_VDD_Pos)
  #define MRAMC_POWER_POWERDOWNACK_VDD_Min (0x0UL)
  #define MRAMC_POWER_POWERDOWNACK_VDD_Max (0x1UL)
  #define MRAMC_POWER_POWERDOWNACK_VDD_Busy (0x0UL)
  #define MRAMC_POWER_POWERDOWNACK_VDD_Ready (0x1UL)

/* VDDCFG @Bit 3 : Waiting for VDD_CFG down ACK or not */
  #define MRAMC_POWER_POWERDOWNACK_VDDCFG_Pos (3UL)
  #define MRAMC_POWER_POWERDOWNACK_VDDCFG_Msk (0x1UL << MRAMC_POWER_POWERDOWNACK_VDDCFG_Pos)
  #define MRAMC_POWER_POWERDOWNACK_VDDCFG_Min (0x0UL)
  #define MRAMC_POWER_POWERDOWNACK_VDDCFG_Max (0x1UL)
  #define MRAMC_POWER_POWERDOWNACK_VDDCFG_Busy (0x0UL)
  #define MRAMC_POWER_POWERDOWNACK_VDDCFG_Ready (0x1UL)

/* VDDA @Bit 4 : Waiting for VDDA down ACK or not */
  #define MRAMC_POWER_POWERDOWNACK_VDDA_Pos (4UL)
  #define MRAMC_POWER_POWERDOWNACK_VDDA_Msk (0x1UL << MRAMC_POWER_POWERDOWNACK_VDDA_Pos)
  #define MRAMC_POWER_POWERDOWNACK_VDDA_Min (0x0UL)
  #define MRAMC_POWER_POWERDOWNACK_VDDA_Max (0x1UL)
  #define MRAMC_POWER_POWERDOWNACK_VDDA_Busy (0x0UL)
  #define MRAMC_POWER_POWERDOWNACK_VDDA_Ready (0x1UL)



/* ==================================================== Struct MRAMC_TRIM ==================================================== */
/**
  * @brief TRIM [MRAMC_TRIM] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DATAIN;
  __IM  uint32_t  DATAOUT;
  __IOM uint32_t  COUNT;                             /*!< (@ 0x00000008) Number of bits in the current data to be written to and
                                                                         read from the trim configuration.*/
  __IOM uint32_t  START;
  __IM  uint32_t  READY;
  __IOM uint32_t  DONE;                              /*!< (@ 0x00000014) This register is used to indicate to the MRAMC that the
                                                                         whole MRAM trim configuration data write is completed.*/
} NRF_MRAMC_TRIM_Type;

/* MRAMC_TRIM_DATAIN: Data to be written to the MRAM trim configuration. */
  #define MRAMC_TRIM_DATAIN_ResetValue (0xFFFFFFFFUL)

/* DATAIN @Bits 0..31 : Data */
  #define MRAMC_TRIM_DATAIN_DATAIN_Pos (0UL)
  #define MRAMC_TRIM_DATAIN_DATAIN_Msk (0xFFFFFFFFUL << MRAMC_TRIM_DATAIN_DATAIN_Pos)


/* MRAMC_TRIM_DATAOUT: Data read from the MRAM trim configuration. */
  #define MRAMC_TRIM_DATAOUT_ResetValue (0x00000000UL)

/* DATAOUT @Bits 0..31 : Data */
  #define MRAMC_TRIM_DATAOUT_DATAOUT_Pos (0UL)
  #define MRAMC_TRIM_DATAOUT_DATAOUT_Msk (0xFFFFFFFFUL << MRAMC_TRIM_DATAOUT_DATAOUT_Pos)


/* MRAMC_TRIM_COUNT: Number of bits in the current data to be written to and read from the trim configuration. */
  #define MRAMC_TRIM_COUNT_ResetValue (0x00000020UL)

/* COUNT @Bits 0..5 : Number of bits to be written. */
  #define MRAMC_TRIM_COUNT_COUNT_Pos (0UL)
  #define MRAMC_TRIM_COUNT_COUNT_Msk (0x3FUL << MRAMC_TRIM_COUNT_COUNT_Pos)
  #define MRAMC_TRIM_COUNT_COUNT_Min (0x00UL)
  #define MRAMC_TRIM_COUNT_COUNT_Max (0x20UL)


/* MRAMC_TRIM_START: Start shifting data for trim configuration. */
  #define MRAMC_TRIM_START_ResetValue (0x00000000UL)

/* START @Bit 0 : Start trim configuration */
  #define MRAMC_TRIM_START_START_Pos (0UL)
  #define MRAMC_TRIM_START_START_Msk (0x1UL << MRAMC_TRIM_START_START_Pos)
  #define MRAMC_TRIM_START_START_Min (0x0UL)
  #define MRAMC_TRIM_START_START_Max (0x1UL)
  #define MRAMC_TRIM_START_START_NoOperation (0x0UL)
  #define MRAMC_TRIM_START_START_Start (0x1UL)

/* KEY @Bits 16..31 : Key to enable the writing to this register. */
  #define MRAMC_TRIM_START_KEY_Pos (16UL)
  #define MRAMC_TRIM_START_KEY_Msk (0xFFFFUL << MRAMC_TRIM_START_KEY_Pos)
  #define MRAMC_TRIM_START_KEY_Min (0x0UL)
  #define MRAMC_TRIM_START_KEY_Max (0xA66DUL)
  #define MRAMC_TRIM_START_KEY_Disable (0x0000UL)
  #define MRAMC_TRIM_START_KEY_Enable (0xA66DUL)


/* MRAMC_TRIM_READY: Status of shifting the MRAM trim configuration data. */
  #define MRAMC_TRIM_READY_ResetValue (0x00000001UL)

/* READY @Bit 0 : Shifting the MRAM trim configuration data is in progress or not. */
  #define MRAMC_TRIM_READY_READY_Pos (0UL)
  #define MRAMC_TRIM_READY_READY_Msk (0x1UL << MRAMC_TRIM_READY_READY_Pos)
  #define MRAMC_TRIM_READY_READY_Min (0x0UL)
  #define MRAMC_TRIM_READY_READY_Max (0x1UL)
  #define MRAMC_TRIM_READY_READY_Busy (0x0UL)
  #define MRAMC_TRIM_READY_READY_Ready (0x1UL)


/* MRAMC_TRIM_DONE: This register is used to indicate to the MRAMC that the whole MRAM trim configuration data write is
                     completed. */

  #define MRAMC_TRIM_DONE_ResetValue (0x00000000UL)

/* TRIMCOMPLETED @Bits 0..31 : Trim configuration is completed. */
  #define MRAMC_TRIM_DONE_TRIMCOMPLETED_Pos (0UL)
  #define MRAMC_TRIM_DONE_TRIMCOMPLETED_Msk (0xFFFFFFFFUL << MRAMC_TRIM_DONE_TRIMCOMPLETED_Pos) /*!< Bit mask of TRIMCOMPLETED
                                                                            field.*/
  #define MRAMC_TRIM_DONE_TRIMCOMPLETED_Min (0x0UL)
  #define MRAMC_TRIM_DONE_TRIMCOMPLETED_Max (0xA66DA66DUL)
  #define MRAMC_TRIM_DONE_TRIMCOMPLETED_TrimUnknown (0x00000000UL)
  #define MRAMC_TRIM_DONE_TRIMCOMPLETED_TrimCompleted (0x00000001UL)
  #define MRAMC_TRIM_DONE_TRIMCOMPLETED_TrimComplete (0xA66DA66DUL)
  #define MRAMC_TRIM_DONE_TRIMCOMPLETED_NoOperation (0x00000000UL)



/* =================================================== Struct MRAMC_ERASE ==================================================== */
/**
  * @brief ERASE [MRAMC_ERASE] (unspecified)
  */
typedef struct {
  __IOM uint32_t  ERASEWORD;
  __IOM uint32_t  SIZE;
  __IOM uint32_t  ERASEAREA;
  __OM  uint32_t  ERASEALL;                          /*!< (@ 0x0000000C) Register for erasing whole MRAM main block and the
                                                                         first NVR page*/
  __IOM uint32_t  LOCK;
} NRF_MRAMC_ERASE_Type;

/* MRAMC_ERASE_ERASEWORD: Register for erasing a word in the MRAM main block. */
  #define MRAMC_ERASE_ERASEWORD_ResetValue (0x00000000UL)

/* ERASEWORD @Bits 0..31 : Address of the word that needs to be erased. */
  #define MRAMC_ERASE_ERASEWORD_ERASEWORD_Pos (0UL)
  #define MRAMC_ERASE_ERASEWORD_ERASEWORD_Msk (0xFFFFFFFFUL << MRAMC_ERASE_ERASEWORD_ERASEWORD_Pos) /*!< Bit mask of ERASEWORD
                                                                            field.*/


/* MRAMC_ERASE_SIZE: Size for erasing an area in the MRAM main block */
  #define MRAMC_ERASE_SIZE_ResetValue (0x00000000UL)

/* SIZE @Bits 0..18 : Number of MRAM words to be erased using ERASE.ERASEAREA. */
  #define MRAMC_ERASE_SIZE_SIZE_Pos (0UL)
  #define MRAMC_ERASE_SIZE_SIZE_Msk (0x7FFFFUL << MRAMC_ERASE_SIZE_SIZE_Pos)
  #define MRAMC_ERASE_SIZE_SIZE_Min (0x00001UL)
  #define MRAMC_ERASE_SIZE_SIZE_Max (0x40000UL)


/* MRAMC_ERASE_ERASEAREA: Register for erasing an area in the MRAM main block */
  #define MRAMC_ERASE_ERASEAREA_ResetValue (0x00000000UL)

/* ERASEAREA @Bits 0..31 : Start address of the area to be erased. */
  #define MRAMC_ERASE_ERASEAREA_ERASEAREA_Pos (0UL)
  #define MRAMC_ERASE_ERASEAREA_ERASEAREA_Msk (0xFFFFFFFFUL << MRAMC_ERASE_ERASEAREA_ERASEAREA_Pos) /*!< Bit mask of ERASEAREA
                                                                            field.*/


/* MRAMC_ERASE_ERASEALL: Register for erasing whole MRAM main block and the first NVR page */
  #define MRAMC_ERASE_ERASEALL_ResetValue (0x00000000UL)

/* ERASEALL @Bit 0 : Erase whole MRAM and the first NVR page. The other NVR pages are not erased. */
  #define MRAMC_ERASE_ERASEALL_ERASEALL_Pos (0UL)
  #define MRAMC_ERASE_ERASEALL_ERASEALL_Msk (0x1UL << MRAMC_ERASE_ERASEALL_ERASEALL_Pos)
  #define MRAMC_ERASE_ERASEALL_ERASEALL_Min (0x0UL)
  #define MRAMC_ERASE_ERASEALL_ERASEALL_Max (0x1UL)
  #define MRAMC_ERASE_ERASEALL_ERASEALL_NoOperation (0x0UL)
  #define MRAMC_ERASE_ERASEALL_ERASEALL_Erase (0x1UL)


/* MRAMC_ERASE_LOCK: Locking the erase registers. */
  #define MRAMC_ERASE_LOCK_ResetValue (0x00000000UL)

/* ERASEWORD @Bit 0 : Lock for ERASE.ERASEWORD. */
  #define MRAMC_ERASE_LOCK_ERASEWORD_Pos (0UL)
  #define MRAMC_ERASE_LOCK_ERASEWORD_Msk (0x1UL << MRAMC_ERASE_LOCK_ERASEWORD_Pos)
  #define MRAMC_ERASE_LOCK_ERASEWORD_Min (0x0UL)
  #define MRAMC_ERASE_LOCK_ERASEWORD_Max (0x1UL)
  #define MRAMC_ERASE_LOCK_ERASEWORD_Disabled (0x0UL)
  #define MRAMC_ERASE_LOCK_ERASEWORD_Enabled (0x1UL)

/* ERASEAREA @Bit 1 : Lock for ERASE.ERASEAREA. */
  #define MRAMC_ERASE_LOCK_ERASEAREA_Pos (1UL)
  #define MRAMC_ERASE_LOCK_ERASEAREA_Msk (0x1UL << MRAMC_ERASE_LOCK_ERASEAREA_Pos)
  #define MRAMC_ERASE_LOCK_ERASEAREA_Min (0x0UL)
  #define MRAMC_ERASE_LOCK_ERASEAREA_Max (0x1UL)
  #define MRAMC_ERASE_LOCK_ERASEAREA_Disabled (0x0UL)
  #define MRAMC_ERASE_LOCK_ERASEAREA_Enabled (0x1UL)

/* ERASEALL @Bit 2 : Lock for ERASE.ERASEALL. */
  #define MRAMC_ERASE_LOCK_ERASEALL_Pos (2UL)
  #define MRAMC_ERASE_LOCK_ERASEALL_Msk (0x1UL << MRAMC_ERASE_LOCK_ERASEALL_Pos)
  #define MRAMC_ERASE_LOCK_ERASEALL_Min (0x0UL)
  #define MRAMC_ERASE_LOCK_ERASEALL_Max (0x1UL)
  #define MRAMC_ERASE_LOCK_ERASEALL_Disabled (0x0UL)
  #define MRAMC_ERASE_LOCK_ERASEALL_Enabled (0x1UL)



/* ================================================= Struct MRAMC_CONFIGNVR ================================================== */
/**
  * @brief CONFIGNVR [MRAMC_CONFIGNVR] (unspecified)
  */
typedef struct {
  __IOM uint32_t  PAGE[2];
} NRF_MRAMC_CONFIGNVR_Type;

/* MRAMC_CONFIGNVR_PAGE: Configuration register for NVR page n */
  #define MRAMC_CONFIGNVR_PAGE_MaxCount (2UL)
  #define MRAMC_CONFIGNVR_PAGE_MaxIndex (1UL)
  #define MRAMC_CONFIGNVR_PAGE_MinIndex (0UL)
  #define MRAMC_CONFIGNVR_PAGE_ResetValue (0xFFF00000UL)

/* WEN @Bits 0..1 : Write enable. */
  #define MRAMC_CONFIGNVR_PAGE_WEN_Pos (0UL)
  #define MRAMC_CONFIGNVR_PAGE_WEN_Msk (0x3UL << MRAMC_CONFIGNVR_PAGE_WEN_Pos)
  #define MRAMC_CONFIGNVR_PAGE_WEN_Min (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_WEN_Max (0x2UL)
  #define MRAMC_CONFIGNVR_PAGE_WEN_DisableWrite (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_WEN_EnableNormalWrite (0x1UL)
  #define MRAMC_CONFIGNVR_PAGE_WEN_EnableDirectWrite (0x2UL)

/* EEN @Bits 4..5 : Erase enable. */
  #define MRAMC_CONFIGNVR_PAGE_EEN_Pos (4UL)
  #define MRAMC_CONFIGNVR_PAGE_EEN_Msk (0x3UL << MRAMC_CONFIGNVR_PAGE_EEN_Pos)
  #define MRAMC_CONFIGNVR_PAGE_EEN_Min (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_EEN_Max (0x2UL)
  #define MRAMC_CONFIGNVR_PAGE_EEN_DisableErase (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_EEN_EnablePageErase (0x1UL)
  #define MRAMC_CONFIGNVR_PAGE_EEN_EnableWordErase (0x2UL)

/* LOCK @Bit 16 : Enables the lock for this register. */
  #define MRAMC_CONFIGNVR_PAGE_LOCK_Pos (16UL)
  #define MRAMC_CONFIGNVR_PAGE_LOCK_Msk (0x1UL << MRAMC_CONFIGNVR_PAGE_LOCK_Pos)
  #define MRAMC_CONFIGNVR_PAGE_LOCK_Min (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_LOCK_Max (0x1UL)
  #define MRAMC_CONFIGNVR_PAGE_LOCK_LockDisabled (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_LOCK_LockEnabled (0x1UL)

/* UREN @Bit 20 : Enable read access to the upper part of NVR page, where the upper part size is NVR page size - 2KB */
  #define MRAMC_CONFIGNVR_PAGE_UREN_Pos (20UL)
  #define MRAMC_CONFIGNVR_PAGE_UREN_Msk (0x1UL << MRAMC_CONFIGNVR_PAGE_UREN_Pos)
  #define MRAMC_CONFIGNVR_PAGE_UREN_Min (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_UREN_Max (0x1UL)
  #define MRAMC_CONFIGNVR_PAGE_UREN_Disabled (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_UREN_Enabled (0x1UL)

/* UWEN @Bit 21 : Enable write access to the upper part of NVR page, where the upper part size is NVR page size - 2KB */
  #define MRAMC_CONFIGNVR_PAGE_UWEN_Pos (21UL)
  #define MRAMC_CONFIGNVR_PAGE_UWEN_Msk (0x1UL << MRAMC_CONFIGNVR_PAGE_UWEN_Pos)
  #define MRAMC_CONFIGNVR_PAGE_UWEN_Min (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_UWEN_Max (0x1UL)
  #define MRAMC_CONFIGNVR_PAGE_UWEN_Disabled (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_UWEN_Enabled (0x1UL)

/* LREN @Bit 22 : Enable read access to the lower range of the NVR page, as defined by LRSIZE */
  #define MRAMC_CONFIGNVR_PAGE_LREN_Pos (22UL)
  #define MRAMC_CONFIGNVR_PAGE_LREN_Msk (0x1UL << MRAMC_CONFIGNVR_PAGE_LREN_Pos)
  #define MRAMC_CONFIGNVR_PAGE_LREN_Min (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_LREN_Max (0x1UL)
  #define MRAMC_CONFIGNVR_PAGE_LREN_Disabled (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_LREN_Enabled (0x1UL)

/* LWEN @Bit 23 : Enable write access to the lower range of the NVR page, as defined by LWSIZE */
  #define MRAMC_CONFIGNVR_PAGE_LWEN_Pos (23UL)
  #define MRAMC_CONFIGNVR_PAGE_LWEN_Msk (0x1UL << MRAMC_CONFIGNVR_PAGE_LWEN_Pos)
  #define MRAMC_CONFIGNVR_PAGE_LWEN_Min (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_LWEN_Max (0x1UL)
  #define MRAMC_CONFIGNVR_PAGE_LWEN_Disabled (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_LWEN_Enabled (0x1UL)

/* LRSIZE @Bits 24..27 : Size of part of the lower 2KB memory in the NVR page to disable read access */
  #define MRAMC_CONFIGNVR_PAGE_LRSIZE_Pos (24UL)
  #define MRAMC_CONFIGNVR_PAGE_LRSIZE_Msk (0xFUL << MRAMC_CONFIGNVR_PAGE_LRSIZE_Pos)
  #define MRAMC_CONFIGNVR_PAGE_LRSIZE_Min (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_LRSIZE_Max (0xFUL)

/* LWSIZE @Bits 28..31 : Size of part of the lower 2KB memory in the NVR page to disable write access */
  #define MRAMC_CONFIGNVR_PAGE_LWSIZE_Pos (28UL)
  #define MRAMC_CONFIGNVR_PAGE_LWSIZE_Msk (0xFUL << MRAMC_CONFIGNVR_PAGE_LWSIZE_Pos)
  #define MRAMC_CONFIGNVR_PAGE_LWSIZE_Min (0x0UL)
  #define MRAMC_CONFIGNVR_PAGE_LWSIZE_Max (0xFUL)


/* ====================================================== Struct MRAMC ======================================================= */
/**
  * @brief MRAM controller
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_READY;
    __IOM uint32_t EVENTS_READYNEXT;
    __IOM uint32_t EVENTS_ECCERROR;
    __IOM uint32_t EVENTS_ECCERRORCORR;
    __IOM uint32_t EVENTS_TRIMCONFIGREQ;             /*!< (@ 0x00000110) MRAM trim configuration request. The MRAMC is ready for
                                                                         the MRAM trim configuration.*/
    __IOM uint32_t EVENTS_ACCESSERR;
    __IM uint32_t RESERVED1[122];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED2[60];
    __IM uint32_t READY;
    __IM uint32_t READYNEXT;
    __IM uint32_t RESERVED3[2];
    __IOM NRF_MRAMC_ECC_Type ECC;
    __IM uint32_t RESERVED4[56];
    __IOM uint32_t CONFIG;
    __IOM uint32_t AUTOREADMODE;                     /*!< (@ 0x00000504) Automatically disables the write and erases on timeout
                                                                         and enters into read mode.*/
    __IOM uint32_t WAITSTATES;
    __IOM uint32_t READYNEXTTIMEOUT;
    __IOM NRF_MRAMC_LOWAVGCURR_Type LOWAVGCURR;
    __IM uint32_t RESERVED5;
    __IOM NRF_MRAMC_POWER_Type POWER;
    __IM uint32_t RESERVED6[2];
    __IOM NRF_MRAMC_TRIM_Type TRIM;
    __IM uint32_t RESERVED7[2];
    __IOM NRF_MRAMC_ERASE_Type ERASE;
    __IM uint32_t RESERVED8[3];
    __IOM NRF_MRAMC_CONFIGNVR_Type CONFIGNVR;
  } NRF_MRAMC_Type;

/* MRAMC_EVENTS_READY: Current operation is completed */
  #define MRAMC_EVENTS_READY_ResetValue (0x00000000UL)

/* EVENTS_READY @Bit 0 : Current operation is completed */
  #define MRAMC_EVENTS_READY_EVENTS_READY_Pos (0UL)
  #define MRAMC_EVENTS_READY_EVENTS_READY_Msk (0x1UL << MRAMC_EVENTS_READY_EVENTS_READY_Pos) /*!< Bit mask of EVENTS_READY
                                                                            field.*/
  #define MRAMC_EVENTS_READY_EVENTS_READY_Min (0x0UL)
  #define MRAMC_EVENTS_READY_EVENTS_READY_Max (0x1UL)
  #define MRAMC_EVENTS_READY_EVENTS_READY_NotGenerated (0x0UL)
  #define MRAMC_EVENTS_READY_EVENTS_READY_Generated (0x1UL)


/* MRAMC_EVENTS_READYNEXT: Ready to accept a new write operation */
  #define MRAMC_EVENTS_READYNEXT_ResetValue (0x00000000UL)

/* EVENTS_READYNEXT @Bit 0 : Ready to accept a new write operation */
  #define MRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Pos (0UL)
  #define MRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Msk (0x1UL << MRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Pos) /*!< Bit mask of
                                                                            EVENTS_READYNEXT field.*/
  #define MRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Min (0x0UL)
  #define MRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Max (0x1UL)
  #define MRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_NotGenerated (0x0UL)
  #define MRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Generated (0x1UL)


/* MRAMC_EVENTS_ECCERROR: ECC error detected but not corrected. */
  #define MRAMC_EVENTS_ECCERROR_ResetValue (0x00000000UL)

/* EVENTS_ECCERROR @Bit 0 : ECC error detected but not corrected. */
  #define MRAMC_EVENTS_ECCERROR_EVENTS_ECCERROR_Pos (0UL)
  #define MRAMC_EVENTS_ECCERROR_EVENTS_ECCERROR_Msk (0x1UL << MRAMC_EVENTS_ECCERROR_EVENTS_ECCERROR_Pos) /*!< Bit mask of
                                                                            EVENTS_ECCERROR field.*/
  #define MRAMC_EVENTS_ECCERROR_EVENTS_ECCERROR_Min (0x0UL)
  #define MRAMC_EVENTS_ECCERROR_EVENTS_ECCERROR_Max (0x1UL)
  #define MRAMC_EVENTS_ECCERROR_EVENTS_ECCERROR_NotGenerated (0x0UL)
  #define MRAMC_EVENTS_ECCERROR_EVENTS_ECCERROR_Generated (0x1UL)


/* MRAMC_EVENTS_ECCERRORCORR: ECC error detected and corrected. */
  #define MRAMC_EVENTS_ECCERRORCORR_ResetValue (0x00000000UL)

/* EVENTS_ECCERRORCORR @Bit 0 : ECC error detected and corrected. */
  #define MRAMC_EVENTS_ECCERRORCORR_EVENTS_ECCERRORCORR_Pos (0UL)
  #define MRAMC_EVENTS_ECCERRORCORR_EVENTS_ECCERRORCORR_Msk (0x1UL << MRAMC_EVENTS_ECCERRORCORR_EVENTS_ECCERRORCORR_Pos) /*!<
                                                                            Bit mask of EVENTS_ECCERRORCORR field.*/
  #define MRAMC_EVENTS_ECCERRORCORR_EVENTS_ECCERRORCORR_Min (0x0UL)
  #define MRAMC_EVENTS_ECCERRORCORR_EVENTS_ECCERRORCORR_Max (0x1UL)
  #define MRAMC_EVENTS_ECCERRORCORR_EVENTS_ECCERRORCORR_NotGenerated (0x0UL)
  #define MRAMC_EVENTS_ECCERRORCORR_EVENTS_ECCERRORCORR_Generated (0x1UL)


/* MRAMC_EVENTS_TRIMCONFIGREQ: MRAM trim configuration request. The MRAMC is ready for the MRAM trim configuration. */
  #define MRAMC_EVENTS_TRIMCONFIGREQ_ResetValue (0x00000000UL)

/* EVENTS_TRIMCONFIGREQ @Bit 0 : MRAM trim configuration request. The MRAMC is ready for the MRAM trim configuration. */
  #define MRAMC_EVENTS_TRIMCONFIGREQ_EVENTS_TRIMCONFIGREQ_Pos (0UL)
  #define MRAMC_EVENTS_TRIMCONFIGREQ_EVENTS_TRIMCONFIGREQ_Msk (0x1UL << MRAMC_EVENTS_TRIMCONFIGREQ_EVENTS_TRIMCONFIGREQ_Pos)
                                                                            /*!< Bit mask of EVENTS_TRIMCONFIGREQ field.*/
  #define MRAMC_EVENTS_TRIMCONFIGREQ_EVENTS_TRIMCONFIGREQ_Min (0x0UL)
  #define MRAMC_EVENTS_TRIMCONFIGREQ_EVENTS_TRIMCONFIGREQ_Max (0x1UL)
  #define MRAMC_EVENTS_TRIMCONFIGREQ_EVENTS_TRIMCONFIGREQ_NotGenerated (0x0UL)
  #define MRAMC_EVENTS_TRIMCONFIGREQ_EVENTS_TRIMCONFIGREQ_Generated (0x1UL)


/* MRAMC_EVENTS_ACCESSERR: MRAM access error. */
  #define MRAMC_EVENTS_ACCESSERR_ResetValue (0x00000000UL)

/* EVENTS_ACCESSERR @Bit 0 : MRAM access error. */
  #define MRAMC_EVENTS_ACCESSERR_EVENTS_ACCESSERR_Pos (0UL)
  #define MRAMC_EVENTS_ACCESSERR_EVENTS_ACCESSERR_Msk (0x1UL << MRAMC_EVENTS_ACCESSERR_EVENTS_ACCESSERR_Pos) /*!< Bit mask of
                                                                            EVENTS_ACCESSERR field.*/
  #define MRAMC_EVENTS_ACCESSERR_EVENTS_ACCESSERR_Min (0x0UL)
  #define MRAMC_EVENTS_ACCESSERR_EVENTS_ACCESSERR_Max (0x1UL)
  #define MRAMC_EVENTS_ACCESSERR_EVENTS_ACCESSERR_NotGenerated (0x0UL)
  #define MRAMC_EVENTS_ACCESSERR_EVENTS_ACCESSERR_Generated (0x1UL)


/* MRAMC_INTEN: Enable or disable interrupt */
  #define MRAMC_INTEN_ResetValue (0x00000000UL)

/* READY @Bit 0 : Enable or disable interrupt for event READY */
  #define MRAMC_INTEN_READY_Pos (0UL)
  #define MRAMC_INTEN_READY_Msk (0x1UL << MRAMC_INTEN_READY_Pos)
  #define MRAMC_INTEN_READY_Min (0x0UL)
  #define MRAMC_INTEN_READY_Max (0x1UL)
  #define MRAMC_INTEN_READY_Disabled (0x0UL)
  #define MRAMC_INTEN_READY_Enabled (0x1UL)

/* READYNEXT @Bit 1 : Enable or disable interrupt for event READYNEXT */
  #define MRAMC_INTEN_READYNEXT_Pos (1UL)
  #define MRAMC_INTEN_READYNEXT_Msk (0x1UL << MRAMC_INTEN_READYNEXT_Pos)
  #define MRAMC_INTEN_READYNEXT_Min (0x0UL)
  #define MRAMC_INTEN_READYNEXT_Max (0x1UL)
  #define MRAMC_INTEN_READYNEXT_Disabled (0x0UL)
  #define MRAMC_INTEN_READYNEXT_Enabled (0x1UL)

/* ECCERROR @Bit 2 : Enable or disable interrupt for event ECCERROR */
  #define MRAMC_INTEN_ECCERROR_Pos (2UL)
  #define MRAMC_INTEN_ECCERROR_Msk (0x1UL << MRAMC_INTEN_ECCERROR_Pos)
  #define MRAMC_INTEN_ECCERROR_Min (0x0UL)
  #define MRAMC_INTEN_ECCERROR_Max (0x1UL)
  #define MRAMC_INTEN_ECCERROR_Disabled (0x0UL)
  #define MRAMC_INTEN_ECCERROR_Enabled (0x1UL)

/* ECCERRORCORR @Bit 3 : Enable or disable interrupt for event ECCERRORCORR */
  #define MRAMC_INTEN_ECCERRORCORR_Pos (3UL)
  #define MRAMC_INTEN_ECCERRORCORR_Msk (0x1UL << MRAMC_INTEN_ECCERRORCORR_Pos)
  #define MRAMC_INTEN_ECCERRORCORR_Min (0x0UL)
  #define MRAMC_INTEN_ECCERRORCORR_Max (0x1UL)
  #define MRAMC_INTEN_ECCERRORCORR_Disabled (0x0UL)
  #define MRAMC_INTEN_ECCERRORCORR_Enabled (0x1UL)

/* TRIMCONFIGREQ @Bit 4 : Enable or disable interrupt for event TRIMCONFIGREQ */
  #define MRAMC_INTEN_TRIMCONFIGREQ_Pos (4UL)
  #define MRAMC_INTEN_TRIMCONFIGREQ_Msk (0x1UL << MRAMC_INTEN_TRIMCONFIGREQ_Pos)
  #define MRAMC_INTEN_TRIMCONFIGREQ_Min (0x0UL)
  #define MRAMC_INTEN_TRIMCONFIGREQ_Max (0x1UL)
  #define MRAMC_INTEN_TRIMCONFIGREQ_Disabled (0x0UL)
  #define MRAMC_INTEN_TRIMCONFIGREQ_Enabled (0x1UL)

/* ACCESSERR @Bit 5 : Enable or disable interrupt for event ACCESSERR */
  #define MRAMC_INTEN_ACCESSERR_Pos (5UL)
  #define MRAMC_INTEN_ACCESSERR_Msk (0x1UL << MRAMC_INTEN_ACCESSERR_Pos)
  #define MRAMC_INTEN_ACCESSERR_Min (0x0UL)
  #define MRAMC_INTEN_ACCESSERR_Max (0x1UL)
  #define MRAMC_INTEN_ACCESSERR_Disabled (0x0UL)
  #define MRAMC_INTEN_ACCESSERR_Enabled (0x1UL)


/* MRAMC_INTENSET: Enable interrupt */
  #define MRAMC_INTENSET_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to enable interrupt for event READY */
  #define MRAMC_INTENSET_READY_Pos (0UL)
  #define MRAMC_INTENSET_READY_Msk (0x1UL << MRAMC_INTENSET_READY_Pos)
  #define MRAMC_INTENSET_READY_Min (0x0UL)
  #define MRAMC_INTENSET_READY_Max (0x1UL)
  #define MRAMC_INTENSET_READY_Set (0x1UL)
  #define MRAMC_INTENSET_READY_Disabled (0x0UL)
  #define MRAMC_INTENSET_READY_Enabled (0x1UL)

/* READYNEXT @Bit 1 : Write '1' to enable interrupt for event READYNEXT */
  #define MRAMC_INTENSET_READYNEXT_Pos (1UL)
  #define MRAMC_INTENSET_READYNEXT_Msk (0x1UL << MRAMC_INTENSET_READYNEXT_Pos)
  #define MRAMC_INTENSET_READYNEXT_Min (0x0UL)
  #define MRAMC_INTENSET_READYNEXT_Max (0x1UL)
  #define MRAMC_INTENSET_READYNEXT_Set (0x1UL)
  #define MRAMC_INTENSET_READYNEXT_Disabled (0x0UL)
  #define MRAMC_INTENSET_READYNEXT_Enabled (0x1UL)

/* ECCERROR @Bit 2 : Write '1' to enable interrupt for event ECCERROR */
  #define MRAMC_INTENSET_ECCERROR_Pos (2UL)
  #define MRAMC_INTENSET_ECCERROR_Msk (0x1UL << MRAMC_INTENSET_ECCERROR_Pos)
  #define MRAMC_INTENSET_ECCERROR_Min (0x0UL)
  #define MRAMC_INTENSET_ECCERROR_Max (0x1UL)
  #define MRAMC_INTENSET_ECCERROR_Set (0x1UL)
  #define MRAMC_INTENSET_ECCERROR_Disabled (0x0UL)
  #define MRAMC_INTENSET_ECCERROR_Enabled (0x1UL)

/* ECCERRORCORR @Bit 3 : Write '1' to enable interrupt for event ECCERRORCORR */
  #define MRAMC_INTENSET_ECCERRORCORR_Pos (3UL)
  #define MRAMC_INTENSET_ECCERRORCORR_Msk (0x1UL << MRAMC_INTENSET_ECCERRORCORR_Pos)
  #define MRAMC_INTENSET_ECCERRORCORR_Min (0x0UL)
  #define MRAMC_INTENSET_ECCERRORCORR_Max (0x1UL)
  #define MRAMC_INTENSET_ECCERRORCORR_Set (0x1UL)
  #define MRAMC_INTENSET_ECCERRORCORR_Disabled (0x0UL)
  #define MRAMC_INTENSET_ECCERRORCORR_Enabled (0x1UL)

/* TRIMCONFIGREQ @Bit 4 : Write '1' to enable interrupt for event TRIMCONFIGREQ */
  #define MRAMC_INTENSET_TRIMCONFIGREQ_Pos (4UL)
  #define MRAMC_INTENSET_TRIMCONFIGREQ_Msk (0x1UL << MRAMC_INTENSET_TRIMCONFIGREQ_Pos)
  #define MRAMC_INTENSET_TRIMCONFIGREQ_Min (0x0UL)
  #define MRAMC_INTENSET_TRIMCONFIGREQ_Max (0x1UL)
  #define MRAMC_INTENSET_TRIMCONFIGREQ_Set (0x1UL)
  #define MRAMC_INTENSET_TRIMCONFIGREQ_Disabled (0x0UL)
  #define MRAMC_INTENSET_TRIMCONFIGREQ_Enabled (0x1UL)

/* ACCESSERR @Bit 5 : Write '1' to enable interrupt for event ACCESSERR */
  #define MRAMC_INTENSET_ACCESSERR_Pos (5UL)
  #define MRAMC_INTENSET_ACCESSERR_Msk (0x1UL << MRAMC_INTENSET_ACCESSERR_Pos)
  #define MRAMC_INTENSET_ACCESSERR_Min (0x0UL)
  #define MRAMC_INTENSET_ACCESSERR_Max (0x1UL)
  #define MRAMC_INTENSET_ACCESSERR_Set (0x1UL)
  #define MRAMC_INTENSET_ACCESSERR_Disabled (0x0UL)
  #define MRAMC_INTENSET_ACCESSERR_Enabled (0x1UL)


/* MRAMC_INTENCLR: Disable interrupt */
  #define MRAMC_INTENCLR_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to disable interrupt for event READY */
  #define MRAMC_INTENCLR_READY_Pos (0UL)
  #define MRAMC_INTENCLR_READY_Msk (0x1UL << MRAMC_INTENCLR_READY_Pos)
  #define MRAMC_INTENCLR_READY_Min (0x0UL)
  #define MRAMC_INTENCLR_READY_Max (0x1UL)
  #define MRAMC_INTENCLR_READY_Clear (0x1UL)
  #define MRAMC_INTENCLR_READY_Disabled (0x0UL)
  #define MRAMC_INTENCLR_READY_Enabled (0x1UL)

/* READYNEXT @Bit 1 : Write '1' to disable interrupt for event READYNEXT */
  #define MRAMC_INTENCLR_READYNEXT_Pos (1UL)
  #define MRAMC_INTENCLR_READYNEXT_Msk (0x1UL << MRAMC_INTENCLR_READYNEXT_Pos)
  #define MRAMC_INTENCLR_READYNEXT_Min (0x0UL)
  #define MRAMC_INTENCLR_READYNEXT_Max (0x1UL)
  #define MRAMC_INTENCLR_READYNEXT_Clear (0x1UL)
  #define MRAMC_INTENCLR_READYNEXT_Disabled (0x0UL)
  #define MRAMC_INTENCLR_READYNEXT_Enabled (0x1UL)

/* ECCERROR @Bit 2 : Write '1' to disable interrupt for event ECCERROR */
  #define MRAMC_INTENCLR_ECCERROR_Pos (2UL)
  #define MRAMC_INTENCLR_ECCERROR_Msk (0x1UL << MRAMC_INTENCLR_ECCERROR_Pos)
  #define MRAMC_INTENCLR_ECCERROR_Min (0x0UL)
  #define MRAMC_INTENCLR_ECCERROR_Max (0x1UL)
  #define MRAMC_INTENCLR_ECCERROR_Clear (0x1UL)
  #define MRAMC_INTENCLR_ECCERROR_Disabled (0x0UL)
  #define MRAMC_INTENCLR_ECCERROR_Enabled (0x1UL)

/* ECCERRORCORR @Bit 3 : Write '1' to disable interrupt for event ECCERRORCORR */
  #define MRAMC_INTENCLR_ECCERRORCORR_Pos (3UL)
  #define MRAMC_INTENCLR_ECCERRORCORR_Msk (0x1UL << MRAMC_INTENCLR_ECCERRORCORR_Pos)
  #define MRAMC_INTENCLR_ECCERRORCORR_Min (0x0UL)
  #define MRAMC_INTENCLR_ECCERRORCORR_Max (0x1UL)
  #define MRAMC_INTENCLR_ECCERRORCORR_Clear (0x1UL)
  #define MRAMC_INTENCLR_ECCERRORCORR_Disabled (0x0UL)
  #define MRAMC_INTENCLR_ECCERRORCORR_Enabled (0x1UL)

/* TRIMCONFIGREQ @Bit 4 : Write '1' to disable interrupt for event TRIMCONFIGREQ */
  #define MRAMC_INTENCLR_TRIMCONFIGREQ_Pos (4UL)
  #define MRAMC_INTENCLR_TRIMCONFIGREQ_Msk (0x1UL << MRAMC_INTENCLR_TRIMCONFIGREQ_Pos)
  #define MRAMC_INTENCLR_TRIMCONFIGREQ_Min (0x0UL)
  #define MRAMC_INTENCLR_TRIMCONFIGREQ_Max (0x1UL)
  #define MRAMC_INTENCLR_TRIMCONFIGREQ_Clear (0x1UL)
  #define MRAMC_INTENCLR_TRIMCONFIGREQ_Disabled (0x0UL)
  #define MRAMC_INTENCLR_TRIMCONFIGREQ_Enabled (0x1UL)

/* ACCESSERR @Bit 5 : Write '1' to disable interrupt for event ACCESSERR */
  #define MRAMC_INTENCLR_ACCESSERR_Pos (5UL)
  #define MRAMC_INTENCLR_ACCESSERR_Msk (0x1UL << MRAMC_INTENCLR_ACCESSERR_Pos)
  #define MRAMC_INTENCLR_ACCESSERR_Min (0x0UL)
  #define MRAMC_INTENCLR_ACCESSERR_Max (0x1UL)
  #define MRAMC_INTENCLR_ACCESSERR_Clear (0x1UL)
  #define MRAMC_INTENCLR_ACCESSERR_Disabled (0x0UL)
  #define MRAMC_INTENCLR_ACCESSERR_Enabled (0x1UL)


/* MRAMC_INTPEND: Pending interrupts */
  #define MRAMC_INTPEND_ResetValue (0x00000000UL)

/* READY @Bit 0 : Read pending status of interrupt for event READY */
  #define MRAMC_INTPEND_READY_Pos (0UL)
  #define MRAMC_INTPEND_READY_Msk (0x1UL << MRAMC_INTPEND_READY_Pos)
  #define MRAMC_INTPEND_READY_Min (0x0UL)
  #define MRAMC_INTPEND_READY_Max (0x1UL)
  #define MRAMC_INTPEND_READY_NotPending (0x0UL)
  #define MRAMC_INTPEND_READY_Pending (0x1UL)

/* READYNEXT @Bit 1 : Read pending status of interrupt for event READYNEXT */
  #define MRAMC_INTPEND_READYNEXT_Pos (1UL)
  #define MRAMC_INTPEND_READYNEXT_Msk (0x1UL << MRAMC_INTPEND_READYNEXT_Pos)
  #define MRAMC_INTPEND_READYNEXT_Min (0x0UL)
  #define MRAMC_INTPEND_READYNEXT_Max (0x1UL)
  #define MRAMC_INTPEND_READYNEXT_NotPending (0x0UL)
  #define MRAMC_INTPEND_READYNEXT_Pending (0x1UL)

/* ECCERROR @Bit 2 : Read pending status of interrupt for event ECCERROR */
  #define MRAMC_INTPEND_ECCERROR_Pos (2UL)
  #define MRAMC_INTPEND_ECCERROR_Msk (0x1UL << MRAMC_INTPEND_ECCERROR_Pos)
  #define MRAMC_INTPEND_ECCERROR_Min (0x0UL)
  #define MRAMC_INTPEND_ECCERROR_Max (0x1UL)
  #define MRAMC_INTPEND_ECCERROR_NotPending (0x0UL)
  #define MRAMC_INTPEND_ECCERROR_Pending (0x1UL)

/* ECCERRORCORR @Bit 3 : Read pending status of interrupt for event ECCERRORCORR */
  #define MRAMC_INTPEND_ECCERRORCORR_Pos (3UL)
  #define MRAMC_INTPEND_ECCERRORCORR_Msk (0x1UL << MRAMC_INTPEND_ECCERRORCORR_Pos)
  #define MRAMC_INTPEND_ECCERRORCORR_Min (0x0UL)
  #define MRAMC_INTPEND_ECCERRORCORR_Max (0x1UL)
  #define MRAMC_INTPEND_ECCERRORCORR_NotPending (0x0UL)
  #define MRAMC_INTPEND_ECCERRORCORR_Pending (0x1UL)

/* TRIMCONFIGREQ @Bit 4 : Read pending status of interrupt for event TRIMCONFIGREQ */
  #define MRAMC_INTPEND_TRIMCONFIGREQ_Pos (4UL)
  #define MRAMC_INTPEND_TRIMCONFIGREQ_Msk (0x1UL << MRAMC_INTPEND_TRIMCONFIGREQ_Pos)
  #define MRAMC_INTPEND_TRIMCONFIGREQ_Min (0x0UL)
  #define MRAMC_INTPEND_TRIMCONFIGREQ_Max (0x1UL)
  #define MRAMC_INTPEND_TRIMCONFIGREQ_NotPending (0x0UL)
  #define MRAMC_INTPEND_TRIMCONFIGREQ_Pending (0x1UL)

/* ACCESSERR @Bit 5 : Read pending status of interrupt for event ACCESSERR */
  #define MRAMC_INTPEND_ACCESSERR_Pos (5UL)
  #define MRAMC_INTPEND_ACCESSERR_Msk (0x1UL << MRAMC_INTPEND_ACCESSERR_Pos)
  #define MRAMC_INTPEND_ACCESSERR_Min (0x0UL)
  #define MRAMC_INTPEND_ACCESSERR_Max (0x1UL)
  #define MRAMC_INTPEND_ACCESSERR_NotPending (0x0UL)
  #define MRAMC_INTPEND_ACCESSERR_Pending (0x1UL)


/* MRAMC_READY: MRAMC current operation status. */
  #define MRAMC_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : MRAMC is ready or busy */
  #define MRAMC_READY_READY_Pos (0UL)
  #define MRAMC_READY_READY_Msk (0x1UL << MRAMC_READY_READY_Pos)
  #define MRAMC_READY_READY_Min (0x0UL)
  #define MRAMC_READY_READY_Max (0x1UL)
  #define MRAMC_READY_READY_Busy (0x0UL)
  #define MRAMC_READY_READY_Ready (0x1UL)


/* MRAMC_READYNEXT: Ready next flag. */
  #define MRAMC_READYNEXT_ResetValue (0x00000000UL)

/* READYNEXT @Bit 0 : MRAMC can accept a new write operation */
  #define MRAMC_READYNEXT_READYNEXT_Pos (0UL)
  #define MRAMC_READYNEXT_READYNEXT_Msk (0x1UL << MRAMC_READYNEXT_READYNEXT_Pos)
  #define MRAMC_READYNEXT_READYNEXT_Min (0x0UL)
  #define MRAMC_READYNEXT_READYNEXT_Max (0x1UL)
  #define MRAMC_READYNEXT_READYNEXT_Busy (0x0UL)
  #define MRAMC_READYNEXT_READYNEXT_Ready (0x1UL)


/* MRAMC_CONFIG: Configuration register */
  #define MRAMC_CONFIG_ResetValue (0x00000000UL)

/* WEN @Bits 0..1 : Write enable. */
  #define MRAMC_CONFIG_WEN_Pos (0UL)
  #define MRAMC_CONFIG_WEN_Msk (0x3UL << MRAMC_CONFIG_WEN_Pos)
  #define MRAMC_CONFIG_WEN_Min (0x0UL)
  #define MRAMC_CONFIG_WEN_Max (0x2UL)
  #define MRAMC_CONFIG_WEN_DisableWrite (0x0UL)
  #define MRAMC_CONFIG_WEN_EnableNormalWrite (0x1UL)
  #define MRAMC_CONFIG_WEN_EnableDirectWrite (0x2UL)

/* EEN @Bits 4..5 : Erase enable. */
  #define MRAMC_CONFIG_EEN_Pos (4UL)
  #define MRAMC_CONFIG_EEN_Msk (0x3UL << MRAMC_CONFIG_EEN_Pos)
  #define MRAMC_CONFIG_EEN_Min (0x0UL)
  #define MRAMC_CONFIG_EEN_Max (0x2UL)
  #define MRAMC_CONFIG_EEN_DisableErase (0x0UL)
  #define MRAMC_CONFIG_EEN_EnablePageErase (0x1UL)
  #define MRAMC_CONFIG_EEN_EnableWordErase (0x2UL)


/* MRAMC_AUTOREADMODE: Automatically disables the write and erases on timeout and enters into read mode. */
  #define MRAMC_AUTOREADMODE_ResetValue (0x00000000UL)

/* VALUE @Bits 0..11 : Timeout value to disable write and erase. */
  #define MRAMC_AUTOREADMODE_VALUE_Pos (0UL)
  #define MRAMC_AUTOREADMODE_VALUE_Msk (0xFFFUL << MRAMC_AUTOREADMODE_VALUE_Pos)
  #define MRAMC_AUTOREADMODE_VALUE_Min (0x000UL)
  #define MRAMC_AUTOREADMODE_VALUE_Max (0xFFFUL)


/* MRAMC_WAITSTATES: Waitstates for MRAM read access */
  #define MRAMC_WAITSTATES_ResetValue (0x00000000UL)

/* WAITSTATENUM @Bits 0..4 : Register to read the current number of waitstate for the MRAM access and set a new value */
  #define MRAMC_WAITSTATES_WAITSTATENUM_Pos (0UL)
  #define MRAMC_WAITSTATES_WAITSTATENUM_Msk (0x1FUL << MRAMC_WAITSTATES_WAITSTATENUM_Pos)
  #define MRAMC_WAITSTATES_WAITSTATENUM_Min (0x03UL)
  #define MRAMC_WAITSTATES_WAITSTATENUM_Max (0x1FUL)

/* KEY @Bits 16..31 : Key to enable the writing to this register. */
  #define MRAMC_WAITSTATES_KEY_Pos (16UL)
  #define MRAMC_WAITSTATES_KEY_Msk (0xFFFFUL << MRAMC_WAITSTATES_KEY_Pos)
  #define MRAMC_WAITSTATES_KEY_Min (0x0UL)
  #define MRAMC_WAITSTATES_KEY_Max (0xA66DUL)
  #define MRAMC_WAITSTATES_KEY_Disable (0x0000UL)
  #define MRAMC_WAITSTATES_KEY_Enable (0xA66DUL)


/* MRAMC_READYNEXTTIMEOUT: Preload timeout value for waiting for a next write */
  #define MRAMC_READYNEXTTIMEOUT_ResetValue (0x00000000UL)

/* VALUE @Bits 0..11 : Preload value */
  #define MRAMC_READYNEXTTIMEOUT_VALUE_Pos (0UL)
  #define MRAMC_READYNEXTTIMEOUT_VALUE_Msk (0xFFFUL << MRAMC_READYNEXTTIMEOUT_VALUE_Pos)
  #define MRAMC_READYNEXTTIMEOUT_VALUE_Min (0x000UL)
  #define MRAMC_READYNEXTTIMEOUT_VALUE_Max (0xFFFUL)

/* DW @Bit 31 : Triggers a write to MRAMC macro on the ready next timeout in direct write mode (CONFIG.WEN = 2) and some data
                written into the internal write buffer. */

  #define MRAMC_READYNEXTTIMEOUT_DW_Pos (31UL)
  #define MRAMC_READYNEXTTIMEOUT_DW_Msk (0x1UL << MRAMC_READYNEXTTIMEOUT_DW_Pos)
  #define MRAMC_READYNEXTTIMEOUT_DW_Min (0x0UL)
  #define MRAMC_READYNEXTTIMEOUT_DW_Max (0x1UL)
  #define MRAMC_READYNEXTTIMEOUT_DW_Disable (0x0UL)
  #define MRAMC_READYNEXTTIMEOUT_DW_Enable (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           MVDMA                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* =============================================== Struct MVDMA_EVENTS_SOURCE ================================================ */
/**
  * @brief EVENTS_SOURCE [MVDMA_EVENTS_SOURCE] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000000) Event indicating that a bus error has been received on
                                                                         the Source channel.*/
  __IOM uint32_t  SELECTJOBDONE;                     /*!< (@ 0x00000004) Event indicating that a job on the Source channel with
                                                                         EVENT_ENABLE active has been processed.*/
} NRF_MVDMA_EVENTS_SOURCE_Type;

/* MVDMA_EVENTS_SOURCE_BUSERROR: Event indicating that a bus error has been received on the Source channel. */
  #define MVDMA_EVENTS_SOURCE_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : Event indicating that a bus error has been received on the Source channel. */
  #define MVDMA_EVENTS_SOURCE_BUSERROR_BUSERROR_Pos (0UL)
  #define MVDMA_EVENTS_SOURCE_BUSERROR_BUSERROR_Msk (0x1UL << MVDMA_EVENTS_SOURCE_BUSERROR_BUSERROR_Pos) /*!< Bit mask of
                                                                            BUSERROR field.*/
  #define MVDMA_EVENTS_SOURCE_BUSERROR_BUSERROR_Min (0x0UL)
  #define MVDMA_EVENTS_SOURCE_BUSERROR_BUSERROR_Max (0x1UL)
  #define MVDMA_EVENTS_SOURCE_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define MVDMA_EVENTS_SOURCE_BUSERROR_BUSERROR_Generated (0x1UL)


/* MVDMA_EVENTS_SOURCE_SELECTJOBDONE: Event indicating that a job on the Source channel with EVENT_ENABLE active has been
                                       processed. */

  #define MVDMA_EVENTS_SOURCE_SELECTJOBDONE_ResetValue (0x00000000UL)

/* SELECTJOBDONE @Bit 0 : Event indicating that a job on the Source channel with EVENT_ENABLE active has been processed. */
  #define MVDMA_EVENTS_SOURCE_SELECTJOBDONE_SELECTJOBDONE_Pos (0UL)
  #define MVDMA_EVENTS_SOURCE_SELECTJOBDONE_SELECTJOBDONE_Msk (0x1UL << MVDMA_EVENTS_SOURCE_SELECTJOBDONE_SELECTJOBDONE_Pos)
                                                                            /*!< Bit mask of SELECTJOBDONE field.*/
  #define MVDMA_EVENTS_SOURCE_SELECTJOBDONE_SELECTJOBDONE_Min (0x0UL)
  #define MVDMA_EVENTS_SOURCE_SELECTJOBDONE_SELECTJOBDONE_Max (0x1UL)
  #define MVDMA_EVENTS_SOURCE_SELECTJOBDONE_SELECTJOBDONE_NotGenerated (0x0UL)
  #define MVDMA_EVENTS_SOURCE_SELECTJOBDONE_SELECTJOBDONE_Generated (0x1UL)



/* ================================================ Struct MVDMA_EVENTS_SINK ================================================= */
/**
  * @brief EVENTS_SINK [MVDMA_EVENTS_SINK] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000000) Event indicating that a bus error has been received on
                                                                         the Sink channel.*/
  __IOM uint32_t  SELECTJOBDONE;                     /*!< (@ 0x00000004) Event indicating that a job on the Sink channel with
                                                                         EVENT_ENABLE active has been processed.*/
} NRF_MVDMA_EVENTS_SINK_Type;

/* MVDMA_EVENTS_SINK_BUSERROR: Event indicating that a bus error has been received on the Sink channel. */
  #define MVDMA_EVENTS_SINK_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : Event indicating that a bus error has been received on the Sink channel. */
  #define MVDMA_EVENTS_SINK_BUSERROR_BUSERROR_Pos (0UL)
  #define MVDMA_EVENTS_SINK_BUSERROR_BUSERROR_Msk (0x1UL << MVDMA_EVENTS_SINK_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define MVDMA_EVENTS_SINK_BUSERROR_BUSERROR_Min (0x0UL)
  #define MVDMA_EVENTS_SINK_BUSERROR_BUSERROR_Max (0x1UL)
  #define MVDMA_EVENTS_SINK_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define MVDMA_EVENTS_SINK_BUSERROR_BUSERROR_Generated (0x1UL)


/* MVDMA_EVENTS_SINK_SELECTJOBDONE: Event indicating that a job on the Sink channel with EVENT_ENABLE active has been processed.
                                     */

  #define MVDMA_EVENTS_SINK_SELECTJOBDONE_ResetValue (0x00000000UL)

/* SELECTJOBDONE @Bit 0 : Event indicating that a job on the Sink channel with EVENT_ENABLE active has been processed. */
  #define MVDMA_EVENTS_SINK_SELECTJOBDONE_SELECTJOBDONE_Pos (0UL)
  #define MVDMA_EVENTS_SINK_SELECTJOBDONE_SELECTJOBDONE_Msk (0x1UL << MVDMA_EVENTS_SINK_SELECTJOBDONE_SELECTJOBDONE_Pos) /*!<
                                                                            Bit mask of SELECTJOBDONE field.*/
  #define MVDMA_EVENTS_SINK_SELECTJOBDONE_SELECTJOBDONE_Min (0x0UL)
  #define MVDMA_EVENTS_SINK_SELECTJOBDONE_SELECTJOBDONE_Max (0x1UL)
  #define MVDMA_EVENTS_SINK_SELECTJOBDONE_SELECTJOBDONE_NotGenerated (0x0UL)
  #define MVDMA_EVENTS_SINK_SELECTJOBDONE_SELECTJOBDONE_Generated (0x1UL)



/* =============================================== Struct MVDMA_PUBLISH_SOURCE =============================================== */
/**
  * @brief PUBLISH_SOURCE [MVDMA_PUBLISH_SOURCE] Publish configuration for events
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  SELECTJOBDONE;
} NRF_MVDMA_PUBLISH_SOURCE_Type;

/* MVDMA_PUBLISH_SOURCE_SELECTJOBDONE: Publish configuration for event SOURCE.SELECTJOBDONE */
  #define MVDMA_PUBLISH_SOURCE_SELECTJOBDONE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SOURCE.SELECTJOBDONE will publish to */
  #define MVDMA_PUBLISH_SOURCE_SELECTJOBDONE_CHIDX_Pos (0UL)
  #define MVDMA_PUBLISH_SOURCE_SELECTJOBDONE_CHIDX_Msk (0xFFUL << MVDMA_PUBLISH_SOURCE_SELECTJOBDONE_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define MVDMA_PUBLISH_SOURCE_SELECTJOBDONE_CHIDX_Min (0x00UL)
  #define MVDMA_PUBLISH_SOURCE_SELECTJOBDONE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define MVDMA_PUBLISH_SOURCE_SELECTJOBDONE_EN_Pos (31UL)
  #define MVDMA_PUBLISH_SOURCE_SELECTJOBDONE_EN_Msk (0x1UL << MVDMA_PUBLISH_SOURCE_SELECTJOBDONE_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define MVDMA_PUBLISH_SOURCE_SELECTJOBDONE_EN_Min (0x0UL)
  #define MVDMA_PUBLISH_SOURCE_SELECTJOBDONE_EN_Max (0x1UL)
  #define MVDMA_PUBLISH_SOURCE_SELECTJOBDONE_EN_Disabled (0x0UL)
  #define MVDMA_PUBLISH_SOURCE_SELECTJOBDONE_EN_Enabled (0x1UL)



/* ================================================ Struct MVDMA_PUBLISH_SINK ================================================ */
/**
  * @brief PUBLISH_SINK [MVDMA_PUBLISH_SINK] Publish configuration for events
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  SELECTJOBDONE;
} NRF_MVDMA_PUBLISH_SINK_Type;

/* MVDMA_PUBLISH_SINK_SELECTJOBDONE: Publish configuration for event SINK.SELECTJOBDONE */
  #define MVDMA_PUBLISH_SINK_SELECTJOBDONE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SINK.SELECTJOBDONE will publish to */
  #define MVDMA_PUBLISH_SINK_SELECTJOBDONE_CHIDX_Pos (0UL)
  #define MVDMA_PUBLISH_SINK_SELECTJOBDONE_CHIDX_Msk (0xFFUL << MVDMA_PUBLISH_SINK_SELECTJOBDONE_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define MVDMA_PUBLISH_SINK_SELECTJOBDONE_CHIDX_Min (0x00UL)
  #define MVDMA_PUBLISH_SINK_SELECTJOBDONE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define MVDMA_PUBLISH_SINK_SELECTJOBDONE_EN_Pos (31UL)
  #define MVDMA_PUBLISH_SINK_SELECTJOBDONE_EN_Msk (0x1UL << MVDMA_PUBLISH_SINK_SELECTJOBDONE_EN_Pos)
  #define MVDMA_PUBLISH_SINK_SELECTJOBDONE_EN_Min (0x0UL)
  #define MVDMA_PUBLISH_SINK_SELECTJOBDONE_EN_Max (0x1UL)
  #define MVDMA_PUBLISH_SINK_SELECTJOBDONE_EN_Disabled (0x0UL)
  #define MVDMA_PUBLISH_SINK_SELECTJOBDONE_EN_Enabled (0x1UL)



/* =================================================== Struct MVDMA_STATUS =================================================== */
/**
  * @brief STATUS [MVDMA_STATUS] MVDMA status registers.
  */
typedef struct {
  __IM  uint32_t  CRCRESULT;
  __IM  uint32_t  FIFO;                              /*!< (@ 0x00000004) Status of intermediate fifo: empty, not empty and full
                                                                         information available.*/
  __IM  uint32_t  ACTIVE;
} NRF_MVDMA_STATUS_Type;

/* MVDMA_STATUS_CRCRESULT: CRC checksum calculation result */
  #define MVDMA_STATUS_CRCRESULT_ResetValue (0x00000000UL)

/* CRC @Bits 0..31 : Result */
  #define MVDMA_STATUS_CRCRESULT_CRC_Pos (0UL)
  #define MVDMA_STATUS_CRCRESULT_CRC_Msk (0xFFFFFFFFUL << MVDMA_STATUS_CRCRESULT_CRC_Pos)


/* MVDMA_STATUS_FIFO: Status of intermediate fifo: empty, not empty and full information available. */
  #define MVDMA_STATUS_FIFO_ResetValue (0x00000000UL)

/* FIFOSTATUS @Bits 0..1 : Result */
  #define MVDMA_STATUS_FIFO_FIFOSTATUS_Pos (0UL)
  #define MVDMA_STATUS_FIFO_FIFOSTATUS_Msk (0x3UL << MVDMA_STATUS_FIFO_FIFOSTATUS_Pos)
  #define MVDMA_STATUS_FIFO_FIFOSTATUS_Min (0x0UL)
  #define MVDMA_STATUS_FIFO_FIFOSTATUS_Max (0x2UL)
  #define MVDMA_STATUS_FIFO_FIFOSTATUS_Empty (0x0UL)
  #define MVDMA_STATUS_FIFO_FIFOSTATUS_NotEmpty (0x1UL)
  #define MVDMA_STATUS_FIFO_FIFOSTATUS_Full (0x2UL)


/* MVDMA_STATUS_ACTIVE: Status of DMA transfer. */
  #define MVDMA_STATUS_ACTIVE_ResetValue (0x00000000UL)

/* ACTIVE @Bit 0 : DMA activity */
  #define MVDMA_STATUS_ACTIVE_ACTIVE_Pos (0UL)
  #define MVDMA_STATUS_ACTIVE_ACTIVE_Msk (0x1UL << MVDMA_STATUS_ACTIVE_ACTIVE_Pos)
  #define MVDMA_STATUS_ACTIVE_ACTIVE_Min (0x0UL)
  #define MVDMA_STATUS_ACTIVE_ACTIVE_Max (0x1UL)
  #define MVDMA_STATUS_ACTIVE_ACTIVE_Idle (0x0UL)
  #define MVDMA_STATUS_ACTIVE_ACTIVE_Active (0x1UL)



/* =================================================== Struct MVDMA_CONFIG =================================================== */
/**
  * @brief CONFIG [MVDMA_CONFIG] MVDMA configuration registers.
  */
typedef struct {
  __IOM uint32_t  MODE;
  __IOM uint32_t  AXIMODE;                           /*!< (@ 0x00000004) Mode that defines if the AXI bus is AXI or AXI-Lite
                                                                         (one-beat bursts)*/
} NRF_MVDMA_CONFIG_Type;

/* MVDMA_CONFIG_MODE: Configure MVDMA mode of operation. */
  #define MVDMA_CONFIG_MODE_ResetValue (0x00000000UL)

/* MODE @Bit 0 : (unspecified) */
  #define MVDMA_CONFIG_MODE_MODE_Pos (0UL)
  #define MVDMA_CONFIG_MODE_MODE_Msk (0x1UL << MVDMA_CONFIG_MODE_MODE_Pos)
  #define MVDMA_CONFIG_MODE_MODE_Min (0x0UL)
  #define MVDMA_CONFIG_MODE_MODE_Max (0x1UL)
  #define MVDMA_CONFIG_MODE_MODE_SingleMode (0x0UL)  /*!< Registers SOURCE.LISTPTR and SINK.LISTPTR contain start address of a
                                                          single job list.*/
  #define MVDMA_CONFIG_MODE_MODE_MultiMode (0x1UL)   /*!< Registers SOURCE.LISTPTR and SINK.LISTPTR contain start address of a
                                                          list of job list pointers in memory.*/


/* MVDMA_CONFIG_AXIMODE: Mode that defines if the AXI bus is AXI or AXI-Lite (one-beat bursts) */
  #define MVDMA_CONFIG_AXIMODE_ResetValue (0x00000000UL)

/* AXIMODE @Bit 0 : (unspecified) */
  #define MVDMA_CONFIG_AXIMODE_AXIMODE_Pos (0UL)
  #define MVDMA_CONFIG_AXIMODE_AXIMODE_Msk (0x1UL << MVDMA_CONFIG_AXIMODE_AXIMODE_Pos)
  #define MVDMA_CONFIG_AXIMODE_AXIMODE_Min (0x0UL)
  #define MVDMA_CONFIG_AXIMODE_AXIMODE_Max (0x1UL)
  #define MVDMA_CONFIG_AXIMODE_AXIMODE_AXI (0x0UL)
  #define MVDMA_CONFIG_AXIMODE_AXIMODE_AXILITE (0x1UL)



/* =================================================== Struct MVDMA_SOURCE =================================================== */
/**
  * @brief SOURCE [MVDMA_SOURCE] Source channel configuration and status.
  */
typedef struct {
  __IOM uint32_t  LISTPTR;                           /*!< (@ 0x00000000) Start address of Source job list or list of job list
                                                                         pointers, depending on value of CONFIG.MODE.*/
  __IM  uint32_t  BUSERROR;
  __IM  uint32_t  ADDRESS;                           /*!< (@ 0x00000008) Latest address being accessed on the Source channel.If
                                                                         a bus error occurs, these registers will contain the
                                                                         address that cause the error.*/
  __IM  uint32_t  JOBCOUNT;                          /*!< (@ 0x0000000C) Number of completed jobs in the current Source
                                                                         descriptor list. This resets to 0 when a new joblist is
                                                                         started.*/
} NRF_MVDMA_SOURCE_Type;

/* MVDMA_SOURCE_LISTPTR: Start address of Source job list or list of job list pointers, depending on value of CONFIG.MODE. */
  #define MVDMA_SOURCE_LISTPTR_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Source job descriptor list address. */
  #define MVDMA_SOURCE_LISTPTR_ADDRESS_Pos (0UL)
  #define MVDMA_SOURCE_LISTPTR_ADDRESS_Msk (0xFFFFFFFFUL << MVDMA_SOURCE_LISTPTR_ADDRESS_Pos)


/* MVDMA_SOURCE_BUSERROR: Source bus error status. */
  #define MVDMA_SOURCE_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bits 0..1 : Bus error type */
  #define MVDMA_SOURCE_BUSERROR_BUSERROR_Pos (0UL)
  #define MVDMA_SOURCE_BUSERROR_BUSERROR_Msk (0x3UL << MVDMA_SOURCE_BUSERROR_BUSERROR_Pos)
  #define MVDMA_SOURCE_BUSERROR_BUSERROR_Min (0x0UL)
  #define MVDMA_SOURCE_BUSERROR_BUSERROR_Max (0x2UL)
  #define MVDMA_SOURCE_BUSERROR_BUSERROR_NoError (0x0UL)
  #define MVDMA_SOURCE_BUSERROR_BUSERROR_ReadError (0x1UL) /*!< Error related to memory when reading joblist, or error related
                                                                to memory/register when reading data.*/
  #define MVDMA_SOURCE_BUSERROR_BUSERROR_ReadDecodeError (0x2UL) /*!< Error related to the joblist address when reading joblist,
                                                                      or error related to address when reading memory/register.*/


/* MVDMA_SOURCE_ADDRESS: Latest address being accessed on the Source channel.If a bus error occurs, these registers will contain
                          the address that cause the error. */

  #define MVDMA_SOURCE_ADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Source address */
  #define MVDMA_SOURCE_ADDRESS_ADDRESS_Pos (0UL)
  #define MVDMA_SOURCE_ADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << MVDMA_SOURCE_ADDRESS_ADDRESS_Pos)


/* MVDMA_SOURCE_JOBCOUNT: Number of completed jobs in the current Source descriptor list. This resets to 0 when a new joblist is
                           started. */

  #define MVDMA_SOURCE_JOBCOUNT_ResetValue (0x00000000UL)

/* COUNT @Bits 0..31 : Source job count */
  #define MVDMA_SOURCE_JOBCOUNT_COUNT_Pos (0UL)
  #define MVDMA_SOURCE_JOBCOUNT_COUNT_Msk (0xFFFFFFFFUL << MVDMA_SOURCE_JOBCOUNT_COUNT_Pos)



/* ==================================================== Struct MVDMA_SINK ==================================================== */
/**
  * @brief SINK [MVDMA_SINK] Sink channel configuration and status.
  */
typedef struct {
  __IOM uint32_t  LISTPTR;                           /*!< (@ 0x00000000) Start address of Sink job list or list of job list
                                                                         pointers, depending on value of CONFIG.MODE.*/
  __IM  uint32_t  BUSERROR;
  __IM  uint32_t  ADDRESS;                           /*!< (@ 0x00000008) Latest address being accessed on the Sink channel. If a
                                                                         bus error occurs, these registers will contain the
                                                                         address that cause the error.*/
  __IM  uint32_t  JOBCOUNT;                          /*!< (@ 0x0000000C) Number of completed jobs in the current Sink descriptor
                                                                         list. This resets to 0 when a new joblist is started.*/
} NRF_MVDMA_SINK_Type;

/* MVDMA_SINK_LISTPTR: Start address of Sink job list or list of job list pointers, depending on value of CONFIG.MODE. */
  #define MVDMA_SINK_LISTPTR_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Sink descriptor list address. */
  #define MVDMA_SINK_LISTPTR_ADDRESS_Pos (0UL)
  #define MVDMA_SINK_LISTPTR_ADDRESS_Msk (0xFFFFFFFFUL << MVDMA_SINK_LISTPTR_ADDRESS_Pos)


/* MVDMA_SINK_BUSERROR: Sink bus error status. */
  #define MVDMA_SINK_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bits 0..2 : Bus error type */
  #define MVDMA_SINK_BUSERROR_BUSERROR_Pos (0UL)
  #define MVDMA_SINK_BUSERROR_BUSERROR_Msk (0x7UL << MVDMA_SINK_BUSERROR_BUSERROR_Pos)
  #define MVDMA_SINK_BUSERROR_BUSERROR_Min (0x0UL)
  #define MVDMA_SINK_BUSERROR_BUSERROR_Max (0x4UL)
  #define MVDMA_SINK_BUSERROR_BUSERROR_NoError (0x0UL)
  #define MVDMA_SINK_BUSERROR_BUSERROR_ReadError (0x1UL)
  #define MVDMA_SINK_BUSERROR_BUSERROR_ReadDecodeError (0x2UL)
  #define MVDMA_SINK_BUSERROR_BUSERROR_WriteError (0x3UL)
  #define MVDMA_SINK_BUSERROR_BUSERROR_WriteDecodeError (0x4UL) /*!< Error related to the memory/register address when writing
                                                                     data.*/


/* MVDMA_SINK_ADDRESS: Latest address being accessed on the Sink channel. If a bus error occurs, these registers will contain
                        the address that cause the error. */

  #define MVDMA_SINK_ADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Sink address */
  #define MVDMA_SINK_ADDRESS_ADDRESS_Pos (0UL)
  #define MVDMA_SINK_ADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << MVDMA_SINK_ADDRESS_ADDRESS_Pos)


/* MVDMA_SINK_JOBCOUNT: Number of completed jobs in the current Sink descriptor list. This resets to 0 when a new joblist is
                         started. */

  #define MVDMA_SINK_JOBCOUNT_ResetValue (0x00000000UL)

/* COUNT @Bits 0..31 : Sink job count */
  #define MVDMA_SINK_JOBCOUNT_COUNT_Pos (0UL)
  #define MVDMA_SINK_JOBCOUNT_COUNT_Msk (0xFFFFFFFFUL << MVDMA_SINK_JOBCOUNT_COUNT_Pos)


/* ====================================================== Struct MVDMA ======================================================= */
/**
  * @brief MVDMA performs direct-memory-accesses between memories. Data is transferred according to job descriptor lists. Each
            transfer has corresponding source and sink descriptor lists with matching data amounts. The lists are in memory and
            they contain data buffer information, address pointers, buffer sizes and data type attributes.

  */
  typedef struct {
    __OM uint32_t TASKS_PAUSE;
    __OM uint32_t TASKS_RESET;
    __OM uint32_t TASKS_START[8];                    /*!< (@ 0x00000008) Start operation of job list n. Base address for
                                                                         successive TASKS_STARTs.*/
    __IM uint32_t RESERVED[24];
    __IOM uint32_t SUBSCRIBE_START[8];
    __IM uint32_t RESERVED1[22];
    __IOM uint32_t EVENTS_END;                       /*!< (@ 0x00000100) Event indicating that Sink data descriptor list has
                                                                         been completed.*/
    __IOM uint32_t EVENTS_STARTED;                   /*!< (@ 0x00000104) Event indicating that the source list processing has
                                                                         started.*/
    __IOM uint32_t EVENTS_PAUSED;                    /*!< (@ 0x00000108) Event indicating that the data transfer has been
                                                                         paused.*/
    __IOM uint32_t EVENTS_RESET;
    __IOM NRF_MVDMA_EVENTS_SOURCE_Type EVENTS_SOURCE;
    __IOM NRF_MVDMA_EVENTS_SINK_Type EVENTS_SINK;
    __IOM uint32_t EVENTS_COMPLETED[8];              /*!< (@ 0x00000120) Event indicating that the operation started by the task
                                                                         START[n] has been completed. Base address for
                                                                         successive EVENTS_COMPLETED.*/
    __IM uint32_t RESERVED2[16];
    __IOM uint32_t PUBLISH_END;
    __IM uint32_t RESERVED3[3];
    __IOM NRF_MVDMA_PUBLISH_SOURCE_Type PUBLISH_SOURCE;
    __IOM NRF_MVDMA_PUBLISH_SINK_Type PUBLISH_SINK;
    __IOM uint32_t PUBLISH_COMPLETED[8];
    __IM uint32_t RESERVED4[80];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED5[60];
    __IOM NRF_MVDMA_STATUS_Type STATUS;
    __IM uint32_t RESERVED6[61];
    __IOM NRF_MVDMA_CONFIG_Type CONFIG;
    __IM uint32_t RESERVED7[62];
    __IOM NRF_MVDMA_SOURCE_Type SOURCE;
    __IM uint32_t RESERVED8[4];
    __IOM NRF_MVDMA_SINK_Type SINK;
  } NRF_MVDMA_Type;

/* MVDMA_TASKS_PAUSE: Pause operation. */
  #define MVDMA_TASKS_PAUSE_ResetValue (0x00000000UL)

/* TASKS_PAUSE @Bit 0 : Pause operation. */
  #define MVDMA_TASKS_PAUSE_TASKS_PAUSE_Pos (0UL)
  #define MVDMA_TASKS_PAUSE_TASKS_PAUSE_Msk (0x1UL << MVDMA_TASKS_PAUSE_TASKS_PAUSE_Pos)
  #define MVDMA_TASKS_PAUSE_TASKS_PAUSE_Min (0x1UL)
  #define MVDMA_TASKS_PAUSE_TASKS_PAUSE_Max (0x1UL)
  #define MVDMA_TASKS_PAUSE_TASKS_PAUSE_Trigger (0x1UL)


/* MVDMA_TASKS_RESET: Reset operation. */
  #define MVDMA_TASKS_RESET_ResetValue (0x00000000UL)

/* TASKS_RESET @Bit 0 : Reset operation. */
  #define MVDMA_TASKS_RESET_TASKS_RESET_Pos (0UL)
  #define MVDMA_TASKS_RESET_TASKS_RESET_Msk (0x1UL << MVDMA_TASKS_RESET_TASKS_RESET_Pos)
  #define MVDMA_TASKS_RESET_TASKS_RESET_Min (0x1UL)
  #define MVDMA_TASKS_RESET_TASKS_RESET_Max (0x1UL)
  #define MVDMA_TASKS_RESET_TASKS_RESET_Trigger (0x1UL)


/* MVDMA_TASKS_START: Start operation of job list n. Base address for successive TASKS_STARTs. */
  #define MVDMA_TASKS_START_MaxCount (8UL)
  #define MVDMA_TASKS_START_MaxIndex (7UL)
  #define MVDMA_TASKS_START_MinIndex (0UL)
  #define MVDMA_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start operation of job list n. Base address for successive TASKS_STARTs. */
  #define MVDMA_TASKS_START_TASKS_START_Pos (0UL)
  #define MVDMA_TASKS_START_TASKS_START_Msk (0x1UL << MVDMA_TASKS_START_TASKS_START_Pos)
  #define MVDMA_TASKS_START_TASKS_START_Min (0x1UL)
  #define MVDMA_TASKS_START_TASKS_START_Max (0x1UL)
  #define MVDMA_TASKS_START_TASKS_START_Trigger (0x1UL)


/* MVDMA_SUBSCRIBE_START: Subscribe configuration for task START[n] */
  #define MVDMA_SUBSCRIBE_START_MaxCount (8UL)
  #define MVDMA_SUBSCRIBE_START_MaxIndex (7UL)
  #define MVDMA_SUBSCRIBE_START_MinIndex (0UL)
  #define MVDMA_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START[n] will subscribe to */
  #define MVDMA_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define MVDMA_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << MVDMA_SUBSCRIBE_START_CHIDX_Pos)
  #define MVDMA_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define MVDMA_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define MVDMA_SUBSCRIBE_START_EN_Pos (31UL)
  #define MVDMA_SUBSCRIBE_START_EN_Msk (0x1UL << MVDMA_SUBSCRIBE_START_EN_Pos)
  #define MVDMA_SUBSCRIBE_START_EN_Min (0x0UL)
  #define MVDMA_SUBSCRIBE_START_EN_Max (0x1UL)
  #define MVDMA_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define MVDMA_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* MVDMA_EVENTS_END: Event indicating that Sink data descriptor list has been completed. */
  #define MVDMA_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : Event indicating that Sink data descriptor list has been completed. */
  #define MVDMA_EVENTS_END_EVENTS_END_Pos (0UL)
  #define MVDMA_EVENTS_END_EVENTS_END_Msk (0x1UL << MVDMA_EVENTS_END_EVENTS_END_Pos)
  #define MVDMA_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define MVDMA_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define MVDMA_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define MVDMA_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* MVDMA_EVENTS_STARTED: Event indicating that the source list processing has started. */
  #define MVDMA_EVENTS_STARTED_ResetValue (0x00000000UL)

/* EVENTS_STARTED @Bit 0 : Event indicating that the source list processing has started. */
  #define MVDMA_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL)
  #define MVDMA_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << MVDMA_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_STARTED field.*/
  #define MVDMA_EVENTS_STARTED_EVENTS_STARTED_Min (0x0UL)
  #define MVDMA_EVENTS_STARTED_EVENTS_STARTED_Max (0x1UL)
  #define MVDMA_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0x0UL)
  #define MVDMA_EVENTS_STARTED_EVENTS_STARTED_Generated (0x1UL)


/* MVDMA_EVENTS_PAUSED: Event indicating that the data transfer has been paused. */
  #define MVDMA_EVENTS_PAUSED_ResetValue (0x00000000UL)

/* EVENTS_PAUSED @Bit 0 : Event indicating that the data transfer has been paused. */
  #define MVDMA_EVENTS_PAUSED_EVENTS_PAUSED_Pos (0UL)
  #define MVDMA_EVENTS_PAUSED_EVENTS_PAUSED_Msk (0x1UL << MVDMA_EVENTS_PAUSED_EVENTS_PAUSED_Pos) /*!< Bit mask of EVENTS_PAUSED
                                                                            field.*/
  #define MVDMA_EVENTS_PAUSED_EVENTS_PAUSED_Min (0x0UL)
  #define MVDMA_EVENTS_PAUSED_EVENTS_PAUSED_Max (0x1UL)
  #define MVDMA_EVENTS_PAUSED_EVENTS_PAUSED_NotGenerated (0x0UL)
  #define MVDMA_EVENTS_PAUSED_EVENTS_PAUSED_Generated (0x1UL)


/* MVDMA_EVENTS_RESET: Event indicating that the peripheral has been reset. */
  #define MVDMA_EVENTS_RESET_ResetValue (0x00000000UL)

/* EVENTS_RESET @Bit 0 : Event indicating that the peripheral has been reset. */
  #define MVDMA_EVENTS_RESET_EVENTS_RESET_Pos (0UL)
  #define MVDMA_EVENTS_RESET_EVENTS_RESET_Msk (0x1UL << MVDMA_EVENTS_RESET_EVENTS_RESET_Pos) /*!< Bit mask of EVENTS_RESET
                                                                            field.*/
  #define MVDMA_EVENTS_RESET_EVENTS_RESET_Min (0x0UL)
  #define MVDMA_EVENTS_RESET_EVENTS_RESET_Max (0x1UL)
  #define MVDMA_EVENTS_RESET_EVENTS_RESET_NotGenerated (0x0UL)
  #define MVDMA_EVENTS_RESET_EVENTS_RESET_Generated (0x1UL)


/* MVDMA_EVENTS_COMPLETED: Event indicating that the operation started by the task START[n] has been completed. Base address for
                            successive EVENTS_COMPLETED. */

  #define MVDMA_EVENTS_COMPLETED_MaxCount (8UL)
  #define MVDMA_EVENTS_COMPLETED_MaxIndex (7UL)
  #define MVDMA_EVENTS_COMPLETED_MinIndex (0UL)
  #define MVDMA_EVENTS_COMPLETED_ResetValue (0x00000000UL)

/* EVENTS_COMPLETED @Bit 0 : Event indicating that the operation started by the task START[n] has been completed. Base address
                             for successive EVENTS_COMPLETED. */

  #define MVDMA_EVENTS_COMPLETED_EVENTS_COMPLETED_Pos (0UL)
  #define MVDMA_EVENTS_COMPLETED_EVENTS_COMPLETED_Msk (0x1UL << MVDMA_EVENTS_COMPLETED_EVENTS_COMPLETED_Pos) /*!< Bit mask of
                                                                            EVENTS_COMPLETED field.*/
  #define MVDMA_EVENTS_COMPLETED_EVENTS_COMPLETED_Min (0x0UL)
  #define MVDMA_EVENTS_COMPLETED_EVENTS_COMPLETED_Max (0x1UL)
  #define MVDMA_EVENTS_COMPLETED_EVENTS_COMPLETED_NotGenerated (0x0UL)
  #define MVDMA_EVENTS_COMPLETED_EVENTS_COMPLETED_Generated (0x1UL)


/* MVDMA_PUBLISH_END: Publish configuration for event END */
  #define MVDMA_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define MVDMA_PUBLISH_END_CHIDX_Pos (0UL)
  #define MVDMA_PUBLISH_END_CHIDX_Msk (0xFFUL << MVDMA_PUBLISH_END_CHIDX_Pos)
  #define MVDMA_PUBLISH_END_CHIDX_Min (0x00UL)
  #define MVDMA_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define MVDMA_PUBLISH_END_EN_Pos (31UL)
  #define MVDMA_PUBLISH_END_EN_Msk (0x1UL << MVDMA_PUBLISH_END_EN_Pos)
  #define MVDMA_PUBLISH_END_EN_Min (0x0UL)
  #define MVDMA_PUBLISH_END_EN_Max (0x1UL)
  #define MVDMA_PUBLISH_END_EN_Disabled (0x0UL)
  #define MVDMA_PUBLISH_END_EN_Enabled (0x1UL)


/* MVDMA_PUBLISH_COMPLETED: Publish configuration for event COMPLETED[n] */
  #define MVDMA_PUBLISH_COMPLETED_MaxCount (8UL)
  #define MVDMA_PUBLISH_COMPLETED_MaxIndex (7UL)
  #define MVDMA_PUBLISH_COMPLETED_MinIndex (0UL)
  #define MVDMA_PUBLISH_COMPLETED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event COMPLETED[n] will publish to */
  #define MVDMA_PUBLISH_COMPLETED_CHIDX_Pos (0UL)
  #define MVDMA_PUBLISH_COMPLETED_CHIDX_Msk (0xFFUL << MVDMA_PUBLISH_COMPLETED_CHIDX_Pos)
  #define MVDMA_PUBLISH_COMPLETED_CHIDX_Min (0x00UL)
  #define MVDMA_PUBLISH_COMPLETED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define MVDMA_PUBLISH_COMPLETED_EN_Pos (31UL)
  #define MVDMA_PUBLISH_COMPLETED_EN_Msk (0x1UL << MVDMA_PUBLISH_COMPLETED_EN_Pos)
  #define MVDMA_PUBLISH_COMPLETED_EN_Min (0x0UL)
  #define MVDMA_PUBLISH_COMPLETED_EN_Max (0x1UL)
  #define MVDMA_PUBLISH_COMPLETED_EN_Disabled (0x0UL)
  #define MVDMA_PUBLISH_COMPLETED_EN_Enabled (0x1UL)


/* MVDMA_INTEN: Enable or disable interrupt */
  #define MVDMA_INTEN_ResetValue (0x00000000UL)

/* END @Bit 0 : Enable or disable interrupt for event END */
  #define MVDMA_INTEN_END_Pos (0UL)
  #define MVDMA_INTEN_END_Msk (0x1UL << MVDMA_INTEN_END_Pos)
  #define MVDMA_INTEN_END_Min (0x0UL)
  #define MVDMA_INTEN_END_Max (0x1UL)
  #define MVDMA_INTEN_END_Disabled (0x0UL)
  #define MVDMA_INTEN_END_Enabled (0x1UL)

/* STARTED @Bit 1 : Enable or disable interrupt for event STARTED */
  #define MVDMA_INTEN_STARTED_Pos (1UL)
  #define MVDMA_INTEN_STARTED_Msk (0x1UL << MVDMA_INTEN_STARTED_Pos)
  #define MVDMA_INTEN_STARTED_Min (0x0UL)
  #define MVDMA_INTEN_STARTED_Max (0x1UL)
  #define MVDMA_INTEN_STARTED_Disabled (0x0UL)
  #define MVDMA_INTEN_STARTED_Enabled (0x1UL)

/* PAUSED @Bit 2 : Enable or disable interrupt for event PAUSED */
  #define MVDMA_INTEN_PAUSED_Pos (2UL)
  #define MVDMA_INTEN_PAUSED_Msk (0x1UL << MVDMA_INTEN_PAUSED_Pos)
  #define MVDMA_INTEN_PAUSED_Min (0x0UL)
  #define MVDMA_INTEN_PAUSED_Max (0x1UL)
  #define MVDMA_INTEN_PAUSED_Disabled (0x0UL)
  #define MVDMA_INTEN_PAUSED_Enabled (0x1UL)

/* RESET @Bit 3 : Enable or disable interrupt for event RESET */
  #define MVDMA_INTEN_RESET_Pos (3UL)
  #define MVDMA_INTEN_RESET_Msk (0x1UL << MVDMA_INTEN_RESET_Pos)
  #define MVDMA_INTEN_RESET_Min (0x0UL)
  #define MVDMA_INTEN_RESET_Max (0x1UL)
  #define MVDMA_INTEN_RESET_Disabled (0x0UL)
  #define MVDMA_INTEN_RESET_Enabled (0x1UL)

/* SOURCEBUSERROR @Bit 4 : Enable or disable interrupt for event SOURCEBUSERROR */
  #define MVDMA_INTEN_SOURCEBUSERROR_Pos (4UL)
  #define MVDMA_INTEN_SOURCEBUSERROR_Msk (0x1UL << MVDMA_INTEN_SOURCEBUSERROR_Pos)
  #define MVDMA_INTEN_SOURCEBUSERROR_Min (0x0UL)
  #define MVDMA_INTEN_SOURCEBUSERROR_Max (0x1UL)
  #define MVDMA_INTEN_SOURCEBUSERROR_Disabled (0x0UL)
  #define MVDMA_INTEN_SOURCEBUSERROR_Enabled (0x1UL)

/* SOURCESELECTJOBDONE @Bit 5 : Enable or disable interrupt for event SOURCESELECTJOBDONE */
  #define MVDMA_INTEN_SOURCESELECTJOBDONE_Pos (5UL)
  #define MVDMA_INTEN_SOURCESELECTJOBDONE_Msk (0x1UL << MVDMA_INTEN_SOURCESELECTJOBDONE_Pos) /*!< Bit mask of
                                                                            SOURCESELECTJOBDONE field.*/
  #define MVDMA_INTEN_SOURCESELECTJOBDONE_Min (0x0UL)
  #define MVDMA_INTEN_SOURCESELECTJOBDONE_Max (0x1UL)
  #define MVDMA_INTEN_SOURCESELECTJOBDONE_Disabled (0x0UL)
  #define MVDMA_INTEN_SOURCESELECTJOBDONE_Enabled (0x1UL)

/* SINKBUSERROR @Bit 6 : Enable or disable interrupt for event SINKBUSERROR */
  #define MVDMA_INTEN_SINKBUSERROR_Pos (6UL)
  #define MVDMA_INTEN_SINKBUSERROR_Msk (0x1UL << MVDMA_INTEN_SINKBUSERROR_Pos)
  #define MVDMA_INTEN_SINKBUSERROR_Min (0x0UL)
  #define MVDMA_INTEN_SINKBUSERROR_Max (0x1UL)
  #define MVDMA_INTEN_SINKBUSERROR_Disabled (0x0UL)
  #define MVDMA_INTEN_SINKBUSERROR_Enabled (0x1UL)

/* SINKSELECTJOBDONE @Bit 7 : Enable or disable interrupt for event SINKSELECTJOBDONE */
  #define MVDMA_INTEN_SINKSELECTJOBDONE_Pos (7UL)
  #define MVDMA_INTEN_SINKSELECTJOBDONE_Msk (0x1UL << MVDMA_INTEN_SINKSELECTJOBDONE_Pos) /*!< Bit mask of SINKSELECTJOBDONE
                                                                            field.*/
  #define MVDMA_INTEN_SINKSELECTJOBDONE_Min (0x0UL)
  #define MVDMA_INTEN_SINKSELECTJOBDONE_Max (0x1UL)
  #define MVDMA_INTEN_SINKSELECTJOBDONE_Disabled (0x0UL)
  #define MVDMA_INTEN_SINKSELECTJOBDONE_Enabled (0x1UL)

/* COMPLETED0 @Bit 8 : Enable or disable interrupt for event COMPLETED[0] */
  #define MVDMA_INTEN_COMPLETED0_Pos (8UL)
  #define MVDMA_INTEN_COMPLETED0_Msk (0x1UL << MVDMA_INTEN_COMPLETED0_Pos)
  #define MVDMA_INTEN_COMPLETED0_Min (0x0UL)
  #define MVDMA_INTEN_COMPLETED0_Max (0x1UL)
  #define MVDMA_INTEN_COMPLETED0_Disabled (0x0UL)
  #define MVDMA_INTEN_COMPLETED0_Enabled (0x1UL)

/* COMPLETED1 @Bit 9 : Enable or disable interrupt for event COMPLETED[1] */
  #define MVDMA_INTEN_COMPLETED1_Pos (9UL)
  #define MVDMA_INTEN_COMPLETED1_Msk (0x1UL << MVDMA_INTEN_COMPLETED1_Pos)
  #define MVDMA_INTEN_COMPLETED1_Min (0x0UL)
  #define MVDMA_INTEN_COMPLETED1_Max (0x1UL)
  #define MVDMA_INTEN_COMPLETED1_Disabled (0x0UL)
  #define MVDMA_INTEN_COMPLETED1_Enabled (0x1UL)

/* COMPLETED2 @Bit 10 : Enable or disable interrupt for event COMPLETED[2] */
  #define MVDMA_INTEN_COMPLETED2_Pos (10UL)
  #define MVDMA_INTEN_COMPLETED2_Msk (0x1UL << MVDMA_INTEN_COMPLETED2_Pos)
  #define MVDMA_INTEN_COMPLETED2_Min (0x0UL)
  #define MVDMA_INTEN_COMPLETED2_Max (0x1UL)
  #define MVDMA_INTEN_COMPLETED2_Disabled (0x0UL)
  #define MVDMA_INTEN_COMPLETED2_Enabled (0x1UL)

/* COMPLETED3 @Bit 11 : Enable or disable interrupt for event COMPLETED[3] */
  #define MVDMA_INTEN_COMPLETED3_Pos (11UL)
  #define MVDMA_INTEN_COMPLETED3_Msk (0x1UL << MVDMA_INTEN_COMPLETED3_Pos)
  #define MVDMA_INTEN_COMPLETED3_Min (0x0UL)
  #define MVDMA_INTEN_COMPLETED3_Max (0x1UL)
  #define MVDMA_INTEN_COMPLETED3_Disabled (0x0UL)
  #define MVDMA_INTEN_COMPLETED3_Enabled (0x1UL)

/* COMPLETED4 @Bit 12 : Enable or disable interrupt for event COMPLETED[4] */
  #define MVDMA_INTEN_COMPLETED4_Pos (12UL)
  #define MVDMA_INTEN_COMPLETED4_Msk (0x1UL << MVDMA_INTEN_COMPLETED4_Pos)
  #define MVDMA_INTEN_COMPLETED4_Min (0x0UL)
  #define MVDMA_INTEN_COMPLETED4_Max (0x1UL)
  #define MVDMA_INTEN_COMPLETED4_Disabled (0x0UL)
  #define MVDMA_INTEN_COMPLETED4_Enabled (0x1UL)

/* COMPLETED5 @Bit 13 : Enable or disable interrupt for event COMPLETED[5] */
  #define MVDMA_INTEN_COMPLETED5_Pos (13UL)
  #define MVDMA_INTEN_COMPLETED5_Msk (0x1UL << MVDMA_INTEN_COMPLETED5_Pos)
  #define MVDMA_INTEN_COMPLETED5_Min (0x0UL)
  #define MVDMA_INTEN_COMPLETED5_Max (0x1UL)
  #define MVDMA_INTEN_COMPLETED5_Disabled (0x0UL)
  #define MVDMA_INTEN_COMPLETED5_Enabled (0x1UL)

/* COMPLETED6 @Bit 14 : Enable or disable interrupt for event COMPLETED[6] */
  #define MVDMA_INTEN_COMPLETED6_Pos (14UL)
  #define MVDMA_INTEN_COMPLETED6_Msk (0x1UL << MVDMA_INTEN_COMPLETED6_Pos)
  #define MVDMA_INTEN_COMPLETED6_Min (0x0UL)
  #define MVDMA_INTEN_COMPLETED6_Max (0x1UL)
  #define MVDMA_INTEN_COMPLETED6_Disabled (0x0UL)
  #define MVDMA_INTEN_COMPLETED6_Enabled (0x1UL)

/* COMPLETED7 @Bit 15 : Enable or disable interrupt for event COMPLETED[7] */
  #define MVDMA_INTEN_COMPLETED7_Pos (15UL)
  #define MVDMA_INTEN_COMPLETED7_Msk (0x1UL << MVDMA_INTEN_COMPLETED7_Pos)
  #define MVDMA_INTEN_COMPLETED7_Min (0x0UL)
  #define MVDMA_INTEN_COMPLETED7_Max (0x1UL)
  #define MVDMA_INTEN_COMPLETED7_Disabled (0x0UL)
  #define MVDMA_INTEN_COMPLETED7_Enabled (0x1UL)


/* MVDMA_INTENSET: Enable interrupt */
  #define MVDMA_INTENSET_ResetValue (0x00000000UL)

/* END @Bit 0 : Write '1' to enable interrupt for event END */
  #define MVDMA_INTENSET_END_Pos (0UL)
  #define MVDMA_INTENSET_END_Msk (0x1UL << MVDMA_INTENSET_END_Pos)
  #define MVDMA_INTENSET_END_Min (0x0UL)
  #define MVDMA_INTENSET_END_Max (0x1UL)
  #define MVDMA_INTENSET_END_Set (0x1UL)
  #define MVDMA_INTENSET_END_Disabled (0x0UL)
  #define MVDMA_INTENSET_END_Enabled (0x1UL)

/* STARTED @Bit 1 : Write '1' to enable interrupt for event STARTED */
  #define MVDMA_INTENSET_STARTED_Pos (1UL)
  #define MVDMA_INTENSET_STARTED_Msk (0x1UL << MVDMA_INTENSET_STARTED_Pos)
  #define MVDMA_INTENSET_STARTED_Min (0x0UL)
  #define MVDMA_INTENSET_STARTED_Max (0x1UL)
  #define MVDMA_INTENSET_STARTED_Set (0x1UL)
  #define MVDMA_INTENSET_STARTED_Disabled (0x0UL)
  #define MVDMA_INTENSET_STARTED_Enabled (0x1UL)

/* PAUSED @Bit 2 : Write '1' to enable interrupt for event PAUSED */
  #define MVDMA_INTENSET_PAUSED_Pos (2UL)
  #define MVDMA_INTENSET_PAUSED_Msk (0x1UL << MVDMA_INTENSET_PAUSED_Pos)
  #define MVDMA_INTENSET_PAUSED_Min (0x0UL)
  #define MVDMA_INTENSET_PAUSED_Max (0x1UL)
  #define MVDMA_INTENSET_PAUSED_Set (0x1UL)
  #define MVDMA_INTENSET_PAUSED_Disabled (0x0UL)
  #define MVDMA_INTENSET_PAUSED_Enabled (0x1UL)

/* RESET @Bit 3 : Write '1' to enable interrupt for event RESET */
  #define MVDMA_INTENSET_RESET_Pos (3UL)
  #define MVDMA_INTENSET_RESET_Msk (0x1UL << MVDMA_INTENSET_RESET_Pos)
  #define MVDMA_INTENSET_RESET_Min (0x0UL)
  #define MVDMA_INTENSET_RESET_Max (0x1UL)
  #define MVDMA_INTENSET_RESET_Set (0x1UL)
  #define MVDMA_INTENSET_RESET_Disabled (0x0UL)
  #define MVDMA_INTENSET_RESET_Enabled (0x1UL)

/* SOURCEBUSERROR @Bit 4 : Write '1' to enable interrupt for event SOURCEBUSERROR */
  #define MVDMA_INTENSET_SOURCEBUSERROR_Pos (4UL)
  #define MVDMA_INTENSET_SOURCEBUSERROR_Msk (0x1UL << MVDMA_INTENSET_SOURCEBUSERROR_Pos)
  #define MVDMA_INTENSET_SOURCEBUSERROR_Min (0x0UL)
  #define MVDMA_INTENSET_SOURCEBUSERROR_Max (0x1UL)
  #define MVDMA_INTENSET_SOURCEBUSERROR_Set (0x1UL)
  #define MVDMA_INTENSET_SOURCEBUSERROR_Disabled (0x0UL)
  #define MVDMA_INTENSET_SOURCEBUSERROR_Enabled (0x1UL)

/* SOURCESELECTJOBDONE @Bit 5 : Write '1' to enable interrupt for event SOURCESELECTJOBDONE */
  #define MVDMA_INTENSET_SOURCESELECTJOBDONE_Pos (5UL)
  #define MVDMA_INTENSET_SOURCESELECTJOBDONE_Msk (0x1UL << MVDMA_INTENSET_SOURCESELECTJOBDONE_Pos) /*!< Bit mask of
                                                                            SOURCESELECTJOBDONE field.*/
  #define MVDMA_INTENSET_SOURCESELECTJOBDONE_Min (0x0UL)
  #define MVDMA_INTENSET_SOURCESELECTJOBDONE_Max (0x1UL)
  #define MVDMA_INTENSET_SOURCESELECTJOBDONE_Set (0x1UL)
  #define MVDMA_INTENSET_SOURCESELECTJOBDONE_Disabled (0x0UL)
  #define MVDMA_INTENSET_SOURCESELECTJOBDONE_Enabled (0x1UL)

/* SINKBUSERROR @Bit 6 : Write '1' to enable interrupt for event SINKBUSERROR */
  #define MVDMA_INTENSET_SINKBUSERROR_Pos (6UL)
  #define MVDMA_INTENSET_SINKBUSERROR_Msk (0x1UL << MVDMA_INTENSET_SINKBUSERROR_Pos)
  #define MVDMA_INTENSET_SINKBUSERROR_Min (0x0UL)
  #define MVDMA_INTENSET_SINKBUSERROR_Max (0x1UL)
  #define MVDMA_INTENSET_SINKBUSERROR_Set (0x1UL)
  #define MVDMA_INTENSET_SINKBUSERROR_Disabled (0x0UL)
  #define MVDMA_INTENSET_SINKBUSERROR_Enabled (0x1UL)

/* SINKSELECTJOBDONE @Bit 7 : Write '1' to enable interrupt for event SINKSELECTJOBDONE */
  #define MVDMA_INTENSET_SINKSELECTJOBDONE_Pos (7UL)
  #define MVDMA_INTENSET_SINKSELECTJOBDONE_Msk (0x1UL << MVDMA_INTENSET_SINKSELECTJOBDONE_Pos) /*!< Bit mask of
                                                                            SINKSELECTJOBDONE field.*/
  #define MVDMA_INTENSET_SINKSELECTJOBDONE_Min (0x0UL)
  #define MVDMA_INTENSET_SINKSELECTJOBDONE_Max (0x1UL)
  #define MVDMA_INTENSET_SINKSELECTJOBDONE_Set (0x1UL)
  #define MVDMA_INTENSET_SINKSELECTJOBDONE_Disabled (0x0UL)
  #define MVDMA_INTENSET_SINKSELECTJOBDONE_Enabled (0x1UL)

/* COMPLETED0 @Bit 8 : Write '1' to enable interrupt for event COMPLETED[0] */
  #define MVDMA_INTENSET_COMPLETED0_Pos (8UL)
  #define MVDMA_INTENSET_COMPLETED0_Msk (0x1UL << MVDMA_INTENSET_COMPLETED0_Pos)
  #define MVDMA_INTENSET_COMPLETED0_Min (0x0UL)
  #define MVDMA_INTENSET_COMPLETED0_Max (0x1UL)
  #define MVDMA_INTENSET_COMPLETED0_Set (0x1UL)
  #define MVDMA_INTENSET_COMPLETED0_Disabled (0x0UL)
  #define MVDMA_INTENSET_COMPLETED0_Enabled (0x1UL)

/* COMPLETED1 @Bit 9 : Write '1' to enable interrupt for event COMPLETED[1] */
  #define MVDMA_INTENSET_COMPLETED1_Pos (9UL)
  #define MVDMA_INTENSET_COMPLETED1_Msk (0x1UL << MVDMA_INTENSET_COMPLETED1_Pos)
  #define MVDMA_INTENSET_COMPLETED1_Min (0x0UL)
  #define MVDMA_INTENSET_COMPLETED1_Max (0x1UL)
  #define MVDMA_INTENSET_COMPLETED1_Set (0x1UL)
  #define MVDMA_INTENSET_COMPLETED1_Disabled (0x0UL)
  #define MVDMA_INTENSET_COMPLETED1_Enabled (0x1UL)

/* COMPLETED2 @Bit 10 : Write '1' to enable interrupt for event COMPLETED[2] */
  #define MVDMA_INTENSET_COMPLETED2_Pos (10UL)
  #define MVDMA_INTENSET_COMPLETED2_Msk (0x1UL << MVDMA_INTENSET_COMPLETED2_Pos)
  #define MVDMA_INTENSET_COMPLETED2_Min (0x0UL)
  #define MVDMA_INTENSET_COMPLETED2_Max (0x1UL)
  #define MVDMA_INTENSET_COMPLETED2_Set (0x1UL)
  #define MVDMA_INTENSET_COMPLETED2_Disabled (0x0UL)
  #define MVDMA_INTENSET_COMPLETED2_Enabled (0x1UL)

/* COMPLETED3 @Bit 11 : Write '1' to enable interrupt for event COMPLETED[3] */
  #define MVDMA_INTENSET_COMPLETED3_Pos (11UL)
  #define MVDMA_INTENSET_COMPLETED3_Msk (0x1UL << MVDMA_INTENSET_COMPLETED3_Pos)
  #define MVDMA_INTENSET_COMPLETED3_Min (0x0UL)
  #define MVDMA_INTENSET_COMPLETED3_Max (0x1UL)
  #define MVDMA_INTENSET_COMPLETED3_Set (0x1UL)
  #define MVDMA_INTENSET_COMPLETED3_Disabled (0x0UL)
  #define MVDMA_INTENSET_COMPLETED3_Enabled (0x1UL)

/* COMPLETED4 @Bit 12 : Write '1' to enable interrupt for event COMPLETED[4] */
  #define MVDMA_INTENSET_COMPLETED4_Pos (12UL)
  #define MVDMA_INTENSET_COMPLETED4_Msk (0x1UL << MVDMA_INTENSET_COMPLETED4_Pos)
  #define MVDMA_INTENSET_COMPLETED4_Min (0x0UL)
  #define MVDMA_INTENSET_COMPLETED4_Max (0x1UL)
  #define MVDMA_INTENSET_COMPLETED4_Set (0x1UL)
  #define MVDMA_INTENSET_COMPLETED4_Disabled (0x0UL)
  #define MVDMA_INTENSET_COMPLETED4_Enabled (0x1UL)

/* COMPLETED5 @Bit 13 : Write '1' to enable interrupt for event COMPLETED[5] */
  #define MVDMA_INTENSET_COMPLETED5_Pos (13UL)
  #define MVDMA_INTENSET_COMPLETED5_Msk (0x1UL << MVDMA_INTENSET_COMPLETED5_Pos)
  #define MVDMA_INTENSET_COMPLETED5_Min (0x0UL)
  #define MVDMA_INTENSET_COMPLETED5_Max (0x1UL)
  #define MVDMA_INTENSET_COMPLETED5_Set (0x1UL)
  #define MVDMA_INTENSET_COMPLETED5_Disabled (0x0UL)
  #define MVDMA_INTENSET_COMPLETED5_Enabled (0x1UL)

/* COMPLETED6 @Bit 14 : Write '1' to enable interrupt for event COMPLETED[6] */
  #define MVDMA_INTENSET_COMPLETED6_Pos (14UL)
  #define MVDMA_INTENSET_COMPLETED6_Msk (0x1UL << MVDMA_INTENSET_COMPLETED6_Pos)
  #define MVDMA_INTENSET_COMPLETED6_Min (0x0UL)
  #define MVDMA_INTENSET_COMPLETED6_Max (0x1UL)
  #define MVDMA_INTENSET_COMPLETED6_Set (0x1UL)
  #define MVDMA_INTENSET_COMPLETED6_Disabled (0x0UL)
  #define MVDMA_INTENSET_COMPLETED6_Enabled (0x1UL)

/* COMPLETED7 @Bit 15 : Write '1' to enable interrupt for event COMPLETED[7] */
  #define MVDMA_INTENSET_COMPLETED7_Pos (15UL)
  #define MVDMA_INTENSET_COMPLETED7_Msk (0x1UL << MVDMA_INTENSET_COMPLETED7_Pos)
  #define MVDMA_INTENSET_COMPLETED7_Min (0x0UL)
  #define MVDMA_INTENSET_COMPLETED7_Max (0x1UL)
  #define MVDMA_INTENSET_COMPLETED7_Set (0x1UL)
  #define MVDMA_INTENSET_COMPLETED7_Disabled (0x0UL)
  #define MVDMA_INTENSET_COMPLETED7_Enabled (0x1UL)


/* MVDMA_INTENCLR: Disable interrupt */
  #define MVDMA_INTENCLR_ResetValue (0x00000000UL)

/* END @Bit 0 : Write '1' to disable interrupt for event END */
  #define MVDMA_INTENCLR_END_Pos (0UL)
  #define MVDMA_INTENCLR_END_Msk (0x1UL << MVDMA_INTENCLR_END_Pos)
  #define MVDMA_INTENCLR_END_Min (0x0UL)
  #define MVDMA_INTENCLR_END_Max (0x1UL)
  #define MVDMA_INTENCLR_END_Clear (0x1UL)
  #define MVDMA_INTENCLR_END_Disabled (0x0UL)
  #define MVDMA_INTENCLR_END_Enabled (0x1UL)

/* STARTED @Bit 1 : Write '1' to disable interrupt for event STARTED */
  #define MVDMA_INTENCLR_STARTED_Pos (1UL)
  #define MVDMA_INTENCLR_STARTED_Msk (0x1UL << MVDMA_INTENCLR_STARTED_Pos)
  #define MVDMA_INTENCLR_STARTED_Min (0x0UL)
  #define MVDMA_INTENCLR_STARTED_Max (0x1UL)
  #define MVDMA_INTENCLR_STARTED_Clear (0x1UL)
  #define MVDMA_INTENCLR_STARTED_Disabled (0x0UL)
  #define MVDMA_INTENCLR_STARTED_Enabled (0x1UL)

/* PAUSED @Bit 2 : Write '1' to disable interrupt for event PAUSED */
  #define MVDMA_INTENCLR_PAUSED_Pos (2UL)
  #define MVDMA_INTENCLR_PAUSED_Msk (0x1UL << MVDMA_INTENCLR_PAUSED_Pos)
  #define MVDMA_INTENCLR_PAUSED_Min (0x0UL)
  #define MVDMA_INTENCLR_PAUSED_Max (0x1UL)
  #define MVDMA_INTENCLR_PAUSED_Clear (0x1UL)
  #define MVDMA_INTENCLR_PAUSED_Disabled (0x0UL)
  #define MVDMA_INTENCLR_PAUSED_Enabled (0x1UL)

/* RESET @Bit 3 : Write '1' to disable interrupt for event RESET */
  #define MVDMA_INTENCLR_RESET_Pos (3UL)
  #define MVDMA_INTENCLR_RESET_Msk (0x1UL << MVDMA_INTENCLR_RESET_Pos)
  #define MVDMA_INTENCLR_RESET_Min (0x0UL)
  #define MVDMA_INTENCLR_RESET_Max (0x1UL)
  #define MVDMA_INTENCLR_RESET_Clear (0x1UL)
  #define MVDMA_INTENCLR_RESET_Disabled (0x0UL)
  #define MVDMA_INTENCLR_RESET_Enabled (0x1UL)

/* SOURCEBUSERROR @Bit 4 : Write '1' to disable interrupt for event SOURCEBUSERROR */
  #define MVDMA_INTENCLR_SOURCEBUSERROR_Pos (4UL)
  #define MVDMA_INTENCLR_SOURCEBUSERROR_Msk (0x1UL << MVDMA_INTENCLR_SOURCEBUSERROR_Pos)
  #define MVDMA_INTENCLR_SOURCEBUSERROR_Min (0x0UL)
  #define MVDMA_INTENCLR_SOURCEBUSERROR_Max (0x1UL)
  #define MVDMA_INTENCLR_SOURCEBUSERROR_Clear (0x1UL)
  #define MVDMA_INTENCLR_SOURCEBUSERROR_Disabled (0x0UL)
  #define MVDMA_INTENCLR_SOURCEBUSERROR_Enabled (0x1UL)

/* SOURCESELECTJOBDONE @Bit 5 : Write '1' to disable interrupt for event SOURCESELECTJOBDONE */
  #define MVDMA_INTENCLR_SOURCESELECTJOBDONE_Pos (5UL)
  #define MVDMA_INTENCLR_SOURCESELECTJOBDONE_Msk (0x1UL << MVDMA_INTENCLR_SOURCESELECTJOBDONE_Pos) /*!< Bit mask of
                                                                            SOURCESELECTJOBDONE field.*/
  #define MVDMA_INTENCLR_SOURCESELECTJOBDONE_Min (0x0UL)
  #define MVDMA_INTENCLR_SOURCESELECTJOBDONE_Max (0x1UL)
  #define MVDMA_INTENCLR_SOURCESELECTJOBDONE_Clear (0x1UL)
  #define MVDMA_INTENCLR_SOURCESELECTJOBDONE_Disabled (0x0UL)
  #define MVDMA_INTENCLR_SOURCESELECTJOBDONE_Enabled (0x1UL)

/* SINKBUSERROR @Bit 6 : Write '1' to disable interrupt for event SINKBUSERROR */
  #define MVDMA_INTENCLR_SINKBUSERROR_Pos (6UL)
  #define MVDMA_INTENCLR_SINKBUSERROR_Msk (0x1UL << MVDMA_INTENCLR_SINKBUSERROR_Pos)
  #define MVDMA_INTENCLR_SINKBUSERROR_Min (0x0UL)
  #define MVDMA_INTENCLR_SINKBUSERROR_Max (0x1UL)
  #define MVDMA_INTENCLR_SINKBUSERROR_Clear (0x1UL)
  #define MVDMA_INTENCLR_SINKBUSERROR_Disabled (0x0UL)
  #define MVDMA_INTENCLR_SINKBUSERROR_Enabled (0x1UL)

/* SINKSELECTJOBDONE @Bit 7 : Write '1' to disable interrupt for event SINKSELECTJOBDONE */
  #define MVDMA_INTENCLR_SINKSELECTJOBDONE_Pos (7UL)
  #define MVDMA_INTENCLR_SINKSELECTJOBDONE_Msk (0x1UL << MVDMA_INTENCLR_SINKSELECTJOBDONE_Pos) /*!< Bit mask of
                                                                            SINKSELECTJOBDONE field.*/
  #define MVDMA_INTENCLR_SINKSELECTJOBDONE_Min (0x0UL)
  #define MVDMA_INTENCLR_SINKSELECTJOBDONE_Max (0x1UL)
  #define MVDMA_INTENCLR_SINKSELECTJOBDONE_Clear (0x1UL)
  #define MVDMA_INTENCLR_SINKSELECTJOBDONE_Disabled (0x0UL)
  #define MVDMA_INTENCLR_SINKSELECTJOBDONE_Enabled (0x1UL)

/* COMPLETED0 @Bit 8 : Write '1' to disable interrupt for event COMPLETED[0] */
  #define MVDMA_INTENCLR_COMPLETED0_Pos (8UL)
  #define MVDMA_INTENCLR_COMPLETED0_Msk (0x1UL << MVDMA_INTENCLR_COMPLETED0_Pos)
  #define MVDMA_INTENCLR_COMPLETED0_Min (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED0_Max (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED0_Clear (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED0_Disabled (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED0_Enabled (0x1UL)

/* COMPLETED1 @Bit 9 : Write '1' to disable interrupt for event COMPLETED[1] */
  #define MVDMA_INTENCLR_COMPLETED1_Pos (9UL)
  #define MVDMA_INTENCLR_COMPLETED1_Msk (0x1UL << MVDMA_INTENCLR_COMPLETED1_Pos)
  #define MVDMA_INTENCLR_COMPLETED1_Min (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED1_Max (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED1_Clear (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED1_Disabled (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED1_Enabled (0x1UL)

/* COMPLETED2 @Bit 10 : Write '1' to disable interrupt for event COMPLETED[2] */
  #define MVDMA_INTENCLR_COMPLETED2_Pos (10UL)
  #define MVDMA_INTENCLR_COMPLETED2_Msk (0x1UL << MVDMA_INTENCLR_COMPLETED2_Pos)
  #define MVDMA_INTENCLR_COMPLETED2_Min (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED2_Max (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED2_Clear (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED2_Disabled (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED2_Enabled (0x1UL)

/* COMPLETED3 @Bit 11 : Write '1' to disable interrupt for event COMPLETED[3] */
  #define MVDMA_INTENCLR_COMPLETED3_Pos (11UL)
  #define MVDMA_INTENCLR_COMPLETED3_Msk (0x1UL << MVDMA_INTENCLR_COMPLETED3_Pos)
  #define MVDMA_INTENCLR_COMPLETED3_Min (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED3_Max (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED3_Clear (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED3_Disabled (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED3_Enabled (0x1UL)

/* COMPLETED4 @Bit 12 : Write '1' to disable interrupt for event COMPLETED[4] */
  #define MVDMA_INTENCLR_COMPLETED4_Pos (12UL)
  #define MVDMA_INTENCLR_COMPLETED4_Msk (0x1UL << MVDMA_INTENCLR_COMPLETED4_Pos)
  #define MVDMA_INTENCLR_COMPLETED4_Min (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED4_Max (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED4_Clear (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED4_Disabled (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED4_Enabled (0x1UL)

/* COMPLETED5 @Bit 13 : Write '1' to disable interrupt for event COMPLETED[5] */
  #define MVDMA_INTENCLR_COMPLETED5_Pos (13UL)
  #define MVDMA_INTENCLR_COMPLETED5_Msk (0x1UL << MVDMA_INTENCLR_COMPLETED5_Pos)
  #define MVDMA_INTENCLR_COMPLETED5_Min (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED5_Max (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED5_Clear (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED5_Disabled (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED5_Enabled (0x1UL)

/* COMPLETED6 @Bit 14 : Write '1' to disable interrupt for event COMPLETED[6] */
  #define MVDMA_INTENCLR_COMPLETED6_Pos (14UL)
  #define MVDMA_INTENCLR_COMPLETED6_Msk (0x1UL << MVDMA_INTENCLR_COMPLETED6_Pos)
  #define MVDMA_INTENCLR_COMPLETED6_Min (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED6_Max (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED6_Clear (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED6_Disabled (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED6_Enabled (0x1UL)

/* COMPLETED7 @Bit 15 : Write '1' to disable interrupt for event COMPLETED[7] */
  #define MVDMA_INTENCLR_COMPLETED7_Pos (15UL)
  #define MVDMA_INTENCLR_COMPLETED7_Msk (0x1UL << MVDMA_INTENCLR_COMPLETED7_Pos)
  #define MVDMA_INTENCLR_COMPLETED7_Min (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED7_Max (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED7_Clear (0x1UL)
  #define MVDMA_INTENCLR_COMPLETED7_Disabled (0x0UL)
  #define MVDMA_INTENCLR_COMPLETED7_Enabled (0x1UL)


/* MVDMA_INTPEND: Pending interrupts */
  #define MVDMA_INTPEND_ResetValue (0x00000000UL)

/* END @Bit 0 : Read pending status of interrupt for event END */
  #define MVDMA_INTPEND_END_Pos (0UL)
  #define MVDMA_INTPEND_END_Msk (0x1UL << MVDMA_INTPEND_END_Pos)
  #define MVDMA_INTPEND_END_Min (0x0UL)
  #define MVDMA_INTPEND_END_Max (0x1UL)
  #define MVDMA_INTPEND_END_NotPending (0x0UL)
  #define MVDMA_INTPEND_END_Pending (0x1UL)

/* STARTED @Bit 1 : Read pending status of interrupt for event STARTED */
  #define MVDMA_INTPEND_STARTED_Pos (1UL)
  #define MVDMA_INTPEND_STARTED_Msk (0x1UL << MVDMA_INTPEND_STARTED_Pos)
  #define MVDMA_INTPEND_STARTED_Min (0x0UL)
  #define MVDMA_INTPEND_STARTED_Max (0x1UL)
  #define MVDMA_INTPEND_STARTED_NotPending (0x0UL)
  #define MVDMA_INTPEND_STARTED_Pending (0x1UL)

/* PAUSED @Bit 2 : Read pending status of interrupt for event PAUSED */
  #define MVDMA_INTPEND_PAUSED_Pos (2UL)
  #define MVDMA_INTPEND_PAUSED_Msk (0x1UL << MVDMA_INTPEND_PAUSED_Pos)
  #define MVDMA_INTPEND_PAUSED_Min (0x0UL)
  #define MVDMA_INTPEND_PAUSED_Max (0x1UL)
  #define MVDMA_INTPEND_PAUSED_NotPending (0x0UL)
  #define MVDMA_INTPEND_PAUSED_Pending (0x1UL)

/* RESET @Bit 3 : Read pending status of interrupt for event RESET */
  #define MVDMA_INTPEND_RESET_Pos (3UL)
  #define MVDMA_INTPEND_RESET_Msk (0x1UL << MVDMA_INTPEND_RESET_Pos)
  #define MVDMA_INTPEND_RESET_Min (0x0UL)
  #define MVDMA_INTPEND_RESET_Max (0x1UL)
  #define MVDMA_INTPEND_RESET_NotPending (0x0UL)
  #define MVDMA_INTPEND_RESET_Pending (0x1UL)

/* SOURCEBUSERROR @Bit 4 : Read pending status of interrupt for event SOURCEBUSERROR */
  #define MVDMA_INTPEND_SOURCEBUSERROR_Pos (4UL)
  #define MVDMA_INTPEND_SOURCEBUSERROR_Msk (0x1UL << MVDMA_INTPEND_SOURCEBUSERROR_Pos)
  #define MVDMA_INTPEND_SOURCEBUSERROR_Min (0x0UL)
  #define MVDMA_INTPEND_SOURCEBUSERROR_Max (0x1UL)
  #define MVDMA_INTPEND_SOURCEBUSERROR_NotPending (0x0UL)
  #define MVDMA_INTPEND_SOURCEBUSERROR_Pending (0x1UL)

/* SOURCESELECTJOBDONE @Bit 5 : Read pending status of interrupt for event SOURCESELECTJOBDONE */
  #define MVDMA_INTPEND_SOURCESELECTJOBDONE_Pos (5UL)
  #define MVDMA_INTPEND_SOURCESELECTJOBDONE_Msk (0x1UL << MVDMA_INTPEND_SOURCESELECTJOBDONE_Pos) /*!< Bit mask of
                                                                            SOURCESELECTJOBDONE field.*/
  #define MVDMA_INTPEND_SOURCESELECTJOBDONE_Min (0x0UL)
  #define MVDMA_INTPEND_SOURCESELECTJOBDONE_Max (0x1UL)
  #define MVDMA_INTPEND_SOURCESELECTJOBDONE_NotPending (0x0UL)
  #define MVDMA_INTPEND_SOURCESELECTJOBDONE_Pending (0x1UL)

/* SINKBUSERROR @Bit 6 : Read pending status of interrupt for event SINKBUSERROR */
  #define MVDMA_INTPEND_SINKBUSERROR_Pos (6UL)
  #define MVDMA_INTPEND_SINKBUSERROR_Msk (0x1UL << MVDMA_INTPEND_SINKBUSERROR_Pos)
  #define MVDMA_INTPEND_SINKBUSERROR_Min (0x0UL)
  #define MVDMA_INTPEND_SINKBUSERROR_Max (0x1UL)
  #define MVDMA_INTPEND_SINKBUSERROR_NotPending (0x0UL)
  #define MVDMA_INTPEND_SINKBUSERROR_Pending (0x1UL)

/* SINKSELECTJOBDONE @Bit 7 : Read pending status of interrupt for event SINKSELECTJOBDONE */
  #define MVDMA_INTPEND_SINKSELECTJOBDONE_Pos (7UL)
  #define MVDMA_INTPEND_SINKSELECTJOBDONE_Msk (0x1UL << MVDMA_INTPEND_SINKSELECTJOBDONE_Pos) /*!< Bit mask of SINKSELECTJOBDONE
                                                                            field.*/
  #define MVDMA_INTPEND_SINKSELECTJOBDONE_Min (0x0UL)
  #define MVDMA_INTPEND_SINKSELECTJOBDONE_Max (0x1UL)
  #define MVDMA_INTPEND_SINKSELECTJOBDONE_NotPending (0x0UL)
  #define MVDMA_INTPEND_SINKSELECTJOBDONE_Pending (0x1UL)

/* COMPLETED0 @Bit 8 : Read pending status of interrupt for event COMPLETED[0] */
  #define MVDMA_INTPEND_COMPLETED0_Pos (8UL)
  #define MVDMA_INTPEND_COMPLETED0_Msk (0x1UL << MVDMA_INTPEND_COMPLETED0_Pos)
  #define MVDMA_INTPEND_COMPLETED0_Min (0x0UL)
  #define MVDMA_INTPEND_COMPLETED0_Max (0x1UL)
  #define MVDMA_INTPEND_COMPLETED0_NotPending (0x0UL)
  #define MVDMA_INTPEND_COMPLETED0_Pending (0x1UL)

/* COMPLETED1 @Bit 9 : Read pending status of interrupt for event COMPLETED[1] */
  #define MVDMA_INTPEND_COMPLETED1_Pos (9UL)
  #define MVDMA_INTPEND_COMPLETED1_Msk (0x1UL << MVDMA_INTPEND_COMPLETED1_Pos)
  #define MVDMA_INTPEND_COMPLETED1_Min (0x0UL)
  #define MVDMA_INTPEND_COMPLETED1_Max (0x1UL)
  #define MVDMA_INTPEND_COMPLETED1_NotPending (0x0UL)
  #define MVDMA_INTPEND_COMPLETED1_Pending (0x1UL)

/* COMPLETED2 @Bit 10 : Read pending status of interrupt for event COMPLETED[2] */
  #define MVDMA_INTPEND_COMPLETED2_Pos (10UL)
  #define MVDMA_INTPEND_COMPLETED2_Msk (0x1UL << MVDMA_INTPEND_COMPLETED2_Pos)
  #define MVDMA_INTPEND_COMPLETED2_Min (0x0UL)
  #define MVDMA_INTPEND_COMPLETED2_Max (0x1UL)
  #define MVDMA_INTPEND_COMPLETED2_NotPending (0x0UL)
  #define MVDMA_INTPEND_COMPLETED2_Pending (0x1UL)

/* COMPLETED3 @Bit 11 : Read pending status of interrupt for event COMPLETED[3] */
  #define MVDMA_INTPEND_COMPLETED3_Pos (11UL)
  #define MVDMA_INTPEND_COMPLETED3_Msk (0x1UL << MVDMA_INTPEND_COMPLETED3_Pos)
  #define MVDMA_INTPEND_COMPLETED3_Min (0x0UL)
  #define MVDMA_INTPEND_COMPLETED3_Max (0x1UL)
  #define MVDMA_INTPEND_COMPLETED3_NotPending (0x0UL)
  #define MVDMA_INTPEND_COMPLETED3_Pending (0x1UL)

/* COMPLETED4 @Bit 12 : Read pending status of interrupt for event COMPLETED[4] */
  #define MVDMA_INTPEND_COMPLETED4_Pos (12UL)
  #define MVDMA_INTPEND_COMPLETED4_Msk (0x1UL << MVDMA_INTPEND_COMPLETED4_Pos)
  #define MVDMA_INTPEND_COMPLETED4_Min (0x0UL)
  #define MVDMA_INTPEND_COMPLETED4_Max (0x1UL)
  #define MVDMA_INTPEND_COMPLETED4_NotPending (0x0UL)
  #define MVDMA_INTPEND_COMPLETED4_Pending (0x1UL)

/* COMPLETED5 @Bit 13 : Read pending status of interrupt for event COMPLETED[5] */
  #define MVDMA_INTPEND_COMPLETED5_Pos (13UL)
  #define MVDMA_INTPEND_COMPLETED5_Msk (0x1UL << MVDMA_INTPEND_COMPLETED5_Pos)
  #define MVDMA_INTPEND_COMPLETED5_Min (0x0UL)
  #define MVDMA_INTPEND_COMPLETED5_Max (0x1UL)
  #define MVDMA_INTPEND_COMPLETED5_NotPending (0x0UL)
  #define MVDMA_INTPEND_COMPLETED5_Pending (0x1UL)

/* COMPLETED6 @Bit 14 : Read pending status of interrupt for event COMPLETED[6] */
  #define MVDMA_INTPEND_COMPLETED6_Pos (14UL)
  #define MVDMA_INTPEND_COMPLETED6_Msk (0x1UL << MVDMA_INTPEND_COMPLETED6_Pos)
  #define MVDMA_INTPEND_COMPLETED6_Min (0x0UL)
  #define MVDMA_INTPEND_COMPLETED6_Max (0x1UL)
  #define MVDMA_INTPEND_COMPLETED6_NotPending (0x0UL)
  #define MVDMA_INTPEND_COMPLETED6_Pending (0x1UL)

/* COMPLETED7 @Bit 15 : Read pending status of interrupt for event COMPLETED[7] */
  #define MVDMA_INTPEND_COMPLETED7_Pos (15UL)
  #define MVDMA_INTPEND_COMPLETED7_Msk (0x1UL << MVDMA_INTPEND_COMPLETED7_Pos)
  #define MVDMA_INTPEND_COMPLETED7_Min (0x0UL)
  #define MVDMA_INTPEND_COMPLETED7_Max (0x1UL)
  #define MVDMA_INTPEND_COMPLETED7_NotPending (0x0UL)
  #define MVDMA_INTPEND_COMPLETED7_Pending (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           NFCT                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct NFCT_FRAMESTATUS ================================================= */
/**
  * @brief FRAMESTATUS [NFCT_FRAMESTATUS] (unspecified)
  */
typedef struct {
  __IOM uint32_t  RX;
} NRF_NFCT_FRAMESTATUS_Type;

/* NFCT_FRAMESTATUS_RX: Result of last incoming frame */
  #define NFCT_FRAMESTATUS_RX_ResetValue (0x00000000UL)

/* CRCERROR @Bit 0 : No valid end of frame (EoF) detected */
  #define NFCT_FRAMESTATUS_RX_CRCERROR_Pos (0UL)
  #define NFCT_FRAMESTATUS_RX_CRCERROR_Msk (0x1UL << NFCT_FRAMESTATUS_RX_CRCERROR_Pos)
  #define NFCT_FRAMESTATUS_RX_CRCERROR_Min (0x0UL)
  #define NFCT_FRAMESTATUS_RX_CRCERROR_Max (0x1UL)
  #define NFCT_FRAMESTATUS_RX_CRCERROR_CRCCorrect (0x0UL)
  #define NFCT_FRAMESTATUS_RX_CRCERROR_CRCError (0x1UL)

/* PARITYSTATUS @Bit 2 : Parity status of received frame */
  #define NFCT_FRAMESTATUS_RX_PARITYSTATUS_Pos (2UL)
  #define NFCT_FRAMESTATUS_RX_PARITYSTATUS_Msk (0x1UL << NFCT_FRAMESTATUS_RX_PARITYSTATUS_Pos) /*!< Bit mask of PARITYSTATUS
                                                                            field.*/
  #define NFCT_FRAMESTATUS_RX_PARITYSTATUS_Min (0x0UL)
  #define NFCT_FRAMESTATUS_RX_PARITYSTATUS_Max (0x1UL)
  #define NFCT_FRAMESTATUS_RX_PARITYSTATUS_ParityOK (0x0UL)
  #define NFCT_FRAMESTATUS_RX_PARITYSTATUS_ParityError (0x1UL)

/* OVERRUN @Bit 3 : Overrun detected */
  #define NFCT_FRAMESTATUS_RX_OVERRUN_Pos (3UL)
  #define NFCT_FRAMESTATUS_RX_OVERRUN_Msk (0x1UL << NFCT_FRAMESTATUS_RX_OVERRUN_Pos)
  #define NFCT_FRAMESTATUS_RX_OVERRUN_Min (0x0UL)
  #define NFCT_FRAMESTATUS_RX_OVERRUN_Max (0x1UL)
  #define NFCT_FRAMESTATUS_RX_OVERRUN_NoOverrun (0x0UL)
  #define NFCT_FRAMESTATUS_RX_OVERRUN_Overrun (0x1UL)



/* ===================================================== Struct NFCT_TXD ===================================================== */
/**
  * @brief TXD [NFCT_TXD] (unspecified)
  */
typedef struct {
  __IOM uint32_t  FRAMECONFIG;
  __IOM uint32_t  AMOUNT;
} NRF_NFCT_TXD_Type;

/* NFCT_TXD_FRAMECONFIG: Configuration of outgoing frames */
  #define NFCT_TXD_FRAMECONFIG_ResetValue (0x00000017UL)

/* PARITY @Bit 0 : Indicates if parity is added to the frame */
  #define NFCT_TXD_FRAMECONFIG_PARITY_Pos (0UL)
  #define NFCT_TXD_FRAMECONFIG_PARITY_Msk (0x1UL << NFCT_TXD_FRAMECONFIG_PARITY_Pos)
  #define NFCT_TXD_FRAMECONFIG_PARITY_Min (0x0UL)
  #define NFCT_TXD_FRAMECONFIG_PARITY_Max (0x1UL)
  #define NFCT_TXD_FRAMECONFIG_PARITY_NoParity (0x0UL)
  #define NFCT_TXD_FRAMECONFIG_PARITY_Parity (0x1UL)

/* DISCARDMODE @Bit 1 : Discarding unused bits at start or end of a frame */
  #define NFCT_TXD_FRAMECONFIG_DISCARDMODE_Pos (1UL)
  #define NFCT_TXD_FRAMECONFIG_DISCARDMODE_Msk (0x1UL << NFCT_TXD_FRAMECONFIG_DISCARDMODE_Pos) /*!< Bit mask of DISCARDMODE
                                                                            field.*/
  #define NFCT_TXD_FRAMECONFIG_DISCARDMODE_Min (0x0UL)
  #define NFCT_TXD_FRAMECONFIG_DISCARDMODE_Max (0x1UL)
  #define NFCT_TXD_FRAMECONFIG_DISCARDMODE_DiscardEnd (0x0UL)
  #define NFCT_TXD_FRAMECONFIG_DISCARDMODE_DiscardStart (0x1UL)

/* SOF @Bit 2 : Adding SoF or not in TX frames */
  #define NFCT_TXD_FRAMECONFIG_SOF_Pos (2UL)
  #define NFCT_TXD_FRAMECONFIG_SOF_Msk (0x1UL << NFCT_TXD_FRAMECONFIG_SOF_Pos)
  #define NFCT_TXD_FRAMECONFIG_SOF_Min (0x0UL)
  #define NFCT_TXD_FRAMECONFIG_SOF_Max (0x1UL)
  #define NFCT_TXD_FRAMECONFIG_SOF_NoSoF (0x0UL)
  #define NFCT_TXD_FRAMECONFIG_SOF_SoF (0x1UL)

/* CRCMODETX @Bit 4 : CRC mode for outgoing frames */
  #define NFCT_TXD_FRAMECONFIG_CRCMODETX_Pos (4UL)
  #define NFCT_TXD_FRAMECONFIG_CRCMODETX_Msk (0x1UL << NFCT_TXD_FRAMECONFIG_CRCMODETX_Pos)
  #define NFCT_TXD_FRAMECONFIG_CRCMODETX_Min (0x0UL)
  #define NFCT_TXD_FRAMECONFIG_CRCMODETX_Max (0x1UL)
  #define NFCT_TXD_FRAMECONFIG_CRCMODETX_NoCRCTX (0x0UL)
  #define NFCT_TXD_FRAMECONFIG_CRCMODETX_CRC16TX (0x1UL) /*!< 16 bit CRC added to the frame based on all the data read from RAM
                                                              that is used in the frame*/


/* NFCT_TXD_AMOUNT: Size of outgoing frame */
  #define NFCT_TXD_AMOUNT_ResetValue (0x00000000UL)

/* TXDATABITS @Bits 0..2 : Number of bits in the last or first byte read from RAM that shall be included in the frame (excluding
                           parity bit). */

  #define NFCT_TXD_AMOUNT_TXDATABITS_Pos (0UL)
  #define NFCT_TXD_AMOUNT_TXDATABITS_Msk (0x7UL << NFCT_TXD_AMOUNT_TXDATABITS_Pos)
  #define NFCT_TXD_AMOUNT_TXDATABITS_Min (0x0UL)
  #define NFCT_TXD_AMOUNT_TXDATABITS_Max (0x7UL)

/* TXDATABYTES @Bits 3..11 : Number of complete bytes that shall be included in the frame, excluding CRC, parity, and framing. */
  #define NFCT_TXD_AMOUNT_TXDATABYTES_Pos (3UL)
  #define NFCT_TXD_AMOUNT_TXDATABYTES_Msk (0x1FFUL << NFCT_TXD_AMOUNT_TXDATABYTES_Pos)
  #define NFCT_TXD_AMOUNT_TXDATABYTES_Min (0x000UL)
  #define NFCT_TXD_AMOUNT_TXDATABYTES_Max (0x101UL)



/* ===================================================== Struct NFCT_RXD ===================================================== */
/**
  * @brief RXD [NFCT_RXD] (unspecified)
  */
typedef struct {
  __IOM uint32_t  FRAMECONFIG;
  __IM  uint32_t  AMOUNT;
} NRF_NFCT_RXD_Type;

/* NFCT_RXD_FRAMECONFIG: Configuration of incoming frames */
  #define NFCT_RXD_FRAMECONFIG_ResetValue (0x00000015UL)

/* PARITY @Bit 0 : Indicates if parity expected in RX frame */
  #define NFCT_RXD_FRAMECONFIG_PARITY_Pos (0UL)
  #define NFCT_RXD_FRAMECONFIG_PARITY_Msk (0x1UL << NFCT_RXD_FRAMECONFIG_PARITY_Pos)
  #define NFCT_RXD_FRAMECONFIG_PARITY_Min (0x0UL)
  #define NFCT_RXD_FRAMECONFIG_PARITY_Max (0x1UL)
  #define NFCT_RXD_FRAMECONFIG_PARITY_NoParity (0x0UL)
  #define NFCT_RXD_FRAMECONFIG_PARITY_Parity (0x1UL)

/* SOF @Bit 2 : SoF expected or not in RX frames */
  #define NFCT_RXD_FRAMECONFIG_SOF_Pos (2UL)
  #define NFCT_RXD_FRAMECONFIG_SOF_Msk (0x1UL << NFCT_RXD_FRAMECONFIG_SOF_Pos)
  #define NFCT_RXD_FRAMECONFIG_SOF_Min (0x0UL)
  #define NFCT_RXD_FRAMECONFIG_SOF_Max (0x1UL)
  #define NFCT_RXD_FRAMECONFIG_SOF_NoSoF (0x0UL)
  #define NFCT_RXD_FRAMECONFIG_SOF_SoF (0x1UL)

/* CRCMODERX @Bit 4 : CRC mode for incoming frames */
  #define NFCT_RXD_FRAMECONFIG_CRCMODERX_Pos (4UL)
  #define NFCT_RXD_FRAMECONFIG_CRCMODERX_Msk (0x1UL << NFCT_RXD_FRAMECONFIG_CRCMODERX_Pos)
  #define NFCT_RXD_FRAMECONFIG_CRCMODERX_Min (0x0UL)
  #define NFCT_RXD_FRAMECONFIG_CRCMODERX_Max (0x1UL)
  #define NFCT_RXD_FRAMECONFIG_CRCMODERX_NoCRCRX (0x0UL)
  #define NFCT_RXD_FRAMECONFIG_CRCMODERX_CRC16RX (0x1UL) /*!< Last 16 bits in RX frame is CRC, CRC is checked and CRCSTATUS
                                                              updated*/


/* NFCT_RXD_AMOUNT: Size of last incoming frame */
  #define NFCT_RXD_AMOUNT_ResetValue (0x00000000UL)

/* RXDATABITS @Bits 0..2 : Number of bits in the last byte in the frame, if less than 8 (including CRC, but excluding parity and
                           SoF/EoF framing). */

  #define NFCT_RXD_AMOUNT_RXDATABITS_Pos (0UL)
  #define NFCT_RXD_AMOUNT_RXDATABITS_Msk (0x7UL << NFCT_RXD_AMOUNT_RXDATABITS_Pos)

/* RXDATABYTES @Bits 3..11 : Number of complete bytes received in the frame (including CRC, but excluding parity and SoF/EoF
                             framing) */

  #define NFCT_RXD_AMOUNT_RXDATABYTES_Pos (3UL)
  #define NFCT_RXD_AMOUNT_RXDATABYTES_Msk (0x1FFUL << NFCT_RXD_AMOUNT_RXDATABYTES_Pos)



/* =================================================== Struct NFCT_NFCID1 ==================================================== */
/**
  * @brief NFCID1 [NFCT_NFCID1] (unspecified)
  */
typedef struct {
  __IOM uint32_t  LAST;
  __IOM uint32_t  SECONDLAST;
  __IOM uint32_t  THIRDLAST;
} NRF_NFCT_NFCID1_Type;

/* NFCT_NFCID1_LAST: Last NFCID1 part (4, 7 or 10 bytes ID) */
  #define NFCT_NFCID1_LAST_ResetValue (0x00006363UL)

/* Z @Bits 0..7 : NFCID1 byte Z (very last byte sent) */
  #define NFCT_NFCID1_LAST_Z_Pos (0UL)
  #define NFCT_NFCID1_LAST_Z_Msk (0xFFUL << NFCT_NFCID1_LAST_Z_Pos)

/* Y @Bits 8..15 : NFCID1 byte Y */
  #define NFCT_NFCID1_LAST_Y_Pos (8UL)
  #define NFCT_NFCID1_LAST_Y_Msk (0xFFUL << NFCT_NFCID1_LAST_Y_Pos)

/* X @Bits 16..23 : NFCID1 byte X */
  #define NFCT_NFCID1_LAST_X_Pos (16UL)
  #define NFCT_NFCID1_LAST_X_Msk (0xFFUL << NFCT_NFCID1_LAST_X_Pos)

/* W @Bits 24..31 : NFCID1 byte W */
  #define NFCT_NFCID1_LAST_W_Pos (24UL)
  #define NFCT_NFCID1_LAST_W_Msk (0xFFUL << NFCT_NFCID1_LAST_W_Pos)


/* NFCT_NFCID1_SECONDLAST: Second last NFCID1 part (7 or 10 bytes ID) */
  #define NFCT_NFCID1_SECONDLAST_ResetValue (0x00000000UL)

/* V @Bits 0..7 : NFCID1 byte V */
  #define NFCT_NFCID1_SECONDLAST_V_Pos (0UL)
  #define NFCT_NFCID1_SECONDLAST_V_Msk (0xFFUL << NFCT_NFCID1_SECONDLAST_V_Pos)

/* U @Bits 8..15 : NFCID1 byte U */
  #define NFCT_NFCID1_SECONDLAST_U_Pos (8UL)
  #define NFCT_NFCID1_SECONDLAST_U_Msk (0xFFUL << NFCT_NFCID1_SECONDLAST_U_Pos)

/* T @Bits 16..23 : NFCID1 byte T */
  #define NFCT_NFCID1_SECONDLAST_T_Pos (16UL)
  #define NFCT_NFCID1_SECONDLAST_T_Msk (0xFFUL << NFCT_NFCID1_SECONDLAST_T_Pos)


/* NFCT_NFCID1_THIRDLAST: Third last NFCID1 part (10 bytes ID) */
  #define NFCT_NFCID1_THIRDLAST_ResetValue (0x00000000UL)

/* S @Bits 0..7 : NFCID1 byte S */
  #define NFCT_NFCID1_THIRDLAST_S_Pos (0UL)
  #define NFCT_NFCID1_THIRDLAST_S_Msk (0xFFUL << NFCT_NFCID1_THIRDLAST_S_Pos)

/* R @Bits 8..15 : NFCID1 byte R */
  #define NFCT_NFCID1_THIRDLAST_R_Pos (8UL)
  #define NFCT_NFCID1_THIRDLAST_R_Msk (0xFFUL << NFCT_NFCID1_THIRDLAST_R_Pos)

/* Q @Bits 16..23 : NFCID1 byte Q */
  #define NFCT_NFCID1_THIRDLAST_Q_Pos (16UL)
  #define NFCT_NFCID1_THIRDLAST_Q_Msk (0xFFUL << NFCT_NFCID1_THIRDLAST_Q_Pos)


/* ======================================================= Struct NFCT ======================================================= */
/**
  * @brief NFC-A compatible radio NFC-A compatible radio
  */
  typedef struct {
    __OM uint32_t TASKS_ACTIVATE;                    /*!< (@ 0x00000000) Activate NFCT peripheral for incoming and outgoing
                                                                         frames, change state to activated*/
    __OM uint32_t TASKS_DISABLE;
    __OM uint32_t TASKS_SENSE;                       /*!< (@ 0x00000008) Enable NFC sense field mode, change state to sense
                                                                         mode*/
    __OM uint32_t TASKS_STARTTX;                     /*!< (@ 0x0000000C) Start transmission of an outgoing frame, change state
                                                                         to transmit*/
    __OM uint32_t TASKS_STOPTX;
    __IM uint32_t RESERVED[2];
    __OM uint32_t TASKS_ENABLERXDATA;
    __IM uint32_t RESERVED1;
    __OM uint32_t TASKS_GOIDLE;
    __OM uint32_t TASKS_GOSLEEP;
    __IM uint32_t RESERVED2[21];
    __IOM uint32_t SUBSCRIBE_ACTIVATE;
    __IOM uint32_t SUBSCRIBE_DISABLE;
    __IOM uint32_t SUBSCRIBE_SENSE;
    __IOM uint32_t SUBSCRIBE_STARTTX;
    __IOM uint32_t SUBSCRIBE_STOPTX;
    __IM uint32_t RESERVED3[2];
    __IOM uint32_t SUBSCRIBE_ENABLERXDATA;
    __IM uint32_t RESERVED4;
    __IOM uint32_t SUBSCRIBE_GOIDLE;
    __IOM uint32_t SUBSCRIBE_GOSLEEP;
    __IM uint32_t RESERVED5[21];
    __IOM uint32_t EVENTS_READY;                     /*!< (@ 0x00000100) The NFCT peripheral is ready to receive and send
                                                                         frames*/
    __IOM uint32_t EVENTS_FIELDDETECTED;
    __IOM uint32_t EVENTS_FIELDLOST;
    __IOM uint32_t EVENTS_TXFRAMESTART;              /*!< (@ 0x0000010C) Marks the start of the first symbol of a transmitted
                                                                         frame*/
    __IOM uint32_t EVENTS_TXFRAMEEND;                /*!< (@ 0x00000110) Marks the end of the last transmitted on-air symbol of
                                                                         a frame*/
    __IOM uint32_t EVENTS_RXFRAMESTART;
    __IOM uint32_t EVENTS_RXFRAMEEND;                /*!< (@ 0x00000118) Received data has been checked (CRC, parity) and
                                                                         transferred to RAM, and EasyDMA has ended accessing the
                                                                         RX buffer*/
    __IOM uint32_t EVENTS_ERROR;                     /*!< (@ 0x0000011C) NFC error reported. The ERRORSTATUS register contains
                                                                         details on the source of the error.*/
    __IM uint32_t RESERVED6[2];
    __IOM uint32_t EVENTS_RXERROR;                   /*!< (@ 0x00000128) NFC RX frame error reported. The FRAMESTATUS.RX
                                                                         register contains details on the source of the error.*/
    __IOM uint32_t EVENTS_ENDRX;                     /*!< (@ 0x0000012C) RX buffer (as defined by PACKETPTR and MAXLEN) in Data
                                                                         RAM full.*/
    __IOM uint32_t EVENTS_ENDTX;                     /*!< (@ 0x00000130) Transmission of data in RAM has ended, and EasyDMA has
                                                                         ended accessing the TX buffer*/
    __IM uint32_t RESERVED7;
    __IOM uint32_t EVENTS_AUTOCOLRESSTARTED;
    __IM uint32_t RESERVED8[3];
    __IOM uint32_t EVENTS_COLLISION;
    __IOM uint32_t EVENTS_SELECTED;
    __IOM uint32_t EVENTS_STARTED;
    __IM uint32_t RESERVED9[11];
    __IOM uint32_t PUBLISH_READY;
    __IOM uint32_t PUBLISH_FIELDDETECTED;
    __IOM uint32_t PUBLISH_FIELDLOST;
    __IOM uint32_t PUBLISH_TXFRAMESTART;
    __IOM uint32_t PUBLISH_TXFRAMEEND;
    __IOM uint32_t PUBLISH_RXFRAMESTART;
    __IOM uint32_t PUBLISH_RXFRAMEEND;
    __IOM uint32_t PUBLISH_ERROR;
    __IM uint32_t RESERVED10[2];
    __IOM uint32_t PUBLISH_RXERROR;
    __IOM uint32_t PUBLISH_ENDRX;
    __IOM uint32_t PUBLISH_ENDTX;
    __IM uint32_t RESERVED11;
    __IOM uint32_t PUBLISH_AUTOCOLRESSTARTED;
    __IM uint32_t RESERVED12[3];
    __IOM uint32_t PUBLISH_COLLISION;
    __IOM uint32_t PUBLISH_SELECTED;
    __IOM uint32_t PUBLISH_STARTED;
    __IM uint32_t RESERVED13[11];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED14[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED15[62];
    __IOM uint32_t ERRORSTATUS;
    __IM uint32_t RESERVED16;
    __IOM NRF_NFCT_FRAMESTATUS_Type FRAMESTATUS;
    __IM uint32_t NFCTAGSTATE;
    __IM uint32_t RESERVED17[3];
    __IM uint32_t SLEEPSTATE;
    __IM uint32_t RESERVED18[6];
    __IM uint32_t FIELDPRESENT;
    __IM uint32_t RESERVED19[49];
    __IOM uint32_t FRAMEDELAYMIN;
    __IOM uint32_t FRAMEDELAYMAX;
    __IOM uint32_t FRAMEDELAYMODE;
    __IOM uint32_t PACKETPTR;                        /*!< (@ 0x00000510) Packet pointer for TXD and RXD data storage in Data
                                                                         RAM*/
    __IOM uint32_t MAXLEN;                           /*!< (@ 0x00000514) Size of the RAM buffer allocated to TXD and RXD data
                                                                         storage each*/
    __IOM NRF_NFCT_TXD_Type TXD;
    __IOM NRF_NFCT_RXD_Type RXD;
    __IM uint32_t RESERVED20;
    __IOM uint32_t MODULATIONCTRL;                   /*!< (@ 0x0000052C) Enables the modulation output to a GPIO pin which can
                                                                         be connected to a second external antenna.*/
    __IM uint32_t RESERVED21[2];
    __IOM uint32_t MODULATIONPSEL;
    __IM uint32_t RESERVED22[5];
    __IOM uint32_t MODE;
    __IM uint32_t RESERVED23[15];
    __IOM NRF_NFCT_NFCID1_Type NFCID1;
    __IOM uint32_t AUTOCOLRESCONFIG;                 /*!< (@ 0x0000059C) Controls the auto collision resolution function. This
                                                                         setting must be done before the NFCT peripheral is
                                                                         activated.*/
    __IOM uint32_t SENSRES;
    __IOM uint32_t SELRES;
    __IM uint32_t RESERVED24[75];
    __IOM uint32_t PADCONFIG;
  } NRF_NFCT_Type;

/* NFCT_TASKS_ACTIVATE: Activate NFCT peripheral for incoming and outgoing frames, change state to activated */
  #define NFCT_TASKS_ACTIVATE_ResetValue (0x00000000UL)

/* TASKS_ACTIVATE @Bit 0 : Activate NFCT peripheral for incoming and outgoing frames, change state to activated */
  #define NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Pos (0UL)
  #define NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Msk (0x1UL << NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Pos) /*!< Bit mask of
                                                                            TASKS_ACTIVATE field.*/
  #define NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Min (0x1UL)
  #define NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Max (0x1UL)
  #define NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Trigger (0x1UL)


/* NFCT_TASKS_DISABLE: Disable NFCT peripheral */
  #define NFCT_TASKS_DISABLE_ResetValue (0x00000000UL)

/* TASKS_DISABLE @Bit 0 : Disable NFCT peripheral */
  #define NFCT_TASKS_DISABLE_TASKS_DISABLE_Pos (0UL)
  #define NFCT_TASKS_DISABLE_TASKS_DISABLE_Msk (0x1UL << NFCT_TASKS_DISABLE_TASKS_DISABLE_Pos) /*!< Bit mask of TASKS_DISABLE
                                                                            field.*/
  #define NFCT_TASKS_DISABLE_TASKS_DISABLE_Min (0x1UL)
  #define NFCT_TASKS_DISABLE_TASKS_DISABLE_Max (0x1UL)
  #define NFCT_TASKS_DISABLE_TASKS_DISABLE_Trigger (0x1UL)


/* NFCT_TASKS_SENSE: Enable NFC sense field mode, change state to sense mode */
  #define NFCT_TASKS_SENSE_ResetValue (0x00000000UL)

/* TASKS_SENSE @Bit 0 : Enable NFC sense field mode, change state to sense mode */
  #define NFCT_TASKS_SENSE_TASKS_SENSE_Pos (0UL)
  #define NFCT_TASKS_SENSE_TASKS_SENSE_Msk (0x1UL << NFCT_TASKS_SENSE_TASKS_SENSE_Pos)
  #define NFCT_TASKS_SENSE_TASKS_SENSE_Min (0x1UL)
  #define NFCT_TASKS_SENSE_TASKS_SENSE_Max (0x1UL)
  #define NFCT_TASKS_SENSE_TASKS_SENSE_Trigger (0x1UL)


/* NFCT_TASKS_STARTTX: Start transmission of an outgoing frame, change state to transmit */
  #define NFCT_TASKS_STARTTX_ResetValue (0x00000000UL)

/* TASKS_STARTTX @Bit 0 : Start transmission of an outgoing frame, change state to transmit */
  #define NFCT_TASKS_STARTTX_TASKS_STARTTX_Pos (0UL)
  #define NFCT_TASKS_STARTTX_TASKS_STARTTX_Msk (0x1UL << NFCT_TASKS_STARTTX_TASKS_STARTTX_Pos) /*!< Bit mask of TASKS_STARTTX
                                                                            field.*/
  #define NFCT_TASKS_STARTTX_TASKS_STARTTX_Min (0x1UL)
  #define NFCT_TASKS_STARTTX_TASKS_STARTTX_Max (0x1UL)
  #define NFCT_TASKS_STARTTX_TASKS_STARTTX_Trigger (0x1UL)


/* NFCT_TASKS_STOPTX: Stops an issued transmission of a frame */
  #define NFCT_TASKS_STOPTX_ResetValue (0x00000000UL)

/* TASKS_STOPTX @Bit 0 : Stops an issued transmission of a frame */
  #define NFCT_TASKS_STOPTX_TASKS_STOPTX_Pos (0UL)
  #define NFCT_TASKS_STOPTX_TASKS_STOPTX_Msk (0x1UL << NFCT_TASKS_STOPTX_TASKS_STOPTX_Pos)
  #define NFCT_TASKS_STOPTX_TASKS_STOPTX_Min (0x1UL)
  #define NFCT_TASKS_STOPTX_TASKS_STOPTX_Max (0x1UL)
  #define NFCT_TASKS_STOPTX_TASKS_STOPTX_Trigger (0x1UL)


/* NFCT_TASKS_ENABLERXDATA: Initializes the EasyDMA for receive. */
  #define NFCT_TASKS_ENABLERXDATA_ResetValue (0x00000000UL)

/* TASKS_ENABLERXDATA @Bit 0 : Initializes the EasyDMA for receive. */
  #define NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Pos (0UL)
  #define NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Msk (0x1UL << NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Pos) /*!< Bit mask
                                                                            of TASKS_ENABLERXDATA field.*/
  #define NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Min (0x1UL)
  #define NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Max (0x1UL)
  #define NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Trigger (0x1UL)


/* NFCT_TASKS_GOIDLE: Force state machine to IDLE state */
  #define NFCT_TASKS_GOIDLE_ResetValue (0x00000000UL)

/* TASKS_GOIDLE @Bit 0 : Force state machine to IDLE state */
  #define NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Pos (0UL)
  #define NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Msk (0x1UL << NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Pos)
  #define NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Min (0x1UL)
  #define NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Max (0x1UL)
  #define NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Trigger (0x1UL)


/* NFCT_TASKS_GOSLEEP: Force state machine to SLEEP_A state */
  #define NFCT_TASKS_GOSLEEP_ResetValue (0x00000000UL)

/* TASKS_GOSLEEP @Bit 0 : Force state machine to SLEEP_A state */
  #define NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Pos (0UL)
  #define NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Msk (0x1UL << NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Pos) /*!< Bit mask of TASKS_GOSLEEP
                                                                            field.*/
  #define NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Min (0x1UL)
  #define NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Max (0x1UL)
  #define NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Trigger (0x1UL)


/* NFCT_SUBSCRIBE_ACTIVATE: Subscribe configuration for task ACTIVATE */
  #define NFCT_SUBSCRIBE_ACTIVATE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ACTIVATE will subscribe to */
  #define NFCT_SUBSCRIBE_ACTIVATE_CHIDX_Pos (0UL)
  #define NFCT_SUBSCRIBE_ACTIVATE_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_ACTIVATE_CHIDX_Pos)
  #define NFCT_SUBSCRIBE_ACTIVATE_CHIDX_Min (0x00UL)
  #define NFCT_SUBSCRIBE_ACTIVATE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_SUBSCRIBE_ACTIVATE_EN_Pos (31UL)
  #define NFCT_SUBSCRIBE_ACTIVATE_EN_Msk (0x1UL << NFCT_SUBSCRIBE_ACTIVATE_EN_Pos)
  #define NFCT_SUBSCRIBE_ACTIVATE_EN_Min (0x0UL)
  #define NFCT_SUBSCRIBE_ACTIVATE_EN_Max (0x1UL)
  #define NFCT_SUBSCRIBE_ACTIVATE_EN_Disabled (0x0UL)
  #define NFCT_SUBSCRIBE_ACTIVATE_EN_Enabled (0x1UL)


/* NFCT_SUBSCRIBE_DISABLE: Subscribe configuration for task DISABLE */
  #define NFCT_SUBSCRIBE_DISABLE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLE will subscribe to */
  #define NFCT_SUBSCRIBE_DISABLE_CHIDX_Pos (0UL)
  #define NFCT_SUBSCRIBE_DISABLE_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_DISABLE_CHIDX_Pos)
  #define NFCT_SUBSCRIBE_DISABLE_CHIDX_Min (0x00UL)
  #define NFCT_SUBSCRIBE_DISABLE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_SUBSCRIBE_DISABLE_EN_Pos (31UL)
  #define NFCT_SUBSCRIBE_DISABLE_EN_Msk (0x1UL << NFCT_SUBSCRIBE_DISABLE_EN_Pos)
  #define NFCT_SUBSCRIBE_DISABLE_EN_Min (0x0UL)
  #define NFCT_SUBSCRIBE_DISABLE_EN_Max (0x1UL)
  #define NFCT_SUBSCRIBE_DISABLE_EN_Disabled (0x0UL)
  #define NFCT_SUBSCRIBE_DISABLE_EN_Enabled (0x1UL)


/* NFCT_SUBSCRIBE_SENSE: Subscribe configuration for task SENSE */
  #define NFCT_SUBSCRIBE_SENSE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SENSE will subscribe to */
  #define NFCT_SUBSCRIBE_SENSE_CHIDX_Pos (0UL)
  #define NFCT_SUBSCRIBE_SENSE_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_SENSE_CHIDX_Pos)
  #define NFCT_SUBSCRIBE_SENSE_CHIDX_Min (0x00UL)
  #define NFCT_SUBSCRIBE_SENSE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_SUBSCRIBE_SENSE_EN_Pos (31UL)
  #define NFCT_SUBSCRIBE_SENSE_EN_Msk (0x1UL << NFCT_SUBSCRIBE_SENSE_EN_Pos)
  #define NFCT_SUBSCRIBE_SENSE_EN_Min (0x0UL)
  #define NFCT_SUBSCRIBE_SENSE_EN_Max (0x1UL)
  #define NFCT_SUBSCRIBE_SENSE_EN_Disabled (0x0UL)
  #define NFCT_SUBSCRIBE_SENSE_EN_Enabled (0x1UL)


/* NFCT_SUBSCRIBE_STARTTX: Subscribe configuration for task STARTTX */
  #define NFCT_SUBSCRIBE_STARTTX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STARTTX will subscribe to */
  #define NFCT_SUBSCRIBE_STARTTX_CHIDX_Pos (0UL)
  #define NFCT_SUBSCRIBE_STARTTX_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_STARTTX_CHIDX_Pos)
  #define NFCT_SUBSCRIBE_STARTTX_CHIDX_Min (0x00UL)
  #define NFCT_SUBSCRIBE_STARTTX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_SUBSCRIBE_STARTTX_EN_Pos (31UL)
  #define NFCT_SUBSCRIBE_STARTTX_EN_Msk (0x1UL << NFCT_SUBSCRIBE_STARTTX_EN_Pos)
  #define NFCT_SUBSCRIBE_STARTTX_EN_Min (0x0UL)
  #define NFCT_SUBSCRIBE_STARTTX_EN_Max (0x1UL)
  #define NFCT_SUBSCRIBE_STARTTX_EN_Disabled (0x0UL)
  #define NFCT_SUBSCRIBE_STARTTX_EN_Enabled (0x1UL)


/* NFCT_SUBSCRIBE_STOPTX: Subscribe configuration for task STOPTX */
  #define NFCT_SUBSCRIBE_STOPTX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOPTX will subscribe to */
  #define NFCT_SUBSCRIBE_STOPTX_CHIDX_Pos (0UL)
  #define NFCT_SUBSCRIBE_STOPTX_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_STOPTX_CHIDX_Pos)
  #define NFCT_SUBSCRIBE_STOPTX_CHIDX_Min (0x00UL)
  #define NFCT_SUBSCRIBE_STOPTX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_SUBSCRIBE_STOPTX_EN_Pos (31UL)
  #define NFCT_SUBSCRIBE_STOPTX_EN_Msk (0x1UL << NFCT_SUBSCRIBE_STOPTX_EN_Pos)
  #define NFCT_SUBSCRIBE_STOPTX_EN_Min (0x0UL)
  #define NFCT_SUBSCRIBE_STOPTX_EN_Max (0x1UL)
  #define NFCT_SUBSCRIBE_STOPTX_EN_Disabled (0x0UL)
  #define NFCT_SUBSCRIBE_STOPTX_EN_Enabled (0x1UL)


/* NFCT_SUBSCRIBE_ENABLERXDATA: Subscribe configuration for task ENABLERXDATA */
  #define NFCT_SUBSCRIBE_ENABLERXDATA_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLERXDATA will subscribe to */
  #define NFCT_SUBSCRIBE_ENABLERXDATA_CHIDX_Pos (0UL)
  #define NFCT_SUBSCRIBE_ENABLERXDATA_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_ENABLERXDATA_CHIDX_Pos)
  #define NFCT_SUBSCRIBE_ENABLERXDATA_CHIDX_Min (0x00UL)
  #define NFCT_SUBSCRIBE_ENABLERXDATA_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_SUBSCRIBE_ENABLERXDATA_EN_Pos (31UL)
  #define NFCT_SUBSCRIBE_ENABLERXDATA_EN_Msk (0x1UL << NFCT_SUBSCRIBE_ENABLERXDATA_EN_Pos)
  #define NFCT_SUBSCRIBE_ENABLERXDATA_EN_Min (0x0UL)
  #define NFCT_SUBSCRIBE_ENABLERXDATA_EN_Max (0x1UL)
  #define NFCT_SUBSCRIBE_ENABLERXDATA_EN_Disabled (0x0UL)
  #define NFCT_SUBSCRIBE_ENABLERXDATA_EN_Enabled (0x1UL)


/* NFCT_SUBSCRIBE_GOIDLE: Subscribe configuration for task GOIDLE */
  #define NFCT_SUBSCRIBE_GOIDLE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task GOIDLE will subscribe to */
  #define NFCT_SUBSCRIBE_GOIDLE_CHIDX_Pos (0UL)
  #define NFCT_SUBSCRIBE_GOIDLE_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_GOIDLE_CHIDX_Pos)
  #define NFCT_SUBSCRIBE_GOIDLE_CHIDX_Min (0x00UL)
  #define NFCT_SUBSCRIBE_GOIDLE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_SUBSCRIBE_GOIDLE_EN_Pos (31UL)
  #define NFCT_SUBSCRIBE_GOIDLE_EN_Msk (0x1UL << NFCT_SUBSCRIBE_GOIDLE_EN_Pos)
  #define NFCT_SUBSCRIBE_GOIDLE_EN_Min (0x0UL)
  #define NFCT_SUBSCRIBE_GOIDLE_EN_Max (0x1UL)
  #define NFCT_SUBSCRIBE_GOIDLE_EN_Disabled (0x0UL)
  #define NFCT_SUBSCRIBE_GOIDLE_EN_Enabled (0x1UL)


/* NFCT_SUBSCRIBE_GOSLEEP: Subscribe configuration for task GOSLEEP */
  #define NFCT_SUBSCRIBE_GOSLEEP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task GOSLEEP will subscribe to */
  #define NFCT_SUBSCRIBE_GOSLEEP_CHIDX_Pos (0UL)
  #define NFCT_SUBSCRIBE_GOSLEEP_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_GOSLEEP_CHIDX_Pos)
  #define NFCT_SUBSCRIBE_GOSLEEP_CHIDX_Min (0x00UL)
  #define NFCT_SUBSCRIBE_GOSLEEP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_SUBSCRIBE_GOSLEEP_EN_Pos (31UL)
  #define NFCT_SUBSCRIBE_GOSLEEP_EN_Msk (0x1UL << NFCT_SUBSCRIBE_GOSLEEP_EN_Pos)
  #define NFCT_SUBSCRIBE_GOSLEEP_EN_Min (0x0UL)
  #define NFCT_SUBSCRIBE_GOSLEEP_EN_Max (0x1UL)
  #define NFCT_SUBSCRIBE_GOSLEEP_EN_Disabled (0x0UL)
  #define NFCT_SUBSCRIBE_GOSLEEP_EN_Enabled (0x1UL)


/* NFCT_EVENTS_READY: The NFCT peripheral is ready to receive and send frames */
  #define NFCT_EVENTS_READY_ResetValue (0x00000000UL)

/* EVENTS_READY @Bit 0 : The NFCT peripheral is ready to receive and send frames */
  #define NFCT_EVENTS_READY_EVENTS_READY_Pos (0UL)
  #define NFCT_EVENTS_READY_EVENTS_READY_Msk (0x1UL << NFCT_EVENTS_READY_EVENTS_READY_Pos)
  #define NFCT_EVENTS_READY_EVENTS_READY_Min (0x0UL)
  #define NFCT_EVENTS_READY_EVENTS_READY_Max (0x1UL)
  #define NFCT_EVENTS_READY_EVENTS_READY_NotGenerated (0x0UL)
  #define NFCT_EVENTS_READY_EVENTS_READY_Generated (0x1UL)


/* NFCT_EVENTS_FIELDDETECTED: Remote NFC field detected */
  #define NFCT_EVENTS_FIELDDETECTED_ResetValue (0x00000000UL)

/* EVENTS_FIELDDETECTED @Bit 0 : Remote NFC field detected */
  #define NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Pos (0UL)
  #define NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Msk (0x1UL << NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Pos) /*!<
                                                                            Bit mask of EVENTS_FIELDDETECTED field.*/
  #define NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Min (0x0UL)
  #define NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Max (0x1UL)
  #define NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_NotGenerated (0x0UL)
  #define NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Generated (0x1UL)


/* NFCT_EVENTS_FIELDLOST: Remote NFC field lost */
  #define NFCT_EVENTS_FIELDLOST_ResetValue (0x00000000UL)

/* EVENTS_FIELDLOST @Bit 0 : Remote NFC field lost */
  #define NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Pos (0UL)
  #define NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Msk (0x1UL << NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Pos) /*!< Bit mask of
                                                                            EVENTS_FIELDLOST field.*/
  #define NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Min (0x0UL)
  #define NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Max (0x1UL)
  #define NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_NotGenerated (0x0UL)
  #define NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Generated (0x1UL)


/* NFCT_EVENTS_TXFRAMESTART: Marks the start of the first symbol of a transmitted frame */
  #define NFCT_EVENTS_TXFRAMESTART_ResetValue (0x00000000UL)

/* EVENTS_TXFRAMESTART @Bit 0 : Marks the start of the first symbol of a transmitted frame */
  #define NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Pos (0UL)
  #define NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Msk (0x1UL << NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Pos) /*!< Bit
                                                                            mask of EVENTS_TXFRAMESTART field.*/
  #define NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Min (0x0UL)
  #define NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Max (0x1UL)
  #define NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_NotGenerated (0x0UL)
  #define NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Generated (0x1UL)


/* NFCT_EVENTS_TXFRAMEEND: Marks the end of the last transmitted on-air symbol of a frame */
  #define NFCT_EVENTS_TXFRAMEEND_ResetValue (0x00000000UL)

/* EVENTS_TXFRAMEEND @Bit 0 : Marks the end of the last transmitted on-air symbol of a frame */
  #define NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Pos (0UL)
  #define NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Msk (0x1UL << NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Pos) /*!< Bit mask of
                                                                            EVENTS_TXFRAMEEND field.*/
  #define NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Min (0x0UL)
  #define NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Max (0x1UL)
  #define NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_NotGenerated (0x0UL)
  #define NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Generated (0x1UL)


/* NFCT_EVENTS_RXFRAMESTART: Marks the end of the first symbol of a received frame */
  #define NFCT_EVENTS_RXFRAMESTART_ResetValue (0x00000000UL)

/* EVENTS_RXFRAMESTART @Bit 0 : Marks the end of the first symbol of a received frame */
  #define NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Pos (0UL)
  #define NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Msk (0x1UL << NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Pos) /*!< Bit
                                                                            mask of EVENTS_RXFRAMESTART field.*/
  #define NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Min (0x0UL)
  #define NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Max (0x1UL)
  #define NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_NotGenerated (0x0UL)
  #define NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Generated (0x1UL)


/* NFCT_EVENTS_RXFRAMEEND: Received data has been checked (CRC, parity) and transferred to RAM, and EasyDMA has ended accessing
                            the RX buffer */

  #define NFCT_EVENTS_RXFRAMEEND_ResetValue (0x00000000UL)

/* EVENTS_RXFRAMEEND @Bit 0 : Received data has been checked (CRC, parity) and transferred to RAM, and EasyDMA has ended
                              accessing the RX buffer */

  #define NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Pos (0UL)
  #define NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Msk (0x1UL << NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Pos) /*!< Bit mask of
                                                                            EVENTS_RXFRAMEEND field.*/
  #define NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Min (0x0UL)
  #define NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Max (0x1UL)
  #define NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_NotGenerated (0x0UL)
  #define NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Generated (0x1UL)


/* NFCT_EVENTS_ERROR: NFC error reported. The ERRORSTATUS register contains details on the source of the error. */
  #define NFCT_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : NFC error reported. The ERRORSTATUS register contains details on the source of the error. */
  #define NFCT_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define NFCT_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << NFCT_EVENTS_ERROR_EVENTS_ERROR_Pos)
  #define NFCT_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define NFCT_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define NFCT_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define NFCT_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* NFCT_EVENTS_RXERROR: NFC RX frame error reported. The FRAMESTATUS.RX register contains details on the source of the error. */
  #define NFCT_EVENTS_RXERROR_ResetValue (0x00000000UL)

/* EVENTS_RXERROR @Bit 0 : NFC RX frame error reported. The FRAMESTATUS.RX register contains details on the source of the error.
                           */

  #define NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Pos (0UL)
  #define NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Msk (0x1UL << NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Pos) /*!< Bit mask of
                                                                            EVENTS_RXERROR field.*/
  #define NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Min (0x0UL)
  #define NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Max (0x1UL)
  #define NFCT_EVENTS_RXERROR_EVENTS_RXERROR_NotGenerated (0x0UL)
  #define NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Generated (0x1UL)


/* NFCT_EVENTS_ENDRX: RX buffer (as defined by PACKETPTR and MAXLEN) in Data RAM full. */
  #define NFCT_EVENTS_ENDRX_ResetValue (0x00000000UL)

/* EVENTS_ENDRX @Bit 0 : RX buffer (as defined by PACKETPTR and MAXLEN) in Data RAM full. */
  #define NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Pos (0UL)
  #define NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Msk (0x1UL << NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Pos)
  #define NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Min (0x0UL)
  #define NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Max (0x1UL)
  #define NFCT_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated (0x0UL)
  #define NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Generated (0x1UL)


/* NFCT_EVENTS_ENDTX: Transmission of data in RAM has ended, and EasyDMA has ended accessing the TX buffer */
  #define NFCT_EVENTS_ENDTX_ResetValue (0x00000000UL)

/* EVENTS_ENDTX @Bit 0 : Transmission of data in RAM has ended, and EasyDMA has ended accessing the TX buffer */
  #define NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Pos (0UL)
  #define NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Msk (0x1UL << NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Pos)
  #define NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Min (0x0UL)
  #define NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Max (0x1UL)
  #define NFCT_EVENTS_ENDTX_EVENTS_ENDTX_NotGenerated (0x0UL)
  #define NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Generated (0x1UL)


/* NFCT_EVENTS_AUTOCOLRESSTARTED: Auto collision resolution process has started */
  #define NFCT_EVENTS_AUTOCOLRESSTARTED_ResetValue (0x00000000UL)

/* EVENTS_AUTOCOLRESSTARTED @Bit 0 : Auto collision resolution process has started */
  #define NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Pos (0UL)
  #define NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Msk (0x1UL << NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Pos)
                                                                            /*!< Bit mask of EVENTS_AUTOCOLRESSTARTED field.*/
  #define NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Min (0x0UL) /*!< Min enumerator value of
                                                                            EVENTS_AUTOCOLRESSTARTED field.*/
  #define NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Max (0x1UL) /*!< Max enumerator value of
                                                                            EVENTS_AUTOCOLRESSTARTED field.*/
  #define NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_NotGenerated (0x0UL)
  #define NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Generated (0x1UL)


/* NFCT_EVENTS_COLLISION: NFC auto collision resolution error reported. */
  #define NFCT_EVENTS_COLLISION_ResetValue (0x00000000UL)

/* EVENTS_COLLISION @Bit 0 : NFC auto collision resolution error reported. */
  #define NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Pos (0UL)
  #define NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Msk (0x1UL << NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Pos) /*!< Bit mask of
                                                                            EVENTS_COLLISION field.*/
  #define NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Min (0x0UL)
  #define NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Max (0x1UL)
  #define NFCT_EVENTS_COLLISION_EVENTS_COLLISION_NotGenerated (0x0UL)
  #define NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Generated (0x1UL)


/* NFCT_EVENTS_SELECTED: NFC auto collision resolution successfully completed */
  #define NFCT_EVENTS_SELECTED_ResetValue (0x00000000UL)

/* EVENTS_SELECTED @Bit 0 : NFC auto collision resolution successfully completed */
  #define NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Pos (0UL)
  #define NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Msk (0x1UL << NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Pos) /*!< Bit mask of
                                                                            EVENTS_SELECTED field.*/
  #define NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Min (0x0UL)
  #define NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Max (0x1UL)
  #define NFCT_EVENTS_SELECTED_EVENTS_SELECTED_NotGenerated (0x0UL)
  #define NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Generated (0x1UL)


/* NFCT_EVENTS_STARTED: EasyDMA is ready to receive or send frames. */
  #define NFCT_EVENTS_STARTED_ResetValue (0x00000000UL)

/* EVENTS_STARTED @Bit 0 : EasyDMA is ready to receive or send frames. */
  #define NFCT_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL)
  #define NFCT_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << NFCT_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_STARTED field.*/
  #define NFCT_EVENTS_STARTED_EVENTS_STARTED_Min (0x0UL)
  #define NFCT_EVENTS_STARTED_EVENTS_STARTED_Max (0x1UL)
  #define NFCT_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0x0UL)
  #define NFCT_EVENTS_STARTED_EVENTS_STARTED_Generated (0x1UL)


/* NFCT_PUBLISH_READY: Publish configuration for event READY */
  #define NFCT_PUBLISH_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define NFCT_PUBLISH_READY_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_READY_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_READY_CHIDX_Pos)
  #define NFCT_PUBLISH_READY_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_READY_EN_Pos (31UL)
  #define NFCT_PUBLISH_READY_EN_Msk (0x1UL << NFCT_PUBLISH_READY_EN_Pos)
  #define NFCT_PUBLISH_READY_EN_Min (0x0UL)
  #define NFCT_PUBLISH_READY_EN_Max (0x1UL)
  #define NFCT_PUBLISH_READY_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_READY_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_FIELDDETECTED: Publish configuration for event FIELDDETECTED */
  #define NFCT_PUBLISH_FIELDDETECTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event FIELDDETECTED will publish to */
  #define NFCT_PUBLISH_FIELDDETECTED_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_FIELDDETECTED_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_FIELDDETECTED_CHIDX_Pos)
  #define NFCT_PUBLISH_FIELDDETECTED_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_FIELDDETECTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_FIELDDETECTED_EN_Pos (31UL)
  #define NFCT_PUBLISH_FIELDDETECTED_EN_Msk (0x1UL << NFCT_PUBLISH_FIELDDETECTED_EN_Pos)
  #define NFCT_PUBLISH_FIELDDETECTED_EN_Min (0x0UL)
  #define NFCT_PUBLISH_FIELDDETECTED_EN_Max (0x1UL)
  #define NFCT_PUBLISH_FIELDDETECTED_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_FIELDDETECTED_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_FIELDLOST: Publish configuration for event FIELDLOST */
  #define NFCT_PUBLISH_FIELDLOST_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event FIELDLOST will publish to */
  #define NFCT_PUBLISH_FIELDLOST_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_FIELDLOST_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_FIELDLOST_CHIDX_Pos)
  #define NFCT_PUBLISH_FIELDLOST_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_FIELDLOST_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_FIELDLOST_EN_Pos (31UL)
  #define NFCT_PUBLISH_FIELDLOST_EN_Msk (0x1UL << NFCT_PUBLISH_FIELDLOST_EN_Pos)
  #define NFCT_PUBLISH_FIELDLOST_EN_Min (0x0UL)
  #define NFCT_PUBLISH_FIELDLOST_EN_Max (0x1UL)
  #define NFCT_PUBLISH_FIELDLOST_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_FIELDLOST_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_TXFRAMESTART: Publish configuration for event TXFRAMESTART */
  #define NFCT_PUBLISH_TXFRAMESTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event TXFRAMESTART will publish to */
  #define NFCT_PUBLISH_TXFRAMESTART_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_TXFRAMESTART_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_TXFRAMESTART_CHIDX_Pos)
  #define NFCT_PUBLISH_TXFRAMESTART_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_TXFRAMESTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_TXFRAMESTART_EN_Pos (31UL)
  #define NFCT_PUBLISH_TXFRAMESTART_EN_Msk (0x1UL << NFCT_PUBLISH_TXFRAMESTART_EN_Pos)
  #define NFCT_PUBLISH_TXFRAMESTART_EN_Min (0x0UL)
  #define NFCT_PUBLISH_TXFRAMESTART_EN_Max (0x1UL)
  #define NFCT_PUBLISH_TXFRAMESTART_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_TXFRAMESTART_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_TXFRAMEEND: Publish configuration for event TXFRAMEEND */
  #define NFCT_PUBLISH_TXFRAMEEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event TXFRAMEEND will publish to */
  #define NFCT_PUBLISH_TXFRAMEEND_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_TXFRAMEEND_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_TXFRAMEEND_CHIDX_Pos)
  #define NFCT_PUBLISH_TXFRAMEEND_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_TXFRAMEEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_TXFRAMEEND_EN_Pos (31UL)
  #define NFCT_PUBLISH_TXFRAMEEND_EN_Msk (0x1UL << NFCT_PUBLISH_TXFRAMEEND_EN_Pos)
  #define NFCT_PUBLISH_TXFRAMEEND_EN_Min (0x0UL)
  #define NFCT_PUBLISH_TXFRAMEEND_EN_Max (0x1UL)
  #define NFCT_PUBLISH_TXFRAMEEND_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_TXFRAMEEND_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_RXFRAMESTART: Publish configuration for event RXFRAMESTART */
  #define NFCT_PUBLISH_RXFRAMESTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RXFRAMESTART will publish to */
  #define NFCT_PUBLISH_RXFRAMESTART_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_RXFRAMESTART_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_RXFRAMESTART_CHIDX_Pos)
  #define NFCT_PUBLISH_RXFRAMESTART_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_RXFRAMESTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_RXFRAMESTART_EN_Pos (31UL)
  #define NFCT_PUBLISH_RXFRAMESTART_EN_Msk (0x1UL << NFCT_PUBLISH_RXFRAMESTART_EN_Pos)
  #define NFCT_PUBLISH_RXFRAMESTART_EN_Min (0x0UL)
  #define NFCT_PUBLISH_RXFRAMESTART_EN_Max (0x1UL)
  #define NFCT_PUBLISH_RXFRAMESTART_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_RXFRAMESTART_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_RXFRAMEEND: Publish configuration for event RXFRAMEEND */
  #define NFCT_PUBLISH_RXFRAMEEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RXFRAMEEND will publish to */
  #define NFCT_PUBLISH_RXFRAMEEND_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_RXFRAMEEND_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_RXFRAMEEND_CHIDX_Pos)
  #define NFCT_PUBLISH_RXFRAMEEND_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_RXFRAMEEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_RXFRAMEEND_EN_Pos (31UL)
  #define NFCT_PUBLISH_RXFRAMEEND_EN_Msk (0x1UL << NFCT_PUBLISH_RXFRAMEEND_EN_Pos)
  #define NFCT_PUBLISH_RXFRAMEEND_EN_Min (0x0UL)
  #define NFCT_PUBLISH_RXFRAMEEND_EN_Max (0x1UL)
  #define NFCT_PUBLISH_RXFRAMEEND_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_RXFRAMEEND_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define NFCT_PUBLISH_ERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define NFCT_PUBLISH_ERROR_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_ERROR_CHIDX_Pos)
  #define NFCT_PUBLISH_ERROR_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_ERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_ERROR_EN_Pos (31UL)
  #define NFCT_PUBLISH_ERROR_EN_Msk (0x1UL << NFCT_PUBLISH_ERROR_EN_Pos)
  #define NFCT_PUBLISH_ERROR_EN_Min (0x0UL)
  #define NFCT_PUBLISH_ERROR_EN_Max (0x1UL)
  #define NFCT_PUBLISH_ERROR_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_ERROR_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_RXERROR: Publish configuration for event RXERROR */
  #define NFCT_PUBLISH_RXERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RXERROR will publish to */
  #define NFCT_PUBLISH_RXERROR_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_RXERROR_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_RXERROR_CHIDX_Pos)
  #define NFCT_PUBLISH_RXERROR_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_RXERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_RXERROR_EN_Pos (31UL)
  #define NFCT_PUBLISH_RXERROR_EN_Msk (0x1UL << NFCT_PUBLISH_RXERROR_EN_Pos)
  #define NFCT_PUBLISH_RXERROR_EN_Min (0x0UL)
  #define NFCT_PUBLISH_RXERROR_EN_Max (0x1UL)
  #define NFCT_PUBLISH_RXERROR_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_RXERROR_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_ENDRX: Publish configuration for event ENDRX */
  #define NFCT_PUBLISH_ENDRX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ENDRX will publish to */
  #define NFCT_PUBLISH_ENDRX_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_ENDRX_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_ENDRX_CHIDX_Pos)
  #define NFCT_PUBLISH_ENDRX_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_ENDRX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_ENDRX_EN_Pos (31UL)
  #define NFCT_PUBLISH_ENDRX_EN_Msk (0x1UL << NFCT_PUBLISH_ENDRX_EN_Pos)
  #define NFCT_PUBLISH_ENDRX_EN_Min (0x0UL)
  #define NFCT_PUBLISH_ENDRX_EN_Max (0x1UL)
  #define NFCT_PUBLISH_ENDRX_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_ENDRX_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_ENDTX: Publish configuration for event ENDTX */
  #define NFCT_PUBLISH_ENDTX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ENDTX will publish to */
  #define NFCT_PUBLISH_ENDTX_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_ENDTX_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_ENDTX_CHIDX_Pos)
  #define NFCT_PUBLISH_ENDTX_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_ENDTX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_ENDTX_EN_Pos (31UL)
  #define NFCT_PUBLISH_ENDTX_EN_Msk (0x1UL << NFCT_PUBLISH_ENDTX_EN_Pos)
  #define NFCT_PUBLISH_ENDTX_EN_Min (0x0UL)
  #define NFCT_PUBLISH_ENDTX_EN_Max (0x1UL)
  #define NFCT_PUBLISH_ENDTX_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_ENDTX_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_AUTOCOLRESSTARTED: Publish configuration for event AUTOCOLRESSTARTED */
  #define NFCT_PUBLISH_AUTOCOLRESSTARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event AUTOCOLRESSTARTED will publish to */
  #define NFCT_PUBLISH_AUTOCOLRESSTARTED_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_AUTOCOLRESSTARTED_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_AUTOCOLRESSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define NFCT_PUBLISH_AUTOCOLRESSTARTED_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_AUTOCOLRESSTARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_AUTOCOLRESSTARTED_EN_Pos (31UL)
  #define NFCT_PUBLISH_AUTOCOLRESSTARTED_EN_Msk (0x1UL << NFCT_PUBLISH_AUTOCOLRESSTARTED_EN_Pos)
  #define NFCT_PUBLISH_AUTOCOLRESSTARTED_EN_Min (0x0UL)
  #define NFCT_PUBLISH_AUTOCOLRESSTARTED_EN_Max (0x1UL)
  #define NFCT_PUBLISH_AUTOCOLRESSTARTED_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_AUTOCOLRESSTARTED_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_COLLISION: Publish configuration for event COLLISION */
  #define NFCT_PUBLISH_COLLISION_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event COLLISION will publish to */
  #define NFCT_PUBLISH_COLLISION_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_COLLISION_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_COLLISION_CHIDX_Pos)
  #define NFCT_PUBLISH_COLLISION_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_COLLISION_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_COLLISION_EN_Pos (31UL)
  #define NFCT_PUBLISH_COLLISION_EN_Msk (0x1UL << NFCT_PUBLISH_COLLISION_EN_Pos)
  #define NFCT_PUBLISH_COLLISION_EN_Min (0x0UL)
  #define NFCT_PUBLISH_COLLISION_EN_Max (0x1UL)
  #define NFCT_PUBLISH_COLLISION_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_COLLISION_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_SELECTED: Publish configuration for event SELECTED */
  #define NFCT_PUBLISH_SELECTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SELECTED will publish to */
  #define NFCT_PUBLISH_SELECTED_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_SELECTED_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_SELECTED_CHIDX_Pos)
  #define NFCT_PUBLISH_SELECTED_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_SELECTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_SELECTED_EN_Pos (31UL)
  #define NFCT_PUBLISH_SELECTED_EN_Msk (0x1UL << NFCT_PUBLISH_SELECTED_EN_Pos)
  #define NFCT_PUBLISH_SELECTED_EN_Min (0x0UL)
  #define NFCT_PUBLISH_SELECTED_EN_Max (0x1UL)
  #define NFCT_PUBLISH_SELECTED_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_SELECTED_EN_Enabled (0x1UL)


/* NFCT_PUBLISH_STARTED: Publish configuration for event STARTED */
  #define NFCT_PUBLISH_STARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STARTED will publish to */
  #define NFCT_PUBLISH_STARTED_CHIDX_Pos (0UL)
  #define NFCT_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_STARTED_CHIDX_Pos)
  #define NFCT_PUBLISH_STARTED_CHIDX_Min (0x00UL)
  #define NFCT_PUBLISH_STARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define NFCT_PUBLISH_STARTED_EN_Pos (31UL)
  #define NFCT_PUBLISH_STARTED_EN_Msk (0x1UL << NFCT_PUBLISH_STARTED_EN_Pos)
  #define NFCT_PUBLISH_STARTED_EN_Min (0x0UL)
  #define NFCT_PUBLISH_STARTED_EN_Max (0x1UL)
  #define NFCT_PUBLISH_STARTED_EN_Disabled (0x0UL)
  #define NFCT_PUBLISH_STARTED_EN_Enabled (0x1UL)


/* NFCT_SHORTS: Shortcuts between local events and tasks */
  #define NFCT_SHORTS_ResetValue (0x00000000UL)

/* FIELDDETECTED_ACTIVATE @Bit 0 : Shortcut between event FIELDDETECTED and task ACTIVATE */
  #define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Pos (0UL)
  #define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Msk (0x1UL << NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Pos) /*!< Bit mask of
                                                                            FIELDDETECTED_ACTIVATE field.*/
  #define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Min (0x0UL)
  #define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Max (0x1UL)
  #define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Disabled (0x0UL)
  #define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Enabled (0x1UL)

/* FIELDLOST_SENSE @Bit 1 : Shortcut between event FIELDLOST and task SENSE */
  #define NFCT_SHORTS_FIELDLOST_SENSE_Pos (1UL)
  #define NFCT_SHORTS_FIELDLOST_SENSE_Msk (0x1UL << NFCT_SHORTS_FIELDLOST_SENSE_Pos)
  #define NFCT_SHORTS_FIELDLOST_SENSE_Min (0x0UL)
  #define NFCT_SHORTS_FIELDLOST_SENSE_Max (0x1UL)
  #define NFCT_SHORTS_FIELDLOST_SENSE_Disabled (0x0UL)
  #define NFCT_SHORTS_FIELDLOST_SENSE_Enabled (0x1UL)

/* TXFRAMEEND_ENABLERXDATA @Bit 5 : Shortcut between event TXFRAMEEND and task ENABLERXDATA */
  #define NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Pos (5UL)
  #define NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Msk (0x1UL << NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Pos) /*!< Bit mask of
                                                                            TXFRAMEEND_ENABLERXDATA field.*/
  #define NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Min (0x0UL)
  #define NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Max (0x1UL)
  #define NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Disabled (0x0UL)
  #define NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Enabled (0x1UL)


/* NFCT_INTEN: Enable or disable interrupt */
  #define NFCT_INTEN_ResetValue (0x00000000UL)

/* READY @Bit 0 : Enable or disable interrupt for event READY */
  #define NFCT_INTEN_READY_Pos (0UL)
  #define NFCT_INTEN_READY_Msk (0x1UL << NFCT_INTEN_READY_Pos)
  #define NFCT_INTEN_READY_Min (0x0UL)
  #define NFCT_INTEN_READY_Max (0x1UL)
  #define NFCT_INTEN_READY_Disabled (0x0UL)
  #define NFCT_INTEN_READY_Enabled (0x1UL)

/* FIELDDETECTED @Bit 1 : Enable or disable interrupt for event FIELDDETECTED */
  #define NFCT_INTEN_FIELDDETECTED_Pos (1UL)
  #define NFCT_INTEN_FIELDDETECTED_Msk (0x1UL << NFCT_INTEN_FIELDDETECTED_Pos)
  #define NFCT_INTEN_FIELDDETECTED_Min (0x0UL)
  #define NFCT_INTEN_FIELDDETECTED_Max (0x1UL)
  #define NFCT_INTEN_FIELDDETECTED_Disabled (0x0UL)
  #define NFCT_INTEN_FIELDDETECTED_Enabled (0x1UL)

/* FIELDLOST @Bit 2 : Enable or disable interrupt for event FIELDLOST */
  #define NFCT_INTEN_FIELDLOST_Pos (2UL)
  #define NFCT_INTEN_FIELDLOST_Msk (0x1UL << NFCT_INTEN_FIELDLOST_Pos)
  #define NFCT_INTEN_FIELDLOST_Min (0x0UL)
  #define NFCT_INTEN_FIELDLOST_Max (0x1UL)
  #define NFCT_INTEN_FIELDLOST_Disabled (0x0UL)
  #define NFCT_INTEN_FIELDLOST_Enabled (0x1UL)

/* TXFRAMESTART @Bit 3 : Enable or disable interrupt for event TXFRAMESTART */
  #define NFCT_INTEN_TXFRAMESTART_Pos (3UL)
  #define NFCT_INTEN_TXFRAMESTART_Msk (0x1UL << NFCT_INTEN_TXFRAMESTART_Pos)
  #define NFCT_INTEN_TXFRAMESTART_Min (0x0UL)
  #define NFCT_INTEN_TXFRAMESTART_Max (0x1UL)
  #define NFCT_INTEN_TXFRAMESTART_Disabled (0x0UL)
  #define NFCT_INTEN_TXFRAMESTART_Enabled (0x1UL)

/* TXFRAMEEND @Bit 4 : Enable or disable interrupt for event TXFRAMEEND */
  #define NFCT_INTEN_TXFRAMEEND_Pos (4UL)
  #define NFCT_INTEN_TXFRAMEEND_Msk (0x1UL << NFCT_INTEN_TXFRAMEEND_Pos)
  #define NFCT_INTEN_TXFRAMEEND_Min (0x0UL)
  #define NFCT_INTEN_TXFRAMEEND_Max (0x1UL)
  #define NFCT_INTEN_TXFRAMEEND_Disabled (0x0UL)
  #define NFCT_INTEN_TXFRAMEEND_Enabled (0x1UL)

/* RXFRAMESTART @Bit 5 : Enable or disable interrupt for event RXFRAMESTART */
  #define NFCT_INTEN_RXFRAMESTART_Pos (5UL)
  #define NFCT_INTEN_RXFRAMESTART_Msk (0x1UL << NFCT_INTEN_RXFRAMESTART_Pos)
  #define NFCT_INTEN_RXFRAMESTART_Min (0x0UL)
  #define NFCT_INTEN_RXFRAMESTART_Max (0x1UL)
  #define NFCT_INTEN_RXFRAMESTART_Disabled (0x0UL)
  #define NFCT_INTEN_RXFRAMESTART_Enabled (0x1UL)

/* RXFRAMEEND @Bit 6 : Enable or disable interrupt for event RXFRAMEEND */
  #define NFCT_INTEN_RXFRAMEEND_Pos (6UL)
  #define NFCT_INTEN_RXFRAMEEND_Msk (0x1UL << NFCT_INTEN_RXFRAMEEND_Pos)
  #define NFCT_INTEN_RXFRAMEEND_Min (0x0UL)
  #define NFCT_INTEN_RXFRAMEEND_Max (0x1UL)
  #define NFCT_INTEN_RXFRAMEEND_Disabled (0x0UL)
  #define NFCT_INTEN_RXFRAMEEND_Enabled (0x1UL)

/* ERROR @Bit 7 : Enable or disable interrupt for event ERROR */
  #define NFCT_INTEN_ERROR_Pos (7UL)
  #define NFCT_INTEN_ERROR_Msk (0x1UL << NFCT_INTEN_ERROR_Pos)
  #define NFCT_INTEN_ERROR_Min (0x0UL)
  #define NFCT_INTEN_ERROR_Max (0x1UL)
  #define NFCT_INTEN_ERROR_Disabled (0x0UL)
  #define NFCT_INTEN_ERROR_Enabled (0x1UL)

/* RXERROR @Bit 10 : Enable or disable interrupt for event RXERROR */
  #define NFCT_INTEN_RXERROR_Pos (10UL)
  #define NFCT_INTEN_RXERROR_Msk (0x1UL << NFCT_INTEN_RXERROR_Pos)
  #define NFCT_INTEN_RXERROR_Min (0x0UL)
  #define NFCT_INTEN_RXERROR_Max (0x1UL)
  #define NFCT_INTEN_RXERROR_Disabled (0x0UL)
  #define NFCT_INTEN_RXERROR_Enabled (0x1UL)

/* ENDRX @Bit 11 : Enable or disable interrupt for event ENDRX */
  #define NFCT_INTEN_ENDRX_Pos (11UL)
  #define NFCT_INTEN_ENDRX_Msk (0x1UL << NFCT_INTEN_ENDRX_Pos)
  #define NFCT_INTEN_ENDRX_Min (0x0UL)
  #define NFCT_INTEN_ENDRX_Max (0x1UL)
  #define NFCT_INTEN_ENDRX_Disabled (0x0UL)
  #define NFCT_INTEN_ENDRX_Enabled (0x1UL)

/* ENDTX @Bit 12 : Enable or disable interrupt for event ENDTX */
  #define NFCT_INTEN_ENDTX_Pos (12UL)
  #define NFCT_INTEN_ENDTX_Msk (0x1UL << NFCT_INTEN_ENDTX_Pos)
  #define NFCT_INTEN_ENDTX_Min (0x0UL)
  #define NFCT_INTEN_ENDTX_Max (0x1UL)
  #define NFCT_INTEN_ENDTX_Disabled (0x0UL)
  #define NFCT_INTEN_ENDTX_Enabled (0x1UL)

/* AUTOCOLRESSTARTED @Bit 14 : Enable or disable interrupt for event AUTOCOLRESSTARTED */
  #define NFCT_INTEN_AUTOCOLRESSTARTED_Pos (14UL)
  #define NFCT_INTEN_AUTOCOLRESSTARTED_Msk (0x1UL << NFCT_INTEN_AUTOCOLRESSTARTED_Pos) /*!< Bit mask of AUTOCOLRESSTARTED
                                                                            field.*/
  #define NFCT_INTEN_AUTOCOLRESSTARTED_Min (0x0UL)
  #define NFCT_INTEN_AUTOCOLRESSTARTED_Max (0x1UL)
  #define NFCT_INTEN_AUTOCOLRESSTARTED_Disabled (0x0UL)
  #define NFCT_INTEN_AUTOCOLRESSTARTED_Enabled (0x1UL)

/* COLLISION @Bit 18 : Enable or disable interrupt for event COLLISION */
  #define NFCT_INTEN_COLLISION_Pos (18UL)
  #define NFCT_INTEN_COLLISION_Msk (0x1UL << NFCT_INTEN_COLLISION_Pos)
  #define NFCT_INTEN_COLLISION_Min (0x0UL)
  #define NFCT_INTEN_COLLISION_Max (0x1UL)
  #define NFCT_INTEN_COLLISION_Disabled (0x0UL)
  #define NFCT_INTEN_COLLISION_Enabled (0x1UL)

/* SELECTED @Bit 19 : Enable or disable interrupt for event SELECTED */
  #define NFCT_INTEN_SELECTED_Pos (19UL)
  #define NFCT_INTEN_SELECTED_Msk (0x1UL << NFCT_INTEN_SELECTED_Pos)
  #define NFCT_INTEN_SELECTED_Min (0x0UL)
  #define NFCT_INTEN_SELECTED_Max (0x1UL)
  #define NFCT_INTEN_SELECTED_Disabled (0x0UL)
  #define NFCT_INTEN_SELECTED_Enabled (0x1UL)

/* STARTED @Bit 20 : Enable or disable interrupt for event STARTED */
  #define NFCT_INTEN_STARTED_Pos (20UL)
  #define NFCT_INTEN_STARTED_Msk (0x1UL << NFCT_INTEN_STARTED_Pos)
  #define NFCT_INTEN_STARTED_Min (0x0UL)
  #define NFCT_INTEN_STARTED_Max (0x1UL)
  #define NFCT_INTEN_STARTED_Disabled (0x0UL)
  #define NFCT_INTEN_STARTED_Enabled (0x1UL)


/* NFCT_INTENSET: Enable interrupt */
  #define NFCT_INTENSET_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to enable interrupt for event READY */
  #define NFCT_INTENSET_READY_Pos (0UL)
  #define NFCT_INTENSET_READY_Msk (0x1UL << NFCT_INTENSET_READY_Pos)
  #define NFCT_INTENSET_READY_Min (0x0UL)
  #define NFCT_INTENSET_READY_Max (0x1UL)
  #define NFCT_INTENSET_READY_Set (0x1UL)
  #define NFCT_INTENSET_READY_Disabled (0x0UL)
  #define NFCT_INTENSET_READY_Enabled (0x1UL)

/* FIELDDETECTED @Bit 1 : Write '1' to enable interrupt for event FIELDDETECTED */
  #define NFCT_INTENSET_FIELDDETECTED_Pos (1UL)
  #define NFCT_INTENSET_FIELDDETECTED_Msk (0x1UL << NFCT_INTENSET_FIELDDETECTED_Pos)
  #define NFCT_INTENSET_FIELDDETECTED_Min (0x0UL)
  #define NFCT_INTENSET_FIELDDETECTED_Max (0x1UL)
  #define NFCT_INTENSET_FIELDDETECTED_Set (0x1UL)
  #define NFCT_INTENSET_FIELDDETECTED_Disabled (0x0UL)
  #define NFCT_INTENSET_FIELDDETECTED_Enabled (0x1UL)

/* FIELDLOST @Bit 2 : Write '1' to enable interrupt for event FIELDLOST */
  #define NFCT_INTENSET_FIELDLOST_Pos (2UL)
  #define NFCT_INTENSET_FIELDLOST_Msk (0x1UL << NFCT_INTENSET_FIELDLOST_Pos)
  #define NFCT_INTENSET_FIELDLOST_Min (0x0UL)
  #define NFCT_INTENSET_FIELDLOST_Max (0x1UL)
  #define NFCT_INTENSET_FIELDLOST_Set (0x1UL)
  #define NFCT_INTENSET_FIELDLOST_Disabled (0x0UL)
  #define NFCT_INTENSET_FIELDLOST_Enabled (0x1UL)

/* TXFRAMESTART @Bit 3 : Write '1' to enable interrupt for event TXFRAMESTART */
  #define NFCT_INTENSET_TXFRAMESTART_Pos (3UL)
  #define NFCT_INTENSET_TXFRAMESTART_Msk (0x1UL << NFCT_INTENSET_TXFRAMESTART_Pos)
  #define NFCT_INTENSET_TXFRAMESTART_Min (0x0UL)
  #define NFCT_INTENSET_TXFRAMESTART_Max (0x1UL)
  #define NFCT_INTENSET_TXFRAMESTART_Set (0x1UL)
  #define NFCT_INTENSET_TXFRAMESTART_Disabled (0x0UL)
  #define NFCT_INTENSET_TXFRAMESTART_Enabled (0x1UL)

/* TXFRAMEEND @Bit 4 : Write '1' to enable interrupt for event TXFRAMEEND */
  #define NFCT_INTENSET_TXFRAMEEND_Pos (4UL)
  #define NFCT_INTENSET_TXFRAMEEND_Msk (0x1UL << NFCT_INTENSET_TXFRAMEEND_Pos)
  #define NFCT_INTENSET_TXFRAMEEND_Min (0x0UL)
  #define NFCT_INTENSET_TXFRAMEEND_Max (0x1UL)
  #define NFCT_INTENSET_TXFRAMEEND_Set (0x1UL)
  #define NFCT_INTENSET_TXFRAMEEND_Disabled (0x0UL)
  #define NFCT_INTENSET_TXFRAMEEND_Enabled (0x1UL)

/* RXFRAMESTART @Bit 5 : Write '1' to enable interrupt for event RXFRAMESTART */
  #define NFCT_INTENSET_RXFRAMESTART_Pos (5UL)
  #define NFCT_INTENSET_RXFRAMESTART_Msk (0x1UL << NFCT_INTENSET_RXFRAMESTART_Pos)
  #define NFCT_INTENSET_RXFRAMESTART_Min (0x0UL)
  #define NFCT_INTENSET_RXFRAMESTART_Max (0x1UL)
  #define NFCT_INTENSET_RXFRAMESTART_Set (0x1UL)
  #define NFCT_INTENSET_RXFRAMESTART_Disabled (0x0UL)
  #define NFCT_INTENSET_RXFRAMESTART_Enabled (0x1UL)

/* RXFRAMEEND @Bit 6 : Write '1' to enable interrupt for event RXFRAMEEND */
  #define NFCT_INTENSET_RXFRAMEEND_Pos (6UL)
  #define NFCT_INTENSET_RXFRAMEEND_Msk (0x1UL << NFCT_INTENSET_RXFRAMEEND_Pos)
  #define NFCT_INTENSET_RXFRAMEEND_Min (0x0UL)
  #define NFCT_INTENSET_RXFRAMEEND_Max (0x1UL)
  #define NFCT_INTENSET_RXFRAMEEND_Set (0x1UL)
  #define NFCT_INTENSET_RXFRAMEEND_Disabled (0x0UL)
  #define NFCT_INTENSET_RXFRAMEEND_Enabled (0x1UL)

/* ERROR @Bit 7 : Write '1' to enable interrupt for event ERROR */
  #define NFCT_INTENSET_ERROR_Pos (7UL)
  #define NFCT_INTENSET_ERROR_Msk (0x1UL << NFCT_INTENSET_ERROR_Pos)
  #define NFCT_INTENSET_ERROR_Min (0x0UL)
  #define NFCT_INTENSET_ERROR_Max (0x1UL)
  #define NFCT_INTENSET_ERROR_Set (0x1UL)
  #define NFCT_INTENSET_ERROR_Disabled (0x0UL)
  #define NFCT_INTENSET_ERROR_Enabled (0x1UL)

/* RXERROR @Bit 10 : Write '1' to enable interrupt for event RXERROR */
  #define NFCT_INTENSET_RXERROR_Pos (10UL)
  #define NFCT_INTENSET_RXERROR_Msk (0x1UL << NFCT_INTENSET_RXERROR_Pos)
  #define NFCT_INTENSET_RXERROR_Min (0x0UL)
  #define NFCT_INTENSET_RXERROR_Max (0x1UL)
  #define NFCT_INTENSET_RXERROR_Set (0x1UL)
  #define NFCT_INTENSET_RXERROR_Disabled (0x0UL)
  #define NFCT_INTENSET_RXERROR_Enabled (0x1UL)

/* ENDRX @Bit 11 : Write '1' to enable interrupt for event ENDRX */
  #define NFCT_INTENSET_ENDRX_Pos (11UL)
  #define NFCT_INTENSET_ENDRX_Msk (0x1UL << NFCT_INTENSET_ENDRX_Pos)
  #define NFCT_INTENSET_ENDRX_Min (0x0UL)
  #define NFCT_INTENSET_ENDRX_Max (0x1UL)
  #define NFCT_INTENSET_ENDRX_Set (0x1UL)
  #define NFCT_INTENSET_ENDRX_Disabled (0x0UL)
  #define NFCT_INTENSET_ENDRX_Enabled (0x1UL)

/* ENDTX @Bit 12 : Write '1' to enable interrupt for event ENDTX */
  #define NFCT_INTENSET_ENDTX_Pos (12UL)
  #define NFCT_INTENSET_ENDTX_Msk (0x1UL << NFCT_INTENSET_ENDTX_Pos)
  #define NFCT_INTENSET_ENDTX_Min (0x0UL)
  #define NFCT_INTENSET_ENDTX_Max (0x1UL)
  #define NFCT_INTENSET_ENDTX_Set (0x1UL)
  #define NFCT_INTENSET_ENDTX_Disabled (0x0UL)
  #define NFCT_INTENSET_ENDTX_Enabled (0x1UL)

/* AUTOCOLRESSTARTED @Bit 14 : Write '1' to enable interrupt for event AUTOCOLRESSTARTED */
  #define NFCT_INTENSET_AUTOCOLRESSTARTED_Pos (14UL)
  #define NFCT_INTENSET_AUTOCOLRESSTARTED_Msk (0x1UL << NFCT_INTENSET_AUTOCOLRESSTARTED_Pos) /*!< Bit mask of AUTOCOLRESSTARTED
                                                                            field.*/
  #define NFCT_INTENSET_AUTOCOLRESSTARTED_Min (0x0UL)
  #define NFCT_INTENSET_AUTOCOLRESSTARTED_Max (0x1UL)
  #define NFCT_INTENSET_AUTOCOLRESSTARTED_Set (0x1UL)
  #define NFCT_INTENSET_AUTOCOLRESSTARTED_Disabled (0x0UL)
  #define NFCT_INTENSET_AUTOCOLRESSTARTED_Enabled (0x1UL)

/* COLLISION @Bit 18 : Write '1' to enable interrupt for event COLLISION */
  #define NFCT_INTENSET_COLLISION_Pos (18UL)
  #define NFCT_INTENSET_COLLISION_Msk (0x1UL << NFCT_INTENSET_COLLISION_Pos)
  #define NFCT_INTENSET_COLLISION_Min (0x0UL)
  #define NFCT_INTENSET_COLLISION_Max (0x1UL)
  #define NFCT_INTENSET_COLLISION_Set (0x1UL)
  #define NFCT_INTENSET_COLLISION_Disabled (0x0UL)
  #define NFCT_INTENSET_COLLISION_Enabled (0x1UL)

/* SELECTED @Bit 19 : Write '1' to enable interrupt for event SELECTED */
  #define NFCT_INTENSET_SELECTED_Pos (19UL)
  #define NFCT_INTENSET_SELECTED_Msk (0x1UL << NFCT_INTENSET_SELECTED_Pos)
  #define NFCT_INTENSET_SELECTED_Min (0x0UL)
  #define NFCT_INTENSET_SELECTED_Max (0x1UL)
  #define NFCT_INTENSET_SELECTED_Set (0x1UL)
  #define NFCT_INTENSET_SELECTED_Disabled (0x0UL)
  #define NFCT_INTENSET_SELECTED_Enabled (0x1UL)

/* STARTED @Bit 20 : Write '1' to enable interrupt for event STARTED */
  #define NFCT_INTENSET_STARTED_Pos (20UL)
  #define NFCT_INTENSET_STARTED_Msk (0x1UL << NFCT_INTENSET_STARTED_Pos)
  #define NFCT_INTENSET_STARTED_Min (0x0UL)
  #define NFCT_INTENSET_STARTED_Max (0x1UL)
  #define NFCT_INTENSET_STARTED_Set (0x1UL)
  #define NFCT_INTENSET_STARTED_Disabled (0x0UL)
  #define NFCT_INTENSET_STARTED_Enabled (0x1UL)


/* NFCT_INTENCLR: Disable interrupt */
  #define NFCT_INTENCLR_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to disable interrupt for event READY */
  #define NFCT_INTENCLR_READY_Pos (0UL)
  #define NFCT_INTENCLR_READY_Msk (0x1UL << NFCT_INTENCLR_READY_Pos)
  #define NFCT_INTENCLR_READY_Min (0x0UL)
  #define NFCT_INTENCLR_READY_Max (0x1UL)
  #define NFCT_INTENCLR_READY_Clear (0x1UL)
  #define NFCT_INTENCLR_READY_Disabled (0x0UL)
  #define NFCT_INTENCLR_READY_Enabled (0x1UL)

/* FIELDDETECTED @Bit 1 : Write '1' to disable interrupt for event FIELDDETECTED */
  #define NFCT_INTENCLR_FIELDDETECTED_Pos (1UL)
  #define NFCT_INTENCLR_FIELDDETECTED_Msk (0x1UL << NFCT_INTENCLR_FIELDDETECTED_Pos)
  #define NFCT_INTENCLR_FIELDDETECTED_Min (0x0UL)
  #define NFCT_INTENCLR_FIELDDETECTED_Max (0x1UL)
  #define NFCT_INTENCLR_FIELDDETECTED_Clear (0x1UL)
  #define NFCT_INTENCLR_FIELDDETECTED_Disabled (0x0UL)
  #define NFCT_INTENCLR_FIELDDETECTED_Enabled (0x1UL)

/* FIELDLOST @Bit 2 : Write '1' to disable interrupt for event FIELDLOST */
  #define NFCT_INTENCLR_FIELDLOST_Pos (2UL)
  #define NFCT_INTENCLR_FIELDLOST_Msk (0x1UL << NFCT_INTENCLR_FIELDLOST_Pos)
  #define NFCT_INTENCLR_FIELDLOST_Min (0x0UL)
  #define NFCT_INTENCLR_FIELDLOST_Max (0x1UL)
  #define NFCT_INTENCLR_FIELDLOST_Clear (0x1UL)
  #define NFCT_INTENCLR_FIELDLOST_Disabled (0x0UL)
  #define NFCT_INTENCLR_FIELDLOST_Enabled (0x1UL)

/* TXFRAMESTART @Bit 3 : Write '1' to disable interrupt for event TXFRAMESTART */
  #define NFCT_INTENCLR_TXFRAMESTART_Pos (3UL)
  #define NFCT_INTENCLR_TXFRAMESTART_Msk (0x1UL << NFCT_INTENCLR_TXFRAMESTART_Pos)
  #define NFCT_INTENCLR_TXFRAMESTART_Min (0x0UL)
  #define NFCT_INTENCLR_TXFRAMESTART_Max (0x1UL)
  #define NFCT_INTENCLR_TXFRAMESTART_Clear (0x1UL)
  #define NFCT_INTENCLR_TXFRAMESTART_Disabled (0x0UL)
  #define NFCT_INTENCLR_TXFRAMESTART_Enabled (0x1UL)

/* TXFRAMEEND @Bit 4 : Write '1' to disable interrupt for event TXFRAMEEND */
  #define NFCT_INTENCLR_TXFRAMEEND_Pos (4UL)
  #define NFCT_INTENCLR_TXFRAMEEND_Msk (0x1UL << NFCT_INTENCLR_TXFRAMEEND_Pos)
  #define NFCT_INTENCLR_TXFRAMEEND_Min (0x0UL)
  #define NFCT_INTENCLR_TXFRAMEEND_Max (0x1UL)
  #define NFCT_INTENCLR_TXFRAMEEND_Clear (0x1UL)
  #define NFCT_INTENCLR_TXFRAMEEND_Disabled (0x0UL)
  #define NFCT_INTENCLR_TXFRAMEEND_Enabled (0x1UL)

/* RXFRAMESTART @Bit 5 : Write '1' to disable interrupt for event RXFRAMESTART */
  #define NFCT_INTENCLR_RXFRAMESTART_Pos (5UL)
  #define NFCT_INTENCLR_RXFRAMESTART_Msk (0x1UL << NFCT_INTENCLR_RXFRAMESTART_Pos)
  #define NFCT_INTENCLR_RXFRAMESTART_Min (0x0UL)
  #define NFCT_INTENCLR_RXFRAMESTART_Max (0x1UL)
  #define NFCT_INTENCLR_RXFRAMESTART_Clear (0x1UL)
  #define NFCT_INTENCLR_RXFRAMESTART_Disabled (0x0UL)
  #define NFCT_INTENCLR_RXFRAMESTART_Enabled (0x1UL)

/* RXFRAMEEND @Bit 6 : Write '1' to disable interrupt for event RXFRAMEEND */
  #define NFCT_INTENCLR_RXFRAMEEND_Pos (6UL)
  #define NFCT_INTENCLR_RXFRAMEEND_Msk (0x1UL << NFCT_INTENCLR_RXFRAMEEND_Pos)
  #define NFCT_INTENCLR_RXFRAMEEND_Min (0x0UL)
  #define NFCT_INTENCLR_RXFRAMEEND_Max (0x1UL)
  #define NFCT_INTENCLR_RXFRAMEEND_Clear (0x1UL)
  #define NFCT_INTENCLR_RXFRAMEEND_Disabled (0x0UL)
  #define NFCT_INTENCLR_RXFRAMEEND_Enabled (0x1UL)

/* ERROR @Bit 7 : Write '1' to disable interrupt for event ERROR */
  #define NFCT_INTENCLR_ERROR_Pos (7UL)
  #define NFCT_INTENCLR_ERROR_Msk (0x1UL << NFCT_INTENCLR_ERROR_Pos)
  #define NFCT_INTENCLR_ERROR_Min (0x0UL)
  #define NFCT_INTENCLR_ERROR_Max (0x1UL)
  #define NFCT_INTENCLR_ERROR_Clear (0x1UL)
  #define NFCT_INTENCLR_ERROR_Disabled (0x0UL)
  #define NFCT_INTENCLR_ERROR_Enabled (0x1UL)

/* RXERROR @Bit 10 : Write '1' to disable interrupt for event RXERROR */
  #define NFCT_INTENCLR_RXERROR_Pos (10UL)
  #define NFCT_INTENCLR_RXERROR_Msk (0x1UL << NFCT_INTENCLR_RXERROR_Pos)
  #define NFCT_INTENCLR_RXERROR_Min (0x0UL)
  #define NFCT_INTENCLR_RXERROR_Max (0x1UL)
  #define NFCT_INTENCLR_RXERROR_Clear (0x1UL)
  #define NFCT_INTENCLR_RXERROR_Disabled (0x0UL)
  #define NFCT_INTENCLR_RXERROR_Enabled (0x1UL)

/* ENDRX @Bit 11 : Write '1' to disable interrupt for event ENDRX */
  #define NFCT_INTENCLR_ENDRX_Pos (11UL)
  #define NFCT_INTENCLR_ENDRX_Msk (0x1UL << NFCT_INTENCLR_ENDRX_Pos)
  #define NFCT_INTENCLR_ENDRX_Min (0x0UL)
  #define NFCT_INTENCLR_ENDRX_Max (0x1UL)
  #define NFCT_INTENCLR_ENDRX_Clear (0x1UL)
  #define NFCT_INTENCLR_ENDRX_Disabled (0x0UL)
  #define NFCT_INTENCLR_ENDRX_Enabled (0x1UL)

/* ENDTX @Bit 12 : Write '1' to disable interrupt for event ENDTX */
  #define NFCT_INTENCLR_ENDTX_Pos (12UL)
  #define NFCT_INTENCLR_ENDTX_Msk (0x1UL << NFCT_INTENCLR_ENDTX_Pos)
  #define NFCT_INTENCLR_ENDTX_Min (0x0UL)
  #define NFCT_INTENCLR_ENDTX_Max (0x1UL)
  #define NFCT_INTENCLR_ENDTX_Clear (0x1UL)
  #define NFCT_INTENCLR_ENDTX_Disabled (0x0UL)
  #define NFCT_INTENCLR_ENDTX_Enabled (0x1UL)

/* AUTOCOLRESSTARTED @Bit 14 : Write '1' to disable interrupt for event AUTOCOLRESSTARTED */
  #define NFCT_INTENCLR_AUTOCOLRESSTARTED_Pos (14UL)
  #define NFCT_INTENCLR_AUTOCOLRESSTARTED_Msk (0x1UL << NFCT_INTENCLR_AUTOCOLRESSTARTED_Pos) /*!< Bit mask of AUTOCOLRESSTARTED
                                                                            field.*/
  #define NFCT_INTENCLR_AUTOCOLRESSTARTED_Min (0x0UL)
  #define NFCT_INTENCLR_AUTOCOLRESSTARTED_Max (0x1UL)
  #define NFCT_INTENCLR_AUTOCOLRESSTARTED_Clear (0x1UL)
  #define NFCT_INTENCLR_AUTOCOLRESSTARTED_Disabled (0x0UL)
  #define NFCT_INTENCLR_AUTOCOLRESSTARTED_Enabled (0x1UL)

/* COLLISION @Bit 18 : Write '1' to disable interrupt for event COLLISION */
  #define NFCT_INTENCLR_COLLISION_Pos (18UL)
  #define NFCT_INTENCLR_COLLISION_Msk (0x1UL << NFCT_INTENCLR_COLLISION_Pos)
  #define NFCT_INTENCLR_COLLISION_Min (0x0UL)
  #define NFCT_INTENCLR_COLLISION_Max (0x1UL)
  #define NFCT_INTENCLR_COLLISION_Clear (0x1UL)
  #define NFCT_INTENCLR_COLLISION_Disabled (0x0UL)
  #define NFCT_INTENCLR_COLLISION_Enabled (0x1UL)

/* SELECTED @Bit 19 : Write '1' to disable interrupt for event SELECTED */
  #define NFCT_INTENCLR_SELECTED_Pos (19UL)
  #define NFCT_INTENCLR_SELECTED_Msk (0x1UL << NFCT_INTENCLR_SELECTED_Pos)
  #define NFCT_INTENCLR_SELECTED_Min (0x0UL)
  #define NFCT_INTENCLR_SELECTED_Max (0x1UL)
  #define NFCT_INTENCLR_SELECTED_Clear (0x1UL)
  #define NFCT_INTENCLR_SELECTED_Disabled (0x0UL)
  #define NFCT_INTENCLR_SELECTED_Enabled (0x1UL)

/* STARTED @Bit 20 : Write '1' to disable interrupt for event STARTED */
  #define NFCT_INTENCLR_STARTED_Pos (20UL)
  #define NFCT_INTENCLR_STARTED_Msk (0x1UL << NFCT_INTENCLR_STARTED_Pos)
  #define NFCT_INTENCLR_STARTED_Min (0x0UL)
  #define NFCT_INTENCLR_STARTED_Max (0x1UL)
  #define NFCT_INTENCLR_STARTED_Clear (0x1UL)
  #define NFCT_INTENCLR_STARTED_Disabled (0x0UL)
  #define NFCT_INTENCLR_STARTED_Enabled (0x1UL)


/* NFCT_ERRORSTATUS: NFC Error Status register */
  #define NFCT_ERRORSTATUS_ResetValue (0x00000000UL)

/* FRAMEDELAYTIMEOUT @Bit 0 : No STARTTX task triggered before expiration of the time set in FRAMEDELAYMAX */
  #define NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Pos (0UL)
  #define NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Msk (0x1UL << NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Pos) /*!< Bit mask of
                                                                            FRAMEDELAYTIMEOUT field.*/


/* NFCT_NFCTAGSTATE: Current operating state of NFC tag */
  #define NFCT_NFCTAGSTATE_ResetValue (0x00000000UL)

/* NFCTAGSTATE @Bits 0..2 : NfcTag state */
  #define NFCT_NFCTAGSTATE_NFCTAGSTATE_Pos (0UL)
  #define NFCT_NFCTAGSTATE_NFCTAGSTATE_Msk (0x7UL << NFCT_NFCTAGSTATE_NFCTAGSTATE_Pos)
  #define NFCT_NFCTAGSTATE_NFCTAGSTATE_Min (0x0UL)
  #define NFCT_NFCTAGSTATE_NFCTAGSTATE_Max (0x6UL)
  #define NFCT_NFCTAGSTATE_NFCTAGSTATE_Disabled (0x0UL)
  #define NFCT_NFCTAGSTATE_NFCTAGSTATE_RampUp (0x2UL)
  #define NFCT_NFCTAGSTATE_NFCTAGSTATE_Idle (0x3UL)
  #define NFCT_NFCTAGSTATE_NFCTAGSTATE_Receive (0x4UL)
  #define NFCT_NFCTAGSTATE_NFCTAGSTATE_FrameDelay (0x5UL)
  #define NFCT_NFCTAGSTATE_NFCTAGSTATE_Transmit (0x6UL)


/* NFCT_SLEEPSTATE: Sleep state during automatic collision resolution */
  #define NFCT_SLEEPSTATE_ResetValue (0x00000000UL)

/* SLEEPSTATE @Bit 0 : Reflects the sleep state during automatic collision resolution. Set to IDLE by a GOIDLE task. Set to
                       SLEEP_A when a valid SLEEP_REQ frame is received or by a GOSLEEP task. */

  #define NFCT_SLEEPSTATE_SLEEPSTATE_Pos (0UL)
  #define NFCT_SLEEPSTATE_SLEEPSTATE_Msk (0x1UL << NFCT_SLEEPSTATE_SLEEPSTATE_Pos)
  #define NFCT_SLEEPSTATE_SLEEPSTATE_Min (0x0UL)
  #define NFCT_SLEEPSTATE_SLEEPSTATE_Max (0x1UL)
  #define NFCT_SLEEPSTATE_SLEEPSTATE_Idle (0x0UL)
  #define NFCT_SLEEPSTATE_SLEEPSTATE_SleepA (0x1UL)


/* NFCT_FIELDPRESENT: Indicates the presence or not of a valid field */
  #define NFCT_FIELDPRESENT_ResetValue (0x00000000UL)

/* FIELDPRESENT @Bit 0 : Indicates if a valid field is present. Available only in the activated state. */
  #define NFCT_FIELDPRESENT_FIELDPRESENT_Pos (0UL)
  #define NFCT_FIELDPRESENT_FIELDPRESENT_Msk (0x1UL << NFCT_FIELDPRESENT_FIELDPRESENT_Pos)
  #define NFCT_FIELDPRESENT_FIELDPRESENT_Min (0x0UL)
  #define NFCT_FIELDPRESENT_FIELDPRESENT_Max (0x1UL)
  #define NFCT_FIELDPRESENT_FIELDPRESENT_NoField (0x0UL)
  #define NFCT_FIELDPRESENT_FIELDPRESENT_FieldPresent (0x1UL)

/* LOCKDETECT @Bit 1 : Indicates if the low level has locked to the field */
  #define NFCT_FIELDPRESENT_LOCKDETECT_Pos (1UL)
  #define NFCT_FIELDPRESENT_LOCKDETECT_Msk (0x1UL << NFCT_FIELDPRESENT_LOCKDETECT_Pos)
  #define NFCT_FIELDPRESENT_LOCKDETECT_Min (0x0UL)
  #define NFCT_FIELDPRESENT_LOCKDETECT_Max (0x1UL)
  #define NFCT_FIELDPRESENT_LOCKDETECT_NotLocked (0x0UL)
  #define NFCT_FIELDPRESENT_LOCKDETECT_Locked (0x1UL)


/* NFCT_FRAMEDELAYMIN: Minimum frame delay */
  #define NFCT_FRAMEDELAYMIN_ResetValue (0x00000480UL)

/* FRAMEDELAYMIN @Bits 0..15 : Minimum frame delay in number of 13.56 MHz clock cycles */
  #define NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Pos (0UL)
  #define NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Msk (0xFFFFUL << NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Pos) /*!< Bit mask of FRAMEDELAYMIN
                                                                            field.*/


/* NFCT_FRAMEDELAYMAX: Maximum frame delay */
  #define NFCT_FRAMEDELAYMAX_ResetValue (0x00001000UL)

/* FRAMEDELAYMAX @Bits 0..19 : Maximum frame delay in number of 13.56 MHz clock cycles */
  #define NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Pos (0UL)
  #define NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Msk (0xFFFFFUL << NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Pos) /*!< Bit mask of
                                                                            FRAMEDELAYMAX field.*/


/* NFCT_FRAMEDELAYMODE: Configuration register for the Frame Delay Timer */
  #define NFCT_FRAMEDELAYMODE_ResetValue (0x00000001UL)

/* FRAMEDELAYMODE @Bits 0..1 : Configuration register for the Frame Delay Timer */
  #define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Pos (0UL)
  #define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Msk (0x3UL << NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Pos) /*!< Bit mask of
                                                                            FRAMEDELAYMODE field.*/
  #define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Min (0x0UL)
  #define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Max (0x3UL)
  #define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_FreeRun (0x0UL) /*!< Transmission is independent of frame timer and will start when
                                                                  the STARTTX task is triggered. No timeout.*/
  #define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Window (0x1UL)
  #define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_ExactVal (0x2UL)
  #define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_WindowGrid (0x3UL) /*!< Frame is transmitted on a bit grid between FRAMEDELAYMIN
                                                                     and FRAMEDELAYMAX*/


/* NFCT_PACKETPTR: Packet pointer for TXD and RXD data storage in Data RAM */
  #define NFCT_PACKETPTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Packet pointer for TXD and RXD data storage in Data RAM. This address is a byte-aligned RAM address. */
  #define NFCT_PACKETPTR_PTR_Pos (0UL)
  #define NFCT_PACKETPTR_PTR_Msk (0xFFFFFFFFUL << NFCT_PACKETPTR_PTR_Pos)


/* NFCT_MAXLEN: Size of the RAM buffer allocated to TXD and RXD data storage each */
  #define NFCT_MAXLEN_ResetValue (0x00000000UL)

/* MAXLEN @Bits 0..8 : Size of the RAM buffer allocated to TXD and RXD data storage each */
  #define NFCT_MAXLEN_MAXLEN_Pos (0UL)
  #define NFCT_MAXLEN_MAXLEN_Msk (0x1FFUL << NFCT_MAXLEN_MAXLEN_Pos)
  #define NFCT_MAXLEN_MAXLEN_Min (0x000UL)
  #define NFCT_MAXLEN_MAXLEN_Max (0x101UL)


/* NFCT_MODULATIONCTRL: Enables the modulation output to a GPIO pin which can be connected to a second external antenna. */
  #define NFCT_MODULATIONCTRL_ResetValue (0x00000001UL)

/* MODULATIONCTRL @Bits 0..1 : Configuration of modulation control. */
  #define NFCT_MODULATIONCTRL_MODULATIONCTRL_Pos (0UL)
  #define NFCT_MODULATIONCTRL_MODULATIONCTRL_Msk (0x3UL << NFCT_MODULATIONCTRL_MODULATIONCTRL_Pos) /*!< Bit mask of
                                                                            MODULATIONCTRL field.*/
  #define NFCT_MODULATIONCTRL_MODULATIONCTRL_Min (0x0UL)
  #define NFCT_MODULATIONCTRL_MODULATIONCTRL_Max (0x3UL)
  #define NFCT_MODULATIONCTRL_MODULATIONCTRL_Invalid (0x0UL)
  #define NFCT_MODULATIONCTRL_MODULATIONCTRL_Internal (0x1UL)
  #define NFCT_MODULATIONCTRL_MODULATIONCTRL_ModToGpio (0x2UL)
  #define NFCT_MODULATIONCTRL_MODULATIONCTRL_InternalAndModToGpio (0x3UL) /*!< Use internal modulator and output digital
                                                                            modulation signal to a GPIO pin.*/


/* NFCT_MODULATIONPSEL: Pin select for Modulation control */
  #define NFCT_MODULATIONPSEL_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define NFCT_MODULATIONPSEL_PIN_Pos (0UL)
  #define NFCT_MODULATIONPSEL_PIN_Msk (0x1FUL << NFCT_MODULATIONPSEL_PIN_Pos)
  #define NFCT_MODULATIONPSEL_PIN_Min (0x00UL)
  #define NFCT_MODULATIONPSEL_PIN_Max (0x1FUL)

/* PORT @Bits 5..6 : Port number */
  #define NFCT_MODULATIONPSEL_PORT_Pos (5UL)
  #define NFCT_MODULATIONPSEL_PORT_Msk (0x3UL << NFCT_MODULATIONPSEL_PORT_Pos)
  #define NFCT_MODULATIONPSEL_PORT_Min (0x0UL)
  #define NFCT_MODULATIONPSEL_PORT_Max (0x3UL)

/* CONNECT @Bit 31 : Connection */
  #define NFCT_MODULATIONPSEL_CONNECT_Pos (31UL)
  #define NFCT_MODULATIONPSEL_CONNECT_Msk (0x1UL << NFCT_MODULATIONPSEL_CONNECT_Pos)
  #define NFCT_MODULATIONPSEL_CONNECT_Min (0x0UL)
  #define NFCT_MODULATIONPSEL_CONNECT_Max (0x1UL)
  #define NFCT_MODULATIONPSEL_CONNECT_Disconnected (0x1UL)
  #define NFCT_MODULATIONPSEL_CONNECT_Connected (0x0UL)


/* NFCT_MODE: Configure EasyDMA mode */
  #define NFCT_MODE_ResetValue (0x00000001UL)

/* LPOP @Bits 0..1 : Enable low-power operation, or use low-latency */
  #define NFCT_MODE_LPOP_Pos (0UL)
  #define NFCT_MODE_LPOP_Msk (0x3UL << NFCT_MODE_LPOP_Pos)
  #define NFCT_MODE_LPOP_Min (0x0UL)
  #define NFCT_MODE_LPOP_Max (0x3UL)
  #define NFCT_MODE_LPOP_LowLat (0x0UL)
  #define NFCT_MODE_LPOP_LowPower (0x1UL)
  #define NFCT_MODE_LPOP_FullLowPower (0x3UL)


/* NFCT_AUTOCOLRESCONFIG: Controls the auto collision resolution function. This setting must be done before the NFCT peripheral
                           is activated. */

  #define NFCT_AUTOCOLRESCONFIG_ResetValue (0x00000002UL)

/* MODE @Bit 0 : Enables/disables auto collision resolution */
  #define NFCT_AUTOCOLRESCONFIG_MODE_Pos (0UL)
  #define NFCT_AUTOCOLRESCONFIG_MODE_Msk (0x1UL << NFCT_AUTOCOLRESCONFIG_MODE_Pos)
  #define NFCT_AUTOCOLRESCONFIG_MODE_Min (0x0UL)
  #define NFCT_AUTOCOLRESCONFIG_MODE_Max (0x1UL)
  #define NFCT_AUTOCOLRESCONFIG_MODE_Enabled (0x0UL)
  #define NFCT_AUTOCOLRESCONFIG_MODE_Disabled (0x1UL)


/* NFCT_SENSRES: NFC-A SENS_RES auto-response settings */
  #define NFCT_SENSRES_ResetValue (0x00000001UL)

/* BITFRAMESDD @Bits 0..4 : Bit frame SDD as defined by the b5:b1 of byte 1 in SENS_RES response in the NFC Forum, NFC Digital
                            Protocol Technical Specification */

  #define NFCT_SENSRES_BITFRAMESDD_Pos (0UL)
  #define NFCT_SENSRES_BITFRAMESDD_Msk (0x1FUL << NFCT_SENSRES_BITFRAMESDD_Pos)
  #define NFCT_SENSRES_BITFRAMESDD_Min (0x0UL)
  #define NFCT_SENSRES_BITFRAMESDD_Max (0x10UL)
  #define NFCT_SENSRES_BITFRAMESDD_SDD00000 (0x00UL)
  #define NFCT_SENSRES_BITFRAMESDD_SDD00001 (0x01UL)
  #define NFCT_SENSRES_BITFRAMESDD_SDD00010 (0x02UL)
  #define NFCT_SENSRES_BITFRAMESDD_SDD00100 (0x04UL)
  #define NFCT_SENSRES_BITFRAMESDD_SDD01000 (0x08UL)
  #define NFCT_SENSRES_BITFRAMESDD_SDD10000 (0x10UL)

/* RFU5 @Bit 5 : Reserved for future use. Shall be 0. */
  #define NFCT_SENSRES_RFU5_Pos (5UL)
  #define NFCT_SENSRES_RFU5_Msk (0x1UL << NFCT_SENSRES_RFU5_Pos)

/* NFCIDSIZE @Bits 6..7 : NFCID1 size. This value is used by the auto collision resolution engine. */
  #define NFCT_SENSRES_NFCIDSIZE_Pos (6UL)
  #define NFCT_SENSRES_NFCIDSIZE_Msk (0x3UL << NFCT_SENSRES_NFCIDSIZE_Pos)
  #define NFCT_SENSRES_NFCIDSIZE_Min (0x0UL)
  #define NFCT_SENSRES_NFCIDSIZE_Max (0x2UL)
  #define NFCT_SENSRES_NFCIDSIZE_NFCID1Single (0x0UL)
  #define NFCT_SENSRES_NFCIDSIZE_NFCID1Double (0x1UL)
  #define NFCT_SENSRES_NFCIDSIZE_NFCID1Triple (0x2UL)

/* PLATFCONFIG @Bits 8..11 : Tag platform configuration as defined by the b4:b1 of byte 2 in SENS_RES response in the NFC Forum,
                             NFC Digital Protocol Technical Specification */

  #define NFCT_SENSRES_PLATFCONFIG_Pos (8UL)
  #define NFCT_SENSRES_PLATFCONFIG_Msk (0xFUL << NFCT_SENSRES_PLATFCONFIG_Pos)

/* RFU74 @Bits 12..15 : Reserved for future use. Shall be 0. */
  #define NFCT_SENSRES_RFU74_Pos (12UL)
  #define NFCT_SENSRES_RFU74_Msk (0xFUL << NFCT_SENSRES_RFU74_Pos)


/* NFCT_SELRES: NFC-A SEL_RES auto-response settings */
  #define NFCT_SELRES_ResetValue (0x00000000UL)

/* RFU10 @Bits 0..1 : Reserved for future use. Shall be 0. */
  #define NFCT_SELRES_RFU10_Pos (0UL)
  #define NFCT_SELRES_RFU10_Msk (0x3UL << NFCT_SELRES_RFU10_Pos)

/* CASCADE @Bit 2 : Cascade as defined by the b3 of SEL_RES response in the NFC Forum, NFC Digital Protocol Technical
                    Specification (controlled by hardware, shall be 0) */

  #define NFCT_SELRES_CASCADE_Pos (2UL)
  #define NFCT_SELRES_CASCADE_Msk (0x1UL << NFCT_SELRES_CASCADE_Pos)

/* RFU43 @Bits 3..4 : Reserved for future use. Shall be 0. */
  #define NFCT_SELRES_RFU43_Pos (3UL)
  #define NFCT_SELRES_RFU43_Msk (0x3UL << NFCT_SELRES_RFU43_Pos)

/* PROTOCOL @Bits 5..6 : Protocol as defined by the b7:b6 of SEL_RES response in the NFC Forum, NFC Digital Protocol Technical
                         Specification */

  #define NFCT_SELRES_PROTOCOL_Pos (5UL)
  #define NFCT_SELRES_PROTOCOL_Msk (0x3UL << NFCT_SELRES_PROTOCOL_Pos)

/* RFU7 @Bit 7 : Reserved for future use. Shall be 0. */
  #define NFCT_SELRES_RFU7_Pos (7UL)
  #define NFCT_SELRES_RFU7_Msk (0x1UL << NFCT_SELRES_RFU7_Pos)


/* NFCT_PADCONFIG: NFC pad configuration */
  #define NFCT_PADCONFIG_ResetValue (0x00000001UL)

/* ENABLE @Bit 0 : Enable NFC pads */
  #define NFCT_PADCONFIG_ENABLE_Pos (0UL)
  #define NFCT_PADCONFIG_ENABLE_Msk (0x1UL << NFCT_PADCONFIG_ENABLE_Pos)
  #define NFCT_PADCONFIG_ENABLE_Min (0x0UL)
  #define NFCT_PADCONFIG_ENABLE_Max (0x1UL)
  #define NFCT_PADCONFIG_ENABLE_Disabled (0x0UL)
  #define NFCT_PADCONFIG_ENABLE_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                        OSCILLATORS                                        ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct OSCILLATORS_PLL ================================================== */
/**
  * @brief PLL [OSCILLATORS_PLL] Oscillator control
  */
typedef struct {
  __IOM uint32_t  FREQ;
  __IM  uint32_t  CURRENTFREQ;
} NRF_OSCILLATORS_PLL_Type;

/* OSCILLATORS_PLL_FREQ: Set speed of MCU power domain, including CPU */
  #define OSCILLATORS_PLL_FREQ_ResetValue (0x00000003UL)

/* FREQ @Bits 0..2 : Select CPU speed */
  #define OSCILLATORS_PLL_FREQ_FREQ_Pos (0UL)
  #define OSCILLATORS_PLL_FREQ_FREQ_Msk (0x7UL << OSCILLATORS_PLL_FREQ_FREQ_Pos)
  #define OSCILLATORS_PLL_FREQ_FREQ_Min (0x1UL)
  #define OSCILLATORS_PLL_FREQ_FREQ_Max (0x4UL)
  #define OSCILLATORS_PLL_FREQ_FREQ_CK128M (0x1UL)
  #define OSCILLATORS_PLL_FREQ_FREQ_CK64M (0x3UL)
  #define OSCILLATORS_PLL_FREQ_FREQ_CK256M (0x4UL)


/* OSCILLATORS_PLL_CURRENTFREQ: Current speed of MCU power domain, including CPU */
  #define OSCILLATORS_PLL_CURRENTFREQ_ResetValue (0x00000003UL)

/* CURRENTFREQ @Bits 0..2 : Active CPU speed */
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Pos (0UL)
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Msk (0x7UL << OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Pos) /*!< Bit mask of
                                                                            CURRENTFREQ field.*/
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Min (0x1UL)
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Max (0x4UL)
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_CK128M (0x1UL)
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_CK64M (0x3UL)
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_CK256M (0x4UL)


/* =================================================== Struct OSCILLATORS ==================================================== */
/**
  * @brief Oscillator control
  */
  typedef struct {
    __IM uint32_t RESERVED[512];
    __IOM NRF_OSCILLATORS_PLL_Type PLL;
  } NRF_OSCILLATORS_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          OSCRFR                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct OSCRFR ====================================================== */
/**
  * @brief OSCRFR peripheral
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_OSCRFR_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            PDM                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct PDM_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [PDM_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000000) This event is generated if an error occurs during the
                                                                         bus transfer.*/
} NRF_PDM_EVENTS_DMA_Type;

/* PDM_EVENTS_DMA_BUSERROR: This event is generated if an error occurs during the bus transfer. */
  #define PDM_EVENTS_DMA_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : This event is generated if an error occurs during the bus transfer. */
  #define PDM_EVENTS_DMA_BUSERROR_BUSERROR_Pos (0UL)
  #define PDM_EVENTS_DMA_BUSERROR_BUSERROR_Msk (0x1UL << PDM_EVENTS_DMA_BUSERROR_BUSERROR_Pos)
  #define PDM_EVENTS_DMA_BUSERROR_BUSERROR_Min (0x0UL)
  #define PDM_EVENTS_DMA_BUSERROR_BUSERROR_Max (0x1UL)
  #define PDM_EVENTS_DMA_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define PDM_EVENTS_DMA_BUSERROR_BUSERROR_Generated (0x1UL)



/* ================================================= Struct PDM_PUBLISH_DMA ================================================== */
/**
  * @brief PUBLISH_DMA [PDM_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  BUSERROR;
} NRF_PDM_PUBLISH_DMA_Type;

/* PDM_PUBLISH_DMA_BUSERROR: Publish configuration for event DMA.BUSERROR */
  #define PDM_PUBLISH_DMA_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DMA.BUSERROR will publish to */
  #define PDM_PUBLISH_DMA_BUSERROR_CHIDX_Pos (0UL)
  #define PDM_PUBLISH_DMA_BUSERROR_CHIDX_Msk (0xFFUL << PDM_PUBLISH_DMA_BUSERROR_CHIDX_Pos)
  #define PDM_PUBLISH_DMA_BUSERROR_CHIDX_Min (0x00UL)
  #define PDM_PUBLISH_DMA_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PDM_PUBLISH_DMA_BUSERROR_EN_Pos (31UL)
  #define PDM_PUBLISH_DMA_BUSERROR_EN_Msk (0x1UL << PDM_PUBLISH_DMA_BUSERROR_EN_Pos)
  #define PDM_PUBLISH_DMA_BUSERROR_EN_Min (0x0UL)
  #define PDM_PUBLISH_DMA_BUSERROR_EN_Max (0x1UL)
  #define PDM_PUBLISH_DMA_BUSERROR_EN_Disabled (0x0UL)
  #define PDM_PUBLISH_DMA_BUSERROR_EN_Enabled (0x1UL)



/* ===================================================== Struct PDM_PSEL ===================================================== */
/**
  * @brief PSEL [PDM_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CLK;
  __IOM uint32_t  DIN;
} NRF_PDM_PSEL_Type;

/* PDM_PSEL_CLK: Pin number configuration for PDM CLK signal */
  #define PDM_PSEL_CLK_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define PDM_PSEL_CLK_PIN_Pos (0UL)
  #define PDM_PSEL_CLK_PIN_Msk (0x1FUL << PDM_PSEL_CLK_PIN_Pos)
  #define PDM_PSEL_CLK_PIN_Min (0x00UL)
  #define PDM_PSEL_CLK_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define PDM_PSEL_CLK_PORT_Pos (5UL)
  #define PDM_PSEL_CLK_PORT_Msk (0x7UL << PDM_PSEL_CLK_PORT_Pos)
  #define PDM_PSEL_CLK_PORT_Min (0x1UL)
  #define PDM_PSEL_CLK_PORT_Max (0x1UL)

/* CONNECT @Bit 31 : Connection */
  #define PDM_PSEL_CLK_CONNECT_Pos (31UL)
  #define PDM_PSEL_CLK_CONNECT_Msk (0x1UL << PDM_PSEL_CLK_CONNECT_Pos)
  #define PDM_PSEL_CLK_CONNECT_Min (0x0UL)
  #define PDM_PSEL_CLK_CONNECT_Max (0x1UL)
  #define PDM_PSEL_CLK_CONNECT_Disconnected (0x1UL)
  #define PDM_PSEL_CLK_CONNECT_Connected (0x0UL)


/* PDM_PSEL_DIN: Pin number configuration for PDM DIN signal */
  #define PDM_PSEL_DIN_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define PDM_PSEL_DIN_PIN_Pos (0UL)
  #define PDM_PSEL_DIN_PIN_Msk (0x1FUL << PDM_PSEL_DIN_PIN_Pos)
  #define PDM_PSEL_DIN_PIN_Min (0x00UL)
  #define PDM_PSEL_DIN_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define PDM_PSEL_DIN_PORT_Pos (5UL)
  #define PDM_PSEL_DIN_PORT_Msk (0x7UL << PDM_PSEL_DIN_PORT_Pos)
  #define PDM_PSEL_DIN_PORT_Min (0x1UL)
  #define PDM_PSEL_DIN_PORT_Max (0x1UL)

/* CONNECT @Bit 31 : Connection */
  #define PDM_PSEL_DIN_CONNECT_Pos (31UL)
  #define PDM_PSEL_DIN_CONNECT_Msk (0x1UL << PDM_PSEL_DIN_CONNECT_Pos)
  #define PDM_PSEL_DIN_CONNECT_Min (0x0UL)
  #define PDM_PSEL_DIN_CONNECT_Max (0x1UL)
  #define PDM_PSEL_DIN_CONNECT_Disconnected (0x1UL)
  #define PDM_PSEL_DIN_CONNECT_Connected (0x0UL)



/* ==================================================== Struct PDM_SAMPLE ==================================================== */
/**
  * @brief SAMPLE [PDM_SAMPLE] (unspecified)
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
} NRF_PDM_SAMPLE_Type;

/* PDM_SAMPLE_PTR: RAM address pointer to write samples to with EasyDMA */
  #define PDM_SAMPLE_PTR_ResetValue (0x00000000UL)

/* SAMPLEPTR @Bits 0..31 : Address to write PDM samples to over DMA */
  #define PDM_SAMPLE_PTR_SAMPLEPTR_Pos (0UL)
  #define PDM_SAMPLE_PTR_SAMPLEPTR_Msk (0xFFFFFFFFUL << PDM_SAMPLE_PTR_SAMPLEPTR_Pos)


/* PDM_SAMPLE_MAXCNT: Number of bytes to allocate memory for in EasyDMA mode */
  #define PDM_SAMPLE_MAXCNT_ResetValue (0x00000000UL)

/* BUFFSIZE @Bits 0..14 : Length of DMA RAM allocation in number of bytes */
  #define PDM_SAMPLE_MAXCNT_BUFFSIZE_Pos (0UL)
  #define PDM_SAMPLE_MAXCNT_BUFFSIZE_Msk (0x7FFFUL << PDM_SAMPLE_MAXCNT_BUFFSIZE_Pos)
  #define PDM_SAMPLE_MAXCNT_BUFFSIZE_Min (0x0000UL)
  #define PDM_SAMPLE_MAXCNT_BUFFSIZE_Max (0x7FFFUL)



/* ===================================================== Struct PDM_DMA ====================================================== */
/**
  * @brief DMA [PDM_DMA] (unspecified)
  */
typedef struct {
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x00000000) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IOM uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000004) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_PDM_DMA_Type;

/* PDM_DMA_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define PDM_DMA_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define PDM_DMA_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define PDM_DMA_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << PDM_DMA_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of ENABLE
                                                                            field.*/
  #define PDM_DMA_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define PDM_DMA_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define PDM_DMA_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define PDM_DMA_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* PDM_DMA_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define PDM_DMA_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define PDM_DMA_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define PDM_DMA_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << PDM_DMA_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/


/* ======================================================= Struct PDM ======================================================== */
/**
  * @brief Pulse Density Modulation (Digital Microphone) Interface
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_STARTED;
    __IOM uint32_t EVENTS_STOPPED;
    __IOM uint32_t EVENTS_END;                       /*!< (@ 0x00000108) The PDM has written the last sample specified by
                                                                         SAMPLE.MAXCNT (or the last sample after a STOP task has
                                                                         been received) to Data RAM*/
    __IM uint32_t RESERVED2;
    __IOM NRF_PDM_EVENTS_DMA_Type EVENTS_DMA;
    __IM uint32_t RESERVED3[27];
    __IOM uint32_t PUBLISH_STARTED;
    __IOM uint32_t PUBLISH_STOPPED;
    __IOM uint32_t PUBLISH_END;
    __IM uint32_t RESERVED4;
    __IOM NRF_PDM_PUBLISH_DMA_Type PUBLISH_DMA;
    __IM uint32_t RESERVED5[27];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED6[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED7[124];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED8;
    __IOM uint32_t MODE;                             /*!< (@ 0x00000508) Defines the routing of the connected PDM microphone
                                                                         signals*/
    __IM uint32_t RESERVED9[3];
    __IOM uint32_t GAINL;
    __IOM uint32_t GAINR;
    __IOM uint32_t RATIO;                            /*!< (@ 0x00000520) Selects the decimation ratio between PDM_CLK and output
                                                                         sample rate. Change PRESCALER accordingly.*/
    __IM uint32_t RESERVED10[7];
    __IOM NRF_PDM_PSEL_Type PSEL;
    __IM uint32_t RESERVED11[6];
    __IOM NRF_PDM_SAMPLE_Type SAMPLE;
    __IM uint32_t RESERVED12[6];
    __IOM uint32_t PRESCALER;
    __IM uint32_t RESERVED13[95];
    __IOM NRF_PDM_DMA_Type DMA;
  } NRF_PDM_Type;

/* PDM_TASKS_START: Starts continuous PDM transfer */
  #define PDM_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Starts continuous PDM transfer */
  #define PDM_TASKS_START_TASKS_START_Pos (0UL)
  #define PDM_TASKS_START_TASKS_START_Msk (0x1UL << PDM_TASKS_START_TASKS_START_Pos)
  #define PDM_TASKS_START_TASKS_START_Min (0x1UL)
  #define PDM_TASKS_START_TASKS_START_Max (0x1UL)
  #define PDM_TASKS_START_TASKS_START_Trigger (0x1UL)


/* PDM_TASKS_STOP: Stops PDM transfer */
  #define PDM_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stops PDM transfer */
  #define PDM_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define PDM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << PDM_TASKS_STOP_TASKS_STOP_Pos)
  #define PDM_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define PDM_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define PDM_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* PDM_SUBSCRIBE_START: Subscribe configuration for task START */
  #define PDM_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define PDM_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define PDM_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << PDM_SUBSCRIBE_START_CHIDX_Pos)
  #define PDM_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define PDM_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PDM_SUBSCRIBE_START_EN_Pos (31UL)
  #define PDM_SUBSCRIBE_START_EN_Msk (0x1UL << PDM_SUBSCRIBE_START_EN_Pos)
  #define PDM_SUBSCRIBE_START_EN_Min (0x0UL)
  #define PDM_SUBSCRIBE_START_EN_Max (0x1UL)
  #define PDM_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define PDM_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* PDM_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define PDM_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define PDM_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define PDM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << PDM_SUBSCRIBE_STOP_CHIDX_Pos)
  #define PDM_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define PDM_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PDM_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define PDM_SUBSCRIBE_STOP_EN_Msk (0x1UL << PDM_SUBSCRIBE_STOP_EN_Pos)
  #define PDM_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define PDM_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define PDM_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define PDM_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* PDM_EVENTS_STARTED: PDM transfer has started */
  #define PDM_EVENTS_STARTED_ResetValue (0x00000000UL)

/* EVENTS_STARTED @Bit 0 : PDM transfer has started */
  #define PDM_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL)
  #define PDM_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << PDM_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of EVENTS_STARTED
                                                                            field.*/
  #define PDM_EVENTS_STARTED_EVENTS_STARTED_Min (0x0UL)
  #define PDM_EVENTS_STARTED_EVENTS_STARTED_Max (0x1UL)
  #define PDM_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0x0UL)
  #define PDM_EVENTS_STARTED_EVENTS_STARTED_Generated (0x1UL)


/* PDM_EVENTS_STOPPED: PDM transfer has finished */
  #define PDM_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : PDM transfer has finished */
  #define PDM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define PDM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << PDM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED
                                                                            field.*/
  #define PDM_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define PDM_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define PDM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define PDM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* PDM_EVENTS_END: The PDM has written the last sample specified by SAMPLE.MAXCNT (or the last sample after a STOP task has been
                    received) to Data RAM */

  #define PDM_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : The PDM has written the last sample specified by SAMPLE.MAXCNT (or the last sample after a STOP task has
                       been received) to Data RAM */

  #define PDM_EVENTS_END_EVENTS_END_Pos (0UL)
  #define PDM_EVENTS_END_EVENTS_END_Msk (0x1UL << PDM_EVENTS_END_EVENTS_END_Pos)
  #define PDM_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define PDM_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define PDM_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define PDM_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* PDM_PUBLISH_STARTED: Publish configuration for event STARTED */
  #define PDM_PUBLISH_STARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STARTED will publish to */
  #define PDM_PUBLISH_STARTED_CHIDX_Pos (0UL)
  #define PDM_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << PDM_PUBLISH_STARTED_CHIDX_Pos)
  #define PDM_PUBLISH_STARTED_CHIDX_Min (0x00UL)
  #define PDM_PUBLISH_STARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PDM_PUBLISH_STARTED_EN_Pos (31UL)
  #define PDM_PUBLISH_STARTED_EN_Msk (0x1UL << PDM_PUBLISH_STARTED_EN_Pos)
  #define PDM_PUBLISH_STARTED_EN_Min (0x0UL)
  #define PDM_PUBLISH_STARTED_EN_Max (0x1UL)
  #define PDM_PUBLISH_STARTED_EN_Disabled (0x0UL)
  #define PDM_PUBLISH_STARTED_EN_Enabled (0x1UL)


/* PDM_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define PDM_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define PDM_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define PDM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << PDM_PUBLISH_STOPPED_CHIDX_Pos)
  #define PDM_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define PDM_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PDM_PUBLISH_STOPPED_EN_Pos (31UL)
  #define PDM_PUBLISH_STOPPED_EN_Msk (0x1UL << PDM_PUBLISH_STOPPED_EN_Pos)
  #define PDM_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define PDM_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define PDM_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define PDM_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* PDM_PUBLISH_END: Publish configuration for event END */
  #define PDM_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define PDM_PUBLISH_END_CHIDX_Pos (0UL)
  #define PDM_PUBLISH_END_CHIDX_Msk (0xFFUL << PDM_PUBLISH_END_CHIDX_Pos)
  #define PDM_PUBLISH_END_CHIDX_Min (0x00UL)
  #define PDM_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PDM_PUBLISH_END_EN_Pos (31UL)
  #define PDM_PUBLISH_END_EN_Msk (0x1UL << PDM_PUBLISH_END_EN_Pos)
  #define PDM_PUBLISH_END_EN_Min (0x0UL)
  #define PDM_PUBLISH_END_EN_Max (0x1UL)
  #define PDM_PUBLISH_END_EN_Disabled (0x0UL)
  #define PDM_PUBLISH_END_EN_Enabled (0x1UL)


/* PDM_INTEN: Enable or disable interrupt */
  #define PDM_INTEN_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Enable or disable interrupt for event STARTED */
  #define PDM_INTEN_STARTED_Pos (0UL)
  #define PDM_INTEN_STARTED_Msk (0x1UL << PDM_INTEN_STARTED_Pos)
  #define PDM_INTEN_STARTED_Min (0x0UL)
  #define PDM_INTEN_STARTED_Max (0x1UL)
  #define PDM_INTEN_STARTED_Disabled (0x0UL)
  #define PDM_INTEN_STARTED_Enabled (0x1UL)

/* STOPPED @Bit 1 : Enable or disable interrupt for event STOPPED */
  #define PDM_INTEN_STOPPED_Pos (1UL)
  #define PDM_INTEN_STOPPED_Msk (0x1UL << PDM_INTEN_STOPPED_Pos)
  #define PDM_INTEN_STOPPED_Min (0x0UL)
  #define PDM_INTEN_STOPPED_Max (0x1UL)
  #define PDM_INTEN_STOPPED_Disabled (0x0UL)
  #define PDM_INTEN_STOPPED_Enabled (0x1UL)

/* END @Bit 2 : Enable or disable interrupt for event END */
  #define PDM_INTEN_END_Pos (2UL)
  #define PDM_INTEN_END_Msk (0x1UL << PDM_INTEN_END_Pos)
  #define PDM_INTEN_END_Min (0x0UL)
  #define PDM_INTEN_END_Max (0x1UL)
  #define PDM_INTEN_END_Disabled (0x0UL)
  #define PDM_INTEN_END_Enabled (0x1UL)

/* DMABUSERROR @Bit 4 : Enable or disable interrupt for event DMABUSERROR */
  #define PDM_INTEN_DMABUSERROR_Pos (4UL)
  #define PDM_INTEN_DMABUSERROR_Msk (0x1UL << PDM_INTEN_DMABUSERROR_Pos)
  #define PDM_INTEN_DMABUSERROR_Min (0x0UL)
  #define PDM_INTEN_DMABUSERROR_Max (0x1UL)
  #define PDM_INTEN_DMABUSERROR_Disabled (0x0UL)
  #define PDM_INTEN_DMABUSERROR_Enabled (0x1UL)


/* PDM_INTENSET: Enable interrupt */
  #define PDM_INTENSET_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to enable interrupt for event STARTED */
  #define PDM_INTENSET_STARTED_Pos (0UL)
  #define PDM_INTENSET_STARTED_Msk (0x1UL << PDM_INTENSET_STARTED_Pos)
  #define PDM_INTENSET_STARTED_Min (0x0UL)
  #define PDM_INTENSET_STARTED_Max (0x1UL)
  #define PDM_INTENSET_STARTED_Set (0x1UL)
  #define PDM_INTENSET_STARTED_Disabled (0x0UL)
  #define PDM_INTENSET_STARTED_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define PDM_INTENSET_STOPPED_Pos (1UL)
  #define PDM_INTENSET_STOPPED_Msk (0x1UL << PDM_INTENSET_STOPPED_Pos)
  #define PDM_INTENSET_STOPPED_Min (0x0UL)
  #define PDM_INTENSET_STOPPED_Max (0x1UL)
  #define PDM_INTENSET_STOPPED_Set (0x1UL)
  #define PDM_INTENSET_STOPPED_Disabled (0x0UL)
  #define PDM_INTENSET_STOPPED_Enabled (0x1UL)

/* END @Bit 2 : Write '1' to enable interrupt for event END */
  #define PDM_INTENSET_END_Pos (2UL)
  #define PDM_INTENSET_END_Msk (0x1UL << PDM_INTENSET_END_Pos)
  #define PDM_INTENSET_END_Min (0x0UL)
  #define PDM_INTENSET_END_Max (0x1UL)
  #define PDM_INTENSET_END_Set (0x1UL)
  #define PDM_INTENSET_END_Disabled (0x0UL)
  #define PDM_INTENSET_END_Enabled (0x1UL)

/* DMABUSERROR @Bit 4 : Write '1' to enable interrupt for event DMABUSERROR */
  #define PDM_INTENSET_DMABUSERROR_Pos (4UL)
  #define PDM_INTENSET_DMABUSERROR_Msk (0x1UL << PDM_INTENSET_DMABUSERROR_Pos)
  #define PDM_INTENSET_DMABUSERROR_Min (0x0UL)
  #define PDM_INTENSET_DMABUSERROR_Max (0x1UL)
  #define PDM_INTENSET_DMABUSERROR_Set (0x1UL)
  #define PDM_INTENSET_DMABUSERROR_Disabled (0x0UL)
  #define PDM_INTENSET_DMABUSERROR_Enabled (0x1UL)


/* PDM_INTENCLR: Disable interrupt */
  #define PDM_INTENCLR_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to disable interrupt for event STARTED */
  #define PDM_INTENCLR_STARTED_Pos (0UL)
  #define PDM_INTENCLR_STARTED_Msk (0x1UL << PDM_INTENCLR_STARTED_Pos)
  #define PDM_INTENCLR_STARTED_Min (0x0UL)
  #define PDM_INTENCLR_STARTED_Max (0x1UL)
  #define PDM_INTENCLR_STARTED_Clear (0x1UL)
  #define PDM_INTENCLR_STARTED_Disabled (0x0UL)
  #define PDM_INTENCLR_STARTED_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define PDM_INTENCLR_STOPPED_Pos (1UL)
  #define PDM_INTENCLR_STOPPED_Msk (0x1UL << PDM_INTENCLR_STOPPED_Pos)
  #define PDM_INTENCLR_STOPPED_Min (0x0UL)
  #define PDM_INTENCLR_STOPPED_Max (0x1UL)
  #define PDM_INTENCLR_STOPPED_Clear (0x1UL)
  #define PDM_INTENCLR_STOPPED_Disabled (0x0UL)
  #define PDM_INTENCLR_STOPPED_Enabled (0x1UL)

/* END @Bit 2 : Write '1' to disable interrupt for event END */
  #define PDM_INTENCLR_END_Pos (2UL)
  #define PDM_INTENCLR_END_Msk (0x1UL << PDM_INTENCLR_END_Pos)
  #define PDM_INTENCLR_END_Min (0x0UL)
  #define PDM_INTENCLR_END_Max (0x1UL)
  #define PDM_INTENCLR_END_Clear (0x1UL)
  #define PDM_INTENCLR_END_Disabled (0x0UL)
  #define PDM_INTENCLR_END_Enabled (0x1UL)

/* DMABUSERROR @Bit 4 : Write '1' to disable interrupt for event DMABUSERROR */
  #define PDM_INTENCLR_DMABUSERROR_Pos (4UL)
  #define PDM_INTENCLR_DMABUSERROR_Msk (0x1UL << PDM_INTENCLR_DMABUSERROR_Pos)
  #define PDM_INTENCLR_DMABUSERROR_Min (0x0UL)
  #define PDM_INTENCLR_DMABUSERROR_Max (0x1UL)
  #define PDM_INTENCLR_DMABUSERROR_Clear (0x1UL)
  #define PDM_INTENCLR_DMABUSERROR_Disabled (0x0UL)
  #define PDM_INTENCLR_DMABUSERROR_Enabled (0x1UL)


/* PDM_INTPEND: Pending interrupts */
  #define PDM_INTPEND_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Read pending status of interrupt for event STARTED */
  #define PDM_INTPEND_STARTED_Pos (0UL)
  #define PDM_INTPEND_STARTED_Msk (0x1UL << PDM_INTPEND_STARTED_Pos)
  #define PDM_INTPEND_STARTED_Min (0x0UL)
  #define PDM_INTPEND_STARTED_Max (0x1UL)
  #define PDM_INTPEND_STARTED_NotPending (0x0UL)
  #define PDM_INTPEND_STARTED_Pending (0x1UL)

/* STOPPED @Bit 1 : Read pending status of interrupt for event STOPPED */
  #define PDM_INTPEND_STOPPED_Pos (1UL)
  #define PDM_INTPEND_STOPPED_Msk (0x1UL << PDM_INTPEND_STOPPED_Pos)
  #define PDM_INTPEND_STOPPED_Min (0x0UL)
  #define PDM_INTPEND_STOPPED_Max (0x1UL)
  #define PDM_INTPEND_STOPPED_NotPending (0x0UL)
  #define PDM_INTPEND_STOPPED_Pending (0x1UL)

/* END @Bit 2 : Read pending status of interrupt for event END */
  #define PDM_INTPEND_END_Pos (2UL)
  #define PDM_INTPEND_END_Msk (0x1UL << PDM_INTPEND_END_Pos)
  #define PDM_INTPEND_END_Min (0x0UL)
  #define PDM_INTPEND_END_Max (0x1UL)
  #define PDM_INTPEND_END_NotPending (0x0UL)
  #define PDM_INTPEND_END_Pending (0x1UL)

/* DMABUSERROR @Bit 4 : Read pending status of interrupt for event DMABUSERROR */
  #define PDM_INTPEND_DMABUSERROR_Pos (4UL)
  #define PDM_INTPEND_DMABUSERROR_Msk (0x1UL << PDM_INTPEND_DMABUSERROR_Pos)
  #define PDM_INTPEND_DMABUSERROR_Min (0x0UL)
  #define PDM_INTPEND_DMABUSERROR_Max (0x1UL)
  #define PDM_INTPEND_DMABUSERROR_NotPending (0x0UL)
  #define PDM_INTPEND_DMABUSERROR_Pending (0x1UL)


/* PDM_ENABLE: PDM module enable register */
  #define PDM_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable or disable PDM module */
  #define PDM_ENABLE_ENABLE_Pos (0UL)
  #define PDM_ENABLE_ENABLE_Msk (0x1UL << PDM_ENABLE_ENABLE_Pos)
  #define PDM_ENABLE_ENABLE_Min (0x0UL)
  #define PDM_ENABLE_ENABLE_Max (0x1UL)
  #define PDM_ENABLE_ENABLE_Disabled (0x0UL)
  #define PDM_ENABLE_ENABLE_Enabled (0x1UL)


/* PDM_MODE: Defines the routing of the connected PDM microphone signals */
  #define PDM_MODE_ResetValue (0x00000000UL)

/* OPERATION @Bit 0 : Mono or stereo operation */
  #define PDM_MODE_OPERATION_Pos (0UL)
  #define PDM_MODE_OPERATION_Msk (0x1UL << PDM_MODE_OPERATION_Pos)
  #define PDM_MODE_OPERATION_Min (0x0UL)
  #define PDM_MODE_OPERATION_Max (0x1UL)
  #define PDM_MODE_OPERATION_Stereo (0x0UL)          /*!< Sample and store one pair (left + right) of 16-bit samples per RAM
                                                          word R=[31:16]; L=[15:0]*/
  #define PDM_MODE_OPERATION_Mono (0x1UL)            /*!< Sample and store two successive left samples (16 bits each) per RAM
                                                          word L1=[31:16]; L0=[15:0]*/

/* EDGE @Bit 1 : Defines on which PDM_CLK edge left (or mono) is sampled. */
  #define PDM_MODE_EDGE_Pos (1UL)
  #define PDM_MODE_EDGE_Msk (0x1UL << PDM_MODE_EDGE_Pos)
  #define PDM_MODE_EDGE_Min (0x0UL)
  #define PDM_MODE_EDGE_Max (0x1UL)
  #define PDM_MODE_EDGE_LeftFalling (0x0UL)
  #define PDM_MODE_EDGE_LeftRising (0x1UL)


/* PDM_GAINL: Left output gain adjustment */
  #define PDM_GAINL_ResetValue (0x00000028UL)

/* GAINL @Bits 0..6 : Left output gain adjustment, in 0.5 dB steps, around the default module gain (see electrical parameters)
                      0x00 -20 dB gain adjust 0x01 -19.5 dB gain adjust (...) 0x27 -0.5 dB gain adjust 0x28 0 dB gain adjust
                      0x29 +0.5 dB gain adjust (...) 0x4F +19.5 dB gain adjust 0x50 +20 dB gain adjust */

  #define PDM_GAINL_GAINL_Pos (0UL)
  #define PDM_GAINL_GAINL_Msk (0x7FUL << PDM_GAINL_GAINL_Pos)
  #define PDM_GAINL_GAINL_Min (0x0UL)
  #define PDM_GAINL_GAINL_Max (0x50UL)
  #define PDM_GAINL_GAINL_MinGain (0x00UL)
  #define PDM_GAINL_GAINL_DefaultGain (0x28UL)
  #define PDM_GAINL_GAINL_MaxGain (0x50UL)


/* PDM_GAINR: Right output gain adjustment */
  #define PDM_GAINR_ResetValue (0x00000028UL)

/* GAINR @Bits 0..6 : Right output gain adjustment, in 0.5 dB steps, around the default module gain (see electrical parameters)
                      */

  #define PDM_GAINR_GAINR_Pos (0UL)
  #define PDM_GAINR_GAINR_Msk (0x7FUL << PDM_GAINR_GAINR_Pos)
  #define PDM_GAINR_GAINR_Min (0x0UL)
  #define PDM_GAINR_GAINR_Max (0x50UL)
  #define PDM_GAINR_GAINR_MinGain (0x00UL)
  #define PDM_GAINR_GAINR_DefaultGain (0x28UL)
  #define PDM_GAINR_GAINR_MaxGain (0x50UL)


/* PDM_RATIO: Selects the decimation ratio between PDM_CLK and output sample rate. Change PRESCALER accordingly. */
  #define PDM_RATIO_ResetValue (0x00000002UL)

/* RATIO @Bits 0..2 : Selects the decimation ratio between PDM_CLK and output sample rate */
  #define PDM_RATIO_RATIO_Pos (0UL)
  #define PDM_RATIO_RATIO_Msk (0x7UL << PDM_RATIO_RATIO_Pos)
  #define PDM_RATIO_RATIO_Min (0x0UL)
  #define PDM_RATIO_RATIO_Max (0x7UL)
  #define PDM_RATIO_RATIO_Ratio32 (0x0UL)
  #define PDM_RATIO_RATIO_Ratio48 (0x1UL)
  #define PDM_RATIO_RATIO_Ratio50 (0x2UL)
  #define PDM_RATIO_RATIO_Ratio64 (0x3UL)
  #define PDM_RATIO_RATIO_Ratio80 (0x4UL)
  #define PDM_RATIO_RATIO_Ratio96 (0x5UL)
  #define PDM_RATIO_RATIO_Ratio100 (0x6UL)
  #define PDM_RATIO_RATIO_Ratio128 (0x7UL)


/* PDM_PRESCALER: The prescaler is used to set the PDM frequency */
  #define PDM_PRESCALER_ResetValue (0x00000004UL)

/* DIVISOR @Bits 0..31 : Core clock to PDM divisor */
  #define PDM_PRESCALER_DIVISOR_Pos (0UL)
  #define PDM_PRESCALER_DIVISOR_Msk (0xFFFFFFFFUL << PDM_PRESCALER_DIVISOR_Pos)
  #define PDM_PRESCALER_DIVISOR_Min (0x00000004UL)
  #define PDM_PRESCALER_DIVISOR_Max (0x0000007EUL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           POWER                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct POWER ======================================================= */
/**
  * @brief Power control
  */
  typedef struct {
    __IM uint32_t RESERVED[12];
    __OM uint32_t TASKS_CONSTLAT;
    __OM uint32_t TASKS_LOWPWR;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t SUBSCRIBE_CONSTLAT;
    __IOM uint32_t SUBSCRIBE_LOWPWR;
    __IM uint32_t RESERVED2[30];
    __IOM uint32_t EVENTS_POFWARN;
    __IOM uint32_t EVENTS_SLEEPENTER;
    __IOM uint32_t EVENTS_SLEEPEXIT;
    __IM uint32_t RESERVED3[30];
    __IOM uint32_t PUBLISH_SLEEPENTER;
    __IOM uint32_t PUBLISH_SLEEPEXIT;
    __IM uint32_t RESERVED4[81];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED5[125];
    __IOM uint32_t GPREGRET[2];
    __IM uint32_t RESERVED6[6];
    __IM uint32_t CONSTLATSTAT;
  } NRF_POWER_Type;

/* POWER_TASKS_CONSTLAT: Enable Constant Latency mode */
  #define POWER_TASKS_CONSTLAT_ResetValue (0x00000000UL)

/* TASKS_CONSTLAT @Bit 0 : Enable Constant Latency mode */
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Pos (0UL)
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Msk (0x1UL << POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Pos) /*!< Bit mask of
                                                                            TASKS_CONSTLAT field.*/
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Min (0x1UL)
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Max (0x1UL)
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Trigger (0x1UL)


/* POWER_TASKS_LOWPWR: Enable Low-power mode (variable latency) */
  #define POWER_TASKS_LOWPWR_ResetValue (0x00000000UL)

/* TASKS_LOWPWR @Bit 0 : Enable Low-power mode (variable latency) */
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Pos (0UL)
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Msk (0x1UL << POWER_TASKS_LOWPWR_TASKS_LOWPWR_Pos) /*!< Bit mask of TASKS_LOWPWR
                                                                            field.*/
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Min (0x1UL)
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Max (0x1UL)
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Trigger (0x1UL)


/* POWER_SUBSCRIBE_CONSTLAT: Subscribe configuration for task CONSTLAT */
  #define POWER_SUBSCRIBE_CONSTLAT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CONSTLAT will subscribe to */
  #define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Pos (0UL)
  #define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Msk (0xFFUL << POWER_SUBSCRIBE_CONSTLAT_CHIDX_Pos)
  #define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Min (0x00UL)
  #define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Pos (31UL)
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Msk (0x1UL << POWER_SUBSCRIBE_CONSTLAT_EN_Pos)
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Min (0x0UL)
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Max (0x1UL)
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Disabled (0x0UL)
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Enabled (0x1UL)


/* POWER_SUBSCRIBE_LOWPWR: Subscribe configuration for task LOWPWR */
  #define POWER_SUBSCRIBE_LOWPWR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task LOWPWR will subscribe to */
  #define POWER_SUBSCRIBE_LOWPWR_CHIDX_Pos (0UL)
  #define POWER_SUBSCRIBE_LOWPWR_CHIDX_Msk (0xFFUL << POWER_SUBSCRIBE_LOWPWR_CHIDX_Pos)
  #define POWER_SUBSCRIBE_LOWPWR_CHIDX_Min (0x00UL)
  #define POWER_SUBSCRIBE_LOWPWR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define POWER_SUBSCRIBE_LOWPWR_EN_Pos (31UL)
  #define POWER_SUBSCRIBE_LOWPWR_EN_Msk (0x1UL << POWER_SUBSCRIBE_LOWPWR_EN_Pos)
  #define POWER_SUBSCRIBE_LOWPWR_EN_Min (0x0UL)
  #define POWER_SUBSCRIBE_LOWPWR_EN_Max (0x1UL)
  #define POWER_SUBSCRIBE_LOWPWR_EN_Disabled (0x0UL)
  #define POWER_SUBSCRIBE_LOWPWR_EN_Enabled (0x1UL)


/* POWER_EVENTS_POFWARN: Power failure warning */
  #define POWER_EVENTS_POFWARN_ResetValue (0x00000000UL)

/* EVENTS_POFWARN @Bit 0 : Power failure warning */
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Pos (0UL)
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Msk (0x1UL << POWER_EVENTS_POFWARN_EVENTS_POFWARN_Pos) /*!< Bit mask of
                                                                            EVENTS_POFWARN field.*/
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Min (0x0UL)
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Max (0x1UL)
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_NotGenerated (0x0UL)
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Generated (0x1UL)


/* POWER_EVENTS_SLEEPENTER: CPU entered WFI/WFE sleep */
  #define POWER_EVENTS_SLEEPENTER_ResetValue (0x00000000UL)

/* EVENTS_SLEEPENTER @Bit 0 : CPU entered WFI/WFE sleep */
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos (0UL)
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Msk (0x1UL << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos) /*!< Bit mask
                                                                            of EVENTS_SLEEPENTER field.*/
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Min (0x0UL)
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Max (0x1UL)
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated (0x0UL)
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Generated (0x1UL)


/* POWER_EVENTS_SLEEPEXIT: CPU exited WFI/WFE sleep */
  #define POWER_EVENTS_SLEEPEXIT_ResetValue (0x00000000UL)

/* EVENTS_SLEEPEXIT @Bit 0 : CPU exited WFI/WFE sleep */
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos (0UL)
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Msk (0x1UL << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos) /*!< Bit mask of
                                                                            EVENTS_SLEEPEXIT field.*/
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Min (0x0UL)
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Max (0x1UL)
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated (0x0UL)
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Generated (0x1UL)


/* POWER_PUBLISH_SLEEPENTER: Publish configuration for event SLEEPENTER */
  #define POWER_PUBLISH_SLEEPENTER_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SLEEPENTER will publish to */
  #define POWER_PUBLISH_SLEEPENTER_CHIDX_Pos (0UL)
  #define POWER_PUBLISH_SLEEPENTER_CHIDX_Msk (0xFFUL << POWER_PUBLISH_SLEEPENTER_CHIDX_Pos)
  #define POWER_PUBLISH_SLEEPENTER_CHIDX_Min (0x00UL)
  #define POWER_PUBLISH_SLEEPENTER_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define POWER_PUBLISH_SLEEPENTER_EN_Pos (31UL)
  #define POWER_PUBLISH_SLEEPENTER_EN_Msk (0x1UL << POWER_PUBLISH_SLEEPENTER_EN_Pos)
  #define POWER_PUBLISH_SLEEPENTER_EN_Min (0x0UL)
  #define POWER_PUBLISH_SLEEPENTER_EN_Max (0x1UL)
  #define POWER_PUBLISH_SLEEPENTER_EN_Disabled (0x0UL)
  #define POWER_PUBLISH_SLEEPENTER_EN_Enabled (0x1UL)


/* POWER_PUBLISH_SLEEPEXIT: Publish configuration for event SLEEPEXIT */
  #define POWER_PUBLISH_SLEEPEXIT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SLEEPEXIT will publish to */
  #define POWER_PUBLISH_SLEEPEXIT_CHIDX_Pos (0UL)
  #define POWER_PUBLISH_SLEEPEXIT_CHIDX_Msk (0xFFUL << POWER_PUBLISH_SLEEPEXIT_CHIDX_Pos)
  #define POWER_PUBLISH_SLEEPEXIT_CHIDX_Min (0x00UL)
  #define POWER_PUBLISH_SLEEPEXIT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define POWER_PUBLISH_SLEEPEXIT_EN_Pos (31UL)
  #define POWER_PUBLISH_SLEEPEXIT_EN_Msk (0x1UL << POWER_PUBLISH_SLEEPEXIT_EN_Pos)
  #define POWER_PUBLISH_SLEEPEXIT_EN_Min (0x0UL)
  #define POWER_PUBLISH_SLEEPEXIT_EN_Max (0x1UL)
  #define POWER_PUBLISH_SLEEPEXIT_EN_Disabled (0x0UL)
  #define POWER_PUBLISH_SLEEPEXIT_EN_Enabled (0x1UL)


/* POWER_INTEN: Enable or disable interrupt */
  #define POWER_INTEN_ResetValue (0x00000000UL)

/* POFWARN @Bit 12 : Enable or disable interrupt for event POFWARN */
  #define POWER_INTEN_POFWARN_Pos (12UL)
  #define POWER_INTEN_POFWARN_Msk (0x1UL << POWER_INTEN_POFWARN_Pos)
  #define POWER_INTEN_POFWARN_Min (0x0UL)
  #define POWER_INTEN_POFWARN_Max (0x1UL)
  #define POWER_INTEN_POFWARN_Disabled (0x0UL)
  #define POWER_INTEN_POFWARN_Enabled (0x1UL)

/* SLEEPENTER @Bit 13 : Enable or disable interrupt for event SLEEPENTER */
  #define POWER_INTEN_SLEEPENTER_Pos (13UL)
  #define POWER_INTEN_SLEEPENTER_Msk (0x1UL << POWER_INTEN_SLEEPENTER_Pos)
  #define POWER_INTEN_SLEEPENTER_Min (0x0UL)
  #define POWER_INTEN_SLEEPENTER_Max (0x1UL)
  #define POWER_INTEN_SLEEPENTER_Disabled (0x0UL)
  #define POWER_INTEN_SLEEPENTER_Enabled (0x1UL)

/* SLEEPEXIT @Bit 14 : Enable or disable interrupt for event SLEEPEXIT */
  #define POWER_INTEN_SLEEPEXIT_Pos (14UL)
  #define POWER_INTEN_SLEEPEXIT_Msk (0x1UL << POWER_INTEN_SLEEPEXIT_Pos)
  #define POWER_INTEN_SLEEPEXIT_Min (0x0UL)
  #define POWER_INTEN_SLEEPEXIT_Max (0x1UL)
  #define POWER_INTEN_SLEEPEXIT_Disabled (0x0UL)
  #define POWER_INTEN_SLEEPEXIT_Enabled (0x1UL)


/* POWER_INTENSET: Enable interrupt */
  #define POWER_INTENSET_ResetValue (0x00000000UL)

/* POFWARN @Bit 12 : Write '1' to enable interrupt for event POFWARN */
  #define POWER_INTENSET_POFWARN_Pos (12UL)
  #define POWER_INTENSET_POFWARN_Msk (0x1UL << POWER_INTENSET_POFWARN_Pos)
  #define POWER_INTENSET_POFWARN_Min (0x0UL)
  #define POWER_INTENSET_POFWARN_Max (0x1UL)
  #define POWER_INTENSET_POFWARN_Set (0x1UL)
  #define POWER_INTENSET_POFWARN_Disabled (0x0UL)
  #define POWER_INTENSET_POFWARN_Enabled (0x1UL)

/* SLEEPENTER @Bit 13 : Write '1' to enable interrupt for event SLEEPENTER */
  #define POWER_INTENSET_SLEEPENTER_Pos (13UL)
  #define POWER_INTENSET_SLEEPENTER_Msk (0x1UL << POWER_INTENSET_SLEEPENTER_Pos)
  #define POWER_INTENSET_SLEEPENTER_Min (0x0UL)
  #define POWER_INTENSET_SLEEPENTER_Max (0x1UL)
  #define POWER_INTENSET_SLEEPENTER_Set (0x1UL)
  #define POWER_INTENSET_SLEEPENTER_Disabled (0x0UL)
  #define POWER_INTENSET_SLEEPENTER_Enabled (0x1UL)

/* SLEEPEXIT @Bit 14 : Write '1' to enable interrupt for event SLEEPEXIT */
  #define POWER_INTENSET_SLEEPEXIT_Pos (14UL)
  #define POWER_INTENSET_SLEEPEXIT_Msk (0x1UL << POWER_INTENSET_SLEEPEXIT_Pos)
  #define POWER_INTENSET_SLEEPEXIT_Min (0x0UL)
  #define POWER_INTENSET_SLEEPEXIT_Max (0x1UL)
  #define POWER_INTENSET_SLEEPEXIT_Set (0x1UL)
  #define POWER_INTENSET_SLEEPEXIT_Disabled (0x0UL)
  #define POWER_INTENSET_SLEEPEXIT_Enabled (0x1UL)


/* POWER_INTENCLR: Disable interrupt */
  #define POWER_INTENCLR_ResetValue (0x00000000UL)

/* POFWARN @Bit 12 : Write '1' to disable interrupt for event POFWARN */
  #define POWER_INTENCLR_POFWARN_Pos (12UL)
  #define POWER_INTENCLR_POFWARN_Msk (0x1UL << POWER_INTENCLR_POFWARN_Pos)
  #define POWER_INTENCLR_POFWARN_Min (0x0UL)
  #define POWER_INTENCLR_POFWARN_Max (0x1UL)
  #define POWER_INTENCLR_POFWARN_Clear (0x1UL)
  #define POWER_INTENCLR_POFWARN_Disabled (0x0UL)
  #define POWER_INTENCLR_POFWARN_Enabled (0x1UL)

/* SLEEPENTER @Bit 13 : Write '1' to disable interrupt for event SLEEPENTER */
  #define POWER_INTENCLR_SLEEPENTER_Pos (13UL)
  #define POWER_INTENCLR_SLEEPENTER_Msk (0x1UL << POWER_INTENCLR_SLEEPENTER_Pos)
  #define POWER_INTENCLR_SLEEPENTER_Min (0x0UL)
  #define POWER_INTENCLR_SLEEPENTER_Max (0x1UL)
  #define POWER_INTENCLR_SLEEPENTER_Clear (0x1UL)
  #define POWER_INTENCLR_SLEEPENTER_Disabled (0x0UL)
  #define POWER_INTENCLR_SLEEPENTER_Enabled (0x1UL)

/* SLEEPEXIT @Bit 14 : Write '1' to disable interrupt for event SLEEPEXIT */
  #define POWER_INTENCLR_SLEEPEXIT_Pos (14UL)
  #define POWER_INTENCLR_SLEEPEXIT_Msk (0x1UL << POWER_INTENCLR_SLEEPEXIT_Pos)
  #define POWER_INTENCLR_SLEEPEXIT_Min (0x0UL)
  #define POWER_INTENCLR_SLEEPEXIT_Max (0x1UL)
  #define POWER_INTENCLR_SLEEPEXIT_Clear (0x1UL)
  #define POWER_INTENCLR_SLEEPEXIT_Disabled (0x0UL)
  #define POWER_INTENCLR_SLEEPEXIT_Enabled (0x1UL)


/* POWER_GPREGRET: General purpose retention register */
  #define POWER_GPREGRET_MaxCount (2UL)
  #define POWER_GPREGRET_MaxIndex (1UL)
  #define POWER_GPREGRET_MinIndex (0UL)
  #define POWER_GPREGRET_ResetValue (0x00000000UL)

/* GPREGRET @Bits 0..7 : General purpose retention register */
  #define POWER_GPREGRET_GPREGRET_Pos (0UL)
  #define POWER_GPREGRET_GPREGRET_Msk (0xFFUL << POWER_GPREGRET_GPREGRET_Pos)


/* POWER_CONSTLATSTAT: Status of constant latency */
  #define POWER_CONSTLATSTAT_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : Status */
  #define POWER_CONSTLATSTAT_STATUS_Pos (0UL)
  #define POWER_CONSTLATSTAT_STATUS_Msk (0x1UL << POWER_CONSTLATSTAT_STATUS_Pos)
  #define POWER_CONSTLATSTAT_STATUS_Min (0x0UL)
  #define POWER_CONSTLATSTAT_STATUS_Max (0x1UL)
  #define POWER_CONSTLATSTAT_STATUS_Disable (0x0UL)
  #define POWER_CONSTLATSTAT_STATUS_Enable (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           PPIB                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct PPIB_OVERFLOW =================================================== */
/**
  * @brief OVERFLOW [PPIB_OVERFLOW] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SEND;                              /*!< (@ 0x00000000) The task overflow for SEND tasks using SUBSCRIBE_SEND.
                                                                         Write 0 to clear.*/
} NRF_PPIB_OVERFLOW_Type;

/* PPIB_OVERFLOW_SEND: The task overflow for SEND tasks using SUBSCRIBE_SEND. Write 0 to clear. */
  #define PPIB_OVERFLOW_SEND_ResetValue (0x00000000UL)

/* SEND0 @Bit 0 : The status for tasks overflow at SUBSCRIBE_SEND[0]. */
  #define PPIB_OVERFLOW_SEND_SEND0_Pos (0UL)
  #define PPIB_OVERFLOW_SEND_SEND0_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND0_Pos)
  #define PPIB_OVERFLOW_SEND_SEND0_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND0_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND0_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND0_NoOverflow (0x0UL)

/* SEND1 @Bit 1 : The status for tasks overflow at SUBSCRIBE_SEND[1]. */
  #define PPIB_OVERFLOW_SEND_SEND1_Pos (1UL)
  #define PPIB_OVERFLOW_SEND_SEND1_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND1_Pos)
  #define PPIB_OVERFLOW_SEND_SEND1_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND1_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND1_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND1_NoOverflow (0x0UL)

/* SEND2 @Bit 2 : The status for tasks overflow at SUBSCRIBE_SEND[2]. */
  #define PPIB_OVERFLOW_SEND_SEND2_Pos (2UL)
  #define PPIB_OVERFLOW_SEND_SEND2_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND2_Pos)
  #define PPIB_OVERFLOW_SEND_SEND2_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND2_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND2_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND2_NoOverflow (0x0UL)

/* SEND3 @Bit 3 : The status for tasks overflow at SUBSCRIBE_SEND[3]. */
  #define PPIB_OVERFLOW_SEND_SEND3_Pos (3UL)
  #define PPIB_OVERFLOW_SEND_SEND3_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND3_Pos)
  #define PPIB_OVERFLOW_SEND_SEND3_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND3_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND3_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND3_NoOverflow (0x0UL)

/* SEND4 @Bit 4 : The status for tasks overflow at SUBSCRIBE_SEND[4]. */
  #define PPIB_OVERFLOW_SEND_SEND4_Pos (4UL)
  #define PPIB_OVERFLOW_SEND_SEND4_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND4_Pos)
  #define PPIB_OVERFLOW_SEND_SEND4_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND4_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND4_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND4_NoOverflow (0x0UL)

/* SEND5 @Bit 5 : The status for tasks overflow at SUBSCRIBE_SEND[5]. */
  #define PPIB_OVERFLOW_SEND_SEND5_Pos (5UL)
  #define PPIB_OVERFLOW_SEND_SEND5_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND5_Pos)
  #define PPIB_OVERFLOW_SEND_SEND5_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND5_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND5_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND5_NoOverflow (0x0UL)

/* SEND6 @Bit 6 : The status for tasks overflow at SUBSCRIBE_SEND[6]. */
  #define PPIB_OVERFLOW_SEND_SEND6_Pos (6UL)
  #define PPIB_OVERFLOW_SEND_SEND6_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND6_Pos)
  #define PPIB_OVERFLOW_SEND_SEND6_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND6_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND6_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND6_NoOverflow (0x0UL)

/* SEND7 @Bit 7 : The status for tasks overflow at SUBSCRIBE_SEND[7]. */
  #define PPIB_OVERFLOW_SEND_SEND7_Pos (7UL)
  #define PPIB_OVERFLOW_SEND_SEND7_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND7_Pos)
  #define PPIB_OVERFLOW_SEND_SEND7_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND7_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND7_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND7_NoOverflow (0x0UL)

/* SEND8 @Bit 8 : The status for tasks overflow at SUBSCRIBE_SEND[8]. */
  #define PPIB_OVERFLOW_SEND_SEND8_Pos (8UL)
  #define PPIB_OVERFLOW_SEND_SEND8_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND8_Pos)
  #define PPIB_OVERFLOW_SEND_SEND8_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND8_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND8_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND8_NoOverflow (0x0UL)

/* SEND9 @Bit 9 : The status for tasks overflow at SUBSCRIBE_SEND[9]. */
  #define PPIB_OVERFLOW_SEND_SEND9_Pos (9UL)
  #define PPIB_OVERFLOW_SEND_SEND9_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND9_Pos)
  #define PPIB_OVERFLOW_SEND_SEND9_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND9_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND9_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND9_NoOverflow (0x0UL)

/* SEND10 @Bit 10 : The status for tasks overflow at SUBSCRIBE_SEND[10]. */
  #define PPIB_OVERFLOW_SEND_SEND10_Pos (10UL)
  #define PPIB_OVERFLOW_SEND_SEND10_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND10_Pos)
  #define PPIB_OVERFLOW_SEND_SEND10_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND10_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND10_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND10_NoOverflow (0x0UL)

/* SEND11 @Bit 11 : The status for tasks overflow at SUBSCRIBE_SEND[11]. */
  #define PPIB_OVERFLOW_SEND_SEND11_Pos (11UL)
  #define PPIB_OVERFLOW_SEND_SEND11_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND11_Pos)
  #define PPIB_OVERFLOW_SEND_SEND11_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND11_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND11_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND11_NoOverflow (0x0UL)

/* SEND12 @Bit 12 : The status for tasks overflow at SUBSCRIBE_SEND[12]. */
  #define PPIB_OVERFLOW_SEND_SEND12_Pos (12UL)
  #define PPIB_OVERFLOW_SEND_SEND12_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND12_Pos)
  #define PPIB_OVERFLOW_SEND_SEND12_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND12_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND12_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND12_NoOverflow (0x0UL)

/* SEND13 @Bit 13 : The status for tasks overflow at SUBSCRIBE_SEND[13]. */
  #define PPIB_OVERFLOW_SEND_SEND13_Pos (13UL)
  #define PPIB_OVERFLOW_SEND_SEND13_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND13_Pos)
  #define PPIB_OVERFLOW_SEND_SEND13_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND13_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND13_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND13_NoOverflow (0x0UL)

/* SEND14 @Bit 14 : The status for tasks overflow at SUBSCRIBE_SEND[14]. */
  #define PPIB_OVERFLOW_SEND_SEND14_Pos (14UL)
  #define PPIB_OVERFLOW_SEND_SEND14_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND14_Pos)
  #define PPIB_OVERFLOW_SEND_SEND14_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND14_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND14_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND14_NoOverflow (0x0UL)

/* SEND15 @Bit 15 : The status for tasks overflow at SUBSCRIBE_SEND[15]. */
  #define PPIB_OVERFLOW_SEND_SEND15_Pos (15UL)
  #define PPIB_OVERFLOW_SEND_SEND15_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND15_Pos)
  #define PPIB_OVERFLOW_SEND_SEND15_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND15_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND15_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND15_NoOverflow (0x0UL)

/* SEND16 @Bit 16 : The status for tasks overflow at SUBSCRIBE_SEND[16]. */
  #define PPIB_OVERFLOW_SEND_SEND16_Pos (16UL)
  #define PPIB_OVERFLOW_SEND_SEND16_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND16_Pos)
  #define PPIB_OVERFLOW_SEND_SEND16_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND16_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND16_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND16_NoOverflow (0x0UL)

/* SEND17 @Bit 17 : The status for tasks overflow at SUBSCRIBE_SEND[17]. */
  #define PPIB_OVERFLOW_SEND_SEND17_Pos (17UL)
  #define PPIB_OVERFLOW_SEND_SEND17_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND17_Pos)
  #define PPIB_OVERFLOW_SEND_SEND17_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND17_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND17_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND17_NoOverflow (0x0UL)

/* SEND18 @Bit 18 : The status for tasks overflow at SUBSCRIBE_SEND[18]. */
  #define PPIB_OVERFLOW_SEND_SEND18_Pos (18UL)
  #define PPIB_OVERFLOW_SEND_SEND18_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND18_Pos)
  #define PPIB_OVERFLOW_SEND_SEND18_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND18_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND18_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND18_NoOverflow (0x0UL)

/* SEND19 @Bit 19 : The status for tasks overflow at SUBSCRIBE_SEND[19]. */
  #define PPIB_OVERFLOW_SEND_SEND19_Pos (19UL)
  #define PPIB_OVERFLOW_SEND_SEND19_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND19_Pos)
  #define PPIB_OVERFLOW_SEND_SEND19_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND19_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND19_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND19_NoOverflow (0x0UL)

/* SEND20 @Bit 20 : The status for tasks overflow at SUBSCRIBE_SEND[20]. */
  #define PPIB_OVERFLOW_SEND_SEND20_Pos (20UL)
  #define PPIB_OVERFLOW_SEND_SEND20_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND20_Pos)
  #define PPIB_OVERFLOW_SEND_SEND20_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND20_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND20_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND20_NoOverflow (0x0UL)

/* SEND21 @Bit 21 : The status for tasks overflow at SUBSCRIBE_SEND[21]. */
  #define PPIB_OVERFLOW_SEND_SEND21_Pos (21UL)
  #define PPIB_OVERFLOW_SEND_SEND21_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND21_Pos)
  #define PPIB_OVERFLOW_SEND_SEND21_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND21_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND21_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND21_NoOverflow (0x0UL)

/* SEND22 @Bit 22 : The status for tasks overflow at SUBSCRIBE_SEND[22]. */
  #define PPIB_OVERFLOW_SEND_SEND22_Pos (22UL)
  #define PPIB_OVERFLOW_SEND_SEND22_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND22_Pos)
  #define PPIB_OVERFLOW_SEND_SEND22_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND22_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND22_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND22_NoOverflow (0x0UL)

/* SEND23 @Bit 23 : The status for tasks overflow at SUBSCRIBE_SEND[23]. */
  #define PPIB_OVERFLOW_SEND_SEND23_Pos (23UL)
  #define PPIB_OVERFLOW_SEND_SEND23_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND23_Pos)
  #define PPIB_OVERFLOW_SEND_SEND23_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND23_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND23_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND23_NoOverflow (0x0UL)

/* SEND24 @Bit 24 : The status for tasks overflow at SUBSCRIBE_SEND[24]. */
  #define PPIB_OVERFLOW_SEND_SEND24_Pos (24UL)
  #define PPIB_OVERFLOW_SEND_SEND24_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND24_Pos)
  #define PPIB_OVERFLOW_SEND_SEND24_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND24_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND24_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND24_NoOverflow (0x0UL)

/* SEND25 @Bit 25 : The status for tasks overflow at SUBSCRIBE_SEND[25]. */
  #define PPIB_OVERFLOW_SEND_SEND25_Pos (25UL)
  #define PPIB_OVERFLOW_SEND_SEND25_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND25_Pos)
  #define PPIB_OVERFLOW_SEND_SEND25_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND25_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND25_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND25_NoOverflow (0x0UL)

/* SEND26 @Bit 26 : The status for tasks overflow at SUBSCRIBE_SEND[26]. */
  #define PPIB_OVERFLOW_SEND_SEND26_Pos (26UL)
  #define PPIB_OVERFLOW_SEND_SEND26_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND26_Pos)
  #define PPIB_OVERFLOW_SEND_SEND26_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND26_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND26_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND26_NoOverflow (0x0UL)

/* SEND27 @Bit 27 : The status for tasks overflow at SUBSCRIBE_SEND[27]. */
  #define PPIB_OVERFLOW_SEND_SEND27_Pos (27UL)
  #define PPIB_OVERFLOW_SEND_SEND27_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND27_Pos)
  #define PPIB_OVERFLOW_SEND_SEND27_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND27_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND27_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND27_NoOverflow (0x0UL)

/* SEND28 @Bit 28 : The status for tasks overflow at SUBSCRIBE_SEND[28]. */
  #define PPIB_OVERFLOW_SEND_SEND28_Pos (28UL)
  #define PPIB_OVERFLOW_SEND_SEND28_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND28_Pos)
  #define PPIB_OVERFLOW_SEND_SEND28_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND28_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND28_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND28_NoOverflow (0x0UL)

/* SEND29 @Bit 29 : The status for tasks overflow at SUBSCRIBE_SEND[29]. */
  #define PPIB_OVERFLOW_SEND_SEND29_Pos (29UL)
  #define PPIB_OVERFLOW_SEND_SEND29_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND29_Pos)
  #define PPIB_OVERFLOW_SEND_SEND29_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND29_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND29_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND29_NoOverflow (0x0UL)

/* SEND30 @Bit 30 : The status for tasks overflow at SUBSCRIBE_SEND[30]. */
  #define PPIB_OVERFLOW_SEND_SEND30_Pos (30UL)
  #define PPIB_OVERFLOW_SEND_SEND30_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND30_Pos)
  #define PPIB_OVERFLOW_SEND_SEND30_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND30_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND30_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND30_NoOverflow (0x0UL)

/* SEND31 @Bit 31 : The status for tasks overflow at SUBSCRIBE_SEND[31]. */
  #define PPIB_OVERFLOW_SEND_SEND31_Pos (31UL)
  #define PPIB_OVERFLOW_SEND_SEND31_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND31_Pos)
  #define PPIB_OVERFLOW_SEND_SEND31_Min (0x0UL)
  #define PPIB_OVERFLOW_SEND_SEND31_Max (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND31_Overflow (0x1UL)
  #define PPIB_OVERFLOW_SEND_SEND31_NoOverflow (0x0UL)


/* ======================================================= Struct PPIB ======================================================= */
/**
  * @brief PPIB APB registers
  */
  typedef struct {
    __OM uint32_t TASKS_SEND[32];                    /*!< (@ 0x00000000) This task is unused, but the PPIB provides the
                                                                         SUBSCRIBE task to connect SEND [n] task.*/
    __IOM uint32_t SUBSCRIBE_SEND[32];
    __IOM uint32_t EVENTS_RECEIVE[32];               /*!< (@ 0x00000100) This event is unused, but the PPIB provides the PUBLISH
                                                                         event to connect RECEIVE [n] event.*/
    __IOM uint32_t PUBLISH_RECEIVE[32];
    __IM uint32_t RESERVED[128];
    __IOM NRF_PPIB_OVERFLOW_Type OVERFLOW;
  } NRF_PPIB_Type;

/* PPIB_TASKS_SEND: This task is unused, but the PPIB provides the SUBSCRIBE task to connect SEND [n] task. */
  #define PPIB_TASKS_SEND_MaxCount (32UL)
  #define PPIB_TASKS_SEND_MaxIndex (31UL)
  #define PPIB_TASKS_SEND_MinIndex (0UL)
  #define PPIB_TASKS_SEND_ResetValue (0x00000000UL)

/* TASKS_SEND @Bit 0 : This task is unused, but the PPIB provides the SUBSCRIBE task to connect SEND [n] task. */
  #define PPIB_TASKS_SEND_TASKS_SEND_Pos (0UL)
  #define PPIB_TASKS_SEND_TASKS_SEND_Msk (0x1UL << PPIB_TASKS_SEND_TASKS_SEND_Pos)
  #define PPIB_TASKS_SEND_TASKS_SEND_Min (0x1UL)
  #define PPIB_TASKS_SEND_TASKS_SEND_Max (0x1UL)
  #define PPIB_TASKS_SEND_TASKS_SEND_Trigger (0x1UL)


/* PPIB_SUBSCRIBE_SEND: Subscribe configuration for task SEND[n] */
  #define PPIB_SUBSCRIBE_SEND_MaxCount (32UL)
  #define PPIB_SUBSCRIBE_SEND_MaxIndex (31UL)
  #define PPIB_SUBSCRIBE_SEND_MinIndex (0UL)
  #define PPIB_SUBSCRIBE_SEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SEND[n] will subscribe to */
  #define PPIB_SUBSCRIBE_SEND_CHIDX_Pos (0UL)
  #define PPIB_SUBSCRIBE_SEND_CHIDX_Msk (0xFFUL << PPIB_SUBSCRIBE_SEND_CHIDX_Pos)
  #define PPIB_SUBSCRIBE_SEND_CHIDX_Min (0x00UL)
  #define PPIB_SUBSCRIBE_SEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PPIB_SUBSCRIBE_SEND_EN_Pos (31UL)
  #define PPIB_SUBSCRIBE_SEND_EN_Msk (0x1UL << PPIB_SUBSCRIBE_SEND_EN_Pos)
  #define PPIB_SUBSCRIBE_SEND_EN_Min (0x0UL)
  #define PPIB_SUBSCRIBE_SEND_EN_Max (0x1UL)
  #define PPIB_SUBSCRIBE_SEND_EN_Disabled (0x0UL)
  #define PPIB_SUBSCRIBE_SEND_EN_Enabled (0x1UL)


/* PPIB_EVENTS_RECEIVE: This event is unused, but the PPIB provides the PUBLISH event to connect RECEIVE [n] event. */
  #define PPIB_EVENTS_RECEIVE_MaxCount (32UL)
  #define PPIB_EVENTS_RECEIVE_MaxIndex (31UL)
  #define PPIB_EVENTS_RECEIVE_MinIndex (0UL)
  #define PPIB_EVENTS_RECEIVE_ResetValue (0x00000000UL)

/* EVENTS_RECEIVE @Bit 0 : This event is unused, but the PPIB provides the PUBLISH event to connect RECEIVE [n] event. */
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Pos (0UL)
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Msk (0x1UL << PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Pos) /*!< Bit mask of
                                                                            EVENTS_RECEIVE field.*/
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Min (0x0UL)
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Max (0x1UL)
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_NotGenerated (0x0UL)
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Generated (0x1UL)


/* PPIB_PUBLISH_RECEIVE: Publish configuration for event RECEIVE[n] */
  #define PPIB_PUBLISH_RECEIVE_MaxCount (32UL)
  #define PPIB_PUBLISH_RECEIVE_MaxIndex (31UL)
  #define PPIB_PUBLISH_RECEIVE_MinIndex (0UL)
  #define PPIB_PUBLISH_RECEIVE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RECEIVE[n] will publish to */
  #define PPIB_PUBLISH_RECEIVE_CHIDX_Pos (0UL)
  #define PPIB_PUBLISH_RECEIVE_CHIDX_Msk (0xFFUL << PPIB_PUBLISH_RECEIVE_CHIDX_Pos)
  #define PPIB_PUBLISH_RECEIVE_CHIDX_Min (0x00UL)
  #define PPIB_PUBLISH_RECEIVE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PPIB_PUBLISH_RECEIVE_EN_Pos (31UL)
  #define PPIB_PUBLISH_RECEIVE_EN_Msk (0x1UL << PPIB_PUBLISH_RECEIVE_EN_Pos)
  #define PPIB_PUBLISH_RECEIVE_EN_Min (0x0UL)
  #define PPIB_PUBLISH_RECEIVE_EN_Max (0x1UL)
  #define PPIB_PUBLISH_RECEIVE_EN_Disabled (0x0UL)
  #define PPIB_PUBLISH_RECEIVE_EN_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            PWM                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct PWM_TASKS_DMA_SEQ ================================================= */
/**
  * @brief SEQ [PWM_TASKS_DMA_SEQ] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
} NRF_PWM_TASKS_DMA_SEQ_Type;
  #define PWM_TASKS_DMA_SEQ_MaxCount (2UL)
  #define PWM_TASKS_DMA_SEQ_MaxIndex (1UL)
  #define PWM_TASKS_DMA_SEQ_MinIndex (0UL)

/* PWM_TASKS_DMA_SEQ_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                             easyDMA. */

  #define PWM_TASKS_DMA_SEQ_START_ResetValue (0x00000000UL)

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define PWM_TASKS_DMA_SEQ_START_START_Pos (0UL)
  #define PWM_TASKS_DMA_SEQ_START_START_Msk (0x1UL << PWM_TASKS_DMA_SEQ_START_START_Pos)
  #define PWM_TASKS_DMA_SEQ_START_START_Min (0x1UL)
  #define PWM_TASKS_DMA_SEQ_START_START_Max (0x1UL)
  #define PWM_TASKS_DMA_SEQ_START_START_Trigger (0x1UL)


/* PWM_TASKS_DMA_SEQ_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define PWM_TASKS_DMA_SEQ_STOP_ResetValue (0x00000000UL)

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define PWM_TASKS_DMA_SEQ_STOP_STOP_Pos (0UL)
  #define PWM_TASKS_DMA_SEQ_STOP_STOP_Msk (0x1UL << PWM_TASKS_DMA_SEQ_STOP_STOP_Pos)
  #define PWM_TASKS_DMA_SEQ_STOP_STOP_Min (0x1UL)
  #define PWM_TASKS_DMA_SEQ_STOP_STOP_Max (0x1UL)
  #define PWM_TASKS_DMA_SEQ_STOP_STOP_Trigger (0x1UL)



/* ================================================== Struct PWM_TASKS_DMA =================================================== */
/**
  * @brief TASKS_DMA [PWM_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __OM  NRF_PWM_TASKS_DMA_SEQ_Type SEQ[2];
} NRF_PWM_TASKS_DMA_Type;


/* ============================================== Struct PWM_SUBSCRIBE_DMA_SEQ =============================================== */
/**
  * @brief SEQ [PWM_SUBSCRIBE_DMA_SEQ] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;
  __IOM uint32_t  STOP;
} NRF_PWM_SUBSCRIBE_DMA_SEQ_Type;
  #define PWM_SUBSCRIBE_DMA_SEQ_MaxCount (2UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_MaxIndex (1UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_MinIndex (0UL)

/* PWM_SUBSCRIBE_DMA_SEQ_START: Subscribe configuration for task START */
  #define PWM_SUBSCRIBE_DMA_SEQ_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define PWM_SUBSCRIBE_DMA_SEQ_START_CHIDX_Pos (0UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_START_CHIDX_Msk (0xFFUL << PWM_SUBSCRIBE_DMA_SEQ_START_CHIDX_Pos)
  #define PWM_SUBSCRIBE_DMA_SEQ_START_CHIDX_Min (0x00UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_SUBSCRIBE_DMA_SEQ_START_EN_Pos (31UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_START_EN_Msk (0x1UL << PWM_SUBSCRIBE_DMA_SEQ_START_EN_Pos)
  #define PWM_SUBSCRIBE_DMA_SEQ_START_EN_Min (0x0UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_START_EN_Max (0x1UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_START_EN_Disabled (0x0UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_START_EN_Enabled (0x1UL)


/* PWM_SUBSCRIBE_DMA_SEQ_STOP: Subscribe configuration for task STOP */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_CHIDX_Pos (0UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_CHIDX_Msk (0xFFUL << PWM_SUBSCRIBE_DMA_SEQ_STOP_CHIDX_Pos)
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_CHIDX_Min (0x00UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Pos (31UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Msk (0x1UL << PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Pos)
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Min (0x0UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Max (0x1UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Disabled (0x0UL)
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Enabled (0x1UL)



/* ================================================ Struct PWM_SUBSCRIBE_DMA ================================================= */
/**
  * @brief SUBSCRIBE_DMA [PWM_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IOM NRF_PWM_SUBSCRIBE_DMA_SEQ_Type SEQ[2];
} NRF_PWM_SUBSCRIBE_DMA_Type;


/* ================================================ Struct PWM_EVENTS_DMA_SEQ ================================================ */
/**
  * @brief SEQ [PWM_EVENTS_DMA_SEQ] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
} NRF_PWM_EVENTS_DMA_SEQ_Type;
  #define PWM_EVENTS_DMA_SEQ_MaxCount (2UL)
  #define PWM_EVENTS_DMA_SEQ_MaxIndex (1UL)
  #define PWM_EVENTS_DMA_SEQ_MinIndex (0UL)

/* PWM_EVENTS_DMA_SEQ_END: Generated after all MAXCNT bytes have been transferred */
  #define PWM_EVENTS_DMA_SEQ_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define PWM_EVENTS_DMA_SEQ_END_END_Pos (0UL)
  #define PWM_EVENTS_DMA_SEQ_END_END_Msk (0x1UL << PWM_EVENTS_DMA_SEQ_END_END_Pos)
  #define PWM_EVENTS_DMA_SEQ_END_END_Min (0x0UL)
  #define PWM_EVENTS_DMA_SEQ_END_END_Max (0x1UL)
  #define PWM_EVENTS_DMA_SEQ_END_END_NotGenerated (0x0UL)
  #define PWM_EVENTS_DMA_SEQ_END_END_Generated (0x1UL)


/* PWM_EVENTS_DMA_SEQ_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define PWM_EVENTS_DMA_SEQ_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define PWM_EVENTS_DMA_SEQ_READY_READY_Pos (0UL)
  #define PWM_EVENTS_DMA_SEQ_READY_READY_Msk (0x1UL << PWM_EVENTS_DMA_SEQ_READY_READY_Pos)
  #define PWM_EVENTS_DMA_SEQ_READY_READY_Min (0x0UL)
  #define PWM_EVENTS_DMA_SEQ_READY_READY_Max (0x1UL)
  #define PWM_EVENTS_DMA_SEQ_READY_READY_NotGenerated (0x0UL)
  #define PWM_EVENTS_DMA_SEQ_READY_READY_Generated (0x1UL)


/* PWM_EVENTS_DMA_SEQ_BUSERROR: An error occured during the bus transfer. */
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_Pos (0UL)
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_Msk (0x1UL << PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_Min (0x0UL)
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_Max (0x1UL)
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_Generated (0x1UL)



/* ================================================== Struct PWM_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [PWM_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_PWM_EVENTS_DMA_SEQ_Type SEQ[2];
} NRF_PWM_EVENTS_DMA_Type;


/* =============================================== Struct PWM_PUBLISH_DMA_SEQ ================================================ */
/**
  * @brief SEQ [PWM_PUBLISH_DMA_SEQ] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
} NRF_PWM_PUBLISH_DMA_SEQ_Type;
  #define PWM_PUBLISH_DMA_SEQ_MaxCount (2UL)
  #define PWM_PUBLISH_DMA_SEQ_MaxIndex (1UL)
  #define PWM_PUBLISH_DMA_SEQ_MinIndex (0UL)

/* PWM_PUBLISH_DMA_SEQ_END: Publish configuration for event END */
  #define PWM_PUBLISH_DMA_SEQ_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define PWM_PUBLISH_DMA_SEQ_END_CHIDX_Pos (0UL)
  #define PWM_PUBLISH_DMA_SEQ_END_CHIDX_Msk (0xFFUL << PWM_PUBLISH_DMA_SEQ_END_CHIDX_Pos)
  #define PWM_PUBLISH_DMA_SEQ_END_CHIDX_Min (0x00UL)
  #define PWM_PUBLISH_DMA_SEQ_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_DMA_SEQ_END_EN_Pos (31UL)
  #define PWM_PUBLISH_DMA_SEQ_END_EN_Msk (0x1UL << PWM_PUBLISH_DMA_SEQ_END_EN_Pos)
  #define PWM_PUBLISH_DMA_SEQ_END_EN_Min (0x0UL)
  #define PWM_PUBLISH_DMA_SEQ_END_EN_Max (0x1UL)
  #define PWM_PUBLISH_DMA_SEQ_END_EN_Disabled (0x0UL)
  #define PWM_PUBLISH_DMA_SEQ_END_EN_Enabled (0x1UL)


/* PWM_PUBLISH_DMA_SEQ_READY: Publish configuration for event READY */
  #define PWM_PUBLISH_DMA_SEQ_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define PWM_PUBLISH_DMA_SEQ_READY_CHIDX_Pos (0UL)
  #define PWM_PUBLISH_DMA_SEQ_READY_CHIDX_Msk (0xFFUL << PWM_PUBLISH_DMA_SEQ_READY_CHIDX_Pos)
  #define PWM_PUBLISH_DMA_SEQ_READY_CHIDX_Min (0x00UL)
  #define PWM_PUBLISH_DMA_SEQ_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_DMA_SEQ_READY_EN_Pos (31UL)
  #define PWM_PUBLISH_DMA_SEQ_READY_EN_Msk (0x1UL << PWM_PUBLISH_DMA_SEQ_READY_EN_Pos)
  #define PWM_PUBLISH_DMA_SEQ_READY_EN_Min (0x0UL)
  #define PWM_PUBLISH_DMA_SEQ_READY_EN_Max (0x1UL)
  #define PWM_PUBLISH_DMA_SEQ_READY_EN_Disabled (0x0UL)
  #define PWM_PUBLISH_DMA_SEQ_READY_EN_Enabled (0x1UL)


/* PWM_PUBLISH_DMA_SEQ_BUSERROR: Publish configuration for event BUSERROR */
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_CHIDX_Pos (0UL)
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_CHIDX_Msk (0xFFUL << PWM_PUBLISH_DMA_SEQ_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_CHIDX_Min (0x00UL)
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Pos (31UL)
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Msk (0x1UL << PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Pos)
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Min (0x0UL)
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Max (0x1UL)
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Disabled (0x0UL)
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Enabled (0x1UL)



/* ================================================= Struct PWM_PUBLISH_DMA ================================================== */
/**
  * @brief PUBLISH_DMA [PWM_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_PWM_PUBLISH_DMA_SEQ_Type SEQ[2];
} NRF_PWM_PUBLISH_DMA_Type;


/* ===================================================== Struct PWM_SEQ ====================================================== */
/**
  * @brief SEQ [PWM_SEQ] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  REFRESH;                           /*!< (@ 0x00000008) Number of additional PWM periods between samples loaded
                                                                         into compare register*/
  __IOM uint32_t  ENDDELAY;
  __IM  uint32_t  RESERVED1[4];
} NRF_PWM_SEQ_Type;
  #define PWM_SEQ_MaxCount (2UL)
  #define PWM_SEQ_MaxIndex (1UL)
  #define PWM_SEQ_MinIndex (0UL)

/* PWM_SEQ_REFRESH: Number of additional PWM periods between samples loaded into compare register */
  #define PWM_SEQ_REFRESH_ResetValue (0x00000001UL)

/* CNT @Bits 0..23 : Number of additional PWM periods between samples loaded into compare register (load every REFRESH.CNT+1 PWM
                     periods) */

  #define PWM_SEQ_REFRESH_CNT_Pos (0UL)
  #define PWM_SEQ_REFRESH_CNT_Msk (0xFFFFFFUL << PWM_SEQ_REFRESH_CNT_Pos)
  #define PWM_SEQ_REFRESH_CNT_Min (0x0UL)
  #define PWM_SEQ_REFRESH_CNT_Max (0x0UL)
  #define PWM_SEQ_REFRESH_CNT_Continuous (0x000000UL)


/* PWM_SEQ_ENDDELAY: Time added after the sequence */
  #define PWM_SEQ_ENDDELAY_ResetValue (0x00000000UL)

/* CNT @Bits 0..23 : Time added after the sequence in PWM periods */
  #define PWM_SEQ_ENDDELAY_CNT_Pos (0UL)
  #define PWM_SEQ_ENDDELAY_CNT_Msk (0xFFFFFFUL << PWM_SEQ_ENDDELAY_CNT_Pos)



/* ===================================================== Struct PWM_PSEL ===================================================== */
/**
  * @brief PSEL [PWM_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  OUT[4];
} NRF_PWM_PSEL_Type;

/* PWM_PSEL_OUT: Output pin select for PWM channel n */
  #define PWM_PSEL_OUT_MaxCount (4UL)
  #define PWM_PSEL_OUT_MaxIndex (3UL)
  #define PWM_PSEL_OUT_MinIndex (0UL)
  #define PWM_PSEL_OUT_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define PWM_PSEL_OUT_PIN_Pos (0UL)
  #define PWM_PSEL_OUT_PIN_Msk (0x1FUL << PWM_PSEL_OUT_PIN_Pos)
  #define PWM_PSEL_OUT_PIN_Min (0x00UL)
  #define PWM_PSEL_OUT_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define PWM_PSEL_OUT_PORT_Pos (5UL)
  #define PWM_PSEL_OUT_PORT_Msk (0x7UL << PWM_PSEL_OUT_PORT_Pos)
  #define PWM_PSEL_OUT_PORT_Min (0x1UL)
  #define PWM_PSEL_OUT_PORT_Max (0x1UL)

/* CONNECT @Bit 31 : Connection */
  #define PWM_PSEL_OUT_CONNECT_Pos (31UL)
  #define PWM_PSEL_OUT_CONNECT_Msk (0x1UL << PWM_PSEL_OUT_CONNECT_Pos)
  #define PWM_PSEL_OUT_CONNECT_Min (0x0UL)
  #define PWM_PSEL_OUT_CONNECT_Max (0x1UL)
  #define PWM_PSEL_OUT_CONNECT_Disconnected (0x1UL)
  #define PWM_PSEL_OUT_CONNECT_Connected (0x0UL)



/* =================================================== Struct PWM_DMA_SEQ ==================================================== */
/**
  * @brief SEQ [PWM_DMA_SEQ] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event.*/
  __IM  uint32_t  CURRENTAMOUNT;
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_PWM_DMA_SEQ_Type;
  #define PWM_DMA_SEQ_MaxCount (2UL)
  #define PWM_DMA_SEQ_MaxIndex (1UL)
  #define PWM_DMA_SEQ_MinIndex (0UL)

/* PWM_DMA_SEQ_PTR: RAM buffer start address */
  #define PWM_DMA_SEQ_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define PWM_DMA_SEQ_PTR_PTR_Pos (0UL)
  #define PWM_DMA_SEQ_PTR_PTR_Msk (0xFFFFFFFFUL << PWM_DMA_SEQ_PTR_PTR_Pos)


/* PWM_DMA_SEQ_MAXCNT: Maximum number of bytes in channel buffer */
  #define PWM_DMA_SEQ_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define PWM_DMA_SEQ_MAXCNT_MAXCNT_Pos (0UL)
  #define PWM_DMA_SEQ_MAXCNT_MAXCNT_Msk (0xFFFFUL << PWM_DMA_SEQ_MAXCNT_MAXCNT_Pos)
  #define PWM_DMA_SEQ_MAXCNT_MAXCNT_Min (0x0001UL)
  #define PWM_DMA_SEQ_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* PWM_DMA_SEQ_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. */
  #define PWM_DMA_SEQ_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define PWM_DMA_SEQ_AMOUNT_AMOUNT_Pos (0UL)
  #define PWM_DMA_SEQ_AMOUNT_AMOUNT_Msk (0xFFFFUL << PWM_DMA_SEQ_AMOUNT_AMOUNT_Pos)
  #define PWM_DMA_SEQ_AMOUNT_AMOUNT_Min (0x0001UL)
  #define PWM_DMA_SEQ_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* PWM_DMA_SEQ_CURRENTAMOUNT: Number of bytes transferred in the current transaction */
  #define PWM_DMA_SEQ_CURRENTAMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the current transaction. Continuously updated. */
  #define PWM_DMA_SEQ_CURRENTAMOUNT_AMOUNT_Pos (0UL)
  #define PWM_DMA_SEQ_CURRENTAMOUNT_AMOUNT_Msk (0xFFFFUL << PWM_DMA_SEQ_CURRENTAMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT
                                                                            field.*/
  #define PWM_DMA_SEQ_CURRENTAMOUNT_AMOUNT_Min (0x0001UL)
  #define PWM_DMA_SEQ_CURRENTAMOUNT_AMOUNT_Max (0xFFFFUL)


/* PWM_DMA_SEQ_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* PWM_DMA_SEQ_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define PWM_DMA_SEQ_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define PWM_DMA_SEQ_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define PWM_DMA_SEQ_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << PWM_DMA_SEQ_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct PWM_DMA ====================================================== */
/**
  * @brief DMA [PWM_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_PWM_DMA_SEQ_Type SEQ[2];
} NRF_PWM_DMA_Type;

/* ======================================================= Struct PWM ======================================================== */
/**
  * @brief Pulse width modulation unit
  */
  typedef struct {
    __IM uint32_t RESERVED;
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Stops PWM pulse generation on all channels at the end
                                                                         of current PWM period, and stops sequence playback*/
    __OM uint32_t TASKS_NEXTSTEP;                    /*!< (@ 0x00000008) Steps by one value in the current sequence on all
                                                                         enabled channels if DECODER.MODE=NextStep. Does not
                                                                         cause PWM generation to start if not running.*/
    __IM uint32_t RESERVED1;
    __OM NRF_PWM_TASKS_DMA_Type TASKS_DMA;
    __IM uint32_t RESERVED2[25];
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_NEXTSTEP;
    __IM uint32_t RESERVED3;
    __IOM NRF_PWM_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA;
    __IM uint32_t RESERVED4[25];
    __IOM uint32_t EVENTS_STOPPED;                   /*!< (@ 0x00000104) Response to STOP task, emitted when PWM pulses are no
                                                                         longer generated*/
    __IOM uint32_t EVENTS_SEQSTARTED[2];
    __IOM uint32_t EVENTS_SEQEND[2];                 /*!< (@ 0x00000110) Emitted at end of every sequence n, when last value
                                                                         from RAM has been applied to wave counter*/
    __IOM uint32_t EVENTS_PWMPERIODEND;
    __IOM uint32_t EVENTS_LOOPSDONE;                 /*!< (@ 0x0000011C) Concatenated sequences have been played the amount of
                                                                         times defined in LOOP.CNT*/
    __IOM uint32_t EVENTS_RAMUNDERFLOW;              /*!< (@ 0x00000120) Emitted when retrieving from RAM does not complete in
                                                                         time for the PWM module*/
    __IOM NRF_PWM_EVENTS_DMA_Type EVENTS_DMA;
    __IOM uint32_t EVENTS_COMPAREMATCH[4];           /*!< (@ 0x0000013C) This event is generated when the compare matches for
                                                                         the compare channel [n].*/
    __IM uint32_t RESERVED5[14];
    __IOM uint32_t PUBLISH_STOPPED;
    __IOM uint32_t PUBLISH_SEQSTARTED[2];
    __IOM uint32_t PUBLISH_SEQEND[2];
    __IOM uint32_t PUBLISH_PWMPERIODEND;
    __IOM uint32_t PUBLISH_LOOPSDONE;
    __IOM uint32_t PUBLISH_RAMUNDERFLOW;
    __IOM NRF_PWM_PUBLISH_DMA_Type PUBLISH_DMA;
    __IOM uint32_t PUBLISH_COMPAREMATCH[4];
    __IM uint32_t RESERVED6[13];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED7[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED8[124];
    __IOM uint32_t ENABLE;
    __IOM uint32_t MODE;
    __IOM uint32_t COUNTERTOP;
    __IOM uint32_t PRESCALER;
    __IOM uint32_t DECODER;
    __IOM uint32_t LOOP;
    __IOM uint32_t IDLEOUT;                          /*!< (@ 0x00000518) Configure the output value on the PWM channel during
                                                                         idle*/
    __IM uint32_t RESERVED9;
    __IOM NRF_PWM_SEQ_Type SEQ[2];
    __IOM NRF_PWM_PSEL_Type PSEL;
    __IM uint32_t RESERVED10[100];
    __IOM NRF_PWM_DMA_Type DMA;
  } NRF_PWM_Type;

/* PWM_TASKS_STOP: Stops PWM pulse generation on all channels at the end of current PWM period, and stops sequence playback */
  #define PWM_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stops PWM pulse generation on all channels at the end of current PWM period, and stops sequence playback
                       */

  #define PWM_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define PWM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << PWM_TASKS_STOP_TASKS_STOP_Pos)
  #define PWM_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define PWM_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define PWM_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* PWM_TASKS_NEXTSTEP: Steps by one value in the current sequence on all enabled channels if DECODER.MODE=NextStep. Does not
                        cause PWM generation to start if not running. */

  #define PWM_TASKS_NEXTSTEP_ResetValue (0x00000000UL)

/* TASKS_NEXTSTEP @Bit 0 : Steps by one value in the current sequence on all enabled channels if DECODER.MODE=NextStep. Does not
                           cause PWM generation to start if not running. */

  #define PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Pos (0UL)
  #define PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Msk (0x1UL << PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Pos) /*!< Bit mask of TASKS_NEXTSTEP
                                                                            field.*/
  #define PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Min (0x1UL)
  #define PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Max (0x1UL)
  #define PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Trigger (0x1UL)


/* PWM_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define PWM_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define PWM_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define PWM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << PWM_SUBSCRIBE_STOP_CHIDX_Pos)
  #define PWM_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define PWM_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define PWM_SUBSCRIBE_STOP_EN_Msk (0x1UL << PWM_SUBSCRIBE_STOP_EN_Pos)
  #define PWM_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define PWM_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define PWM_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define PWM_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* PWM_SUBSCRIBE_NEXTSTEP: Subscribe configuration for task NEXTSTEP */
  #define PWM_SUBSCRIBE_NEXTSTEP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task NEXTSTEP will subscribe to */
  #define PWM_SUBSCRIBE_NEXTSTEP_CHIDX_Pos (0UL)
  #define PWM_SUBSCRIBE_NEXTSTEP_CHIDX_Msk (0xFFUL << PWM_SUBSCRIBE_NEXTSTEP_CHIDX_Pos)
  #define PWM_SUBSCRIBE_NEXTSTEP_CHIDX_Min (0x00UL)
  #define PWM_SUBSCRIBE_NEXTSTEP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_SUBSCRIBE_NEXTSTEP_EN_Pos (31UL)
  #define PWM_SUBSCRIBE_NEXTSTEP_EN_Msk (0x1UL << PWM_SUBSCRIBE_NEXTSTEP_EN_Pos)
  #define PWM_SUBSCRIBE_NEXTSTEP_EN_Min (0x0UL)
  #define PWM_SUBSCRIBE_NEXTSTEP_EN_Max (0x1UL)
  #define PWM_SUBSCRIBE_NEXTSTEP_EN_Disabled (0x0UL)
  #define PWM_SUBSCRIBE_NEXTSTEP_EN_Enabled (0x1UL)


/* PWM_EVENTS_STOPPED: Response to STOP task, emitted when PWM pulses are no longer generated */
  #define PWM_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : Response to STOP task, emitted when PWM pulses are no longer generated */
  #define PWM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define PWM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << PWM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED
                                                                            field.*/
  #define PWM_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define PWM_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define PWM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define PWM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* PWM_EVENTS_SEQSTARTED: First PWM period started on sequence n */
  #define PWM_EVENTS_SEQSTARTED_MaxCount (2UL)
  #define PWM_EVENTS_SEQSTARTED_MaxIndex (1UL)
  #define PWM_EVENTS_SEQSTARTED_MinIndex (0UL)
  #define PWM_EVENTS_SEQSTARTED_ResetValue (0x00000000UL)

/* EVENTS_SEQSTARTED @Bit 0 : First PWM period started on sequence n */
  #define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Pos (0UL)
  #define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Msk (0x1UL << PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_SEQSTARTED field.*/
  #define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Min (0x0UL)
  #define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Max (0x1UL)
  #define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_NotGenerated (0x0UL)
  #define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Generated (0x1UL)


/* PWM_EVENTS_SEQEND: Emitted at end of every sequence n, when last value from RAM has been applied to wave counter */
  #define PWM_EVENTS_SEQEND_MaxCount (2UL)
  #define PWM_EVENTS_SEQEND_MaxIndex (1UL)
  #define PWM_EVENTS_SEQEND_MinIndex (0UL)
  #define PWM_EVENTS_SEQEND_ResetValue (0x00000000UL)

/* EVENTS_SEQEND @Bit 0 : Emitted at end of every sequence n, when last value from RAM has been applied to wave counter */
  #define PWM_EVENTS_SEQEND_EVENTS_SEQEND_Pos (0UL)
  #define PWM_EVENTS_SEQEND_EVENTS_SEQEND_Msk (0x1UL << PWM_EVENTS_SEQEND_EVENTS_SEQEND_Pos) /*!< Bit mask of EVENTS_SEQEND
                                                                            field.*/
  #define PWM_EVENTS_SEQEND_EVENTS_SEQEND_Min (0x0UL)
  #define PWM_EVENTS_SEQEND_EVENTS_SEQEND_Max (0x1UL)
  #define PWM_EVENTS_SEQEND_EVENTS_SEQEND_NotGenerated (0x0UL)
  #define PWM_EVENTS_SEQEND_EVENTS_SEQEND_Generated (0x1UL)


/* PWM_EVENTS_PWMPERIODEND: Emitted at the end of each PWM period */
  #define PWM_EVENTS_PWMPERIODEND_ResetValue (0x00000000UL)

/* EVENTS_PWMPERIODEND @Bit 0 : Emitted at the end of each PWM period */
  #define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos (0UL)
  #define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Msk (0x1UL << PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos) /*!< Bit
                                                                            mask of EVENTS_PWMPERIODEND field.*/
  #define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Min (0x0UL)
  #define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Max (0x1UL)
  #define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_NotGenerated (0x0UL)
  #define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Generated (0x1UL)


/* PWM_EVENTS_LOOPSDONE: Concatenated sequences have been played the amount of times defined in LOOP.CNT */
  #define PWM_EVENTS_LOOPSDONE_ResetValue (0x00000000UL)

/* EVENTS_LOOPSDONE @Bit 0 : Concatenated sequences have been played the amount of times defined in LOOP.CNT */
  #define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Pos (0UL)
  #define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Msk (0x1UL << PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Pos) /*!< Bit mask of
                                                                            EVENTS_LOOPSDONE field.*/
  #define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Min (0x0UL)
  #define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Max (0x1UL)
  #define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_NotGenerated (0x0UL)
  #define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Generated (0x1UL)


/* PWM_EVENTS_RAMUNDERFLOW: Emitted when retrieving from RAM does not complete in time for the PWM module */
  #define PWM_EVENTS_RAMUNDERFLOW_ResetValue (0x00000000UL)

/* EVENTS_RAMUNDERFLOW @Bit 0 : Emitted when retrieving from RAM does not complete in time for the PWM module */
  #define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Pos (0UL)
  #define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Msk (0x1UL << PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Pos) /*!< Bit
                                                                            mask of EVENTS_RAMUNDERFLOW field.*/
  #define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Min (0x0UL)
  #define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Max (0x1UL)
  #define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_NotGenerated (0x0UL)
  #define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Generated (0x1UL)


/* PWM_EVENTS_COMPAREMATCH: This event is generated when the compare matches for the compare channel [n]. */
  #define PWM_EVENTS_COMPAREMATCH_MaxCount (4UL)
  #define PWM_EVENTS_COMPAREMATCH_MaxIndex (3UL)
  #define PWM_EVENTS_COMPAREMATCH_MinIndex (0UL)
  #define PWM_EVENTS_COMPAREMATCH_ResetValue (0x00000000UL)

/* EVENTS_COMPAREMATCH @Bit 0 : This event is generated when the compare matches for the compare channel [n]. */
  #define PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_Pos (0UL)
  #define PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_Msk (0x1UL << PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_Pos) /*!< Bit
                                                                            mask of EVENTS_COMPAREMATCH field.*/
  #define PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_Min (0x0UL)
  #define PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_Max (0x1UL)
  #define PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_NotGenerated (0x0UL)
  #define PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_Generated (0x1UL)


/* PWM_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define PWM_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define PWM_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define PWM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << PWM_PUBLISH_STOPPED_CHIDX_Pos)
  #define PWM_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define PWM_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_STOPPED_EN_Pos (31UL)
  #define PWM_PUBLISH_STOPPED_EN_Msk (0x1UL << PWM_PUBLISH_STOPPED_EN_Pos)
  #define PWM_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define PWM_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define PWM_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define PWM_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* PWM_PUBLISH_SEQSTARTED: Publish configuration for event SEQSTARTED[n] */
  #define PWM_PUBLISH_SEQSTARTED_MaxCount (2UL)
  #define PWM_PUBLISH_SEQSTARTED_MaxIndex (1UL)
  #define PWM_PUBLISH_SEQSTARTED_MinIndex (0UL)
  #define PWM_PUBLISH_SEQSTARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SEQSTARTED[n] will publish to */
  #define PWM_PUBLISH_SEQSTARTED_CHIDX_Pos (0UL)
  #define PWM_PUBLISH_SEQSTARTED_CHIDX_Msk (0xFFUL << PWM_PUBLISH_SEQSTARTED_CHIDX_Pos)
  #define PWM_PUBLISH_SEQSTARTED_CHIDX_Min (0x00UL)
  #define PWM_PUBLISH_SEQSTARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_SEQSTARTED_EN_Pos (31UL)
  #define PWM_PUBLISH_SEQSTARTED_EN_Msk (0x1UL << PWM_PUBLISH_SEQSTARTED_EN_Pos)
  #define PWM_PUBLISH_SEQSTARTED_EN_Min (0x0UL)
  #define PWM_PUBLISH_SEQSTARTED_EN_Max (0x1UL)
  #define PWM_PUBLISH_SEQSTARTED_EN_Disabled (0x0UL)
  #define PWM_PUBLISH_SEQSTARTED_EN_Enabled (0x1UL)


/* PWM_PUBLISH_SEQEND: Publish configuration for event SEQEND[n] */
  #define PWM_PUBLISH_SEQEND_MaxCount (2UL)
  #define PWM_PUBLISH_SEQEND_MaxIndex (1UL)
  #define PWM_PUBLISH_SEQEND_MinIndex (0UL)
  #define PWM_PUBLISH_SEQEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SEQEND[n] will publish to */
  #define PWM_PUBLISH_SEQEND_CHIDX_Pos (0UL)
  #define PWM_PUBLISH_SEQEND_CHIDX_Msk (0xFFUL << PWM_PUBLISH_SEQEND_CHIDX_Pos)
  #define PWM_PUBLISH_SEQEND_CHIDX_Min (0x00UL)
  #define PWM_PUBLISH_SEQEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_SEQEND_EN_Pos (31UL)
  #define PWM_PUBLISH_SEQEND_EN_Msk (0x1UL << PWM_PUBLISH_SEQEND_EN_Pos)
  #define PWM_PUBLISH_SEQEND_EN_Min (0x0UL)
  #define PWM_PUBLISH_SEQEND_EN_Max (0x1UL)
  #define PWM_PUBLISH_SEQEND_EN_Disabled (0x0UL)
  #define PWM_PUBLISH_SEQEND_EN_Enabled (0x1UL)


/* PWM_PUBLISH_PWMPERIODEND: Publish configuration for event PWMPERIODEND */
  #define PWM_PUBLISH_PWMPERIODEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event PWMPERIODEND will publish to */
  #define PWM_PUBLISH_PWMPERIODEND_CHIDX_Pos (0UL)
  #define PWM_PUBLISH_PWMPERIODEND_CHIDX_Msk (0xFFUL << PWM_PUBLISH_PWMPERIODEND_CHIDX_Pos)
  #define PWM_PUBLISH_PWMPERIODEND_CHIDX_Min (0x00UL)
  #define PWM_PUBLISH_PWMPERIODEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_PWMPERIODEND_EN_Pos (31UL)
  #define PWM_PUBLISH_PWMPERIODEND_EN_Msk (0x1UL << PWM_PUBLISH_PWMPERIODEND_EN_Pos)
  #define PWM_PUBLISH_PWMPERIODEND_EN_Min (0x0UL)
  #define PWM_PUBLISH_PWMPERIODEND_EN_Max (0x1UL)
  #define PWM_PUBLISH_PWMPERIODEND_EN_Disabled (0x0UL)
  #define PWM_PUBLISH_PWMPERIODEND_EN_Enabled (0x1UL)


/* PWM_PUBLISH_LOOPSDONE: Publish configuration for event LOOPSDONE */
  #define PWM_PUBLISH_LOOPSDONE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event LOOPSDONE will publish to */
  #define PWM_PUBLISH_LOOPSDONE_CHIDX_Pos (0UL)
  #define PWM_PUBLISH_LOOPSDONE_CHIDX_Msk (0xFFUL << PWM_PUBLISH_LOOPSDONE_CHIDX_Pos)
  #define PWM_PUBLISH_LOOPSDONE_CHIDX_Min (0x00UL)
  #define PWM_PUBLISH_LOOPSDONE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_LOOPSDONE_EN_Pos (31UL)
  #define PWM_PUBLISH_LOOPSDONE_EN_Msk (0x1UL << PWM_PUBLISH_LOOPSDONE_EN_Pos)
  #define PWM_PUBLISH_LOOPSDONE_EN_Min (0x0UL)
  #define PWM_PUBLISH_LOOPSDONE_EN_Max (0x1UL)
  #define PWM_PUBLISH_LOOPSDONE_EN_Disabled (0x0UL)
  #define PWM_PUBLISH_LOOPSDONE_EN_Enabled (0x1UL)


/* PWM_PUBLISH_RAMUNDERFLOW: Publish configuration for event RAMUNDERFLOW */
  #define PWM_PUBLISH_RAMUNDERFLOW_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RAMUNDERFLOW will publish to */
  #define PWM_PUBLISH_RAMUNDERFLOW_CHIDX_Pos (0UL)
  #define PWM_PUBLISH_RAMUNDERFLOW_CHIDX_Msk (0xFFUL << PWM_PUBLISH_RAMUNDERFLOW_CHIDX_Pos)
  #define PWM_PUBLISH_RAMUNDERFLOW_CHIDX_Min (0x00UL)
  #define PWM_PUBLISH_RAMUNDERFLOW_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_RAMUNDERFLOW_EN_Pos (31UL)
  #define PWM_PUBLISH_RAMUNDERFLOW_EN_Msk (0x1UL << PWM_PUBLISH_RAMUNDERFLOW_EN_Pos)
  #define PWM_PUBLISH_RAMUNDERFLOW_EN_Min (0x0UL)
  #define PWM_PUBLISH_RAMUNDERFLOW_EN_Max (0x1UL)
  #define PWM_PUBLISH_RAMUNDERFLOW_EN_Disabled (0x0UL)
  #define PWM_PUBLISH_RAMUNDERFLOW_EN_Enabled (0x1UL)


/* PWM_PUBLISH_COMPAREMATCH: Publish configuration for event COMPAREMATCH[n] */
  #define PWM_PUBLISH_COMPAREMATCH_MaxCount (4UL)
  #define PWM_PUBLISH_COMPAREMATCH_MaxIndex (3UL)
  #define PWM_PUBLISH_COMPAREMATCH_MinIndex (0UL)
  #define PWM_PUBLISH_COMPAREMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event COMPAREMATCH[n] will publish to */
  #define PWM_PUBLISH_COMPAREMATCH_CHIDX_Pos (0UL)
  #define PWM_PUBLISH_COMPAREMATCH_CHIDX_Msk (0xFFUL << PWM_PUBLISH_COMPAREMATCH_CHIDX_Pos)
  #define PWM_PUBLISH_COMPAREMATCH_CHIDX_Min (0x00UL)
  #define PWM_PUBLISH_COMPAREMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_COMPAREMATCH_EN_Pos (31UL)
  #define PWM_PUBLISH_COMPAREMATCH_EN_Msk (0x1UL << PWM_PUBLISH_COMPAREMATCH_EN_Pos)
  #define PWM_PUBLISH_COMPAREMATCH_EN_Min (0x0UL)
  #define PWM_PUBLISH_COMPAREMATCH_EN_Max (0x1UL)
  #define PWM_PUBLISH_COMPAREMATCH_EN_Disabled (0x0UL)
  #define PWM_PUBLISH_COMPAREMATCH_EN_Enabled (0x1UL)


/* PWM_SHORTS: Shortcuts between local events and tasks */
  #define PWM_SHORTS_ResetValue (0x00000000UL)

/* SEQEND0_STOP @Bit 0 : Shortcut between event SEQEND[n] and task STOP */
  #define PWM_SHORTS_SEQEND0_STOP_Pos (0UL)
  #define PWM_SHORTS_SEQEND0_STOP_Msk (0x1UL << PWM_SHORTS_SEQEND0_STOP_Pos)
  #define PWM_SHORTS_SEQEND0_STOP_Min (0x0UL)
  #define PWM_SHORTS_SEQEND0_STOP_Max (0x1UL)
  #define PWM_SHORTS_SEQEND0_STOP_Disabled (0x0UL)
  #define PWM_SHORTS_SEQEND0_STOP_Enabled (0x1UL)

/* SEQEND1_STOP @Bit 1 : Shortcut between event SEQEND[n] and task STOP */
  #define PWM_SHORTS_SEQEND1_STOP_Pos (1UL)
  #define PWM_SHORTS_SEQEND1_STOP_Msk (0x1UL << PWM_SHORTS_SEQEND1_STOP_Pos)
  #define PWM_SHORTS_SEQEND1_STOP_Min (0x0UL)
  #define PWM_SHORTS_SEQEND1_STOP_Max (0x1UL)
  #define PWM_SHORTS_SEQEND1_STOP_Disabled (0x0UL)
  #define PWM_SHORTS_SEQEND1_STOP_Enabled (0x1UL)

/* LOOPSDONE_DMA_SEQ0_START @Bit 2 : Shortcut between event LOOPSDONE and task DMA.SEQ[n].START */
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Pos (2UL)
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Msk (0x1UL << PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Pos) /*!< Bit mask of
                                                                            LOOPSDONE_DMA_SEQ0_START field.*/
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Min (0x0UL)
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Max (0x1UL)
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Disabled (0x0UL)
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Enabled (0x1UL)

/* LOOPSDONE_DMA_SEQ1_START @Bit 3 : Shortcut between event LOOPSDONE and task DMA.SEQ[n].START */
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Pos (3UL)
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Msk (0x1UL << PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Pos) /*!< Bit mask of
                                                                            LOOPSDONE_DMA_SEQ1_START field.*/
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Min (0x0UL)
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Max (0x1UL)
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Disabled (0x0UL)
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Enabled (0x1UL)

/* LOOPSDONE_STOP @Bit 4 : Shortcut between event LOOPSDONE and task STOP */
  #define PWM_SHORTS_LOOPSDONE_STOP_Pos (4UL)
  #define PWM_SHORTS_LOOPSDONE_STOP_Msk (0x1UL << PWM_SHORTS_LOOPSDONE_STOP_Pos)
  #define PWM_SHORTS_LOOPSDONE_STOP_Min (0x0UL)
  #define PWM_SHORTS_LOOPSDONE_STOP_Max (0x1UL)
  #define PWM_SHORTS_LOOPSDONE_STOP_Disabled (0x0UL)
  #define PWM_SHORTS_LOOPSDONE_STOP_Enabled (0x1UL)

/* RAMUNDERFLOW_STOP @Bit 5 : Shortcut between event RAMUNDERFLOW and task STOP */
  #define PWM_SHORTS_RAMUNDERFLOW_STOP_Pos (5UL)
  #define PWM_SHORTS_RAMUNDERFLOW_STOP_Msk (0x1UL << PWM_SHORTS_RAMUNDERFLOW_STOP_Pos) /*!< Bit mask of RAMUNDERFLOW_STOP
                                                                            field.*/
  #define PWM_SHORTS_RAMUNDERFLOW_STOP_Min (0x0UL)
  #define PWM_SHORTS_RAMUNDERFLOW_STOP_Max (0x1UL)
  #define PWM_SHORTS_RAMUNDERFLOW_STOP_Disabled (0x0UL)
  #define PWM_SHORTS_RAMUNDERFLOW_STOP_Enabled (0x1UL)

/* DMA_SEQ0_BUSERROR_STOP @Bit 6 : Shortcut between event DMA.SEQ[n].BUSERROR and task STOP */
  #define PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Pos (6UL)
  #define PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Msk (0x1UL << PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Pos) /*!< Bit mask of
                                                                            DMA_SEQ0_BUSERROR_STOP field.*/
  #define PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Min (0x0UL)
  #define PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Max (0x1UL)
  #define PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Disabled (0x0UL)
  #define PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Enabled (0x1UL)

/* DMA_SEQ1_BUSERROR_STOP @Bit 7 : Shortcut between event DMA.SEQ[n].BUSERROR and task STOP */
  #define PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Pos (7UL)
  #define PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Msk (0x1UL << PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Pos) /*!< Bit mask of
                                                                            DMA_SEQ1_BUSERROR_STOP field.*/
  #define PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Min (0x0UL)
  #define PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Max (0x1UL)
  #define PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Disabled (0x0UL)
  #define PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Enabled (0x1UL)


/* PWM_INTEN: Enable or disable interrupt */
  #define PWM_INTEN_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Enable or disable interrupt for event STOPPED */
  #define PWM_INTEN_STOPPED_Pos (1UL)
  #define PWM_INTEN_STOPPED_Msk (0x1UL << PWM_INTEN_STOPPED_Pos)
  #define PWM_INTEN_STOPPED_Min (0x0UL)
  #define PWM_INTEN_STOPPED_Max (0x1UL)
  #define PWM_INTEN_STOPPED_Disabled (0x0UL)
  #define PWM_INTEN_STOPPED_Enabled (0x1UL)

/* SEQSTARTED0 @Bit 2 : Enable or disable interrupt for event SEQSTARTED[0] */
  #define PWM_INTEN_SEQSTARTED0_Pos (2UL)
  #define PWM_INTEN_SEQSTARTED0_Msk (0x1UL << PWM_INTEN_SEQSTARTED0_Pos)
  #define PWM_INTEN_SEQSTARTED0_Min (0x0UL)
  #define PWM_INTEN_SEQSTARTED0_Max (0x1UL)
  #define PWM_INTEN_SEQSTARTED0_Disabled (0x0UL)
  #define PWM_INTEN_SEQSTARTED0_Enabled (0x1UL)

/* SEQSTARTED1 @Bit 3 : Enable or disable interrupt for event SEQSTARTED[1] */
  #define PWM_INTEN_SEQSTARTED1_Pos (3UL)
  #define PWM_INTEN_SEQSTARTED1_Msk (0x1UL << PWM_INTEN_SEQSTARTED1_Pos)
  #define PWM_INTEN_SEQSTARTED1_Min (0x0UL)
  #define PWM_INTEN_SEQSTARTED1_Max (0x1UL)
  #define PWM_INTEN_SEQSTARTED1_Disabled (0x0UL)
  #define PWM_INTEN_SEQSTARTED1_Enabled (0x1UL)

/* SEQEND0 @Bit 4 : Enable or disable interrupt for event SEQEND[0] */
  #define PWM_INTEN_SEQEND0_Pos (4UL)
  #define PWM_INTEN_SEQEND0_Msk (0x1UL << PWM_INTEN_SEQEND0_Pos)
  #define PWM_INTEN_SEQEND0_Min (0x0UL)
  #define PWM_INTEN_SEQEND0_Max (0x1UL)
  #define PWM_INTEN_SEQEND0_Disabled (0x0UL)
  #define PWM_INTEN_SEQEND0_Enabled (0x1UL)

/* SEQEND1 @Bit 5 : Enable or disable interrupt for event SEQEND[1] */
  #define PWM_INTEN_SEQEND1_Pos (5UL)
  #define PWM_INTEN_SEQEND1_Msk (0x1UL << PWM_INTEN_SEQEND1_Pos)
  #define PWM_INTEN_SEQEND1_Min (0x0UL)
  #define PWM_INTEN_SEQEND1_Max (0x1UL)
  #define PWM_INTEN_SEQEND1_Disabled (0x0UL)
  #define PWM_INTEN_SEQEND1_Enabled (0x1UL)

/* PWMPERIODEND @Bit 6 : Enable or disable interrupt for event PWMPERIODEND */
  #define PWM_INTEN_PWMPERIODEND_Pos (6UL)
  #define PWM_INTEN_PWMPERIODEND_Msk (0x1UL << PWM_INTEN_PWMPERIODEND_Pos)
  #define PWM_INTEN_PWMPERIODEND_Min (0x0UL)
  #define PWM_INTEN_PWMPERIODEND_Max (0x1UL)
  #define PWM_INTEN_PWMPERIODEND_Disabled (0x0UL)
  #define PWM_INTEN_PWMPERIODEND_Enabled (0x1UL)

/* LOOPSDONE @Bit 7 : Enable or disable interrupt for event LOOPSDONE */
  #define PWM_INTEN_LOOPSDONE_Pos (7UL)
  #define PWM_INTEN_LOOPSDONE_Msk (0x1UL << PWM_INTEN_LOOPSDONE_Pos)
  #define PWM_INTEN_LOOPSDONE_Min (0x0UL)
  #define PWM_INTEN_LOOPSDONE_Max (0x1UL)
  #define PWM_INTEN_LOOPSDONE_Disabled (0x0UL)
  #define PWM_INTEN_LOOPSDONE_Enabled (0x1UL)

/* RAMUNDERFLOW @Bit 8 : Enable or disable interrupt for event RAMUNDERFLOW */
  #define PWM_INTEN_RAMUNDERFLOW_Pos (8UL)
  #define PWM_INTEN_RAMUNDERFLOW_Msk (0x1UL << PWM_INTEN_RAMUNDERFLOW_Pos)
  #define PWM_INTEN_RAMUNDERFLOW_Min (0x0UL)
  #define PWM_INTEN_RAMUNDERFLOW_Max (0x1UL)
  #define PWM_INTEN_RAMUNDERFLOW_Disabled (0x0UL)
  #define PWM_INTEN_RAMUNDERFLOW_Enabled (0x1UL)

/* DMASEQ0END @Bit 9 : Enable or disable interrupt for event DMASEQ0END */
  #define PWM_INTEN_DMASEQ0END_Pos (9UL)
  #define PWM_INTEN_DMASEQ0END_Msk (0x1UL << PWM_INTEN_DMASEQ0END_Pos)
  #define PWM_INTEN_DMASEQ0END_Min (0x0UL)
  #define PWM_INTEN_DMASEQ0END_Max (0x1UL)
  #define PWM_INTEN_DMASEQ0END_Disabled (0x0UL)
  #define PWM_INTEN_DMASEQ0END_Enabled (0x1UL)

/* DMASEQ0READY @Bit 10 : Enable or disable interrupt for event DMASEQ0READY */
  #define PWM_INTEN_DMASEQ0READY_Pos (10UL)
  #define PWM_INTEN_DMASEQ0READY_Msk (0x1UL << PWM_INTEN_DMASEQ0READY_Pos)
  #define PWM_INTEN_DMASEQ0READY_Min (0x0UL)
  #define PWM_INTEN_DMASEQ0READY_Max (0x1UL)
  #define PWM_INTEN_DMASEQ0READY_Disabled (0x0UL)
  #define PWM_INTEN_DMASEQ0READY_Enabled (0x1UL)

/* DMASEQ0BUSERROR @Bit 11 : Enable or disable interrupt for event DMASEQ0BUSERROR */
  #define PWM_INTEN_DMASEQ0BUSERROR_Pos (11UL)
  #define PWM_INTEN_DMASEQ0BUSERROR_Msk (0x1UL << PWM_INTEN_DMASEQ0BUSERROR_Pos)
  #define PWM_INTEN_DMASEQ0BUSERROR_Min (0x0UL)
  #define PWM_INTEN_DMASEQ0BUSERROR_Max (0x1UL)
  #define PWM_INTEN_DMASEQ0BUSERROR_Disabled (0x0UL)
  #define PWM_INTEN_DMASEQ0BUSERROR_Enabled (0x1UL)

/* DMASEQ1END @Bit 12 : Enable or disable interrupt for event DMASEQ1END */
  #define PWM_INTEN_DMASEQ1END_Pos (12UL)
  #define PWM_INTEN_DMASEQ1END_Msk (0x1UL << PWM_INTEN_DMASEQ1END_Pos)
  #define PWM_INTEN_DMASEQ1END_Min (0x0UL)
  #define PWM_INTEN_DMASEQ1END_Max (0x1UL)
  #define PWM_INTEN_DMASEQ1END_Disabled (0x0UL)
  #define PWM_INTEN_DMASEQ1END_Enabled (0x1UL)

/* DMASEQ1READY @Bit 13 : Enable or disable interrupt for event DMASEQ1READY */
  #define PWM_INTEN_DMASEQ1READY_Pos (13UL)
  #define PWM_INTEN_DMASEQ1READY_Msk (0x1UL << PWM_INTEN_DMASEQ1READY_Pos)
  #define PWM_INTEN_DMASEQ1READY_Min (0x0UL)
  #define PWM_INTEN_DMASEQ1READY_Max (0x1UL)
  #define PWM_INTEN_DMASEQ1READY_Disabled (0x0UL)
  #define PWM_INTEN_DMASEQ1READY_Enabled (0x1UL)

/* DMASEQ1BUSERROR @Bit 14 : Enable or disable interrupt for event DMASEQ1BUSERROR */
  #define PWM_INTEN_DMASEQ1BUSERROR_Pos (14UL)
  #define PWM_INTEN_DMASEQ1BUSERROR_Msk (0x1UL << PWM_INTEN_DMASEQ1BUSERROR_Pos)
  #define PWM_INTEN_DMASEQ1BUSERROR_Min (0x0UL)
  #define PWM_INTEN_DMASEQ1BUSERROR_Max (0x1UL)
  #define PWM_INTEN_DMASEQ1BUSERROR_Disabled (0x0UL)
  #define PWM_INTEN_DMASEQ1BUSERROR_Enabled (0x1UL)

/* COMPAREMATCH0 @Bit 15 : Enable or disable interrupt for event COMPAREMATCH[0] */
  #define PWM_INTEN_COMPAREMATCH0_Pos (15UL)
  #define PWM_INTEN_COMPAREMATCH0_Msk (0x1UL << PWM_INTEN_COMPAREMATCH0_Pos)
  #define PWM_INTEN_COMPAREMATCH0_Min (0x0UL)
  #define PWM_INTEN_COMPAREMATCH0_Max (0x1UL)
  #define PWM_INTEN_COMPAREMATCH0_Disabled (0x0UL)
  #define PWM_INTEN_COMPAREMATCH0_Enabled (0x1UL)

/* COMPAREMATCH1 @Bit 16 : Enable or disable interrupt for event COMPAREMATCH[1] */
  #define PWM_INTEN_COMPAREMATCH1_Pos (16UL)
  #define PWM_INTEN_COMPAREMATCH1_Msk (0x1UL << PWM_INTEN_COMPAREMATCH1_Pos)
  #define PWM_INTEN_COMPAREMATCH1_Min (0x0UL)
  #define PWM_INTEN_COMPAREMATCH1_Max (0x1UL)
  #define PWM_INTEN_COMPAREMATCH1_Disabled (0x0UL)
  #define PWM_INTEN_COMPAREMATCH1_Enabled (0x1UL)

/* COMPAREMATCH2 @Bit 17 : Enable or disable interrupt for event COMPAREMATCH[2] */
  #define PWM_INTEN_COMPAREMATCH2_Pos (17UL)
  #define PWM_INTEN_COMPAREMATCH2_Msk (0x1UL << PWM_INTEN_COMPAREMATCH2_Pos)
  #define PWM_INTEN_COMPAREMATCH2_Min (0x0UL)
  #define PWM_INTEN_COMPAREMATCH2_Max (0x1UL)
  #define PWM_INTEN_COMPAREMATCH2_Disabled (0x0UL)
  #define PWM_INTEN_COMPAREMATCH2_Enabled (0x1UL)

/* COMPAREMATCH3 @Bit 18 : Enable or disable interrupt for event COMPAREMATCH[3] */
  #define PWM_INTEN_COMPAREMATCH3_Pos (18UL)
  #define PWM_INTEN_COMPAREMATCH3_Msk (0x1UL << PWM_INTEN_COMPAREMATCH3_Pos)
  #define PWM_INTEN_COMPAREMATCH3_Min (0x0UL)
  #define PWM_INTEN_COMPAREMATCH3_Max (0x1UL)
  #define PWM_INTEN_COMPAREMATCH3_Disabled (0x0UL)
  #define PWM_INTEN_COMPAREMATCH3_Enabled (0x1UL)


/* PWM_INTENSET: Enable interrupt */
  #define PWM_INTENSET_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define PWM_INTENSET_STOPPED_Pos (1UL)
  #define PWM_INTENSET_STOPPED_Msk (0x1UL << PWM_INTENSET_STOPPED_Pos)
  #define PWM_INTENSET_STOPPED_Min (0x0UL)
  #define PWM_INTENSET_STOPPED_Max (0x1UL)
  #define PWM_INTENSET_STOPPED_Set (0x1UL)
  #define PWM_INTENSET_STOPPED_Disabled (0x0UL)
  #define PWM_INTENSET_STOPPED_Enabled (0x1UL)

/* SEQSTARTED0 @Bit 2 : Write '1' to enable interrupt for event SEQSTARTED[0] */
  #define PWM_INTENSET_SEQSTARTED0_Pos (2UL)
  #define PWM_INTENSET_SEQSTARTED0_Msk (0x1UL << PWM_INTENSET_SEQSTARTED0_Pos)
  #define PWM_INTENSET_SEQSTARTED0_Min (0x0UL)
  #define PWM_INTENSET_SEQSTARTED0_Max (0x1UL)
  #define PWM_INTENSET_SEQSTARTED0_Set (0x1UL)
  #define PWM_INTENSET_SEQSTARTED0_Disabled (0x0UL)
  #define PWM_INTENSET_SEQSTARTED0_Enabled (0x1UL)

/* SEQSTARTED1 @Bit 3 : Write '1' to enable interrupt for event SEQSTARTED[1] */
  #define PWM_INTENSET_SEQSTARTED1_Pos (3UL)
  #define PWM_INTENSET_SEQSTARTED1_Msk (0x1UL << PWM_INTENSET_SEQSTARTED1_Pos)
  #define PWM_INTENSET_SEQSTARTED1_Min (0x0UL)
  #define PWM_INTENSET_SEQSTARTED1_Max (0x1UL)
  #define PWM_INTENSET_SEQSTARTED1_Set (0x1UL)
  #define PWM_INTENSET_SEQSTARTED1_Disabled (0x0UL)
  #define PWM_INTENSET_SEQSTARTED1_Enabled (0x1UL)

/* SEQEND0 @Bit 4 : Write '1' to enable interrupt for event SEQEND[0] */
  #define PWM_INTENSET_SEQEND0_Pos (4UL)
  #define PWM_INTENSET_SEQEND0_Msk (0x1UL << PWM_INTENSET_SEQEND0_Pos)
  #define PWM_INTENSET_SEQEND0_Min (0x0UL)
  #define PWM_INTENSET_SEQEND0_Max (0x1UL)
  #define PWM_INTENSET_SEQEND0_Set (0x1UL)
  #define PWM_INTENSET_SEQEND0_Disabled (0x0UL)
  #define PWM_INTENSET_SEQEND0_Enabled (0x1UL)

/* SEQEND1 @Bit 5 : Write '1' to enable interrupt for event SEQEND[1] */
  #define PWM_INTENSET_SEQEND1_Pos (5UL)
  #define PWM_INTENSET_SEQEND1_Msk (0x1UL << PWM_INTENSET_SEQEND1_Pos)
  #define PWM_INTENSET_SEQEND1_Min (0x0UL)
  #define PWM_INTENSET_SEQEND1_Max (0x1UL)
  #define PWM_INTENSET_SEQEND1_Set (0x1UL)
  #define PWM_INTENSET_SEQEND1_Disabled (0x0UL)
  #define PWM_INTENSET_SEQEND1_Enabled (0x1UL)

/* PWMPERIODEND @Bit 6 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define PWM_INTENSET_PWMPERIODEND_Pos (6UL)
  #define PWM_INTENSET_PWMPERIODEND_Msk (0x1UL << PWM_INTENSET_PWMPERIODEND_Pos)
  #define PWM_INTENSET_PWMPERIODEND_Min (0x0UL)
  #define PWM_INTENSET_PWMPERIODEND_Max (0x1UL)
  #define PWM_INTENSET_PWMPERIODEND_Set (0x1UL)
  #define PWM_INTENSET_PWMPERIODEND_Disabled (0x0UL)
  #define PWM_INTENSET_PWMPERIODEND_Enabled (0x1UL)

/* LOOPSDONE @Bit 7 : Write '1' to enable interrupt for event LOOPSDONE */
  #define PWM_INTENSET_LOOPSDONE_Pos (7UL)
  #define PWM_INTENSET_LOOPSDONE_Msk (0x1UL << PWM_INTENSET_LOOPSDONE_Pos)
  #define PWM_INTENSET_LOOPSDONE_Min (0x0UL)
  #define PWM_INTENSET_LOOPSDONE_Max (0x1UL)
  #define PWM_INTENSET_LOOPSDONE_Set (0x1UL)
  #define PWM_INTENSET_LOOPSDONE_Disabled (0x0UL)
  #define PWM_INTENSET_LOOPSDONE_Enabled (0x1UL)

/* RAMUNDERFLOW @Bit 8 : Write '1' to enable interrupt for event RAMUNDERFLOW */
  #define PWM_INTENSET_RAMUNDERFLOW_Pos (8UL)
  #define PWM_INTENSET_RAMUNDERFLOW_Msk (0x1UL << PWM_INTENSET_RAMUNDERFLOW_Pos)
  #define PWM_INTENSET_RAMUNDERFLOW_Min (0x0UL)
  #define PWM_INTENSET_RAMUNDERFLOW_Max (0x1UL)
  #define PWM_INTENSET_RAMUNDERFLOW_Set (0x1UL)
  #define PWM_INTENSET_RAMUNDERFLOW_Disabled (0x0UL)
  #define PWM_INTENSET_RAMUNDERFLOW_Enabled (0x1UL)

/* DMASEQ0END @Bit 9 : Write '1' to enable interrupt for event DMASEQ0END */
  #define PWM_INTENSET_DMASEQ0END_Pos (9UL)
  #define PWM_INTENSET_DMASEQ0END_Msk (0x1UL << PWM_INTENSET_DMASEQ0END_Pos)
  #define PWM_INTENSET_DMASEQ0END_Min (0x0UL)
  #define PWM_INTENSET_DMASEQ0END_Max (0x1UL)
  #define PWM_INTENSET_DMASEQ0END_Set (0x1UL)
  #define PWM_INTENSET_DMASEQ0END_Disabled (0x0UL)
  #define PWM_INTENSET_DMASEQ0END_Enabled (0x1UL)

/* DMASEQ0READY @Bit 10 : Write '1' to enable interrupt for event DMASEQ0READY */
  #define PWM_INTENSET_DMASEQ0READY_Pos (10UL)
  #define PWM_INTENSET_DMASEQ0READY_Msk (0x1UL << PWM_INTENSET_DMASEQ0READY_Pos)
  #define PWM_INTENSET_DMASEQ0READY_Min (0x0UL)
  #define PWM_INTENSET_DMASEQ0READY_Max (0x1UL)
  #define PWM_INTENSET_DMASEQ0READY_Set (0x1UL)
  #define PWM_INTENSET_DMASEQ0READY_Disabled (0x0UL)
  #define PWM_INTENSET_DMASEQ0READY_Enabled (0x1UL)

/* DMASEQ0BUSERROR @Bit 11 : Write '1' to enable interrupt for event DMASEQ0BUSERROR */
  #define PWM_INTENSET_DMASEQ0BUSERROR_Pos (11UL)
  #define PWM_INTENSET_DMASEQ0BUSERROR_Msk (0x1UL << PWM_INTENSET_DMASEQ0BUSERROR_Pos)
  #define PWM_INTENSET_DMASEQ0BUSERROR_Min (0x0UL)
  #define PWM_INTENSET_DMASEQ0BUSERROR_Max (0x1UL)
  #define PWM_INTENSET_DMASEQ0BUSERROR_Set (0x1UL)
  #define PWM_INTENSET_DMASEQ0BUSERROR_Disabled (0x0UL)
  #define PWM_INTENSET_DMASEQ0BUSERROR_Enabled (0x1UL)

/* DMASEQ1END @Bit 12 : Write '1' to enable interrupt for event DMASEQ1END */
  #define PWM_INTENSET_DMASEQ1END_Pos (12UL)
  #define PWM_INTENSET_DMASEQ1END_Msk (0x1UL << PWM_INTENSET_DMASEQ1END_Pos)
  #define PWM_INTENSET_DMASEQ1END_Min (0x0UL)
  #define PWM_INTENSET_DMASEQ1END_Max (0x1UL)
  #define PWM_INTENSET_DMASEQ1END_Set (0x1UL)
  #define PWM_INTENSET_DMASEQ1END_Disabled (0x0UL)
  #define PWM_INTENSET_DMASEQ1END_Enabled (0x1UL)

/* DMASEQ1READY @Bit 13 : Write '1' to enable interrupt for event DMASEQ1READY */
  #define PWM_INTENSET_DMASEQ1READY_Pos (13UL)
  #define PWM_INTENSET_DMASEQ1READY_Msk (0x1UL << PWM_INTENSET_DMASEQ1READY_Pos)
  #define PWM_INTENSET_DMASEQ1READY_Min (0x0UL)
  #define PWM_INTENSET_DMASEQ1READY_Max (0x1UL)
  #define PWM_INTENSET_DMASEQ1READY_Set (0x1UL)
  #define PWM_INTENSET_DMASEQ1READY_Disabled (0x0UL)
  #define PWM_INTENSET_DMASEQ1READY_Enabled (0x1UL)

/* DMASEQ1BUSERROR @Bit 14 : Write '1' to enable interrupt for event DMASEQ1BUSERROR */
  #define PWM_INTENSET_DMASEQ1BUSERROR_Pos (14UL)
  #define PWM_INTENSET_DMASEQ1BUSERROR_Msk (0x1UL << PWM_INTENSET_DMASEQ1BUSERROR_Pos)
  #define PWM_INTENSET_DMASEQ1BUSERROR_Min (0x0UL)
  #define PWM_INTENSET_DMASEQ1BUSERROR_Max (0x1UL)
  #define PWM_INTENSET_DMASEQ1BUSERROR_Set (0x1UL)
  #define PWM_INTENSET_DMASEQ1BUSERROR_Disabled (0x0UL)
  #define PWM_INTENSET_DMASEQ1BUSERROR_Enabled (0x1UL)

/* COMPAREMATCH0 @Bit 15 : Write '1' to enable interrupt for event COMPAREMATCH[0] */
  #define PWM_INTENSET_COMPAREMATCH0_Pos (15UL)
  #define PWM_INTENSET_COMPAREMATCH0_Msk (0x1UL << PWM_INTENSET_COMPAREMATCH0_Pos)
  #define PWM_INTENSET_COMPAREMATCH0_Min (0x0UL)
  #define PWM_INTENSET_COMPAREMATCH0_Max (0x1UL)
  #define PWM_INTENSET_COMPAREMATCH0_Set (0x1UL)
  #define PWM_INTENSET_COMPAREMATCH0_Disabled (0x0UL)
  #define PWM_INTENSET_COMPAREMATCH0_Enabled (0x1UL)

/* COMPAREMATCH1 @Bit 16 : Write '1' to enable interrupt for event COMPAREMATCH[1] */
  #define PWM_INTENSET_COMPAREMATCH1_Pos (16UL)
  #define PWM_INTENSET_COMPAREMATCH1_Msk (0x1UL << PWM_INTENSET_COMPAREMATCH1_Pos)
  #define PWM_INTENSET_COMPAREMATCH1_Min (0x0UL)
  #define PWM_INTENSET_COMPAREMATCH1_Max (0x1UL)
  #define PWM_INTENSET_COMPAREMATCH1_Set (0x1UL)
  #define PWM_INTENSET_COMPAREMATCH1_Disabled (0x0UL)
  #define PWM_INTENSET_COMPAREMATCH1_Enabled (0x1UL)

/* COMPAREMATCH2 @Bit 17 : Write '1' to enable interrupt for event COMPAREMATCH[2] */
  #define PWM_INTENSET_COMPAREMATCH2_Pos (17UL)
  #define PWM_INTENSET_COMPAREMATCH2_Msk (0x1UL << PWM_INTENSET_COMPAREMATCH2_Pos)
  #define PWM_INTENSET_COMPAREMATCH2_Min (0x0UL)
  #define PWM_INTENSET_COMPAREMATCH2_Max (0x1UL)
  #define PWM_INTENSET_COMPAREMATCH2_Set (0x1UL)
  #define PWM_INTENSET_COMPAREMATCH2_Disabled (0x0UL)
  #define PWM_INTENSET_COMPAREMATCH2_Enabled (0x1UL)

/* COMPAREMATCH3 @Bit 18 : Write '1' to enable interrupt for event COMPAREMATCH[3] */
  #define PWM_INTENSET_COMPAREMATCH3_Pos (18UL)
  #define PWM_INTENSET_COMPAREMATCH3_Msk (0x1UL << PWM_INTENSET_COMPAREMATCH3_Pos)
  #define PWM_INTENSET_COMPAREMATCH3_Min (0x0UL)
  #define PWM_INTENSET_COMPAREMATCH3_Max (0x1UL)
  #define PWM_INTENSET_COMPAREMATCH3_Set (0x1UL)
  #define PWM_INTENSET_COMPAREMATCH3_Disabled (0x0UL)
  #define PWM_INTENSET_COMPAREMATCH3_Enabled (0x1UL)


/* PWM_INTENCLR: Disable interrupt */
  #define PWM_INTENCLR_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define PWM_INTENCLR_STOPPED_Pos (1UL)
  #define PWM_INTENCLR_STOPPED_Msk (0x1UL << PWM_INTENCLR_STOPPED_Pos)
  #define PWM_INTENCLR_STOPPED_Min (0x0UL)
  #define PWM_INTENCLR_STOPPED_Max (0x1UL)
  #define PWM_INTENCLR_STOPPED_Clear (0x1UL)
  #define PWM_INTENCLR_STOPPED_Disabled (0x0UL)
  #define PWM_INTENCLR_STOPPED_Enabled (0x1UL)

/* SEQSTARTED0 @Bit 2 : Write '1' to disable interrupt for event SEQSTARTED[0] */
  #define PWM_INTENCLR_SEQSTARTED0_Pos (2UL)
  #define PWM_INTENCLR_SEQSTARTED0_Msk (0x1UL << PWM_INTENCLR_SEQSTARTED0_Pos)
  #define PWM_INTENCLR_SEQSTARTED0_Min (0x0UL)
  #define PWM_INTENCLR_SEQSTARTED0_Max (0x1UL)
  #define PWM_INTENCLR_SEQSTARTED0_Clear (0x1UL)
  #define PWM_INTENCLR_SEQSTARTED0_Disabled (0x0UL)
  #define PWM_INTENCLR_SEQSTARTED0_Enabled (0x1UL)

/* SEQSTARTED1 @Bit 3 : Write '1' to disable interrupt for event SEQSTARTED[1] */
  #define PWM_INTENCLR_SEQSTARTED1_Pos (3UL)
  #define PWM_INTENCLR_SEQSTARTED1_Msk (0x1UL << PWM_INTENCLR_SEQSTARTED1_Pos)
  #define PWM_INTENCLR_SEQSTARTED1_Min (0x0UL)
  #define PWM_INTENCLR_SEQSTARTED1_Max (0x1UL)
  #define PWM_INTENCLR_SEQSTARTED1_Clear (0x1UL)
  #define PWM_INTENCLR_SEQSTARTED1_Disabled (0x0UL)
  #define PWM_INTENCLR_SEQSTARTED1_Enabled (0x1UL)

/* SEQEND0 @Bit 4 : Write '1' to disable interrupt for event SEQEND[0] */
  #define PWM_INTENCLR_SEQEND0_Pos (4UL)
  #define PWM_INTENCLR_SEQEND0_Msk (0x1UL << PWM_INTENCLR_SEQEND0_Pos)
  #define PWM_INTENCLR_SEQEND0_Min (0x0UL)
  #define PWM_INTENCLR_SEQEND0_Max (0x1UL)
  #define PWM_INTENCLR_SEQEND0_Clear (0x1UL)
  #define PWM_INTENCLR_SEQEND0_Disabled (0x0UL)
  #define PWM_INTENCLR_SEQEND0_Enabled (0x1UL)

/* SEQEND1 @Bit 5 : Write '1' to disable interrupt for event SEQEND[1] */
  #define PWM_INTENCLR_SEQEND1_Pos (5UL)
  #define PWM_INTENCLR_SEQEND1_Msk (0x1UL << PWM_INTENCLR_SEQEND1_Pos)
  #define PWM_INTENCLR_SEQEND1_Min (0x0UL)
  #define PWM_INTENCLR_SEQEND1_Max (0x1UL)
  #define PWM_INTENCLR_SEQEND1_Clear (0x1UL)
  #define PWM_INTENCLR_SEQEND1_Disabled (0x0UL)
  #define PWM_INTENCLR_SEQEND1_Enabled (0x1UL)

/* PWMPERIODEND @Bit 6 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define PWM_INTENCLR_PWMPERIODEND_Pos (6UL)
  #define PWM_INTENCLR_PWMPERIODEND_Msk (0x1UL << PWM_INTENCLR_PWMPERIODEND_Pos)
  #define PWM_INTENCLR_PWMPERIODEND_Min (0x0UL)
  #define PWM_INTENCLR_PWMPERIODEND_Max (0x1UL)
  #define PWM_INTENCLR_PWMPERIODEND_Clear (0x1UL)
  #define PWM_INTENCLR_PWMPERIODEND_Disabled (0x0UL)
  #define PWM_INTENCLR_PWMPERIODEND_Enabled (0x1UL)

/* LOOPSDONE @Bit 7 : Write '1' to disable interrupt for event LOOPSDONE */
  #define PWM_INTENCLR_LOOPSDONE_Pos (7UL)
  #define PWM_INTENCLR_LOOPSDONE_Msk (0x1UL << PWM_INTENCLR_LOOPSDONE_Pos)
  #define PWM_INTENCLR_LOOPSDONE_Min (0x0UL)
  #define PWM_INTENCLR_LOOPSDONE_Max (0x1UL)
  #define PWM_INTENCLR_LOOPSDONE_Clear (0x1UL)
  #define PWM_INTENCLR_LOOPSDONE_Disabled (0x0UL)
  #define PWM_INTENCLR_LOOPSDONE_Enabled (0x1UL)

/* RAMUNDERFLOW @Bit 8 : Write '1' to disable interrupt for event RAMUNDERFLOW */
  #define PWM_INTENCLR_RAMUNDERFLOW_Pos (8UL)
  #define PWM_INTENCLR_RAMUNDERFLOW_Msk (0x1UL << PWM_INTENCLR_RAMUNDERFLOW_Pos)
  #define PWM_INTENCLR_RAMUNDERFLOW_Min (0x0UL)
  #define PWM_INTENCLR_RAMUNDERFLOW_Max (0x1UL)
  #define PWM_INTENCLR_RAMUNDERFLOW_Clear (0x1UL)
  #define PWM_INTENCLR_RAMUNDERFLOW_Disabled (0x0UL)
  #define PWM_INTENCLR_RAMUNDERFLOW_Enabled (0x1UL)

/* DMASEQ0END @Bit 9 : Write '1' to disable interrupt for event DMASEQ0END */
  #define PWM_INTENCLR_DMASEQ0END_Pos (9UL)
  #define PWM_INTENCLR_DMASEQ0END_Msk (0x1UL << PWM_INTENCLR_DMASEQ0END_Pos)
  #define PWM_INTENCLR_DMASEQ0END_Min (0x0UL)
  #define PWM_INTENCLR_DMASEQ0END_Max (0x1UL)
  #define PWM_INTENCLR_DMASEQ0END_Clear (0x1UL)
  #define PWM_INTENCLR_DMASEQ0END_Disabled (0x0UL)
  #define PWM_INTENCLR_DMASEQ0END_Enabled (0x1UL)

/* DMASEQ0READY @Bit 10 : Write '1' to disable interrupt for event DMASEQ0READY */
  #define PWM_INTENCLR_DMASEQ0READY_Pos (10UL)
  #define PWM_INTENCLR_DMASEQ0READY_Msk (0x1UL << PWM_INTENCLR_DMASEQ0READY_Pos)
  #define PWM_INTENCLR_DMASEQ0READY_Min (0x0UL)
  #define PWM_INTENCLR_DMASEQ0READY_Max (0x1UL)
  #define PWM_INTENCLR_DMASEQ0READY_Clear (0x1UL)
  #define PWM_INTENCLR_DMASEQ0READY_Disabled (0x0UL)
  #define PWM_INTENCLR_DMASEQ0READY_Enabled (0x1UL)

/* DMASEQ0BUSERROR @Bit 11 : Write '1' to disable interrupt for event DMASEQ0BUSERROR */
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Pos (11UL)
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Msk (0x1UL << PWM_INTENCLR_DMASEQ0BUSERROR_Pos)
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Min (0x0UL)
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Max (0x1UL)
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Clear (0x1UL)
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Disabled (0x0UL)
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Enabled (0x1UL)

/* DMASEQ1END @Bit 12 : Write '1' to disable interrupt for event DMASEQ1END */
  #define PWM_INTENCLR_DMASEQ1END_Pos (12UL)
  #define PWM_INTENCLR_DMASEQ1END_Msk (0x1UL << PWM_INTENCLR_DMASEQ1END_Pos)
  #define PWM_INTENCLR_DMASEQ1END_Min (0x0UL)
  #define PWM_INTENCLR_DMASEQ1END_Max (0x1UL)
  #define PWM_INTENCLR_DMASEQ1END_Clear (0x1UL)
  #define PWM_INTENCLR_DMASEQ1END_Disabled (0x0UL)
  #define PWM_INTENCLR_DMASEQ1END_Enabled (0x1UL)

/* DMASEQ1READY @Bit 13 : Write '1' to disable interrupt for event DMASEQ1READY */
  #define PWM_INTENCLR_DMASEQ1READY_Pos (13UL)
  #define PWM_INTENCLR_DMASEQ1READY_Msk (0x1UL << PWM_INTENCLR_DMASEQ1READY_Pos)
  #define PWM_INTENCLR_DMASEQ1READY_Min (0x0UL)
  #define PWM_INTENCLR_DMASEQ1READY_Max (0x1UL)
  #define PWM_INTENCLR_DMASEQ1READY_Clear (0x1UL)
  #define PWM_INTENCLR_DMASEQ1READY_Disabled (0x0UL)
  #define PWM_INTENCLR_DMASEQ1READY_Enabled (0x1UL)

/* DMASEQ1BUSERROR @Bit 14 : Write '1' to disable interrupt for event DMASEQ1BUSERROR */
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Pos (14UL)
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Msk (0x1UL << PWM_INTENCLR_DMASEQ1BUSERROR_Pos)
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Min (0x0UL)
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Max (0x1UL)
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Clear (0x1UL)
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Disabled (0x0UL)
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Enabled (0x1UL)

/* COMPAREMATCH0 @Bit 15 : Write '1' to disable interrupt for event COMPAREMATCH[0] */
  #define PWM_INTENCLR_COMPAREMATCH0_Pos (15UL)
  #define PWM_INTENCLR_COMPAREMATCH0_Msk (0x1UL << PWM_INTENCLR_COMPAREMATCH0_Pos)
  #define PWM_INTENCLR_COMPAREMATCH0_Min (0x0UL)
  #define PWM_INTENCLR_COMPAREMATCH0_Max (0x1UL)
  #define PWM_INTENCLR_COMPAREMATCH0_Clear (0x1UL)
  #define PWM_INTENCLR_COMPAREMATCH0_Disabled (0x0UL)
  #define PWM_INTENCLR_COMPAREMATCH0_Enabled (0x1UL)

/* COMPAREMATCH1 @Bit 16 : Write '1' to disable interrupt for event COMPAREMATCH[1] */
  #define PWM_INTENCLR_COMPAREMATCH1_Pos (16UL)
  #define PWM_INTENCLR_COMPAREMATCH1_Msk (0x1UL << PWM_INTENCLR_COMPAREMATCH1_Pos)
  #define PWM_INTENCLR_COMPAREMATCH1_Min (0x0UL)
  #define PWM_INTENCLR_COMPAREMATCH1_Max (0x1UL)
  #define PWM_INTENCLR_COMPAREMATCH1_Clear (0x1UL)
  #define PWM_INTENCLR_COMPAREMATCH1_Disabled (0x0UL)
  #define PWM_INTENCLR_COMPAREMATCH1_Enabled (0x1UL)

/* COMPAREMATCH2 @Bit 17 : Write '1' to disable interrupt for event COMPAREMATCH[2] */
  #define PWM_INTENCLR_COMPAREMATCH2_Pos (17UL)
  #define PWM_INTENCLR_COMPAREMATCH2_Msk (0x1UL << PWM_INTENCLR_COMPAREMATCH2_Pos)
  #define PWM_INTENCLR_COMPAREMATCH2_Min (0x0UL)
  #define PWM_INTENCLR_COMPAREMATCH2_Max (0x1UL)
  #define PWM_INTENCLR_COMPAREMATCH2_Clear (0x1UL)
  #define PWM_INTENCLR_COMPAREMATCH2_Disabled (0x0UL)
  #define PWM_INTENCLR_COMPAREMATCH2_Enabled (0x1UL)

/* COMPAREMATCH3 @Bit 18 : Write '1' to disable interrupt for event COMPAREMATCH[3] */
  #define PWM_INTENCLR_COMPAREMATCH3_Pos (18UL)
  #define PWM_INTENCLR_COMPAREMATCH3_Msk (0x1UL << PWM_INTENCLR_COMPAREMATCH3_Pos)
  #define PWM_INTENCLR_COMPAREMATCH3_Min (0x0UL)
  #define PWM_INTENCLR_COMPAREMATCH3_Max (0x1UL)
  #define PWM_INTENCLR_COMPAREMATCH3_Clear (0x1UL)
  #define PWM_INTENCLR_COMPAREMATCH3_Disabled (0x0UL)
  #define PWM_INTENCLR_COMPAREMATCH3_Enabled (0x1UL)


/* PWM_INTPEND: Pending interrupts */
  #define PWM_INTPEND_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Read pending status of interrupt for event STOPPED */
  #define PWM_INTPEND_STOPPED_Pos (1UL)
  #define PWM_INTPEND_STOPPED_Msk (0x1UL << PWM_INTPEND_STOPPED_Pos)
  #define PWM_INTPEND_STOPPED_Min (0x0UL)
  #define PWM_INTPEND_STOPPED_Max (0x1UL)
  #define PWM_INTPEND_STOPPED_NotPending (0x0UL)
  #define PWM_INTPEND_STOPPED_Pending (0x1UL)

/* SEQSTARTED0 @Bit 2 : Read pending status of interrupt for event SEQSTARTED[0] */
  #define PWM_INTPEND_SEQSTARTED0_Pos (2UL)
  #define PWM_INTPEND_SEQSTARTED0_Msk (0x1UL << PWM_INTPEND_SEQSTARTED0_Pos)
  #define PWM_INTPEND_SEQSTARTED0_Min (0x0UL)
  #define PWM_INTPEND_SEQSTARTED0_Max (0x1UL)
  #define PWM_INTPEND_SEQSTARTED0_NotPending (0x0UL)
  #define PWM_INTPEND_SEQSTARTED0_Pending (0x1UL)

/* SEQSTARTED1 @Bit 3 : Read pending status of interrupt for event SEQSTARTED[1] */
  #define PWM_INTPEND_SEQSTARTED1_Pos (3UL)
  #define PWM_INTPEND_SEQSTARTED1_Msk (0x1UL << PWM_INTPEND_SEQSTARTED1_Pos)
  #define PWM_INTPEND_SEQSTARTED1_Min (0x0UL)
  #define PWM_INTPEND_SEQSTARTED1_Max (0x1UL)
  #define PWM_INTPEND_SEQSTARTED1_NotPending (0x0UL)
  #define PWM_INTPEND_SEQSTARTED1_Pending (0x1UL)

/* SEQEND0 @Bit 4 : Read pending status of interrupt for event SEQEND[0] */
  #define PWM_INTPEND_SEQEND0_Pos (4UL)
  #define PWM_INTPEND_SEQEND0_Msk (0x1UL << PWM_INTPEND_SEQEND0_Pos)
  #define PWM_INTPEND_SEQEND0_Min (0x0UL)
  #define PWM_INTPEND_SEQEND0_Max (0x1UL)
  #define PWM_INTPEND_SEQEND0_NotPending (0x0UL)
  #define PWM_INTPEND_SEQEND0_Pending (0x1UL)

/* SEQEND1 @Bit 5 : Read pending status of interrupt for event SEQEND[1] */
  #define PWM_INTPEND_SEQEND1_Pos (5UL)
  #define PWM_INTPEND_SEQEND1_Msk (0x1UL << PWM_INTPEND_SEQEND1_Pos)
  #define PWM_INTPEND_SEQEND1_Min (0x0UL)
  #define PWM_INTPEND_SEQEND1_Max (0x1UL)
  #define PWM_INTPEND_SEQEND1_NotPending (0x0UL)
  #define PWM_INTPEND_SEQEND1_Pending (0x1UL)

/* PWMPERIODEND @Bit 6 : Read pending status of interrupt for event PWMPERIODEND */
  #define PWM_INTPEND_PWMPERIODEND_Pos (6UL)
  #define PWM_INTPEND_PWMPERIODEND_Msk (0x1UL << PWM_INTPEND_PWMPERIODEND_Pos)
  #define PWM_INTPEND_PWMPERIODEND_Min (0x0UL)
  #define PWM_INTPEND_PWMPERIODEND_Max (0x1UL)
  #define PWM_INTPEND_PWMPERIODEND_NotPending (0x0UL)
  #define PWM_INTPEND_PWMPERIODEND_Pending (0x1UL)

/* LOOPSDONE @Bit 7 : Read pending status of interrupt for event LOOPSDONE */
  #define PWM_INTPEND_LOOPSDONE_Pos (7UL)
  #define PWM_INTPEND_LOOPSDONE_Msk (0x1UL << PWM_INTPEND_LOOPSDONE_Pos)
  #define PWM_INTPEND_LOOPSDONE_Min (0x0UL)
  #define PWM_INTPEND_LOOPSDONE_Max (0x1UL)
  #define PWM_INTPEND_LOOPSDONE_NotPending (0x0UL)
  #define PWM_INTPEND_LOOPSDONE_Pending (0x1UL)

/* RAMUNDERFLOW @Bit 8 : Read pending status of interrupt for event RAMUNDERFLOW */
  #define PWM_INTPEND_RAMUNDERFLOW_Pos (8UL)
  #define PWM_INTPEND_RAMUNDERFLOW_Msk (0x1UL << PWM_INTPEND_RAMUNDERFLOW_Pos)
  #define PWM_INTPEND_RAMUNDERFLOW_Min (0x0UL)
  #define PWM_INTPEND_RAMUNDERFLOW_Max (0x1UL)
  #define PWM_INTPEND_RAMUNDERFLOW_NotPending (0x0UL)
  #define PWM_INTPEND_RAMUNDERFLOW_Pending (0x1UL)

/* DMASEQ0END @Bit 9 : Read pending status of interrupt for event DMASEQ0END */
  #define PWM_INTPEND_DMASEQ0END_Pos (9UL)
  #define PWM_INTPEND_DMASEQ0END_Msk (0x1UL << PWM_INTPEND_DMASEQ0END_Pos)
  #define PWM_INTPEND_DMASEQ0END_Min (0x0UL)
  #define PWM_INTPEND_DMASEQ0END_Max (0x1UL)
  #define PWM_INTPEND_DMASEQ0END_NotPending (0x0UL)
  #define PWM_INTPEND_DMASEQ0END_Pending (0x1UL)

/* DMASEQ0READY @Bit 10 : Read pending status of interrupt for event DMASEQ0READY */
  #define PWM_INTPEND_DMASEQ0READY_Pos (10UL)
  #define PWM_INTPEND_DMASEQ0READY_Msk (0x1UL << PWM_INTPEND_DMASEQ0READY_Pos)
  #define PWM_INTPEND_DMASEQ0READY_Min (0x0UL)
  #define PWM_INTPEND_DMASEQ0READY_Max (0x1UL)
  #define PWM_INTPEND_DMASEQ0READY_NotPending (0x0UL)
  #define PWM_INTPEND_DMASEQ0READY_Pending (0x1UL)

/* DMASEQ0BUSERROR @Bit 11 : Read pending status of interrupt for event DMASEQ0BUSERROR */
  #define PWM_INTPEND_DMASEQ0BUSERROR_Pos (11UL)
  #define PWM_INTPEND_DMASEQ0BUSERROR_Msk (0x1UL << PWM_INTPEND_DMASEQ0BUSERROR_Pos)
  #define PWM_INTPEND_DMASEQ0BUSERROR_Min (0x0UL)
  #define PWM_INTPEND_DMASEQ0BUSERROR_Max (0x1UL)
  #define PWM_INTPEND_DMASEQ0BUSERROR_NotPending (0x0UL)
  #define PWM_INTPEND_DMASEQ0BUSERROR_Pending (0x1UL)

/* DMASEQ1END @Bit 12 : Read pending status of interrupt for event DMASEQ1END */
  #define PWM_INTPEND_DMASEQ1END_Pos (12UL)
  #define PWM_INTPEND_DMASEQ1END_Msk (0x1UL << PWM_INTPEND_DMASEQ1END_Pos)
  #define PWM_INTPEND_DMASEQ1END_Min (0x0UL)
  #define PWM_INTPEND_DMASEQ1END_Max (0x1UL)
  #define PWM_INTPEND_DMASEQ1END_NotPending (0x0UL)
  #define PWM_INTPEND_DMASEQ1END_Pending (0x1UL)

/* DMASEQ1READY @Bit 13 : Read pending status of interrupt for event DMASEQ1READY */
  #define PWM_INTPEND_DMASEQ1READY_Pos (13UL)
  #define PWM_INTPEND_DMASEQ1READY_Msk (0x1UL << PWM_INTPEND_DMASEQ1READY_Pos)
  #define PWM_INTPEND_DMASEQ1READY_Min (0x0UL)
  #define PWM_INTPEND_DMASEQ1READY_Max (0x1UL)
  #define PWM_INTPEND_DMASEQ1READY_NotPending (0x0UL)
  #define PWM_INTPEND_DMASEQ1READY_Pending (0x1UL)

/* DMASEQ1BUSERROR @Bit 14 : Read pending status of interrupt for event DMASEQ1BUSERROR */
  #define PWM_INTPEND_DMASEQ1BUSERROR_Pos (14UL)
  #define PWM_INTPEND_DMASEQ1BUSERROR_Msk (0x1UL << PWM_INTPEND_DMASEQ1BUSERROR_Pos)
  #define PWM_INTPEND_DMASEQ1BUSERROR_Min (0x0UL)
  #define PWM_INTPEND_DMASEQ1BUSERROR_Max (0x1UL)
  #define PWM_INTPEND_DMASEQ1BUSERROR_NotPending (0x0UL)
  #define PWM_INTPEND_DMASEQ1BUSERROR_Pending (0x1UL)

/* COMPAREMATCH0 @Bit 15 : Read pending status of interrupt for event COMPAREMATCH[0] */
  #define PWM_INTPEND_COMPAREMATCH0_Pos (15UL)
  #define PWM_INTPEND_COMPAREMATCH0_Msk (0x1UL << PWM_INTPEND_COMPAREMATCH0_Pos)
  #define PWM_INTPEND_COMPAREMATCH0_Min (0x0UL)
  #define PWM_INTPEND_COMPAREMATCH0_Max (0x1UL)
  #define PWM_INTPEND_COMPAREMATCH0_NotPending (0x0UL)
  #define PWM_INTPEND_COMPAREMATCH0_Pending (0x1UL)

/* COMPAREMATCH1 @Bit 16 : Read pending status of interrupt for event COMPAREMATCH[1] */
  #define PWM_INTPEND_COMPAREMATCH1_Pos (16UL)
  #define PWM_INTPEND_COMPAREMATCH1_Msk (0x1UL << PWM_INTPEND_COMPAREMATCH1_Pos)
  #define PWM_INTPEND_COMPAREMATCH1_Min (0x0UL)
  #define PWM_INTPEND_COMPAREMATCH1_Max (0x1UL)
  #define PWM_INTPEND_COMPAREMATCH1_NotPending (0x0UL)
  #define PWM_INTPEND_COMPAREMATCH1_Pending (0x1UL)

/* COMPAREMATCH2 @Bit 17 : Read pending status of interrupt for event COMPAREMATCH[2] */
  #define PWM_INTPEND_COMPAREMATCH2_Pos (17UL)
  #define PWM_INTPEND_COMPAREMATCH2_Msk (0x1UL << PWM_INTPEND_COMPAREMATCH2_Pos)
  #define PWM_INTPEND_COMPAREMATCH2_Min (0x0UL)
  #define PWM_INTPEND_COMPAREMATCH2_Max (0x1UL)
  #define PWM_INTPEND_COMPAREMATCH2_NotPending (0x0UL)
  #define PWM_INTPEND_COMPAREMATCH2_Pending (0x1UL)

/* COMPAREMATCH3 @Bit 18 : Read pending status of interrupt for event COMPAREMATCH[3] */
  #define PWM_INTPEND_COMPAREMATCH3_Pos (18UL)
  #define PWM_INTPEND_COMPAREMATCH3_Msk (0x1UL << PWM_INTPEND_COMPAREMATCH3_Pos)
  #define PWM_INTPEND_COMPAREMATCH3_Min (0x0UL)
  #define PWM_INTPEND_COMPAREMATCH3_Max (0x1UL)
  #define PWM_INTPEND_COMPAREMATCH3_NotPending (0x0UL)
  #define PWM_INTPEND_COMPAREMATCH3_Pending (0x1UL)


/* PWM_ENABLE: PWM module enable register */
  #define PWM_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable or disable PWM module */
  #define PWM_ENABLE_ENABLE_Pos (0UL)
  #define PWM_ENABLE_ENABLE_Msk (0x1UL << PWM_ENABLE_ENABLE_Pos)
  #define PWM_ENABLE_ENABLE_Min (0x0UL)
  #define PWM_ENABLE_ENABLE_Max (0x1UL)
  #define PWM_ENABLE_ENABLE_Disabled (0x0UL)
  #define PWM_ENABLE_ENABLE_Enabled (0x1UL)


/* PWM_MODE: Selects operating mode of the wave counter */
  #define PWM_MODE_ResetValue (0x00000000UL)

/* UPDOWN @Bit 0 : Selects up mode or up-and-down mode for the counter */
  #define PWM_MODE_UPDOWN_Pos (0UL)
  #define PWM_MODE_UPDOWN_Msk (0x1UL << PWM_MODE_UPDOWN_Pos)
  #define PWM_MODE_UPDOWN_Min (0x0UL)
  #define PWM_MODE_UPDOWN_Max (0x1UL)
  #define PWM_MODE_UPDOWN_Up (0x0UL)
  #define PWM_MODE_UPDOWN_UpAndDown (0x1UL)


/* PWM_COUNTERTOP: Value up to which the pulse generator counter counts */
  #define PWM_COUNTERTOP_ResetValue (0x000003FFUL)

/* COUNTERTOP @Bits 0..14 : Value up to which the pulse generator counter counts. This register is ignored when
                            DECODER.MODE=WaveForm and only values from RAM are used. */

  #define PWM_COUNTERTOP_COUNTERTOP_Pos (0UL)
  #define PWM_COUNTERTOP_COUNTERTOP_Msk (0x7FFFUL << PWM_COUNTERTOP_COUNTERTOP_Pos)
  #define PWM_COUNTERTOP_COUNTERTOP_Min (0x0003UL)
  #define PWM_COUNTERTOP_COUNTERTOP_Max (0x7FFFUL)


/* PWM_PRESCALER: Configuration for PWM_CLK */
  #define PWM_PRESCALER_ResetValue (0x00000000UL)

/* PRESCALER @Bits 0..2 : Prescaler of PWM_CLK */
  #define PWM_PRESCALER_PRESCALER_Pos (0UL)
  #define PWM_PRESCALER_PRESCALER_Msk (0x7UL << PWM_PRESCALER_PRESCALER_Pos)
  #define PWM_PRESCALER_PRESCALER_Min (0x0UL)
  #define PWM_PRESCALER_PRESCALER_Max (0x7UL)
  #define PWM_PRESCALER_PRESCALER_DIV_1 (0x0UL)
  #define PWM_PRESCALER_PRESCALER_DIV_2 (0x1UL)
  #define PWM_PRESCALER_PRESCALER_DIV_4 (0x2UL)
  #define PWM_PRESCALER_PRESCALER_DIV_8 (0x3UL)
  #define PWM_PRESCALER_PRESCALER_DIV_16 (0x4UL)
  #define PWM_PRESCALER_PRESCALER_DIV_32 (0x5UL)
  #define PWM_PRESCALER_PRESCALER_DIV_64 (0x6UL)
  #define PWM_PRESCALER_PRESCALER_DIV_128 (0x7UL)


/* PWM_DECODER: Configuration of the decoder */
  #define PWM_DECODER_ResetValue (0x00000000UL)

/* LOAD @Bits 0..1 : How a sequence is read from RAM and spread to the compare register */
  #define PWM_DECODER_LOAD_Pos (0UL)
  #define PWM_DECODER_LOAD_Msk (0x3UL << PWM_DECODER_LOAD_Pos)
  #define PWM_DECODER_LOAD_Min (0x0UL)
  #define PWM_DECODER_LOAD_Max (0x3UL)
  #define PWM_DECODER_LOAD_Common (0x0UL)
  #define PWM_DECODER_LOAD_Grouped (0x1UL)
  #define PWM_DECODER_LOAD_Individual (0x2UL)
  #define PWM_DECODER_LOAD_WaveForm (0x3UL)

/* MODE @Bit 8 : Selects source for advancing the active sequence */
  #define PWM_DECODER_MODE_Pos (8UL)
  #define PWM_DECODER_MODE_Msk (0x1UL << PWM_DECODER_MODE_Pos)
  #define PWM_DECODER_MODE_Min (0x0UL)
  #define PWM_DECODER_MODE_Max (0x1UL)
  #define PWM_DECODER_MODE_RefreshCount (0x0UL)      /*!< SEQ[n].REFRESH is used to determine loading internal compare
                                                          registers*/
  #define PWM_DECODER_MODE_NextStep (0x1UL)          /*!< NEXTSTEP task causes a new value to be loaded to internal compare
                                                          registers*/


/* PWM_LOOP: Number of playbacks of a loop */
  #define PWM_LOOP_ResetValue (0x00000000UL)

/* CNT @Bits 0..15 : Number of playbacks of pattern cycles */
  #define PWM_LOOP_CNT_Pos (0UL)
  #define PWM_LOOP_CNT_Msk (0xFFFFUL << PWM_LOOP_CNT_Pos)
  #define PWM_LOOP_CNT_Min (0x0UL)
  #define PWM_LOOP_CNT_Max (0x0UL)
  #define PWM_LOOP_CNT_Disabled (0x0000UL)


/* PWM_IDLEOUT: Configure the output value on the PWM channel during idle */
  #define PWM_IDLEOUT_ResetValue (0x00000000UL)

/* VAL0 @Bit 0 : Idle output value for PWM channel [0] */
  #define PWM_IDLEOUT_VAL0_Pos (0UL)
  #define PWM_IDLEOUT_VAL0_Msk (0x1UL << PWM_IDLEOUT_VAL0_Pos)

/* VAL1 @Bit 1 : Idle output value for PWM channel [1] */
  #define PWM_IDLEOUT_VAL1_Pos (1UL)
  #define PWM_IDLEOUT_VAL1_Msk (0x1UL << PWM_IDLEOUT_VAL1_Pos)

/* VAL2 @Bit 2 : Idle output value for PWM channel [2] */
  #define PWM_IDLEOUT_VAL2_Pos (2UL)
  #define PWM_IDLEOUT_VAL2_Msk (0x1UL << PWM_IDLEOUT_VAL2_Pos)

/* VAL3 @Bit 3 : Idle output value for PWM channel [3] */
  #define PWM_IDLEOUT_VAL3_Pos (3UL)
  #define PWM_IDLEOUT_VAL3_Msk (0x1UL << PWM_IDLEOUT_VAL3_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           QDEC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ==================================================== Struct QDEC_PSEL ===================================================== */
/**
  * @brief PSEL [QDEC_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  LED;
  __IOM uint32_t  A;
  __IOM uint32_t  B;
} NRF_QDEC_PSEL_Type;

/* QDEC_PSEL_LED: Pin select for LED signal */
  #define QDEC_PSEL_LED_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define QDEC_PSEL_LED_PIN_Pos (0UL)
  #define QDEC_PSEL_LED_PIN_Msk (0x1FUL << QDEC_PSEL_LED_PIN_Pos)
  #define QDEC_PSEL_LED_PIN_Min (0x00UL)
  #define QDEC_PSEL_LED_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define QDEC_PSEL_LED_PORT_Pos (5UL)
  #define QDEC_PSEL_LED_PORT_Msk (0x7UL << QDEC_PSEL_LED_PORT_Pos)
  #define QDEC_PSEL_LED_PORT_Min (0x1UL)
  #define QDEC_PSEL_LED_PORT_Max (0x1UL)

/* CONNECT @Bit 31 : Connection */
  #define QDEC_PSEL_LED_CONNECT_Pos (31UL)
  #define QDEC_PSEL_LED_CONNECT_Msk (0x1UL << QDEC_PSEL_LED_CONNECT_Pos)
  #define QDEC_PSEL_LED_CONNECT_Min (0x0UL)
  #define QDEC_PSEL_LED_CONNECT_Max (0x1UL)
  #define QDEC_PSEL_LED_CONNECT_Disconnected (0x1UL)
  #define QDEC_PSEL_LED_CONNECT_Connected (0x0UL)


/* QDEC_PSEL_A: Pin select for A signal */
  #define QDEC_PSEL_A_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define QDEC_PSEL_A_PIN_Pos (0UL)
  #define QDEC_PSEL_A_PIN_Msk (0x1FUL << QDEC_PSEL_A_PIN_Pos)
  #define QDEC_PSEL_A_PIN_Min (0x00UL)
  #define QDEC_PSEL_A_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define QDEC_PSEL_A_PORT_Pos (5UL)
  #define QDEC_PSEL_A_PORT_Msk (0x7UL << QDEC_PSEL_A_PORT_Pos)
  #define QDEC_PSEL_A_PORT_Min (0x1UL)
  #define QDEC_PSEL_A_PORT_Max (0x1UL)

/* CONNECT @Bit 31 : Connection */
  #define QDEC_PSEL_A_CONNECT_Pos (31UL)
  #define QDEC_PSEL_A_CONNECT_Msk (0x1UL << QDEC_PSEL_A_CONNECT_Pos)
  #define QDEC_PSEL_A_CONNECT_Min (0x0UL)
  #define QDEC_PSEL_A_CONNECT_Max (0x1UL)
  #define QDEC_PSEL_A_CONNECT_Disconnected (0x1UL)
  #define QDEC_PSEL_A_CONNECT_Connected (0x0UL)


/* QDEC_PSEL_B: Pin select for B signal */
  #define QDEC_PSEL_B_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define QDEC_PSEL_B_PIN_Pos (0UL)
  #define QDEC_PSEL_B_PIN_Msk (0x1FUL << QDEC_PSEL_B_PIN_Pos)
  #define QDEC_PSEL_B_PIN_Min (0x00UL)
  #define QDEC_PSEL_B_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define QDEC_PSEL_B_PORT_Pos (5UL)
  #define QDEC_PSEL_B_PORT_Msk (0x7UL << QDEC_PSEL_B_PORT_Pos)
  #define QDEC_PSEL_B_PORT_Min (0x1UL)
  #define QDEC_PSEL_B_PORT_Max (0x1UL)

/* CONNECT @Bit 31 : Connection */
  #define QDEC_PSEL_B_CONNECT_Pos (31UL)
  #define QDEC_PSEL_B_CONNECT_Msk (0x1UL << QDEC_PSEL_B_CONNECT_Pos)
  #define QDEC_PSEL_B_CONNECT_Min (0x0UL)
  #define QDEC_PSEL_B_CONNECT_Max (0x1UL)
  #define QDEC_PSEL_B_CONNECT_Disconnected (0x1UL)
  #define QDEC_PSEL_B_CONNECT_Connected (0x0UL)


/* ======================================================= Struct QDEC ======================================================= */
/**
  * @brief Quadrature Decoder
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_READCLRACC;
    __OM uint32_t TASKS_RDCLRACC;
    __OM uint32_t TASKS_RDCLRDBL;
    __IM uint32_t RESERVED[27];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_READCLRACC;
    __IOM uint32_t SUBSCRIBE_RDCLRACC;
    __IOM uint32_t SUBSCRIBE_RDCLRDBL;
    __IM uint32_t RESERVED1[27];
    __IOM uint32_t EVENTS_SAMPLERDY;                 /*!< (@ 0x00000100) Event being generated for every new sample value
                                                                         written to the SAMPLE register*/
    __IOM uint32_t EVENTS_REPORTRDY;
    __IOM uint32_t EVENTS_ACCOF;
    __IOM uint32_t EVENTS_DBLRDY;
    __IOM uint32_t EVENTS_STOPPED;
    __IM uint32_t RESERVED2[27];
    __IOM uint32_t PUBLISH_SAMPLERDY;
    __IOM uint32_t PUBLISH_REPORTRDY;
    __IOM uint32_t PUBLISH_ACCOF;
    __IOM uint32_t PUBLISH_DBLRDY;
    __IOM uint32_t PUBLISH_STOPPED;
    __IM uint32_t RESERVED3[27];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED4[64];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED5[125];
    __IOM uint32_t ENABLE;
    __IOM uint32_t LEDPOL;
    __IOM uint32_t SAMPLEPER;
    __IM int32_t  SAMPLE;
    __IOM uint32_t REPORTPER;                        /*!< (@ 0x00000510) Number of samples to be taken before REPORTRDY and
                                                                         DBLRDY events can be generated*/
    __IM int32_t  ACC;
    __IM int32_t  ACCREAD;                           /*!< (@ 0x00000518) Snapshot of the ACC register, updated by the READCLRACC
                                                                         or RDCLRACC task*/
    __IOM NRF_QDEC_PSEL_Type PSEL;
    __IOM uint32_t DBFEN;
    __IM uint32_t RESERVED6[5];
    __IOM uint32_t LEDPRE;
    __IM uint32_t ACCDBL;                            /*!< (@ 0x00000544) Register accumulating the number of detected double
                                                                         transitions*/
    __IM uint32_t ACCDBLREAD;                        /*!< (@ 0x00000548) Snapshot of the ACCDBL, updated by the READCLRACC or
                                                                         RDCLRDBL task*/
  } NRF_QDEC_Type;

/* QDEC_TASKS_START: Task starting the quadrature decoder */
  #define QDEC_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Task starting the quadrature decoder */
  #define QDEC_TASKS_START_TASKS_START_Pos (0UL)
  #define QDEC_TASKS_START_TASKS_START_Msk (0x1UL << QDEC_TASKS_START_TASKS_START_Pos)
  #define QDEC_TASKS_START_TASKS_START_Min (0x1UL)
  #define QDEC_TASKS_START_TASKS_START_Max (0x1UL)
  #define QDEC_TASKS_START_TASKS_START_Trigger (0x1UL)


/* QDEC_TASKS_STOP: Task stopping the quadrature decoder */
  #define QDEC_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Task stopping the quadrature decoder */
  #define QDEC_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define QDEC_TASKS_STOP_TASKS_STOP_Msk (0x1UL << QDEC_TASKS_STOP_TASKS_STOP_Pos)
  #define QDEC_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define QDEC_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define QDEC_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* QDEC_TASKS_READCLRACC: Read and clear ACC and ACCDBL */
  #define QDEC_TASKS_READCLRACC_ResetValue (0x00000000UL)

/* TASKS_READCLRACC @Bit 0 : Read and clear ACC and ACCDBL */
  #define QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Pos (0UL)
  #define QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Msk (0x1UL << QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Pos) /*!< Bit mask of
                                                                            TASKS_READCLRACC field.*/
  #define QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Min (0x1UL)
  #define QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Max (0x1UL)
  #define QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Trigger (0x1UL)


/* QDEC_TASKS_RDCLRACC: Read and clear ACC */
  #define QDEC_TASKS_RDCLRACC_ResetValue (0x00000000UL)

/* TASKS_RDCLRACC @Bit 0 : Read and clear ACC */
  #define QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Pos (0UL)
  #define QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Msk (0x1UL << QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Pos) /*!< Bit mask of
                                                                            TASKS_RDCLRACC field.*/
  #define QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Min (0x1UL)
  #define QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Max (0x1UL)
  #define QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Trigger (0x1UL)


/* QDEC_TASKS_RDCLRDBL: Read and clear ACCDBL */
  #define QDEC_TASKS_RDCLRDBL_ResetValue (0x00000000UL)

/* TASKS_RDCLRDBL @Bit 0 : Read and clear ACCDBL */
  #define QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Pos (0UL)
  #define QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Msk (0x1UL << QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Pos) /*!< Bit mask of
                                                                            TASKS_RDCLRDBL field.*/
  #define QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Min (0x1UL)
  #define QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Max (0x1UL)
  #define QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Trigger (0x1UL)


/* QDEC_SUBSCRIBE_START: Subscribe configuration for task START */
  #define QDEC_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define QDEC_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define QDEC_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_START_CHIDX_Pos)
  #define QDEC_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define QDEC_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define QDEC_SUBSCRIBE_START_EN_Pos (31UL)
  #define QDEC_SUBSCRIBE_START_EN_Msk (0x1UL << QDEC_SUBSCRIBE_START_EN_Pos)
  #define QDEC_SUBSCRIBE_START_EN_Min (0x0UL)
  #define QDEC_SUBSCRIBE_START_EN_Max (0x1UL)
  #define QDEC_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define QDEC_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* QDEC_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define QDEC_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define QDEC_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define QDEC_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_STOP_CHIDX_Pos)
  #define QDEC_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define QDEC_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define QDEC_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define QDEC_SUBSCRIBE_STOP_EN_Msk (0x1UL << QDEC_SUBSCRIBE_STOP_EN_Pos)
  #define QDEC_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define QDEC_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define QDEC_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define QDEC_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* QDEC_SUBSCRIBE_READCLRACC: Subscribe configuration for task READCLRACC */
  #define QDEC_SUBSCRIBE_READCLRACC_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task READCLRACC will subscribe to */
  #define QDEC_SUBSCRIBE_READCLRACC_CHIDX_Pos (0UL)
  #define QDEC_SUBSCRIBE_READCLRACC_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_READCLRACC_CHIDX_Pos)
  #define QDEC_SUBSCRIBE_READCLRACC_CHIDX_Min (0x00UL)
  #define QDEC_SUBSCRIBE_READCLRACC_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define QDEC_SUBSCRIBE_READCLRACC_EN_Pos (31UL)
  #define QDEC_SUBSCRIBE_READCLRACC_EN_Msk (0x1UL << QDEC_SUBSCRIBE_READCLRACC_EN_Pos)
  #define QDEC_SUBSCRIBE_READCLRACC_EN_Min (0x0UL)
  #define QDEC_SUBSCRIBE_READCLRACC_EN_Max (0x1UL)
  #define QDEC_SUBSCRIBE_READCLRACC_EN_Disabled (0x0UL)
  #define QDEC_SUBSCRIBE_READCLRACC_EN_Enabled (0x1UL)


/* QDEC_SUBSCRIBE_RDCLRACC: Subscribe configuration for task RDCLRACC */
  #define QDEC_SUBSCRIBE_RDCLRACC_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RDCLRACC will subscribe to */
  #define QDEC_SUBSCRIBE_RDCLRACC_CHIDX_Pos (0UL)
  #define QDEC_SUBSCRIBE_RDCLRACC_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_RDCLRACC_CHIDX_Pos)
  #define QDEC_SUBSCRIBE_RDCLRACC_CHIDX_Min (0x00UL)
  #define QDEC_SUBSCRIBE_RDCLRACC_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define QDEC_SUBSCRIBE_RDCLRACC_EN_Pos (31UL)
  #define QDEC_SUBSCRIBE_RDCLRACC_EN_Msk (0x1UL << QDEC_SUBSCRIBE_RDCLRACC_EN_Pos)
  #define QDEC_SUBSCRIBE_RDCLRACC_EN_Min (0x0UL)
  #define QDEC_SUBSCRIBE_RDCLRACC_EN_Max (0x1UL)
  #define QDEC_SUBSCRIBE_RDCLRACC_EN_Disabled (0x0UL)
  #define QDEC_SUBSCRIBE_RDCLRACC_EN_Enabled (0x1UL)


/* QDEC_SUBSCRIBE_RDCLRDBL: Subscribe configuration for task RDCLRDBL */
  #define QDEC_SUBSCRIBE_RDCLRDBL_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RDCLRDBL will subscribe to */
  #define QDEC_SUBSCRIBE_RDCLRDBL_CHIDX_Pos (0UL)
  #define QDEC_SUBSCRIBE_RDCLRDBL_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_RDCLRDBL_CHIDX_Pos)
  #define QDEC_SUBSCRIBE_RDCLRDBL_CHIDX_Min (0x00UL)
  #define QDEC_SUBSCRIBE_RDCLRDBL_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define QDEC_SUBSCRIBE_RDCLRDBL_EN_Pos (31UL)
  #define QDEC_SUBSCRIBE_RDCLRDBL_EN_Msk (0x1UL << QDEC_SUBSCRIBE_RDCLRDBL_EN_Pos)
  #define QDEC_SUBSCRIBE_RDCLRDBL_EN_Min (0x0UL)
  #define QDEC_SUBSCRIBE_RDCLRDBL_EN_Max (0x1UL)
  #define QDEC_SUBSCRIBE_RDCLRDBL_EN_Disabled (0x0UL)
  #define QDEC_SUBSCRIBE_RDCLRDBL_EN_Enabled (0x1UL)


/* QDEC_EVENTS_SAMPLERDY: Event being generated for every new sample value written to the SAMPLE register */
  #define QDEC_EVENTS_SAMPLERDY_ResetValue (0x00000000UL)

/* EVENTS_SAMPLERDY @Bit 0 : Event being generated for every new sample value written to the SAMPLE register */
  #define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Pos (0UL)
  #define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Msk (0x1UL << QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Pos) /*!< Bit mask of
                                                                            EVENTS_SAMPLERDY field.*/
  #define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Min (0x0UL)
  #define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Max (0x1UL)
  #define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_NotGenerated (0x0UL)
  #define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Generated (0x1UL)


/* QDEC_EVENTS_REPORTRDY: Non-null report ready */
  #define QDEC_EVENTS_REPORTRDY_ResetValue (0x00000000UL)

/* EVENTS_REPORTRDY @Bit 0 : Non-null report ready */
  #define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Pos (0UL)
  #define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Msk (0x1UL << QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Pos) /*!< Bit mask of
                                                                            EVENTS_REPORTRDY field.*/
  #define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Min (0x0UL)
  #define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Max (0x1UL)
  #define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_NotGenerated (0x0UL)
  #define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Generated (0x1UL)


/* QDEC_EVENTS_ACCOF: ACC or ACCDBL register overflow */
  #define QDEC_EVENTS_ACCOF_ResetValue (0x00000000UL)

/* EVENTS_ACCOF @Bit 0 : ACC or ACCDBL register overflow */
  #define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Pos (0UL)
  #define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Msk (0x1UL << QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Pos)
  #define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Min (0x0UL)
  #define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Max (0x1UL)
  #define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_NotGenerated (0x0UL)
  #define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Generated (0x1UL)


/* QDEC_EVENTS_DBLRDY: Double displacement(s) detected */
  #define QDEC_EVENTS_DBLRDY_ResetValue (0x00000000UL)

/* EVENTS_DBLRDY @Bit 0 : Double displacement(s) detected */
  #define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Pos (0UL)
  #define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Msk (0x1UL << QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Pos) /*!< Bit mask of EVENTS_DBLRDY
                                                                            field.*/
  #define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Min (0x0UL)
  #define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Max (0x1UL)
  #define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_NotGenerated (0x0UL)
  #define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Generated (0x1UL)


/* QDEC_EVENTS_STOPPED: QDEC has been stopped */
  #define QDEC_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : QDEC has been stopped */
  #define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* QDEC_PUBLISH_SAMPLERDY: Publish configuration for event SAMPLERDY */
  #define QDEC_PUBLISH_SAMPLERDY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SAMPLERDY will publish to */
  #define QDEC_PUBLISH_SAMPLERDY_CHIDX_Pos (0UL)
  #define QDEC_PUBLISH_SAMPLERDY_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_SAMPLERDY_CHIDX_Pos)
  #define QDEC_PUBLISH_SAMPLERDY_CHIDX_Min (0x00UL)
  #define QDEC_PUBLISH_SAMPLERDY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define QDEC_PUBLISH_SAMPLERDY_EN_Pos (31UL)
  #define QDEC_PUBLISH_SAMPLERDY_EN_Msk (0x1UL << QDEC_PUBLISH_SAMPLERDY_EN_Pos)
  #define QDEC_PUBLISH_SAMPLERDY_EN_Min (0x0UL)
  #define QDEC_PUBLISH_SAMPLERDY_EN_Max (0x1UL)
  #define QDEC_PUBLISH_SAMPLERDY_EN_Disabled (0x0UL)
  #define QDEC_PUBLISH_SAMPLERDY_EN_Enabled (0x1UL)


/* QDEC_PUBLISH_REPORTRDY: Publish configuration for event REPORTRDY */
  #define QDEC_PUBLISH_REPORTRDY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event REPORTRDY will publish to */
  #define QDEC_PUBLISH_REPORTRDY_CHIDX_Pos (0UL)
  #define QDEC_PUBLISH_REPORTRDY_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_REPORTRDY_CHIDX_Pos)
  #define QDEC_PUBLISH_REPORTRDY_CHIDX_Min (0x00UL)
  #define QDEC_PUBLISH_REPORTRDY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define QDEC_PUBLISH_REPORTRDY_EN_Pos (31UL)
  #define QDEC_PUBLISH_REPORTRDY_EN_Msk (0x1UL << QDEC_PUBLISH_REPORTRDY_EN_Pos)
  #define QDEC_PUBLISH_REPORTRDY_EN_Min (0x0UL)
  #define QDEC_PUBLISH_REPORTRDY_EN_Max (0x1UL)
  #define QDEC_PUBLISH_REPORTRDY_EN_Disabled (0x0UL)
  #define QDEC_PUBLISH_REPORTRDY_EN_Enabled (0x1UL)


/* QDEC_PUBLISH_ACCOF: Publish configuration for event ACCOF */
  #define QDEC_PUBLISH_ACCOF_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ACCOF will publish to */
  #define QDEC_PUBLISH_ACCOF_CHIDX_Pos (0UL)
  #define QDEC_PUBLISH_ACCOF_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_ACCOF_CHIDX_Pos)
  #define QDEC_PUBLISH_ACCOF_CHIDX_Min (0x00UL)
  #define QDEC_PUBLISH_ACCOF_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define QDEC_PUBLISH_ACCOF_EN_Pos (31UL)
  #define QDEC_PUBLISH_ACCOF_EN_Msk (0x1UL << QDEC_PUBLISH_ACCOF_EN_Pos)
  #define QDEC_PUBLISH_ACCOF_EN_Min (0x0UL)
  #define QDEC_PUBLISH_ACCOF_EN_Max (0x1UL)
  #define QDEC_PUBLISH_ACCOF_EN_Disabled (0x0UL)
  #define QDEC_PUBLISH_ACCOF_EN_Enabled (0x1UL)


/* QDEC_PUBLISH_DBLRDY: Publish configuration for event DBLRDY */
  #define QDEC_PUBLISH_DBLRDY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DBLRDY will publish to */
  #define QDEC_PUBLISH_DBLRDY_CHIDX_Pos (0UL)
  #define QDEC_PUBLISH_DBLRDY_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_DBLRDY_CHIDX_Pos)
  #define QDEC_PUBLISH_DBLRDY_CHIDX_Min (0x00UL)
  #define QDEC_PUBLISH_DBLRDY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define QDEC_PUBLISH_DBLRDY_EN_Pos (31UL)
  #define QDEC_PUBLISH_DBLRDY_EN_Msk (0x1UL << QDEC_PUBLISH_DBLRDY_EN_Pos)
  #define QDEC_PUBLISH_DBLRDY_EN_Min (0x0UL)
  #define QDEC_PUBLISH_DBLRDY_EN_Max (0x1UL)
  #define QDEC_PUBLISH_DBLRDY_EN_Disabled (0x0UL)
  #define QDEC_PUBLISH_DBLRDY_EN_Enabled (0x1UL)


/* QDEC_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define QDEC_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define QDEC_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define QDEC_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_STOPPED_CHIDX_Pos)
  #define QDEC_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define QDEC_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define QDEC_PUBLISH_STOPPED_EN_Pos (31UL)
  #define QDEC_PUBLISH_STOPPED_EN_Msk (0x1UL << QDEC_PUBLISH_STOPPED_EN_Pos)
  #define QDEC_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define QDEC_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define QDEC_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define QDEC_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* QDEC_SHORTS: Shortcuts between local events and tasks */
  #define QDEC_SHORTS_ResetValue (0x00000000UL)

/* REPORTRDY_READCLRACC @Bit 0 : Shortcut between event REPORTRDY and task READCLRACC */
  #define QDEC_SHORTS_REPORTRDY_READCLRACC_Pos (0UL)
  #define QDEC_SHORTS_REPORTRDY_READCLRACC_Msk (0x1UL << QDEC_SHORTS_REPORTRDY_READCLRACC_Pos) /*!< Bit mask of
                                                                            REPORTRDY_READCLRACC field.*/
  #define QDEC_SHORTS_REPORTRDY_READCLRACC_Min (0x0UL)
  #define QDEC_SHORTS_REPORTRDY_READCLRACC_Max (0x1UL)
  #define QDEC_SHORTS_REPORTRDY_READCLRACC_Disabled (0x0UL)
  #define QDEC_SHORTS_REPORTRDY_READCLRACC_Enabled (0x1UL)

/* SAMPLERDY_STOP @Bit 1 : Shortcut between event SAMPLERDY and task STOP */
  #define QDEC_SHORTS_SAMPLERDY_STOP_Pos (1UL)
  #define QDEC_SHORTS_SAMPLERDY_STOP_Msk (0x1UL << QDEC_SHORTS_SAMPLERDY_STOP_Pos)
  #define QDEC_SHORTS_SAMPLERDY_STOP_Min (0x0UL)
  #define QDEC_SHORTS_SAMPLERDY_STOP_Max (0x1UL)
  #define QDEC_SHORTS_SAMPLERDY_STOP_Disabled (0x0UL)
  #define QDEC_SHORTS_SAMPLERDY_STOP_Enabled (0x1UL)

/* REPORTRDY_RDCLRACC @Bit 2 : Shortcut between event REPORTRDY and task RDCLRACC */
  #define QDEC_SHORTS_REPORTRDY_RDCLRACC_Pos (2UL)
  #define QDEC_SHORTS_REPORTRDY_RDCLRACC_Msk (0x1UL << QDEC_SHORTS_REPORTRDY_RDCLRACC_Pos) /*!< Bit mask of REPORTRDY_RDCLRACC
                                                                            field.*/
  #define QDEC_SHORTS_REPORTRDY_RDCLRACC_Min (0x0UL)
  #define QDEC_SHORTS_REPORTRDY_RDCLRACC_Max (0x1UL)
  #define QDEC_SHORTS_REPORTRDY_RDCLRACC_Disabled (0x0UL)
  #define QDEC_SHORTS_REPORTRDY_RDCLRACC_Enabled (0x1UL)

/* REPORTRDY_STOP @Bit 3 : Shortcut between event REPORTRDY and task STOP */
  #define QDEC_SHORTS_REPORTRDY_STOP_Pos (3UL)
  #define QDEC_SHORTS_REPORTRDY_STOP_Msk (0x1UL << QDEC_SHORTS_REPORTRDY_STOP_Pos)
  #define QDEC_SHORTS_REPORTRDY_STOP_Min (0x0UL)
  #define QDEC_SHORTS_REPORTRDY_STOP_Max (0x1UL)
  #define QDEC_SHORTS_REPORTRDY_STOP_Disabled (0x0UL)
  #define QDEC_SHORTS_REPORTRDY_STOP_Enabled (0x1UL)

/* DBLRDY_RDCLRDBL @Bit 4 : Shortcut between event DBLRDY and task RDCLRDBL */
  #define QDEC_SHORTS_DBLRDY_RDCLRDBL_Pos (4UL)
  #define QDEC_SHORTS_DBLRDY_RDCLRDBL_Msk (0x1UL << QDEC_SHORTS_DBLRDY_RDCLRDBL_Pos)
  #define QDEC_SHORTS_DBLRDY_RDCLRDBL_Min (0x0UL)
  #define QDEC_SHORTS_DBLRDY_RDCLRDBL_Max (0x1UL)
  #define QDEC_SHORTS_DBLRDY_RDCLRDBL_Disabled (0x0UL)
  #define QDEC_SHORTS_DBLRDY_RDCLRDBL_Enabled (0x1UL)

/* DBLRDY_STOP @Bit 5 : Shortcut between event DBLRDY and task STOP */
  #define QDEC_SHORTS_DBLRDY_STOP_Pos (5UL)
  #define QDEC_SHORTS_DBLRDY_STOP_Msk (0x1UL << QDEC_SHORTS_DBLRDY_STOP_Pos)
  #define QDEC_SHORTS_DBLRDY_STOP_Min (0x0UL)
  #define QDEC_SHORTS_DBLRDY_STOP_Max (0x1UL)
  #define QDEC_SHORTS_DBLRDY_STOP_Disabled (0x0UL)
  #define QDEC_SHORTS_DBLRDY_STOP_Enabled (0x1UL)

/* SAMPLERDY_READCLRACC @Bit 6 : Shortcut between event SAMPLERDY and task READCLRACC */
  #define QDEC_SHORTS_SAMPLERDY_READCLRACC_Pos (6UL)
  #define QDEC_SHORTS_SAMPLERDY_READCLRACC_Msk (0x1UL << QDEC_SHORTS_SAMPLERDY_READCLRACC_Pos) /*!< Bit mask of
                                                                            SAMPLERDY_READCLRACC field.*/
  #define QDEC_SHORTS_SAMPLERDY_READCLRACC_Min (0x0UL)
  #define QDEC_SHORTS_SAMPLERDY_READCLRACC_Max (0x1UL)
  #define QDEC_SHORTS_SAMPLERDY_READCLRACC_Disabled (0x0UL)
  #define QDEC_SHORTS_SAMPLERDY_READCLRACC_Enabled (0x1UL)


/* QDEC_INTENSET: Enable interrupt */
  #define QDEC_INTENSET_ResetValue (0x00000000UL)

/* SAMPLERDY @Bit 0 : Write '1' to enable interrupt for event SAMPLERDY */
  #define QDEC_INTENSET_SAMPLERDY_Pos (0UL)
  #define QDEC_INTENSET_SAMPLERDY_Msk (0x1UL << QDEC_INTENSET_SAMPLERDY_Pos)
  #define QDEC_INTENSET_SAMPLERDY_Min (0x0UL)
  #define QDEC_INTENSET_SAMPLERDY_Max (0x1UL)
  #define QDEC_INTENSET_SAMPLERDY_Set (0x1UL)
  #define QDEC_INTENSET_SAMPLERDY_Disabled (0x0UL)
  #define QDEC_INTENSET_SAMPLERDY_Enabled (0x1UL)

/* REPORTRDY @Bit 1 : Write '1' to enable interrupt for event REPORTRDY */
  #define QDEC_INTENSET_REPORTRDY_Pos (1UL)
  #define QDEC_INTENSET_REPORTRDY_Msk (0x1UL << QDEC_INTENSET_REPORTRDY_Pos)
  #define QDEC_INTENSET_REPORTRDY_Min (0x0UL)
  #define QDEC_INTENSET_REPORTRDY_Max (0x1UL)
  #define QDEC_INTENSET_REPORTRDY_Set (0x1UL)
  #define QDEC_INTENSET_REPORTRDY_Disabled (0x0UL)
  #define QDEC_INTENSET_REPORTRDY_Enabled (0x1UL)

/* ACCOF @Bit 2 : Write '1' to enable interrupt for event ACCOF */
  #define QDEC_INTENSET_ACCOF_Pos (2UL)
  #define QDEC_INTENSET_ACCOF_Msk (0x1UL << QDEC_INTENSET_ACCOF_Pos)
  #define QDEC_INTENSET_ACCOF_Min (0x0UL)
  #define QDEC_INTENSET_ACCOF_Max (0x1UL)
  #define QDEC_INTENSET_ACCOF_Set (0x1UL)
  #define QDEC_INTENSET_ACCOF_Disabled (0x0UL)
  #define QDEC_INTENSET_ACCOF_Enabled (0x1UL)

/* DBLRDY @Bit 3 : Write '1' to enable interrupt for event DBLRDY */
  #define QDEC_INTENSET_DBLRDY_Pos (3UL)
  #define QDEC_INTENSET_DBLRDY_Msk (0x1UL << QDEC_INTENSET_DBLRDY_Pos)
  #define QDEC_INTENSET_DBLRDY_Min (0x0UL)
  #define QDEC_INTENSET_DBLRDY_Max (0x1UL)
  #define QDEC_INTENSET_DBLRDY_Set (0x1UL)
  #define QDEC_INTENSET_DBLRDY_Disabled (0x0UL)
  #define QDEC_INTENSET_DBLRDY_Enabled (0x1UL)

/* STOPPED @Bit 4 : Write '1' to enable interrupt for event STOPPED */
  #define QDEC_INTENSET_STOPPED_Pos (4UL)
  #define QDEC_INTENSET_STOPPED_Msk (0x1UL << QDEC_INTENSET_STOPPED_Pos)
  #define QDEC_INTENSET_STOPPED_Min (0x0UL)
  #define QDEC_INTENSET_STOPPED_Max (0x1UL)
  #define QDEC_INTENSET_STOPPED_Set (0x1UL)
  #define QDEC_INTENSET_STOPPED_Disabled (0x0UL)
  #define QDEC_INTENSET_STOPPED_Enabled (0x1UL)


/* QDEC_INTENCLR: Disable interrupt */
  #define QDEC_INTENCLR_ResetValue (0x00000000UL)

/* SAMPLERDY @Bit 0 : Write '1' to disable interrupt for event SAMPLERDY */
  #define QDEC_INTENCLR_SAMPLERDY_Pos (0UL)
  #define QDEC_INTENCLR_SAMPLERDY_Msk (0x1UL << QDEC_INTENCLR_SAMPLERDY_Pos)
  #define QDEC_INTENCLR_SAMPLERDY_Min (0x0UL)
  #define QDEC_INTENCLR_SAMPLERDY_Max (0x1UL)
  #define QDEC_INTENCLR_SAMPLERDY_Clear (0x1UL)
  #define QDEC_INTENCLR_SAMPLERDY_Disabled (0x0UL)
  #define QDEC_INTENCLR_SAMPLERDY_Enabled (0x1UL)

/* REPORTRDY @Bit 1 : Write '1' to disable interrupt for event REPORTRDY */
  #define QDEC_INTENCLR_REPORTRDY_Pos (1UL)
  #define QDEC_INTENCLR_REPORTRDY_Msk (0x1UL << QDEC_INTENCLR_REPORTRDY_Pos)
  #define QDEC_INTENCLR_REPORTRDY_Min (0x0UL)
  #define QDEC_INTENCLR_REPORTRDY_Max (0x1UL)
  #define QDEC_INTENCLR_REPORTRDY_Clear (0x1UL)
  #define QDEC_INTENCLR_REPORTRDY_Disabled (0x0UL)
  #define QDEC_INTENCLR_REPORTRDY_Enabled (0x1UL)

/* ACCOF @Bit 2 : Write '1' to disable interrupt for event ACCOF */
  #define QDEC_INTENCLR_ACCOF_Pos (2UL)
  #define QDEC_INTENCLR_ACCOF_Msk (0x1UL << QDEC_INTENCLR_ACCOF_Pos)
  #define QDEC_INTENCLR_ACCOF_Min (0x0UL)
  #define QDEC_INTENCLR_ACCOF_Max (0x1UL)
  #define QDEC_INTENCLR_ACCOF_Clear (0x1UL)
  #define QDEC_INTENCLR_ACCOF_Disabled (0x0UL)
  #define QDEC_INTENCLR_ACCOF_Enabled (0x1UL)

/* DBLRDY @Bit 3 : Write '1' to disable interrupt for event DBLRDY */
  #define QDEC_INTENCLR_DBLRDY_Pos (3UL)
  #define QDEC_INTENCLR_DBLRDY_Msk (0x1UL << QDEC_INTENCLR_DBLRDY_Pos)
  #define QDEC_INTENCLR_DBLRDY_Min (0x0UL)
  #define QDEC_INTENCLR_DBLRDY_Max (0x1UL)
  #define QDEC_INTENCLR_DBLRDY_Clear (0x1UL)
  #define QDEC_INTENCLR_DBLRDY_Disabled (0x0UL)
  #define QDEC_INTENCLR_DBLRDY_Enabled (0x1UL)

/* STOPPED @Bit 4 : Write '1' to disable interrupt for event STOPPED */
  #define QDEC_INTENCLR_STOPPED_Pos (4UL)
  #define QDEC_INTENCLR_STOPPED_Msk (0x1UL << QDEC_INTENCLR_STOPPED_Pos)
  #define QDEC_INTENCLR_STOPPED_Min (0x0UL)
  #define QDEC_INTENCLR_STOPPED_Max (0x1UL)
  #define QDEC_INTENCLR_STOPPED_Clear (0x1UL)
  #define QDEC_INTENCLR_STOPPED_Disabled (0x0UL)
  #define QDEC_INTENCLR_STOPPED_Enabled (0x1UL)


/* QDEC_ENABLE: Enable the quadrature decoder */
  #define QDEC_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable or disable the quadrature decoder */
  #define QDEC_ENABLE_ENABLE_Pos (0UL)
  #define QDEC_ENABLE_ENABLE_Msk (0x1UL << QDEC_ENABLE_ENABLE_Pos)
  #define QDEC_ENABLE_ENABLE_Min (0x0UL)
  #define QDEC_ENABLE_ENABLE_Max (0x1UL)
  #define QDEC_ENABLE_ENABLE_Disabled (0x0UL)
  #define QDEC_ENABLE_ENABLE_Enabled (0x1UL)


/* QDEC_LEDPOL: LED output pin polarity */
  #define QDEC_LEDPOL_ResetValue (0x00000000UL)

/* LEDPOL @Bit 0 : LED output pin polarity */
  #define QDEC_LEDPOL_LEDPOL_Pos (0UL)
  #define QDEC_LEDPOL_LEDPOL_Msk (0x1UL << QDEC_LEDPOL_LEDPOL_Pos)
  #define QDEC_LEDPOL_LEDPOL_Min (0x0UL)
  #define QDEC_LEDPOL_LEDPOL_Max (0x1UL)
  #define QDEC_LEDPOL_LEDPOL_ActiveLow (0x0UL)
  #define QDEC_LEDPOL_LEDPOL_ActiveHigh (0x1UL)


/* QDEC_SAMPLEPER: Sample period */
  #define QDEC_SAMPLEPER_ResetValue (0x00000000UL)

/* SAMPLEPER @Bits 0..3 : Sample period. The SAMPLE register will be updated for every new sample */
  #define QDEC_SAMPLEPER_SAMPLEPER_Pos (0UL)
  #define QDEC_SAMPLEPER_SAMPLEPER_Msk (0xFUL << QDEC_SAMPLEPER_SAMPLEPER_Pos)
  #define QDEC_SAMPLEPER_SAMPLEPER_Min (0x0UL)
  #define QDEC_SAMPLEPER_SAMPLEPER_Max (0xAUL)
  #define QDEC_SAMPLEPER_SAMPLEPER_128us (0x0UL)
  #define QDEC_SAMPLEPER_SAMPLEPER_256us (0x1UL)
  #define QDEC_SAMPLEPER_SAMPLEPER_512us (0x2UL)
  #define QDEC_SAMPLEPER_SAMPLEPER_1024us (0x3UL)
  #define QDEC_SAMPLEPER_SAMPLEPER_2048us (0x4UL)
  #define QDEC_SAMPLEPER_SAMPLEPER_4096us (0x5UL)
  #define QDEC_SAMPLEPER_SAMPLEPER_8192us (0x6UL)
  #define QDEC_SAMPLEPER_SAMPLEPER_16384us (0x7UL)
  #define QDEC_SAMPLEPER_SAMPLEPER_32ms (0x8UL)
  #define QDEC_SAMPLEPER_SAMPLEPER_65ms (0x9UL)
  #define QDEC_SAMPLEPER_SAMPLEPER_131ms (0xAUL)


/* QDEC_SAMPLE: Motion sample value */
  #define QDEC_SAMPLE_ResetValue (0x00000000UL)

/* SAMPLE @Bits 0..31 : Last motion sample */
  #define QDEC_SAMPLE_SAMPLE_Pos (0UL)
  #define QDEC_SAMPLE_SAMPLE_Msk (0xFFFFFFFFUL << QDEC_SAMPLE_SAMPLE_Pos)
  #define QDEC_SAMPLE_SAMPLE_Min (0xFFFFFFFFUL)
  #define QDEC_SAMPLE_SAMPLE_Max (0x00000002UL)


/* QDEC_REPORTPER: Number of samples to be taken before REPORTRDY and DBLRDY events can be generated */
  #define QDEC_REPORTPER_ResetValue (0x00000000UL)

/* REPORTPER @Bits 0..3 : Specifies the number of samples to be accumulated in the ACC register before the REPORTRDY and DBLRDY
                          events can be generated. */

  #define QDEC_REPORTPER_REPORTPER_Pos (0UL)
  #define QDEC_REPORTPER_REPORTPER_Msk (0xFUL << QDEC_REPORTPER_REPORTPER_Pos)
  #define QDEC_REPORTPER_REPORTPER_Min (0x0UL)
  #define QDEC_REPORTPER_REPORTPER_Max (0x8UL)
  #define QDEC_REPORTPER_REPORTPER_10Smpl (0x0UL)
  #define QDEC_REPORTPER_REPORTPER_40Smpl (0x1UL)
  #define QDEC_REPORTPER_REPORTPER_80Smpl (0x2UL)
  #define QDEC_REPORTPER_REPORTPER_120Smpl (0x3UL)
  #define QDEC_REPORTPER_REPORTPER_160Smpl (0x4UL)
  #define QDEC_REPORTPER_REPORTPER_200Smpl (0x5UL)
  #define QDEC_REPORTPER_REPORTPER_240Smpl (0x6UL)
  #define QDEC_REPORTPER_REPORTPER_280Smpl (0x7UL)
  #define QDEC_REPORTPER_REPORTPER_1Smpl (0x8UL)


/* QDEC_ACC: Register accumulating the valid transitions */
  #define QDEC_ACC_ResetValue (0x00000000UL)

/* ACC @Bits 0..31 : Register accumulating all valid samples (not double transition) read from the SAMPLE register. */
  #define QDEC_ACC_ACC_Pos (0UL)
  #define QDEC_ACC_ACC_Msk (0xFFFFFFFFUL << QDEC_ACC_ACC_Pos)
  #define QDEC_ACC_ACC_Min (0xFFFFFC00UL)
  #define QDEC_ACC_ACC_Max (0x000003FFUL)


/* QDEC_ACCREAD: Snapshot of the ACC register, updated by the READCLRACC or RDCLRACC task */
  #define QDEC_ACCREAD_ResetValue (0x00000000UL)

/* ACCREAD @Bits 0..31 : Snapshot of the ACC register. */
  #define QDEC_ACCREAD_ACCREAD_Pos (0UL)
  #define QDEC_ACCREAD_ACCREAD_Msk (0xFFFFFFFFUL << QDEC_ACCREAD_ACCREAD_Pos)
  #define QDEC_ACCREAD_ACCREAD_Min (0xFFFFFC00UL)
  #define QDEC_ACCREAD_ACCREAD_Max (0x000003FFUL)


/* QDEC_DBFEN: Enable input debounce filters */
  #define QDEC_DBFEN_ResetValue (0x00000000UL)

/* DBFEN @Bit 0 : Enable input debounce filters */
  #define QDEC_DBFEN_DBFEN_Pos (0UL)
  #define QDEC_DBFEN_DBFEN_Msk (0x1UL << QDEC_DBFEN_DBFEN_Pos)
  #define QDEC_DBFEN_DBFEN_Min (0x0UL)
  #define QDEC_DBFEN_DBFEN_Max (0x1UL)
  #define QDEC_DBFEN_DBFEN_Disabled (0x0UL)
  #define QDEC_DBFEN_DBFEN_Enabled (0x1UL)


/* QDEC_LEDPRE: Time period the LED is switched ON prior to sampling */
  #define QDEC_LEDPRE_ResetValue (0x00000010UL)

/* LEDPRE @Bits 0..8 : Period in us the LED is switched on prior to sampling */
  #define QDEC_LEDPRE_LEDPRE_Pos (0UL)
  #define QDEC_LEDPRE_LEDPRE_Msk (0x1FFUL << QDEC_LEDPRE_LEDPRE_Pos)
  #define QDEC_LEDPRE_LEDPRE_Min (0x001UL)
  #define QDEC_LEDPRE_LEDPRE_Max (0x1FFUL)


/* QDEC_ACCDBL: Register accumulating the number of detected double transitions */
  #define QDEC_ACCDBL_ResetValue (0x00000000UL)

/* ACCDBL @Bits 0..3 : Register accumulating the number of detected double or illegal transitions. ( SAMPLE = 2 ). */
  #define QDEC_ACCDBL_ACCDBL_Pos (0UL)
  #define QDEC_ACCDBL_ACCDBL_Msk (0xFUL << QDEC_ACCDBL_ACCDBL_Pos)
  #define QDEC_ACCDBL_ACCDBL_Min (0x0UL)
  #define QDEC_ACCDBL_ACCDBL_Max (0xFUL)


/* QDEC_ACCDBLREAD: Snapshot of the ACCDBL, updated by the READCLRACC or RDCLRDBL task */
  #define QDEC_ACCDBLREAD_ResetValue (0x00000000UL)

/* ACCDBLREAD @Bits 0..3 : Snapshot of the ACCDBL register. This field is updated when the READCLRACC or RDCLRDBL task is
                           triggered. */

  #define QDEC_ACCDBLREAD_ACCDBLREAD_Pos (0UL)
  #define QDEC_ACCDBLREAD_ACCDBLREAD_Msk (0xFUL << QDEC_ACCDBLREAD_ACCDBLREAD_Pos)
  #define QDEC_ACCDBLREAD_ACCDBLREAD_Min (0x0UL)
  #define QDEC_ACCDBLREAD_ACCDBLREAD_Max (0xFUL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           QSPI                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* =========================================== Struct QSPI_EVENTS_DMA_EVENTS_DONE ============================================ */
/**
  * @brief EVENTS_DONE [QSPI_EVENTS_DMA_EVENTS_DONE] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  LIST;
  __IOM uint32_t  LISTPART;                          /*!< (@ 0x00000004) Descriptor list is partially complete. Threshold in
                                                                         CONFIG.LISTPARTTHRESH register has been passed.*/
  __IOM uint32_t  SELECTJOB;                         /*!< (@ 0x00000008) Selected job is completed. Selection is done via
                                                                         CONFIG.SELECTJOBENABLE.*/
  __IOM uint32_t  DATA;                              /*!< (@ 0x0000000C) A job has been completed, i.e. the job's data has been
                                                                         completely transferred either to AXI or DMA bus,
                                                                         depending on direction.*/
  __IOM uint32_t  JOB;
} NRF_QSPI_EVENTS_DMA_EVENTS_DONE_Type;

/* QSPI_EVENTS_DMA_EVENTS_DONE_LIST: Descriptor list is complete. */
  #define QSPI_EVENTS_DMA_EVENTS_DONE_LIST_ResetValue (0x00000000UL)

/* LIST @Bit 0 : Descriptor list is complete. */
  #define QSPI_EVENTS_DMA_EVENTS_DONE_LIST_LIST_Pos (0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_LIST_LIST_Msk (0x1UL << QSPI_EVENTS_DMA_EVENTS_DONE_LIST_LIST_Pos) /*!< Bit mask of LIST
                                                                            field.*/
  #define QSPI_EVENTS_DMA_EVENTS_DONE_LIST_LIST_Min (0x0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_LIST_LIST_Max (0x1UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_LIST_LIST_NotGenerated (0x0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_LIST_LIST_Generated (0x1UL)


/* QSPI_EVENTS_DMA_EVENTS_DONE_LISTPART: Descriptor list is partially complete. Threshold in CONFIG.LISTPARTTHRESH register has
                                          been passed. */

  #define QSPI_EVENTS_DMA_EVENTS_DONE_LISTPART_ResetValue (0x00000000UL)

/* LISTPART @Bit 0 : Descriptor list is partially complete. Threshold in CONFIG.LISTPARTTHRESH register has been passed. */
  #define QSPI_EVENTS_DMA_EVENTS_DONE_LISTPART_LISTPART_Pos (0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_LISTPART_LISTPART_Msk (0x1UL << QSPI_EVENTS_DMA_EVENTS_DONE_LISTPART_LISTPART_Pos) /*!<
                                                                            Bit mask of LISTPART field.*/
  #define QSPI_EVENTS_DMA_EVENTS_DONE_LISTPART_LISTPART_Min (0x0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_LISTPART_LISTPART_Max (0x1UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_LISTPART_LISTPART_NotGenerated (0x0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_LISTPART_LISTPART_Generated (0x1UL)


/* QSPI_EVENTS_DMA_EVENTS_DONE_SELECTJOB: Selected job is completed. Selection is done via CONFIG.SELECTJOBENABLE. */
  #define QSPI_EVENTS_DMA_EVENTS_DONE_SELECTJOB_ResetValue (0x00000000UL)

/* SELECTJOB @Bit 0 : Selected job is completed. Selection is done via CONFIG.SELECTJOBENABLE. */
  #define QSPI_EVENTS_DMA_EVENTS_DONE_SELECTJOB_SELECTJOB_Pos (0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_SELECTJOB_SELECTJOB_Msk (0x1UL << QSPI_EVENTS_DMA_EVENTS_DONE_SELECTJOB_SELECTJOB_Pos)
                                                                            /*!< Bit mask of SELECTJOB field.*/
  #define QSPI_EVENTS_DMA_EVENTS_DONE_SELECTJOB_SELECTJOB_Min (0x0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_SELECTJOB_SELECTJOB_Max (0x1UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_SELECTJOB_SELECTJOB_NotGenerated (0x0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_SELECTJOB_SELECTJOB_Generated (0x1UL)


/* QSPI_EVENTS_DMA_EVENTS_DONE_DATA: A job has been completed, i.e. the job's data has been completely transferred either to AXI
                                      or DMA bus, depending on direction. */

  #define QSPI_EVENTS_DMA_EVENTS_DONE_DATA_ResetValue (0x00000000UL)

/* DATA @Bit 0 : A job has been completed, i.e. the job's data has been completely transferred either to AXI or DMA bus,
                 depending on direction. */

  #define QSPI_EVENTS_DMA_EVENTS_DONE_DATA_DATA_Pos (0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_DATA_DATA_Msk (0x1UL << QSPI_EVENTS_DMA_EVENTS_DONE_DATA_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/
  #define QSPI_EVENTS_DMA_EVENTS_DONE_DATA_DATA_Min (0x0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_DATA_DATA_Max (0x1UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_DATA_DATA_NotGenerated (0x0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_DATA_DATA_Generated (0x1UL)


/* QSPI_EVENTS_DMA_EVENTS_DONE_JOB: A job has been fetched from the joblist. */
  #define QSPI_EVENTS_DMA_EVENTS_DONE_JOB_ResetValue (0x00000000UL)

/* JOB @Bit 0 : A job has been fetched from the joblist. */
  #define QSPI_EVENTS_DMA_EVENTS_DONE_JOB_JOB_Pos (0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_JOB_JOB_Msk (0x1UL << QSPI_EVENTS_DMA_EVENTS_DONE_JOB_JOB_Pos) /*!< Bit mask of JOB
                                                                            field.*/
  #define QSPI_EVENTS_DMA_EVENTS_DONE_JOB_JOB_Min (0x0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_JOB_JOB_Max (0x1UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_JOB_JOB_NotGenerated (0x0UL)
  #define QSPI_EVENTS_DMA_EVENTS_DONE_JOB_JOB_Generated (0x1UL)



/* ================================================= Struct QSPI_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [QSPI_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_QSPI_EVENTS_DMA_EVENTS_DONE_Type EVENTS_DONE;
  __IOM uint32_t  ERROR;
  __IOM uint32_t  PAUSED;
  __IOM uint32_t  RESET;
  __IOM uint32_t  DONE;
  __IOM uint32_t  TXUNEXPECTEDIDLE;                  /*!< (@ 0x00000024) The QSPI core has gone into idle state at an unexpected
                                                                         time, this can happen if the TX buffer underflows, this
                                                                         event is followed by either DONE or ABORTED event.*/
  __IOM uint32_t  INTERNALBUSERROR;                  /*!< (@ 0x00000028) An error occured during the transfer of data internally
                                                                         in the QSPI, followed by either DONE or ABORTED event.*/
  __IOM uint32_t  ABORTED;                           /*!< (@ 0x0000002C) The QSPI DMA has aborted due to an error given in a
                                                                         separate event, and has attempted to complete any
                                                                         ongoing transactions, and stopped. The QSPI DMA is
                                                                         ready for a new transaction.*/
} NRF_QSPI_EVENTS_DMA_Type;

/* QSPI_EVENTS_DMA_ERROR: AXI bus error received. */
  #define QSPI_EVENTS_DMA_ERROR_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : AXI bus error received. */
  #define QSPI_EVENTS_DMA_ERROR_ERROR_Pos (0UL)
  #define QSPI_EVENTS_DMA_ERROR_ERROR_Msk (0x1UL << QSPI_EVENTS_DMA_ERROR_ERROR_Pos)
  #define QSPI_EVENTS_DMA_ERROR_ERROR_Min (0x0UL)
  #define QSPI_EVENTS_DMA_ERROR_ERROR_Max (0x1UL)
  #define QSPI_EVENTS_DMA_ERROR_ERROR_NotGenerated (0x0UL)
  #define QSPI_EVENTS_DMA_ERROR_ERROR_Generated (0x1UL)


/* QSPI_EVENTS_DMA_PAUSED: DMA paused with task TASKS_PAUSE. */
  #define QSPI_EVENTS_DMA_PAUSED_ResetValue (0x00000000UL)

/* PAUSED @Bit 0 : DMA paused with task TASKS_PAUSE. */
  #define QSPI_EVENTS_DMA_PAUSED_PAUSED_Pos (0UL)
  #define QSPI_EVENTS_DMA_PAUSED_PAUSED_Msk (0x1UL << QSPI_EVENTS_DMA_PAUSED_PAUSED_Pos)
  #define QSPI_EVENTS_DMA_PAUSED_PAUSED_Min (0x0UL)
  #define QSPI_EVENTS_DMA_PAUSED_PAUSED_Max (0x1UL)
  #define QSPI_EVENTS_DMA_PAUSED_PAUSED_NotGenerated (0x0UL)
  #define QSPI_EVENTS_DMA_PAUSED_PAUSED_Generated (0x1UL)


/* QSPI_EVENTS_DMA_RESET: DMA reset with task TASKS_RESET. */
  #define QSPI_EVENTS_DMA_RESET_ResetValue (0x00000000UL)

/* RESET @Bit 0 : DMA reset with task TASKS_RESET. */
  #define QSPI_EVENTS_DMA_RESET_RESET_Pos (0UL)
  #define QSPI_EVENTS_DMA_RESET_RESET_Msk (0x1UL << QSPI_EVENTS_DMA_RESET_RESET_Pos)
  #define QSPI_EVENTS_DMA_RESET_RESET_Min (0x0UL)
  #define QSPI_EVENTS_DMA_RESET_RESET_Max (0x1UL)
  #define QSPI_EVENTS_DMA_RESET_RESET_NotGenerated (0x0UL)
  #define QSPI_EVENTS_DMA_RESET_RESET_Generated (0x1UL)


/* QSPI_EVENTS_DMA_DONE: DMA transfer done */
  #define QSPI_EVENTS_DMA_DONE_ResetValue (0x00000000UL)

/* DONE @Bit 0 : DMA transfer done */
  #define QSPI_EVENTS_DMA_DONE_DONE_Pos (0UL)
  #define QSPI_EVENTS_DMA_DONE_DONE_Msk (0x1UL << QSPI_EVENTS_DMA_DONE_DONE_Pos)
  #define QSPI_EVENTS_DMA_DONE_DONE_Min (0x0UL)
  #define QSPI_EVENTS_DMA_DONE_DONE_Max (0x1UL)
  #define QSPI_EVENTS_DMA_DONE_DONE_NotGenerated (0x0UL)
  #define QSPI_EVENTS_DMA_DONE_DONE_Generated (0x1UL)


/* QSPI_EVENTS_DMA_TXUNEXPECTEDIDLE: The QSPI core has gone into idle state at an unexpected time, this can happen if the TX
                                      buffer underflows, this event is followed by either DONE or ABORTED event. */

  #define QSPI_EVENTS_DMA_TXUNEXPECTEDIDLE_ResetValue (0x00000000UL)

/* TXUNEXPECTEDIDLE @Bit 0 : The QSPI core has gone into idle state at an unexpected time, this can happen if the TX buffer
                             underflows, this event is followed by either DONE or ABORTED event. */

  #define QSPI_EVENTS_DMA_TXUNEXPECTEDIDLE_TXUNEXPECTEDIDLE_Pos (0UL)
  #define QSPI_EVENTS_DMA_TXUNEXPECTEDIDLE_TXUNEXPECTEDIDLE_Msk (0x1UL << QSPI_EVENTS_DMA_TXUNEXPECTEDIDLE_TXUNEXPECTEDIDLE_Pos)
                                                                            /*!< Bit mask of TXUNEXPECTEDIDLE field.*/
  #define QSPI_EVENTS_DMA_TXUNEXPECTEDIDLE_TXUNEXPECTEDIDLE_Min (0x0UL)
  #define QSPI_EVENTS_DMA_TXUNEXPECTEDIDLE_TXUNEXPECTEDIDLE_Max (0x1UL)
  #define QSPI_EVENTS_DMA_TXUNEXPECTEDIDLE_TXUNEXPECTEDIDLE_NotGenerated (0x0UL)
  #define QSPI_EVENTS_DMA_TXUNEXPECTEDIDLE_TXUNEXPECTEDIDLE_Generated (0x1UL)


/* QSPI_EVENTS_DMA_INTERNALBUSERROR: An error occured during the transfer of data internally in the QSPI, followed by either
                                      DONE or ABORTED event. */

  #define QSPI_EVENTS_DMA_INTERNALBUSERROR_ResetValue (0x00000000UL)

/* INTERNALBUSERROR @Bit 0 : An error occured during the transfer of data internally in the QSPI, followed by either DONE or
                             ABORTED event. */

  #define QSPI_EVENTS_DMA_INTERNALBUSERROR_INTERNALBUSERROR_Pos (0UL)
  #define QSPI_EVENTS_DMA_INTERNALBUSERROR_INTERNALBUSERROR_Msk (0x1UL << QSPI_EVENTS_DMA_INTERNALBUSERROR_INTERNALBUSERROR_Pos)
                                                                            /*!< Bit mask of INTERNALBUSERROR field.*/
  #define QSPI_EVENTS_DMA_INTERNALBUSERROR_INTERNALBUSERROR_Min (0x0UL)
  #define QSPI_EVENTS_DMA_INTERNALBUSERROR_INTERNALBUSERROR_Max (0x1UL)
  #define QSPI_EVENTS_DMA_INTERNALBUSERROR_INTERNALBUSERROR_NotGenerated (0x0UL)
  #define QSPI_EVENTS_DMA_INTERNALBUSERROR_INTERNALBUSERROR_Generated (0x1UL)


/* QSPI_EVENTS_DMA_ABORTED: The QSPI DMA has aborted due to an error given in a separate event, and has attempted to complete
                             any ongoing transactions, and stopped. The QSPI DMA is ready for a new transaction. */

  #define QSPI_EVENTS_DMA_ABORTED_ResetValue (0x00000000UL)

/* ABORTED @Bit 0 : The QSPI DMA has aborted due to an error given in a separate event, and has attempted to complete any
                    ongoing transactions, and stopped. The QSPI DMA is ready for a new transaction. */

  #define QSPI_EVENTS_DMA_ABORTED_ABORTED_Pos (0UL)
  #define QSPI_EVENTS_DMA_ABORTED_ABORTED_Msk (0x1UL << QSPI_EVENTS_DMA_ABORTED_ABORTED_Pos)
  #define QSPI_EVENTS_DMA_ABORTED_ABORTED_Min (0x0UL)
  #define QSPI_EVENTS_DMA_ABORTED_ABORTED_Max (0x1UL)
  #define QSPI_EVENTS_DMA_ABORTED_ABORTED_NotGenerated (0x0UL)
  #define QSPI_EVENTS_DMA_ABORTED_ABORTED_Generated (0x1UL)



/* =================================================== Struct QSPI_CONFIG ==================================================== */
/**
  * @brief CONFIG [QSPI_CONFIG] (unspecified)
  */
typedef struct {
  __IOM uint32_t  TXBURSTLENGTH;
  __IOM uint32_t  RXBURSTLENGTH;
  __IOM uint32_t  RXTRANSFERLENGTH;
  __IOM uint32_t  STOPON;                            /*!< (@ 0x0000000C) Stop the DMA if the CORE goes into any of the enabled
                                                                         states.*/
} NRF_QSPI_CONFIG_Type;

/* QSPI_CONFIG_TXBURSTLENGTH: Transmit burst length */
  #define QSPI_CONFIG_TXBURSTLENGTH_ResetValue (0x00000008UL)

/* AMOUNT @Bits 0..4 : Number of buffer lines */
  #define QSPI_CONFIG_TXBURSTLENGTH_AMOUNT_Pos (0UL)
  #define QSPI_CONFIG_TXBURSTLENGTH_AMOUNT_Msk (0x1FUL << QSPI_CONFIG_TXBURSTLENGTH_AMOUNT_Pos)


/* QSPI_CONFIG_RXBURSTLENGTH: Receive burst length */
  #define QSPI_CONFIG_RXBURSTLENGTH_ResetValue (0x00000008UL)

/* AMOUNT @Bits 0..4 : Number of buffer lines */
  #define QSPI_CONFIG_RXBURSTLENGTH_AMOUNT_Pos (0UL)
  #define QSPI_CONFIG_RXBURSTLENGTH_AMOUNT_Msk (0x1FUL << QSPI_CONFIG_RXBURSTLENGTH_AMOUNT_Pos)


/* QSPI_CONFIG_RXTRANSFERLENGTH: Receive transfer full length */
  #define QSPI_CONFIG_RXTRANSFERLENGTH_ResetValue (0x00000010UL)

/* AMOUNT @Bits 0..17 : Number of buffer lines */
  #define QSPI_CONFIG_RXTRANSFERLENGTH_AMOUNT_Pos (0UL)
  #define QSPI_CONFIG_RXTRANSFERLENGTH_AMOUNT_Msk (0x3FFFFUL << QSPI_CONFIG_RXTRANSFERLENGTH_AMOUNT_Pos) /*!< Bit mask of AMOUNT
                                                                            field.*/


/* QSPI_CONFIG_STOPON: Stop the DMA if the CORE goes into any of the enabled states. */
  #define QSPI_CONFIG_STOPON_ResetValue (0x00000003UL)

/* TXUNEXPECTEDIDLE @Bit 0 : The CORE will go into idle if the CORE buffer is emptied, if the DMA still has data to transfer the
                             CORE is not expected to go into idle state. This constitutes a buffer underflow. The CORE migth
                             also go into idle if an error occurs. */

  #define QSPI_CONFIG_STOPON_TXUNEXPECTEDIDLE_Pos (0UL)
  #define QSPI_CONFIG_STOPON_TXUNEXPECTEDIDLE_Msk (0x1UL << QSPI_CONFIG_STOPON_TXUNEXPECTEDIDLE_Pos) /*!< Bit mask of
                                                                            TXUNEXPECTEDIDLE field.*/
  #define QSPI_CONFIG_STOPON_TXUNEXPECTEDIDLE_Min (0x0UL)
  #define QSPI_CONFIG_STOPON_TXUNEXPECTEDIDLE_Max (0x1UL)
  #define QSPI_CONFIG_STOPON_TXUNEXPECTEDIDLE_Disabled (0x0UL)
  #define QSPI_CONFIG_STOPON_TXUNEXPECTEDIDLE_Enabled (0x1UL)

/* RXOVERFLOW @Bit 1 : This condition occurrs if the DMA attempts to write to the RX buffer in the CORE, but the buffer is full.
                       When this bit is enabled the DMA will stop when the CORE buffer experiences a rx buffer overflow */

  #define QSPI_CONFIG_STOPON_RXOVERFLOW_Pos (1UL)
  #define QSPI_CONFIG_STOPON_RXOVERFLOW_Msk (0x1UL << QSPI_CONFIG_STOPON_RXOVERFLOW_Pos)
  #define QSPI_CONFIG_STOPON_RXOVERFLOW_Min (0x0UL)
  #define QSPI_CONFIG_STOPON_RXOVERFLOW_Max (0x1UL)
  #define QSPI_CONFIG_STOPON_RXOVERFLOW_Disabled (0x0UL)
  #define QSPI_CONFIG_STOPON_RXOVERFLOW_Enabled (0x1UL)

/* INTERNALBUSERROR @Bit 2 : Terminate the transaction if a INTERNALBUSERROR event is detected. */
  #define QSPI_CONFIG_STOPON_INTERNALBUSERROR_Pos (2UL)
  #define QSPI_CONFIG_STOPON_INTERNALBUSERROR_Msk (0x1UL << QSPI_CONFIG_STOPON_INTERNALBUSERROR_Pos) /*!< Bit mask of
                                                                            INTERNALBUSERROR field.*/
  #define QSPI_CONFIG_STOPON_INTERNALBUSERROR_Min (0x0UL)
  #define QSPI_CONFIG_STOPON_INTERNALBUSERROR_Max (0x1UL)
  #define QSPI_CONFIG_STOPON_INTERNALBUSERROR_Disabled (0x0UL)
  #define QSPI_CONFIG_STOPON_INTERNALBUSERROR_Enabled (0x1UL)

/* DMABUSERROR @Bit 3 : Terminate the transaction if a DMA.ERROR event is detected. */
  #define QSPI_CONFIG_STOPON_DMABUSERROR_Pos (3UL)
  #define QSPI_CONFIG_STOPON_DMABUSERROR_Msk (0x1UL << QSPI_CONFIG_STOPON_DMABUSERROR_Pos)
  #define QSPI_CONFIG_STOPON_DMABUSERROR_Min (0x0UL)
  #define QSPI_CONFIG_STOPON_DMABUSERROR_Max (0x1UL)
  #define QSPI_CONFIG_STOPON_DMABUSERROR_Disabled (0x0UL)
  #define QSPI_CONFIG_STOPON_DMABUSERROR_Enabled (0x1UL)



/* =================================================== Struct QSPI_FORMAT ==================================================== */
/**
  * @brief FORMAT [QSPI_FORMAT] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DFS;
  __IOM uint32_t  BPP;
  __IOM uint32_t  PIXELS;
  __IOM uint32_t  CILEN;
} NRF_QSPI_FORMAT_Type;

/* QSPI_FORMAT_DFS: Data frame size */
  #define QSPI_FORMAT_DFS_ResetValue (0x00000000UL)

/* DFS @Bits 0..5 : (unspecified) */
  #define QSPI_FORMAT_DFS_DFS_Pos (0UL)
  #define QSPI_FORMAT_DFS_DFS_Msk (0x3FUL << QSPI_FORMAT_DFS_DFS_Pos)


/* QSPI_FORMAT_BPP: Bits per pixel */
  #define QSPI_FORMAT_BPP_ResetValue (0x00000000UL)

/* BPP @Bits 0..5 : (unspecified) */
  #define QSPI_FORMAT_BPP_BPP_Pos (0UL)
  #define QSPI_FORMAT_BPP_BPP_Msk (0x3FUL << QSPI_FORMAT_BPP_BPP_Pos)
  #define QSPI_FORMAT_BPP_BPP_Min (0x0UL)
  #define QSPI_FORMAT_BPP_BPP_Max (0x10UL)
  #define QSPI_FORMAT_BPP_BPP_0 (0x00UL)
  #define QSPI_FORMAT_BPP_BPP_4 (0x04UL)
  #define QSPI_FORMAT_BPP_BPP_8 (0x08UL)
  #define QSPI_FORMAT_BPP_BPP_16 (0x10UL)


/* QSPI_FORMAT_PIXELS: Number of pixels following the command */
  #define QSPI_FORMAT_PIXELS_ResetValue (0x00000000UL)

/* PIXELS @Bits 0..17 : Number of pixels */
  #define QSPI_FORMAT_PIXELS_PIXELS_Pos (0UL)
  #define QSPI_FORMAT_PIXELS_PIXELS_Msk (0x3FFFFUL << QSPI_FORMAT_PIXELS_PIXELS_Pos)


/* QSPI_FORMAT_CILEN: Command/Instruction length */
  #define QSPI_FORMAT_CILEN_ResetValue (0x00000000UL)

/* CILEN @Bits 0..1 : Number of words */
  #define QSPI_FORMAT_CILEN_CILEN_Pos (0UL)
  #define QSPI_FORMAT_CILEN_CILEN_Msk (0x3UL << QSPI_FORMAT_CILEN_CILEN_Pos)



/* ================================================= Struct QSPI_DMA_STATUS ================================================== */
/**
  * @brief STATUS [QSPI_DMA_STATUS] EasyVDMA status registers.
  */
typedef struct {
  __IM  uint32_t  BYTECOUNT;                         /*!< (@ 0x00000000) Number of bytes sent or received during processing of
                                                                         current descriptor list*/
  __IM  uint32_t  ATTRIBUTE;
  __IM  uint32_t  ADDRESS;
  __IM  uint32_t  JOBCOUNT;
  __IM  uint32_t  BUSERROR;
  __IM  uint32_t  FIFO;
  __IM  uint32_t  ACTIVE;
} NRF_QSPI_DMA_STATUS_Type;

/* QSPI_DMA_STATUS_BYTECOUNT: Number of bytes sent or received during processing of current descriptor list */
  #define QSPI_DMA_STATUS_BYTECOUNT_ResetValue (0x00000000UL)

/* BYTECOUNT @Bits 0..31 : Number of bytes sent or received during processing of current descriptor list */
  #define QSPI_DMA_STATUS_BYTECOUNT_BYTECOUNT_Pos (0UL)
  #define QSPI_DMA_STATUS_BYTECOUNT_BYTECOUNT_Msk (0xFFFFFFFFUL << QSPI_DMA_STATUS_BYTECOUNT_BYTECOUNT_Pos) /*!< Bit mask of
                                                                            BYTECOUNT field.*/


/* QSPI_DMA_STATUS_ATTRIBUTE: Latest job attribute being processed. */
  #define QSPI_DMA_STATUS_ATTRIBUTE_ResetValue (0x00000000UL)

/* ATTRIBUTE @Bits 0..5 : Latest job attribute being processed. */
  #define QSPI_DMA_STATUS_ATTRIBUTE_ATTRIBUTE_Pos (0UL)
  #define QSPI_DMA_STATUS_ATTRIBUTE_ATTRIBUTE_Msk (0x3FUL << QSPI_DMA_STATUS_ATTRIBUTE_ATTRIBUTE_Pos) /*!< Bit mask of ATTRIBUTE
                                                                            field.*/


/* QSPI_DMA_STATUS_ADDRESS: Latest address being accessed. */
  #define QSPI_DMA_STATUS_ADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Latest address being accessed. */
  #define QSPI_DMA_STATUS_ADDRESS_ADDRESS_Pos (0UL)
  #define QSPI_DMA_STATUS_ADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << QSPI_DMA_STATUS_ADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/


/* QSPI_DMA_STATUS_JOBCOUNT: Number of completed jobs in current descriptor list. */
  #define QSPI_DMA_STATUS_JOBCOUNT_ResetValue (0x00000000UL)

/* JOBCOUNT @Bits 0..31 : Number of completed jobs in current descriptor list. */
  #define QSPI_DMA_STATUS_JOBCOUNT_JOBCOUNT_Pos (0UL)
  #define QSPI_DMA_STATUS_JOBCOUNT_JOBCOUNT_Msk (0xFFFFFFFFUL << QSPI_DMA_STATUS_JOBCOUNT_JOBCOUNT_Pos) /*!< Bit mask of
                                                                            JOBCOUNT field.*/


/* QSPI_DMA_STATUS_BUSERROR: AXI bus error status. */
  #define QSPI_DMA_STATUS_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bits 0..2 : AXI bus error type */
  #define QSPI_DMA_STATUS_BUSERROR_BUSERROR_Pos (0UL)
  #define QSPI_DMA_STATUS_BUSERROR_BUSERROR_Msk (0x7UL << QSPI_DMA_STATUS_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define QSPI_DMA_STATUS_BUSERROR_BUSERROR_Min (0x0UL)
  #define QSPI_DMA_STATUS_BUSERROR_BUSERROR_Max (0x4UL)
  #define QSPI_DMA_STATUS_BUSERROR_BUSERROR_NoError (0x0UL)
  #define QSPI_DMA_STATUS_BUSERROR_BUSERROR_ReadError (0x1UL) /*!< Error related to memory when reading joblist, or error
                                                                   related to memory/register when reading data.*/
  #define QSPI_DMA_STATUS_BUSERROR_BUSERROR_ReadDecodeError (0x2UL) /*!< Error related to the joblist address when reading
                                                                         joblist, or error related to address when reading
                                                                         memory/register.*/
  #define QSPI_DMA_STATUS_BUSERROR_BUSERROR_WriteError (0x3UL)
  #define QSPI_DMA_STATUS_BUSERROR_BUSERROR_WriteDecodeError (0x4UL) /*!< Error related to the memory/register address when
                                                                          writing data.*/


/* QSPI_DMA_STATUS_FIFO: Data fifo status. */
  #define QSPI_DMA_STATUS_FIFO_ResetValue (0x00000000UL)

/* RXFIFO @Bits 0..1 : Memory-to-Peripheral direction data fifo status */
  #define QSPI_DMA_STATUS_FIFO_RXFIFO_Pos (0UL)
  #define QSPI_DMA_STATUS_FIFO_RXFIFO_Msk (0x3UL << QSPI_DMA_STATUS_FIFO_RXFIFO_Pos)
  #define QSPI_DMA_STATUS_FIFO_RXFIFO_Min (0x0UL)
  #define QSPI_DMA_STATUS_FIFO_RXFIFO_Max (0x2UL)
  #define QSPI_DMA_STATUS_FIFO_RXFIFO_Empty (0x0UL)
  #define QSPI_DMA_STATUS_FIFO_RXFIFO_NotEmpty (0x1UL)
  #define QSPI_DMA_STATUS_FIFO_RXFIFO_Full (0x2UL)

/* TXFIFO @Bits 2..3 : Peripheral-to-Memory direction data fifo status */
  #define QSPI_DMA_STATUS_FIFO_TXFIFO_Pos (2UL)
  #define QSPI_DMA_STATUS_FIFO_TXFIFO_Msk (0x3UL << QSPI_DMA_STATUS_FIFO_TXFIFO_Pos)
  #define QSPI_DMA_STATUS_FIFO_TXFIFO_Min (0x0UL)
  #define QSPI_DMA_STATUS_FIFO_TXFIFO_Max (0x2UL)
  #define QSPI_DMA_STATUS_FIFO_TXFIFO_Empty (0x0UL)
  #define QSPI_DMA_STATUS_FIFO_TXFIFO_NotEmpty (0x1UL)
  #define QSPI_DMA_STATUS_FIFO_TXFIFO_Full (0x2UL)


/* QSPI_DMA_STATUS_ACTIVE: DMA activity state. */
  #define QSPI_DMA_STATUS_ACTIVE_ResetValue (0x00000000UL)

/* ACTIVE @Bit 0 : DMA activity state. */
  #define QSPI_DMA_STATUS_ACTIVE_ACTIVE_Pos (0UL)
  #define QSPI_DMA_STATUS_ACTIVE_ACTIVE_Msk (0x1UL << QSPI_DMA_STATUS_ACTIVE_ACTIVE_Pos)
  #define QSPI_DMA_STATUS_ACTIVE_ACTIVE_Min (0x0UL)
  #define QSPI_DMA_STATUS_ACTIVE_ACTIVE_Max (0x1UL)
  #define QSPI_DMA_STATUS_ACTIVE_ACTIVE_Idle (0x0UL)
  #define QSPI_DMA_STATUS_ACTIVE_ACTIVE_Active (0x1UL)



/* ================================================= Struct QSPI_DMA_CONFIG ================================================== */
/**
  * @brief CONFIG [QSPI_DMA_CONFIG] General config registers
  */
typedef struct {
  __IOM uint32_t  BUFFERFILL;                        /*!< (@ 0x00000000) Data to be used when data is sent with BufferFill
                                                                         attribute*/
  __IOM uint32_t  LISTPTR;
  __IOM uint32_t  LISTPARTTHRESH;                    /*!< (@ 0x00000008) Threshold value for generating event
                                                                         EVENTS_DONE.PARTLIST when descriptor list is partially
                                                                         completed. Value is number of jobs.*/
} NRF_QSPI_DMA_CONFIG_Type;

/* QSPI_DMA_CONFIG_BUFFERFILL: Data to be used when data is sent with BufferFill attribute */
  #define QSPI_DMA_CONFIG_BUFFERFILL_ResetValue (0x00000000UL)

/* BUFFERFILL @Bits 0..7 : Data to be used when data is sent with BufferFill attribute */
  #define QSPI_DMA_CONFIG_BUFFERFILL_BUFFERFILL_Pos (0UL)
  #define QSPI_DMA_CONFIG_BUFFERFILL_BUFFERFILL_Msk (0xFFUL << QSPI_DMA_CONFIG_BUFFERFILL_BUFFERFILL_Pos) /*!< Bit mask of
                                                                            BUFFERFILL field.*/


/* QSPI_DMA_CONFIG_LISTPTR: Start address of descriptor list */
  #define QSPI_DMA_CONFIG_LISTPTR_ResetValue (0x00000000UL)

/* LISTPTR @Bits 0..31 : Start address of descriptor list */
  #define QSPI_DMA_CONFIG_LISTPTR_LISTPTR_Pos (0UL)
  #define QSPI_DMA_CONFIG_LISTPTR_LISTPTR_Msk (0xFFFFFFFFUL << QSPI_DMA_CONFIG_LISTPTR_LISTPTR_Pos) /*!< Bit mask of LISTPTR
                                                                            field.*/


/* QSPI_DMA_CONFIG_LISTPARTTHRESH: Threshold value for generating event EVENTS_DONE.PARTLIST when descriptor list is partially
                                    completed. Value is number of jobs. */

  #define QSPI_DMA_CONFIG_LISTPARTTHRESH_ResetValue (0x00000000UL)

/* LISTPARTTHRESH @Bits 0..15 : Threshold value. */
  #define QSPI_DMA_CONFIG_LISTPARTTHRESH_LISTPARTTHRESH_Pos (0UL)
  #define QSPI_DMA_CONFIG_LISTPARTTHRESH_LISTPARTTHRESH_Msk (0xFFFFUL << QSPI_DMA_CONFIG_LISTPARTTHRESH_LISTPARTTHRESH_Pos) /*!<
                                                                            Bit mask of LISTPARTTHRESH field.*/



/* ===================================================== Struct QSPI_DMA ===================================================== */
/**
  * @brief DMA [QSPI_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_QSPI_DMA_STATUS_Type STATUS;
  __IM  uint32_t  RESERVED[57];
  __IOM NRF_QSPI_DMA_CONFIG_Type CONFIG;
} NRF_QSPI_DMA_Type;


/* ================================================== Struct QSPI_CORE_CORE ================================================== */
/**
  * @brief CORE [QSPI_CORE_CORE] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRLR0;
  __IOM uint32_t  CTRLR1;
  __IOM uint32_t  SSIENR;
  __IOM uint32_t  MWCR;
  __IOM uint32_t  SER;
  __IOM uint32_t  BAUDR;
  __IOM uint32_t  TXFTLR;
  __IOM uint32_t  RXFTLR;
  __IOM uint32_t  TXFLR;
  __IOM uint32_t  RXFLR;
  __IOM uint32_t  SR;
  __IOM uint32_t  IMR;
  __IOM uint32_t  ISR;
  __IOM uint32_t  RISR;
  __IOM uint32_t  TXEICR;
  __IOM uint32_t  RXOICR;
  __IOM uint32_t  RXUICR;
  __IOM uint32_t  MSTICR;
  __IOM uint32_t  ICR;
  __IOM uint32_t  DMACR;
  __IOM uint32_t  DMATDLR;
  __IOM uint32_t  DMARDLR;
  __IOM uint32_t  IDR;
  __IOM uint32_t  SSICVERSIONID;
  __IOM uint32_t  DR[36];
  __IOM uint32_t  RXSAMPLEDELAY;
  __IOM uint32_t  SPICTRLR0;
  __IM  uint32_t  RESERVED[8];
  __IOM uint32_t  SPICTRLR1;
  __IOM uint32_t  SPITECR;
  __IM  uint32_t  RESERVED1[56];
} NRF_QSPI_CORE_CORE_Type;

/* QSPI_CORE_CORE_CTRLR0: Control Register 0 */
  #define QSPI_CORE_CORE_CTRLR0_ResetValue (0x00000007UL)

/* DFS @Bits 0..4 : Data Frame Size. */
  #define QSPI_CORE_CORE_CTRLR0_DFS_Pos (0UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_Msk (0x1FUL << QSPI_CORE_CORE_CTRLR0_DFS_Pos)
  #define QSPI_CORE_CORE_CTRLR0_DFS_Min (0x3UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_Max (0x1FUL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS04BIT (0x03UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS05BIT (0x04UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS06BIT (0x05UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS07BIT (0x06UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS08BIT (0x07UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS09BIT (0x08UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS10BIT (0x09UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS11BIT (0x0AUL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS12BIT (0x0BUL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS13BIT (0x0CUL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS14BIT (0x0DUL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS15BIT (0x0EUL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS16BIT (0x0FUL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS17BIT (0x10UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS18BIT (0x11UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS19BIT (0x12UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS20BIT (0x13UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS21BIT (0x14UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS22BIT (0x15UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS23BIT (0x16UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS24BIT (0x17UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS25BIT (0x18UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS26BIT (0x19UL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS27BIT (0x1AUL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS28BIT (0x1BUL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS29BIT (0x1CUL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS30BIT (0x1DUL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS31BIT (0x1EUL)
  #define QSPI_CORE_CORE_CTRLR0_DFS_DFS32BIT (0x1FUL)

/* RSVDCTRLR05 @Bit 5 : (unspecified) */
  #define QSPI_CORE_CORE_CTRLR0_RSVDCTRLR05_Pos (5UL)
  #define QSPI_CORE_CORE_CTRLR0_RSVDCTRLR05_Msk (0x1UL << QSPI_CORE_CORE_CTRLR0_RSVDCTRLR05_Pos) /*!< Bit mask of RSVDCTRLR05
                                                                            field.*/

/* FRF @Bits 6..7 : Frame Format. */
  #define QSPI_CORE_CORE_CTRLR0_FRF_Pos (6UL)
  #define QSPI_CORE_CORE_CTRLR0_FRF_Msk (0x3UL << QSPI_CORE_CORE_CTRLR0_FRF_Pos)
  #define QSPI_CORE_CORE_CTRLR0_FRF_Min (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_FRF_Max (0x2UL)
  #define QSPI_CORE_CORE_CTRLR0_FRF_SPI (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_FRF_SSP (0x1UL)
  #define QSPI_CORE_CORE_CTRLR0_FRF_MICROWIRE (0x2UL)

/* SCPH @Bit 8 : Serial Clock Phase. */
  #define QSPI_CORE_CORE_CTRLR0_SCPH_Pos (8UL)
  #define QSPI_CORE_CORE_CTRLR0_SCPH_Msk (0x1UL << QSPI_CORE_CORE_CTRLR0_SCPH_Pos)
  #define QSPI_CORE_CORE_CTRLR0_SCPH_Min (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SCPH_Max (0x1UL)
  #define QSPI_CORE_CORE_CTRLR0_SCPH_MIDDLEBIT (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SCPH_STARTBIT (0x1UL)

/* SCPOL @Bit 9 : Serial Clock Polarity. */
  #define QSPI_CORE_CORE_CTRLR0_SCPOL_Pos (9UL)
  #define QSPI_CORE_CORE_CTRLR0_SCPOL_Msk (0x1UL << QSPI_CORE_CORE_CTRLR0_SCPOL_Pos)
  #define QSPI_CORE_CORE_CTRLR0_SCPOL_Min (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SCPOL_Max (0x1UL)
  #define QSPI_CORE_CORE_CTRLR0_SCPOL_INACTIVEHIGH (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SCPOL_INACTIVELOW (0x1UL)

/* TMOD @Bits 10..11 : Transfer Mode. */
  #define QSPI_CORE_CORE_CTRLR0_TMOD_Pos (10UL)
  #define QSPI_CORE_CORE_CTRLR0_TMOD_Msk (0x3UL << QSPI_CORE_CORE_CTRLR0_TMOD_Pos)
  #define QSPI_CORE_CORE_CTRLR0_TMOD_Min (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_TMOD_Max (0x3UL)
  #define QSPI_CORE_CORE_CTRLR0_TMOD_TXANDRX (0x0UL) /*!< Transmit & Receive; Not Applicable in enhanced SPI operating mode or
                                                          when SSIC_HAS_TX_RX_EN is set to 0*/
  #define QSPI_CORE_CORE_CTRLR0_TMOD_TXONLY (0x1UL)
  #define QSPI_CORE_CORE_CTRLR0_TMOD_RXONLY (0x2UL)
  #define QSPI_CORE_CORE_CTRLR0_TMOD_EEPROMREAD (0x3UL)

/* SLVOE @Bit 12 : Target Output Enable. */
  #define QSPI_CORE_CORE_CTRLR0_SLVOE_Pos (12UL)
  #define QSPI_CORE_CORE_CTRLR0_SLVOE_Msk (0x1UL << QSPI_CORE_CORE_CTRLR0_SLVOE_Pos)
  #define QSPI_CORE_CORE_CTRLR0_SLVOE_Min (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SLVOE_Max (0x1UL)
  #define QSPI_CORE_CORE_CTRLR0_SLVOE_ENABLED (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SLVOE_DISABLED (0x1UL)

/* SRL @Bit 13 : Shift Register Loop. */
  #define QSPI_CORE_CORE_CTRLR0_SRL_Pos (13UL)
  #define QSPI_CORE_CORE_CTRLR0_SRL_Msk (0x1UL << QSPI_CORE_CORE_CTRLR0_SRL_Pos)
  #define QSPI_CORE_CORE_CTRLR0_SRL_Min (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SRL_Max (0x1UL)
  #define QSPI_CORE_CORE_CTRLR0_SRL_NORMALMODE (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SRL_TESTINGMODE (0x1UL)

/* SSTE @Bit 14 : Target Select Toggle Enable. */
  #define QSPI_CORE_CORE_CTRLR0_SSTE_Pos (14UL)
  #define QSPI_CORE_CORE_CTRLR0_SSTE_Msk (0x1UL << QSPI_CORE_CORE_CTRLR0_SSTE_Pos)
  #define QSPI_CORE_CORE_CTRLR0_SSTE_Min (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SSTE_Max (0x1UL)
  #define QSPI_CORE_CORE_CTRLR0_SSTE_TOGGLEDISABLE (0x0UL) /*!< ss_*_n will stay low and sclk will run continuously for the
                                                                duration of the transfer*/
  #define QSPI_CORE_CORE_CTRLR0_SSTE_TOGGLEEN (0x1UL) /*!< ss_*_n line will toggle between consecutive data frames, with the
                                                           serial clock (sclk) being held to its default value while ss_*_n is
                                                           high*/

/* RSVDCTRLR015 @Bit 15 : (unspecified) */
  #define QSPI_CORE_CORE_CTRLR0_RSVDCTRLR015_Pos (15UL)
  #define QSPI_CORE_CORE_CTRLR0_RSVDCTRLR015_Msk (0x1UL << QSPI_CORE_CORE_CTRLR0_RSVDCTRLR015_Pos) /*!< Bit mask of RSVDCTRLR015
                                                                            field.*/

/* CFS @Bits 16..19 : Control Frame Size. */
  #define QSPI_CORE_CORE_CTRLR0_CFS_Pos (16UL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_Msk (0xFUL << QSPI_CORE_CORE_CTRLR0_CFS_Pos)
  #define QSPI_CORE_CORE_CTRLR0_CFS_Min (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_Max (0xFUL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE01BIT (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE02BIT (0x1UL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE03BIT (0x2UL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE04BIT (0x3UL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE05BIT (0x4UL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE06BIT (0x5UL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE07BIT (0x6UL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE08BIT (0x7UL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE09BIT (0x8UL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE10BIT (0x9UL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE11BIT (0xAUL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE12BIT (0xBUL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE13BIT (0xCUL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE14BIT (0xDUL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE15BIT (0xEUL)
  #define QSPI_CORE_CORE_CTRLR0_CFS_SIZE16BIT (0xFUL)

/* RSVDCTRLR02021 @Bits 20..21 : (unspecified) */
  #define QSPI_CORE_CORE_CTRLR0_RSVDCTRLR02021_Pos (20UL)
  #define QSPI_CORE_CORE_CTRLR0_RSVDCTRLR02021_Msk (0x3UL << QSPI_CORE_CORE_CTRLR0_RSVDCTRLR02021_Pos) /*!< Bit mask of
                                                                            RSVDCTRLR02021 field.*/

/* SPIFRF @Bits 22..23 : SPI Frame Format */
  #define QSPI_CORE_CORE_CTRLR0_SPIFRF_Pos (22UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIFRF_Msk (0x3UL << QSPI_CORE_CORE_CTRLR0_SPIFRF_Pos)
  #define QSPI_CORE_CORE_CTRLR0_SPIFRF_Min (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIFRF_Max (0x3UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIFRF_SPISTANDARD (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIFRF_SPIDUAL (0x1UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIFRF_SPIQUAD (0x2UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIFRF_SPIOCTAL (0x3UL)

/* SPIHYPERBUSEN @Bit 24 : SPI Hyperbus Frame format enable. */
  #define QSPI_CORE_CORE_CTRLR0_SPIHYPERBUSEN_Pos (24UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIHYPERBUSEN_Msk (0x1UL << QSPI_CORE_CORE_CTRLR0_SPIHYPERBUSEN_Pos) /*!< Bit mask of
                                                                            SPIHYPERBUSEN field.*/
  #define QSPI_CORE_CORE_CTRLR0_SPIHYPERBUSEN_Min (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIHYPERBUSEN_Max (0x1UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIHYPERBUSEN_DISABLE (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIHYPERBUSEN_ENABLE (0x1UL)

/* SPIDWSEN @Bit 25 : Enable Dynamic wait states in SPI mode of operation. This field is only applicable when CTRLR0.FRF is set
                      to 0 (Motorola SPI Frame Format). */

  #define QSPI_CORE_CORE_CTRLR0_SPIDWSEN_Pos (25UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIDWSEN_Msk (0x1UL << QSPI_CORE_CORE_CTRLR0_SPIDWSEN_Pos)
  #define QSPI_CORE_CORE_CTRLR0_SPIDWSEN_Min (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIDWSEN_Max (0x1UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIDWSEN_DISABLE (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SPIDWSEN_ENABLE (0x1UL)

/* CLKLOOPEN @Bit 26 : Clock loop back enable bit. Once this bit is set to 1, QSPI CORE will use looped back clock (mst_sclk_in)
                       to capture read data */

  #define QSPI_CORE_CORE_CTRLR0_CLKLOOPEN_Pos (26UL)
  #define QSPI_CORE_CORE_CTRLR0_CLKLOOPEN_Msk (0x1UL << QSPI_CORE_CORE_CTRLR0_CLKLOOPEN_Pos)
  #define QSPI_CORE_CORE_CTRLR0_CLKLOOPEN_Min (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_CLKLOOPEN_Max (0x1UL)
  #define QSPI_CORE_CORE_CTRLR0_CLKLOOPEN_DISABLE (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_CLKLOOPEN_ENABLE (0x1UL)

/* RSVDCTRLR02730 @Bits 27..30 : (unspecified) */
  #define QSPI_CORE_CORE_CTRLR0_RSVDCTRLR02730_Pos (27UL)
  #define QSPI_CORE_CORE_CTRLR0_RSVDCTRLR02730_Msk (0xFUL << QSPI_CORE_CORE_CTRLR0_RSVDCTRLR02730_Pos) /*!< Bit mask of
                                                                            RSVDCTRLR02730 field.*/

/* SSIISMST @Bit 31 : This field selects if QSPI CORE is working in Controller or Target mode */
  #define QSPI_CORE_CORE_CTRLR0_SSIISMST_Pos (31UL)
  #define QSPI_CORE_CORE_CTRLR0_SSIISMST_Msk (0x1UL << QSPI_CORE_CORE_CTRLR0_SSIISMST_Pos)
  #define QSPI_CORE_CORE_CTRLR0_SSIISMST_Min (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SSIISMST_Max (0x1UL)
  #define QSPI_CORE_CORE_CTRLR0_SSIISMST_TARGET (0x0UL)
  #define QSPI_CORE_CORE_CTRLR0_SSIISMST_CONTROLLER (0x1UL)


/* QSPI_CORE_CORE_CTRLR1: Control Register 1 */
  #define QSPI_CORE_CORE_CTRLR1_ResetValue (0x00000000UL)

/* NDF @Bits 0..15 : Number of Data Frames. */
  #define QSPI_CORE_CORE_CTRLR1_NDF_Pos (0UL)
  #define QSPI_CORE_CORE_CTRLR1_NDF_Msk (0xFFFFUL << QSPI_CORE_CORE_CTRLR1_NDF_Pos)

/* RSVDCTRLR1 @Bits 16..31 : (unspecified) */
  #define QSPI_CORE_CORE_CTRLR1_RSVDCTRLR1_Pos (16UL)
  #define QSPI_CORE_CORE_CTRLR1_RSVDCTRLR1_Msk (0xFFFFUL << QSPI_CORE_CORE_CTRLR1_RSVDCTRLR1_Pos) /*!< Bit mask of RSVDCTRLR1
                                                                            field.*/


/* QSPI_CORE_CORE_SSIENR: SSI Enable Register */
  #define QSPI_CORE_CORE_SSIENR_ResetValue (0x00000000UL)

/* SSICEN @Bit 0 : SSI Enable. */
  #define QSPI_CORE_CORE_SSIENR_SSICEN_Pos (0UL)
  #define QSPI_CORE_CORE_SSIENR_SSICEN_Msk (0x1UL << QSPI_CORE_CORE_SSIENR_SSICEN_Pos)
  #define QSPI_CORE_CORE_SSIENR_SSICEN_Min (0x0UL)
  #define QSPI_CORE_CORE_SSIENR_SSICEN_Max (0x1UL)
  #define QSPI_CORE_CORE_SSIENR_SSICEN_DISABLE (0x0UL)
  #define QSPI_CORE_CORE_SSIENR_SSICEN_ENABLED (0x1UL)

/* RSVDSSIENR @Bits 1..31 : (unspecified) */
  #define QSPI_CORE_CORE_SSIENR_RSVDSSIENR_Pos (1UL)
  #define QSPI_CORE_CORE_SSIENR_RSVDSSIENR_Msk (0x7FFFFFFFUL << QSPI_CORE_CORE_SSIENR_RSVDSSIENR_Pos) /*!< Bit mask of
                                                                            RSVDSSIENR field.*/


/* QSPI_CORE_CORE_MWCR: Microwire Control Register */
  #define QSPI_CORE_CORE_MWCR_ResetValue (0x00000000UL)

/* MWMOD @Bit 0 : Microwire Transfer Mode. */
  #define QSPI_CORE_CORE_MWCR_MWMOD_Pos (0UL)
  #define QSPI_CORE_CORE_MWCR_MWMOD_Msk (0x1UL << QSPI_CORE_CORE_MWCR_MWMOD_Pos)
  #define QSPI_CORE_CORE_MWCR_MWMOD_Min (0x0UL)
  #define QSPI_CORE_CORE_MWCR_MWMOD_Max (0x1UL)
  #define QSPI_CORE_CORE_MWCR_MWMOD_NONSEQUENTIAL (0x0UL)
  #define QSPI_CORE_CORE_MWCR_MWMOD_SEQUENTIAL (0x1UL)

/* MDD @Bit 1 : Microwire Control. */
  #define QSPI_CORE_CORE_MWCR_MDD_Pos (1UL)
  #define QSPI_CORE_CORE_MWCR_MDD_Msk (0x1UL << QSPI_CORE_CORE_MWCR_MDD_Pos)
  #define QSPI_CORE_CORE_MWCR_MDD_Min (0x0UL)
  #define QSPI_CORE_CORE_MWCR_MDD_Max (0x1UL)
  #define QSPI_CORE_CORE_MWCR_MDD_RECEIVE (0x0UL)
  #define QSPI_CORE_CORE_MWCR_MDD_TRANSMIT (0x1UL)

/* MHS @Bit 2 : Microwire Handshaking. */
  #define QSPI_CORE_CORE_MWCR_MHS_Pos (2UL)
  #define QSPI_CORE_CORE_MWCR_MHS_Msk (0x1UL << QSPI_CORE_CORE_MWCR_MHS_Pos)
  #define QSPI_CORE_CORE_MWCR_MHS_Min (0x0UL)
  #define QSPI_CORE_CORE_MWCR_MHS_Max (0x1UL)
  #define QSPI_CORE_CORE_MWCR_MHS_DISABLE (0x0UL)
  #define QSPI_CORE_CORE_MWCR_MHS_ENABLED (0x1UL)

/* RSVDMWCR @Bits 3..31 : (unspecified) */
  #define QSPI_CORE_CORE_MWCR_RSVDMWCR_Pos (3UL)
  #define QSPI_CORE_CORE_MWCR_RSVDMWCR_Msk (0x1FFFFFFFUL << QSPI_CORE_CORE_MWCR_RSVDMWCR_Pos)


/* QSPI_CORE_CORE_SER: Target Enable Register */
  #define QSPI_CORE_CORE_SER_ResetValue (0x00000000UL)

/* SER @Bits 0..3 : Chip Select Enable Flag. */
  #define QSPI_CORE_CORE_SER_SER_Pos (0UL)
  #define QSPI_CORE_CORE_SER_SER_Msk (0xFUL << QSPI_CORE_CORE_SER_SER_Pos)

/* RSVDSER @Bits 4..31 : (unspecified) */
  #define QSPI_CORE_CORE_SER_RSVDSER_Pos (4UL)
  #define QSPI_CORE_CORE_SER_RSVDSER_Msk (0xFFFFFFFUL << QSPI_CORE_CORE_SER_RSVDSER_Pos)


/* QSPI_CORE_CORE_BAUDR: Baud Rate Select */
  #define QSPI_CORE_CORE_BAUDR_ResetValue (0x00000002UL)

/* RSVDBAUDR0 @Bit 0 : (unspecified) */
  #define QSPI_CORE_CORE_BAUDR_RSVDBAUDR0_Pos (0UL)
  #define QSPI_CORE_CORE_BAUDR_RSVDBAUDR0_Msk (0x1UL << QSPI_CORE_CORE_BAUDR_RSVDBAUDR0_Pos)

/* SCKDV @Bits 1..15 : SSI Clock Divider. */
  #define QSPI_CORE_CORE_BAUDR_SCKDV_Pos (1UL)
  #define QSPI_CORE_CORE_BAUDR_SCKDV_Msk (0x7FFFUL << QSPI_CORE_CORE_BAUDR_SCKDV_Pos)

/* RSVDBAUDR1631 @Bits 16..31 : (unspecified) */
  #define QSPI_CORE_CORE_BAUDR_RSVDBAUDR1631_Pos (16UL)
  #define QSPI_CORE_CORE_BAUDR_RSVDBAUDR1631_Msk (0xFFFFUL << QSPI_CORE_CORE_BAUDR_RSVDBAUDR1631_Pos) /*!< Bit mask of
                                                                            RSVDBAUDR1631 field.*/


/* QSPI_CORE_CORE_TXFTLR: Transmit FIFO Threshold Level */
  #define QSPI_CORE_CORE_TXFTLR_ResetValue (0x00080000UL)

/* TFT @Bits 0..3 : Transmit FIFO Threshold. */
  #define QSPI_CORE_CORE_TXFTLR_TFT_Pos (0UL)
  #define QSPI_CORE_CORE_TXFTLR_TFT_Msk (0xFUL << QSPI_CORE_CORE_TXFTLR_TFT_Pos)

/* RSVDTXFTLR @Bits 4..15 : (unspecified) */
  #define QSPI_CORE_CORE_TXFTLR_RSVDTXFTLR_Pos (4UL)
  #define QSPI_CORE_CORE_TXFTLR_RSVDTXFTLR_Msk (0xFFFUL << QSPI_CORE_CORE_TXFTLR_RSVDTXFTLR_Pos) /*!< Bit mask of RSVDTXFTLR
                                                                            field.*/

/* TXFTHR @Bits 16..19 : Transfer start FIFO level. */
  #define QSPI_CORE_CORE_TXFTLR_TXFTHR_Pos (16UL)
  #define QSPI_CORE_CORE_TXFTLR_TXFTHR_Msk (0xFUL << QSPI_CORE_CORE_TXFTLR_TXFTHR_Pos)

/* RSVDTXFTHR @Bits 20..31 : (unspecified) */
  #define QSPI_CORE_CORE_TXFTLR_RSVDTXFTHR_Pos (20UL)
  #define QSPI_CORE_CORE_TXFTLR_RSVDTXFTHR_Msk (0xFFFUL << QSPI_CORE_CORE_TXFTLR_RSVDTXFTHR_Pos) /*!< Bit mask of RSVDTXFTHR
                                                                            field.*/


/* QSPI_CORE_CORE_RXFTLR: Receive FIFO Threshold Level */
  #define QSPI_CORE_CORE_RXFTLR_ResetValue (0x00000000UL)

/* RFT @Bits 0..3 : Receive FIFO Threshold. */
  #define QSPI_CORE_CORE_RXFTLR_RFT_Pos (0UL)
  #define QSPI_CORE_CORE_RXFTLR_RFT_Msk (0xFUL << QSPI_CORE_CORE_RXFTLR_RFT_Pos)

/* RSVDRXFTLR @Bits 4..31 : (unspecified) */
  #define QSPI_CORE_CORE_RXFTLR_RSVDRXFTLR_Pos (4UL)
  #define QSPI_CORE_CORE_RXFTLR_RSVDRXFTLR_Msk (0xFFFFFFFUL << QSPI_CORE_CORE_RXFTLR_RSVDRXFTLR_Pos) /*!< Bit mask of RSVDRXFTLR
                                                                            field.*/


/* QSPI_CORE_CORE_TXFLR: Transmit FIFO Level Register */
  #define QSPI_CORE_CORE_TXFLR_ResetValue (0x00000000UL)

/* TXTFL @Bits 0..4 : Transmit FIFO Level. */
  #define QSPI_CORE_CORE_TXFLR_TXTFL_Pos (0UL)
  #define QSPI_CORE_CORE_TXFLR_TXTFL_Msk (0x1FUL << QSPI_CORE_CORE_TXFLR_TXTFL_Pos)

/* RSVDTXFLR @Bits 5..31 : (unspecified) */
  #define QSPI_CORE_CORE_TXFLR_RSVDTXFLR_Pos (5UL)
  #define QSPI_CORE_CORE_TXFLR_RSVDTXFLR_Msk (0x7FFFFFFUL << QSPI_CORE_CORE_TXFLR_RSVDTXFLR_Pos) /*!< Bit mask of RSVDTXFLR
                                                                            field.*/


/* QSPI_CORE_CORE_RXFLR: Receive FIFO Level Register */
  #define QSPI_CORE_CORE_RXFLR_ResetValue (0x00000000UL)

/* RXTFL @Bits 0..4 : Receive FIFO Level. */
  #define QSPI_CORE_CORE_RXFLR_RXTFL_Pos (0UL)
  #define QSPI_CORE_CORE_RXFLR_RXTFL_Msk (0x1FUL << QSPI_CORE_CORE_RXFLR_RXTFL_Pos)

/* RSVDRXFLR @Bits 5..31 : (unspecified) */
  #define QSPI_CORE_CORE_RXFLR_RSVDRXFLR_Pos (5UL)
  #define QSPI_CORE_CORE_RXFLR_RSVDRXFLR_Msk (0x7FFFFFFUL << QSPI_CORE_CORE_RXFLR_RSVDRXFLR_Pos) /*!< Bit mask of RSVDRXFLR
                                                                            field.*/


/* QSPI_CORE_CORE_SR: Status Register */
  #define QSPI_CORE_CORE_SR_ResetValue (0x00000006UL)

/* BUSY @Bit 0 : SSI Busy Flag. */
  #define QSPI_CORE_CORE_SR_BUSY_Pos (0UL)
  #define QSPI_CORE_CORE_SR_BUSY_Msk (0x1UL << QSPI_CORE_CORE_SR_BUSY_Pos)
  #define QSPI_CORE_CORE_SR_BUSY_Min (0x0UL)
  #define QSPI_CORE_CORE_SR_BUSY_Max (0x1UL)
  #define QSPI_CORE_CORE_SR_BUSY_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_SR_BUSY_ACTIVE (0x1UL)

/* TFNF @Bit 1 : Transmit FIFO Not Full. */
  #define QSPI_CORE_CORE_SR_TFNF_Pos (1UL)
  #define QSPI_CORE_CORE_SR_TFNF_Msk (0x1UL << QSPI_CORE_CORE_SR_TFNF_Pos)
  #define QSPI_CORE_CORE_SR_TFNF_Min (0x0UL)
  #define QSPI_CORE_CORE_SR_TFNF_Max (0x1UL)
  #define QSPI_CORE_CORE_SR_TFNF_FULL (0x0UL)
  #define QSPI_CORE_CORE_SR_TFNF_NOTFULL (0x1UL)

/* TFE @Bit 2 : Transmit FIFO Empty. */
  #define QSPI_CORE_CORE_SR_TFE_Pos (2UL)
  #define QSPI_CORE_CORE_SR_TFE_Msk (0x1UL << QSPI_CORE_CORE_SR_TFE_Pos)
  #define QSPI_CORE_CORE_SR_TFE_Min (0x0UL)
  #define QSPI_CORE_CORE_SR_TFE_Max (0x1UL)
  #define QSPI_CORE_CORE_SR_TFE_NOTEMPTY (0x0UL)
  #define QSPI_CORE_CORE_SR_TFE_EMPTY (0x1UL)

/* RFNE @Bit 3 : Receive FIFO Not Empty. */
  #define QSPI_CORE_CORE_SR_RFNE_Pos (3UL)
  #define QSPI_CORE_CORE_SR_RFNE_Msk (0x1UL << QSPI_CORE_CORE_SR_RFNE_Pos)
  #define QSPI_CORE_CORE_SR_RFNE_Min (0x0UL)
  #define QSPI_CORE_CORE_SR_RFNE_Max (0x1UL)
  #define QSPI_CORE_CORE_SR_RFNE_EMPTY (0x0UL)
  #define QSPI_CORE_CORE_SR_RFNE_NOTEMPTY (0x1UL)

/* RFF @Bit 4 : Receive FIFO Full. */
  #define QSPI_CORE_CORE_SR_RFF_Pos (4UL)
  #define QSPI_CORE_CORE_SR_RFF_Msk (0x1UL << QSPI_CORE_CORE_SR_RFF_Pos)
  #define QSPI_CORE_CORE_SR_RFF_Min (0x0UL)
  #define QSPI_CORE_CORE_SR_RFF_Max (0x1UL)
  #define QSPI_CORE_CORE_SR_RFF_NOTFULL (0x0UL)
  #define QSPI_CORE_CORE_SR_RFF_FULL (0x1UL)

/* TXE @Bit 5 : Transmission Error. */
  #define QSPI_CORE_CORE_SR_TXE_Pos (5UL)
  #define QSPI_CORE_CORE_SR_TXE_Msk (0x1UL << QSPI_CORE_CORE_SR_TXE_Pos)
  #define QSPI_CORE_CORE_SR_TXE_Min (0x0UL)
  #define QSPI_CORE_CORE_SR_TXE_Max (0x1UL)
  #define QSPI_CORE_CORE_SR_TXE_NOERROR (0x0UL)
  #define QSPI_CORE_CORE_SR_TXE_TXERROR (0x1UL)

/* DCOL @Bit 6 : Data Collision Error. */
  #define QSPI_CORE_CORE_SR_DCOL_Pos (6UL)
  #define QSPI_CORE_CORE_SR_DCOL_Msk (0x1UL << QSPI_CORE_CORE_SR_DCOL_Pos)
  #define QSPI_CORE_CORE_SR_DCOL_Min (0x0UL)
  #define QSPI_CORE_CORE_SR_DCOL_Max (0x1UL)
  #define QSPI_CORE_CORE_SR_DCOL_NOERRORCONDITION (0x0UL)
  #define QSPI_CORE_CORE_SR_DCOL_TXCOLLISIONERROR (0x1UL)

/* RSVDSR @Bits 7..14 : (unspecified) */
  #define QSPI_CORE_CORE_SR_RSVDSR_Pos (7UL)
  #define QSPI_CORE_CORE_SR_RSVDSR_Msk (0xFFUL << QSPI_CORE_CORE_SR_RSVDSR_Pos)

/* CMPLTDDF @Bits 15..31 : Completed Data frames */
  #define QSPI_CORE_CORE_SR_CMPLTDDF_Pos (15UL)
  #define QSPI_CORE_CORE_SR_CMPLTDDF_Msk (0x1FFFFUL << QSPI_CORE_CORE_SR_CMPLTDDF_Pos)


/* QSPI_CORE_CORE_IMR: Interrupt Mask Register */
  #define QSPI_CORE_CORE_IMR_ResetValue (0x0000043FUL)

/* TXEIM @Bit 0 : Transmit FIFO Empty Interrupt Mask */
  #define QSPI_CORE_CORE_IMR_TXEIM_Pos (0UL)
  #define QSPI_CORE_CORE_IMR_TXEIM_Msk (0x1UL << QSPI_CORE_CORE_IMR_TXEIM_Pos)
  #define QSPI_CORE_CORE_IMR_TXEIM_Min (0x0UL)
  #define QSPI_CORE_CORE_IMR_TXEIM_Max (0x1UL)
  #define QSPI_CORE_CORE_IMR_TXEIM_MASKED (0x0UL)
  #define QSPI_CORE_CORE_IMR_TXEIM_UNMASKED (0x1UL)

/* TXOIM @Bit 1 : Transmit FIFO Overflow Interrupt Mask */
  #define QSPI_CORE_CORE_IMR_TXOIM_Pos (1UL)
  #define QSPI_CORE_CORE_IMR_TXOIM_Msk (0x1UL << QSPI_CORE_CORE_IMR_TXOIM_Pos)
  #define QSPI_CORE_CORE_IMR_TXOIM_Min (0x0UL)
  #define QSPI_CORE_CORE_IMR_TXOIM_Max (0x1UL)
  #define QSPI_CORE_CORE_IMR_TXOIM_MASKED (0x0UL)
  #define QSPI_CORE_CORE_IMR_TXOIM_UNMASKED (0x1UL)

/* RXUIM @Bit 2 : Receive FIFO Underflow Interrupt Mask */
  #define QSPI_CORE_CORE_IMR_RXUIM_Pos (2UL)
  #define QSPI_CORE_CORE_IMR_RXUIM_Msk (0x1UL << QSPI_CORE_CORE_IMR_RXUIM_Pos)
  #define QSPI_CORE_CORE_IMR_RXUIM_Min (0x0UL)
  #define QSPI_CORE_CORE_IMR_RXUIM_Max (0x1UL)
  #define QSPI_CORE_CORE_IMR_RXUIM_MASKED (0x0UL)
  #define QSPI_CORE_CORE_IMR_RXUIM_UNMASKED (0x1UL)

/* RXOIM @Bit 3 : Receive FIFO Overflow Interrupt Mask */
  #define QSPI_CORE_CORE_IMR_RXOIM_Pos (3UL)
  #define QSPI_CORE_CORE_IMR_RXOIM_Msk (0x1UL << QSPI_CORE_CORE_IMR_RXOIM_Pos)
  #define QSPI_CORE_CORE_IMR_RXOIM_Min (0x0UL)
  #define QSPI_CORE_CORE_IMR_RXOIM_Max (0x1UL)
  #define QSPI_CORE_CORE_IMR_RXOIM_MASKED (0x0UL)
  #define QSPI_CORE_CORE_IMR_RXOIM_UNMASKED (0x1UL)

/* RXFIM @Bit 4 : Receive FIFO Full Interrupt Mask */
  #define QSPI_CORE_CORE_IMR_RXFIM_Pos (4UL)
  #define QSPI_CORE_CORE_IMR_RXFIM_Msk (0x1UL << QSPI_CORE_CORE_IMR_RXFIM_Pos)
  #define QSPI_CORE_CORE_IMR_RXFIM_Min (0x0UL)
  #define QSPI_CORE_CORE_IMR_RXFIM_Max (0x1UL)
  #define QSPI_CORE_CORE_IMR_RXFIM_MASKED (0x0UL)
  #define QSPI_CORE_CORE_IMR_RXFIM_UNMASKED (0x1UL)

/* MSTIM @Bit 5 : Multi-Controller Contention Interrupt Mask. This bit field is not present if the QSPI CORE is configured as a
                  serial-controller device. */

  #define QSPI_CORE_CORE_IMR_MSTIM_Pos (5UL)
  #define QSPI_CORE_CORE_IMR_MSTIM_Msk (0x1UL << QSPI_CORE_CORE_IMR_MSTIM_Pos)
  #define QSPI_CORE_CORE_IMR_MSTIM_Min (0x0UL)
  #define QSPI_CORE_CORE_IMR_MSTIM_Max (0x1UL)
  #define QSPI_CORE_CORE_IMR_MSTIM_MASKED (0x0UL)
  #define QSPI_CORE_CORE_IMR_MSTIM_UNMASKED (0x1UL)

/* XRXOIM @Bit 6 : XIP Receive FIFO Overflow Interrupt Mask */
  #define QSPI_CORE_CORE_IMR_XRXOIM_Pos (6UL)
  #define QSPI_CORE_CORE_IMR_XRXOIM_Msk (0x1UL << QSPI_CORE_CORE_IMR_XRXOIM_Pos)
  #define QSPI_CORE_CORE_IMR_XRXOIM_Min (0x0UL)
  #define QSPI_CORE_CORE_IMR_XRXOIM_Max (0x1UL)
  #define QSPI_CORE_CORE_IMR_XRXOIM_MASKED (0x0UL)
  #define QSPI_CORE_CORE_IMR_XRXOIM_UNMASKED (0x1UL)

/* TXUIM @Bit 7 : Transmit FIFO Underflow Interrupt Mask */
  #define QSPI_CORE_CORE_IMR_TXUIM_Pos (7UL)
  #define QSPI_CORE_CORE_IMR_TXUIM_Msk (0x1UL << QSPI_CORE_CORE_IMR_TXUIM_Pos)
  #define QSPI_CORE_CORE_IMR_TXUIM_Min (0x0UL)
  #define QSPI_CORE_CORE_IMR_TXUIM_Max (0x1UL)
  #define QSPI_CORE_CORE_IMR_TXUIM_MASKED (0x0UL)
  #define QSPI_CORE_CORE_IMR_TXUIM_UNMASKED (0x1UL)

/* AXIEM @Bit 8 : AXI Error Interrupt Mask */
  #define QSPI_CORE_CORE_IMR_AXIEM_Pos (8UL)
  #define QSPI_CORE_CORE_IMR_AXIEM_Msk (0x1UL << QSPI_CORE_CORE_IMR_AXIEM_Pos)
  #define QSPI_CORE_CORE_IMR_AXIEM_Min (0x0UL)
  #define QSPI_CORE_CORE_IMR_AXIEM_Max (0x1UL)
  #define QSPI_CORE_CORE_IMR_AXIEM_MASKED (0x0UL)
  #define QSPI_CORE_CORE_IMR_AXIEM_UNMASKED (0x1UL)

/* RSVD9IMR @Bit 9 : (unspecified) */
  #define QSPI_CORE_CORE_IMR_RSVD9IMR_Pos (9UL)
  #define QSPI_CORE_CORE_IMR_RSVD9IMR_Msk (0x1UL << QSPI_CORE_CORE_IMR_RSVD9IMR_Pos)

/* SPITEM @Bit 10 : SPI Transmit Error Interrupt Mask */
  #define QSPI_CORE_CORE_IMR_SPITEM_Pos (10UL)
  #define QSPI_CORE_CORE_IMR_SPITEM_Msk (0x1UL << QSPI_CORE_CORE_IMR_SPITEM_Pos)
  #define QSPI_CORE_CORE_IMR_SPITEM_Min (0x0UL)
  #define QSPI_CORE_CORE_IMR_SPITEM_Max (0x1UL)
  #define QSPI_CORE_CORE_IMR_SPITEM_MASKED (0x0UL)
  #define QSPI_CORE_CORE_IMR_SPITEM_UNMASKED (0x1UL)

/* DONEM @Bit 11 : SSI Done Interrupt Mask */
  #define QSPI_CORE_CORE_IMR_DONEM_Pos (11UL)
  #define QSPI_CORE_CORE_IMR_DONEM_Msk (0x1UL << QSPI_CORE_CORE_IMR_DONEM_Pos)
  #define QSPI_CORE_CORE_IMR_DONEM_Min (0x0UL)
  #define QSPI_CORE_CORE_IMR_DONEM_Max (0x1UL)
  #define QSPI_CORE_CORE_IMR_DONEM_MASKED (0x0UL)
  #define QSPI_CORE_CORE_IMR_DONEM_UNMASKED (0x1UL)

/* RSVD1231IMR @Bits 12..31 : (unspecified) */
  #define QSPI_CORE_CORE_IMR_RSVD1231IMR_Pos (12UL)
  #define QSPI_CORE_CORE_IMR_RSVD1231IMR_Msk (0xFFFFFUL << QSPI_CORE_CORE_IMR_RSVD1231IMR_Pos) /*!< Bit mask of RSVD1231IMR
                                                                            field.*/


/* QSPI_CORE_CORE_ISR: Interrupt Status Register */
  #define QSPI_CORE_CORE_ISR_ResetValue (0x00000000UL)

/* TXEIS @Bit 0 : Transmit FIFO Empty Interrupt Status */
  #define QSPI_CORE_CORE_ISR_TXEIS_Pos (0UL)
  #define QSPI_CORE_CORE_ISR_TXEIS_Msk (0x1UL << QSPI_CORE_CORE_ISR_TXEIS_Pos)
  #define QSPI_CORE_CORE_ISR_TXEIS_Min (0x0UL)
  #define QSPI_CORE_CORE_ISR_TXEIS_Max (0x1UL)
  #define QSPI_CORE_CORE_ISR_TXEIS_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_ISR_TXEIS_ACTIVE (0x1UL)

/* TXOIS @Bit 1 : Transmit FIFO Overflow Interrupt Status */
  #define QSPI_CORE_CORE_ISR_TXOIS_Pos (1UL)
  #define QSPI_CORE_CORE_ISR_TXOIS_Msk (0x1UL << QSPI_CORE_CORE_ISR_TXOIS_Pos)
  #define QSPI_CORE_CORE_ISR_TXOIS_Min (0x0UL)
  #define QSPI_CORE_CORE_ISR_TXOIS_Max (0x1UL)
  #define QSPI_CORE_CORE_ISR_TXOIS_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_ISR_TXOIS_ACTIVE (0x1UL)

/* RXUIS @Bit 2 : Receive FIFO Underflow Interrupt Status */
  #define QSPI_CORE_CORE_ISR_RXUIS_Pos (2UL)
  #define QSPI_CORE_CORE_ISR_RXUIS_Msk (0x1UL << QSPI_CORE_CORE_ISR_RXUIS_Pos)
  #define QSPI_CORE_CORE_ISR_RXUIS_Min (0x0UL)
  #define QSPI_CORE_CORE_ISR_RXUIS_Max (0x1UL)
  #define QSPI_CORE_CORE_ISR_RXUIS_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_ISR_RXUIS_ACTIVE (0x1UL)

/* RXOIS @Bit 3 : Receive FIFO Overflow Interrupt Status */
  #define QSPI_CORE_CORE_ISR_RXOIS_Pos (3UL)
  #define QSPI_CORE_CORE_ISR_RXOIS_Msk (0x1UL << QSPI_CORE_CORE_ISR_RXOIS_Pos)
  #define QSPI_CORE_CORE_ISR_RXOIS_Min (0x0UL)
  #define QSPI_CORE_CORE_ISR_RXOIS_Max (0x1UL)
  #define QSPI_CORE_CORE_ISR_RXOIS_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_ISR_RXOIS_ACTIVE (0x1UL)

/* RXFIS @Bit 4 : Receive FIFO Full Interrupt Status */
  #define QSPI_CORE_CORE_ISR_RXFIS_Pos (4UL)
  #define QSPI_CORE_CORE_ISR_RXFIS_Msk (0x1UL << QSPI_CORE_CORE_ISR_RXFIS_Pos)
  #define QSPI_CORE_CORE_ISR_RXFIS_Min (0x0UL)
  #define QSPI_CORE_CORE_ISR_RXFIS_Max (0x1UL)
  #define QSPI_CORE_CORE_ISR_RXFIS_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_ISR_RXFIS_ACTIVE (0x1UL)

/* MSTIS @Bit 5 : Multi-Controller Contention Interrupt Status. This bit field is not present */
  #define QSPI_CORE_CORE_ISR_MSTIS_Pos (5UL)
  #define QSPI_CORE_CORE_ISR_MSTIS_Msk (0x1UL << QSPI_CORE_CORE_ISR_MSTIS_Pos)
  #define QSPI_CORE_CORE_ISR_MSTIS_Min (0x0UL)
  #define QSPI_CORE_CORE_ISR_MSTIS_Max (0x1UL)
  #define QSPI_CORE_CORE_ISR_MSTIS_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_ISR_MSTIS_ACTIVE (0x1UL)

/* XRXOIS @Bit 6 : XIP Receive FIFO Overflow Interrupt Status */
  #define QSPI_CORE_CORE_ISR_XRXOIS_Pos (6UL)
  #define QSPI_CORE_CORE_ISR_XRXOIS_Msk (0x1UL << QSPI_CORE_CORE_ISR_XRXOIS_Pos)
  #define QSPI_CORE_CORE_ISR_XRXOIS_Min (0x0UL)
  #define QSPI_CORE_CORE_ISR_XRXOIS_Max (0x1UL)
  #define QSPI_CORE_CORE_ISR_XRXOIS_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_ISR_XRXOIS_ACTIVE (0x1UL)

/* TXUIS @Bit 7 : Transmit FIFO Underflow Interrupt Status */
  #define QSPI_CORE_CORE_ISR_TXUIS_Pos (7UL)
  #define QSPI_CORE_CORE_ISR_TXUIS_Msk (0x1UL << QSPI_CORE_CORE_ISR_TXUIS_Pos)
  #define QSPI_CORE_CORE_ISR_TXUIS_Min (0x0UL)
  #define QSPI_CORE_CORE_ISR_TXUIS_Max (0x1UL)
  #define QSPI_CORE_CORE_ISR_TXUIS_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_ISR_TXUIS_ACTIVE (0x1UL)

/* AXIES @Bit 8 : AXI Error Interrupt Status */
  #define QSPI_CORE_CORE_ISR_AXIES_Pos (8UL)
  #define QSPI_CORE_CORE_ISR_AXIES_Msk (0x1UL << QSPI_CORE_CORE_ISR_AXIES_Pos)
  #define QSPI_CORE_CORE_ISR_AXIES_Min (0x0UL)
  #define QSPI_CORE_CORE_ISR_AXIES_Max (0x1UL)
  #define QSPI_CORE_CORE_ISR_AXIES_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_ISR_AXIES_ACTIVE (0x1UL)

/* RSVD9RISR @Bit 9 : (unspecified) */
  #define QSPI_CORE_CORE_ISR_RSVD9RISR_Pos (9UL)
  #define QSPI_CORE_CORE_ISR_RSVD9RISR_Msk (0x1UL << QSPI_CORE_CORE_ISR_RSVD9RISR_Pos)

/* SPITES @Bit 10 : SPI Transmit Error Interrupt */
  #define QSPI_CORE_CORE_ISR_SPITES_Pos (10UL)
  #define QSPI_CORE_CORE_ISR_SPITES_Msk (0x1UL << QSPI_CORE_CORE_ISR_SPITES_Pos)
  #define QSPI_CORE_CORE_ISR_SPITES_Min (0x0UL)
  #define QSPI_CORE_CORE_ISR_SPITES_Max (0x1UL)
  #define QSPI_CORE_CORE_ISR_SPITES_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_ISR_SPITES_ACTIVE (0x1UL)

/* DONES @Bit 11 : SSI Done Interrupt Status */
  #define QSPI_CORE_CORE_ISR_DONES_Pos (11UL)
  #define QSPI_CORE_CORE_ISR_DONES_Msk (0x1UL << QSPI_CORE_CORE_ISR_DONES_Pos)
  #define QSPI_CORE_CORE_ISR_DONES_Min (0x0UL)
  #define QSPI_CORE_CORE_ISR_DONES_Max (0x1UL)
  #define QSPI_CORE_CORE_ISR_DONES_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_ISR_DONES_ACTIVE (0x1UL)

/* RSVD1231RISR @Bits 12..31 : (unspecified) */
  #define QSPI_CORE_CORE_ISR_RSVD1231RISR_Pos (12UL)
  #define QSPI_CORE_CORE_ISR_RSVD1231RISR_Msk (0xFFFFFUL << QSPI_CORE_CORE_ISR_RSVD1231RISR_Pos) /*!< Bit mask of RSVD1231RISR
                                                                            field.*/


/* QSPI_CORE_CORE_RISR: Raw Interrupt Status Register */
  #define QSPI_CORE_CORE_RISR_ResetValue (0x00000000UL)

/* TXEIR @Bit 0 : Transmit FIFO Empty Raw Interrupt Status */
  #define QSPI_CORE_CORE_RISR_TXEIR_Pos (0UL)
  #define QSPI_CORE_CORE_RISR_TXEIR_Msk (0x1UL << QSPI_CORE_CORE_RISR_TXEIR_Pos)
  #define QSPI_CORE_CORE_RISR_TXEIR_Min (0x0UL)
  #define QSPI_CORE_CORE_RISR_TXEIR_Max (0x1UL)
  #define QSPI_CORE_CORE_RISR_TXEIR_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_RISR_TXEIR_ACTIVE (0x1UL)

/* TXOIR @Bit 1 : Transmit FIFO Overflow Raw Interrupt Status */
  #define QSPI_CORE_CORE_RISR_TXOIR_Pos (1UL)
  #define QSPI_CORE_CORE_RISR_TXOIR_Msk (0x1UL << QSPI_CORE_CORE_RISR_TXOIR_Pos)
  #define QSPI_CORE_CORE_RISR_TXOIR_Min (0x0UL)
  #define QSPI_CORE_CORE_RISR_TXOIR_Max (0x1UL)
  #define QSPI_CORE_CORE_RISR_TXOIR_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_RISR_TXOIR_ACTIVE (0x1UL)

/* RXUIR @Bit 2 : Receive FIFO Underflow Raw Interrupt Status */
  #define QSPI_CORE_CORE_RISR_RXUIR_Pos (2UL)
  #define QSPI_CORE_CORE_RISR_RXUIR_Msk (0x1UL << QSPI_CORE_CORE_RISR_RXUIR_Pos)
  #define QSPI_CORE_CORE_RISR_RXUIR_Min (0x0UL)
  #define QSPI_CORE_CORE_RISR_RXUIR_Max (0x1UL)
  #define QSPI_CORE_CORE_RISR_RXUIR_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_RISR_RXUIR_ACTIVE (0x1UL)

/* RXOIR @Bit 3 : Receive FIFO Overflow Raw Interrupt Status */
  #define QSPI_CORE_CORE_RISR_RXOIR_Pos (3UL)
  #define QSPI_CORE_CORE_RISR_RXOIR_Msk (0x1UL << QSPI_CORE_CORE_RISR_RXOIR_Pos)
  #define QSPI_CORE_CORE_RISR_RXOIR_Min (0x0UL)
  #define QSPI_CORE_CORE_RISR_RXOIR_Max (0x1UL)
  #define QSPI_CORE_CORE_RISR_RXOIR_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_RISR_RXOIR_ACTIVE (0x1UL)

/* RXFIR @Bit 4 : Receive FIFO Full Raw Interrupt Status */
  #define QSPI_CORE_CORE_RISR_RXFIR_Pos (4UL)
  #define QSPI_CORE_CORE_RISR_RXFIR_Msk (0x1UL << QSPI_CORE_CORE_RISR_RXFIR_Pos)
  #define QSPI_CORE_CORE_RISR_RXFIR_Min (0x0UL)
  #define QSPI_CORE_CORE_RISR_RXFIR_Max (0x1UL)
  #define QSPI_CORE_CORE_RISR_RXFIR_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_RISR_RXFIR_ACTIVE (0x1UL)

/* MSTIR @Bit 5 : Multi-Controller Contention Raw Interrupt Status. This bit field is not present if the QSPI CORE is configured
                  as a serial-target device. */

  #define QSPI_CORE_CORE_RISR_MSTIR_Pos (5UL)
  #define QSPI_CORE_CORE_RISR_MSTIR_Msk (0x1UL << QSPI_CORE_CORE_RISR_MSTIR_Pos)
  #define QSPI_CORE_CORE_RISR_MSTIR_Min (0x0UL)
  #define QSPI_CORE_CORE_RISR_MSTIR_Max (0x1UL)
  #define QSPI_CORE_CORE_RISR_MSTIR_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_RISR_MSTIR_ACTIVE (0x1UL)

/* XRXOIR @Bit 6 : XIP Receive FIFO Overflow Raw Interrupt Status */
  #define QSPI_CORE_CORE_RISR_XRXOIR_Pos (6UL)
  #define QSPI_CORE_CORE_RISR_XRXOIR_Msk (0x1UL << QSPI_CORE_CORE_RISR_XRXOIR_Pos)
  #define QSPI_CORE_CORE_RISR_XRXOIR_Min (0x0UL)
  #define QSPI_CORE_CORE_RISR_XRXOIR_Max (0x1UL)
  #define QSPI_CORE_CORE_RISR_XRXOIR_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_RISR_XRXOIR_ACTIVE (0x1UL)

/* TXUIR @Bit 7 : Transmit FIFO Underflow Interrupt Raw Status */
  #define QSPI_CORE_CORE_RISR_TXUIR_Pos (7UL)
  #define QSPI_CORE_CORE_RISR_TXUIR_Msk (0x1UL << QSPI_CORE_CORE_RISR_TXUIR_Pos)
  #define QSPI_CORE_CORE_RISR_TXUIR_Min (0x0UL)
  #define QSPI_CORE_CORE_RISR_TXUIR_Max (0x1UL)
  #define QSPI_CORE_CORE_RISR_TXUIR_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_RISR_TXUIR_ACTIVE (0x1UL)

/* AXIER @Bit 8 : AXI Error Interrupt Raw Status */
  #define QSPI_CORE_CORE_RISR_AXIER_Pos (8UL)
  #define QSPI_CORE_CORE_RISR_AXIER_Msk (0x1UL << QSPI_CORE_CORE_RISR_AXIER_Pos)
  #define QSPI_CORE_CORE_RISR_AXIER_Min (0x0UL)
  #define QSPI_CORE_CORE_RISR_AXIER_Max (0x1UL)
  #define QSPI_CORE_CORE_RISR_AXIER_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_RISR_AXIER_ACTIVE (0x1UL)

/* RSVD9RISR @Bit 9 : (unspecified) */
  #define QSPI_CORE_CORE_RISR_RSVD9RISR_Pos (9UL)
  #define QSPI_CORE_CORE_RISR_RSVD9RISR_Msk (0x1UL << QSPI_CORE_CORE_RISR_RSVD9RISR_Pos)

/* SPITER @Bit 10 : SPI Transmit Error Interrupt status. */
  #define QSPI_CORE_CORE_RISR_SPITER_Pos (10UL)
  #define QSPI_CORE_CORE_RISR_SPITER_Msk (0x1UL << QSPI_CORE_CORE_RISR_SPITER_Pos)
  #define QSPI_CORE_CORE_RISR_SPITER_Min (0x0UL)
  #define QSPI_CORE_CORE_RISR_SPITER_Max (0x1UL)
  #define QSPI_CORE_CORE_RISR_SPITER_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_RISR_SPITER_ACTIVE (0x1UL)

/* DONER @Bit 11 : SSI Done Interrupt Raw Status */
  #define QSPI_CORE_CORE_RISR_DONER_Pos (11UL)
  #define QSPI_CORE_CORE_RISR_DONER_Msk (0x1UL << QSPI_CORE_CORE_RISR_DONER_Pos)
  #define QSPI_CORE_CORE_RISR_DONER_Min (0x0UL)
  #define QSPI_CORE_CORE_RISR_DONER_Max (0x1UL)
  #define QSPI_CORE_CORE_RISR_DONER_INACTIVE (0x0UL)
  #define QSPI_CORE_CORE_RISR_DONER_ACTIVE (0x1UL)

/* RSVD1231RISR @Bits 12..31 : (unspecified) */
  #define QSPI_CORE_CORE_RISR_RSVD1231RISR_Pos (12UL)
  #define QSPI_CORE_CORE_RISR_RSVD1231RISR_Msk (0xFFFFFUL << QSPI_CORE_CORE_RISR_RSVD1231RISR_Pos) /*!< Bit mask of RSVD1231RISR
                                                                            field.*/


/* QSPI_CORE_CORE_TXEICR: Transmit FIFO Error Interrupt Clear Register Register */
  #define QSPI_CORE_CORE_TXEICR_ResetValue (0x00000000UL)

/* TXEICR @Bit 0 : Clear Transmit FIFO Overflow/Underflow Interrupt. */
  #define QSPI_CORE_CORE_TXEICR_TXEICR_Pos (0UL)
  #define QSPI_CORE_CORE_TXEICR_TXEICR_Msk (0x1UL << QSPI_CORE_CORE_TXEICR_TXEICR_Pos)

/* RSVDTXEICR @Bits 1..31 : (unspecified) */
  #define QSPI_CORE_CORE_TXEICR_RSVDTXEICR_Pos (1UL)
  #define QSPI_CORE_CORE_TXEICR_RSVDTXEICR_Msk (0x7FFFFFFFUL << QSPI_CORE_CORE_TXEICR_RSVDTXEICR_Pos) /*!< Bit mask of
                                                                            RSVDTXEICR field.*/


/* QSPI_CORE_CORE_RXOICR: Receive FIFO Overflow Interrupt Clear Register */
  #define QSPI_CORE_CORE_RXOICR_ResetValue (0x00000000UL)

/* RXOICR @Bit 0 : Clear Receive FIFO Overflow Interrupt. */
  #define QSPI_CORE_CORE_RXOICR_RXOICR_Pos (0UL)
  #define QSPI_CORE_CORE_RXOICR_RXOICR_Msk (0x1UL << QSPI_CORE_CORE_RXOICR_RXOICR_Pos)

/* RSVDRXOICR @Bits 1..31 : (unspecified) */
  #define QSPI_CORE_CORE_RXOICR_RSVDRXOICR_Pos (1UL)
  #define QSPI_CORE_CORE_RXOICR_RSVDRXOICR_Msk (0x7FFFFFFFUL << QSPI_CORE_CORE_RXOICR_RSVDRXOICR_Pos) /*!< Bit mask of
                                                                            RSVDRXOICR field.*/


/* QSPI_CORE_CORE_RXUICR: Receive FIFO Underflow Interrupt Clear Register */
  #define QSPI_CORE_CORE_RXUICR_ResetValue (0x00000000UL)

/* RXUICR @Bit 0 : Clear Receive FIFO Underflow Interrupt. */
  #define QSPI_CORE_CORE_RXUICR_RXUICR_Pos (0UL)
  #define QSPI_CORE_CORE_RXUICR_RXUICR_Msk (0x1UL << QSPI_CORE_CORE_RXUICR_RXUICR_Pos)

/* RSVDRXUICR @Bits 1..31 : (unspecified) */
  #define QSPI_CORE_CORE_RXUICR_RSVDRXUICR_Pos (1UL)
  #define QSPI_CORE_CORE_RXUICR_RSVDRXUICR_Msk (0x7FFFFFFFUL << QSPI_CORE_CORE_RXUICR_RSVDRXUICR_Pos) /*!< Bit mask of
                                                                            RSVDRXUICR field.*/


/* QSPI_CORE_CORE_MSTICR: Multi-Controller Interrupt Clear Register */
  #define QSPI_CORE_CORE_MSTICR_ResetValue (0x00000000UL)

/* MSTICR @Bit 0 : Clear Multi-Controller Contention Interrupt. */
  #define QSPI_CORE_CORE_MSTICR_MSTICR_Pos (0UL)
  #define QSPI_CORE_CORE_MSTICR_MSTICR_Msk (0x1UL << QSPI_CORE_CORE_MSTICR_MSTICR_Pos)

/* RSVDMSTICR @Bits 1..31 : (unspecified) */
  #define QSPI_CORE_CORE_MSTICR_RSVDMSTICR_Pos (1UL)
  #define QSPI_CORE_CORE_MSTICR_RSVDMSTICR_Msk (0x7FFFFFFFUL << QSPI_CORE_CORE_MSTICR_RSVDMSTICR_Pos) /*!< Bit mask of
                                                                            RSVDMSTICR field.*/


/* QSPI_CORE_CORE_ICR: Interrupt Clear Register */
  #define QSPI_CORE_CORE_ICR_ResetValue (0x00000000UL)

/* ICR @Bit 0 : Clear Interrupts. */
  #define QSPI_CORE_CORE_ICR_ICR_Pos (0UL)
  #define QSPI_CORE_CORE_ICR_ICR_Msk (0x1UL << QSPI_CORE_CORE_ICR_ICR_Pos)

/* RSVDICR @Bits 1..31 : (unspecified) */
  #define QSPI_CORE_CORE_ICR_RSVDICR_Pos (1UL)
  #define QSPI_CORE_CORE_ICR_RSVDICR_Msk (0x7FFFFFFFUL << QSPI_CORE_CORE_ICR_RSVDICR_Pos)


/* QSPI_CORE_CORE_DMACR: DMA Control Register */
  #define QSPI_CORE_CORE_DMACR_ResetValue (0x00000000UL)

/* RDMAE @Bit 0 : Receive DMA Enable. This bit enables/disables the receive FIFO DMA channel. */
  #define QSPI_CORE_CORE_DMACR_RDMAE_Pos (0UL)
  #define QSPI_CORE_CORE_DMACR_RDMAE_Msk (0x1UL << QSPI_CORE_CORE_DMACR_RDMAE_Pos)
  #define QSPI_CORE_CORE_DMACR_RDMAE_Min (0x0UL)
  #define QSPI_CORE_CORE_DMACR_RDMAE_Max (0x1UL)
  #define QSPI_CORE_CORE_DMACR_RDMAE_DISABLE (0x0UL)
  #define QSPI_CORE_CORE_DMACR_RDMAE_ENABLED (0x1UL)

/* TDMAE @Bit 1 : Transmit DMA Enable. This bit enables/disables the transmit FIFO DMA channel. */
  #define QSPI_CORE_CORE_DMACR_TDMAE_Pos (1UL)
  #define QSPI_CORE_CORE_DMACR_TDMAE_Msk (0x1UL << QSPI_CORE_CORE_DMACR_TDMAE_Pos)
  #define QSPI_CORE_CORE_DMACR_TDMAE_Min (0x0UL)
  #define QSPI_CORE_CORE_DMACR_TDMAE_Max (0x1UL)
  #define QSPI_CORE_CORE_DMACR_TDMAE_DISABLE (0x0UL)
  #define QSPI_CORE_CORE_DMACR_TDMAE_ENABLED (0x1UL)

/* IDMAE @Bit 2 : Internal DMA Enable. This bit should be enabled only when CTRLR0.FRF = 0 (Motorola SPI) and CTRLR0.SPI_FRF >
                  0. */

  #define QSPI_CORE_CORE_DMACR_IDMAE_Pos (2UL)
  #define QSPI_CORE_CORE_DMACR_IDMAE_Msk (0x1UL << QSPI_CORE_CORE_DMACR_IDMAE_Pos)

/* ATW @Bits 3..4 : AXI transfer width for DMA transfers mapped to arsize/awsize. This value must be less than or equal to
                    SSIC_AXI_DW. Values: */

  #define QSPI_CORE_CORE_DMACR_ATW_Pos (3UL)
  #define QSPI_CORE_CORE_DMACR_ATW_Msk (0x3UL << QSPI_CORE_CORE_DMACR_ATW_Pos)

/* RSVDDMACR5 @Bit 5 : (unspecified) */
  #define QSPI_CORE_CORE_DMACR_RSVDDMACR5_Pos (5UL)
  #define QSPI_CORE_CORE_DMACR_RSVDDMACR5_Msk (0x1UL << QSPI_CORE_CORE_DMACR_RSVDDMACR5_Pos)

/* AINC @Bit 6 : Address Increment. Indicates whether to increment the AXI address on every transfer. */
  #define QSPI_CORE_CORE_DMACR_AINC_Pos (6UL)
  #define QSPI_CORE_CORE_DMACR_AINC_Msk (0x1UL << QSPI_CORE_CORE_DMACR_AINC_Pos)

/* RSVDDMACR7 @Bit 7 : (unspecified) */
  #define QSPI_CORE_CORE_DMACR_RSVDDMACR7_Pos (7UL)
  #define QSPI_CORE_CORE_DMACR_RSVDDMACR7_Msk (0x1UL << QSPI_CORE_CORE_DMACR_RSVDDMACR7_Pos)

/* ACACHE @Bits 8..11 : AXI arcache/awcache signal value. */
  #define QSPI_CORE_CORE_DMACR_ACACHE_Pos (8UL)
  #define QSPI_CORE_CORE_DMACR_ACACHE_Msk (0xFUL << QSPI_CORE_CORE_DMACR_ACACHE_Pos)

/* APROT @Bits 12..14 : AXI arprot/awprot signal value. */
  #define QSPI_CORE_CORE_DMACR_APROT_Pos (12UL)
  #define QSPI_CORE_CORE_DMACR_APROT_Msk (0x7UL << QSPI_CORE_CORE_DMACR_APROT_Pos)

/* AID @Bits 15..20 : AXI awid/arid signal value. */
  #define QSPI_CORE_CORE_DMACR_AID_Pos (15UL)
  #define QSPI_CORE_CORE_DMACR_AID_Msk (0x3FUL << QSPI_CORE_CORE_DMACR_AID_Pos)

/* RSVDDMACR @Bits 21..31 : (unspecified) */
  #define QSPI_CORE_CORE_DMACR_RSVDDMACR_Pos (21UL)
  #define QSPI_CORE_CORE_DMACR_RSVDDMACR_Msk (0x7FFUL << QSPI_CORE_CORE_DMACR_RSVDDMACR_Pos)


/* QSPI_CORE_CORE_DMATDLR: DMA Transmit Data Level */
  #define QSPI_CORE_CORE_DMATDLR_ResetValue (0x00000000UL)

/* DMATDL @Bits 0..3 : Transmit Data Level. This bit field controls the level at which a DMA request is made by the transmit
                       logic. It is equal to the watermark level; that is, the dma_tx_req signal is generated when the number of
                       valid data entries in the transmit FIFO is equal to or below this field value, and TDMAE = 1. */

  #define QSPI_CORE_CORE_DMATDLR_DMATDL_Pos (0UL)
  #define QSPI_CORE_CORE_DMATDLR_DMATDL_Msk (0xFUL << QSPI_CORE_CORE_DMATDLR_DMATDL_Pos)

/* RSVDDMATDLR @Bits 4..31 : (unspecified) */
  #define QSPI_CORE_CORE_DMATDLR_RSVDDMATDLR_Pos (4UL)
  #define QSPI_CORE_CORE_DMATDLR_RSVDDMATDLR_Msk (0xFFFFFFFUL << QSPI_CORE_CORE_DMATDLR_RSVDDMATDLR_Pos) /*!< Bit mask of
                                                                            RSVDDMATDLR field.*/


/* QSPI_CORE_CORE_DMARDLR: DMA Receive Data Level */
  #define QSPI_CORE_CORE_DMARDLR_ResetValue (0x00000000UL)

/* DMARDL @Bits 0..3 : Receive Data Level. This bit field controls the level at which a DMA request is made by the receive
                       logic. The watermark level = DMARDL+1; that is, dma_rx_req is generated when the number of valid data
                       entries in the receive FIFO is equal to or above this field value + 1, and RDMAE=1. */

  #define QSPI_CORE_CORE_DMARDLR_DMARDL_Pos (0UL)
  #define QSPI_CORE_CORE_DMARDLR_DMARDL_Msk (0xFUL << QSPI_CORE_CORE_DMARDLR_DMARDL_Pos)

/* RSVDDMARDLR @Bits 4..31 : (unspecified) */
  #define QSPI_CORE_CORE_DMARDLR_RSVDDMARDLR_Pos (4UL)
  #define QSPI_CORE_CORE_DMARDLR_RSVDDMARDLR_Msk (0xFFFFFFFUL << QSPI_CORE_CORE_DMARDLR_RSVDDMARDLR_Pos) /*!< Bit mask of
                                                                            RSVDDMARDLR field.*/


/* QSPI_CORE_CORE_IDR: Identification Register */
  #define QSPI_CORE_CORE_IDR_ResetValue (0x51535049UL)

/* IDCODE @Bits 0..31 : Identification code. The register contains the identification code of the peripheral, which is written
                        into the register at configuration time using CoreConsultant. */

  #define QSPI_CORE_CORE_IDR_IDCODE_Pos (0UL)
  #define QSPI_CORE_CORE_IDR_IDCODE_Msk (0xFFFFFFFFUL << QSPI_CORE_CORE_IDR_IDCODE_Pos)


/* QSPI_CORE_CORE_SSICVERSIONID: QSPI CORE component version */
  #define QSPI_CORE_CORE_SSICVERSIONID_ResetValue (0x3230302AUL)

/* SSICCOMPVERSION @Bits 0..31 : Contains the hex representation of the Synopsys component version. Consists of ASCII value for
                                 each number in the version, followed by *. For example 31_30_33_2A represents the version
                                 1.03*. */

  #define QSPI_CORE_CORE_SSICVERSIONID_SSICCOMPVERSION_Pos (0UL)
  #define QSPI_CORE_CORE_SSICVERSIONID_SSICCOMPVERSION_Msk (0xFFFFFFFFUL << QSPI_CORE_CORE_SSICVERSIONID_SSICCOMPVERSION_Pos)
                                                                            /*!< Bit mask of SSICCOMPVERSION field.*/


/* QSPI_CORE_CORE_DR: QSPI CORE Data Register */
  #define QSPI_CORE_CORE_DR_MaxCount (36UL)
  #define QSPI_CORE_CORE_DR_MaxIndex (35UL)
  #define QSPI_CORE_CORE_DR_MinIndex (0UL)
  #define QSPI_CORE_CORE_DR_ResetValue (0x00000000UL)

/* DR @Bits 0..31 : Data Register. When writing to this register, you must right-justify the data. Read data are automatically
                    right-justified. */

  #define QSPI_CORE_CORE_DR_DR_Pos (0UL)
  #define QSPI_CORE_CORE_DR_DR_Msk (0xFFFFFFFFUL << QSPI_CORE_CORE_DR_DR_Pos)


/* QSPI_CORE_CORE_RXSAMPLEDELAY: RX Sample Delay Register */
  #define QSPI_CORE_CORE_RXSAMPLEDELAY_ResetValue (0x00000000UL)

/* RSD @Bits 0..7 : Receive Data (rxd) Sample Delay. This register is used to delay the sample of the rxd input port. Each value
                    */

  #define QSPI_CORE_CORE_RXSAMPLEDELAY_RSD_Pos (0UL)
  #define QSPI_CORE_CORE_RXSAMPLEDELAY_RSD_Msk (0xFFUL << QSPI_CORE_CORE_RXSAMPLEDELAY_RSD_Pos)

/* RSVD0RXSAMPLEDELAY @Bits 8..15 : (unspecified) */
  #define QSPI_CORE_CORE_RXSAMPLEDELAY_RSVD0RXSAMPLEDELAY_Pos (8UL)
  #define QSPI_CORE_CORE_RXSAMPLEDELAY_RSVD0RXSAMPLEDELAY_Msk (0xFFUL << QSPI_CORE_CORE_RXSAMPLEDELAY_RSVD0RXSAMPLEDELAY_Pos)
                                                                            /*!< Bit mask of RSVD0RXSAMPLEDELAY field.*/

/* SE @Bit 16 : Receive Data (rxd) Sampling Edge. This register is used to decide the sampling edge for RXD signal with ssi_clk.
                Then this bit is set to 1 then negative edge of ssi_clk will be used to sample the incoming data, otherwise
                positive edge will be used for sampling. */

  #define QSPI_CORE_CORE_RXSAMPLEDELAY_SE_Pos (16UL)
  #define QSPI_CORE_CORE_RXSAMPLEDELAY_SE_Msk (0x1UL << QSPI_CORE_CORE_RXSAMPLEDELAY_SE_Pos)

/* RSVD1RXSAMPLEDELAY @Bits 17..31 : (unspecified) */
  #define QSPI_CORE_CORE_RXSAMPLEDELAY_RSVD1RXSAMPLEDELAY_Pos (17UL)
  #define QSPI_CORE_CORE_RXSAMPLEDELAY_RSVD1RXSAMPLEDELAY_Msk (0x7FFFUL << QSPI_CORE_CORE_RXSAMPLEDELAY_RSVD1RXSAMPLEDELAY_Pos)
                                                                            /*!< Bit mask of RSVD1RXSAMPLEDELAY field.*/


/* QSPI_CORE_CORE_SPICTRLR0: SPI_CTRLR0 - SPI Control Register */
  #define QSPI_CORE_CORE_SPICTRLR0_ResetValue (0x40000200UL)

/* TRANSTYPE @Bits 0..1 : Address and instruction transfer format. */
  #define QSPI_CORE_CORE_SPICTRLR0_TRANSTYPE_Pos (0UL)
  #define QSPI_CORE_CORE_SPICTRLR0_TRANSTYPE_Msk (0x3UL << QSPI_CORE_CORE_SPICTRLR0_TRANSTYPE_Pos) /*!< Bit mask of TRANSTYPE
                                                                            field.*/
  #define QSPI_CORE_CORE_SPICTRLR0_TRANSTYPE_Min (0x0UL)
  #define QSPI_CORE_CORE_SPICTRLR0_TRANSTYPE_Max (0x3UL)
  #define QSPI_CORE_CORE_SPICTRLR0_TRANSTYPE_TT0 (0x0UL)
  #define QSPI_CORE_CORE_SPICTRLR0_TRANSTYPE_TT1 (0x1UL) /*!< Instruction will be sent in Standard SPI Mode and Address will be
                                                              sent in the mode specified by CTRLR0.SPI_FRF.*/
  #define QSPI_CORE_CORE_SPICTRLR0_TRANSTYPE_TT2 (0x2UL) /*!< Both Instruction and Address will be sent in the mode specified by
                                                              SPI_FRF.*/
  #define QSPI_CORE_CORE_SPICTRLR0_TRANSTYPE_TT3 (0x3UL) /*!< Dual Octal mode, the address and instruction are transferred in
                                                              octal mode and data is transferred on 16 data lines.*/

/* ADDRL @Bits 2..5 : This bit defines Length of Address to be transmitted. Only after this much bits are programmed in to the
                      FIFO the transfer can begin. */

  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_Pos (2UL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_Msk (0xFUL << QSPI_CORE_CORE_SPICTRLR0_ADDRL_Pos)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_Min (0x0UL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_Max (0xFUL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL0 (0x0UL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL4 (0x1UL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL8 (0x2UL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL12 (0x3UL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL16 (0x4UL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL20 (0x5UL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL24 (0x6UL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL28 (0x7UL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL32 (0x8UL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL36 (0x9UL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL40 (0xAUL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL44 (0xBUL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL48 (0xCUL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL52 (0xDUL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL56 (0xEUL)
  #define QSPI_CORE_CORE_SPICTRLR0_ADDRL_ADDRL60 (0xFUL)

/* RSVDSPICTRLR06 @Bit 6 : (unspecified) */
  #define QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR06_Pos (6UL)
  #define QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR06_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR06_Pos) /*!< Bit mask of
                                                                            RSVDSPICTRLR06 field.*/

/* XIPMDBITEN @Bit 7 : Mode bits enable in XIP mode. If this bit is set to 1, then in XIP mode of operation QSPI CORE will
                       insert mode bits after the address phase. These bits are set in register XIP_MODE_BITS register. */

  #define QSPI_CORE_CORE_SPICTRLR0_XIPMDBITEN_Pos (7UL)
  #define QSPI_CORE_CORE_SPICTRLR0_XIPMDBITEN_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_XIPMDBITEN_Pos) /*!< Bit mask of XIPMDBITEN
                                                                            field.*/

/* INSTL @Bits 8..9 : Enhanced SPI mode instruction length in bits. */
  #define QSPI_CORE_CORE_SPICTRLR0_INSTL_Pos (8UL)
  #define QSPI_CORE_CORE_SPICTRLR0_INSTL_Msk (0x3UL << QSPI_CORE_CORE_SPICTRLR0_INSTL_Pos)
  #define QSPI_CORE_CORE_SPICTRLR0_INSTL_Min (0x0UL)
  #define QSPI_CORE_CORE_SPICTRLR0_INSTL_Max (0x3UL)
  #define QSPI_CORE_CORE_SPICTRLR0_INSTL_INSTL0 (0x0UL)
  #define QSPI_CORE_CORE_SPICTRLR0_INSTL_INSTL4 (0x1UL)
  #define QSPI_CORE_CORE_SPICTRLR0_INSTL_INSTL8 (0x2UL)
  #define QSPI_CORE_CORE_SPICTRLR0_INSTL_INSTL16 (0x3UL)

/* RSVDSPICTRLR010 @Bit 10 : (unspecified) */
  #define QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR010_Pos (10UL)
  #define QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR010_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR010_Pos) /*!< Bit mask of
                                                                            RSVDSPICTRLR010 field.*/

/* WAITCYCLES @Bits 11..15 : Wait cycles in Enhanced SPI mode between control frames transmit and data reception. Specified as
                             number of SPI clock cycles. */

  #define QSPI_CORE_CORE_SPICTRLR0_WAITCYCLES_Pos (11UL)
  #define QSPI_CORE_CORE_SPICTRLR0_WAITCYCLES_Msk (0x1FUL << QSPI_CORE_CORE_SPICTRLR0_WAITCYCLES_Pos) /*!< Bit mask of
                                                                            WAITCYCLES field.*/

/* SPIDDREN @Bit 16 : SPI DDR Enable bit. This will enable Dual-data rate transfers in Enhanced SPI frame formats of SPI. */
  #define QSPI_CORE_CORE_SPICTRLR0_SPIDDREN_Pos (16UL)
  #define QSPI_CORE_CORE_SPICTRLR0_SPIDDREN_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_SPIDDREN_Pos) /*!< Bit mask of SPIDDREN
                                                                            field.*/

/* INSTDDREN @Bit 17 : Instruction DDR Enable bit. This will enable Dual-data rate transfer for Instruction phase. */
  #define QSPI_CORE_CORE_SPICTRLR0_INSTDDREN_Pos (17UL)
  #define QSPI_CORE_CORE_SPICTRLR0_INSTDDREN_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_INSTDDREN_Pos) /*!< Bit mask of INSTDDREN
                                                                            field.*/

/* SPIRXDSEN @Bit 18 : Read data strobe enable bit. Once this bit is set to 1 QSPI CORE will use Read data strobe (rxds) to
                       capture read data. */

  #define QSPI_CORE_CORE_SPICTRLR0_SPIRXDSEN_Pos (18UL)
  #define QSPI_CORE_CORE_SPICTRLR0_SPIRXDSEN_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_SPIRXDSEN_Pos) /*!< Bit mask of SPIRXDSEN
                                                                            field.*/

/* XIPDFSHC @Bit 19 : Fix DFS for XIP transfers. If this bit is set to 1 then data frame size for XIP transfers will be fixed to
                      the programmed value in CTRLR0.DFS. The number of data frames to fetch will be determined by HSIZE and
                      HBURST signals. If this bit is set to 0 then data frame size and number of data frames to fetch will be
                      determined by HSIZE and HBURST signals */

  #define QSPI_CORE_CORE_SPICTRLR0_XIPDFSHC_Pos (19UL)
  #define QSPI_CORE_CORE_SPICTRLR0_XIPDFSHC_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_XIPDFSHC_Pos) /*!< Bit mask of XIPDFSHC
                                                                            field.*/

/* XIPINSTEN @Bit 20 : XIP instruction enable bit. If this bit is set to 1 then XIP transfers will also have instruction phase.
                       The instruction op-codes will be chosen from XIP_INCR_INST or XIP_WRAP_INST registers bases on AHB
                       transfer type. */

  #define QSPI_CORE_CORE_SPICTRLR0_XIPINSTEN_Pos (20UL)
  #define QSPI_CORE_CORE_SPICTRLR0_XIPINSTEN_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_XIPINSTEN_Pos) /*!< Bit mask of XIPINSTEN
                                                                            field.*/

/* SSICXIPCONTXFEREN @Bit 21 : Enable continuous transfer in XIP mode. If this bit is set to 1 then continuous transfer mode in
                               XIP will be enabled, in this mode QSPI CORE will keep target selected until a non-XIP transfer is
                               detected on the AHB interface. */

  #define QSPI_CORE_CORE_SPICTRLR0_SSICXIPCONTXFEREN_Pos (21UL)
  #define QSPI_CORE_CORE_SPICTRLR0_SSICXIPCONTXFEREN_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_SSICXIPCONTXFEREN_Pos) /*!< Bit mask
                                                                            of SSICXIPCONTXFEREN field.*/

/* RSVDSPICTRLR022 @Bit 22 : (unspecified) */
  #define QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR022_Pos (22UL)
  #define QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR022_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR022_Pos) /*!< Bit mask of
                                                                            RSVDSPICTRLR022 field.*/

/* RXDSVLEN @Bit 23 : RXDS variable latency enable bit. */
  #define QSPI_CORE_CORE_SPICTRLR0_RXDSVLEN_Pos (23UL)
  #define QSPI_CORE_CORE_SPICTRLR0_RXDSVLEN_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_RXDSVLEN_Pos) /*!< Bit mask of RXDSVLEN
                                                                            field.*/

/* SPIDMEN @Bit 24 : SPI data mask enable bit. */
  #define QSPI_CORE_CORE_SPICTRLR0_SPIDMEN_Pos (24UL)
  #define QSPI_CORE_CORE_SPICTRLR0_SPIDMEN_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_SPIDMEN_Pos)

/* SPIRXDSSIGEN @Bit 25 : Enable rxds signaling during address and command phase of Hyperbus transfer. */
  #define QSPI_CORE_CORE_SPICTRLR0_SPIRXDSSIGEN_Pos (25UL)
  #define QSPI_CORE_CORE_SPICTRLR0_SPIRXDSSIGEN_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_SPIRXDSSIGEN_Pos) /*!< Bit mask of
                                                                            SPIRXDSSIGEN field.*/

/* XIPMBL @Bits 26..27 : XIP Mode bits length. Sets the length of mode bits in XIP mode of operation. These bits are valid only
                         when SPI_CTRLR0.XIP_MD_BIT_EN is set to 1. */

  #define QSPI_CORE_CORE_SPICTRLR0_XIPMBL_Pos (26UL)
  #define QSPI_CORE_CORE_SPICTRLR0_XIPMBL_Msk (0x3UL << QSPI_CORE_CORE_SPICTRLR0_XIPMBL_Pos)
  #define QSPI_CORE_CORE_SPICTRLR0_XIPMBL_Min (0x0UL)
  #define QSPI_CORE_CORE_SPICTRLR0_XIPMBL_Max (0x3UL)
  #define QSPI_CORE_CORE_SPICTRLR0_XIPMBL_MBL2 (0x0UL)
  #define QSPI_CORE_CORE_SPICTRLR0_XIPMBL_MBL4 (0x1UL)
  #define QSPI_CORE_CORE_SPICTRLR0_XIPMBL_MBL8 (0x2UL)
  #define QSPI_CORE_CORE_SPICTRLR0_XIPMBL_MBL16 (0x3UL)

/* RSVDSPICTRLR028 @Bit 28 : (unspecified) */
  #define QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR028_Pos (28UL)
  #define QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR028_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR028_Pos) /*!< Bit mask of
                                                                            RSVDSPICTRLR028 field.*/

/* XIPPREFETCHEN @Bit 29 : Enables XIP pre-fetch functionality in QSPI CORE. */
  #define QSPI_CORE_CORE_SPICTRLR0_XIPPREFETCHEN_Pos (29UL)
  #define QSPI_CORE_CORE_SPICTRLR0_XIPPREFETCHEN_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_XIPPREFETCHEN_Pos) /*!< Bit mask of
                                                                            XIPPREFETCHEN field.*/

/* CLKSTRETCHEN @Bit 30 : Enables clock stretching capability in SPI transfers. */
  #define QSPI_CORE_CORE_SPICTRLR0_CLKSTRETCHEN_Pos (30UL)
  #define QSPI_CORE_CORE_SPICTRLR0_CLKSTRETCHEN_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_CLKSTRETCHEN_Pos) /*!< Bit mask of
                                                                            CLKSTRETCHEN field.*/

/* RSVDSPICTRLR0 @Bit 31 : (unspecified) */
  #define QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR0_Pos (31UL)
  #define QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR0_Msk (0x1UL << QSPI_CORE_CORE_SPICTRLR0_RSVDSPICTRLR0_Pos) /*!< Bit mask of
                                                                            RSVDSPICTRLR0 field.*/


/* QSPI_CORE_CORE_SPICTRLR1: SPI Control 1 register */
  #define QSPI_CORE_CORE_SPICTRLR1_ResetValue (0x00000000UL)

/* DYNWS @Bits 0..2 : SPI Dynamic Wait states field. */
  #define QSPI_CORE_CORE_SPICTRLR1_DYNWS_Pos (0UL)
  #define QSPI_CORE_CORE_SPICTRLR1_DYNWS_Msk (0x7UL << QSPI_CORE_CORE_SPICTRLR1_DYNWS_Pos)

/* RSVDSPICTRLR137 @Bits 3..7 : (unspecified) */
  #define QSPI_CORE_CORE_SPICTRLR1_RSVDSPICTRLR137_Pos (3UL)
  #define QSPI_CORE_CORE_SPICTRLR1_RSVDSPICTRLR137_Msk (0x1FUL << QSPI_CORE_CORE_SPICTRLR1_RSVDSPICTRLR137_Pos) /*!< Bit mask of
                                                                            RSVDSPICTRLR137 field.*/

/* MAXWS @Bits 8..11 : Maximum wait cycles allowed per transaction. */
  #define QSPI_CORE_CORE_SPICTRLR1_MAXWS_Pos (8UL)
  #define QSPI_CORE_CORE_SPICTRLR1_MAXWS_Msk (0xFUL << QSPI_CORE_CORE_SPICTRLR1_MAXWS_Pos)

/* RSVDSPICTRLR11215 @Bits 12..15 : (unspecified) */
  #define QSPI_CORE_CORE_SPICTRLR1_RSVDSPICTRLR11215_Pos (12UL)
  #define QSPI_CORE_CORE_SPICTRLR1_RSVDSPICTRLR11215_Msk (0xFUL << QSPI_CORE_CORE_SPICTRLR1_RSVDSPICTRLR11215_Pos) /*!< Bit mask
                                                                            of RSVDSPICTRLR11215 field.*/

/* CSMINHIGH @Bits 16..19 : Chip-Select Minimum HIGH period. */
  #define QSPI_CORE_CORE_SPICTRLR1_CSMINHIGH_Pos (16UL)
  #define QSPI_CORE_CORE_SPICTRLR1_CSMINHIGH_Msk (0xFUL << QSPI_CORE_CORE_SPICTRLR1_CSMINHIGH_Pos) /*!< Bit mask of CSMINHIGH
                                                                            field.*/

/* RSVDSPICTRLR12031 @Bits 20..31 : (unspecified) */
  #define QSPI_CORE_CORE_SPICTRLR1_RSVDSPICTRLR12031_Pos (20UL)
  #define QSPI_CORE_CORE_SPICTRLR1_RSVDSPICTRLR12031_Msk (0xFFFUL << QSPI_CORE_CORE_SPICTRLR1_RSVDSPICTRLR12031_Pos) /*!< Bit
                                                                            mask of RSVDSPICTRLR12031 field.*/


/* QSPI_CORE_CORE_SPITECR: SPI Transmit Error Interrupt Clear Register */
  #define QSPI_CORE_CORE_SPITECR_ResetValue (0x00000000UL)

/* SPITECR @Bit 0 : Clear SPI Transmit Error interrupt. */
  #define QSPI_CORE_CORE_SPITECR_SPITECR_Pos (0UL)
  #define QSPI_CORE_CORE_SPITECR_SPITECR_Msk (0x1UL << QSPI_CORE_CORE_SPITECR_SPITECR_Pos)

/* RSVDSPITECR @Bits 1..31 : (unspecified) */
  #define QSPI_CORE_CORE_SPITECR_RSVDSPITECR_Pos (1UL)
  #define QSPI_CORE_CORE_SPITECR_RSVDSPITECR_Msk (0x7FFFFFFFUL << QSPI_CORE_CORE_SPITECR_RSVDSPITECR_Pos) /*!< Bit mask of
                                                                            RSVDSPITECR field.*/



/* ==================================================== Struct QSPI_CORE ===================================================== */
/**
  * @brief CORE [QSPI_CORE] (unspecified)
  */
typedef struct {
  __IOM NRF_QSPI_CORE_CORE_Type CORE;
} NRF_QSPI_CORE_Type;

/* ======================================================= Struct QSPI ======================================================= */
/**
  * @brief Quad serial peripheral interface
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_RESET;
    __IM uint32_t RESERVED[62];
    __IOM uint32_t EVENTS_CORE;
    __IOM NRF_QSPI_EVENTS_DMA_Type EVENTS_DMA;
    __IOM uint32_t EVENTS_IDLE;                      /*!< (@ 0x00000134) This event signifies that the QSPI core is no longer
                                                                         busy*/
    __IM uint32_t RESERVED1[50];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED2[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED3[60];
    __IOM uint32_t ENABLE;
    __IOM NRF_QSPI_CONFIG_Type CONFIG;
    __IM uint32_t RESERVED4;
    __IOM NRF_QSPI_FORMAT_Type FORMAT;
    __IM uint32_t RESERVED5[54];
    __IOM NRF_QSPI_DMA_Type DMA;
    __IM uint32_t RESERVED6[189];
    __IOM NRF_QSPI_CORE_Type CORE;
  } NRF_QSPI_Type;

/* QSPI_TASKS_START: Start operation. */
  #define QSPI_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start operation. */
  #define QSPI_TASKS_START_TASKS_START_Pos (0UL)
  #define QSPI_TASKS_START_TASKS_START_Msk (0x1UL << QSPI_TASKS_START_TASKS_START_Pos)
  #define QSPI_TASKS_START_TASKS_START_Min (0x1UL)
  #define QSPI_TASKS_START_TASKS_START_Max (0x1UL)
  #define QSPI_TASKS_START_TASKS_START_Trigger (0x1UL)


/* QSPI_TASKS_RESET: Reset the QSPI */
  #define QSPI_TASKS_RESET_ResetValue (0x00000000UL)

/* TASKS_RESET @Bit 0 : Reset the QSPI */
  #define QSPI_TASKS_RESET_TASKS_RESET_Pos (0UL)
  #define QSPI_TASKS_RESET_TASKS_RESET_Msk (0x1UL << QSPI_TASKS_RESET_TASKS_RESET_Pos)
  #define QSPI_TASKS_RESET_TASKS_RESET_Min (0x1UL)
  #define QSPI_TASKS_RESET_TASKS_RESET_Max (0x1UL)
  #define QSPI_TASKS_RESET_TASKS_RESET_Trigger (0x1UL)


/* QSPI_EVENTS_CORE: Interrupt from the QSPI core */
  #define QSPI_EVENTS_CORE_ResetValue (0x00000000UL)

/* EVENTS_CORE @Bit 0 : Interrupt from the QSPI core */
  #define QSPI_EVENTS_CORE_EVENTS_CORE_Pos (0UL)
  #define QSPI_EVENTS_CORE_EVENTS_CORE_Msk (0x1UL << QSPI_EVENTS_CORE_EVENTS_CORE_Pos)
  #define QSPI_EVENTS_CORE_EVENTS_CORE_Min (0x0UL)
  #define QSPI_EVENTS_CORE_EVENTS_CORE_Max (0x1UL)
  #define QSPI_EVENTS_CORE_EVENTS_CORE_NotGenerated (0x0UL)
  #define QSPI_EVENTS_CORE_EVENTS_CORE_Generated (0x1UL)


/* QSPI_EVENTS_IDLE: This event signifies that the QSPI core is no longer busy */
  #define QSPI_EVENTS_IDLE_ResetValue (0x00000000UL)

/* EVENTS_IDLE @Bit 0 : This event signifies that the QSPI core is no longer busy */
  #define QSPI_EVENTS_IDLE_EVENTS_IDLE_Pos (0UL)
  #define QSPI_EVENTS_IDLE_EVENTS_IDLE_Msk (0x1UL << QSPI_EVENTS_IDLE_EVENTS_IDLE_Pos)
  #define QSPI_EVENTS_IDLE_EVENTS_IDLE_Min (0x0UL)
  #define QSPI_EVENTS_IDLE_EVENTS_IDLE_Max (0x1UL)
  #define QSPI_EVENTS_IDLE_EVENTS_IDLE_NotGenerated (0x0UL)
  #define QSPI_EVENTS_IDLE_EVENTS_IDLE_Generated (0x1UL)


/* QSPI_SHORTS: Shortcuts between local events and tasks */
  #define QSPI_SHORTS_ResetValue (0x00000000UL)

/* DMA_DONE_START @Bit 0 : Shortcut between event DMA.DONE and task START */
  #define QSPI_SHORTS_DMA_DONE_START_Pos (0UL)
  #define QSPI_SHORTS_DMA_DONE_START_Msk (0x1UL << QSPI_SHORTS_DMA_DONE_START_Pos)
  #define QSPI_SHORTS_DMA_DONE_START_Min (0x0UL)
  #define QSPI_SHORTS_DMA_DONE_START_Max (0x1UL)
  #define QSPI_SHORTS_DMA_DONE_START_Disabled (0x0UL)
  #define QSPI_SHORTS_DMA_DONE_START_Enabled (0x1UL)


/* QSPI_INTEN: Enable or disable interrupt */
  #define QSPI_INTEN_ResetValue (0x00000000UL)

/* CORE @Bit 0 : Enable or disable interrupt for event CORE */
  #define QSPI_INTEN_CORE_Pos (0UL)
  #define QSPI_INTEN_CORE_Msk (0x1UL << QSPI_INTEN_CORE_Pos)
  #define QSPI_INTEN_CORE_Min (0x0UL)
  #define QSPI_INTEN_CORE_Max (0x1UL)
  #define QSPI_INTEN_CORE_Disabled (0x0UL)
  #define QSPI_INTEN_CORE_Enabled (0x1UL)

/* DMADONELIST @Bit 1 : Enable or disable interrupt for event DMADONELIST */
  #define QSPI_INTEN_DMADONELIST_Pos (1UL)
  #define QSPI_INTEN_DMADONELIST_Msk (0x1UL << QSPI_INTEN_DMADONELIST_Pos)
  #define QSPI_INTEN_DMADONELIST_Min (0x0UL)
  #define QSPI_INTEN_DMADONELIST_Max (0x1UL)
  #define QSPI_INTEN_DMADONELIST_Disabled (0x0UL)
  #define QSPI_INTEN_DMADONELIST_Enabled (0x1UL)

/* DMADONELISTPART @Bit 2 : Enable or disable interrupt for event DMADONELISTPART */
  #define QSPI_INTEN_DMADONELISTPART_Pos (2UL)
  #define QSPI_INTEN_DMADONELISTPART_Msk (0x1UL << QSPI_INTEN_DMADONELISTPART_Pos)
  #define QSPI_INTEN_DMADONELISTPART_Min (0x0UL)
  #define QSPI_INTEN_DMADONELISTPART_Max (0x1UL)
  #define QSPI_INTEN_DMADONELISTPART_Disabled (0x0UL)
  #define QSPI_INTEN_DMADONELISTPART_Enabled (0x1UL)

/* DMADONESELECTJOB @Bit 3 : Enable or disable interrupt for event DMADONESELECTJOB */
  #define QSPI_INTEN_DMADONESELECTJOB_Pos (3UL)
  #define QSPI_INTEN_DMADONESELECTJOB_Msk (0x1UL << QSPI_INTEN_DMADONESELECTJOB_Pos)
  #define QSPI_INTEN_DMADONESELECTJOB_Min (0x0UL)
  #define QSPI_INTEN_DMADONESELECTJOB_Max (0x1UL)
  #define QSPI_INTEN_DMADONESELECTJOB_Disabled (0x0UL)
  #define QSPI_INTEN_DMADONESELECTJOB_Enabled (0x1UL)

/* DMADONEDATA @Bit 4 : Enable or disable interrupt for event DMADONEDATA */
  #define QSPI_INTEN_DMADONEDATA_Pos (4UL)
  #define QSPI_INTEN_DMADONEDATA_Msk (0x1UL << QSPI_INTEN_DMADONEDATA_Pos)
  #define QSPI_INTEN_DMADONEDATA_Min (0x0UL)
  #define QSPI_INTEN_DMADONEDATA_Max (0x1UL)
  #define QSPI_INTEN_DMADONEDATA_Disabled (0x0UL)
  #define QSPI_INTEN_DMADONEDATA_Enabled (0x1UL)

/* DMADONEJOB @Bit 5 : Enable or disable interrupt for event DMADONEJOB */
  #define QSPI_INTEN_DMADONEJOB_Pos (5UL)
  #define QSPI_INTEN_DMADONEJOB_Msk (0x1UL << QSPI_INTEN_DMADONEJOB_Pos)
  #define QSPI_INTEN_DMADONEJOB_Min (0x0UL)
  #define QSPI_INTEN_DMADONEJOB_Max (0x1UL)
  #define QSPI_INTEN_DMADONEJOB_Disabled (0x0UL)
  #define QSPI_INTEN_DMADONEJOB_Enabled (0x1UL)

/* DMAERROR @Bit 6 : Enable or disable interrupt for event DMAERROR */
  #define QSPI_INTEN_DMAERROR_Pos (6UL)
  #define QSPI_INTEN_DMAERROR_Msk (0x1UL << QSPI_INTEN_DMAERROR_Pos)
  #define QSPI_INTEN_DMAERROR_Min (0x0UL)
  #define QSPI_INTEN_DMAERROR_Max (0x1UL)
  #define QSPI_INTEN_DMAERROR_Disabled (0x0UL)
  #define QSPI_INTEN_DMAERROR_Enabled (0x1UL)

/* DMAPAUSED @Bit 7 : Enable or disable interrupt for event DMAPAUSED */
  #define QSPI_INTEN_DMAPAUSED_Pos (7UL)
  #define QSPI_INTEN_DMAPAUSED_Msk (0x1UL << QSPI_INTEN_DMAPAUSED_Pos)
  #define QSPI_INTEN_DMAPAUSED_Min (0x0UL)
  #define QSPI_INTEN_DMAPAUSED_Max (0x1UL)
  #define QSPI_INTEN_DMAPAUSED_Disabled (0x0UL)
  #define QSPI_INTEN_DMAPAUSED_Enabled (0x1UL)

/* DMARESET @Bit 8 : Enable or disable interrupt for event DMARESET */
  #define QSPI_INTEN_DMARESET_Pos (8UL)
  #define QSPI_INTEN_DMARESET_Msk (0x1UL << QSPI_INTEN_DMARESET_Pos)
  #define QSPI_INTEN_DMARESET_Min (0x0UL)
  #define QSPI_INTEN_DMARESET_Max (0x1UL)
  #define QSPI_INTEN_DMARESET_Disabled (0x0UL)
  #define QSPI_INTEN_DMARESET_Enabled (0x1UL)

/* DMADONE @Bit 9 : Enable or disable interrupt for event DMADONE */
  #define QSPI_INTEN_DMADONE_Pos (9UL)
  #define QSPI_INTEN_DMADONE_Msk (0x1UL << QSPI_INTEN_DMADONE_Pos)
  #define QSPI_INTEN_DMADONE_Min (0x0UL)
  #define QSPI_INTEN_DMADONE_Max (0x1UL)
  #define QSPI_INTEN_DMADONE_Disabled (0x0UL)
  #define QSPI_INTEN_DMADONE_Enabled (0x1UL)

/* DMATXUNEXPECTEDIDLE @Bit 10 : Enable or disable interrupt for event DMATXUNEXPECTEDIDLE */
  #define QSPI_INTEN_DMATXUNEXPECTEDIDLE_Pos (10UL)
  #define QSPI_INTEN_DMATXUNEXPECTEDIDLE_Msk (0x1UL << QSPI_INTEN_DMATXUNEXPECTEDIDLE_Pos) /*!< Bit mask of DMATXUNEXPECTEDIDLE
                                                                            field.*/
  #define QSPI_INTEN_DMATXUNEXPECTEDIDLE_Min (0x0UL)
  #define QSPI_INTEN_DMATXUNEXPECTEDIDLE_Max (0x1UL)
  #define QSPI_INTEN_DMATXUNEXPECTEDIDLE_Disabled (0x0UL)
  #define QSPI_INTEN_DMATXUNEXPECTEDIDLE_Enabled (0x1UL)

/* DMAINTERNALBUSERROR @Bit 11 : Enable or disable interrupt for event DMAINTERNALBUSERROR */
  #define QSPI_INTEN_DMAINTERNALBUSERROR_Pos (11UL)
  #define QSPI_INTEN_DMAINTERNALBUSERROR_Msk (0x1UL << QSPI_INTEN_DMAINTERNALBUSERROR_Pos) /*!< Bit mask of DMAINTERNALBUSERROR
                                                                            field.*/
  #define QSPI_INTEN_DMAINTERNALBUSERROR_Min (0x0UL)
  #define QSPI_INTEN_DMAINTERNALBUSERROR_Max (0x1UL)
  #define QSPI_INTEN_DMAINTERNALBUSERROR_Disabled (0x0UL)
  #define QSPI_INTEN_DMAINTERNALBUSERROR_Enabled (0x1UL)

/* DMAABORTED @Bit 12 : Enable or disable interrupt for event DMAABORTED */
  #define QSPI_INTEN_DMAABORTED_Pos (12UL)
  #define QSPI_INTEN_DMAABORTED_Msk (0x1UL << QSPI_INTEN_DMAABORTED_Pos)
  #define QSPI_INTEN_DMAABORTED_Min (0x0UL)
  #define QSPI_INTEN_DMAABORTED_Max (0x1UL)
  #define QSPI_INTEN_DMAABORTED_Disabled (0x0UL)
  #define QSPI_INTEN_DMAABORTED_Enabled (0x1UL)

/* IDLE @Bit 13 : Enable or disable interrupt for event IDLE */
  #define QSPI_INTEN_IDLE_Pos (13UL)
  #define QSPI_INTEN_IDLE_Msk (0x1UL << QSPI_INTEN_IDLE_Pos)
  #define QSPI_INTEN_IDLE_Min (0x0UL)
  #define QSPI_INTEN_IDLE_Max (0x1UL)
  #define QSPI_INTEN_IDLE_Disabled (0x0UL)
  #define QSPI_INTEN_IDLE_Enabled (0x1UL)


/* QSPI_INTENSET: Enable interrupt */
  #define QSPI_INTENSET_ResetValue (0x00000000UL)

/* CORE @Bit 0 : Write '1' to enable interrupt for event CORE */
  #define QSPI_INTENSET_CORE_Pos (0UL)
  #define QSPI_INTENSET_CORE_Msk (0x1UL << QSPI_INTENSET_CORE_Pos)
  #define QSPI_INTENSET_CORE_Min (0x0UL)
  #define QSPI_INTENSET_CORE_Max (0x1UL)
  #define QSPI_INTENSET_CORE_Set (0x1UL)
  #define QSPI_INTENSET_CORE_Disabled (0x0UL)
  #define QSPI_INTENSET_CORE_Enabled (0x1UL)

/* DMADONELIST @Bit 1 : Write '1' to enable interrupt for event DMADONELIST */
  #define QSPI_INTENSET_DMADONELIST_Pos (1UL)
  #define QSPI_INTENSET_DMADONELIST_Msk (0x1UL << QSPI_INTENSET_DMADONELIST_Pos)
  #define QSPI_INTENSET_DMADONELIST_Min (0x0UL)
  #define QSPI_INTENSET_DMADONELIST_Max (0x1UL)
  #define QSPI_INTENSET_DMADONELIST_Set (0x1UL)
  #define QSPI_INTENSET_DMADONELIST_Disabled (0x0UL)
  #define QSPI_INTENSET_DMADONELIST_Enabled (0x1UL)

/* DMADONELISTPART @Bit 2 : Write '1' to enable interrupt for event DMADONELISTPART */
  #define QSPI_INTENSET_DMADONELISTPART_Pos (2UL)
  #define QSPI_INTENSET_DMADONELISTPART_Msk (0x1UL << QSPI_INTENSET_DMADONELISTPART_Pos) /*!< Bit mask of DMADONELISTPART
                                                                            field.*/
  #define QSPI_INTENSET_DMADONELISTPART_Min (0x0UL)
  #define QSPI_INTENSET_DMADONELISTPART_Max (0x1UL)
  #define QSPI_INTENSET_DMADONELISTPART_Set (0x1UL)
  #define QSPI_INTENSET_DMADONELISTPART_Disabled (0x0UL)
  #define QSPI_INTENSET_DMADONELISTPART_Enabled (0x1UL)

/* DMADONESELECTJOB @Bit 3 : Write '1' to enable interrupt for event DMADONESELECTJOB */
  #define QSPI_INTENSET_DMADONESELECTJOB_Pos (3UL)
  #define QSPI_INTENSET_DMADONESELECTJOB_Msk (0x1UL << QSPI_INTENSET_DMADONESELECTJOB_Pos) /*!< Bit mask of DMADONESELECTJOB
                                                                            field.*/
  #define QSPI_INTENSET_DMADONESELECTJOB_Min (0x0UL)
  #define QSPI_INTENSET_DMADONESELECTJOB_Max (0x1UL)
  #define QSPI_INTENSET_DMADONESELECTJOB_Set (0x1UL)
  #define QSPI_INTENSET_DMADONESELECTJOB_Disabled (0x0UL)
  #define QSPI_INTENSET_DMADONESELECTJOB_Enabled (0x1UL)

/* DMADONEDATA @Bit 4 : Write '1' to enable interrupt for event DMADONEDATA */
  #define QSPI_INTENSET_DMADONEDATA_Pos (4UL)
  #define QSPI_INTENSET_DMADONEDATA_Msk (0x1UL << QSPI_INTENSET_DMADONEDATA_Pos)
  #define QSPI_INTENSET_DMADONEDATA_Min (0x0UL)
  #define QSPI_INTENSET_DMADONEDATA_Max (0x1UL)
  #define QSPI_INTENSET_DMADONEDATA_Set (0x1UL)
  #define QSPI_INTENSET_DMADONEDATA_Disabled (0x0UL)
  #define QSPI_INTENSET_DMADONEDATA_Enabled (0x1UL)

/* DMADONEJOB @Bit 5 : Write '1' to enable interrupt for event DMADONEJOB */
  #define QSPI_INTENSET_DMADONEJOB_Pos (5UL)
  #define QSPI_INTENSET_DMADONEJOB_Msk (0x1UL << QSPI_INTENSET_DMADONEJOB_Pos)
  #define QSPI_INTENSET_DMADONEJOB_Min (0x0UL)
  #define QSPI_INTENSET_DMADONEJOB_Max (0x1UL)
  #define QSPI_INTENSET_DMADONEJOB_Set (0x1UL)
  #define QSPI_INTENSET_DMADONEJOB_Disabled (0x0UL)
  #define QSPI_INTENSET_DMADONEJOB_Enabled (0x1UL)

/* DMAERROR @Bit 6 : Write '1' to enable interrupt for event DMAERROR */
  #define QSPI_INTENSET_DMAERROR_Pos (6UL)
  #define QSPI_INTENSET_DMAERROR_Msk (0x1UL << QSPI_INTENSET_DMAERROR_Pos)
  #define QSPI_INTENSET_DMAERROR_Min (0x0UL)
  #define QSPI_INTENSET_DMAERROR_Max (0x1UL)
  #define QSPI_INTENSET_DMAERROR_Set (0x1UL)
  #define QSPI_INTENSET_DMAERROR_Disabled (0x0UL)
  #define QSPI_INTENSET_DMAERROR_Enabled (0x1UL)

/* DMAPAUSED @Bit 7 : Write '1' to enable interrupt for event DMAPAUSED */
  #define QSPI_INTENSET_DMAPAUSED_Pos (7UL)
  #define QSPI_INTENSET_DMAPAUSED_Msk (0x1UL << QSPI_INTENSET_DMAPAUSED_Pos)
  #define QSPI_INTENSET_DMAPAUSED_Min (0x0UL)
  #define QSPI_INTENSET_DMAPAUSED_Max (0x1UL)
  #define QSPI_INTENSET_DMAPAUSED_Set (0x1UL)
  #define QSPI_INTENSET_DMAPAUSED_Disabled (0x0UL)
  #define QSPI_INTENSET_DMAPAUSED_Enabled (0x1UL)

/* DMARESET @Bit 8 : Write '1' to enable interrupt for event DMARESET */
  #define QSPI_INTENSET_DMARESET_Pos (8UL)
  #define QSPI_INTENSET_DMARESET_Msk (0x1UL << QSPI_INTENSET_DMARESET_Pos)
  #define QSPI_INTENSET_DMARESET_Min (0x0UL)
  #define QSPI_INTENSET_DMARESET_Max (0x1UL)
  #define QSPI_INTENSET_DMARESET_Set (0x1UL)
  #define QSPI_INTENSET_DMARESET_Disabled (0x0UL)
  #define QSPI_INTENSET_DMARESET_Enabled (0x1UL)

/* DMADONE @Bit 9 : Write '1' to enable interrupt for event DMADONE */
  #define QSPI_INTENSET_DMADONE_Pos (9UL)
  #define QSPI_INTENSET_DMADONE_Msk (0x1UL << QSPI_INTENSET_DMADONE_Pos)
  #define QSPI_INTENSET_DMADONE_Min (0x0UL)
  #define QSPI_INTENSET_DMADONE_Max (0x1UL)
  #define QSPI_INTENSET_DMADONE_Set (0x1UL)
  #define QSPI_INTENSET_DMADONE_Disabled (0x0UL)
  #define QSPI_INTENSET_DMADONE_Enabled (0x1UL)

/* DMATXUNEXPECTEDIDLE @Bit 10 : Write '1' to enable interrupt for event DMATXUNEXPECTEDIDLE */
  #define QSPI_INTENSET_DMATXUNEXPECTEDIDLE_Pos (10UL)
  #define QSPI_INTENSET_DMATXUNEXPECTEDIDLE_Msk (0x1UL << QSPI_INTENSET_DMATXUNEXPECTEDIDLE_Pos) /*!< Bit mask of
                                                                            DMATXUNEXPECTEDIDLE field.*/
  #define QSPI_INTENSET_DMATXUNEXPECTEDIDLE_Min (0x0UL)
  #define QSPI_INTENSET_DMATXUNEXPECTEDIDLE_Max (0x1UL)
  #define QSPI_INTENSET_DMATXUNEXPECTEDIDLE_Set (0x1UL)
  #define QSPI_INTENSET_DMATXUNEXPECTEDIDLE_Disabled (0x0UL)
  #define QSPI_INTENSET_DMATXUNEXPECTEDIDLE_Enabled (0x1UL)

/* DMAINTERNALBUSERROR @Bit 11 : Write '1' to enable interrupt for event DMAINTERNALBUSERROR */
  #define QSPI_INTENSET_DMAINTERNALBUSERROR_Pos (11UL)
  #define QSPI_INTENSET_DMAINTERNALBUSERROR_Msk (0x1UL << QSPI_INTENSET_DMAINTERNALBUSERROR_Pos) /*!< Bit mask of
                                                                            DMAINTERNALBUSERROR field.*/
  #define QSPI_INTENSET_DMAINTERNALBUSERROR_Min (0x0UL)
  #define QSPI_INTENSET_DMAINTERNALBUSERROR_Max (0x1UL)
  #define QSPI_INTENSET_DMAINTERNALBUSERROR_Set (0x1UL)
  #define QSPI_INTENSET_DMAINTERNALBUSERROR_Disabled (0x0UL)
  #define QSPI_INTENSET_DMAINTERNALBUSERROR_Enabled (0x1UL)

/* DMAABORTED @Bit 12 : Write '1' to enable interrupt for event DMAABORTED */
  #define QSPI_INTENSET_DMAABORTED_Pos (12UL)
  #define QSPI_INTENSET_DMAABORTED_Msk (0x1UL << QSPI_INTENSET_DMAABORTED_Pos)
  #define QSPI_INTENSET_DMAABORTED_Min (0x0UL)
  #define QSPI_INTENSET_DMAABORTED_Max (0x1UL)
  #define QSPI_INTENSET_DMAABORTED_Set (0x1UL)
  #define QSPI_INTENSET_DMAABORTED_Disabled (0x0UL)
  #define QSPI_INTENSET_DMAABORTED_Enabled (0x1UL)

/* IDLE @Bit 13 : Write '1' to enable interrupt for event IDLE */
  #define QSPI_INTENSET_IDLE_Pos (13UL)
  #define QSPI_INTENSET_IDLE_Msk (0x1UL << QSPI_INTENSET_IDLE_Pos)
  #define QSPI_INTENSET_IDLE_Min (0x0UL)
  #define QSPI_INTENSET_IDLE_Max (0x1UL)
  #define QSPI_INTENSET_IDLE_Set (0x1UL)
  #define QSPI_INTENSET_IDLE_Disabled (0x0UL)
  #define QSPI_INTENSET_IDLE_Enabled (0x1UL)


/* QSPI_INTENCLR: Disable interrupt */
  #define QSPI_INTENCLR_ResetValue (0x00000000UL)

/* CORE @Bit 0 : Write '1' to disable interrupt for event CORE */
  #define QSPI_INTENCLR_CORE_Pos (0UL)
  #define QSPI_INTENCLR_CORE_Msk (0x1UL << QSPI_INTENCLR_CORE_Pos)
  #define QSPI_INTENCLR_CORE_Min (0x0UL)
  #define QSPI_INTENCLR_CORE_Max (0x1UL)
  #define QSPI_INTENCLR_CORE_Clear (0x1UL)
  #define QSPI_INTENCLR_CORE_Disabled (0x0UL)
  #define QSPI_INTENCLR_CORE_Enabled (0x1UL)

/* DMADONELIST @Bit 1 : Write '1' to disable interrupt for event DMADONELIST */
  #define QSPI_INTENCLR_DMADONELIST_Pos (1UL)
  #define QSPI_INTENCLR_DMADONELIST_Msk (0x1UL << QSPI_INTENCLR_DMADONELIST_Pos)
  #define QSPI_INTENCLR_DMADONELIST_Min (0x0UL)
  #define QSPI_INTENCLR_DMADONELIST_Max (0x1UL)
  #define QSPI_INTENCLR_DMADONELIST_Clear (0x1UL)
  #define QSPI_INTENCLR_DMADONELIST_Disabled (0x0UL)
  #define QSPI_INTENCLR_DMADONELIST_Enabled (0x1UL)

/* DMADONELISTPART @Bit 2 : Write '1' to disable interrupt for event DMADONELISTPART */
  #define QSPI_INTENCLR_DMADONELISTPART_Pos (2UL)
  #define QSPI_INTENCLR_DMADONELISTPART_Msk (0x1UL << QSPI_INTENCLR_DMADONELISTPART_Pos) /*!< Bit mask of DMADONELISTPART
                                                                            field.*/
  #define QSPI_INTENCLR_DMADONELISTPART_Min (0x0UL)
  #define QSPI_INTENCLR_DMADONELISTPART_Max (0x1UL)
  #define QSPI_INTENCLR_DMADONELISTPART_Clear (0x1UL)
  #define QSPI_INTENCLR_DMADONELISTPART_Disabled (0x0UL)
  #define QSPI_INTENCLR_DMADONELISTPART_Enabled (0x1UL)

/* DMADONESELECTJOB @Bit 3 : Write '1' to disable interrupt for event DMADONESELECTJOB */
  #define QSPI_INTENCLR_DMADONESELECTJOB_Pos (3UL)
  #define QSPI_INTENCLR_DMADONESELECTJOB_Msk (0x1UL << QSPI_INTENCLR_DMADONESELECTJOB_Pos) /*!< Bit mask of DMADONESELECTJOB
                                                                            field.*/
  #define QSPI_INTENCLR_DMADONESELECTJOB_Min (0x0UL)
  #define QSPI_INTENCLR_DMADONESELECTJOB_Max (0x1UL)
  #define QSPI_INTENCLR_DMADONESELECTJOB_Clear (0x1UL)
  #define QSPI_INTENCLR_DMADONESELECTJOB_Disabled (0x0UL)
  #define QSPI_INTENCLR_DMADONESELECTJOB_Enabled (0x1UL)

/* DMADONEDATA @Bit 4 : Write '1' to disable interrupt for event DMADONEDATA */
  #define QSPI_INTENCLR_DMADONEDATA_Pos (4UL)
  #define QSPI_INTENCLR_DMADONEDATA_Msk (0x1UL << QSPI_INTENCLR_DMADONEDATA_Pos)
  #define QSPI_INTENCLR_DMADONEDATA_Min (0x0UL)
  #define QSPI_INTENCLR_DMADONEDATA_Max (0x1UL)
  #define QSPI_INTENCLR_DMADONEDATA_Clear (0x1UL)
  #define QSPI_INTENCLR_DMADONEDATA_Disabled (0x0UL)
  #define QSPI_INTENCLR_DMADONEDATA_Enabled (0x1UL)

/* DMADONEJOB @Bit 5 : Write '1' to disable interrupt for event DMADONEJOB */
  #define QSPI_INTENCLR_DMADONEJOB_Pos (5UL)
  #define QSPI_INTENCLR_DMADONEJOB_Msk (0x1UL << QSPI_INTENCLR_DMADONEJOB_Pos)
  #define QSPI_INTENCLR_DMADONEJOB_Min (0x0UL)
  #define QSPI_INTENCLR_DMADONEJOB_Max (0x1UL)
  #define QSPI_INTENCLR_DMADONEJOB_Clear (0x1UL)
  #define QSPI_INTENCLR_DMADONEJOB_Disabled (0x0UL)
  #define QSPI_INTENCLR_DMADONEJOB_Enabled (0x1UL)

/* DMAERROR @Bit 6 : Write '1' to disable interrupt for event DMAERROR */
  #define QSPI_INTENCLR_DMAERROR_Pos (6UL)
  #define QSPI_INTENCLR_DMAERROR_Msk (0x1UL << QSPI_INTENCLR_DMAERROR_Pos)
  #define QSPI_INTENCLR_DMAERROR_Min (0x0UL)
  #define QSPI_INTENCLR_DMAERROR_Max (0x1UL)
  #define QSPI_INTENCLR_DMAERROR_Clear (0x1UL)
  #define QSPI_INTENCLR_DMAERROR_Disabled (0x0UL)
  #define QSPI_INTENCLR_DMAERROR_Enabled (0x1UL)

/* DMAPAUSED @Bit 7 : Write '1' to disable interrupt for event DMAPAUSED */
  #define QSPI_INTENCLR_DMAPAUSED_Pos (7UL)
  #define QSPI_INTENCLR_DMAPAUSED_Msk (0x1UL << QSPI_INTENCLR_DMAPAUSED_Pos)
  #define QSPI_INTENCLR_DMAPAUSED_Min (0x0UL)
  #define QSPI_INTENCLR_DMAPAUSED_Max (0x1UL)
  #define QSPI_INTENCLR_DMAPAUSED_Clear (0x1UL)
  #define QSPI_INTENCLR_DMAPAUSED_Disabled (0x0UL)
  #define QSPI_INTENCLR_DMAPAUSED_Enabled (0x1UL)

/* DMARESET @Bit 8 : Write '1' to disable interrupt for event DMARESET */
  #define QSPI_INTENCLR_DMARESET_Pos (8UL)
  #define QSPI_INTENCLR_DMARESET_Msk (0x1UL << QSPI_INTENCLR_DMARESET_Pos)
  #define QSPI_INTENCLR_DMARESET_Min (0x0UL)
  #define QSPI_INTENCLR_DMARESET_Max (0x1UL)
  #define QSPI_INTENCLR_DMARESET_Clear (0x1UL)
  #define QSPI_INTENCLR_DMARESET_Disabled (0x0UL)
  #define QSPI_INTENCLR_DMARESET_Enabled (0x1UL)

/* DMADONE @Bit 9 : Write '1' to disable interrupt for event DMADONE */
  #define QSPI_INTENCLR_DMADONE_Pos (9UL)
  #define QSPI_INTENCLR_DMADONE_Msk (0x1UL << QSPI_INTENCLR_DMADONE_Pos)
  #define QSPI_INTENCLR_DMADONE_Min (0x0UL)
  #define QSPI_INTENCLR_DMADONE_Max (0x1UL)
  #define QSPI_INTENCLR_DMADONE_Clear (0x1UL)
  #define QSPI_INTENCLR_DMADONE_Disabled (0x0UL)
  #define QSPI_INTENCLR_DMADONE_Enabled (0x1UL)

/* DMATXUNEXPECTEDIDLE @Bit 10 : Write '1' to disable interrupt for event DMATXUNEXPECTEDIDLE */
  #define QSPI_INTENCLR_DMATXUNEXPECTEDIDLE_Pos (10UL)
  #define QSPI_INTENCLR_DMATXUNEXPECTEDIDLE_Msk (0x1UL << QSPI_INTENCLR_DMATXUNEXPECTEDIDLE_Pos) /*!< Bit mask of
                                                                            DMATXUNEXPECTEDIDLE field.*/
  #define QSPI_INTENCLR_DMATXUNEXPECTEDIDLE_Min (0x0UL)
  #define QSPI_INTENCLR_DMATXUNEXPECTEDIDLE_Max (0x1UL)
  #define QSPI_INTENCLR_DMATXUNEXPECTEDIDLE_Clear (0x1UL)
  #define QSPI_INTENCLR_DMATXUNEXPECTEDIDLE_Disabled (0x0UL)
  #define QSPI_INTENCLR_DMATXUNEXPECTEDIDLE_Enabled (0x1UL)

/* DMAINTERNALBUSERROR @Bit 11 : Write '1' to disable interrupt for event DMAINTERNALBUSERROR */
  #define QSPI_INTENCLR_DMAINTERNALBUSERROR_Pos (11UL)
  #define QSPI_INTENCLR_DMAINTERNALBUSERROR_Msk (0x1UL << QSPI_INTENCLR_DMAINTERNALBUSERROR_Pos) /*!< Bit mask of
                                                                            DMAINTERNALBUSERROR field.*/
  #define QSPI_INTENCLR_DMAINTERNALBUSERROR_Min (0x0UL)
  #define QSPI_INTENCLR_DMAINTERNALBUSERROR_Max (0x1UL)
  #define QSPI_INTENCLR_DMAINTERNALBUSERROR_Clear (0x1UL)
  #define QSPI_INTENCLR_DMAINTERNALBUSERROR_Disabled (0x0UL)
  #define QSPI_INTENCLR_DMAINTERNALBUSERROR_Enabled (0x1UL)

/* DMAABORTED @Bit 12 : Write '1' to disable interrupt for event DMAABORTED */
  #define QSPI_INTENCLR_DMAABORTED_Pos (12UL)
  #define QSPI_INTENCLR_DMAABORTED_Msk (0x1UL << QSPI_INTENCLR_DMAABORTED_Pos)
  #define QSPI_INTENCLR_DMAABORTED_Min (0x0UL)
  #define QSPI_INTENCLR_DMAABORTED_Max (0x1UL)
  #define QSPI_INTENCLR_DMAABORTED_Clear (0x1UL)
  #define QSPI_INTENCLR_DMAABORTED_Disabled (0x0UL)
  #define QSPI_INTENCLR_DMAABORTED_Enabled (0x1UL)

/* IDLE @Bit 13 : Write '1' to disable interrupt for event IDLE */
  #define QSPI_INTENCLR_IDLE_Pos (13UL)
  #define QSPI_INTENCLR_IDLE_Msk (0x1UL << QSPI_INTENCLR_IDLE_Pos)
  #define QSPI_INTENCLR_IDLE_Min (0x0UL)
  #define QSPI_INTENCLR_IDLE_Max (0x1UL)
  #define QSPI_INTENCLR_IDLE_Clear (0x1UL)
  #define QSPI_INTENCLR_IDLE_Disabled (0x0UL)
  #define QSPI_INTENCLR_IDLE_Enabled (0x1UL)


/* QSPI_INTPEND: Pending interrupts */
  #define QSPI_INTPEND_ResetValue (0x00000000UL)

/* CORE @Bit 0 : Read pending status of interrupt for event CORE */
  #define QSPI_INTPEND_CORE_Pos (0UL)
  #define QSPI_INTPEND_CORE_Msk (0x1UL << QSPI_INTPEND_CORE_Pos)
  #define QSPI_INTPEND_CORE_Min (0x0UL)
  #define QSPI_INTPEND_CORE_Max (0x1UL)
  #define QSPI_INTPEND_CORE_NotPending (0x0UL)
  #define QSPI_INTPEND_CORE_Pending (0x1UL)

/* DMADONELIST @Bit 1 : Read pending status of interrupt for event DMADONELIST */
  #define QSPI_INTPEND_DMADONELIST_Pos (1UL)
  #define QSPI_INTPEND_DMADONELIST_Msk (0x1UL << QSPI_INTPEND_DMADONELIST_Pos)
  #define QSPI_INTPEND_DMADONELIST_Min (0x0UL)
  #define QSPI_INTPEND_DMADONELIST_Max (0x1UL)
  #define QSPI_INTPEND_DMADONELIST_NotPending (0x0UL)
  #define QSPI_INTPEND_DMADONELIST_Pending (0x1UL)

/* DMADONELISTPART @Bit 2 : Read pending status of interrupt for event DMADONELISTPART */
  #define QSPI_INTPEND_DMADONELISTPART_Pos (2UL)
  #define QSPI_INTPEND_DMADONELISTPART_Msk (0x1UL << QSPI_INTPEND_DMADONELISTPART_Pos)
  #define QSPI_INTPEND_DMADONELISTPART_Min (0x0UL)
  #define QSPI_INTPEND_DMADONELISTPART_Max (0x1UL)
  #define QSPI_INTPEND_DMADONELISTPART_NotPending (0x0UL)
  #define QSPI_INTPEND_DMADONELISTPART_Pending (0x1UL)

/* DMADONESELECTJOB @Bit 3 : Read pending status of interrupt for event DMADONESELECTJOB */
  #define QSPI_INTPEND_DMADONESELECTJOB_Pos (3UL)
  #define QSPI_INTPEND_DMADONESELECTJOB_Msk (0x1UL << QSPI_INTPEND_DMADONESELECTJOB_Pos) /*!< Bit mask of DMADONESELECTJOB
                                                                            field.*/
  #define QSPI_INTPEND_DMADONESELECTJOB_Min (0x0UL)
  #define QSPI_INTPEND_DMADONESELECTJOB_Max (0x1UL)
  #define QSPI_INTPEND_DMADONESELECTJOB_NotPending (0x0UL)
  #define QSPI_INTPEND_DMADONESELECTJOB_Pending (0x1UL)

/* DMADONEDATA @Bit 4 : Read pending status of interrupt for event DMADONEDATA */
  #define QSPI_INTPEND_DMADONEDATA_Pos (4UL)
  #define QSPI_INTPEND_DMADONEDATA_Msk (0x1UL << QSPI_INTPEND_DMADONEDATA_Pos)
  #define QSPI_INTPEND_DMADONEDATA_Min (0x0UL)
  #define QSPI_INTPEND_DMADONEDATA_Max (0x1UL)
  #define QSPI_INTPEND_DMADONEDATA_NotPending (0x0UL)
  #define QSPI_INTPEND_DMADONEDATA_Pending (0x1UL)

/* DMADONEJOB @Bit 5 : Read pending status of interrupt for event DMADONEJOB */
  #define QSPI_INTPEND_DMADONEJOB_Pos (5UL)
  #define QSPI_INTPEND_DMADONEJOB_Msk (0x1UL << QSPI_INTPEND_DMADONEJOB_Pos)
  #define QSPI_INTPEND_DMADONEJOB_Min (0x0UL)
  #define QSPI_INTPEND_DMADONEJOB_Max (0x1UL)
  #define QSPI_INTPEND_DMADONEJOB_NotPending (0x0UL)
  #define QSPI_INTPEND_DMADONEJOB_Pending (0x1UL)

/* DMAERROR @Bit 6 : Read pending status of interrupt for event DMAERROR */
  #define QSPI_INTPEND_DMAERROR_Pos (6UL)
  #define QSPI_INTPEND_DMAERROR_Msk (0x1UL << QSPI_INTPEND_DMAERROR_Pos)
  #define QSPI_INTPEND_DMAERROR_Min (0x0UL)
  #define QSPI_INTPEND_DMAERROR_Max (0x1UL)
  #define QSPI_INTPEND_DMAERROR_NotPending (0x0UL)
  #define QSPI_INTPEND_DMAERROR_Pending (0x1UL)

/* DMAPAUSED @Bit 7 : Read pending status of interrupt for event DMAPAUSED */
  #define QSPI_INTPEND_DMAPAUSED_Pos (7UL)
  #define QSPI_INTPEND_DMAPAUSED_Msk (0x1UL << QSPI_INTPEND_DMAPAUSED_Pos)
  #define QSPI_INTPEND_DMAPAUSED_Min (0x0UL)
  #define QSPI_INTPEND_DMAPAUSED_Max (0x1UL)
  #define QSPI_INTPEND_DMAPAUSED_NotPending (0x0UL)
  #define QSPI_INTPEND_DMAPAUSED_Pending (0x1UL)

/* DMARESET @Bit 8 : Read pending status of interrupt for event DMARESET */
  #define QSPI_INTPEND_DMARESET_Pos (8UL)
  #define QSPI_INTPEND_DMARESET_Msk (0x1UL << QSPI_INTPEND_DMARESET_Pos)
  #define QSPI_INTPEND_DMARESET_Min (0x0UL)
  #define QSPI_INTPEND_DMARESET_Max (0x1UL)
  #define QSPI_INTPEND_DMARESET_NotPending (0x0UL)
  #define QSPI_INTPEND_DMARESET_Pending (0x1UL)

/* DMADONE @Bit 9 : Read pending status of interrupt for event DMADONE */
  #define QSPI_INTPEND_DMADONE_Pos (9UL)
  #define QSPI_INTPEND_DMADONE_Msk (0x1UL << QSPI_INTPEND_DMADONE_Pos)
  #define QSPI_INTPEND_DMADONE_Min (0x0UL)
  #define QSPI_INTPEND_DMADONE_Max (0x1UL)
  #define QSPI_INTPEND_DMADONE_NotPending (0x0UL)
  #define QSPI_INTPEND_DMADONE_Pending (0x1UL)

/* DMATXUNEXPECTEDIDLE @Bit 10 : Read pending status of interrupt for event DMATXUNEXPECTEDIDLE */
  #define QSPI_INTPEND_DMATXUNEXPECTEDIDLE_Pos (10UL)
  #define QSPI_INTPEND_DMATXUNEXPECTEDIDLE_Msk (0x1UL << QSPI_INTPEND_DMATXUNEXPECTEDIDLE_Pos) /*!< Bit mask of
                                                                            DMATXUNEXPECTEDIDLE field.*/
  #define QSPI_INTPEND_DMATXUNEXPECTEDIDLE_Min (0x0UL)
  #define QSPI_INTPEND_DMATXUNEXPECTEDIDLE_Max (0x1UL)
  #define QSPI_INTPEND_DMATXUNEXPECTEDIDLE_NotPending (0x0UL)
  #define QSPI_INTPEND_DMATXUNEXPECTEDIDLE_Pending (0x1UL)

/* DMAINTERNALBUSERROR @Bit 11 : Read pending status of interrupt for event DMAINTERNALBUSERROR */
  #define QSPI_INTPEND_DMAINTERNALBUSERROR_Pos (11UL)
  #define QSPI_INTPEND_DMAINTERNALBUSERROR_Msk (0x1UL << QSPI_INTPEND_DMAINTERNALBUSERROR_Pos) /*!< Bit mask of
                                                                            DMAINTERNALBUSERROR field.*/
  #define QSPI_INTPEND_DMAINTERNALBUSERROR_Min (0x0UL)
  #define QSPI_INTPEND_DMAINTERNALBUSERROR_Max (0x1UL)
  #define QSPI_INTPEND_DMAINTERNALBUSERROR_NotPending (0x0UL)
  #define QSPI_INTPEND_DMAINTERNALBUSERROR_Pending (0x1UL)

/* DMAABORTED @Bit 12 : Read pending status of interrupt for event DMAABORTED */
  #define QSPI_INTPEND_DMAABORTED_Pos (12UL)
  #define QSPI_INTPEND_DMAABORTED_Msk (0x1UL << QSPI_INTPEND_DMAABORTED_Pos)
  #define QSPI_INTPEND_DMAABORTED_Min (0x0UL)
  #define QSPI_INTPEND_DMAABORTED_Max (0x1UL)
  #define QSPI_INTPEND_DMAABORTED_NotPending (0x0UL)
  #define QSPI_INTPEND_DMAABORTED_Pending (0x1UL)

/* IDLE @Bit 13 : Read pending status of interrupt for event IDLE */
  #define QSPI_INTPEND_IDLE_Pos (13UL)
  #define QSPI_INTPEND_IDLE_Msk (0x1UL << QSPI_INTPEND_IDLE_Pos)
  #define QSPI_INTPEND_IDLE_Min (0x0UL)
  #define QSPI_INTPEND_IDLE_Max (0x1UL)
  #define QSPI_INTPEND_IDLE_NotPending (0x0UL)
  #define QSPI_INTPEND_IDLE_Pending (0x1UL)


/* QSPI_ENABLE: Enables the QSPI */
  #define QSPI_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable the QSPI */
  #define QSPI_ENABLE_ENABLE_Pos (0UL)
  #define QSPI_ENABLE_ENABLE_Msk (0x1UL << QSPI_ENABLE_ENABLE_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           RADIO                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ==================================================== Struct RADIO_PSEL ==================================================== */
/**
  * @brief PSEL [RADIO_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DFEGPIO[8];
} NRF_RADIO_PSEL_Type;

/* RADIO_PSEL_DFEGPIO: Pin select for DFE pin n */
  #define RADIO_PSEL_DFEGPIO_MaxCount (8UL)
  #define RADIO_PSEL_DFEGPIO_MaxIndex (7UL)
  #define RADIO_PSEL_DFEGPIO_MinIndex (0UL)
  #define RADIO_PSEL_DFEGPIO_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define RADIO_PSEL_DFEGPIO_PIN_Pos (0UL)
  #define RADIO_PSEL_DFEGPIO_PIN_Msk (0x1FUL << RADIO_PSEL_DFEGPIO_PIN_Pos)
  #define RADIO_PSEL_DFEGPIO_PIN_Min (0x00UL)
  #define RADIO_PSEL_DFEGPIO_PIN_Max (0x1FUL)

/* PORT @Bits 5..8 : Port number */
  #define RADIO_PSEL_DFEGPIO_PORT_Pos (5UL)
  #define RADIO_PSEL_DFEGPIO_PORT_Msk (0xFUL << RADIO_PSEL_DFEGPIO_PORT_Pos)
  #define RADIO_PSEL_DFEGPIO_PORT_Min (0x0UL)
  #define RADIO_PSEL_DFEGPIO_PORT_Max (0x1UL)

/* CONNECT @Bit 31 : Connection */
  #define RADIO_PSEL_DFEGPIO_CONNECT_Pos (31UL)
  #define RADIO_PSEL_DFEGPIO_CONNECT_Msk (0x1UL << RADIO_PSEL_DFEGPIO_CONNECT_Pos)
  #define RADIO_PSEL_DFEGPIO_CONNECT_Min (0x0UL)
  #define RADIO_PSEL_DFEGPIO_CONNECT_Max (0x1UL)
  #define RADIO_PSEL_DFEGPIO_CONNECT_Disconnected (0x1UL)
  #define RADIO_PSEL_DFEGPIO_CONNECT_Connected (0x0UL)



/* ================================================= Struct RADIO_DFEPACKET ================================================== */
/**
  * @brief DFEPACKET [RADIO_DFEPACKET] DFE packet EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;
  __IM  uint32_t  CURRENTAMOUNT;
} NRF_RADIO_DFEPACKET_Type;

/* RADIO_DFEPACKET_PTR: Data pointer */
  #define RADIO_DFEPACKET_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Data pointer */
  #define RADIO_DFEPACKET_PTR_PTR_Pos (0UL)
  #define RADIO_DFEPACKET_PTR_PTR_Msk (0xFFFFFFFFUL << RADIO_DFEPACKET_PTR_PTR_Pos)


/* RADIO_DFEPACKET_MAXCNT: Maximum number of bytes to transfer */
  #define RADIO_DFEPACKET_MAXCNT_ResetValue (0x00004000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes to transfer */
  #define RADIO_DFEPACKET_MAXCNT_MAXCNT_Pos (0UL)
  #define RADIO_DFEPACKET_MAXCNT_MAXCNT_Msk (0xFFFFUL << RADIO_DFEPACKET_MAXCNT_MAXCNT_Pos)


/* RADIO_DFEPACKET_AMOUNT: Number of bytes transferred in the last transaction */
  #define RADIO_DFEPACKET_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction */
  #define RADIO_DFEPACKET_AMOUNT_AMOUNT_Pos (0UL)
  #define RADIO_DFEPACKET_AMOUNT_AMOUNT_Msk (0xFFFFUL << RADIO_DFEPACKET_AMOUNT_AMOUNT_Pos)


/* RADIO_DFEPACKET_CURRENTAMOUNT: Number of bytes transferred in the current transaction */
  #define RADIO_DFEPACKET_CURRENTAMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the current transaction. Continuously updated. */
  #define RADIO_DFEPACKET_CURRENTAMOUNT_AMOUNT_Pos (0UL)
  #define RADIO_DFEPACKET_CURRENTAMOUNT_AMOUNT_Msk (0xFFFFUL << RADIO_DFEPACKET_CURRENTAMOUNT_AMOUNT_Pos) /*!< Bit mask of
                                                                            AMOUNT field.*/



/* ================================================== Struct RADIO_CSTONES =================================================== */
/**
  * @brief CSTONES [RADIO_CSTONES] (unspecified)
  */
typedef struct {
  __IOM uint32_t  MODE;                              /*!< (@ 0x00000000) Selects the mode(s) that are activated on the start
                                                                         signal*/
  __IOM uint32_t  NUMSAMPLES;
  __IOM uint32_t  NEXTFREQUENCY;                     /*!< (@ 0x00000008) The value of FREQUENCY that will be used in the next
                                                                         step*/
  __IOM uint32_t  FFOIN;                             /*!< (@ 0x0000000C) Override value of FFO (Fractional Frequency Offset) if
                                                                         not to be based on the frequency estimate derived from
                                                                         CnAcc (autocorrelation of the scaled input signal)
                                                                         value*/
  __IOM uint32_t  FFOSOURCE;
  __IOM uint32_t  FAEPEER;                           /*!< (@ 0x00000014) FAEPEER (Frequency Actuation Error) of peer if known.
                                                                         Used during Mode 0 steps.*/
  __IOM uint32_t  PHASESHIFT;
  __IOM uint32_t  NUMSAMPLESCOEFF;
  __IM  uint32_t  PCT16;
  __IM  uint32_t  MAGPHASEMEAN;                      /*!< (@ 0x00000024) Mean magnitude and phase of the signal before it is
                                                                         converted to PCT16*/
  __IM  uint32_t  IQRAWMEAN;
  __IM  uint32_t  MAGSTD;
  __IM  uint32_t  CNACC;                             /*!< (@ 0x00000030) Output of the autocorrelation of the accumulated IQ
                                                                         signal*/
  __IM  uint32_t  FFOEST;
  __IOM uint32_t  DOWNSAMPLE;
  __IM  uint32_t  FINETUNENEXT;
  __IM  uint32_t  CFOPHASE;
  __IM  uint32_t  FREQOFFSET;
  __IM  uint32_t  PCT11;                             /*!< (@ 0x00000048) Mean magnitude and mean phase converted to IQ. IQ
                                                                         values limited to [-1024,1023].*/
  __IM  uint32_t  LFAENEXT;                          /*!< (@ 0x0000004C) Quantization error between ADPLL frequency and the
                                                                         desired value of FFO * RF Frequency. Values limited to
                                                                         [-64,63] with units 7.6294 Hz.*/
} NRF_RADIO_CSTONES_Type;

/* RADIO_CSTONES_MODE: Selects the mode(s) that are activated on the start signal */
  #define RADIO_CSTONES_MODE_ResetValue (0x00000003UL)

/* TPM @Bit 0 : Enable or disable TPM */
  #define RADIO_CSTONES_MODE_TPM_Pos (0UL)
  #define RADIO_CSTONES_MODE_TPM_Msk (0x1UL << RADIO_CSTONES_MODE_TPM_Pos)
  #define RADIO_CSTONES_MODE_TPM_Min (0x0UL)
  #define RADIO_CSTONES_MODE_TPM_Max (0x1UL)
  #define RADIO_CSTONES_MODE_TPM_Disabled (0x0UL)
  #define RADIO_CSTONES_MODE_TPM_Enabled (0x1UL)

/* TFM @Bit 1 : Enable or disable TFM */
  #define RADIO_CSTONES_MODE_TFM_Pos (1UL)
  #define RADIO_CSTONES_MODE_TFM_Msk (0x1UL << RADIO_CSTONES_MODE_TFM_Pos)
  #define RADIO_CSTONES_MODE_TFM_Min (0x0UL)
  #define RADIO_CSTONES_MODE_TFM_Max (0x1UL)
  #define RADIO_CSTONES_MODE_TFM_Disabled (0x0UL)
  #define RADIO_CSTONES_MODE_TFM_Enabled (0x1UL)


/* RADIO_CSTONES_NUMSAMPLES: Number of input samples at 2MHz sample rate */
  #define RADIO_CSTONES_NUMSAMPLES_ResetValue (0x000000A0UL)

/* NUMSAMPLES @Bits 0..7 : Maximum value supported is 160 */
  #define RADIO_CSTONES_NUMSAMPLES_NUMSAMPLES_Pos (0UL)
  #define RADIO_CSTONES_NUMSAMPLES_NUMSAMPLES_Msk (0xFFUL << RADIO_CSTONES_NUMSAMPLES_NUMSAMPLES_Pos) /*!< Bit mask of
                                                                            NUMSAMPLES field.*/


/* RADIO_CSTONES_NEXTFREQUENCY: The value of FREQUENCY that will be used in the next step */
  #define RADIO_CSTONES_NEXTFREQUENCY_ResetValue (0x00000000UL)

/* NEXTFREQUENCY @Bits 0..6 : Frequency = 2400 + FREQUENCY (MHz) */
  #define RADIO_CSTONES_NEXTFREQUENCY_NEXTFREQUENCY_Pos (0UL)
  #define RADIO_CSTONES_NEXTFREQUENCY_NEXTFREQUENCY_Msk (0x7FUL << RADIO_CSTONES_NEXTFREQUENCY_NEXTFREQUENCY_Pos) /*!< Bit mask
                                                                            of NEXTFREQUENCY field.*/


/* RADIO_CSTONES_FFOIN: Override value of FFO (Fractional Frequency Offset) if not to be based on the frequency estimate derived
                         from CnAcc (autocorrelation of the scaled input signal) value */

  #define RADIO_CSTONES_FFOIN_ResetValue (0x00000000UL)

/* FFFIN @Bits 0..11 : Units 62.5 ppb. Max range +/-100 ppm plus margin. */
  #define RADIO_CSTONES_FFOIN_FFFIN_Pos (0UL)
  #define RADIO_CSTONES_FFOIN_FFFIN_Msk (0xFFFUL << RADIO_CSTONES_FFOIN_FFFIN_Pos)


/* RADIO_CSTONES_FFOSOURCE: Source of FFO */
  #define RADIO_CSTONES_FFOSOURCE_ResetValue (0x00000001UL)

/* FFOSOURCE @Bit 0 : Use external or internal FFOSOURCE */
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Pos (0UL)
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Msk (0x1UL << RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Pos) /*!< Bit mask of FFOSOURCE
                                                                            field.*/
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Min (0x0UL)
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Max (0x1UL)
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_External (0x0UL)
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Internal (0x1UL)


/* RADIO_CSTONES_FAEPEER: FAEPEER (Frequency Actuation Error) of peer if known. Used during Mode 0 steps. */
  #define RADIO_CSTONES_FAEPEER_ResetValue (0x00000000UL)

/* FAEPEER @Bits 0..7 : Units 31.25 ppb. */
  #define RADIO_CSTONES_FAEPEER_FAEPEER_Pos (0UL)
  #define RADIO_CSTONES_FAEPEER_FAEPEER_Msk (0xFFUL << RADIO_CSTONES_FAEPEER_FAEPEER_Pos)


/* RADIO_CSTONES_PHASESHIFT: Parameter used in TPM, provided by software */
  #define RADIO_CSTONES_PHASESHIFT_ResetValue (0x00000000UL)

/* PHASESHIFT @Bits 0..15 : Phase shift used in TPM calculation */
  #define RADIO_CSTONES_PHASESHIFT_PHASESHIFT_Pos (0UL)
  #define RADIO_CSTONES_PHASESHIFT_PHASESHIFT_Msk (0xFFFFUL << RADIO_CSTONES_PHASESHIFT_PHASESHIFT_Pos) /*!< Bit mask of
                                                                            PHASESHIFT field.*/


/* RADIO_CSTONES_NUMSAMPLESCOEFF: Parameter used in TPM, provided by software */
  #define RADIO_CSTONES_NUMSAMPLESCOEFF_ResetValue (0x0000199AUL)

/* NUMSAMPLESCOEFF @Bits 0..15 : Coefficient 2**16/(numSamples/16) in Q1.15 format (Default numsamples value is 160) */
  #define RADIO_CSTONES_NUMSAMPLESCOEFF_NUMSAMPLESCOEFF_Pos (0UL)
  #define RADIO_CSTONES_NUMSAMPLESCOEFF_NUMSAMPLESCOEFF_Msk (0xFFFFUL << RADIO_CSTONES_NUMSAMPLESCOEFF_NUMSAMPLESCOEFF_Pos) /*!<
                                                                            Bit mask of NUMSAMPLESCOEFF field.*/


/* RADIO_CSTONES_PCT16: Mean magnitude and mean phase converted to IQ */
  #define RADIO_CSTONES_PCT16_ResetValue (0x00000000UL)

/* PCT16I @Bits 0..15 : Inphase */
  #define RADIO_CSTONES_PCT16_PCT16I_Pos (0UL)
  #define RADIO_CSTONES_PCT16_PCT16I_Msk (0xFFFFUL << RADIO_CSTONES_PCT16_PCT16I_Pos)

/* PCT16Q @Bits 16..31 : Quadrature */
  #define RADIO_CSTONES_PCT16_PCT16Q_Pos (16UL)
  #define RADIO_CSTONES_PCT16_PCT16Q_Msk (0xFFFFUL << RADIO_CSTONES_PCT16_PCT16Q_Pos)


/* RADIO_CSTONES_MAGPHASEMEAN: Mean magnitude and phase of the signal before it is converted to PCT16 */
  #define RADIO_CSTONES_MAGPHASEMEAN_ResetValue (0x00000000UL)

/* PHASE @Bits 0..15 : Mean phase */
  #define RADIO_CSTONES_MAGPHASEMEAN_PHASE_Pos (0UL)
  #define RADIO_CSTONES_MAGPHASEMEAN_PHASE_Msk (0xFFFFUL << RADIO_CSTONES_MAGPHASEMEAN_PHASE_Pos)

/* MAG @Bits 16..31 : Mean magnitude */
  #define RADIO_CSTONES_MAGPHASEMEAN_MAG_Pos (16UL)
  #define RADIO_CSTONES_MAGPHASEMEAN_MAG_Msk (0xFFFFUL << RADIO_CSTONES_MAGPHASEMEAN_MAG_Pos)


/* RADIO_CSTONES_IQRAWMEAN: Mean of IQ values */
  #define RADIO_CSTONES_IQRAWMEAN_ResetValue (0x00000000UL)

/* IQRAWMEANI @Bits 0..15 : Inphase */
  #define RADIO_CSTONES_IQRAWMEAN_IQRAWMEANI_Pos (0UL)
  #define RADIO_CSTONES_IQRAWMEAN_IQRAWMEANI_Msk (0xFFFFUL << RADIO_CSTONES_IQRAWMEAN_IQRAWMEANI_Pos) /*!< Bit mask of
                                                                            IQRAWMEANI field.*/

/* IQRAWMEANQ @Bits 16..31 : Quadrature */
  #define RADIO_CSTONES_IQRAWMEAN_IQRAWMEANQ_Pos (16UL)
  #define RADIO_CSTONES_IQRAWMEAN_IQRAWMEANQ_Msk (0xFFFFUL << RADIO_CSTONES_IQRAWMEAN_IQRAWMEANQ_Pos) /*!< Bit mask of
                                                                            IQRAWMEANQ field.*/


/* RADIO_CSTONES_MAGSTD: Magnitude standard deviation approximation */
  #define RADIO_CSTONES_MAGSTD_ResetValue (0x00000000UL)

/* MAGSTD @Bits 0..15 : Magnitude standard deviation approximation */
  #define RADIO_CSTONES_MAGSTD_MAGSTD_Pos (0UL)
  #define RADIO_CSTONES_MAGSTD_MAGSTD_Msk (0xFFFFUL << RADIO_CSTONES_MAGSTD_MAGSTD_Pos)


/* RADIO_CSTONES_CNACC: Output of the autocorrelation of the accumulated IQ signal */
  #define RADIO_CSTONES_CNACC_ResetValue (0x00000000UL)

/* CNACCI @Bits 0..15 : (unspecified) */
  #define RADIO_CSTONES_CNACC_CNACCI_Pos (0UL)
  #define RADIO_CSTONES_CNACC_CNACCI_Msk (0xFFFFUL << RADIO_CSTONES_CNACC_CNACCI_Pos)

/* CNACCQ @Bits 16..31 : (unspecified) */
  #define RADIO_CSTONES_CNACC_CNACCQ_Pos (16UL)
  #define RADIO_CSTONES_CNACC_CNACCQ_Msk (0xFFFFUL << RADIO_CSTONES_CNACC_CNACCQ_Pos)


/* RADIO_CSTONES_FFOEST: FFO estimate */
  #define RADIO_CSTONES_FFOEST_ResetValue (0x00000000UL)

/* FFOEST @Bits 0..11 : Units 62.5 ppb. Max range +/-100 ppm plus margin. */
  #define RADIO_CSTONES_FFOEST_FFOEST_Pos (0UL)
  #define RADIO_CSTONES_FFOEST_FFOEST_Msk (0xFFFUL << RADIO_CSTONES_FFOEST_FFOEST_Pos)


/* RADIO_CSTONES_DOWNSAMPLE: Turn on/off down sample of input IQ-signals */
  #define RADIO_CSTONES_DOWNSAMPLE_ResetValue (0x00000000UL)

/* ENABLEFILTER @Bit 0 : Turn on/off down sample of input IQ-signals */
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Pos (0UL)
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Msk (0x1UL << RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Pos) /*!< Bit mask of
                                                                            ENABLEFILTER field.*/
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Min (0x0UL)
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Max (0x1UL)
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_OFF (0x0UL)
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_ON (0x1UL)

/* RATE @Bit 1 : Indicating if BLE1M or BLE2M is used */
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_Pos (1UL)
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_Msk (0x1UL << RADIO_CSTONES_DOWNSAMPLE_RATE_Pos)
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_Min (0x0UL)
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_Max (0x1UL)
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_BLE1M (0x0UL)
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_BLE2m (0x1UL)


/* RADIO_CSTONES_FINETUNENEXT: Number of full ADPLL finetune steps */
  #define RADIO_CSTONES_FINETUNENEXT_ResetValue (0x00000000UL)

/* FINETUNENEXT @Bits 0..12 : Units of 488.28125 Hz */
  #define RADIO_CSTONES_FINETUNENEXT_FINETUNENEXT_Pos (0UL)
  #define RADIO_CSTONES_FINETUNENEXT_FINETUNENEXT_Msk (0x1FFFUL << RADIO_CSTONES_FINETUNENEXT_FINETUNENEXT_Pos) /*!< Bit mask of
                                                                            FINETUNENEXT field.*/


/* RADIO_CSTONES_CFOPHASE: Cordic output of CnAcc */
  #define RADIO_CSTONES_CFOPHASE_ResetValue (0x00000000UL)

/* CFOPHASE @Bits 0..15 : (unspecified) */
  #define RADIO_CSTONES_CFOPHASE_CFOPHASE_Pos (0UL)
  #define RADIO_CSTONES_CFOPHASE_CFOPHASE_Msk (0xFFFFUL << RADIO_CSTONES_CFOPHASE_CFOPHASE_Pos) /*!< Bit mask of CFOPHASE
                                                                            field.*/


/* RADIO_CSTONES_FREQOFFSET: Frequency offset estimate */
  #define RADIO_CSTONES_FREQOFFSET_ResetValue (0x00000000UL)

/* FREQOFFSET @Bits 0..13 : (unspecified) */
  #define RADIO_CSTONES_FREQOFFSET_FREQOFFSET_Pos (0UL)
  #define RADIO_CSTONES_FREQOFFSET_FREQOFFSET_Msk (0x3FFFUL << RADIO_CSTONES_FREQOFFSET_FREQOFFSET_Pos) /*!< Bit mask of
                                                                            FREQOFFSET field.*/


/* RADIO_CSTONES_PCT11: Mean magnitude and mean phase converted to IQ. IQ values limited to [-1024,1023]. */
  #define RADIO_CSTONES_PCT11_ResetValue (0x00000000UL)

/* PCT11I @Bits 0..10 : Inphase */
  #define RADIO_CSTONES_PCT11_PCT11I_Pos (0UL)
  #define RADIO_CSTONES_PCT11_PCT11I_Msk (0x7FFUL << RADIO_CSTONES_PCT11_PCT11I_Pos)

/* PCT11Q @Bits 11..21 : Quadrature */
  #define RADIO_CSTONES_PCT11_PCT11Q_Pos (11UL)
  #define RADIO_CSTONES_PCT11_PCT11Q_Msk (0x7FFUL << RADIO_CSTONES_PCT11_PCT11Q_Pos)


/* RADIO_CSTONES_LFAENEXT: Quantization error between ADPLL frequency and the desired value of FFO * RF Frequency. Values
                            limited to [-64,63] with units 7.6294 Hz. */

  #define RADIO_CSTONES_LFAENEXT_ResetValue (0x00000000UL)

/* LFAENEXT @Bits 0..6 : Inphase */
  #define RADIO_CSTONES_LFAENEXT_LFAENEXT_Pos (0UL)
  #define RADIO_CSTONES_LFAENEXT_LFAENEXT_Msk (0x7FUL << RADIO_CSTONES_LFAENEXT_LFAENEXT_Pos)



/* ==================================================== Struct RADIO_RTT ===================================================== */
/**
  * @brief RTT [RADIO_RTT] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  SEGMENT01;
  __IOM uint32_t  SEGMENT23;
  __IOM uint32_t  SEGMENT45;
  __IOM uint32_t  SEGMENT67;
} NRF_RADIO_RTT_Type;

/* RADIO_RTT_CONFIG: RTT Config. */
  #define RADIO_RTT_CONFIG_ResetValue (0x00000000UL)

/* EN @Bit 0 : Enable RTT Functionality. Only valid for BLE 1MBPS and 2MBPS mode */
  #define RADIO_RTT_CONFIG_EN_Pos (0UL)
  #define RADIO_RTT_CONFIG_EN_Msk (0x1UL << RADIO_RTT_CONFIG_EN_Pos)
  #define RADIO_RTT_CONFIG_EN_Min (0x0UL)
  #define RADIO_RTT_CONFIG_EN_Max (0x1UL)
  #define RADIO_RTT_CONFIG_EN_Disabled (0x0UL)
  #define RADIO_RTT_CONFIG_EN_Enabled (0x1UL)

/* ENFULLAA @Bit 1 : Enabling/Disable ping over the entire access address. */
  #define RADIO_RTT_CONFIG_ENFULLAA_Pos (1UL)
  #define RADIO_RTT_CONFIG_ENFULLAA_Msk (0x1UL << RADIO_RTT_CONFIG_ENFULLAA_Pos)
  #define RADIO_RTT_CONFIG_ENFULLAA_Min (0x0UL)
  #define RADIO_RTT_CONFIG_ENFULLAA_Max (0x1UL)
  #define RADIO_RTT_CONFIG_ENFULLAA_Disabled (0x0UL) /*!< Disable ping over the entire access address, i.e., enable only over
                                                          the first 16-bit access address*/
  #define RADIO_RTT_CONFIG_ENFULLAA_Enabled (0x1UL)

/* ROLE @Bit 2 : Role as a Initiator or Reflector. */
  #define RADIO_RTT_CONFIG_ROLE_Pos (2UL)
  #define RADIO_RTT_CONFIG_ROLE_Msk (0x1UL << RADIO_RTT_CONFIG_ROLE_Pos)
  #define RADIO_RTT_CONFIG_ROLE_Min (0x0UL)
  #define RADIO_RTT_CONFIG_ROLE_Max (0x1UL)
  #define RADIO_RTT_CONFIG_ROLE_Initiator (0x0UL)
  #define RADIO_RTT_CONFIG_ROLE_Reflector (0x1UL)

/* NUMSEGMENTS @Bits 3..6 : Number of 16bit payload segments available for ToA detection. Allowed values are 0, 2, 4, 6 and 8. */
  #define RADIO_RTT_CONFIG_NUMSEGMENTS_Pos (3UL)
  #define RADIO_RTT_CONFIG_NUMSEGMENTS_Msk (0xFUL << RADIO_RTT_CONFIG_NUMSEGMENTS_Pos)

/* EFSDELAY @Bits 8..16 : Early Frame Sync Delay, i.e., number of cycles to wait for access address to anchor correctly. For
                          2MBPSBLE mode, the EFSDELAY value is 64 (2us) and for 1MBPSBLE mode, it can be 256 (8us). */

  #define RADIO_RTT_CONFIG_EFSDELAY_Pos (8UL)
  #define RADIO_RTT_CONFIG_EFSDELAY_Msk (0x1FFUL << RADIO_RTT_CONFIG_EFSDELAY_Pos)


/* RADIO_RTT_SEGMENT01: RTT segments 0 and 1 */
  #define RADIO_RTT_SEGMENT01_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data Bits 31 - 0 */
  #define RADIO_RTT_SEGMENT01_DATA_Pos (0UL)
  #define RADIO_RTT_SEGMENT01_DATA_Msk (0xFFFFFFFFUL << RADIO_RTT_SEGMENT01_DATA_Pos)


/* RADIO_RTT_SEGMENT23: RTT segments 2 and 3 */
  #define RADIO_RTT_SEGMENT23_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data Bits 63 - 32 */
  #define RADIO_RTT_SEGMENT23_DATA_Pos (0UL)
  #define RADIO_RTT_SEGMENT23_DATA_Msk (0xFFFFFFFFUL << RADIO_RTT_SEGMENT23_DATA_Pos)


/* RADIO_RTT_SEGMENT45: RTT segments 4 and 5 */
  #define RADIO_RTT_SEGMENT45_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data Bits 95 - 64 */
  #define RADIO_RTT_SEGMENT45_DATA_Pos (0UL)
  #define RADIO_RTT_SEGMENT45_DATA_Msk (0xFFFFFFFFUL << RADIO_RTT_SEGMENT45_DATA_Pos)


/* RADIO_RTT_SEGMENT67: RTT segments 6 and 7 */
  #define RADIO_RTT_SEGMENT67_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data Bits 127 - 96 */
  #define RADIO_RTT_SEGMENT67_DATA_Pos (0UL)
  #define RADIO_RTT_SEGMENT67_DATA_Msk (0xFFFFFFFFUL << RADIO_RTT_SEGMENT67_DATA_Pos)


/* ====================================================== Struct RADIO ======================================================= */
/**
  * @brief 2.4 GHz radio
  */
  typedef struct {
    __OM uint32_t TASKS_TXEN;
    __OM uint32_t TASKS_RXEN;
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_DISABLE;
    __OM uint32_t TASKS_RSSISTART;                   /*!< (@ 0x00000014) Start the RSSI and take one single sample of the
                                                                         receive signal strength*/
    __OM uint32_t TASKS_BCSTART;
    __OM uint32_t TASKS_BCSTOP;
    __OM uint32_t TASKS_EDSTART;                     /*!< (@ 0x00000020) Start the energy detect measurement used in IEEE
                                                                         802.15.4 mode*/
    __OM uint32_t TASKS_EDSTOP;
    __OM uint32_t TASKS_CCASTART;                    /*!< (@ 0x00000028) Start the clear channel assessment used in IEEE
                                                                         802.15.4 mode*/
    __OM uint32_t TASKS_CCASTOP;
    __IM uint32_t RESERVED[29];
    __OM uint32_t TASKS_SOFTRESET;                   /*!< (@ 0x000000A4) Reset all public registers, but with these exceptions:
                                                                         DMA registers and EVENT/INTEN/SUBSCRIBE/PUBLISH
                                                                         registers. Only to be used in DISABLED state.*/
    __IM uint32_t RESERVED1[22];
    __IOM uint32_t SUBSCRIBE_TXEN;
    __IOM uint32_t SUBSCRIBE_RXEN;
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_DISABLE;
    __IOM uint32_t SUBSCRIBE_RSSISTART;
    __IOM uint32_t SUBSCRIBE_BCSTART;
    __IOM uint32_t SUBSCRIBE_BCSTOP;
    __IOM uint32_t SUBSCRIBE_EDSTART;
    __IOM uint32_t SUBSCRIBE_EDSTOP;
    __IOM uint32_t SUBSCRIBE_CCASTART;
    __IOM uint32_t SUBSCRIBE_CCASTOP;
    __IM uint32_t RESERVED2[29];
    __IOM uint32_t SUBSCRIBE_SOFTRESET;
    __IM uint32_t RESERVED3[22];
    __IOM uint32_t EVENTS_READY;
    __IOM uint32_t EVENTS_TXREADY;
    __IOM uint32_t EVENTS_RXREADY;
    __IOM uint32_t EVENTS_ADDRESS;
    __IOM uint32_t EVENTS_FRAMESTART;
    __IOM uint32_t EVENTS_PAYLOAD;
    __IOM uint32_t EVENTS_END;
    __IOM uint32_t EVENTS_PHYEND;
    __IOM uint32_t EVENTS_DISABLED;
    __IOM uint32_t EVENTS_DEVMATCH;                  /*!< (@ 0x00000224) A device address match occurred on the last received
                                                                         packet*/
    __IOM uint32_t EVENTS_DEVMISS;                   /*!< (@ 0x00000228) No device address match occurred on the last received
                                                                         packet*/
    __IOM uint32_t EVENTS_CRCOK;
    __IOM uint32_t EVENTS_CRCERROR;
    __IM uint32_t RESERVED4;
    __IOM uint32_t EVENTS_BCMATCH;
    __IOM uint32_t EVENTS_EDEND;                     /*!< (@ 0x0000023C) Sampling of energy detection complete (a new ED sample
                                                                         is ready for readout from the RADIO.EDSAMPLE register)*/
    __IOM uint32_t EVENTS_EDSTOPPED;
    __IOM uint32_t EVENTS_CCAIDLE;
    __IOM uint32_t EVENTS_CCABUSY;
    __IOM uint32_t EVENTS_CCASTOPPED;
    __IOM uint32_t EVENTS_RATEBOOST;                 /*!< (@ 0x00000250) Ble_LR CI field received, receive mode is changed from
                                                                         Ble_LR125Kbit to Ble_LR500Kbit*/
    __IOM uint32_t EVENTS_MHRMATCH;
    __IOM uint32_t EVENTS_SYNC;
    __IOM uint32_t EVENTS_CTEPRESENT;
    __IM uint32_t RESERVED5[40];
    __IOM uint32_t PUBLISH_READY;
    __IOM uint32_t PUBLISH_TXREADY;
    __IOM uint32_t PUBLISH_RXREADY;
    __IOM uint32_t PUBLISH_ADDRESS;
    __IOM uint32_t PUBLISH_FRAMESTART;
    __IOM uint32_t PUBLISH_PAYLOAD;
    __IOM uint32_t PUBLISH_END;
    __IOM uint32_t PUBLISH_PHYEND;
    __IOM uint32_t PUBLISH_DISABLED;
    __IOM uint32_t PUBLISH_DEVMATCH;
    __IOM uint32_t PUBLISH_DEVMISS;
    __IOM uint32_t PUBLISH_CRCOK;
    __IOM uint32_t PUBLISH_CRCERROR;
    __IM uint32_t RESERVED6;
    __IOM uint32_t PUBLISH_BCMATCH;
    __IOM uint32_t PUBLISH_EDEND;
    __IOM uint32_t PUBLISH_EDSTOPPED;
    __IOM uint32_t PUBLISH_CCAIDLE;
    __IOM uint32_t PUBLISH_CCABUSY;
    __IOM uint32_t PUBLISH_CCASTOPPED;
    __IOM uint32_t PUBLISH_RATEBOOST;
    __IOM uint32_t PUBLISH_MHRMATCH;
    __IOM uint32_t PUBLISH_SYNC;
    __IOM uint32_t PUBLISH_CTEPRESENT;
    __IM uint32_t RESERVED7[40];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED8[33];
    __IOM uint32_t INTENSET00;
    __IM uint32_t RESERVED9;
    __IOM uint32_t INTENCLR00;
    __IM uint32_t RESERVED10[5];
    __IOM uint32_t INTENSET10;
    __IM uint32_t RESERVED11;
    __IOM uint32_t INTENCLR10;
    __IM uint32_t RESERVED12[19];
    __IOM uint32_t MODE;
    __IM uint32_t RESERVED13[7];
    __IM uint32_t STATE;
    __IM uint32_t RESERVED14[3];
    __IOM uint32_t EDCTRL;
    __IM uint32_t EDSAMPLE;
    __IOM uint32_t CCACTRL;
    __IM uint32_t RESERVED15;
    __IOM uint32_t DATAWHITE;
    __IM uint32_t RESERVED16[112];
    __IOM uint32_t TIMING;
    __IOM uint32_t FREQUENCY;
    __IM uint32_t RESERVED17;
    __IOM uint32_t TXPOWER;
    __IOM uint32_t TIFS;
    __IM uint32_t RSSISAMPLE;
    __IM uint32_t RESERVED18[123];
    __IOM uint32_t FECONFIG;
    __IM uint32_t RESERVED19[253];
    __IOM uint32_t DFEMODE;                          /*!< (@ 0x00000D00) Whether to use Angle-of-Arrival (AOA) or
                                                                         Angle-of-Departure (AOD)*/
    __IM uint32_t DFESTATUS;
    __IM uint32_t RESERVED20[2];
    __IOM uint32_t DFECTRL1;
    __IOM uint32_t DFECTRL2;
    __IM uint32_t RESERVED21[4];
    __IOM uint32_t SWITCHPATTERN;
    __OM uint32_t CLEARPATTERN;
    __IOM NRF_RADIO_PSEL_Type PSEL;
    __IOM NRF_RADIO_DFEPACKET_Type DFEPACKET;
    __IM uint32_t RESERVED22[43];
    __IM uint32_t CRCSTATUS;
    __IM uint32_t RXMATCH;
    __IM uint32_t RXCRC;
    __IM uint32_t DAI;
    __IM uint32_t PDUSTAT;
    __IOM uint32_t PCNF0;
    __IM uint32_t RESERVED23;
    __IOM uint32_t PCNF1;
    __IOM uint32_t BASE0;
    __IOM uint32_t BASE1;
    __IOM uint32_t PREFIX0;
    __IOM uint32_t PREFIX1;
    __IOM uint32_t TXADDRESS;
    __IOM uint32_t RXADDRESSES;
    __IOM uint32_t CRCCNF;
    __IOM uint32_t CRCPOLY;
    __IOM uint32_t CRCINIT;
    __IOM uint32_t DAB[8];
    __IOM uint32_t DAP[8];
    __IOM uint32_t DACNF;
    __IOM uint32_t BCC;
    __IM uint32_t RESERVED24[3];
    __IM uint32_t CTESTATUS;
    __IM uint32_t RESERVED25[3];
    __IOM uint32_t MHRMATCHCONF;
    __IOM uint32_t MHRMATCHMASK;
    __IOM uint32_t SFD;
    __IOM uint32_t CTEINLINECONF;
    __IM uint32_t RESERVED26[3];
    __IOM uint32_t PACKETPTR;
    __IM uint32_t RESERVED27[75];
    __IOM NRF_RADIO_CSTONES_Type CSTONES;
    __IOM NRF_RADIO_RTT_Type RTT;
  } NRF_RADIO_Type;

/* RADIO_TASKS_TXEN: Enable RADIO in TX mode */
  #define RADIO_TASKS_TXEN_ResetValue (0x00000000UL)

/* TASKS_TXEN @Bit 0 : Enable RADIO in TX mode */
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Pos (0UL)
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Msk (0x1UL << RADIO_TASKS_TXEN_TASKS_TXEN_Pos)
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Min (0x1UL)
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Max (0x1UL)
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Trigger (0x1UL)


/* RADIO_TASKS_RXEN: Enable RADIO in RX mode */
  #define RADIO_TASKS_RXEN_ResetValue (0x00000000UL)

/* TASKS_RXEN @Bit 0 : Enable RADIO in RX mode */
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Pos (0UL)
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Msk (0x1UL << RADIO_TASKS_RXEN_TASKS_RXEN_Pos)
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Min (0x1UL)
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Max (0x1UL)
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Trigger (0x1UL)


/* RADIO_TASKS_START: Start RADIO */
  #define RADIO_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start RADIO */
  #define RADIO_TASKS_START_TASKS_START_Pos (0UL)
  #define RADIO_TASKS_START_TASKS_START_Msk (0x1UL << RADIO_TASKS_START_TASKS_START_Pos)
  #define RADIO_TASKS_START_TASKS_START_Min (0x1UL)
  #define RADIO_TASKS_START_TASKS_START_Max (0x1UL)
  #define RADIO_TASKS_START_TASKS_START_Trigger (0x1UL)


/* RADIO_TASKS_STOP: Stop RADIO */
  #define RADIO_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop RADIO */
  #define RADIO_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define RADIO_TASKS_STOP_TASKS_STOP_Msk (0x1UL << RADIO_TASKS_STOP_TASKS_STOP_Pos)
  #define RADIO_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define RADIO_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define RADIO_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* RADIO_TASKS_DISABLE: Disable RADIO */
  #define RADIO_TASKS_DISABLE_ResetValue (0x00000000UL)

/* TASKS_DISABLE @Bit 0 : Disable RADIO */
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Pos (0UL)
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Msk (0x1UL << RADIO_TASKS_DISABLE_TASKS_DISABLE_Pos) /*!< Bit mask of TASKS_DISABLE
                                                                            field.*/
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Min (0x1UL)
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Max (0x1UL)
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Trigger (0x1UL)


/* RADIO_TASKS_RSSISTART: Start the RSSI and take one single sample of the receive signal strength */
  #define RADIO_TASKS_RSSISTART_ResetValue (0x00000000UL)

/* TASKS_RSSISTART @Bit 0 : Start the RSSI and take one single sample of the receive signal strength */
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Pos (0UL)
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Msk (0x1UL << RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Pos) /*!< Bit mask of
                                                                            TASKS_RSSISTART field.*/
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Min (0x1UL)
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Max (0x1UL)
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Trigger (0x1UL)


/* RADIO_TASKS_BCSTART: Start the bit counter */
  #define RADIO_TASKS_BCSTART_ResetValue (0x00000000UL)

/* TASKS_BCSTART @Bit 0 : Start the bit counter */
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Pos (0UL)
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Msk (0x1UL << RADIO_TASKS_BCSTART_TASKS_BCSTART_Pos) /*!< Bit mask of TASKS_BCSTART
                                                                            field.*/
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Min (0x1UL)
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Max (0x1UL)
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Trigger (0x1UL)


/* RADIO_TASKS_BCSTOP: Stop the bit counter */
  #define RADIO_TASKS_BCSTOP_ResetValue (0x00000000UL)

/* TASKS_BCSTOP @Bit 0 : Stop the bit counter */
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Pos (0UL)
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Msk (0x1UL << RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Pos) /*!< Bit mask of TASKS_BCSTOP
                                                                            field.*/
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Min (0x1UL)
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Max (0x1UL)
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Trigger (0x1UL)


/* RADIO_TASKS_EDSTART: Start the energy detect measurement used in IEEE 802.15.4 mode */
  #define RADIO_TASKS_EDSTART_ResetValue (0x00000000UL)

/* TASKS_EDSTART @Bit 0 : Start the energy detect measurement used in IEEE 802.15.4 mode */
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Pos (0UL)
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Msk (0x1UL << RADIO_TASKS_EDSTART_TASKS_EDSTART_Pos) /*!< Bit mask of TASKS_EDSTART
                                                                            field.*/
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Min (0x1UL)
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Max (0x1UL)
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Trigger (0x1UL)


/* RADIO_TASKS_EDSTOP: Stop the energy detect measurement */
  #define RADIO_TASKS_EDSTOP_ResetValue (0x00000000UL)

/* TASKS_EDSTOP @Bit 0 : Stop the energy detect measurement */
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Pos (0UL)
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Msk (0x1UL << RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Pos) /*!< Bit mask of TASKS_EDSTOP
                                                                            field.*/
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Min (0x1UL)
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Max (0x1UL)
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Trigger (0x1UL)


/* RADIO_TASKS_CCASTART: Start the clear channel assessment used in IEEE 802.15.4 mode */
  #define RADIO_TASKS_CCASTART_ResetValue (0x00000000UL)

/* TASKS_CCASTART @Bit 0 : Start the clear channel assessment used in IEEE 802.15.4 mode */
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Pos (0UL)
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Msk (0x1UL << RADIO_TASKS_CCASTART_TASKS_CCASTART_Pos) /*!< Bit mask of
                                                                            TASKS_CCASTART field.*/
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Min (0x1UL)
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Max (0x1UL)
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Trigger (0x1UL)


/* RADIO_TASKS_CCASTOP: Stop the clear channel assessment */
  #define RADIO_TASKS_CCASTOP_ResetValue (0x00000000UL)

/* TASKS_CCASTOP @Bit 0 : Stop the clear channel assessment */
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Pos (0UL)
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Msk (0x1UL << RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Pos) /*!< Bit mask of TASKS_CCASTOP
                                                                            field.*/
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Min (0x1UL)
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Max (0x1UL)
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Trigger (0x1UL)


/* RADIO_TASKS_SOFTRESET: Reset all public registers, but with these exceptions: DMA registers and EVENT/INTEN/SUBSCRIBE/PUBLISH
                           registers. Only to be used in DISABLED state. */

  #define RADIO_TASKS_SOFTRESET_ResetValue (0x00000000UL)

/* TASKS_SOFTRESET @Bit 0 : Reset all public registers, but with these exceptions: DMA registers and
                            EVENT/INTEN/SUBSCRIBE/PUBLISH registers. Only to be used in DISABLED state. */

  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Pos (0UL)
  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Msk (0x1UL << RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Pos) /*!< Bit mask of
                                                                            TASKS_SOFTRESET field.*/
  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Min (0x1UL)
  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Max (0x1UL)
  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Trigger (0x1UL)


/* RADIO_SUBSCRIBE_TXEN: Subscribe configuration for task TXEN */
  #define RADIO_SUBSCRIBE_TXEN_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task TXEN will subscribe to */
  #define RADIO_SUBSCRIBE_TXEN_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_TXEN_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_TXEN_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_TXEN_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_TXEN_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_TXEN_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_TXEN_EN_Msk (0x1UL << RADIO_SUBSCRIBE_TXEN_EN_Pos)
  #define RADIO_SUBSCRIBE_TXEN_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_TXEN_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_TXEN_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_TXEN_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_RXEN: Subscribe configuration for task RXEN */
  #define RADIO_SUBSCRIBE_RXEN_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RXEN will subscribe to */
  #define RADIO_SUBSCRIBE_RXEN_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_RXEN_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_RXEN_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_RXEN_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_RXEN_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_RXEN_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_RXEN_EN_Msk (0x1UL << RADIO_SUBSCRIBE_RXEN_EN_Pos)
  #define RADIO_SUBSCRIBE_RXEN_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_RXEN_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_RXEN_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_RXEN_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_START: Subscribe configuration for task START */
  #define RADIO_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define RADIO_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_START_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_START_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_START_EN_Msk (0x1UL << RADIO_SUBSCRIBE_START_EN_Pos)
  #define RADIO_SUBSCRIBE_START_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_START_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define RADIO_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define RADIO_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_STOP_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_STOP_EN_Msk (0x1UL << RADIO_SUBSCRIBE_STOP_EN_Pos)
  #define RADIO_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_DISABLE: Subscribe configuration for task DISABLE */
  #define RADIO_SUBSCRIBE_DISABLE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLE will subscribe to */
  #define RADIO_SUBSCRIBE_DISABLE_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_DISABLE_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_DISABLE_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_DISABLE_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_DISABLE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_DISABLE_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_DISABLE_EN_Msk (0x1UL << RADIO_SUBSCRIBE_DISABLE_EN_Pos)
  #define RADIO_SUBSCRIBE_DISABLE_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_DISABLE_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_DISABLE_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_DISABLE_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_RSSISTART: Subscribe configuration for task RSSISTART */
  #define RADIO_SUBSCRIBE_RSSISTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RSSISTART will subscribe to */
  #define RADIO_SUBSCRIBE_RSSISTART_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_RSSISTART_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_RSSISTART_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_RSSISTART_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_RSSISTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Msk (0x1UL << RADIO_SUBSCRIBE_RSSISTART_EN_Pos)
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_BCSTART: Subscribe configuration for task BCSTART */
  #define RADIO_SUBSCRIBE_BCSTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task BCSTART will subscribe to */
  #define RADIO_SUBSCRIBE_BCSTART_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_BCSTART_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_BCSTART_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_BCSTART_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_BCSTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_BCSTART_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_BCSTART_EN_Msk (0x1UL << RADIO_SUBSCRIBE_BCSTART_EN_Pos)
  #define RADIO_SUBSCRIBE_BCSTART_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_BCSTART_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_BCSTART_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_BCSTART_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_BCSTOP: Subscribe configuration for task BCSTOP */
  #define RADIO_SUBSCRIBE_BCSTOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task BCSTOP will subscribe to */
  #define RADIO_SUBSCRIBE_BCSTOP_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_BCSTOP_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_BCSTOP_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_BCSTOP_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_BCSTOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Msk (0x1UL << RADIO_SUBSCRIBE_BCSTOP_EN_Pos)
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_EDSTART: Subscribe configuration for task EDSTART */
  #define RADIO_SUBSCRIBE_EDSTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task EDSTART will subscribe to */
  #define RADIO_SUBSCRIBE_EDSTART_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_EDSTART_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_EDSTART_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_EDSTART_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_EDSTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_EDSTART_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_EDSTART_EN_Msk (0x1UL << RADIO_SUBSCRIBE_EDSTART_EN_Pos)
  #define RADIO_SUBSCRIBE_EDSTART_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_EDSTART_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_EDSTART_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_EDSTART_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_EDSTOP: Subscribe configuration for task EDSTOP */
  #define RADIO_SUBSCRIBE_EDSTOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task EDSTOP will subscribe to */
  #define RADIO_SUBSCRIBE_EDSTOP_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_EDSTOP_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_EDSTOP_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_EDSTOP_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_EDSTOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Msk (0x1UL << RADIO_SUBSCRIBE_EDSTOP_EN_Pos)
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_CCASTART: Subscribe configuration for task CCASTART */
  #define RADIO_SUBSCRIBE_CCASTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CCASTART will subscribe to */
  #define RADIO_SUBSCRIBE_CCASTART_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_CCASTART_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_CCASTART_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_CCASTART_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_CCASTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_CCASTART_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_CCASTART_EN_Msk (0x1UL << RADIO_SUBSCRIBE_CCASTART_EN_Pos)
  #define RADIO_SUBSCRIBE_CCASTART_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_CCASTART_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_CCASTART_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_CCASTART_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_CCASTOP: Subscribe configuration for task CCASTOP */
  #define RADIO_SUBSCRIBE_CCASTOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CCASTOP will subscribe to */
  #define RADIO_SUBSCRIBE_CCASTOP_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_CCASTOP_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_CCASTOP_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_CCASTOP_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_CCASTOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Msk (0x1UL << RADIO_SUBSCRIBE_CCASTOP_EN_Pos)
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Enabled (0x1UL)


/* RADIO_SUBSCRIBE_SOFTRESET: Subscribe configuration for task SOFTRESET */
  #define RADIO_SUBSCRIBE_SOFTRESET_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SOFTRESET will subscribe to */
  #define RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Pos (0UL)
  #define RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Pos)
  #define RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Min (0x00UL)
  #define RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Pos (31UL)
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Msk (0x1UL << RADIO_SUBSCRIBE_SOFTRESET_EN_Pos)
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Min (0x0UL)
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Max (0x1UL)
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Disabled (0x0UL)
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Enabled (0x1UL)


/* RADIO_EVENTS_READY: RADIO has ramped up and is ready to be started */
  #define RADIO_EVENTS_READY_ResetValue (0x00000000UL)

/* EVENTS_READY @Bit 0 : RADIO has ramped up and is ready to be started */
  #define RADIO_EVENTS_READY_EVENTS_READY_Pos (0UL)
  #define RADIO_EVENTS_READY_EVENTS_READY_Msk (0x1UL << RADIO_EVENTS_READY_EVENTS_READY_Pos) /*!< Bit mask of EVENTS_READY
                                                                            field.*/
  #define RADIO_EVENTS_READY_EVENTS_READY_Min (0x0UL)
  #define RADIO_EVENTS_READY_EVENTS_READY_Max (0x1UL)
  #define RADIO_EVENTS_READY_EVENTS_READY_NotGenerated (0x0UL)
  #define RADIO_EVENTS_READY_EVENTS_READY_Generated (0x1UL)


/* RADIO_EVENTS_TXREADY: RADIO has ramped up and is ready to be started TX path */
  #define RADIO_EVENTS_TXREADY_ResetValue (0x00000000UL)

/* EVENTS_TXREADY @Bit 0 : RADIO has ramped up and is ready to be started TX path */
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Pos (0UL)
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Msk (0x1UL << RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Pos) /*!< Bit mask of
                                                                            EVENTS_TXREADY field.*/
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Min (0x0UL)
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Max (0x1UL)
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_NotGenerated (0x0UL)
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Generated (0x1UL)


/* RADIO_EVENTS_RXREADY: RADIO has ramped up and is ready to be started RX path */
  #define RADIO_EVENTS_RXREADY_ResetValue (0x00000000UL)

/* EVENTS_RXREADY @Bit 0 : RADIO has ramped up and is ready to be started RX path */
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Pos (0UL)
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Msk (0x1UL << RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Pos) /*!< Bit mask of
                                                                            EVENTS_RXREADY field.*/
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Min (0x0UL)
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Max (0x1UL)
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_NotGenerated (0x0UL)
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Generated (0x1UL)


/* RADIO_EVENTS_ADDRESS: Address sent or received */
  #define RADIO_EVENTS_ADDRESS_ResetValue (0x00000000UL)

/* EVENTS_ADDRESS @Bit 0 : Address sent or received */
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Pos (0UL)
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Msk (0x1UL << RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Pos) /*!< Bit mask of
                                                                            EVENTS_ADDRESS field.*/
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Min (0x0UL)
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Max (0x1UL)
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_NotGenerated (0x0UL)
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Generated (0x1UL)


/* RADIO_EVENTS_FRAMESTART: IEEE 802.15.4 length field received */
  #define RADIO_EVENTS_FRAMESTART_ResetValue (0x00000000UL)

/* EVENTS_FRAMESTART @Bit 0 : IEEE 802.15.4 length field received */
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Pos (0UL)
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Msk (0x1UL << RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Pos) /*!< Bit mask
                                                                            of EVENTS_FRAMESTART field.*/
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Min (0x0UL)
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Max (0x1UL)
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_NotGenerated (0x0UL)
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Generated (0x1UL)


/* RADIO_EVENTS_PAYLOAD: Packet payload sent or received */
  #define RADIO_EVENTS_PAYLOAD_ResetValue (0x00000000UL)

/* EVENTS_PAYLOAD @Bit 0 : Packet payload sent or received */
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Pos (0UL)
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Msk (0x1UL << RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Pos) /*!< Bit mask of
                                                                            EVENTS_PAYLOAD field.*/
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Min (0x0UL)
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Max (0x1UL)
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_NotGenerated (0x0UL)
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Generated (0x1UL)


/* RADIO_EVENTS_END: Memory access for packet data has been completed */
  #define RADIO_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : Memory access for packet data has been completed */
  #define RADIO_EVENTS_END_EVENTS_END_Pos (0UL)
  #define RADIO_EVENTS_END_EVENTS_END_Msk (0x1UL << RADIO_EVENTS_END_EVENTS_END_Pos)
  #define RADIO_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define RADIO_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define RADIO_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define RADIO_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* RADIO_EVENTS_PHYEND: The last bit is sent on air or last bit is received */
  #define RADIO_EVENTS_PHYEND_ResetValue (0x00000000UL)

/* EVENTS_PHYEND @Bit 0 : The last bit is sent on air or last bit is received */
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Pos (0UL)
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Msk (0x1UL << RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Pos) /*!< Bit mask of EVENTS_PHYEND
                                                                            field.*/
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Min (0x0UL)
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Max (0x1UL)
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_NotGenerated (0x0UL)
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Generated (0x1UL)


/* RADIO_EVENTS_DISABLED: RADIO has been disabled */
  #define RADIO_EVENTS_DISABLED_ResetValue (0x00000000UL)

/* EVENTS_DISABLED @Bit 0 : RADIO has been disabled */
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Pos (0UL)
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Msk (0x1UL << RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Pos) /*!< Bit mask of
                                                                            EVENTS_DISABLED field.*/
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Min (0x0UL)
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Max (0x1UL)
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_NotGenerated (0x0UL)
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Generated (0x1UL)


/* RADIO_EVENTS_DEVMATCH: A device address match occurred on the last received packet */
  #define RADIO_EVENTS_DEVMATCH_ResetValue (0x00000000UL)

/* EVENTS_DEVMATCH @Bit 0 : A device address match occurred on the last received packet */
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Pos (0UL)
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Msk (0x1UL << RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Pos) /*!< Bit mask of
                                                                            EVENTS_DEVMATCH field.*/
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Min (0x0UL)
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Max (0x1UL)
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_NotGenerated (0x0UL)
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Generated (0x1UL)


/* RADIO_EVENTS_DEVMISS: No device address match occurred on the last received packet */
  #define RADIO_EVENTS_DEVMISS_ResetValue (0x00000000UL)

/* EVENTS_DEVMISS @Bit 0 : No device address match occurred on the last received packet */
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Pos (0UL)
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Msk (0x1UL << RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Pos) /*!< Bit mask of
                                                                            EVENTS_DEVMISS field.*/
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Min (0x0UL)
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Max (0x1UL)
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_NotGenerated (0x0UL)
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Generated (0x1UL)


/* RADIO_EVENTS_CRCOK: Packet received with CRC ok */
  #define RADIO_EVENTS_CRCOK_ResetValue (0x00000000UL)

/* EVENTS_CRCOK @Bit 0 : Packet received with CRC ok */
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Pos (0UL)
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Msk (0x1UL << RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Pos) /*!< Bit mask of EVENTS_CRCOK
                                                                            field.*/
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Min (0x0UL)
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Max (0x1UL)
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_NotGenerated (0x0UL)
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Generated (0x1UL)


/* RADIO_EVENTS_CRCERROR: Packet received with CRC error */
  #define RADIO_EVENTS_CRCERROR_ResetValue (0x00000000UL)

/* EVENTS_CRCERROR @Bit 0 : Packet received with CRC error */
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Pos (0UL)
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Msk (0x1UL << RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Pos) /*!< Bit mask of
                                                                            EVENTS_CRCERROR field.*/
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Min (0x0UL)
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Max (0x1UL)
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_NotGenerated (0x0UL)
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Generated (0x1UL)


/* RADIO_EVENTS_BCMATCH: Bit counter reached bit count value */
  #define RADIO_EVENTS_BCMATCH_ResetValue (0x00000000UL)

/* EVENTS_BCMATCH @Bit 0 : Bit counter reached bit count value */
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Pos (0UL)
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Msk (0x1UL << RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Pos) /*!< Bit mask of
                                                                            EVENTS_BCMATCH field.*/
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Min (0x0UL)
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Max (0x1UL)
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_NotGenerated (0x0UL)
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Generated (0x1UL)


/* RADIO_EVENTS_EDEND: Sampling of energy detection complete (a new ED sample is ready for readout from the RADIO.EDSAMPLE
                        register) */

  #define RADIO_EVENTS_EDEND_ResetValue (0x00000000UL)

/* EVENTS_EDEND @Bit 0 : Sampling of energy detection complete (a new ED sample is ready for readout from the RADIO.EDSAMPLE
                         register) */

  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Pos (0UL)
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Msk (0x1UL << RADIO_EVENTS_EDEND_EVENTS_EDEND_Pos) /*!< Bit mask of EVENTS_EDEND
                                                                            field.*/
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Min (0x0UL)
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Max (0x1UL)
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_NotGenerated (0x0UL)
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Generated (0x1UL)


/* RADIO_EVENTS_EDSTOPPED: The sampling of energy detection has stopped */
  #define RADIO_EVENTS_EDSTOPPED_ResetValue (0x00000000UL)

/* EVENTS_EDSTOPPED @Bit 0 : The sampling of energy detection has stopped */
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Pos (0UL)
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Msk (0x1UL << RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_EDSTOPPED field.*/
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Min (0x0UL)
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Max (0x1UL)
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_NotGenerated (0x0UL)
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Generated (0x1UL)


/* RADIO_EVENTS_CCAIDLE: Wireless medium in idle - clear to send */
  #define RADIO_EVENTS_CCAIDLE_ResetValue (0x00000000UL)

/* EVENTS_CCAIDLE @Bit 0 : Wireless medium in idle - clear to send */
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Pos (0UL)
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Msk (0x1UL << RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Pos) /*!< Bit mask of
                                                                            EVENTS_CCAIDLE field.*/
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Min (0x0UL)
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Max (0x1UL)
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_NotGenerated (0x0UL)
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Generated (0x1UL)


/* RADIO_EVENTS_CCABUSY: Wireless medium busy - do not send */
  #define RADIO_EVENTS_CCABUSY_ResetValue (0x00000000UL)

/* EVENTS_CCABUSY @Bit 0 : Wireless medium busy - do not send */
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Pos (0UL)
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Msk (0x1UL << RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Pos) /*!< Bit mask of
                                                                            EVENTS_CCABUSY field.*/
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Min (0x0UL)
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Max (0x1UL)
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_NotGenerated (0x0UL)
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Generated (0x1UL)


/* RADIO_EVENTS_CCASTOPPED: The CCA has stopped */
  #define RADIO_EVENTS_CCASTOPPED_ResetValue (0x00000000UL)

/* EVENTS_CCASTOPPED @Bit 0 : The CCA has stopped */
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Pos (0UL)
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Msk (0x1UL << RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Pos) /*!< Bit mask
                                                                            of EVENTS_CCASTOPPED field.*/
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Min (0x0UL)
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Max (0x1UL)
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_NotGenerated (0x0UL)
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Generated (0x1UL)


/* RADIO_EVENTS_RATEBOOST: Ble_LR CI field received, receive mode is changed from Ble_LR125Kbit to Ble_LR500Kbit */
  #define RADIO_EVENTS_RATEBOOST_ResetValue (0x00000000UL)

/* EVENTS_RATEBOOST @Bit 0 : Ble_LR CI field received, receive mode is changed from Ble_LR125Kbit to Ble_LR500Kbit */
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Pos (0UL)
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Msk (0x1UL << RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Pos) /*!< Bit mask of
                                                                            EVENTS_RATEBOOST field.*/
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Min (0x0UL)
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Max (0x1UL)
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_NotGenerated (0x0UL)
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Generated (0x1UL)


/* RADIO_EVENTS_MHRMATCH: MAC header match found */
  #define RADIO_EVENTS_MHRMATCH_ResetValue (0x00000000UL)

/* EVENTS_MHRMATCH @Bit 0 : MAC header match found */
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Pos (0UL)
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Msk (0x1UL << RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Pos) /*!< Bit mask of
                                                                            EVENTS_MHRMATCH field.*/
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Min (0x0UL)
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Max (0x1UL)
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_NotGenerated (0x0UL)
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Generated (0x1UL)


/* RADIO_EVENTS_SYNC: Initial sync detected */
  #define RADIO_EVENTS_SYNC_ResetValue (0x00000000UL)

/* EVENTS_SYNC @Bit 0 : Initial sync detected */
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Pos (0UL)
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Msk (0x1UL << RADIO_EVENTS_SYNC_EVENTS_SYNC_Pos)
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Min (0x0UL)
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Max (0x1UL)
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_NotGenerated (0x0UL)
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Generated (0x1UL)


/* RADIO_EVENTS_CTEPRESENT: CTEInfo byte is received */
  #define RADIO_EVENTS_CTEPRESENT_ResetValue (0x00000000UL)

/* EVENTS_CTEPRESENT @Bit 0 : CTEInfo byte is received */
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Pos (0UL)
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Msk (0x1UL << RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Pos) /*!< Bit mask
                                                                            of EVENTS_CTEPRESENT field.*/
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Min (0x0UL)
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Max (0x1UL)
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_NotGenerated (0x0UL)
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Generated (0x1UL)


/* RADIO_PUBLISH_READY: Publish configuration for event READY */
  #define RADIO_PUBLISH_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define RADIO_PUBLISH_READY_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_READY_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_READY_CHIDX_Pos)
  #define RADIO_PUBLISH_READY_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_READY_EN_Pos (31UL)
  #define RADIO_PUBLISH_READY_EN_Msk (0x1UL << RADIO_PUBLISH_READY_EN_Pos)
  #define RADIO_PUBLISH_READY_EN_Min (0x0UL)
  #define RADIO_PUBLISH_READY_EN_Max (0x1UL)
  #define RADIO_PUBLISH_READY_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_READY_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_TXREADY: Publish configuration for event TXREADY */
  #define RADIO_PUBLISH_TXREADY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event TXREADY will publish to */
  #define RADIO_PUBLISH_TXREADY_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_TXREADY_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_TXREADY_CHIDX_Pos)
  #define RADIO_PUBLISH_TXREADY_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_TXREADY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_TXREADY_EN_Pos (31UL)
  #define RADIO_PUBLISH_TXREADY_EN_Msk (0x1UL << RADIO_PUBLISH_TXREADY_EN_Pos)
  #define RADIO_PUBLISH_TXREADY_EN_Min (0x0UL)
  #define RADIO_PUBLISH_TXREADY_EN_Max (0x1UL)
  #define RADIO_PUBLISH_TXREADY_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_TXREADY_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_RXREADY: Publish configuration for event RXREADY */
  #define RADIO_PUBLISH_RXREADY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RXREADY will publish to */
  #define RADIO_PUBLISH_RXREADY_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_RXREADY_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_RXREADY_CHIDX_Pos)
  #define RADIO_PUBLISH_RXREADY_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_RXREADY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_RXREADY_EN_Pos (31UL)
  #define RADIO_PUBLISH_RXREADY_EN_Msk (0x1UL << RADIO_PUBLISH_RXREADY_EN_Pos)
  #define RADIO_PUBLISH_RXREADY_EN_Min (0x0UL)
  #define RADIO_PUBLISH_RXREADY_EN_Max (0x1UL)
  #define RADIO_PUBLISH_RXREADY_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_RXREADY_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_ADDRESS: Publish configuration for event ADDRESS */
  #define RADIO_PUBLISH_ADDRESS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ADDRESS will publish to */
  #define RADIO_PUBLISH_ADDRESS_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_ADDRESS_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_ADDRESS_CHIDX_Pos)
  #define RADIO_PUBLISH_ADDRESS_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_ADDRESS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_ADDRESS_EN_Pos (31UL)
  #define RADIO_PUBLISH_ADDRESS_EN_Msk (0x1UL << RADIO_PUBLISH_ADDRESS_EN_Pos)
  #define RADIO_PUBLISH_ADDRESS_EN_Min (0x0UL)
  #define RADIO_PUBLISH_ADDRESS_EN_Max (0x1UL)
  #define RADIO_PUBLISH_ADDRESS_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_ADDRESS_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_FRAMESTART: Publish configuration for event FRAMESTART */
  #define RADIO_PUBLISH_FRAMESTART_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event FRAMESTART will publish to */
  #define RADIO_PUBLISH_FRAMESTART_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_FRAMESTART_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_FRAMESTART_CHIDX_Pos)
  #define RADIO_PUBLISH_FRAMESTART_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_FRAMESTART_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_FRAMESTART_EN_Pos (31UL)
  #define RADIO_PUBLISH_FRAMESTART_EN_Msk (0x1UL << RADIO_PUBLISH_FRAMESTART_EN_Pos)
  #define RADIO_PUBLISH_FRAMESTART_EN_Min (0x0UL)
  #define RADIO_PUBLISH_FRAMESTART_EN_Max (0x1UL)
  #define RADIO_PUBLISH_FRAMESTART_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_FRAMESTART_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_PAYLOAD: Publish configuration for event PAYLOAD */
  #define RADIO_PUBLISH_PAYLOAD_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event PAYLOAD will publish to */
  #define RADIO_PUBLISH_PAYLOAD_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_PAYLOAD_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_PAYLOAD_CHIDX_Pos)
  #define RADIO_PUBLISH_PAYLOAD_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_PAYLOAD_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_PAYLOAD_EN_Pos (31UL)
  #define RADIO_PUBLISH_PAYLOAD_EN_Msk (0x1UL << RADIO_PUBLISH_PAYLOAD_EN_Pos)
  #define RADIO_PUBLISH_PAYLOAD_EN_Min (0x0UL)
  #define RADIO_PUBLISH_PAYLOAD_EN_Max (0x1UL)
  #define RADIO_PUBLISH_PAYLOAD_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_PAYLOAD_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_END: Publish configuration for event END */
  #define RADIO_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define RADIO_PUBLISH_END_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_END_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_END_CHIDX_Pos)
  #define RADIO_PUBLISH_END_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_END_EN_Pos (31UL)
  #define RADIO_PUBLISH_END_EN_Msk (0x1UL << RADIO_PUBLISH_END_EN_Pos)
  #define RADIO_PUBLISH_END_EN_Min (0x0UL)
  #define RADIO_PUBLISH_END_EN_Max (0x1UL)
  #define RADIO_PUBLISH_END_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_END_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_PHYEND: Publish configuration for event PHYEND */
  #define RADIO_PUBLISH_PHYEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event PHYEND will publish to */
  #define RADIO_PUBLISH_PHYEND_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_PHYEND_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_PHYEND_CHIDX_Pos)
  #define RADIO_PUBLISH_PHYEND_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_PHYEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_PHYEND_EN_Pos (31UL)
  #define RADIO_PUBLISH_PHYEND_EN_Msk (0x1UL << RADIO_PUBLISH_PHYEND_EN_Pos)
  #define RADIO_PUBLISH_PHYEND_EN_Min (0x0UL)
  #define RADIO_PUBLISH_PHYEND_EN_Max (0x1UL)
  #define RADIO_PUBLISH_PHYEND_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_PHYEND_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_DISABLED: Publish configuration for event DISABLED */
  #define RADIO_PUBLISH_DISABLED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DISABLED will publish to */
  #define RADIO_PUBLISH_DISABLED_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_DISABLED_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_DISABLED_CHIDX_Pos)
  #define RADIO_PUBLISH_DISABLED_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_DISABLED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_DISABLED_EN_Pos (31UL)
  #define RADIO_PUBLISH_DISABLED_EN_Msk (0x1UL << RADIO_PUBLISH_DISABLED_EN_Pos)
  #define RADIO_PUBLISH_DISABLED_EN_Min (0x0UL)
  #define RADIO_PUBLISH_DISABLED_EN_Max (0x1UL)
  #define RADIO_PUBLISH_DISABLED_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_DISABLED_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_DEVMATCH: Publish configuration for event DEVMATCH */
  #define RADIO_PUBLISH_DEVMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DEVMATCH will publish to */
  #define RADIO_PUBLISH_DEVMATCH_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_DEVMATCH_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_DEVMATCH_CHIDX_Pos)
  #define RADIO_PUBLISH_DEVMATCH_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_DEVMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_DEVMATCH_EN_Pos (31UL)
  #define RADIO_PUBLISH_DEVMATCH_EN_Msk (0x1UL << RADIO_PUBLISH_DEVMATCH_EN_Pos)
  #define RADIO_PUBLISH_DEVMATCH_EN_Min (0x0UL)
  #define RADIO_PUBLISH_DEVMATCH_EN_Max (0x1UL)
  #define RADIO_PUBLISH_DEVMATCH_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_DEVMATCH_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_DEVMISS: Publish configuration for event DEVMISS */
  #define RADIO_PUBLISH_DEVMISS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DEVMISS will publish to */
  #define RADIO_PUBLISH_DEVMISS_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_DEVMISS_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_DEVMISS_CHIDX_Pos)
  #define RADIO_PUBLISH_DEVMISS_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_DEVMISS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_DEVMISS_EN_Pos (31UL)
  #define RADIO_PUBLISH_DEVMISS_EN_Msk (0x1UL << RADIO_PUBLISH_DEVMISS_EN_Pos)
  #define RADIO_PUBLISH_DEVMISS_EN_Min (0x0UL)
  #define RADIO_PUBLISH_DEVMISS_EN_Max (0x1UL)
  #define RADIO_PUBLISH_DEVMISS_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_DEVMISS_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_CRCOK: Publish configuration for event CRCOK */
  #define RADIO_PUBLISH_CRCOK_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CRCOK will publish to */
  #define RADIO_PUBLISH_CRCOK_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_CRCOK_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CRCOK_CHIDX_Pos)
  #define RADIO_PUBLISH_CRCOK_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_CRCOK_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CRCOK_EN_Pos (31UL)
  #define RADIO_PUBLISH_CRCOK_EN_Msk (0x1UL << RADIO_PUBLISH_CRCOK_EN_Pos)
  #define RADIO_PUBLISH_CRCOK_EN_Min (0x0UL)
  #define RADIO_PUBLISH_CRCOK_EN_Max (0x1UL)
  #define RADIO_PUBLISH_CRCOK_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_CRCOK_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_CRCERROR: Publish configuration for event CRCERROR */
  #define RADIO_PUBLISH_CRCERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CRCERROR will publish to */
  #define RADIO_PUBLISH_CRCERROR_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_CRCERROR_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CRCERROR_CHIDX_Pos)
  #define RADIO_PUBLISH_CRCERROR_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_CRCERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CRCERROR_EN_Pos (31UL)
  #define RADIO_PUBLISH_CRCERROR_EN_Msk (0x1UL << RADIO_PUBLISH_CRCERROR_EN_Pos)
  #define RADIO_PUBLISH_CRCERROR_EN_Min (0x0UL)
  #define RADIO_PUBLISH_CRCERROR_EN_Max (0x1UL)
  #define RADIO_PUBLISH_CRCERROR_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_CRCERROR_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_BCMATCH: Publish configuration for event BCMATCH */
  #define RADIO_PUBLISH_BCMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BCMATCH will publish to */
  #define RADIO_PUBLISH_BCMATCH_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_BCMATCH_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_BCMATCH_CHIDX_Pos)
  #define RADIO_PUBLISH_BCMATCH_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_BCMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_BCMATCH_EN_Pos (31UL)
  #define RADIO_PUBLISH_BCMATCH_EN_Msk (0x1UL << RADIO_PUBLISH_BCMATCH_EN_Pos)
  #define RADIO_PUBLISH_BCMATCH_EN_Min (0x0UL)
  #define RADIO_PUBLISH_BCMATCH_EN_Max (0x1UL)
  #define RADIO_PUBLISH_BCMATCH_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_BCMATCH_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_EDEND: Publish configuration for event EDEND */
  #define RADIO_PUBLISH_EDEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event EDEND will publish to */
  #define RADIO_PUBLISH_EDEND_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_EDEND_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_EDEND_CHIDX_Pos)
  #define RADIO_PUBLISH_EDEND_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_EDEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_EDEND_EN_Pos (31UL)
  #define RADIO_PUBLISH_EDEND_EN_Msk (0x1UL << RADIO_PUBLISH_EDEND_EN_Pos)
  #define RADIO_PUBLISH_EDEND_EN_Min (0x0UL)
  #define RADIO_PUBLISH_EDEND_EN_Max (0x1UL)
  #define RADIO_PUBLISH_EDEND_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_EDEND_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_EDSTOPPED: Publish configuration for event EDSTOPPED */
  #define RADIO_PUBLISH_EDSTOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event EDSTOPPED will publish to */
  #define RADIO_PUBLISH_EDSTOPPED_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_EDSTOPPED_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_EDSTOPPED_CHIDX_Pos)
  #define RADIO_PUBLISH_EDSTOPPED_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_EDSTOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_EDSTOPPED_EN_Pos (31UL)
  #define RADIO_PUBLISH_EDSTOPPED_EN_Msk (0x1UL << RADIO_PUBLISH_EDSTOPPED_EN_Pos)
  #define RADIO_PUBLISH_EDSTOPPED_EN_Min (0x0UL)
  #define RADIO_PUBLISH_EDSTOPPED_EN_Max (0x1UL)
  #define RADIO_PUBLISH_EDSTOPPED_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_EDSTOPPED_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_CCAIDLE: Publish configuration for event CCAIDLE */
  #define RADIO_PUBLISH_CCAIDLE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CCAIDLE will publish to */
  #define RADIO_PUBLISH_CCAIDLE_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_CCAIDLE_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CCAIDLE_CHIDX_Pos)
  #define RADIO_PUBLISH_CCAIDLE_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_CCAIDLE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CCAIDLE_EN_Pos (31UL)
  #define RADIO_PUBLISH_CCAIDLE_EN_Msk (0x1UL << RADIO_PUBLISH_CCAIDLE_EN_Pos)
  #define RADIO_PUBLISH_CCAIDLE_EN_Min (0x0UL)
  #define RADIO_PUBLISH_CCAIDLE_EN_Max (0x1UL)
  #define RADIO_PUBLISH_CCAIDLE_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_CCAIDLE_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_CCABUSY: Publish configuration for event CCABUSY */
  #define RADIO_PUBLISH_CCABUSY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CCABUSY will publish to */
  #define RADIO_PUBLISH_CCABUSY_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_CCABUSY_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CCABUSY_CHIDX_Pos)
  #define RADIO_PUBLISH_CCABUSY_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_CCABUSY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CCABUSY_EN_Pos (31UL)
  #define RADIO_PUBLISH_CCABUSY_EN_Msk (0x1UL << RADIO_PUBLISH_CCABUSY_EN_Pos)
  #define RADIO_PUBLISH_CCABUSY_EN_Min (0x0UL)
  #define RADIO_PUBLISH_CCABUSY_EN_Max (0x1UL)
  #define RADIO_PUBLISH_CCABUSY_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_CCABUSY_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_CCASTOPPED: Publish configuration for event CCASTOPPED */
  #define RADIO_PUBLISH_CCASTOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CCASTOPPED will publish to */
  #define RADIO_PUBLISH_CCASTOPPED_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_CCASTOPPED_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CCASTOPPED_CHIDX_Pos)
  #define RADIO_PUBLISH_CCASTOPPED_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_CCASTOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CCASTOPPED_EN_Pos (31UL)
  #define RADIO_PUBLISH_CCASTOPPED_EN_Msk (0x1UL << RADIO_PUBLISH_CCASTOPPED_EN_Pos)
  #define RADIO_PUBLISH_CCASTOPPED_EN_Min (0x0UL)
  #define RADIO_PUBLISH_CCASTOPPED_EN_Max (0x1UL)
  #define RADIO_PUBLISH_CCASTOPPED_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_CCASTOPPED_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_RATEBOOST: Publish configuration for event RATEBOOST */
  #define RADIO_PUBLISH_RATEBOOST_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RATEBOOST will publish to */
  #define RADIO_PUBLISH_RATEBOOST_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_RATEBOOST_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_RATEBOOST_CHIDX_Pos)
  #define RADIO_PUBLISH_RATEBOOST_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_RATEBOOST_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_RATEBOOST_EN_Pos (31UL)
  #define RADIO_PUBLISH_RATEBOOST_EN_Msk (0x1UL << RADIO_PUBLISH_RATEBOOST_EN_Pos)
  #define RADIO_PUBLISH_RATEBOOST_EN_Min (0x0UL)
  #define RADIO_PUBLISH_RATEBOOST_EN_Max (0x1UL)
  #define RADIO_PUBLISH_RATEBOOST_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_RATEBOOST_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_MHRMATCH: Publish configuration for event MHRMATCH */
  #define RADIO_PUBLISH_MHRMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event MHRMATCH will publish to */
  #define RADIO_PUBLISH_MHRMATCH_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_MHRMATCH_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_MHRMATCH_CHIDX_Pos)
  #define RADIO_PUBLISH_MHRMATCH_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_MHRMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_MHRMATCH_EN_Pos (31UL)
  #define RADIO_PUBLISH_MHRMATCH_EN_Msk (0x1UL << RADIO_PUBLISH_MHRMATCH_EN_Pos)
  #define RADIO_PUBLISH_MHRMATCH_EN_Min (0x0UL)
  #define RADIO_PUBLISH_MHRMATCH_EN_Max (0x1UL)
  #define RADIO_PUBLISH_MHRMATCH_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_MHRMATCH_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_SYNC: Publish configuration for event SYNC */
  #define RADIO_PUBLISH_SYNC_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SYNC will publish to */
  #define RADIO_PUBLISH_SYNC_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_SYNC_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_SYNC_CHIDX_Pos)
  #define RADIO_PUBLISH_SYNC_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_SYNC_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_SYNC_EN_Pos (31UL)
  #define RADIO_PUBLISH_SYNC_EN_Msk (0x1UL << RADIO_PUBLISH_SYNC_EN_Pos)
  #define RADIO_PUBLISH_SYNC_EN_Min (0x0UL)
  #define RADIO_PUBLISH_SYNC_EN_Max (0x1UL)
  #define RADIO_PUBLISH_SYNC_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_SYNC_EN_Enabled (0x1UL)


/* RADIO_PUBLISH_CTEPRESENT: Publish configuration for event CTEPRESENT */
  #define RADIO_PUBLISH_CTEPRESENT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CTEPRESENT will publish to */
  #define RADIO_PUBLISH_CTEPRESENT_CHIDX_Pos (0UL)
  #define RADIO_PUBLISH_CTEPRESENT_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CTEPRESENT_CHIDX_Pos)
  #define RADIO_PUBLISH_CTEPRESENT_CHIDX_Min (0x00UL)
  #define RADIO_PUBLISH_CTEPRESENT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CTEPRESENT_EN_Pos (31UL)
  #define RADIO_PUBLISH_CTEPRESENT_EN_Msk (0x1UL << RADIO_PUBLISH_CTEPRESENT_EN_Pos)
  #define RADIO_PUBLISH_CTEPRESENT_EN_Min (0x0UL)
  #define RADIO_PUBLISH_CTEPRESENT_EN_Max (0x1UL)
  #define RADIO_PUBLISH_CTEPRESENT_EN_Disabled (0x0UL)
  #define RADIO_PUBLISH_CTEPRESENT_EN_Enabled (0x1UL)


/* RADIO_SHORTS: Shortcuts between local events and tasks */
  #define RADIO_SHORTS_ResetValue (0x00000000UL)

/* READY_START @Bit 0 : Shortcut between event READY and task START */
  #define RADIO_SHORTS_READY_START_Pos (0UL)
  #define RADIO_SHORTS_READY_START_Msk (0x1UL << RADIO_SHORTS_READY_START_Pos)
  #define RADIO_SHORTS_READY_START_Min (0x0UL)
  #define RADIO_SHORTS_READY_START_Max (0x1UL)
  #define RADIO_SHORTS_READY_START_Disabled (0x0UL)
  #define RADIO_SHORTS_READY_START_Enabled (0x1UL)

/* DISABLED_TXEN @Bit 2 : Shortcut between event DISABLED and task TXEN */
  #define RADIO_SHORTS_DISABLED_TXEN_Pos (2UL)
  #define RADIO_SHORTS_DISABLED_TXEN_Msk (0x1UL << RADIO_SHORTS_DISABLED_TXEN_Pos)
  #define RADIO_SHORTS_DISABLED_TXEN_Min (0x0UL)
  #define RADIO_SHORTS_DISABLED_TXEN_Max (0x1UL)
  #define RADIO_SHORTS_DISABLED_TXEN_Disabled (0x0UL)
  #define RADIO_SHORTS_DISABLED_TXEN_Enabled (0x1UL)

/* DISABLED_RXEN @Bit 3 : Shortcut between event DISABLED and task RXEN */
  #define RADIO_SHORTS_DISABLED_RXEN_Pos (3UL)
  #define RADIO_SHORTS_DISABLED_RXEN_Msk (0x1UL << RADIO_SHORTS_DISABLED_RXEN_Pos)
  #define RADIO_SHORTS_DISABLED_RXEN_Min (0x0UL)
  #define RADIO_SHORTS_DISABLED_RXEN_Max (0x1UL)
  #define RADIO_SHORTS_DISABLED_RXEN_Disabled (0x0UL)
  #define RADIO_SHORTS_DISABLED_RXEN_Enabled (0x1UL)

/* ADDRESS_RSSISTART @Bit 4 : Shortcut between event ADDRESS and task RSSISTART */
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Pos (4UL)
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Msk (0x1UL << RADIO_SHORTS_ADDRESS_RSSISTART_Pos) /*!< Bit mask of ADDRESS_RSSISTART
                                                                            field.*/
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Min (0x0UL)
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Max (0x1UL)
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Disabled (0x0UL)
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Enabled (0x1UL)

/* END_START @Bit 5 : Shortcut between event END and task START */
  #define RADIO_SHORTS_END_START_Pos (5UL)
  #define RADIO_SHORTS_END_START_Msk (0x1UL << RADIO_SHORTS_END_START_Pos)
  #define RADIO_SHORTS_END_START_Min (0x0UL)
  #define RADIO_SHORTS_END_START_Max (0x1UL)
  #define RADIO_SHORTS_END_START_Disabled (0x0UL)
  #define RADIO_SHORTS_END_START_Enabled (0x1UL)

/* ADDRESS_BCSTART @Bit 6 : Shortcut between event ADDRESS and task BCSTART */
  #define RADIO_SHORTS_ADDRESS_BCSTART_Pos (6UL)
  #define RADIO_SHORTS_ADDRESS_BCSTART_Msk (0x1UL << RADIO_SHORTS_ADDRESS_BCSTART_Pos)
  #define RADIO_SHORTS_ADDRESS_BCSTART_Min (0x0UL)
  #define RADIO_SHORTS_ADDRESS_BCSTART_Max (0x1UL)
  #define RADIO_SHORTS_ADDRESS_BCSTART_Disabled (0x0UL)
  #define RADIO_SHORTS_ADDRESS_BCSTART_Enabled (0x1UL)

/* RXREADY_CCASTART @Bit 10 : Shortcut between event RXREADY and task CCASTART */
  #define RADIO_SHORTS_RXREADY_CCASTART_Pos (10UL)
  #define RADIO_SHORTS_RXREADY_CCASTART_Msk (0x1UL << RADIO_SHORTS_RXREADY_CCASTART_Pos) /*!< Bit mask of RXREADY_CCASTART
                                                                            field.*/
  #define RADIO_SHORTS_RXREADY_CCASTART_Min (0x0UL)
  #define RADIO_SHORTS_RXREADY_CCASTART_Max (0x1UL)
  #define RADIO_SHORTS_RXREADY_CCASTART_Disabled (0x0UL)
  #define RADIO_SHORTS_RXREADY_CCASTART_Enabled (0x1UL)

/* CCAIDLE_TXEN @Bit 11 : Shortcut between event CCAIDLE and task TXEN */
  #define RADIO_SHORTS_CCAIDLE_TXEN_Pos (11UL)
  #define RADIO_SHORTS_CCAIDLE_TXEN_Msk (0x1UL << RADIO_SHORTS_CCAIDLE_TXEN_Pos)
  #define RADIO_SHORTS_CCAIDLE_TXEN_Min (0x0UL)
  #define RADIO_SHORTS_CCAIDLE_TXEN_Max (0x1UL)
  #define RADIO_SHORTS_CCAIDLE_TXEN_Disabled (0x0UL)
  #define RADIO_SHORTS_CCAIDLE_TXEN_Enabled (0x1UL)

/* CCABUSY_DISABLE @Bit 12 : Shortcut between event CCABUSY and task DISABLE */
  #define RADIO_SHORTS_CCABUSY_DISABLE_Pos (12UL)
  #define RADIO_SHORTS_CCABUSY_DISABLE_Msk (0x1UL << RADIO_SHORTS_CCABUSY_DISABLE_Pos)
  #define RADIO_SHORTS_CCABUSY_DISABLE_Min (0x0UL)
  #define RADIO_SHORTS_CCABUSY_DISABLE_Max (0x1UL)
  #define RADIO_SHORTS_CCABUSY_DISABLE_Disabled (0x0UL)
  #define RADIO_SHORTS_CCABUSY_DISABLE_Enabled (0x1UL)

/* FRAMESTART_BCSTART @Bit 13 : Shortcut between event FRAMESTART and task BCSTART */
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Pos (13UL)
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Msk (0x1UL << RADIO_SHORTS_FRAMESTART_BCSTART_Pos) /*!< Bit mask of FRAMESTART_BCSTART
                                                                            field.*/
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Min (0x0UL)
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Max (0x1UL)
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Disabled (0x0UL)
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Enabled (0x1UL)

/* READY_EDSTART @Bit 14 : Shortcut between event READY and task EDSTART */
  #define RADIO_SHORTS_READY_EDSTART_Pos (14UL)
  #define RADIO_SHORTS_READY_EDSTART_Msk (0x1UL << RADIO_SHORTS_READY_EDSTART_Pos)
  #define RADIO_SHORTS_READY_EDSTART_Min (0x0UL)
  #define RADIO_SHORTS_READY_EDSTART_Max (0x1UL)
  #define RADIO_SHORTS_READY_EDSTART_Disabled (0x0UL)
  #define RADIO_SHORTS_READY_EDSTART_Enabled (0x1UL)

/* EDEND_DISABLE @Bit 15 : Shortcut between event EDEND and task DISABLE */
  #define RADIO_SHORTS_EDEND_DISABLE_Pos (15UL)
  #define RADIO_SHORTS_EDEND_DISABLE_Msk (0x1UL << RADIO_SHORTS_EDEND_DISABLE_Pos)
  #define RADIO_SHORTS_EDEND_DISABLE_Min (0x0UL)
  #define RADIO_SHORTS_EDEND_DISABLE_Max (0x1UL)
  #define RADIO_SHORTS_EDEND_DISABLE_Disabled (0x0UL)
  #define RADIO_SHORTS_EDEND_DISABLE_Enabled (0x1UL)

/* CCAIDLE_STOP @Bit 16 : Shortcut between event CCAIDLE and task STOP */
  #define RADIO_SHORTS_CCAIDLE_STOP_Pos (16UL)
  #define RADIO_SHORTS_CCAIDLE_STOP_Msk (0x1UL << RADIO_SHORTS_CCAIDLE_STOP_Pos)
  #define RADIO_SHORTS_CCAIDLE_STOP_Min (0x0UL)
  #define RADIO_SHORTS_CCAIDLE_STOP_Max (0x1UL)
  #define RADIO_SHORTS_CCAIDLE_STOP_Disabled (0x0UL)
  #define RADIO_SHORTS_CCAIDLE_STOP_Enabled (0x1UL)

/* TXREADY_START @Bit 17 : Shortcut between event TXREADY and task START */
  #define RADIO_SHORTS_TXREADY_START_Pos (17UL)
  #define RADIO_SHORTS_TXREADY_START_Msk (0x1UL << RADIO_SHORTS_TXREADY_START_Pos)
  #define RADIO_SHORTS_TXREADY_START_Min (0x0UL)
  #define RADIO_SHORTS_TXREADY_START_Max (0x1UL)
  #define RADIO_SHORTS_TXREADY_START_Disabled (0x0UL)
  #define RADIO_SHORTS_TXREADY_START_Enabled (0x1UL)

/* RXREADY_START @Bit 18 : Shortcut between event RXREADY and task START */
  #define RADIO_SHORTS_RXREADY_START_Pos (18UL)
  #define RADIO_SHORTS_RXREADY_START_Msk (0x1UL << RADIO_SHORTS_RXREADY_START_Pos)
  #define RADIO_SHORTS_RXREADY_START_Min (0x0UL)
  #define RADIO_SHORTS_RXREADY_START_Max (0x1UL)
  #define RADIO_SHORTS_RXREADY_START_Disabled (0x0UL)
  #define RADIO_SHORTS_RXREADY_START_Enabled (0x1UL)

/* PHYEND_DISABLE @Bit 19 : Shortcut between event PHYEND and task DISABLE */
  #define RADIO_SHORTS_PHYEND_DISABLE_Pos (19UL)
  #define RADIO_SHORTS_PHYEND_DISABLE_Msk (0x1UL << RADIO_SHORTS_PHYEND_DISABLE_Pos)
  #define RADIO_SHORTS_PHYEND_DISABLE_Min (0x0UL)
  #define RADIO_SHORTS_PHYEND_DISABLE_Max (0x1UL)
  #define RADIO_SHORTS_PHYEND_DISABLE_Disabled (0x0UL)
  #define RADIO_SHORTS_PHYEND_DISABLE_Enabled (0x1UL)

/* PHYEND_START @Bit 20 : Shortcut between event PHYEND and task START */
  #define RADIO_SHORTS_PHYEND_START_Pos (20UL)
  #define RADIO_SHORTS_PHYEND_START_Msk (0x1UL << RADIO_SHORTS_PHYEND_START_Pos)
  #define RADIO_SHORTS_PHYEND_START_Min (0x0UL)
  #define RADIO_SHORTS_PHYEND_START_Max (0x1UL)
  #define RADIO_SHORTS_PHYEND_START_Disabled (0x0UL)
  #define RADIO_SHORTS_PHYEND_START_Enabled (0x1UL)


/* RADIO_INTENSET00: Enable interrupt */
  #define RADIO_INTENSET00_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to enable interrupt for event READY */
  #define RADIO_INTENSET00_READY_Pos (0UL)
  #define RADIO_INTENSET00_READY_Msk (0x1UL << RADIO_INTENSET00_READY_Pos)
  #define RADIO_INTENSET00_READY_Min (0x0UL)
  #define RADIO_INTENSET00_READY_Max (0x1UL)
  #define RADIO_INTENSET00_READY_Set (0x1UL)
  #define RADIO_INTENSET00_READY_Disabled (0x0UL)
  #define RADIO_INTENSET00_READY_Enabled (0x1UL)

/* TXREADY @Bit 1 : Write '1' to enable interrupt for event TXREADY */
  #define RADIO_INTENSET00_TXREADY_Pos (1UL)
  #define RADIO_INTENSET00_TXREADY_Msk (0x1UL << RADIO_INTENSET00_TXREADY_Pos)
  #define RADIO_INTENSET00_TXREADY_Min (0x0UL)
  #define RADIO_INTENSET00_TXREADY_Max (0x1UL)
  #define RADIO_INTENSET00_TXREADY_Set (0x1UL)
  #define RADIO_INTENSET00_TXREADY_Disabled (0x0UL)
  #define RADIO_INTENSET00_TXREADY_Enabled (0x1UL)

/* RXREADY @Bit 2 : Write '1' to enable interrupt for event RXREADY */
  #define RADIO_INTENSET00_RXREADY_Pos (2UL)
  #define RADIO_INTENSET00_RXREADY_Msk (0x1UL << RADIO_INTENSET00_RXREADY_Pos)
  #define RADIO_INTENSET00_RXREADY_Min (0x0UL)
  #define RADIO_INTENSET00_RXREADY_Max (0x1UL)
  #define RADIO_INTENSET00_RXREADY_Set (0x1UL)
  #define RADIO_INTENSET00_RXREADY_Disabled (0x0UL)
  #define RADIO_INTENSET00_RXREADY_Enabled (0x1UL)

/* ADDRESS @Bit 3 : Write '1' to enable interrupt for event ADDRESS */
  #define RADIO_INTENSET00_ADDRESS_Pos (3UL)
  #define RADIO_INTENSET00_ADDRESS_Msk (0x1UL << RADIO_INTENSET00_ADDRESS_Pos)
  #define RADIO_INTENSET00_ADDRESS_Min (0x0UL)
  #define RADIO_INTENSET00_ADDRESS_Max (0x1UL)
  #define RADIO_INTENSET00_ADDRESS_Set (0x1UL)
  #define RADIO_INTENSET00_ADDRESS_Disabled (0x0UL)
  #define RADIO_INTENSET00_ADDRESS_Enabled (0x1UL)

/* FRAMESTART @Bit 4 : Write '1' to enable interrupt for event FRAMESTART */
  #define RADIO_INTENSET00_FRAMESTART_Pos (4UL)
  #define RADIO_INTENSET00_FRAMESTART_Msk (0x1UL << RADIO_INTENSET00_FRAMESTART_Pos)
  #define RADIO_INTENSET00_FRAMESTART_Min (0x0UL)
  #define RADIO_INTENSET00_FRAMESTART_Max (0x1UL)
  #define RADIO_INTENSET00_FRAMESTART_Set (0x1UL)
  #define RADIO_INTENSET00_FRAMESTART_Disabled (0x0UL)
  #define RADIO_INTENSET00_FRAMESTART_Enabled (0x1UL)

/* PAYLOAD @Bit 5 : Write '1' to enable interrupt for event PAYLOAD */
  #define RADIO_INTENSET00_PAYLOAD_Pos (5UL)
  #define RADIO_INTENSET00_PAYLOAD_Msk (0x1UL << RADIO_INTENSET00_PAYLOAD_Pos)
  #define RADIO_INTENSET00_PAYLOAD_Min (0x0UL)
  #define RADIO_INTENSET00_PAYLOAD_Max (0x1UL)
  #define RADIO_INTENSET00_PAYLOAD_Set (0x1UL)
  #define RADIO_INTENSET00_PAYLOAD_Disabled (0x0UL)
  #define RADIO_INTENSET00_PAYLOAD_Enabled (0x1UL)

/* END @Bit 6 : Write '1' to enable interrupt for event END */
  #define RADIO_INTENSET00_END_Pos (6UL)
  #define RADIO_INTENSET00_END_Msk (0x1UL << RADIO_INTENSET00_END_Pos)
  #define RADIO_INTENSET00_END_Min (0x0UL)
  #define RADIO_INTENSET00_END_Max (0x1UL)
  #define RADIO_INTENSET00_END_Set (0x1UL)
  #define RADIO_INTENSET00_END_Disabled (0x0UL)
  #define RADIO_INTENSET00_END_Enabled (0x1UL)

/* PHYEND @Bit 7 : Write '1' to enable interrupt for event PHYEND */
  #define RADIO_INTENSET00_PHYEND_Pos (7UL)
  #define RADIO_INTENSET00_PHYEND_Msk (0x1UL << RADIO_INTENSET00_PHYEND_Pos)
  #define RADIO_INTENSET00_PHYEND_Min (0x0UL)
  #define RADIO_INTENSET00_PHYEND_Max (0x1UL)
  #define RADIO_INTENSET00_PHYEND_Set (0x1UL)
  #define RADIO_INTENSET00_PHYEND_Disabled (0x0UL)
  #define RADIO_INTENSET00_PHYEND_Enabled (0x1UL)

/* DISABLED @Bit 8 : Write '1' to enable interrupt for event DISABLED */
  #define RADIO_INTENSET00_DISABLED_Pos (8UL)
  #define RADIO_INTENSET00_DISABLED_Msk (0x1UL << RADIO_INTENSET00_DISABLED_Pos)
  #define RADIO_INTENSET00_DISABLED_Min (0x0UL)
  #define RADIO_INTENSET00_DISABLED_Max (0x1UL)
  #define RADIO_INTENSET00_DISABLED_Set (0x1UL)
  #define RADIO_INTENSET00_DISABLED_Disabled (0x0UL)
  #define RADIO_INTENSET00_DISABLED_Enabled (0x1UL)

/* DEVMATCH @Bit 9 : Write '1' to enable interrupt for event DEVMATCH */
  #define RADIO_INTENSET00_DEVMATCH_Pos (9UL)
  #define RADIO_INTENSET00_DEVMATCH_Msk (0x1UL << RADIO_INTENSET00_DEVMATCH_Pos)
  #define RADIO_INTENSET00_DEVMATCH_Min (0x0UL)
  #define RADIO_INTENSET00_DEVMATCH_Max (0x1UL)
  #define RADIO_INTENSET00_DEVMATCH_Set (0x1UL)
  #define RADIO_INTENSET00_DEVMATCH_Disabled (0x0UL)
  #define RADIO_INTENSET00_DEVMATCH_Enabled (0x1UL)

/* DEVMISS @Bit 10 : Write '1' to enable interrupt for event DEVMISS */
  #define RADIO_INTENSET00_DEVMISS_Pos (10UL)
  #define RADIO_INTENSET00_DEVMISS_Msk (0x1UL << RADIO_INTENSET00_DEVMISS_Pos)
  #define RADIO_INTENSET00_DEVMISS_Min (0x0UL)
  #define RADIO_INTENSET00_DEVMISS_Max (0x1UL)
  #define RADIO_INTENSET00_DEVMISS_Set (0x1UL)
  #define RADIO_INTENSET00_DEVMISS_Disabled (0x0UL)
  #define RADIO_INTENSET00_DEVMISS_Enabled (0x1UL)

/* CRCOK @Bit 11 : Write '1' to enable interrupt for event CRCOK */
  #define RADIO_INTENSET00_CRCOK_Pos (11UL)
  #define RADIO_INTENSET00_CRCOK_Msk (0x1UL << RADIO_INTENSET00_CRCOK_Pos)
  #define RADIO_INTENSET00_CRCOK_Min (0x0UL)
  #define RADIO_INTENSET00_CRCOK_Max (0x1UL)
  #define RADIO_INTENSET00_CRCOK_Set (0x1UL)
  #define RADIO_INTENSET00_CRCOK_Disabled (0x0UL)
  #define RADIO_INTENSET00_CRCOK_Enabled (0x1UL)

/* CRCERROR @Bit 12 : Write '1' to enable interrupt for event CRCERROR */
  #define RADIO_INTENSET00_CRCERROR_Pos (12UL)
  #define RADIO_INTENSET00_CRCERROR_Msk (0x1UL << RADIO_INTENSET00_CRCERROR_Pos)
  #define RADIO_INTENSET00_CRCERROR_Min (0x0UL)
  #define RADIO_INTENSET00_CRCERROR_Max (0x1UL)
  #define RADIO_INTENSET00_CRCERROR_Set (0x1UL)
  #define RADIO_INTENSET00_CRCERROR_Disabled (0x0UL)
  #define RADIO_INTENSET00_CRCERROR_Enabled (0x1UL)

/* BCMATCH @Bit 14 : Write '1' to enable interrupt for event BCMATCH */
  #define RADIO_INTENSET00_BCMATCH_Pos (14UL)
  #define RADIO_INTENSET00_BCMATCH_Msk (0x1UL << RADIO_INTENSET00_BCMATCH_Pos)
  #define RADIO_INTENSET00_BCMATCH_Min (0x0UL)
  #define RADIO_INTENSET00_BCMATCH_Max (0x1UL)
  #define RADIO_INTENSET00_BCMATCH_Set (0x1UL)
  #define RADIO_INTENSET00_BCMATCH_Disabled (0x0UL)
  #define RADIO_INTENSET00_BCMATCH_Enabled (0x1UL)

/* EDEND @Bit 15 : Write '1' to enable interrupt for event EDEND */
  #define RADIO_INTENSET00_EDEND_Pos (15UL)
  #define RADIO_INTENSET00_EDEND_Msk (0x1UL << RADIO_INTENSET00_EDEND_Pos)
  #define RADIO_INTENSET00_EDEND_Min (0x0UL)
  #define RADIO_INTENSET00_EDEND_Max (0x1UL)
  #define RADIO_INTENSET00_EDEND_Set (0x1UL)
  #define RADIO_INTENSET00_EDEND_Disabled (0x0UL)
  #define RADIO_INTENSET00_EDEND_Enabled (0x1UL)

/* EDSTOPPED @Bit 16 : Write '1' to enable interrupt for event EDSTOPPED */
  #define RADIO_INTENSET00_EDSTOPPED_Pos (16UL)
  #define RADIO_INTENSET00_EDSTOPPED_Msk (0x1UL << RADIO_INTENSET00_EDSTOPPED_Pos)
  #define RADIO_INTENSET00_EDSTOPPED_Min (0x0UL)
  #define RADIO_INTENSET00_EDSTOPPED_Max (0x1UL)
  #define RADIO_INTENSET00_EDSTOPPED_Set (0x1UL)
  #define RADIO_INTENSET00_EDSTOPPED_Disabled (0x0UL)
  #define RADIO_INTENSET00_EDSTOPPED_Enabled (0x1UL)

/* CCAIDLE @Bit 17 : Write '1' to enable interrupt for event CCAIDLE */
  #define RADIO_INTENSET00_CCAIDLE_Pos (17UL)
  #define RADIO_INTENSET00_CCAIDLE_Msk (0x1UL << RADIO_INTENSET00_CCAIDLE_Pos)
  #define RADIO_INTENSET00_CCAIDLE_Min (0x0UL)
  #define RADIO_INTENSET00_CCAIDLE_Max (0x1UL)
  #define RADIO_INTENSET00_CCAIDLE_Set (0x1UL)
  #define RADIO_INTENSET00_CCAIDLE_Disabled (0x0UL)
  #define RADIO_INTENSET00_CCAIDLE_Enabled (0x1UL)

/* CCABUSY @Bit 18 : Write '1' to enable interrupt for event CCABUSY */
  #define RADIO_INTENSET00_CCABUSY_Pos (18UL)
  #define RADIO_INTENSET00_CCABUSY_Msk (0x1UL << RADIO_INTENSET00_CCABUSY_Pos)
  #define RADIO_INTENSET00_CCABUSY_Min (0x0UL)
  #define RADIO_INTENSET00_CCABUSY_Max (0x1UL)
  #define RADIO_INTENSET00_CCABUSY_Set (0x1UL)
  #define RADIO_INTENSET00_CCABUSY_Disabled (0x0UL)
  #define RADIO_INTENSET00_CCABUSY_Enabled (0x1UL)

/* CCASTOPPED @Bit 19 : Write '1' to enable interrupt for event CCASTOPPED */
  #define RADIO_INTENSET00_CCASTOPPED_Pos (19UL)
  #define RADIO_INTENSET00_CCASTOPPED_Msk (0x1UL << RADIO_INTENSET00_CCASTOPPED_Pos)
  #define RADIO_INTENSET00_CCASTOPPED_Min (0x0UL)
  #define RADIO_INTENSET00_CCASTOPPED_Max (0x1UL)
  #define RADIO_INTENSET00_CCASTOPPED_Set (0x1UL)
  #define RADIO_INTENSET00_CCASTOPPED_Disabled (0x0UL)
  #define RADIO_INTENSET00_CCASTOPPED_Enabled (0x1UL)

/* RATEBOOST @Bit 20 : Write '1' to enable interrupt for event RATEBOOST */
  #define RADIO_INTENSET00_RATEBOOST_Pos (20UL)
  #define RADIO_INTENSET00_RATEBOOST_Msk (0x1UL << RADIO_INTENSET00_RATEBOOST_Pos)
  #define RADIO_INTENSET00_RATEBOOST_Min (0x0UL)
  #define RADIO_INTENSET00_RATEBOOST_Max (0x1UL)
  #define RADIO_INTENSET00_RATEBOOST_Set (0x1UL)
  #define RADIO_INTENSET00_RATEBOOST_Disabled (0x0UL)
  #define RADIO_INTENSET00_RATEBOOST_Enabled (0x1UL)

/* MHRMATCH @Bit 21 : Write '1' to enable interrupt for event MHRMATCH */
  #define RADIO_INTENSET00_MHRMATCH_Pos (21UL)
  #define RADIO_INTENSET00_MHRMATCH_Msk (0x1UL << RADIO_INTENSET00_MHRMATCH_Pos)
  #define RADIO_INTENSET00_MHRMATCH_Min (0x0UL)
  #define RADIO_INTENSET00_MHRMATCH_Max (0x1UL)
  #define RADIO_INTENSET00_MHRMATCH_Set (0x1UL)
  #define RADIO_INTENSET00_MHRMATCH_Disabled (0x0UL)
  #define RADIO_INTENSET00_MHRMATCH_Enabled (0x1UL)

/* SYNC @Bit 22 : Write '1' to enable interrupt for event SYNC */
  #define RADIO_INTENSET00_SYNC_Pos (22UL)
  #define RADIO_INTENSET00_SYNC_Msk (0x1UL << RADIO_INTENSET00_SYNC_Pos)
  #define RADIO_INTENSET00_SYNC_Min (0x0UL)
  #define RADIO_INTENSET00_SYNC_Max (0x1UL)
  #define RADIO_INTENSET00_SYNC_Set (0x1UL)
  #define RADIO_INTENSET00_SYNC_Disabled (0x0UL)
  #define RADIO_INTENSET00_SYNC_Enabled (0x1UL)

/* CTEPRESENT @Bit 23 : Write '1' to enable interrupt for event CTEPRESENT */
  #define RADIO_INTENSET00_CTEPRESENT_Pos (23UL)
  #define RADIO_INTENSET00_CTEPRESENT_Msk (0x1UL << RADIO_INTENSET00_CTEPRESENT_Pos)
  #define RADIO_INTENSET00_CTEPRESENT_Min (0x0UL)
  #define RADIO_INTENSET00_CTEPRESENT_Max (0x1UL)
  #define RADIO_INTENSET00_CTEPRESENT_Set (0x1UL)
  #define RADIO_INTENSET00_CTEPRESENT_Disabled (0x0UL)
  #define RADIO_INTENSET00_CTEPRESENT_Enabled (0x1UL)


/* RADIO_INTENCLR00: Disable interrupt */
  #define RADIO_INTENCLR00_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to disable interrupt for event READY */
  #define RADIO_INTENCLR00_READY_Pos (0UL)
  #define RADIO_INTENCLR00_READY_Msk (0x1UL << RADIO_INTENCLR00_READY_Pos)
  #define RADIO_INTENCLR00_READY_Min (0x0UL)
  #define RADIO_INTENCLR00_READY_Max (0x1UL)
  #define RADIO_INTENCLR00_READY_Clear (0x1UL)
  #define RADIO_INTENCLR00_READY_Disabled (0x0UL)
  #define RADIO_INTENCLR00_READY_Enabled (0x1UL)

/* TXREADY @Bit 1 : Write '1' to disable interrupt for event TXREADY */
  #define RADIO_INTENCLR00_TXREADY_Pos (1UL)
  #define RADIO_INTENCLR00_TXREADY_Msk (0x1UL << RADIO_INTENCLR00_TXREADY_Pos)
  #define RADIO_INTENCLR00_TXREADY_Min (0x0UL)
  #define RADIO_INTENCLR00_TXREADY_Max (0x1UL)
  #define RADIO_INTENCLR00_TXREADY_Clear (0x1UL)
  #define RADIO_INTENCLR00_TXREADY_Disabled (0x0UL)
  #define RADIO_INTENCLR00_TXREADY_Enabled (0x1UL)

/* RXREADY @Bit 2 : Write '1' to disable interrupt for event RXREADY */
  #define RADIO_INTENCLR00_RXREADY_Pos (2UL)
  #define RADIO_INTENCLR00_RXREADY_Msk (0x1UL << RADIO_INTENCLR00_RXREADY_Pos)
  #define RADIO_INTENCLR00_RXREADY_Min (0x0UL)
  #define RADIO_INTENCLR00_RXREADY_Max (0x1UL)
  #define RADIO_INTENCLR00_RXREADY_Clear (0x1UL)
  #define RADIO_INTENCLR00_RXREADY_Disabled (0x0UL)
  #define RADIO_INTENCLR00_RXREADY_Enabled (0x1UL)

/* ADDRESS @Bit 3 : Write '1' to disable interrupt for event ADDRESS */
  #define RADIO_INTENCLR00_ADDRESS_Pos (3UL)
  #define RADIO_INTENCLR00_ADDRESS_Msk (0x1UL << RADIO_INTENCLR00_ADDRESS_Pos)
  #define RADIO_INTENCLR00_ADDRESS_Min (0x0UL)
  #define RADIO_INTENCLR00_ADDRESS_Max (0x1UL)
  #define RADIO_INTENCLR00_ADDRESS_Clear (0x1UL)
  #define RADIO_INTENCLR00_ADDRESS_Disabled (0x0UL)
  #define RADIO_INTENCLR00_ADDRESS_Enabled (0x1UL)

/* FRAMESTART @Bit 4 : Write '1' to disable interrupt for event FRAMESTART */
  #define RADIO_INTENCLR00_FRAMESTART_Pos (4UL)
  #define RADIO_INTENCLR00_FRAMESTART_Msk (0x1UL << RADIO_INTENCLR00_FRAMESTART_Pos)
  #define RADIO_INTENCLR00_FRAMESTART_Min (0x0UL)
  #define RADIO_INTENCLR00_FRAMESTART_Max (0x1UL)
  #define RADIO_INTENCLR00_FRAMESTART_Clear (0x1UL)
  #define RADIO_INTENCLR00_FRAMESTART_Disabled (0x0UL)
  #define RADIO_INTENCLR00_FRAMESTART_Enabled (0x1UL)

/* PAYLOAD @Bit 5 : Write '1' to disable interrupt for event PAYLOAD */
  #define RADIO_INTENCLR00_PAYLOAD_Pos (5UL)
  #define RADIO_INTENCLR00_PAYLOAD_Msk (0x1UL << RADIO_INTENCLR00_PAYLOAD_Pos)
  #define RADIO_INTENCLR00_PAYLOAD_Min (0x0UL)
  #define RADIO_INTENCLR00_PAYLOAD_Max (0x1UL)
  #define RADIO_INTENCLR00_PAYLOAD_Clear (0x1UL)
  #define RADIO_INTENCLR00_PAYLOAD_Disabled (0x0UL)
  #define RADIO_INTENCLR00_PAYLOAD_Enabled (0x1UL)

/* END @Bit 6 : Write '1' to disable interrupt for event END */
  #define RADIO_INTENCLR00_END_Pos (6UL)
  #define RADIO_INTENCLR00_END_Msk (0x1UL << RADIO_INTENCLR00_END_Pos)
  #define RADIO_INTENCLR00_END_Min (0x0UL)
  #define RADIO_INTENCLR00_END_Max (0x1UL)
  #define RADIO_INTENCLR00_END_Clear (0x1UL)
  #define RADIO_INTENCLR00_END_Disabled (0x0UL)
  #define RADIO_INTENCLR00_END_Enabled (0x1UL)

/* PHYEND @Bit 7 : Write '1' to disable interrupt for event PHYEND */
  #define RADIO_INTENCLR00_PHYEND_Pos (7UL)
  #define RADIO_INTENCLR00_PHYEND_Msk (0x1UL << RADIO_INTENCLR00_PHYEND_Pos)
  #define RADIO_INTENCLR00_PHYEND_Min (0x0UL)
  #define RADIO_INTENCLR00_PHYEND_Max (0x1UL)
  #define RADIO_INTENCLR00_PHYEND_Clear (0x1UL)
  #define RADIO_INTENCLR00_PHYEND_Disabled (0x0UL)
  #define RADIO_INTENCLR00_PHYEND_Enabled (0x1UL)

/* DISABLED @Bit 8 : Write '1' to disable interrupt for event DISABLED */
  #define RADIO_INTENCLR00_DISABLED_Pos (8UL)
  #define RADIO_INTENCLR00_DISABLED_Msk (0x1UL << RADIO_INTENCLR00_DISABLED_Pos)
  #define RADIO_INTENCLR00_DISABLED_Min (0x0UL)
  #define RADIO_INTENCLR00_DISABLED_Max (0x1UL)
  #define RADIO_INTENCLR00_DISABLED_Clear (0x1UL)
  #define RADIO_INTENCLR00_DISABLED_Disabled (0x0UL)
  #define RADIO_INTENCLR00_DISABLED_Enabled (0x1UL)

/* DEVMATCH @Bit 9 : Write '1' to disable interrupt for event DEVMATCH */
  #define RADIO_INTENCLR00_DEVMATCH_Pos (9UL)
  #define RADIO_INTENCLR00_DEVMATCH_Msk (0x1UL << RADIO_INTENCLR00_DEVMATCH_Pos)
  #define RADIO_INTENCLR00_DEVMATCH_Min (0x0UL)
  #define RADIO_INTENCLR00_DEVMATCH_Max (0x1UL)
  #define RADIO_INTENCLR00_DEVMATCH_Clear (0x1UL)
  #define RADIO_INTENCLR00_DEVMATCH_Disabled (0x0UL)
  #define RADIO_INTENCLR00_DEVMATCH_Enabled (0x1UL)

/* DEVMISS @Bit 10 : Write '1' to disable interrupt for event DEVMISS */
  #define RADIO_INTENCLR00_DEVMISS_Pos (10UL)
  #define RADIO_INTENCLR00_DEVMISS_Msk (0x1UL << RADIO_INTENCLR00_DEVMISS_Pos)
  #define RADIO_INTENCLR00_DEVMISS_Min (0x0UL)
  #define RADIO_INTENCLR00_DEVMISS_Max (0x1UL)
  #define RADIO_INTENCLR00_DEVMISS_Clear (0x1UL)
  #define RADIO_INTENCLR00_DEVMISS_Disabled (0x0UL)
  #define RADIO_INTENCLR00_DEVMISS_Enabled (0x1UL)

/* CRCOK @Bit 11 : Write '1' to disable interrupt for event CRCOK */
  #define RADIO_INTENCLR00_CRCOK_Pos (11UL)
  #define RADIO_INTENCLR00_CRCOK_Msk (0x1UL << RADIO_INTENCLR00_CRCOK_Pos)
  #define RADIO_INTENCLR00_CRCOK_Min (0x0UL)
  #define RADIO_INTENCLR00_CRCOK_Max (0x1UL)
  #define RADIO_INTENCLR00_CRCOK_Clear (0x1UL)
  #define RADIO_INTENCLR00_CRCOK_Disabled (0x0UL)
  #define RADIO_INTENCLR00_CRCOK_Enabled (0x1UL)

/* CRCERROR @Bit 12 : Write '1' to disable interrupt for event CRCERROR */
  #define RADIO_INTENCLR00_CRCERROR_Pos (12UL)
  #define RADIO_INTENCLR00_CRCERROR_Msk (0x1UL << RADIO_INTENCLR00_CRCERROR_Pos)
  #define RADIO_INTENCLR00_CRCERROR_Min (0x0UL)
  #define RADIO_INTENCLR00_CRCERROR_Max (0x1UL)
  #define RADIO_INTENCLR00_CRCERROR_Clear (0x1UL)
  #define RADIO_INTENCLR00_CRCERROR_Disabled (0x0UL)
  #define RADIO_INTENCLR00_CRCERROR_Enabled (0x1UL)

/* BCMATCH @Bit 14 : Write '1' to disable interrupt for event BCMATCH */
  #define RADIO_INTENCLR00_BCMATCH_Pos (14UL)
  #define RADIO_INTENCLR00_BCMATCH_Msk (0x1UL << RADIO_INTENCLR00_BCMATCH_Pos)
  #define RADIO_INTENCLR00_BCMATCH_Min (0x0UL)
  #define RADIO_INTENCLR00_BCMATCH_Max (0x1UL)
  #define RADIO_INTENCLR00_BCMATCH_Clear (0x1UL)
  #define RADIO_INTENCLR00_BCMATCH_Disabled (0x0UL)
  #define RADIO_INTENCLR00_BCMATCH_Enabled (0x1UL)

/* EDEND @Bit 15 : Write '1' to disable interrupt for event EDEND */
  #define RADIO_INTENCLR00_EDEND_Pos (15UL)
  #define RADIO_INTENCLR00_EDEND_Msk (0x1UL << RADIO_INTENCLR00_EDEND_Pos)
  #define RADIO_INTENCLR00_EDEND_Min (0x0UL)
  #define RADIO_INTENCLR00_EDEND_Max (0x1UL)
  #define RADIO_INTENCLR00_EDEND_Clear (0x1UL)
  #define RADIO_INTENCLR00_EDEND_Disabled (0x0UL)
  #define RADIO_INTENCLR00_EDEND_Enabled (0x1UL)

/* EDSTOPPED @Bit 16 : Write '1' to disable interrupt for event EDSTOPPED */
  #define RADIO_INTENCLR00_EDSTOPPED_Pos (16UL)
  #define RADIO_INTENCLR00_EDSTOPPED_Msk (0x1UL << RADIO_INTENCLR00_EDSTOPPED_Pos)
  #define RADIO_INTENCLR00_EDSTOPPED_Min (0x0UL)
  #define RADIO_INTENCLR00_EDSTOPPED_Max (0x1UL)
  #define RADIO_INTENCLR00_EDSTOPPED_Clear (0x1UL)
  #define RADIO_INTENCLR00_EDSTOPPED_Disabled (0x0UL)
  #define RADIO_INTENCLR00_EDSTOPPED_Enabled (0x1UL)

/* CCAIDLE @Bit 17 : Write '1' to disable interrupt for event CCAIDLE */
  #define RADIO_INTENCLR00_CCAIDLE_Pos (17UL)
  #define RADIO_INTENCLR00_CCAIDLE_Msk (0x1UL << RADIO_INTENCLR00_CCAIDLE_Pos)
  #define RADIO_INTENCLR00_CCAIDLE_Min (0x0UL)
  #define RADIO_INTENCLR00_CCAIDLE_Max (0x1UL)
  #define RADIO_INTENCLR00_CCAIDLE_Clear (0x1UL)
  #define RADIO_INTENCLR00_CCAIDLE_Disabled (0x0UL)
  #define RADIO_INTENCLR00_CCAIDLE_Enabled (0x1UL)

/* CCABUSY @Bit 18 : Write '1' to disable interrupt for event CCABUSY */
  #define RADIO_INTENCLR00_CCABUSY_Pos (18UL)
  #define RADIO_INTENCLR00_CCABUSY_Msk (0x1UL << RADIO_INTENCLR00_CCABUSY_Pos)
  #define RADIO_INTENCLR00_CCABUSY_Min (0x0UL)
  #define RADIO_INTENCLR00_CCABUSY_Max (0x1UL)
  #define RADIO_INTENCLR00_CCABUSY_Clear (0x1UL)
  #define RADIO_INTENCLR00_CCABUSY_Disabled (0x0UL)
  #define RADIO_INTENCLR00_CCABUSY_Enabled (0x1UL)

/* CCASTOPPED @Bit 19 : Write '1' to disable interrupt for event CCASTOPPED */
  #define RADIO_INTENCLR00_CCASTOPPED_Pos (19UL)
  #define RADIO_INTENCLR00_CCASTOPPED_Msk (0x1UL << RADIO_INTENCLR00_CCASTOPPED_Pos)
  #define RADIO_INTENCLR00_CCASTOPPED_Min (0x0UL)
  #define RADIO_INTENCLR00_CCASTOPPED_Max (0x1UL)
  #define RADIO_INTENCLR00_CCASTOPPED_Clear (0x1UL)
  #define RADIO_INTENCLR00_CCASTOPPED_Disabled (0x0UL)
  #define RADIO_INTENCLR00_CCASTOPPED_Enabled (0x1UL)

/* RATEBOOST @Bit 20 : Write '1' to disable interrupt for event RATEBOOST */
  #define RADIO_INTENCLR00_RATEBOOST_Pos (20UL)
  #define RADIO_INTENCLR00_RATEBOOST_Msk (0x1UL << RADIO_INTENCLR00_RATEBOOST_Pos)
  #define RADIO_INTENCLR00_RATEBOOST_Min (0x0UL)
  #define RADIO_INTENCLR00_RATEBOOST_Max (0x1UL)
  #define RADIO_INTENCLR00_RATEBOOST_Clear (0x1UL)
  #define RADIO_INTENCLR00_RATEBOOST_Disabled (0x0UL)
  #define RADIO_INTENCLR00_RATEBOOST_Enabled (0x1UL)

/* MHRMATCH @Bit 21 : Write '1' to disable interrupt for event MHRMATCH */
  #define RADIO_INTENCLR00_MHRMATCH_Pos (21UL)
  #define RADIO_INTENCLR00_MHRMATCH_Msk (0x1UL << RADIO_INTENCLR00_MHRMATCH_Pos)
  #define RADIO_INTENCLR00_MHRMATCH_Min (0x0UL)
  #define RADIO_INTENCLR00_MHRMATCH_Max (0x1UL)
  #define RADIO_INTENCLR00_MHRMATCH_Clear (0x1UL)
  #define RADIO_INTENCLR00_MHRMATCH_Disabled (0x0UL)
  #define RADIO_INTENCLR00_MHRMATCH_Enabled (0x1UL)

/* SYNC @Bit 22 : Write '1' to disable interrupt for event SYNC */
  #define RADIO_INTENCLR00_SYNC_Pos (22UL)
  #define RADIO_INTENCLR00_SYNC_Msk (0x1UL << RADIO_INTENCLR00_SYNC_Pos)
  #define RADIO_INTENCLR00_SYNC_Min (0x0UL)
  #define RADIO_INTENCLR00_SYNC_Max (0x1UL)
  #define RADIO_INTENCLR00_SYNC_Clear (0x1UL)
  #define RADIO_INTENCLR00_SYNC_Disabled (0x0UL)
  #define RADIO_INTENCLR00_SYNC_Enabled (0x1UL)

/* CTEPRESENT @Bit 23 : Write '1' to disable interrupt for event CTEPRESENT */
  #define RADIO_INTENCLR00_CTEPRESENT_Pos (23UL)
  #define RADIO_INTENCLR00_CTEPRESENT_Msk (0x1UL << RADIO_INTENCLR00_CTEPRESENT_Pos)
  #define RADIO_INTENCLR00_CTEPRESENT_Min (0x0UL)
  #define RADIO_INTENCLR00_CTEPRESENT_Max (0x1UL)
  #define RADIO_INTENCLR00_CTEPRESENT_Clear (0x1UL)
  #define RADIO_INTENCLR00_CTEPRESENT_Disabled (0x0UL)
  #define RADIO_INTENCLR00_CTEPRESENT_Enabled (0x1UL)


/* RADIO_INTENSET10: Enable interrupt */
  #define RADIO_INTENSET10_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to enable interrupt for event READY */
  #define RADIO_INTENSET10_READY_Pos (0UL)
  #define RADIO_INTENSET10_READY_Msk (0x1UL << RADIO_INTENSET10_READY_Pos)
  #define RADIO_INTENSET10_READY_Min (0x0UL)
  #define RADIO_INTENSET10_READY_Max (0x1UL)
  #define RADIO_INTENSET10_READY_Set (0x1UL)
  #define RADIO_INTENSET10_READY_Disabled (0x0UL)
  #define RADIO_INTENSET10_READY_Enabled (0x1UL)

/* TXREADY @Bit 1 : Write '1' to enable interrupt for event TXREADY */
  #define RADIO_INTENSET10_TXREADY_Pos (1UL)
  #define RADIO_INTENSET10_TXREADY_Msk (0x1UL << RADIO_INTENSET10_TXREADY_Pos)
  #define RADIO_INTENSET10_TXREADY_Min (0x0UL)
  #define RADIO_INTENSET10_TXREADY_Max (0x1UL)
  #define RADIO_INTENSET10_TXREADY_Set (0x1UL)
  #define RADIO_INTENSET10_TXREADY_Disabled (0x0UL)
  #define RADIO_INTENSET10_TXREADY_Enabled (0x1UL)

/* RXREADY @Bit 2 : Write '1' to enable interrupt for event RXREADY */
  #define RADIO_INTENSET10_RXREADY_Pos (2UL)
  #define RADIO_INTENSET10_RXREADY_Msk (0x1UL << RADIO_INTENSET10_RXREADY_Pos)
  #define RADIO_INTENSET10_RXREADY_Min (0x0UL)
  #define RADIO_INTENSET10_RXREADY_Max (0x1UL)
  #define RADIO_INTENSET10_RXREADY_Set (0x1UL)
  #define RADIO_INTENSET10_RXREADY_Disabled (0x0UL)
  #define RADIO_INTENSET10_RXREADY_Enabled (0x1UL)

/* ADDRESS @Bit 3 : Write '1' to enable interrupt for event ADDRESS */
  #define RADIO_INTENSET10_ADDRESS_Pos (3UL)
  #define RADIO_INTENSET10_ADDRESS_Msk (0x1UL << RADIO_INTENSET10_ADDRESS_Pos)
  #define RADIO_INTENSET10_ADDRESS_Min (0x0UL)
  #define RADIO_INTENSET10_ADDRESS_Max (0x1UL)
  #define RADIO_INTENSET10_ADDRESS_Set (0x1UL)
  #define RADIO_INTENSET10_ADDRESS_Disabled (0x0UL)
  #define RADIO_INTENSET10_ADDRESS_Enabled (0x1UL)

/* FRAMESTART @Bit 4 : Write '1' to enable interrupt for event FRAMESTART */
  #define RADIO_INTENSET10_FRAMESTART_Pos (4UL)
  #define RADIO_INTENSET10_FRAMESTART_Msk (0x1UL << RADIO_INTENSET10_FRAMESTART_Pos)
  #define RADIO_INTENSET10_FRAMESTART_Min (0x0UL)
  #define RADIO_INTENSET10_FRAMESTART_Max (0x1UL)
  #define RADIO_INTENSET10_FRAMESTART_Set (0x1UL)
  #define RADIO_INTENSET10_FRAMESTART_Disabled (0x0UL)
  #define RADIO_INTENSET10_FRAMESTART_Enabled (0x1UL)

/* PAYLOAD @Bit 5 : Write '1' to enable interrupt for event PAYLOAD */
  #define RADIO_INTENSET10_PAYLOAD_Pos (5UL)
  #define RADIO_INTENSET10_PAYLOAD_Msk (0x1UL << RADIO_INTENSET10_PAYLOAD_Pos)
  #define RADIO_INTENSET10_PAYLOAD_Min (0x0UL)
  #define RADIO_INTENSET10_PAYLOAD_Max (0x1UL)
  #define RADIO_INTENSET10_PAYLOAD_Set (0x1UL)
  #define RADIO_INTENSET10_PAYLOAD_Disabled (0x0UL)
  #define RADIO_INTENSET10_PAYLOAD_Enabled (0x1UL)

/* END @Bit 6 : Write '1' to enable interrupt for event END */
  #define RADIO_INTENSET10_END_Pos (6UL)
  #define RADIO_INTENSET10_END_Msk (0x1UL << RADIO_INTENSET10_END_Pos)
  #define RADIO_INTENSET10_END_Min (0x0UL)
  #define RADIO_INTENSET10_END_Max (0x1UL)
  #define RADIO_INTENSET10_END_Set (0x1UL)
  #define RADIO_INTENSET10_END_Disabled (0x0UL)
  #define RADIO_INTENSET10_END_Enabled (0x1UL)

/* PHYEND @Bit 7 : Write '1' to enable interrupt for event PHYEND */
  #define RADIO_INTENSET10_PHYEND_Pos (7UL)
  #define RADIO_INTENSET10_PHYEND_Msk (0x1UL << RADIO_INTENSET10_PHYEND_Pos)
  #define RADIO_INTENSET10_PHYEND_Min (0x0UL)
  #define RADIO_INTENSET10_PHYEND_Max (0x1UL)
  #define RADIO_INTENSET10_PHYEND_Set (0x1UL)
  #define RADIO_INTENSET10_PHYEND_Disabled (0x0UL)
  #define RADIO_INTENSET10_PHYEND_Enabled (0x1UL)

/* DISABLED @Bit 8 : Write '1' to enable interrupt for event DISABLED */
  #define RADIO_INTENSET10_DISABLED_Pos (8UL)
  #define RADIO_INTENSET10_DISABLED_Msk (0x1UL << RADIO_INTENSET10_DISABLED_Pos)
  #define RADIO_INTENSET10_DISABLED_Min (0x0UL)
  #define RADIO_INTENSET10_DISABLED_Max (0x1UL)
  #define RADIO_INTENSET10_DISABLED_Set (0x1UL)
  #define RADIO_INTENSET10_DISABLED_Disabled (0x0UL)
  #define RADIO_INTENSET10_DISABLED_Enabled (0x1UL)

/* DEVMATCH @Bit 9 : Write '1' to enable interrupt for event DEVMATCH */
  #define RADIO_INTENSET10_DEVMATCH_Pos (9UL)
  #define RADIO_INTENSET10_DEVMATCH_Msk (0x1UL << RADIO_INTENSET10_DEVMATCH_Pos)
  #define RADIO_INTENSET10_DEVMATCH_Min (0x0UL)
  #define RADIO_INTENSET10_DEVMATCH_Max (0x1UL)
  #define RADIO_INTENSET10_DEVMATCH_Set (0x1UL)
  #define RADIO_INTENSET10_DEVMATCH_Disabled (0x0UL)
  #define RADIO_INTENSET10_DEVMATCH_Enabled (0x1UL)

/* DEVMISS @Bit 10 : Write '1' to enable interrupt for event DEVMISS */
  #define RADIO_INTENSET10_DEVMISS_Pos (10UL)
  #define RADIO_INTENSET10_DEVMISS_Msk (0x1UL << RADIO_INTENSET10_DEVMISS_Pos)
  #define RADIO_INTENSET10_DEVMISS_Min (0x0UL)
  #define RADIO_INTENSET10_DEVMISS_Max (0x1UL)
  #define RADIO_INTENSET10_DEVMISS_Set (0x1UL)
  #define RADIO_INTENSET10_DEVMISS_Disabled (0x0UL)
  #define RADIO_INTENSET10_DEVMISS_Enabled (0x1UL)

/* CRCOK @Bit 11 : Write '1' to enable interrupt for event CRCOK */
  #define RADIO_INTENSET10_CRCOK_Pos (11UL)
  #define RADIO_INTENSET10_CRCOK_Msk (0x1UL << RADIO_INTENSET10_CRCOK_Pos)
  #define RADIO_INTENSET10_CRCOK_Min (0x0UL)
  #define RADIO_INTENSET10_CRCOK_Max (0x1UL)
  #define RADIO_INTENSET10_CRCOK_Set (0x1UL)
  #define RADIO_INTENSET10_CRCOK_Disabled (0x0UL)
  #define RADIO_INTENSET10_CRCOK_Enabled (0x1UL)

/* CRCERROR @Bit 12 : Write '1' to enable interrupt for event CRCERROR */
  #define RADIO_INTENSET10_CRCERROR_Pos (12UL)
  #define RADIO_INTENSET10_CRCERROR_Msk (0x1UL << RADIO_INTENSET10_CRCERROR_Pos)
  #define RADIO_INTENSET10_CRCERROR_Min (0x0UL)
  #define RADIO_INTENSET10_CRCERROR_Max (0x1UL)
  #define RADIO_INTENSET10_CRCERROR_Set (0x1UL)
  #define RADIO_INTENSET10_CRCERROR_Disabled (0x0UL)
  #define RADIO_INTENSET10_CRCERROR_Enabled (0x1UL)

/* BCMATCH @Bit 14 : Write '1' to enable interrupt for event BCMATCH */
  #define RADIO_INTENSET10_BCMATCH_Pos (14UL)
  #define RADIO_INTENSET10_BCMATCH_Msk (0x1UL << RADIO_INTENSET10_BCMATCH_Pos)
  #define RADIO_INTENSET10_BCMATCH_Min (0x0UL)
  #define RADIO_INTENSET10_BCMATCH_Max (0x1UL)
  #define RADIO_INTENSET10_BCMATCH_Set (0x1UL)
  #define RADIO_INTENSET10_BCMATCH_Disabled (0x0UL)
  #define RADIO_INTENSET10_BCMATCH_Enabled (0x1UL)

/* EDEND @Bit 15 : Write '1' to enable interrupt for event EDEND */
  #define RADIO_INTENSET10_EDEND_Pos (15UL)
  #define RADIO_INTENSET10_EDEND_Msk (0x1UL << RADIO_INTENSET10_EDEND_Pos)
  #define RADIO_INTENSET10_EDEND_Min (0x0UL)
  #define RADIO_INTENSET10_EDEND_Max (0x1UL)
  #define RADIO_INTENSET10_EDEND_Set (0x1UL)
  #define RADIO_INTENSET10_EDEND_Disabled (0x0UL)
  #define RADIO_INTENSET10_EDEND_Enabled (0x1UL)

/* EDSTOPPED @Bit 16 : Write '1' to enable interrupt for event EDSTOPPED */
  #define RADIO_INTENSET10_EDSTOPPED_Pos (16UL)
  #define RADIO_INTENSET10_EDSTOPPED_Msk (0x1UL << RADIO_INTENSET10_EDSTOPPED_Pos)
  #define RADIO_INTENSET10_EDSTOPPED_Min (0x0UL)
  #define RADIO_INTENSET10_EDSTOPPED_Max (0x1UL)
  #define RADIO_INTENSET10_EDSTOPPED_Set (0x1UL)
  #define RADIO_INTENSET10_EDSTOPPED_Disabled (0x0UL)
  #define RADIO_INTENSET10_EDSTOPPED_Enabled (0x1UL)

/* CCAIDLE @Bit 17 : Write '1' to enable interrupt for event CCAIDLE */
  #define RADIO_INTENSET10_CCAIDLE_Pos (17UL)
  #define RADIO_INTENSET10_CCAIDLE_Msk (0x1UL << RADIO_INTENSET10_CCAIDLE_Pos)
  #define RADIO_INTENSET10_CCAIDLE_Min (0x0UL)
  #define RADIO_INTENSET10_CCAIDLE_Max (0x1UL)
  #define RADIO_INTENSET10_CCAIDLE_Set (0x1UL)
  #define RADIO_INTENSET10_CCAIDLE_Disabled (0x0UL)
  #define RADIO_INTENSET10_CCAIDLE_Enabled (0x1UL)

/* CCABUSY @Bit 18 : Write '1' to enable interrupt for event CCABUSY */
  #define RADIO_INTENSET10_CCABUSY_Pos (18UL)
  #define RADIO_INTENSET10_CCABUSY_Msk (0x1UL << RADIO_INTENSET10_CCABUSY_Pos)
  #define RADIO_INTENSET10_CCABUSY_Min (0x0UL)
  #define RADIO_INTENSET10_CCABUSY_Max (0x1UL)
  #define RADIO_INTENSET10_CCABUSY_Set (0x1UL)
  #define RADIO_INTENSET10_CCABUSY_Disabled (0x0UL)
  #define RADIO_INTENSET10_CCABUSY_Enabled (0x1UL)

/* CCASTOPPED @Bit 19 : Write '1' to enable interrupt for event CCASTOPPED */
  #define RADIO_INTENSET10_CCASTOPPED_Pos (19UL)
  #define RADIO_INTENSET10_CCASTOPPED_Msk (0x1UL << RADIO_INTENSET10_CCASTOPPED_Pos)
  #define RADIO_INTENSET10_CCASTOPPED_Min (0x0UL)
  #define RADIO_INTENSET10_CCASTOPPED_Max (0x1UL)
  #define RADIO_INTENSET10_CCASTOPPED_Set (0x1UL)
  #define RADIO_INTENSET10_CCASTOPPED_Disabled (0x0UL)
  #define RADIO_INTENSET10_CCASTOPPED_Enabled (0x1UL)

/* RATEBOOST @Bit 20 : Write '1' to enable interrupt for event RATEBOOST */
  #define RADIO_INTENSET10_RATEBOOST_Pos (20UL)
  #define RADIO_INTENSET10_RATEBOOST_Msk (0x1UL << RADIO_INTENSET10_RATEBOOST_Pos)
  #define RADIO_INTENSET10_RATEBOOST_Min (0x0UL)
  #define RADIO_INTENSET10_RATEBOOST_Max (0x1UL)
  #define RADIO_INTENSET10_RATEBOOST_Set (0x1UL)
  #define RADIO_INTENSET10_RATEBOOST_Disabled (0x0UL)
  #define RADIO_INTENSET10_RATEBOOST_Enabled (0x1UL)

/* MHRMATCH @Bit 21 : Write '1' to enable interrupt for event MHRMATCH */
  #define RADIO_INTENSET10_MHRMATCH_Pos (21UL)
  #define RADIO_INTENSET10_MHRMATCH_Msk (0x1UL << RADIO_INTENSET10_MHRMATCH_Pos)
  #define RADIO_INTENSET10_MHRMATCH_Min (0x0UL)
  #define RADIO_INTENSET10_MHRMATCH_Max (0x1UL)
  #define RADIO_INTENSET10_MHRMATCH_Set (0x1UL)
  #define RADIO_INTENSET10_MHRMATCH_Disabled (0x0UL)
  #define RADIO_INTENSET10_MHRMATCH_Enabled (0x1UL)

/* SYNC @Bit 22 : Write '1' to enable interrupt for event SYNC */
  #define RADIO_INTENSET10_SYNC_Pos (22UL)
  #define RADIO_INTENSET10_SYNC_Msk (0x1UL << RADIO_INTENSET10_SYNC_Pos)
  #define RADIO_INTENSET10_SYNC_Min (0x0UL)
  #define RADIO_INTENSET10_SYNC_Max (0x1UL)
  #define RADIO_INTENSET10_SYNC_Set (0x1UL)
  #define RADIO_INTENSET10_SYNC_Disabled (0x0UL)
  #define RADIO_INTENSET10_SYNC_Enabled (0x1UL)

/* CTEPRESENT @Bit 23 : Write '1' to enable interrupt for event CTEPRESENT */
  #define RADIO_INTENSET10_CTEPRESENT_Pos (23UL)
  #define RADIO_INTENSET10_CTEPRESENT_Msk (0x1UL << RADIO_INTENSET10_CTEPRESENT_Pos)
  #define RADIO_INTENSET10_CTEPRESENT_Min (0x0UL)
  #define RADIO_INTENSET10_CTEPRESENT_Max (0x1UL)
  #define RADIO_INTENSET10_CTEPRESENT_Set (0x1UL)
  #define RADIO_INTENSET10_CTEPRESENT_Disabled (0x0UL)
  #define RADIO_INTENSET10_CTEPRESENT_Enabled (0x1UL)


/* RADIO_INTENCLR10: Disable interrupt */
  #define RADIO_INTENCLR10_ResetValue (0x00000000UL)

/* READY @Bit 0 : Write '1' to disable interrupt for event READY */
  #define RADIO_INTENCLR10_READY_Pos (0UL)
  #define RADIO_INTENCLR10_READY_Msk (0x1UL << RADIO_INTENCLR10_READY_Pos)
  #define RADIO_INTENCLR10_READY_Min (0x0UL)
  #define RADIO_INTENCLR10_READY_Max (0x1UL)
  #define RADIO_INTENCLR10_READY_Clear (0x1UL)
  #define RADIO_INTENCLR10_READY_Disabled (0x0UL)
  #define RADIO_INTENCLR10_READY_Enabled (0x1UL)

/* TXREADY @Bit 1 : Write '1' to disable interrupt for event TXREADY */
  #define RADIO_INTENCLR10_TXREADY_Pos (1UL)
  #define RADIO_INTENCLR10_TXREADY_Msk (0x1UL << RADIO_INTENCLR10_TXREADY_Pos)
  #define RADIO_INTENCLR10_TXREADY_Min (0x0UL)
  #define RADIO_INTENCLR10_TXREADY_Max (0x1UL)
  #define RADIO_INTENCLR10_TXREADY_Clear (0x1UL)
  #define RADIO_INTENCLR10_TXREADY_Disabled (0x0UL)
  #define RADIO_INTENCLR10_TXREADY_Enabled (0x1UL)

/* RXREADY @Bit 2 : Write '1' to disable interrupt for event RXREADY */
  #define RADIO_INTENCLR10_RXREADY_Pos (2UL)
  #define RADIO_INTENCLR10_RXREADY_Msk (0x1UL << RADIO_INTENCLR10_RXREADY_Pos)
  #define RADIO_INTENCLR10_RXREADY_Min (0x0UL)
  #define RADIO_INTENCLR10_RXREADY_Max (0x1UL)
  #define RADIO_INTENCLR10_RXREADY_Clear (0x1UL)
  #define RADIO_INTENCLR10_RXREADY_Disabled (0x0UL)
  #define RADIO_INTENCLR10_RXREADY_Enabled (0x1UL)

/* ADDRESS @Bit 3 : Write '1' to disable interrupt for event ADDRESS */
  #define RADIO_INTENCLR10_ADDRESS_Pos (3UL)
  #define RADIO_INTENCLR10_ADDRESS_Msk (0x1UL << RADIO_INTENCLR10_ADDRESS_Pos)
  #define RADIO_INTENCLR10_ADDRESS_Min (0x0UL)
  #define RADIO_INTENCLR10_ADDRESS_Max (0x1UL)
  #define RADIO_INTENCLR10_ADDRESS_Clear (0x1UL)
  #define RADIO_INTENCLR10_ADDRESS_Disabled (0x0UL)
  #define RADIO_INTENCLR10_ADDRESS_Enabled (0x1UL)

/* FRAMESTART @Bit 4 : Write '1' to disable interrupt for event FRAMESTART */
  #define RADIO_INTENCLR10_FRAMESTART_Pos (4UL)
  #define RADIO_INTENCLR10_FRAMESTART_Msk (0x1UL << RADIO_INTENCLR10_FRAMESTART_Pos)
  #define RADIO_INTENCLR10_FRAMESTART_Min (0x0UL)
  #define RADIO_INTENCLR10_FRAMESTART_Max (0x1UL)
  #define RADIO_INTENCLR10_FRAMESTART_Clear (0x1UL)
  #define RADIO_INTENCLR10_FRAMESTART_Disabled (0x0UL)
  #define RADIO_INTENCLR10_FRAMESTART_Enabled (0x1UL)

/* PAYLOAD @Bit 5 : Write '1' to disable interrupt for event PAYLOAD */
  #define RADIO_INTENCLR10_PAYLOAD_Pos (5UL)
  #define RADIO_INTENCLR10_PAYLOAD_Msk (0x1UL << RADIO_INTENCLR10_PAYLOAD_Pos)
  #define RADIO_INTENCLR10_PAYLOAD_Min (0x0UL)
  #define RADIO_INTENCLR10_PAYLOAD_Max (0x1UL)
  #define RADIO_INTENCLR10_PAYLOAD_Clear (0x1UL)
  #define RADIO_INTENCLR10_PAYLOAD_Disabled (0x0UL)
  #define RADIO_INTENCLR10_PAYLOAD_Enabled (0x1UL)

/* END @Bit 6 : Write '1' to disable interrupt for event END */
  #define RADIO_INTENCLR10_END_Pos (6UL)
  #define RADIO_INTENCLR10_END_Msk (0x1UL << RADIO_INTENCLR10_END_Pos)
  #define RADIO_INTENCLR10_END_Min (0x0UL)
  #define RADIO_INTENCLR10_END_Max (0x1UL)
  #define RADIO_INTENCLR10_END_Clear (0x1UL)
  #define RADIO_INTENCLR10_END_Disabled (0x0UL)
  #define RADIO_INTENCLR10_END_Enabled (0x1UL)

/* PHYEND @Bit 7 : Write '1' to disable interrupt for event PHYEND */
  #define RADIO_INTENCLR10_PHYEND_Pos (7UL)
  #define RADIO_INTENCLR10_PHYEND_Msk (0x1UL << RADIO_INTENCLR10_PHYEND_Pos)
  #define RADIO_INTENCLR10_PHYEND_Min (0x0UL)
  #define RADIO_INTENCLR10_PHYEND_Max (0x1UL)
  #define RADIO_INTENCLR10_PHYEND_Clear (0x1UL)
  #define RADIO_INTENCLR10_PHYEND_Disabled (0x0UL)
  #define RADIO_INTENCLR10_PHYEND_Enabled (0x1UL)

/* DISABLED @Bit 8 : Write '1' to disable interrupt for event DISABLED */
  #define RADIO_INTENCLR10_DISABLED_Pos (8UL)
  #define RADIO_INTENCLR10_DISABLED_Msk (0x1UL << RADIO_INTENCLR10_DISABLED_Pos)
  #define RADIO_INTENCLR10_DISABLED_Min (0x0UL)
  #define RADIO_INTENCLR10_DISABLED_Max (0x1UL)
  #define RADIO_INTENCLR10_DISABLED_Clear (0x1UL)
  #define RADIO_INTENCLR10_DISABLED_Disabled (0x0UL)
  #define RADIO_INTENCLR10_DISABLED_Enabled (0x1UL)

/* DEVMATCH @Bit 9 : Write '1' to disable interrupt for event DEVMATCH */
  #define RADIO_INTENCLR10_DEVMATCH_Pos (9UL)
  #define RADIO_INTENCLR10_DEVMATCH_Msk (0x1UL << RADIO_INTENCLR10_DEVMATCH_Pos)
  #define RADIO_INTENCLR10_DEVMATCH_Min (0x0UL)
  #define RADIO_INTENCLR10_DEVMATCH_Max (0x1UL)
  #define RADIO_INTENCLR10_DEVMATCH_Clear (0x1UL)
  #define RADIO_INTENCLR10_DEVMATCH_Disabled (0x0UL)
  #define RADIO_INTENCLR10_DEVMATCH_Enabled (0x1UL)

/* DEVMISS @Bit 10 : Write '1' to disable interrupt for event DEVMISS */
  #define RADIO_INTENCLR10_DEVMISS_Pos (10UL)
  #define RADIO_INTENCLR10_DEVMISS_Msk (0x1UL << RADIO_INTENCLR10_DEVMISS_Pos)
  #define RADIO_INTENCLR10_DEVMISS_Min (0x0UL)
  #define RADIO_INTENCLR10_DEVMISS_Max (0x1UL)
  #define RADIO_INTENCLR10_DEVMISS_Clear (0x1UL)
  #define RADIO_INTENCLR10_DEVMISS_Disabled (0x0UL)
  #define RADIO_INTENCLR10_DEVMISS_Enabled (0x1UL)

/* CRCOK @Bit 11 : Write '1' to disable interrupt for event CRCOK */
  #define RADIO_INTENCLR10_CRCOK_Pos (11UL)
  #define RADIO_INTENCLR10_CRCOK_Msk (0x1UL << RADIO_INTENCLR10_CRCOK_Pos)
  #define RADIO_INTENCLR10_CRCOK_Min (0x0UL)
  #define RADIO_INTENCLR10_CRCOK_Max (0x1UL)
  #define RADIO_INTENCLR10_CRCOK_Clear (0x1UL)
  #define RADIO_INTENCLR10_CRCOK_Disabled (0x0UL)
  #define RADIO_INTENCLR10_CRCOK_Enabled (0x1UL)

/* CRCERROR @Bit 12 : Write '1' to disable interrupt for event CRCERROR */
  #define RADIO_INTENCLR10_CRCERROR_Pos (12UL)
  #define RADIO_INTENCLR10_CRCERROR_Msk (0x1UL << RADIO_INTENCLR10_CRCERROR_Pos)
  #define RADIO_INTENCLR10_CRCERROR_Min (0x0UL)
  #define RADIO_INTENCLR10_CRCERROR_Max (0x1UL)
  #define RADIO_INTENCLR10_CRCERROR_Clear (0x1UL)
  #define RADIO_INTENCLR10_CRCERROR_Disabled (0x0UL)
  #define RADIO_INTENCLR10_CRCERROR_Enabled (0x1UL)

/* BCMATCH @Bit 14 : Write '1' to disable interrupt for event BCMATCH */
  #define RADIO_INTENCLR10_BCMATCH_Pos (14UL)
  #define RADIO_INTENCLR10_BCMATCH_Msk (0x1UL << RADIO_INTENCLR10_BCMATCH_Pos)
  #define RADIO_INTENCLR10_BCMATCH_Min (0x0UL)
  #define RADIO_INTENCLR10_BCMATCH_Max (0x1UL)
  #define RADIO_INTENCLR10_BCMATCH_Clear (0x1UL)
  #define RADIO_INTENCLR10_BCMATCH_Disabled (0x0UL)
  #define RADIO_INTENCLR10_BCMATCH_Enabled (0x1UL)

/* EDEND @Bit 15 : Write '1' to disable interrupt for event EDEND */
  #define RADIO_INTENCLR10_EDEND_Pos (15UL)
  #define RADIO_INTENCLR10_EDEND_Msk (0x1UL << RADIO_INTENCLR10_EDEND_Pos)
  #define RADIO_INTENCLR10_EDEND_Min (0x0UL)
  #define RADIO_INTENCLR10_EDEND_Max (0x1UL)
  #define RADIO_INTENCLR10_EDEND_Clear (0x1UL)
  #define RADIO_INTENCLR10_EDEND_Disabled (0x0UL)
  #define RADIO_INTENCLR10_EDEND_Enabled (0x1UL)

/* EDSTOPPED @Bit 16 : Write '1' to disable interrupt for event EDSTOPPED */
  #define RADIO_INTENCLR10_EDSTOPPED_Pos (16UL)
  #define RADIO_INTENCLR10_EDSTOPPED_Msk (0x1UL << RADIO_INTENCLR10_EDSTOPPED_Pos)
  #define RADIO_INTENCLR10_EDSTOPPED_Min (0x0UL)
  #define RADIO_INTENCLR10_EDSTOPPED_Max (0x1UL)
  #define RADIO_INTENCLR10_EDSTOPPED_Clear (0x1UL)
  #define RADIO_INTENCLR10_EDSTOPPED_Disabled (0x0UL)
  #define RADIO_INTENCLR10_EDSTOPPED_Enabled (0x1UL)

/* CCAIDLE @Bit 17 : Write '1' to disable interrupt for event CCAIDLE */
  #define RADIO_INTENCLR10_CCAIDLE_Pos (17UL)
  #define RADIO_INTENCLR10_CCAIDLE_Msk (0x1UL << RADIO_INTENCLR10_CCAIDLE_Pos)
  #define RADIO_INTENCLR10_CCAIDLE_Min (0x0UL)
  #define RADIO_INTENCLR10_CCAIDLE_Max (0x1UL)
  #define RADIO_INTENCLR10_CCAIDLE_Clear (0x1UL)
  #define RADIO_INTENCLR10_CCAIDLE_Disabled (0x0UL)
  #define RADIO_INTENCLR10_CCAIDLE_Enabled (0x1UL)

/* CCABUSY @Bit 18 : Write '1' to disable interrupt for event CCABUSY */
  #define RADIO_INTENCLR10_CCABUSY_Pos (18UL)
  #define RADIO_INTENCLR10_CCABUSY_Msk (0x1UL << RADIO_INTENCLR10_CCABUSY_Pos)
  #define RADIO_INTENCLR10_CCABUSY_Min (0x0UL)
  #define RADIO_INTENCLR10_CCABUSY_Max (0x1UL)
  #define RADIO_INTENCLR10_CCABUSY_Clear (0x1UL)
  #define RADIO_INTENCLR10_CCABUSY_Disabled (0x0UL)
  #define RADIO_INTENCLR10_CCABUSY_Enabled (0x1UL)

/* CCASTOPPED @Bit 19 : Write '1' to disable interrupt for event CCASTOPPED */
  #define RADIO_INTENCLR10_CCASTOPPED_Pos (19UL)
  #define RADIO_INTENCLR10_CCASTOPPED_Msk (0x1UL << RADIO_INTENCLR10_CCASTOPPED_Pos)
  #define RADIO_INTENCLR10_CCASTOPPED_Min (0x0UL)
  #define RADIO_INTENCLR10_CCASTOPPED_Max (0x1UL)
  #define RADIO_INTENCLR10_CCASTOPPED_Clear (0x1UL)
  #define RADIO_INTENCLR10_CCASTOPPED_Disabled (0x0UL)
  #define RADIO_INTENCLR10_CCASTOPPED_Enabled (0x1UL)

/* RATEBOOST @Bit 20 : Write '1' to disable interrupt for event RATEBOOST */
  #define RADIO_INTENCLR10_RATEBOOST_Pos (20UL)
  #define RADIO_INTENCLR10_RATEBOOST_Msk (0x1UL << RADIO_INTENCLR10_RATEBOOST_Pos)
  #define RADIO_INTENCLR10_RATEBOOST_Min (0x0UL)
  #define RADIO_INTENCLR10_RATEBOOST_Max (0x1UL)
  #define RADIO_INTENCLR10_RATEBOOST_Clear (0x1UL)
  #define RADIO_INTENCLR10_RATEBOOST_Disabled (0x0UL)
  #define RADIO_INTENCLR10_RATEBOOST_Enabled (0x1UL)

/* MHRMATCH @Bit 21 : Write '1' to disable interrupt for event MHRMATCH */
  #define RADIO_INTENCLR10_MHRMATCH_Pos (21UL)
  #define RADIO_INTENCLR10_MHRMATCH_Msk (0x1UL << RADIO_INTENCLR10_MHRMATCH_Pos)
  #define RADIO_INTENCLR10_MHRMATCH_Min (0x0UL)
  #define RADIO_INTENCLR10_MHRMATCH_Max (0x1UL)
  #define RADIO_INTENCLR10_MHRMATCH_Clear (0x1UL)
  #define RADIO_INTENCLR10_MHRMATCH_Disabled (0x0UL)
  #define RADIO_INTENCLR10_MHRMATCH_Enabled (0x1UL)

/* SYNC @Bit 22 : Write '1' to disable interrupt for event SYNC */
  #define RADIO_INTENCLR10_SYNC_Pos (22UL)
  #define RADIO_INTENCLR10_SYNC_Msk (0x1UL << RADIO_INTENCLR10_SYNC_Pos)
  #define RADIO_INTENCLR10_SYNC_Min (0x0UL)
  #define RADIO_INTENCLR10_SYNC_Max (0x1UL)
  #define RADIO_INTENCLR10_SYNC_Clear (0x1UL)
  #define RADIO_INTENCLR10_SYNC_Disabled (0x0UL)
  #define RADIO_INTENCLR10_SYNC_Enabled (0x1UL)

/* CTEPRESENT @Bit 23 : Write '1' to disable interrupt for event CTEPRESENT */
  #define RADIO_INTENCLR10_CTEPRESENT_Pos (23UL)
  #define RADIO_INTENCLR10_CTEPRESENT_Msk (0x1UL << RADIO_INTENCLR10_CTEPRESENT_Pos)
  #define RADIO_INTENCLR10_CTEPRESENT_Min (0x0UL)
  #define RADIO_INTENCLR10_CTEPRESENT_Max (0x1UL)
  #define RADIO_INTENCLR10_CTEPRESENT_Clear (0x1UL)
  #define RADIO_INTENCLR10_CTEPRESENT_Disabled (0x0UL)
  #define RADIO_INTENCLR10_CTEPRESENT_Enabled (0x1UL)


/* RADIO_MODE: Data rate and modulation */
  #define RADIO_MODE_ResetValue (0x00000000UL)

/* MODE @Bits 0..3 : Radio data rate and modulation setting. The radio supports frequency-shift keying (FSK) modulation. */
  #define RADIO_MODE_MODE_Pos (0UL)
  #define RADIO_MODE_MODE_Msk (0xFUL << RADIO_MODE_MODE_Pos)
  #define RADIO_MODE_MODE_Min (0x0UL)
  #define RADIO_MODE_MODE_Max (0xFUL)
  #define RADIO_MODE_MODE_Nrf_1Mbit (0x0UL)
  #define RADIO_MODE_MODE_Nrf_2Mbit (0x1UL)
  #define RADIO_MODE_MODE_Ble_1Mbit (0x3UL)
  #define RADIO_MODE_MODE_Ble_2Mbit (0x4UL)
  #define RADIO_MODE_MODE_Ble_LR125Kbit (0x5UL)
  #define RADIO_MODE_MODE_Ble_LR500Kbit (0x6UL)
  #define RADIO_MODE_MODE_Nrf_4Mbit_0BT6 (0x9UL)
  #define RADIO_MODE_MODE_Nrf_4Mbit_0BT4 (0xAUL)
  #define RADIO_MODE_MODE_Ieee802154_250Kbit (0xFUL)


/* RADIO_STATE: Current radio state */
  #define RADIO_STATE_ResetValue (0x00000000UL)

/* STATE @Bits 0..3 : Current radio state */
  #define RADIO_STATE_STATE_Pos (0UL)
  #define RADIO_STATE_STATE_Msk (0xFUL << RADIO_STATE_STATE_Pos)
  #define RADIO_STATE_STATE_Min (0x0UL)
  #define RADIO_STATE_STATE_Max (0xCUL)
  #define RADIO_STATE_STATE_Disabled (0x0UL)
  #define RADIO_STATE_STATE_RxRu (0x1UL)
  #define RADIO_STATE_STATE_RxIdle (0x2UL)
  #define RADIO_STATE_STATE_Rx (0x3UL)
  #define RADIO_STATE_STATE_RxDisable (0x4UL)
  #define RADIO_STATE_STATE_TxRu (0x9UL)
  #define RADIO_STATE_STATE_TxIdle (0xAUL)
  #define RADIO_STATE_STATE_Tx (0xBUL)
  #define RADIO_STATE_STATE_TxDisable (0xCUL)


/* RADIO_EDCTRL: IEEE 802.15.4 energy detect control */
  #define RADIO_EDCTRL_ResetValue (0x20000000UL)

/* EDCNT @Bits 0..20 : IEEE 802.15.4 energy detect loop count */
  #define RADIO_EDCTRL_EDCNT_Pos (0UL)
  #define RADIO_EDCTRL_EDCNT_Msk (0x1FFFFFUL << RADIO_EDCTRL_EDCNT_Pos)

/* EDPERIOD @Bits 24..29 : IEEE 802.15.4 energy detect period, 4us resolution, no averaging except the IEEE 802.15.4 ED range
                           128us (32) */

  #define RADIO_EDCTRL_EDPERIOD_Pos (24UL)
  #define RADIO_EDCTRL_EDPERIOD_Msk (0x3FUL << RADIO_EDCTRL_EDPERIOD_Pos)
  #define RADIO_EDCTRL_EDPERIOD_Min (0x20UL)
  #define RADIO_EDCTRL_EDPERIOD_Max (0x20UL)
  #define RADIO_EDCTRL_EDPERIOD_Default (0x20UL)


/* RADIO_EDSAMPLE: IEEE 802.15.4 energy detect level */
  #define RADIO_EDSAMPLE_ResetValue (0x00000000UL)

/* EDLVL @Bits 0..7 : IEEE 802.15.4 energy detect level */
  #define RADIO_EDSAMPLE_EDLVL_Pos (0UL)
  #define RADIO_EDSAMPLE_EDLVL_Msk (0xFFUL << RADIO_EDSAMPLE_EDLVL_Pos)
  #define RADIO_EDSAMPLE_EDLVL_Min (0x00UL)
  #define RADIO_EDSAMPLE_EDLVL_Max (0x7FUL)


/* RADIO_CCACTRL: IEEE 802.15.4 clear channel assessment control */
  #define RADIO_CCACTRL_ResetValue (0x052D0000UL)

/* CCAMODE @Bits 0..2 : CCA mode of operation */
  #define RADIO_CCACTRL_CCAMODE_Pos (0UL)
  #define RADIO_CCACTRL_CCAMODE_Msk (0x7UL << RADIO_CCACTRL_CCAMODE_Pos)
  #define RADIO_CCACTRL_CCAMODE_Min (0x0UL)
  #define RADIO_CCACTRL_CCAMODE_Max (0x4UL)
  #define RADIO_CCACTRL_CCAMODE_EdMode (0x0UL)
  #define RADIO_CCACTRL_CCAMODE_CarrierMode (0x1UL)
  #define RADIO_CCACTRL_CCAMODE_CarrierAndEdMode (0x2UL)
  #define RADIO_CCACTRL_CCAMODE_CarrierOrEdMode (0x3UL)
  #define RADIO_CCACTRL_CCAMODE_EdModeTest1 (0x4UL)  /*!< Energy above threshold test mode that will abort when first ED
                                                          measurement over threshold is seen. No averaging.*/

/* CCAEDTHRES @Bits 8..15 : CCA energy busy threshold. Used in all the CCA modes except CarrierMode. */
  #define RADIO_CCACTRL_CCAEDTHRES_Pos (8UL)
  #define RADIO_CCACTRL_CCAEDTHRES_Msk (0xFFUL << RADIO_CCACTRL_CCAEDTHRES_Pos)

/* CCACORRTHRES @Bits 16..23 : CCA correlator busy threshold. Only relevant to CarrierMode, CarrierAndEdMode, and
                               CarrierOrEdMode. */

  #define RADIO_CCACTRL_CCACORRTHRES_Pos (16UL)
  #define RADIO_CCACTRL_CCACORRTHRES_Msk (0xFFUL << RADIO_CCACTRL_CCACORRTHRES_Pos)

/* CCACORRCNT @Bits 24..31 : Limit for occurances above CCACORRTHRES. When not equal to zero the corrolator based signal detect
                             is enabled. */

  #define RADIO_CCACTRL_CCACORRCNT_Pos (24UL)
  #define RADIO_CCACTRL_CCACORRCNT_Msk (0xFFUL << RADIO_CCACTRL_CCACORRCNT_Pos)


/* RADIO_DATAWHITE: Data whitening configuration */
  #define RADIO_DATAWHITE_ResetValue (0x00890040UL)

/* IV @Bits 0..8 : Whitening initial value */
  #define RADIO_DATAWHITE_IV_Pos (0UL)
  #define RADIO_DATAWHITE_IV_Msk (0x1FFUL << RADIO_DATAWHITE_IV_Pos)

/* POLY @Bits 16..25 : Whitening polynomial */
  #define RADIO_DATAWHITE_POLY_Pos (16UL)
  #define RADIO_DATAWHITE_POLY_Msk (0x3FFUL << RADIO_DATAWHITE_POLY_Pos)


/* RADIO_TIMING: Timing */
  #define RADIO_TIMING_ResetValue (0x00000001UL)

/* RU @Bit 0 : Ramp-up time */
  #define RADIO_TIMING_RU_Pos (0UL)
  #define RADIO_TIMING_RU_Msk (0x1UL << RADIO_TIMING_RU_Pos)
  #define RADIO_TIMING_RU_Min (0x0UL)
  #define RADIO_TIMING_RU_Max (0x1UL)
  #define RADIO_TIMING_RU_Legacy (0x0UL)
  #define RADIO_TIMING_RU_Fast (0x1UL)


/* RADIO_FREQUENCY: Frequency */
  #define RADIO_FREQUENCY_ResetValue (0x00000002UL)

/* FREQUENCY @Bits 0..6 : Radio channel frequency. Frequency = 2400 + FREQUENCY (MHz). */
  #define RADIO_FREQUENCY_FREQUENCY_Pos (0UL)
  #define RADIO_FREQUENCY_FREQUENCY_Msk (0x7FUL << RADIO_FREQUENCY_FREQUENCY_Pos)

/* MAP @Bit 8 : Channel map selection. 0: Channel map between 2400 MHZ to 2500 MHz, Frequency = 2400 + FREQUENCY (MHz). 1:
                Channel map between 2360 MHZ to 2460 MHz, Frequency = 2360 + FREQUENCY (MHz). */

  #define RADIO_FREQUENCY_MAP_Pos (8UL)
  #define RADIO_FREQUENCY_MAP_Msk (0x1UL << RADIO_FREQUENCY_MAP_Pos)


/* RADIO_TXPOWER: Output power */
  #define RADIO_TXPOWER_ResetValue (0x00000013UL)

/* TXPOWER @Bits 0..10 : RADIO output power */
  #define RADIO_TXPOWER_TXPOWER_Pos (0UL)
  #define RADIO_TXPOWER_TXPOWER_Msk (0x7FFUL << RADIO_TXPOWER_TXPOWER_Pos)
  #define RADIO_TXPOWER_TXPOWER_Min (0x1UL)
  #define RADIO_TXPOWER_TXPOWER_Max (0x130UL)
  #define RADIO_TXPOWER_TXPOWER_MaxdBm (0x03FUL)
  #define RADIO_TXPOWER_TXPOWER_Pos8dBm (0x03FUL)
  #define RADIO_TXPOWER_TXPOWER_Pos7dBm (0x039UL)
  #define RADIO_TXPOWER_TXPOWER_Pos6dBm (0x033UL)
  #define RADIO_TXPOWER_TXPOWER_Pos5dBm (0x02DUL)
  #define RADIO_TXPOWER_TXPOWER_Pos4dBm (0x028UL)
  #define RADIO_TXPOWER_TXPOWER_Pos3dBm (0x023UL)
  #define RADIO_TXPOWER_TXPOWER_Pos2dBm (0x01FUL)
  #define RADIO_TXPOWER_TXPOWER_Pos1dBm (0x01BUL)
  #define RADIO_TXPOWER_TXPOWER_0dBm (0x018UL)
  #define RADIO_TXPOWER_TXPOWER_Neg1dBm (0x015UL)
  #define RADIO_TXPOWER_TXPOWER_Neg2dBm (0x013UL)
  #define RADIO_TXPOWER_TXPOWER_Neg3dBm (0x011UL)
  #define RADIO_TXPOWER_TXPOWER_Neg4dBm (0x00FUL)
  #define RADIO_TXPOWER_TXPOWER_Neg5dBm (0x00DUL)
  #define RADIO_TXPOWER_TXPOWER_Neg6dBm (0x00BUL)
  #define RADIO_TXPOWER_TXPOWER_Neg7dBm (0x00AUL)
  #define RADIO_TXPOWER_TXPOWER_Neg8dBm (0x009UL)
  #define RADIO_TXPOWER_TXPOWER_Neg9dBm (0x008UL)
  #define RADIO_TXPOWER_TXPOWER_Neg10dBm (0x007UL)
  #define RADIO_TXPOWER_TXPOWER_Neg12dBm (0x006UL)
  #define RADIO_TXPOWER_TXPOWER_Neg14dBm (0x005UL)
  #define RADIO_TXPOWER_TXPOWER_Neg16dBm (0x004UL)
  #define RADIO_TXPOWER_TXPOWER_Neg18dBm (0x003UL)
  #define RADIO_TXPOWER_TXPOWER_Neg20dBm (0x002UL)
  #define RADIO_TXPOWER_TXPOWER_Neg22dBm (0x002UL)
  #define RADIO_TXPOWER_TXPOWER_Neg28dBm (0x001UL)
  #define RADIO_TXPOWER_TXPOWER_Neg40dBm (0x130UL)
  #define RADIO_TXPOWER_TXPOWER_Neg46dBm (0x110UL)
  #define RADIO_TXPOWER_TXPOWER_MindBm (0x110UL)


/* RADIO_TIFS: Interframe spacing in us */
  #define RADIO_TIFS_ResetValue (0x00000000UL)

/* TIFS @Bits 0..9 : Interframe spacing in us. Interframe space is the time interval between two consecutive packets. It is
                     defined as the time, in microseconds, from the end of the last bit of the previous packet to the start of
                     the first bit of the subsequent packet. */

  #define RADIO_TIFS_TIFS_Pos (0UL)
  #define RADIO_TIFS_TIFS_Msk (0x3FFUL << RADIO_TIFS_TIFS_Pos)


/* RADIO_RSSISAMPLE: RSSI sample */
  #define RADIO_RSSISAMPLE_ResetValue (0x0000007FUL)

/* RSSISAMPLE @Bits 0..6 : RSSI sample result. The value of this register is read as a positive value while the actual received
                           signal strength is a negative value. Actual received signal strength is therefore as follows:
                           received signal strength = -A dBm. */

  #define RADIO_RSSISAMPLE_RSSISAMPLE_Pos (0UL)
  #define RADIO_RSSISAMPLE_RSSISAMPLE_Msk (0x7FUL << RADIO_RSSISAMPLE_RSSISAMPLE_Pos)


/* RADIO_FECONFIG: Config register */
  #define RADIO_FECONFIG_ResetValue (0x10800005UL)

/* SCALERMODE @Bit 20 : Mode for narrow scaling output. */
  #define RADIO_FECONFIG_SCALERMODE_Pos (20UL)
  #define RADIO_FECONFIG_SCALERMODE_Msk (0x1UL << RADIO_FECONFIG_SCALERMODE_Pos)
  #define RADIO_FECONFIG_SCALERMODE_Min (0x0UL)
  #define RADIO_FECONFIG_SCALERMODE_Max (0x1UL)
  #define RADIO_FECONFIG_SCALERMODE_Disabled (0x0UL)
  #define RADIO_FECONFIG_SCALERMODE_Enabled (0x1UL)


/* RADIO_DFEMODE: Whether to use Angle-of-Arrival (AOA) or Angle-of-Departure (AOD) */
  #define RADIO_DFEMODE_ResetValue (0x00000000UL)

/* DFEOPMODE @Bits 0..1 : Direction finding operation mode */
  #define RADIO_DFEMODE_DFEOPMODE_Pos (0UL)
  #define RADIO_DFEMODE_DFEOPMODE_Msk (0x3UL << RADIO_DFEMODE_DFEOPMODE_Pos)
  #define RADIO_DFEMODE_DFEOPMODE_Min (0x0UL)
  #define RADIO_DFEMODE_DFEOPMODE_Max (0x3UL)
  #define RADIO_DFEMODE_DFEOPMODE_Disabled (0x0UL)
  #define RADIO_DFEMODE_DFEOPMODE_AoD (0x2UL)
  #define RADIO_DFEMODE_DFEOPMODE_AoA (0x3UL)


/* RADIO_DFESTATUS: DFE status information */
  #define RADIO_DFESTATUS_ResetValue (0x00000000UL)

/* SWITCHINGSTATE @Bits 0..2 : Internal state of switching state machine */
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Pos (0UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Msk (0x7UL << RADIO_DFESTATUS_SWITCHINGSTATE_Pos) /*!< Bit mask of SWITCHINGSTATE
                                                                            field.*/
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Min (0x0UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Max (0x5UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Idle (0x0UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Offset (0x1UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Guard (0x2UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Ref (0x3UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Switching (0x4UL)
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Ending (0x5UL)

/* SAMPLINGSTATE @Bit 4 : Internal state of sampling state machine */
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Pos (4UL)
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Msk (0x1UL << RADIO_DFESTATUS_SAMPLINGSTATE_Pos)
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Min (0x0UL)
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Max (0x1UL)
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Idle (0x0UL)
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Sampling (0x1UL)


/* RADIO_DFECTRL1: Various configuration for Direction finding */
  #define RADIO_DFECTRL1_ResetValue (0x00023282UL)

/* NUMBEROF8US @Bits 0..5 : Length of the AoA/AoD procedure in number of 8 us units */
  #define RADIO_DFECTRL1_NUMBEROF8US_Pos (0UL)
  #define RADIO_DFECTRL1_NUMBEROF8US_Msk (0x3FUL << RADIO_DFECTRL1_NUMBEROF8US_Pos)

/* DFEINEXTENSION @Bit 7 : Add CTE extension and do antenna switching/sampling in this extension */
  #define RADIO_DFECTRL1_DFEINEXTENSION_Pos (7UL)
  #define RADIO_DFECTRL1_DFEINEXTENSION_Msk (0x1UL << RADIO_DFECTRL1_DFEINEXTENSION_Pos)
  #define RADIO_DFECTRL1_DFEINEXTENSION_Min (0x0UL)
  #define RADIO_DFECTRL1_DFEINEXTENSION_Max (0x1UL)
  #define RADIO_DFECTRL1_DFEINEXTENSION_CRC (0x1UL)
  #define RADIO_DFECTRL1_DFEINEXTENSION_Payload (0x0UL)

/* TSWITCHSPACING @Bits 8..10 : Interval between every time the antenna is changed in the SWITCHING state */
  #define RADIO_DFECTRL1_TSWITCHSPACING_Pos (8UL)
  #define RADIO_DFECTRL1_TSWITCHSPACING_Msk (0x7UL << RADIO_DFECTRL1_TSWITCHSPACING_Pos)
  #define RADIO_DFECTRL1_TSWITCHSPACING_Min (0x1UL)
  #define RADIO_DFECTRL1_TSWITCHSPACING_Max (0x3UL)
  #define RADIO_DFECTRL1_TSWITCHSPACING_4us (0x1UL)
  #define RADIO_DFECTRL1_TSWITCHSPACING_2us (0x2UL)
  #define RADIO_DFECTRL1_TSWITCHSPACING_1us (0x3UL)

/* TSAMPLESPACINGREF @Bits 12..14 : Interval between samples in the REFERENCE period */
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_Pos (12UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_Msk (0x7UL << RADIO_DFECTRL1_TSAMPLESPACINGREF_Pos) /*!< Bit mask of
                                                                            TSAMPLESPACINGREF field.*/
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_Min (0x1UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_Max (0x6UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_4us (0x1UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_2us (0x2UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_1us (0x3UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_500ns (0x4UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_250ns (0x5UL)
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_125ns (0x6UL)

/* SAMPLETYPE @Bit 15 : Whether to sample I/Q or magnitude/phase */
  #define RADIO_DFECTRL1_SAMPLETYPE_Pos (15UL)
  #define RADIO_DFECTRL1_SAMPLETYPE_Msk (0x1UL << RADIO_DFECTRL1_SAMPLETYPE_Pos)
  #define RADIO_DFECTRL1_SAMPLETYPE_Min (0x0UL)
  #define RADIO_DFECTRL1_SAMPLETYPE_Max (0x1UL)
  #define RADIO_DFECTRL1_SAMPLETYPE_IQ (0x0UL)
  #define RADIO_DFECTRL1_SAMPLETYPE_MagPhase (0x1UL)

/* TSAMPLESPACING @Bits 16..18 : Interval between samples in the SWITCHING period when CTEINLINECTRLEN is 0 */
  #define RADIO_DFECTRL1_TSAMPLESPACING_Pos (16UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_Msk (0x7UL << RADIO_DFECTRL1_TSAMPLESPACING_Pos)
  #define RADIO_DFECTRL1_TSAMPLESPACING_Min (0x1UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_Max (0x6UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_4us (0x1UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_2us (0x2UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_1us (0x3UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_500ns (0x4UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_250ns (0x5UL)
  #define RADIO_DFECTRL1_TSAMPLESPACING_125ns (0x6UL)

/* REPEATPATTERN @Bits 20..23 : Repeat every antenna pattern N times. */
  #define RADIO_DFECTRL1_REPEATPATTERN_Pos (20UL)
  #define RADIO_DFECTRL1_REPEATPATTERN_Msk (0xFUL << RADIO_DFECTRL1_REPEATPATTERN_Pos)
  #define RADIO_DFECTRL1_REPEATPATTERN_Min (0x0UL)
  #define RADIO_DFECTRL1_REPEATPATTERN_Max (0x0UL)
  #define RADIO_DFECTRL1_REPEATPATTERN_NoRepeat (0x0UL)

/* AGCBACKOFFGAIN @Bits 24..27 : Gain will be lowered by the specified number of gain steps at the start of CTE */
  #define RADIO_DFECTRL1_AGCBACKOFFGAIN_Pos (24UL)
  #define RADIO_DFECTRL1_AGCBACKOFFGAIN_Msk (0xFUL << RADIO_DFECTRL1_AGCBACKOFFGAIN_Pos)


/* RADIO_DFECTRL2: Start offset for Direction finding */
  #define RADIO_DFECTRL2_ResetValue (0x00000000UL)

/* TSWITCHOFFSET @Bits 0..12 : Signed value offset after the end of the CRC before starting switching in number of 16M cycles */
  #define RADIO_DFECTRL2_TSWITCHOFFSET_Pos (0UL)
  #define RADIO_DFECTRL2_TSWITCHOFFSET_Msk (0x1FFFUL << RADIO_DFECTRL2_TSWITCHOFFSET_Pos)

/* TSAMPLEOFFSET @Bits 16..27 : Signed value offset before starting sampling in number of 16M cycles relative to the beginning
                                of the REFERENCE state - 12 us after switching start */

  #define RADIO_DFECTRL2_TSAMPLEOFFSET_Pos (16UL)
  #define RADIO_DFECTRL2_TSAMPLEOFFSET_Msk (0xFFFUL << RADIO_DFECTRL2_TSAMPLEOFFSET_Pos)


/* RADIO_SWITCHPATTERN: GPIO patterns to be used for each antenna */
  #define RADIO_SWITCHPATTERN_ResetValue (0x00000000UL)

/* SWITCHPATTERN @Bits 0..7 : Fill array of GPIO patterns for antenna control */
  #define RADIO_SWITCHPATTERN_SWITCHPATTERN_Pos (0UL)
  #define RADIO_SWITCHPATTERN_SWITCHPATTERN_Msk (0xFFUL << RADIO_SWITCHPATTERN_SWITCHPATTERN_Pos) /*!< Bit mask of SWITCHPATTERN
                                                                            field.*/


/* RADIO_CLEARPATTERN: Clear the GPIO pattern array for antenna control */
  #define RADIO_CLEARPATTERN_ResetValue (0x00000000UL)

/* CLEARPATTERN @Bit 0 : Clear the GPIO pattern array for antenna control Behaves as a task register, but does not have PPI nor
                         IRQ */

  #define RADIO_CLEARPATTERN_CLEARPATTERN_Pos (0UL)
  #define RADIO_CLEARPATTERN_CLEARPATTERN_Msk (0x1UL << RADIO_CLEARPATTERN_CLEARPATTERN_Pos) /*!< Bit mask of CLEARPATTERN
                                                                            field.*/


/* RADIO_CRCSTATUS: CRC status */
  #define RADIO_CRCSTATUS_ResetValue (0x00000000UL)

/* CRCSTATUS @Bit 0 : CRC status of packet received */
  #define RADIO_CRCSTATUS_CRCSTATUS_Pos (0UL)
  #define RADIO_CRCSTATUS_CRCSTATUS_Msk (0x1UL << RADIO_CRCSTATUS_CRCSTATUS_Pos)
  #define RADIO_CRCSTATUS_CRCSTATUS_Min (0x0UL)
  #define RADIO_CRCSTATUS_CRCSTATUS_Max (0x1UL)
  #define RADIO_CRCSTATUS_CRCSTATUS_CRCError (0x0UL)
  #define RADIO_CRCSTATUS_CRCSTATUS_CRCOk (0x1UL)


/* RADIO_RXMATCH: Received address */
  #define RADIO_RXMATCH_ResetValue (0x00000000UL)

/* RXMATCH @Bits 0..2 : Received address */
  #define RADIO_RXMATCH_RXMATCH_Pos (0UL)
  #define RADIO_RXMATCH_RXMATCH_Msk (0x7UL << RADIO_RXMATCH_RXMATCH_Pos)


/* RADIO_RXCRC: CRC field of previously received packet */
  #define RADIO_RXCRC_ResetValue (0x00000000UL)

/* RXCRC @Bits 0..23 : CRC field of previously received packet */
  #define RADIO_RXCRC_RXCRC_Pos (0UL)
  #define RADIO_RXCRC_RXCRC_Msk (0xFFFFFFUL << RADIO_RXCRC_RXCRC_Pos)


/* RADIO_DAI: Device address match index */
  #define RADIO_DAI_ResetValue (0x00000000UL)

/* DAI @Bits 0..2 : Device address match index */
  #define RADIO_DAI_DAI_Pos (0UL)
  #define RADIO_DAI_DAI_Msk (0x7UL << RADIO_DAI_DAI_Pos)


/* RADIO_PDUSTAT: Payload status */
  #define RADIO_PDUSTAT_ResetValue (0x00000000UL)

/* PDUSTAT @Bit 0 : Status on payload length vs. PCNF1.MAXLEN */
  #define RADIO_PDUSTAT_PDUSTAT_Pos (0UL)
  #define RADIO_PDUSTAT_PDUSTAT_Msk (0x1UL << RADIO_PDUSTAT_PDUSTAT_Pos)
  #define RADIO_PDUSTAT_PDUSTAT_Min (0x0UL)
  #define RADIO_PDUSTAT_PDUSTAT_Max (0x1UL)
  #define RADIO_PDUSTAT_PDUSTAT_LessThan (0x0UL)
  #define RADIO_PDUSTAT_PDUSTAT_GreaterThan (0x1UL)

/* CISTAT @Bits 1..2 : Status on what rate packet is received with in Long Range */
  #define RADIO_PDUSTAT_CISTAT_Pos (1UL)
  #define RADIO_PDUSTAT_CISTAT_Msk (0x3UL << RADIO_PDUSTAT_CISTAT_Pos)
  #define RADIO_PDUSTAT_CISTAT_Min (0x0UL)
  #define RADIO_PDUSTAT_CISTAT_Max (0x1UL)
  #define RADIO_PDUSTAT_CISTAT_LR125kbit (0x0UL)
  #define RADIO_PDUSTAT_CISTAT_LR500kbit (0x1UL)


/* RADIO_PCNF0: Packet configuration register 0 */
  #define RADIO_PCNF0_ResetValue (0x00000000UL)

/* LFLEN @Bits 0..3 : Length on air of LENGTH field in number of bits. */
  #define RADIO_PCNF0_LFLEN_Pos (0UL)
  #define RADIO_PCNF0_LFLEN_Msk (0xFUL << RADIO_PCNF0_LFLEN_Pos)

/* S0LEN @Bit 8 : Length on air of S0 field in number of bytes. */
  #define RADIO_PCNF0_S0LEN_Pos (8UL)
  #define RADIO_PCNF0_S0LEN_Msk (0x1UL << RADIO_PCNF0_S0LEN_Pos)

/* S1LEN @Bits 16..19 : Length on air of S1 field in number of bits. */
  #define RADIO_PCNF0_S1LEN_Pos (16UL)
  #define RADIO_PCNF0_S1LEN_Msk (0xFUL << RADIO_PCNF0_S1LEN_Pos)

/* S1INCL @Bits 20..21 : Include or exclude S1 field in RAM */
  #define RADIO_PCNF0_S1INCL_Pos (20UL)
  #define RADIO_PCNF0_S1INCL_Msk (0x3UL << RADIO_PCNF0_S1INCL_Pos)
  #define RADIO_PCNF0_S1INCL_Min (0x0UL)
  #define RADIO_PCNF0_S1INCL_Max (0x1UL)
  #define RADIO_PCNF0_S1INCL_Automatic (0x0UL)
  #define RADIO_PCNF0_S1INCL_Include (0x1UL)

/* CILEN @Bits 22..23 : Length of code indicator - long range */
  #define RADIO_PCNF0_CILEN_Pos (22UL)
  #define RADIO_PCNF0_CILEN_Msk (0x3UL << RADIO_PCNF0_CILEN_Pos)

/* PLEN @Bits 24..25 : Length of preamble on air. Decision point: TASKS_START task */
  #define RADIO_PCNF0_PLEN_Pos (24UL)
  #define RADIO_PCNF0_PLEN_Msk (0x3UL << RADIO_PCNF0_PLEN_Pos)
  #define RADIO_PCNF0_PLEN_Min (0x0UL)
  #define RADIO_PCNF0_PLEN_Max (0x3UL)
  #define RADIO_PCNF0_PLEN_8bit (0x0UL)
  #define RADIO_PCNF0_PLEN_16bit (0x1UL)
  #define RADIO_PCNF0_PLEN_32bitZero (0x2UL)
  #define RADIO_PCNF0_PLEN_LongRange (0x3UL)

/* CRCINC @Bit 26 : Indicates if LENGTH field contains CRC or not */
  #define RADIO_PCNF0_CRCINC_Pos (26UL)
  #define RADIO_PCNF0_CRCINC_Msk (0x1UL << RADIO_PCNF0_CRCINC_Pos)
  #define RADIO_PCNF0_CRCINC_Min (0x0UL)
  #define RADIO_PCNF0_CRCINC_Max (0x1UL)
  #define RADIO_PCNF0_CRCINC_Exclude (0x0UL)
  #define RADIO_PCNF0_CRCINC_Include (0x1UL)

/* TERMLEN @Bits 29..30 : Length of TERM field in Long Range operation */
  #define RADIO_PCNF0_TERMLEN_Pos (29UL)
  #define RADIO_PCNF0_TERMLEN_Msk (0x3UL << RADIO_PCNF0_TERMLEN_Pos)


/* RADIO_PCNF1: Packet configuration register 1 */
  #define RADIO_PCNF1_ResetValue (0x00000000UL)

/* MAXLEN @Bits 0..7 : Maximum length of packet payload. If the packet payload is larger than MAXLEN, the radio will truncate
                       the payload to MAXLEN. */

  #define RADIO_PCNF1_MAXLEN_Pos (0UL)
  #define RADIO_PCNF1_MAXLEN_Msk (0xFFUL << RADIO_PCNF1_MAXLEN_Pos)
  #define RADIO_PCNF1_MAXLEN_Min (0x00UL)
  #define RADIO_PCNF1_MAXLEN_Max (0xFFUL)

/* STATLEN @Bits 8..15 : Static length in number of bytes */
  #define RADIO_PCNF1_STATLEN_Pos (8UL)
  #define RADIO_PCNF1_STATLEN_Msk (0xFFUL << RADIO_PCNF1_STATLEN_Pos)
  #define RADIO_PCNF1_STATLEN_Min (0x00UL)
  #define RADIO_PCNF1_STATLEN_Max (0xFFUL)

/* BALEN @Bits 16..18 : Base address length in number of bytes */
  #define RADIO_PCNF1_BALEN_Pos (16UL)
  #define RADIO_PCNF1_BALEN_Msk (0x7UL << RADIO_PCNF1_BALEN_Pos)
  #define RADIO_PCNF1_BALEN_Min (0x1UL)
  #define RADIO_PCNF1_BALEN_Max (0x1UL)

/* ENDIAN @Bit 24 : On-air endianness of packet, this applies to the S0, LENGTH, S1, and the PAYLOAD fields. */
  #define RADIO_PCNF1_ENDIAN_Pos (24UL)
  #define RADIO_PCNF1_ENDIAN_Msk (0x1UL << RADIO_PCNF1_ENDIAN_Pos)
  #define RADIO_PCNF1_ENDIAN_Min (0x0UL)
  #define RADIO_PCNF1_ENDIAN_Max (0x1UL)
  #define RADIO_PCNF1_ENDIAN_Little (0x0UL)
  #define RADIO_PCNF1_ENDIAN_Big (0x1UL)

/* WHITEEN @Bit 25 : Enable or disable packet whitening */
  #define RADIO_PCNF1_WHITEEN_Pos (25UL)
  #define RADIO_PCNF1_WHITEEN_Msk (0x1UL << RADIO_PCNF1_WHITEEN_Pos)
  #define RADIO_PCNF1_WHITEEN_Min (0x0UL)
  #define RADIO_PCNF1_WHITEEN_Max (0x1UL)
  #define RADIO_PCNF1_WHITEEN_Disabled (0x0UL)
  #define RADIO_PCNF1_WHITEEN_Enabled (0x1UL)

/* WHITEOFFSET @Bit 26 : If whitening is enabled S0 can be configured to be excluded from whitening */
  #define RADIO_PCNF1_WHITEOFFSET_Pos (26UL)
  #define RADIO_PCNF1_WHITEOFFSET_Msk (0x1UL << RADIO_PCNF1_WHITEOFFSET_Pos)
  #define RADIO_PCNF1_WHITEOFFSET_Min (0x0UL)
  #define RADIO_PCNF1_WHITEOFFSET_Max (0x1UL)
  #define RADIO_PCNF1_WHITEOFFSET_Include (0x0UL)
  #define RADIO_PCNF1_WHITEOFFSET_Exclude (0x1UL)


/* RADIO_BASE0: Base address 0 */
  #define RADIO_BASE0_ResetValue (0x00000000UL)

/* BASE0 @Bits 0..31 : Base address 0 */
  #define RADIO_BASE0_BASE0_Pos (0UL)
  #define RADIO_BASE0_BASE0_Msk (0xFFFFFFFFUL << RADIO_BASE0_BASE0_Pos)


/* RADIO_BASE1: Base address 1 */
  #define RADIO_BASE1_ResetValue (0x00000000UL)

/* BASE1 @Bits 0..31 : Base address 1 */
  #define RADIO_BASE1_BASE1_Pos (0UL)
  #define RADIO_BASE1_BASE1_Msk (0xFFFFFFFFUL << RADIO_BASE1_BASE1_Pos)


/* RADIO_PREFIX0: Prefixes bytes for logical addresses 0-3 */
  #define RADIO_PREFIX0_ResetValue (0x00000000UL)

/* AP0 @Bits 0..7 : Address prefix 0 */
  #define RADIO_PREFIX0_AP0_Pos (0UL)
  #define RADIO_PREFIX0_AP0_Msk (0xFFUL << RADIO_PREFIX0_AP0_Pos)

/* AP1 @Bits 8..15 : Address prefix 1 */
  #define RADIO_PREFIX0_AP1_Pos (8UL)
  #define RADIO_PREFIX0_AP1_Msk (0xFFUL << RADIO_PREFIX0_AP1_Pos)

/* AP2 @Bits 16..23 : Address prefix 2 */
  #define RADIO_PREFIX0_AP2_Pos (16UL)
  #define RADIO_PREFIX0_AP2_Msk (0xFFUL << RADIO_PREFIX0_AP2_Pos)

/* AP3 @Bits 24..31 : Address prefix 3 */
  #define RADIO_PREFIX0_AP3_Pos (24UL)
  #define RADIO_PREFIX0_AP3_Msk (0xFFUL << RADIO_PREFIX0_AP3_Pos)


/* RADIO_PREFIX1: Prefixes bytes for logical addresses 4-7 */
  #define RADIO_PREFIX1_ResetValue (0x00000000UL)

/* AP4 @Bits 0..7 : Address prefix 4 */
  #define RADIO_PREFIX1_AP4_Pos (0UL)
  #define RADIO_PREFIX1_AP4_Msk (0xFFUL << RADIO_PREFIX1_AP4_Pos)

/* AP5 @Bits 8..15 : Address prefix 5 */
  #define RADIO_PREFIX1_AP5_Pos (8UL)
  #define RADIO_PREFIX1_AP5_Msk (0xFFUL << RADIO_PREFIX1_AP5_Pos)

/* AP6 @Bits 16..23 : Address prefix 6 */
  #define RADIO_PREFIX1_AP6_Pos (16UL)
  #define RADIO_PREFIX1_AP6_Msk (0xFFUL << RADIO_PREFIX1_AP6_Pos)

/* AP7 @Bits 24..31 : Address prefix 7 */
  #define RADIO_PREFIX1_AP7_Pos (24UL)
  #define RADIO_PREFIX1_AP7_Msk (0xFFUL << RADIO_PREFIX1_AP7_Pos)


/* RADIO_TXADDRESS: Transmit address select */
  #define RADIO_TXADDRESS_ResetValue (0x00000000UL)

/* TXADDRESS @Bits 0..2 : Transmit address select */
  #define RADIO_TXADDRESS_TXADDRESS_Pos (0UL)
  #define RADIO_TXADDRESS_TXADDRESS_Msk (0x7UL << RADIO_TXADDRESS_TXADDRESS_Pos)


/* RADIO_RXADDRESSES: Receive address select */
  #define RADIO_RXADDRESSES_ResetValue (0x00000000UL)

/* ADDR0 @Bit 0 : Enable or disable reception on logical address 0 */
  #define RADIO_RXADDRESSES_ADDR0_Pos (0UL)
  #define RADIO_RXADDRESSES_ADDR0_Msk (0x1UL << RADIO_RXADDRESSES_ADDR0_Pos)
  #define RADIO_RXADDRESSES_ADDR0_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR0_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR0_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR0_Enabled (0x1UL)

/* ADDR1 @Bit 1 : Enable or disable reception on logical address 1 */
  #define RADIO_RXADDRESSES_ADDR1_Pos (1UL)
  #define RADIO_RXADDRESSES_ADDR1_Msk (0x1UL << RADIO_RXADDRESSES_ADDR1_Pos)
  #define RADIO_RXADDRESSES_ADDR1_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR1_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR1_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR1_Enabled (0x1UL)

/* ADDR2 @Bit 2 : Enable or disable reception on logical address 2 */
  #define RADIO_RXADDRESSES_ADDR2_Pos (2UL)
  #define RADIO_RXADDRESSES_ADDR2_Msk (0x1UL << RADIO_RXADDRESSES_ADDR2_Pos)
  #define RADIO_RXADDRESSES_ADDR2_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR2_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR2_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR2_Enabled (0x1UL)

/* ADDR3 @Bit 3 : Enable or disable reception on logical address 3 */
  #define RADIO_RXADDRESSES_ADDR3_Pos (3UL)
  #define RADIO_RXADDRESSES_ADDR3_Msk (0x1UL << RADIO_RXADDRESSES_ADDR3_Pos)
  #define RADIO_RXADDRESSES_ADDR3_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR3_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR3_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR3_Enabled (0x1UL)

/* ADDR4 @Bit 4 : Enable or disable reception on logical address 4 */
  #define RADIO_RXADDRESSES_ADDR4_Pos (4UL)
  #define RADIO_RXADDRESSES_ADDR4_Msk (0x1UL << RADIO_RXADDRESSES_ADDR4_Pos)
  #define RADIO_RXADDRESSES_ADDR4_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR4_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR4_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR4_Enabled (0x1UL)

/* ADDR5 @Bit 5 : Enable or disable reception on logical address 5 */
  #define RADIO_RXADDRESSES_ADDR5_Pos (5UL)
  #define RADIO_RXADDRESSES_ADDR5_Msk (0x1UL << RADIO_RXADDRESSES_ADDR5_Pos)
  #define RADIO_RXADDRESSES_ADDR5_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR5_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR5_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR5_Enabled (0x1UL)

/* ADDR6 @Bit 6 : Enable or disable reception on logical address 6 */
  #define RADIO_RXADDRESSES_ADDR6_Pos (6UL)
  #define RADIO_RXADDRESSES_ADDR6_Msk (0x1UL << RADIO_RXADDRESSES_ADDR6_Pos)
  #define RADIO_RXADDRESSES_ADDR6_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR6_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR6_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR6_Enabled (0x1UL)

/* ADDR7 @Bit 7 : Enable or disable reception on logical address 7 */
  #define RADIO_RXADDRESSES_ADDR7_Pos (7UL)
  #define RADIO_RXADDRESSES_ADDR7_Msk (0x1UL << RADIO_RXADDRESSES_ADDR7_Pos)
  #define RADIO_RXADDRESSES_ADDR7_Min (0x0UL)
  #define RADIO_RXADDRESSES_ADDR7_Max (0x1UL)
  #define RADIO_RXADDRESSES_ADDR7_Disabled (0x0UL)
  #define RADIO_RXADDRESSES_ADDR7_Enabled (0x1UL)


/* RADIO_CRCCNF: CRC configuration */
  #define RADIO_CRCCNF_ResetValue (0x00000000UL)

/* LEN @Bits 0..1 : CRC length in number of bytes. */
  #define RADIO_CRCCNF_LEN_Pos (0UL)
  #define RADIO_CRCCNF_LEN_Msk (0x3UL << RADIO_CRCCNF_LEN_Pos)
  #define RADIO_CRCCNF_LEN_Min (0x0UL)
  #define RADIO_CRCCNF_LEN_Max (0x3UL)
  #define RADIO_CRCCNF_LEN_Disabled (0x0UL)
  #define RADIO_CRCCNF_LEN_One (0x1UL)
  #define RADIO_CRCCNF_LEN_Two (0x2UL)
  #define RADIO_CRCCNF_LEN_Three (0x3UL)

/* SKIPADDR @Bits 8..10 : Control whether CRC calculation skips the address field. Other fields can also be skipped. */
  #define RADIO_CRCCNF_SKIPADDR_Pos (8UL)
  #define RADIO_CRCCNF_SKIPADDR_Msk (0x7UL << RADIO_CRCCNF_SKIPADDR_Pos)
  #define RADIO_CRCCNF_SKIPADDR_Min (0x0UL)
  #define RADIO_CRCCNF_SKIPADDR_Max (0x4UL)
  #define RADIO_CRCCNF_SKIPADDR_Include (0x0UL)
  #define RADIO_CRCCNF_SKIPADDR_Skip (0x1UL)
  #define RADIO_CRCCNF_SKIPADDR_Ieee802154 (0x2UL)   /*!< CRC calculation starting at first byte after length field (as per
                                                          802.15.4 standard).*/
  #define RADIO_CRCCNF_SKIPADDR_SkipS0 (0x3UL)
  #define RADIO_CRCCNF_SKIPADDR_SkipS1 (0x4UL)


/* RADIO_CRCPOLY: CRC polynomial */
  #define RADIO_CRCPOLY_ResetValue (0x00000000UL)

/* CRCPOLY @Bits 0..23 : CRC polynomial */
  #define RADIO_CRCPOLY_CRCPOLY_Pos (0UL)
  #define RADIO_CRCPOLY_CRCPOLY_Msk (0xFFFFFFUL << RADIO_CRCPOLY_CRCPOLY_Pos)


/* RADIO_CRCINIT: CRC initial value */
  #define RADIO_CRCINIT_ResetValue (0x00000000UL)

/* CRCINIT @Bits 0..23 : CRC initial value */
  #define RADIO_CRCINIT_CRCINIT_Pos (0UL)
  #define RADIO_CRCINIT_CRCINIT_Msk (0xFFFFFFUL << RADIO_CRCINIT_CRCINIT_Pos)


/* RADIO_DAB: Device address base segment n */
  #define RADIO_DAB_MaxCount (8UL)
  #define RADIO_DAB_MaxIndex (7UL)
  #define RADIO_DAB_MinIndex (0UL)
  #define RADIO_DAB_ResetValue (0x00000000UL)

/* DAB @Bits 0..31 : Device address base segment n */
  #define RADIO_DAB_DAB_Pos (0UL)
  #define RADIO_DAB_DAB_Msk (0xFFFFFFFFUL << RADIO_DAB_DAB_Pos)


/* RADIO_DAP: Device address prefix n */
  #define RADIO_DAP_MaxCount (8UL)
  #define RADIO_DAP_MaxIndex (7UL)
  #define RADIO_DAP_MinIndex (0UL)
  #define RADIO_DAP_ResetValue (0x00000000UL)

/* DAP @Bits 0..15 : Device address prefix n */
  #define RADIO_DAP_DAP_Pos (0UL)
  #define RADIO_DAP_DAP_Msk (0xFFFFUL << RADIO_DAP_DAP_Pos)


/* RADIO_DACNF: Device address match configuration */
  #define RADIO_DACNF_ResetValue (0x00000000UL)

/* ENA0 @Bit 0 : Enable or disable device address matching using device address 0 */
  #define RADIO_DACNF_ENA0_Pos (0UL)
  #define RADIO_DACNF_ENA0_Msk (0x1UL << RADIO_DACNF_ENA0_Pos)
  #define RADIO_DACNF_ENA0_Min (0x0UL)
  #define RADIO_DACNF_ENA0_Max (0x1UL)
  #define RADIO_DACNF_ENA0_Disabled (0x0UL)
  #define RADIO_DACNF_ENA0_Enabled (0x1UL)

/* ENA1 @Bit 1 : Enable or disable device address matching using device address 1 */
  #define RADIO_DACNF_ENA1_Pos (1UL)
  #define RADIO_DACNF_ENA1_Msk (0x1UL << RADIO_DACNF_ENA1_Pos)
  #define RADIO_DACNF_ENA1_Min (0x0UL)
  #define RADIO_DACNF_ENA1_Max (0x1UL)
  #define RADIO_DACNF_ENA1_Disabled (0x0UL)
  #define RADIO_DACNF_ENA1_Enabled (0x1UL)

/* ENA2 @Bit 2 : Enable or disable device address matching using device address 2 */
  #define RADIO_DACNF_ENA2_Pos (2UL)
  #define RADIO_DACNF_ENA2_Msk (0x1UL << RADIO_DACNF_ENA2_Pos)
  #define RADIO_DACNF_ENA2_Min (0x0UL)
  #define RADIO_DACNF_ENA2_Max (0x1UL)
  #define RADIO_DACNF_ENA2_Disabled (0x0UL)
  #define RADIO_DACNF_ENA2_Enabled (0x1UL)

/* ENA3 @Bit 3 : Enable or disable device address matching using device address 3 */
  #define RADIO_DACNF_ENA3_Pos (3UL)
  #define RADIO_DACNF_ENA3_Msk (0x1UL << RADIO_DACNF_ENA3_Pos)
  #define RADIO_DACNF_ENA3_Min (0x0UL)
  #define RADIO_DACNF_ENA3_Max (0x1UL)
  #define RADIO_DACNF_ENA3_Disabled (0x0UL)
  #define RADIO_DACNF_ENA3_Enabled (0x1UL)

/* ENA4 @Bit 4 : Enable or disable device address matching using device address 4 */
  #define RADIO_DACNF_ENA4_Pos (4UL)
  #define RADIO_DACNF_ENA4_Msk (0x1UL << RADIO_DACNF_ENA4_Pos)
  #define RADIO_DACNF_ENA4_Min (0x0UL)
  #define RADIO_DACNF_ENA4_Max (0x1UL)
  #define RADIO_DACNF_ENA4_Disabled (0x0UL)
  #define RADIO_DACNF_ENA4_Enabled (0x1UL)

/* ENA5 @Bit 5 : Enable or disable device address matching using device address 5 */
  #define RADIO_DACNF_ENA5_Pos (5UL)
  #define RADIO_DACNF_ENA5_Msk (0x1UL << RADIO_DACNF_ENA5_Pos)
  #define RADIO_DACNF_ENA5_Min (0x0UL)
  #define RADIO_DACNF_ENA5_Max (0x1UL)
  #define RADIO_DACNF_ENA5_Disabled (0x0UL)
  #define RADIO_DACNF_ENA5_Enabled (0x1UL)

/* ENA6 @Bit 6 : Enable or disable device address matching using device address 6 */
  #define RADIO_DACNF_ENA6_Pos (6UL)
  #define RADIO_DACNF_ENA6_Msk (0x1UL << RADIO_DACNF_ENA6_Pos)
  #define RADIO_DACNF_ENA6_Min (0x0UL)
  #define RADIO_DACNF_ENA6_Max (0x1UL)
  #define RADIO_DACNF_ENA6_Disabled (0x0UL)
  #define RADIO_DACNF_ENA6_Enabled (0x1UL)

/* ENA7 @Bit 7 : Enable or disable device address matching using device address 7 */
  #define RADIO_DACNF_ENA7_Pos (7UL)
  #define RADIO_DACNF_ENA7_Msk (0x1UL << RADIO_DACNF_ENA7_Pos)
  #define RADIO_DACNF_ENA7_Min (0x0UL)
  #define RADIO_DACNF_ENA7_Max (0x1UL)
  #define RADIO_DACNF_ENA7_Disabled (0x0UL)
  #define RADIO_DACNF_ENA7_Enabled (0x1UL)

/* TXADD0 @Bit 8 : TxAdd for device address 0 */
  #define RADIO_DACNF_TXADD0_Pos (8UL)
  #define RADIO_DACNF_TXADD0_Msk (0x1UL << RADIO_DACNF_TXADD0_Pos)

/* TXADD1 @Bit 9 : TxAdd for device address 1 */
  #define RADIO_DACNF_TXADD1_Pos (9UL)
  #define RADIO_DACNF_TXADD1_Msk (0x1UL << RADIO_DACNF_TXADD1_Pos)

/* TXADD2 @Bit 10 : TxAdd for device address 2 */
  #define RADIO_DACNF_TXADD2_Pos (10UL)
  #define RADIO_DACNF_TXADD2_Msk (0x1UL << RADIO_DACNF_TXADD2_Pos)

/* TXADD3 @Bit 11 : TxAdd for device address 3 */
  #define RADIO_DACNF_TXADD3_Pos (11UL)
  #define RADIO_DACNF_TXADD3_Msk (0x1UL << RADIO_DACNF_TXADD3_Pos)

/* TXADD4 @Bit 12 : TxAdd for device address 4 */
  #define RADIO_DACNF_TXADD4_Pos (12UL)
  #define RADIO_DACNF_TXADD4_Msk (0x1UL << RADIO_DACNF_TXADD4_Pos)

/* TXADD5 @Bit 13 : TxAdd for device address 5 */
  #define RADIO_DACNF_TXADD5_Pos (13UL)
  #define RADIO_DACNF_TXADD5_Msk (0x1UL << RADIO_DACNF_TXADD5_Pos)

/* TXADD6 @Bit 14 : TxAdd for device address 6 */
  #define RADIO_DACNF_TXADD6_Pos (14UL)
  #define RADIO_DACNF_TXADD6_Msk (0x1UL << RADIO_DACNF_TXADD6_Pos)

/* TXADD7 @Bit 15 : TxAdd for device address 7 */
  #define RADIO_DACNF_TXADD7_Pos (15UL)
  #define RADIO_DACNF_TXADD7_Msk (0x1UL << RADIO_DACNF_TXADD7_Pos)


/* RADIO_BCC: Bit counter compare */
  #define RADIO_BCC_ResetValue (0x00000000UL)

/* BCC @Bits 0..31 : Bit counter compare */
  #define RADIO_BCC_BCC_Pos (0UL)
  #define RADIO_BCC_BCC_Msk (0xFFFFFFFFUL << RADIO_BCC_BCC_Pos)


/* RADIO_CTESTATUS: CTEInfo parsed from received packet */
  #define RADIO_CTESTATUS_ResetValue (0x00000000UL)

/* CTETIME @Bits 0..4 : CTETime parsed from packet */
  #define RADIO_CTESTATUS_CTETIME_Pos (0UL)
  #define RADIO_CTESTATUS_CTETIME_Msk (0x1FUL << RADIO_CTESTATUS_CTETIME_Pos)

/* RFU @Bit 5 : RFU parsed from packet */
  #define RADIO_CTESTATUS_RFU_Pos (5UL)
  #define RADIO_CTESTATUS_RFU_Msk (0x1UL << RADIO_CTESTATUS_RFU_Pos)

/* CTETYPE @Bits 6..7 : CTEType parsed from packet */
  #define RADIO_CTESTATUS_CTETYPE_Pos (6UL)
  #define RADIO_CTESTATUS_CTETYPE_Msk (0x3UL << RADIO_CTESTATUS_CTETYPE_Pos)


/* RADIO_MHRMATCHCONF: Search pattern configuration */
  #define RADIO_MHRMATCHCONF_ResetValue (0x00000000UL)

/* MHRMATCHCONF @Bits 0..31 : Search pattern configuration */
  #define RADIO_MHRMATCHCONF_MHRMATCHCONF_Pos (0UL)
  #define RADIO_MHRMATCHCONF_MHRMATCHCONF_Msk (0xFFFFFFFFUL << RADIO_MHRMATCHCONF_MHRMATCHCONF_Pos) /*!< Bit mask of
                                                                            MHRMATCHCONF field.*/


/* RADIO_MHRMATCHMASK: Pattern mask */
  #define RADIO_MHRMATCHMASK_ResetValue (0x00000000UL)

/* MHRMATCHMASK @Bits 0..31 : Pattern mask */
  #define RADIO_MHRMATCHMASK_MHRMATCHMASK_Pos (0UL)
  #define RADIO_MHRMATCHMASK_MHRMATCHMASK_Msk (0xFFFFFFFFUL << RADIO_MHRMATCHMASK_MHRMATCHMASK_Pos) /*!< Bit mask of
                                                                            MHRMATCHMASK field.*/


/* RADIO_SFD: IEEE 802.15.4 start of frame delimiter */
  #define RADIO_SFD_ResetValue (0x000000A7UL)

/* SFD @Bits 0..7 : IEEE 802.15.4 start of frame delimiter. Note: the least significant 4 bits of the SFD cannot all be zeros. */
  #define RADIO_SFD_SFD_Pos (0UL)
  #define RADIO_SFD_SFD_Msk (0xFFUL << RADIO_SFD_SFD_Pos)


/* RADIO_CTEINLINECONF: Configuration for CTE inline mode */
  #define RADIO_CTEINLINECONF_ResetValue (0x00002800UL)

/* CTEINLINECTRLEN @Bit 0 : Enable parsing of CTEInfo from received packet in BLE modes */
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Pos (0UL)
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Msk (0x1UL << RADIO_CTEINLINECONF_CTEINLINECTRLEN_Pos) /*!< Bit mask of
                                                                            CTEINLINECTRLEN field.*/
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Min (0x0UL)
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Max (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Enabled (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Disabled (0x0UL)

/* CTEINFOINS1 @Bit 3 : CTEInfo is S1 byte or not */
  #define RADIO_CTEINLINECONF_CTEINFOINS1_Pos (3UL)
  #define RADIO_CTEINLINECONF_CTEINFOINS1_Msk (0x1UL << RADIO_CTEINLINECONF_CTEINFOINS1_Pos) /*!< Bit mask of CTEINFOINS1
                                                                            field.*/
  #define RADIO_CTEINLINECONF_CTEINFOINS1_Min (0x0UL)
  #define RADIO_CTEINLINECONF_CTEINFOINS1_Max (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINFOINS1_InS1 (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINFOINS1_NotInS1 (0x0UL)

/* CTEERRORHANDLING @Bit 4 : Sampling/switching if CRC is not OK */
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Pos (4UL)
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Msk (0x1UL << RADIO_CTEINLINECONF_CTEERRORHANDLING_Pos) /*!< Bit mask of
                                                                            CTEERRORHANDLING field.*/
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Min (0x0UL)
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Max (0x1UL)
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Yes (0x1UL)
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_No (0x0UL)

/* CTETIMEVALIDRANGE @Bits 6..7 : Max range of CTETime */
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Pos (6UL)
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Msk (0x3UL << RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Pos) /*!< Bit mask of
                                                                            CTETIMEVALIDRANGE field.*/
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Min (0x0UL)
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Max (0x2UL)
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_20 (0x0UL) /*!< 20 in 8us unit (default) Set to 20 if parsed CTETime is larger
                                                                han 20*/
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_31 (0x1UL)
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_63 (0x2UL)

/* CTEINLINERXMODE1US @Bits 10..12 : Spacing between samples for the samples in the SWITCHING period when CTEINLINEMODE is set */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Pos (10UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Msk (0x7UL << RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Pos) /*!< Bit mask of
                                                                            CTEINLINERXMODE1US field.*/
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Min (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Max (0x6UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_4us (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_2us (0x2UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_1us (0x3UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_500ns (0x4UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_250ns (0x5UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_125ns (0x6UL)

/* CTEINLINERXMODE2US @Bits 13..15 : Spacing between samples for the samples in the SWITCHING period when CTEINLINEMODE is set */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Pos (13UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Msk (0x7UL << RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Pos) /*!< Bit mask of
                                                                            CTEINLINERXMODE2US field.*/
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Min (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Max (0x6UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_4us (0x1UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_2us (0x2UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_1us (0x3UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_500ns (0x4UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_250ns (0x5UL)
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_125ns (0x6UL)

/* S0CONF @Bits 16..23 : S0 bit pattern to match */
  #define RADIO_CTEINLINECONF_S0CONF_Pos (16UL)
  #define RADIO_CTEINLINECONF_S0CONF_Msk (0xFFUL << RADIO_CTEINLINECONF_S0CONF_Pos)

/* S0MASK @Bits 24..31 : S0 bit mask to set which bit to match */
  #define RADIO_CTEINLINECONF_S0MASK_Pos (24UL)
  #define RADIO_CTEINLINECONF_S0MASK_Msk (0xFFUL << RADIO_CTEINLINECONF_S0MASK_Pos)


/* RADIO_PACKETPTR: Packet pointer */
  #define RADIO_PACKETPTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Data pointer */
  #define RADIO_PACKETPTR_PTR_Pos (0UL)
  #define RADIO_PACKETPTR_PTR_Msk (0xFFFFFFFFUL << RADIO_PACKETPTR_PTR_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                        REGULATORS                                        ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ==================================================== Struct REGULATORS ==================================================== */
/**
  * @brief Voltage regulators
  */
  typedef struct {
    __IM uint32_t RESERVED[320];
    __OM uint32_t SYSTEMOFF;
  } NRF_REGULATORS_Type;

/* REGULATORS_SYSTEMOFF: System OFF register */
  #define REGULATORS_SYSTEMOFF_ResetValue (0x00000000UL)

/* SYSTEMOFF @Bit 0 : Enable System OFF mode */
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Pos (0UL)
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk (0x1UL << REGULATORS_SYSTEMOFF_SYSTEMOFF_Pos)
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Min (0x1UL)
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Max (0x1UL)
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Enter (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           RESET                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct RESET ======================================================= */
/**
  * @brief Reset control
  */
  typedef struct {
    __IM uint32_t RESERVED[384];
    __IOM uint32_t RESETREAS;
  } NRF_RESET_Type;

/* RESET_RESETREAS: Reset reason */
  #define RESET_RESETREAS_ResetValue (0x00000000UL)

/* RESETPIN @Bit 0 : Reset from pin reset detected */
  #define RESET_RESETREAS_RESETPIN_Pos (0UL)
  #define RESET_RESETREAS_RESETPIN_Msk (0x1UL << RESET_RESETREAS_RESETPIN_Pos)
  #define RESET_RESETREAS_RESETPIN_Min (0x0UL)
  #define RESET_RESETREAS_RESETPIN_Max (0x1UL)
  #define RESET_RESETREAS_RESETPIN_NotDetected (0x0UL)
  #define RESET_RESETREAS_RESETPIN_Detected (0x1UL)

/* DOG0 @Bit 1 : Reset from watchdog timer 0 detected */
  #define RESET_RESETREAS_DOG0_Pos (1UL)
  #define RESET_RESETREAS_DOG0_Msk (0x1UL << RESET_RESETREAS_DOG0_Pos)
  #define RESET_RESETREAS_DOG0_Min (0x0UL)
  #define RESET_RESETREAS_DOG0_Max (0x1UL)
  #define RESET_RESETREAS_DOG0_NotDetected (0x0UL)
  #define RESET_RESETREAS_DOG0_Detected (0x1UL)

/* DOG1 @Bit 2 : Reset from watchdog timer 1 detected */
  #define RESET_RESETREAS_DOG1_Pos (2UL)
  #define RESET_RESETREAS_DOG1_Msk (0x1UL << RESET_RESETREAS_DOG1_Pos)
  #define RESET_RESETREAS_DOG1_Min (0x0UL)
  #define RESET_RESETREAS_DOG1_Max (0x1UL)
  #define RESET_RESETREAS_DOG1_NotDetected (0x0UL)
  #define RESET_RESETREAS_DOG1_Detected (0x1UL)

/* CTRLAPSOFT @Bit 3 : Soft reset from CTRL-AP detected */
  #define RESET_RESETREAS_CTRLAPSOFT_Pos (3UL)
  #define RESET_RESETREAS_CTRLAPSOFT_Msk (0x1UL << RESET_RESETREAS_CTRLAPSOFT_Pos)
  #define RESET_RESETREAS_CTRLAPSOFT_Min (0x0UL)
  #define RESET_RESETREAS_CTRLAPSOFT_Max (0x1UL)
  #define RESET_RESETREAS_CTRLAPSOFT_NotDetected (0x0UL)
  #define RESET_RESETREAS_CTRLAPSOFT_Detected (0x1UL)

/* CTRLAPHARD @Bit 4 : Reset due to CTRL-AP hard reset */
  #define RESET_RESETREAS_CTRLAPHARD_Pos (4UL)
  #define RESET_RESETREAS_CTRLAPHARD_Msk (0x1UL << RESET_RESETREAS_CTRLAPHARD_Pos)
  #define RESET_RESETREAS_CTRLAPHARD_Min (0x0UL)
  #define RESET_RESETREAS_CTRLAPHARD_Max (0x1UL)
  #define RESET_RESETREAS_CTRLAPHARD_NotDetected (0x0UL)
  #define RESET_RESETREAS_CTRLAPHARD_Detected (0x1UL)

/* CTRLAPPIN @Bit 5 : Reset due to CTRL-AP pin reset */
  #define RESET_RESETREAS_CTRLAPPIN_Pos (5UL)
  #define RESET_RESETREAS_CTRLAPPIN_Msk (0x1UL << RESET_RESETREAS_CTRLAPPIN_Pos)
  #define RESET_RESETREAS_CTRLAPPIN_Min (0x0UL)
  #define RESET_RESETREAS_CTRLAPPIN_Max (0x1UL)
  #define RESET_RESETREAS_CTRLAPPIN_NotDetected (0x0UL)
  #define RESET_RESETREAS_CTRLAPPIN_Detected (0x1UL)

/* SREQ @Bit 6 : Reset from soft reset detected */
  #define RESET_RESETREAS_SREQ_Pos (6UL)
  #define RESET_RESETREAS_SREQ_Msk (0x1UL << RESET_RESETREAS_SREQ_Pos)
  #define RESET_RESETREAS_SREQ_Min (0x0UL)
  #define RESET_RESETREAS_SREQ_Max (0x1UL)
  #define RESET_RESETREAS_SREQ_NotDetected (0x0UL)
  #define RESET_RESETREAS_SREQ_Detected (0x1UL)

/* LOCKUP @Bit 7 : Reset from CPU lockup detected */
  #define RESET_RESETREAS_LOCKUP_Pos (7UL)
  #define RESET_RESETREAS_LOCKUP_Msk (0x1UL << RESET_RESETREAS_LOCKUP_Pos)
  #define RESET_RESETREAS_LOCKUP_Min (0x0UL)
  #define RESET_RESETREAS_LOCKUP_Max (0x1UL)
  #define RESET_RESETREAS_LOCKUP_NotDetected (0x0UL)
  #define RESET_RESETREAS_LOCKUP_Detected (0x1UL)

/* OFF @Bit 8 : Reset due to wakeup from System OFF mode when wakeup is triggered by DETECT signal from GPIO */
  #define RESET_RESETREAS_OFF_Pos (8UL)
  #define RESET_RESETREAS_OFF_Msk (0x1UL << RESET_RESETREAS_OFF_Pos)
  #define RESET_RESETREAS_OFF_Min (0x0UL)
  #define RESET_RESETREAS_OFF_Max (0x1UL)
  #define RESET_RESETREAS_OFF_NotDetected (0x0UL)
  #define RESET_RESETREAS_OFF_Detected (0x1UL)

/* LPCOMP @Bit 9 : Reset due to wakeup from System OFF mode when wakeup is triggered by ANADETECT signal from LPCOMP */
  #define RESET_RESETREAS_LPCOMP_Pos (9UL)
  #define RESET_RESETREAS_LPCOMP_Msk (0x1UL << RESET_RESETREAS_LPCOMP_Pos)
  #define RESET_RESETREAS_LPCOMP_Min (0x0UL)
  #define RESET_RESETREAS_LPCOMP_Max (0x1UL)
  #define RESET_RESETREAS_LPCOMP_NotDetected (0x0UL)
  #define RESET_RESETREAS_LPCOMP_Detected (0x1UL)

/* DIF @Bit 10 : Reset triggered by Debug Interface */
  #define RESET_RESETREAS_DIF_Pos (10UL)
  #define RESET_RESETREAS_DIF_Msk (0x1UL << RESET_RESETREAS_DIF_Pos)
  #define RESET_RESETREAS_DIF_Min (0x0UL)
  #define RESET_RESETREAS_DIF_Max (0x1UL)
  #define RESET_RESETREAS_DIF_NotDetected (0x0UL)
  #define RESET_RESETREAS_DIF_Detected (0x1UL)

/* GRTC @Bit 11 : Reset due to wakeup from GRTC */
  #define RESET_RESETREAS_GRTC_Pos (11UL)
  #define RESET_RESETREAS_GRTC_Msk (0x1UL << RESET_RESETREAS_GRTC_Pos)
  #define RESET_RESETREAS_GRTC_Min (0x0UL)
  #define RESET_RESETREAS_GRTC_Max (0x1UL)
  #define RESET_RESETREAS_GRTC_NotDetected (0x0UL)
  #define RESET_RESETREAS_GRTC_Detected (0x1UL)

/* NFC @Bit 12 : Reset after wakeup from System OFF mode due to NFC field being detected */
  #define RESET_RESETREAS_NFC_Pos (12UL)
  #define RESET_RESETREAS_NFC_Msk (0x1UL << RESET_RESETREAS_NFC_Pos)
  #define RESET_RESETREAS_NFC_Min (0x0UL)
  #define RESET_RESETREAS_NFC_Max (0x1UL)
  #define RESET_RESETREAS_NFC_NotDetected (0x0UL)
  #define RESET_RESETREAS_NFC_Detected (0x1UL)

/* SECTAMPER @Bit 13 : Reset due to illegal tampering of the device */
  #define RESET_RESETREAS_SECTAMPER_Pos (13UL)
  #define RESET_RESETREAS_SECTAMPER_Msk (0x1UL << RESET_RESETREAS_SECTAMPER_Pos)
  #define RESET_RESETREAS_SECTAMPER_Min (0x0UL)
  #define RESET_RESETREAS_SECTAMPER_Max (0x1UL)
  #define RESET_RESETREAS_SECTAMPER_NotDetected (0x0UL)
  #define RESET_RESETREAS_SECTAMPER_Detected (0x1UL)

/* VBUS @Bit 14 : Reset after wakeup from System OFF mode due to VBUS rising into valid range */
  #define RESET_RESETREAS_VBUS_Pos (14UL)
  #define RESET_RESETREAS_VBUS_Msk (0x1UL << RESET_RESETREAS_VBUS_Pos)
  #define RESET_RESETREAS_VBUS_Min (0x0UL)
  #define RESET_RESETREAS_VBUS_Max (0x1UL)
  #define RESET_RESETREAS_VBUS_NotDetected (0x0UL)
  #define RESET_RESETREAS_VBUS_Detected (0x1UL)

/* LMAC @Bit 16 : Reset from Wi-Fi LMAC watchdog */
  #define RESET_RESETREAS_LMAC_Pos (16UL)
  #define RESET_RESETREAS_LMAC_Msk (0x1UL << RESET_RESETREAS_LMAC_Pos)
  #define RESET_RESETREAS_LMAC_Min (0x0UL)
  #define RESET_RESETREAS_LMAC_Max (0x1UL)
  #define RESET_RESETREAS_LMAC_NotDetected (0x0UL)
  #define RESET_RESETREAS_LMAC_Detected (0x1UL)

/* UMAC @Bit 17 : Reset from Wi-Fi UMAC watchdog */
  #define RESET_RESETREAS_UMAC_Pos (17UL)
  #define RESET_RESETREAS_UMAC_Msk (0x1UL << RESET_RESETREAS_UMAC_Pos)
  #define RESET_RESETREAS_UMAC_Min (0x0UL)
  #define RESET_RESETREAS_UMAC_Max (0x1UL)
  #define RESET_RESETREAS_UMAC_NotDetected (0x0UL)
  #define RESET_RESETREAS_UMAC_Detected (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           SAADC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct SAADC_EVENTS_CH ================================================== */
/**
  * @brief EVENTS_CH [SAADC_EVENTS_CH] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  LIMITH;
  __IOM uint32_t  LIMITL;
} NRF_SAADC_EVENTS_CH_Type;
  #define SAADC_EVENTS_CH_MaxCount (8UL)
  #define SAADC_EVENTS_CH_MaxIndex (7UL)
  #define SAADC_EVENTS_CH_MinIndex (0UL)

/* SAADC_EVENTS_CH_LIMITH: Last results is equal or above CH[n].LIMIT.HIGH */
  #define SAADC_EVENTS_CH_LIMITH_ResetValue (0x00000000UL)

/* LIMITH @Bit 0 : Last results is equal or above CH[n].LIMIT.HIGH */
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Pos (0UL)
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Msk (0x1UL << SAADC_EVENTS_CH_LIMITH_LIMITH_Pos)
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Min (0x0UL)
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Max (0x1UL)
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_NotGenerated (0x0UL)
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Generated (0x1UL)


/* SAADC_EVENTS_CH_LIMITL: Last results is equal or below CH[n].LIMIT.LOW */
  #define SAADC_EVENTS_CH_LIMITL_ResetValue (0x00000000UL)

/* LIMITL @Bit 0 : Last results is equal or below CH[n].LIMIT.LOW */
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Pos (0UL)
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Msk (0x1UL << SAADC_EVENTS_CH_LIMITL_LIMITL_Pos)
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Min (0x0UL)
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Max (0x1UL)
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_NotGenerated (0x0UL)
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Generated (0x1UL)



/* ================================================= Struct SAADC_PUBLISH_CH ================================================= */
/**
  * @brief PUBLISH_CH [SAADC_PUBLISH_CH] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  LIMITH;
  __IOM uint32_t  LIMITL;
} NRF_SAADC_PUBLISH_CH_Type;
  #define SAADC_PUBLISH_CH_MaxCount (8UL)
  #define SAADC_PUBLISH_CH_MaxIndex (7UL)
  #define SAADC_PUBLISH_CH_MinIndex (0UL)

/* SAADC_PUBLISH_CH_LIMITH: Publish configuration for event CH[n].LIMITH */
  #define SAADC_PUBLISH_CH_LIMITH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CH[n].LIMITH will publish to */
  #define SAADC_PUBLISH_CH_LIMITH_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_CH_LIMITH_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_CH_LIMITH_CHIDX_Pos)
  #define SAADC_PUBLISH_CH_LIMITH_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_CH_LIMITH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_CH_LIMITH_EN_Pos (31UL)
  #define SAADC_PUBLISH_CH_LIMITH_EN_Msk (0x1UL << SAADC_PUBLISH_CH_LIMITH_EN_Pos)
  #define SAADC_PUBLISH_CH_LIMITH_EN_Min (0x0UL)
  #define SAADC_PUBLISH_CH_LIMITH_EN_Max (0x1UL)
  #define SAADC_PUBLISH_CH_LIMITH_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_CH_LIMITH_EN_Enabled (0x1UL)


/* SAADC_PUBLISH_CH_LIMITL: Publish configuration for event CH[n].LIMITL */
  #define SAADC_PUBLISH_CH_LIMITL_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CH[n].LIMITL will publish to */
  #define SAADC_PUBLISH_CH_LIMITL_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_CH_LIMITL_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_CH_LIMITL_CHIDX_Pos)
  #define SAADC_PUBLISH_CH_LIMITL_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_CH_LIMITL_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_CH_LIMITL_EN_Pos (31UL)
  #define SAADC_PUBLISH_CH_LIMITL_EN_Msk (0x1UL << SAADC_PUBLISH_CH_LIMITL_EN_Pos)
  #define SAADC_PUBLISH_CH_LIMITL_EN_Min (0x0UL)
  #define SAADC_PUBLISH_CH_LIMITL_EN_Max (0x1UL)
  #define SAADC_PUBLISH_CH_LIMITL_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_CH_LIMITL_EN_Enabled (0x1UL)



/* ==================================================== Struct SAADC_TRIM ==================================================== */
/**
  * @brief TRIM [SAADC_TRIM] (unspecified)
  */
typedef struct {
  __IOM uint32_t  LINCALCOEFF[6];
} NRF_SAADC_TRIM_Type;

/* SAADC_TRIM_LINCALCOEFF: Linearity calibration coefficient */
  #define SAADC_TRIM_LINCALCOEFF_MaxCount (6UL)
  #define SAADC_TRIM_LINCALCOEFF_MaxIndex (5UL)
  #define SAADC_TRIM_LINCALCOEFF_MinIndex (0UL)
  #define SAADC_TRIM_LINCALCOEFF_ResetValue (0x00000000UL)

/* VAL @Bits 0..15 : value */
  #define SAADC_TRIM_LINCALCOEFF_VAL_Pos (0UL)
  #define SAADC_TRIM_LINCALCOEFF_VAL_Msk (0xFFFFUL << SAADC_TRIM_LINCALCOEFF_VAL_Pos)
  #define SAADC_TRIM_LINCALCOEFF_VAL_Min (0x0000UL)
  #define SAADC_TRIM_LINCALCOEFF_VAL_Max (0xFFFFUL)



/* ===================================================== Struct SAADC_CH ===================================================== */
/**
  * @brief CH [SAADC_CH] (unspecified)
  */
typedef struct {
  __IOM uint32_t  PSELP;
  __IOM uint32_t  PSELN;
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  LIMIT;
} NRF_SAADC_CH_Type;
  #define SAADC_CH_MaxCount (8UL)
  #define SAADC_CH_MaxIndex (7UL)
  #define SAADC_CH_MinIndex (0UL)

/* SAADC_CH_PSELP: Input positive pin selection for CH[n] */
  #define SAADC_CH_PSELP_ResetValue (0x00000000UL)

/* PIN @Bits 0..4 : GPIO pin selection. */
  #define SAADC_CH_PSELP_PIN_Pos (0UL)
  #define SAADC_CH_PSELP_PIN_Msk (0x1FUL << SAADC_CH_PSELP_PIN_Pos)

/* PORT @Bits 8..11 : GPIO port selection */
  #define SAADC_CH_PSELP_PORT_Pos (8UL)
  #define SAADC_CH_PSELP_PORT_Msk (0xFUL << SAADC_CH_PSELP_PORT_Pos)

/* INTERNAL @Bits 12..13 : Internal input selection for Analog positive input when CH[n].PSELP.CONNECT = Internal */
  #define SAADC_CH_PSELP_INTERNAL_Pos (12UL)
  #define SAADC_CH_PSELP_INTERNAL_Msk (0x3UL << SAADC_CH_PSELP_INTERNAL_Pos)
  #define SAADC_CH_PSELP_INTERNAL_Min (0x0UL)
  #define SAADC_CH_PSELP_INTERNAL_Max (0x3UL)
  #define SAADC_CH_PSELP_INTERNAL_VDDAO1V8 (0x0UL)
  #define SAADC_CH_PSELP_INTERNAL_VDDAO0V8 (0x1UL)
  #define SAADC_CH_PSELP_INTERNAL_VDDRF (0x2UL)
  #define SAADC_CH_PSELP_INTERNAL_VBAT (0x3UL)

/* CONNECT @Bits 30..31 : Connection */
  #define SAADC_CH_PSELP_CONNECT_Pos (30UL)
  #define SAADC_CH_PSELP_CONNECT_Msk (0x3UL << SAADC_CH_PSELP_CONNECT_Pos)
  #define SAADC_CH_PSELP_CONNECT_Min (0x0UL)
  #define SAADC_CH_PSELP_CONNECT_Max (0x2UL)
  #define SAADC_CH_PSELP_CONNECT_NC (0x0UL)
  #define SAADC_CH_PSELP_CONNECT_AnalogInput (0x1UL)
  #define SAADC_CH_PSELP_CONNECT_Internal (0x2UL)


/* SAADC_CH_PSELN: Input negative pin selection for CH[n] */
  #define SAADC_CH_PSELN_ResetValue (0x00000000UL)

/* PIN @Bits 0..4 : GPIO pin selection. */
  #define SAADC_CH_PSELN_PIN_Pos (0UL)
  #define SAADC_CH_PSELN_PIN_Msk (0x1FUL << SAADC_CH_PSELN_PIN_Pos)

/* PORT @Bits 8..11 : GPIO Port selection */
  #define SAADC_CH_PSELN_PORT_Pos (8UL)
  #define SAADC_CH_PSELN_PORT_Msk (0xFUL << SAADC_CH_PSELN_PORT_Pos)

/* CONNECT @Bits 30..31 : Connection */
  #define SAADC_CH_PSELN_CONNECT_Pos (30UL)
  #define SAADC_CH_PSELN_CONNECT_Msk (0x3UL << SAADC_CH_PSELN_CONNECT_Pos)
  #define SAADC_CH_PSELN_CONNECT_Min (0x0UL)
  #define SAADC_CH_PSELN_CONNECT_Max (0x1UL)
  #define SAADC_CH_PSELN_CONNECT_NC (0x0UL)
  #define SAADC_CH_PSELN_CONNECT_AnalogInput (0x1UL)


/* SAADC_CH_CONFIG: Input configuration for CH[n] */
  #define SAADC_CH_CONFIG_ResetValue (0x00020000UL)

/* GAIN @Bits 8..10 : Gain control */
  #define SAADC_CH_CONFIG_GAIN_Pos (8UL)
  #define SAADC_CH_CONFIG_GAIN_Msk (0x7UL << SAADC_CH_CONFIG_GAIN_Pos)
  #define SAADC_CH_CONFIG_GAIN_Min (0x0UL)
  #define SAADC_CH_CONFIG_GAIN_Max (0x7UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2 (0x0UL)
  #define SAADC_CH_CONFIG_GAIN_Gain1 (0x1UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2_3 (0x2UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2_4 (0x3UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2_5 (0x4UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2_6 (0x5UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2_7 (0x6UL)
  #define SAADC_CH_CONFIG_GAIN_Gain2_8 (0x7UL)

/* BURST @Bit 11 : Enable burst mode */
  #define SAADC_CH_CONFIG_BURST_Pos (11UL)
  #define SAADC_CH_CONFIG_BURST_Msk (0x1UL << SAADC_CH_CONFIG_BURST_Pos)
  #define SAADC_CH_CONFIG_BURST_Min (0x0UL)
  #define SAADC_CH_CONFIG_BURST_Max (0x1UL)
  #define SAADC_CH_CONFIG_BURST_Disabled (0x0UL)
  #define SAADC_CH_CONFIG_BURST_Enabled (0x1UL)      /*!< Burst mode is enabled. SAADC takes 2^OVERSAMPLE number of samples as
                                                          fast as it can, and sends the average to Data RAM.*/

/* REFSEL @Bit 12 : Reference control */
  #define SAADC_CH_CONFIG_REFSEL_Pos (12UL)
  #define SAADC_CH_CONFIG_REFSEL_Msk (0x1UL << SAADC_CH_CONFIG_REFSEL_Pos)
  #define SAADC_CH_CONFIG_REFSEL_Min (0x0UL)
  #define SAADC_CH_CONFIG_REFSEL_Max (0x1UL)
  #define SAADC_CH_CONFIG_REFSEL_Internal (0x0UL)
  #define SAADC_CH_CONFIG_REFSEL_External (0x1UL)

/* MODE @Bit 15 : Enable differential mode */
  #define SAADC_CH_CONFIG_MODE_Pos (15UL)
  #define SAADC_CH_CONFIG_MODE_Msk (0x1UL << SAADC_CH_CONFIG_MODE_Pos)
  #define SAADC_CH_CONFIG_MODE_Min (0x0UL)
  #define SAADC_CH_CONFIG_MODE_Max (0x1UL)
  #define SAADC_CH_CONFIG_MODE_SE (0x0UL)            /*!< Single ended, PSELN will be ignored, negative input to ADC shorted to
                                                          GND*/
  #define SAADC_CH_CONFIG_MODE_Diff (0x1UL)

/* TACQ @Bits 16..24 : Acquisition time, the time the ADC uses to sample the input voltage. Resulting acquistion time is
                       ((TACQ+1) x 125 ns) */

  #define SAADC_CH_CONFIG_TACQ_Pos (16UL)
  #define SAADC_CH_CONFIG_TACQ_Msk (0x1FFUL << SAADC_CH_CONFIG_TACQ_Pos)
  #define SAADC_CH_CONFIG_TACQ_Min (0x001UL)
  #define SAADC_CH_CONFIG_TACQ_Max (0x13FUL)

/* TCONV @Bits 28..30 : Conversion time. Resulting conversion time is ((TCONV+1) x 250 ns) */
  #define SAADC_CH_CONFIG_TCONV_Pos (28UL)
  #define SAADC_CH_CONFIG_TCONV_Msk (0x7UL << SAADC_CH_CONFIG_TCONV_Pos)
  #define SAADC_CH_CONFIG_TCONV_Min (0x1UL)
  #define SAADC_CH_CONFIG_TCONV_Max (0x7UL)


/* SAADC_CH_LIMIT: High/low limits for event monitoring a channel */
  #define SAADC_CH_LIMIT_ResetValue (0x7FFF8000UL)

/* LOW @Bits 0..15 : Low level limit */
  #define SAADC_CH_LIMIT_LOW_Pos (0UL)
  #define SAADC_CH_LIMIT_LOW_Msk (0xFFFFUL << SAADC_CH_LIMIT_LOW_Pos)

/* HIGH @Bits 16..31 : High level limit */
  #define SAADC_CH_LIMIT_HIGH_Pos (16UL)
  #define SAADC_CH_LIMIT_HIGH_Msk (0xFFFFUL << SAADC_CH_LIMIT_HIGH_Pos)



/* =================================================== Struct SAADC_RESULT =================================================== */
/**
  * @brief RESULT [SAADC_RESULT] RESULT EasyDMA channel
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of buffer bytes transferred since last START,
                                                                         updated after the END or STOPPED events*/
  __IM  uint32_t  CURRENTAMOUNT;                     /*!< (@ 0x00000010) Number of buffer bytes transferred since last START,
                                                                         continuously updated*/
} NRF_SAADC_RESULT_Type;

/* SAADC_RESULT_PTR: Data pointer */
  #define SAADC_RESULT_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Data pointer */
  #define SAADC_RESULT_PTR_PTR_Pos (0UL)
  #define SAADC_RESULT_PTR_PTR_Msk (0xFFFFFFFFUL << SAADC_RESULT_PTR_PTR_Pos)


/* SAADC_RESULT_MAXCNT: Maximum number of buffer bytes to transfer */
  #define SAADC_RESULT_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..14 : Maximum number of buffer bytes to transfer */
  #define SAADC_RESULT_MAXCNT_MAXCNT_Pos (0UL)
  #define SAADC_RESULT_MAXCNT_MAXCNT_Msk (0x7FFFUL << SAADC_RESULT_MAXCNT_MAXCNT_Pos)


/* SAADC_RESULT_AMOUNT: Number of buffer bytes transferred since last START, updated after the END or STOPPED events */
  #define SAADC_RESULT_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..14 : Number of buffer bytes transferred since last START, updated after the END or STOPPED events. */
  #define SAADC_RESULT_AMOUNT_AMOUNT_Pos (0UL)
  #define SAADC_RESULT_AMOUNT_AMOUNT_Msk (0x7FFFUL << SAADC_RESULT_AMOUNT_AMOUNT_Pos)


/* SAADC_RESULT_CURRENTAMOUNT: Number of buffer bytes transferred since last START, continuously updated */
  #define SAADC_RESULT_CURRENTAMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..14 : Number of buffer bytes transferred since last START, continuously updated. */
  #define SAADC_RESULT_CURRENTAMOUNT_AMOUNT_Pos (0UL)
  #define SAADC_RESULT_CURRENTAMOUNT_AMOUNT_Msk (0x7FFFUL << SAADC_RESULT_CURRENTAMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT
                                                                            field.*/


/* ====================================================== Struct SAADC ======================================================= */
/**
  * @brief Analog to Digital Converter
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_SAMPLE;                      /*!< (@ 0x00000004) Take one ADC sample, if scan is enabled all channels
                                                                         are sampled. This task requires that SAADC has started,
                                                                         i.e. EVENTS_STARTED was set and EVENTS_STOPPED was
                                                                         not.*/
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_CALIBRATEOFFSET;
    __IM uint32_t RESERVED[28];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_SAMPLE;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_CALIBRATEOFFSET;
    __IM uint32_t RESERVED1[28];
    __IOM uint32_t EVENTS_STARTED;
    __IOM uint32_t EVENTS_END;
    __IOM uint32_t EVENTS_DONE;                      /*!< (@ 0x00000108) A conversion task has been completed. Depending on the
                                                                         mode, multiple conversions might be needed for a result
                                                                         to be transferred to RAM.*/
    __IOM uint32_t EVENTS_RESULTDONE;
    __IOM uint32_t EVENTS_CALIBRATEDONE;
    __IOM uint32_t EVENTS_STOPPED;
    __IOM NRF_SAADC_EVENTS_CH_Type EVENTS_CH[8];
    __IM uint32_t RESERVED2[10];
    __IOM uint32_t PUBLISH_STARTED;
    __IOM uint32_t PUBLISH_END;
    __IOM uint32_t PUBLISH_DONE;
    __IOM uint32_t PUBLISH_RESULTDONE;
    __IOM uint32_t PUBLISH_CALIBRATEDONE;
    __IOM uint32_t PUBLISH_STOPPED;
    __IOM NRF_SAADC_PUBLISH_CH_Type PUBLISH_CH[8];
    __IM uint32_t RESERVED3[74];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED4[61];
    __IM uint32_t STATUS;
    __IM uint32_t RESERVED5[15];
    __IOM NRF_SAADC_TRIM_Type TRIM;
    __IM uint32_t RESERVED6[42];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED7[3];
    __IOM NRF_SAADC_CH_Type CH[8];
    __IM uint32_t RESERVED8[24];
    __IOM uint32_t RESOLUTION;
    __IOM uint32_t OVERSAMPLE;                       /*!< (@ 0x000005F4) Oversampling configuration. OVERSAMPLE should not be
                                                                         combined with SCAN. The RESOLUTION is applied before
                                                                         averaging, thus for high OVERSAMPLE a higher RESOLUTION
                                                                         should be used.*/
    __IOM uint32_t SAMPLERATE;
    __IM uint32_t RESERVED9[11];
    __IOM NRF_SAADC_RESULT_Type RESULT;
    __IM uint32_t RESERVED10[6];
    __IOM uint32_t NOISESHAPE;
  } NRF_SAADC_Type;

/* SAADC_TASKS_START: Start the ADC and prepare the result buffer in RAM */
  #define SAADC_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start the ADC and prepare the result buffer in RAM */
  #define SAADC_TASKS_START_TASKS_START_Pos (0UL)
  #define SAADC_TASKS_START_TASKS_START_Msk (0x1UL << SAADC_TASKS_START_TASKS_START_Pos)
  #define SAADC_TASKS_START_TASKS_START_Min (0x1UL)
  #define SAADC_TASKS_START_TASKS_START_Max (0x1UL)
  #define SAADC_TASKS_START_TASKS_START_Trigger (0x1UL)


/* SAADC_TASKS_SAMPLE: Take one ADC sample, if scan is enabled all channels are sampled. This task requires that SAADC has
                        started, i.e. EVENTS_STARTED was set and EVENTS_STOPPED was not. */

  #define SAADC_TASKS_SAMPLE_ResetValue (0x00000000UL)

/* TASKS_SAMPLE @Bit 0 : Take one ADC sample, if scan is enabled all channels are sampled. This task requires that SAADC has
                         started, i.e. EVENTS_STARTED was set and EVENTS_STOPPED was not. */

  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Pos (0UL)
  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Msk (0x1UL << SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Pos) /*!< Bit mask of TASKS_SAMPLE
                                                                            field.*/
  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Min (0x1UL)
  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Max (0x1UL)
  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Trigger (0x1UL)


/* SAADC_TASKS_STOP: Stop the ADC and terminate any on-going conversion */
  #define SAADC_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop the ADC and terminate any on-going conversion */
  #define SAADC_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define SAADC_TASKS_STOP_TASKS_STOP_Msk (0x1UL << SAADC_TASKS_STOP_TASKS_STOP_Pos)
  #define SAADC_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define SAADC_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define SAADC_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* SAADC_TASKS_CALIBRATEOFFSET: Starts offset auto-calibration */
  #define SAADC_TASKS_CALIBRATEOFFSET_ResetValue (0x00000000UL)

/* TASKS_CALIBRATEOFFSET @Bit 0 : Starts offset auto-calibration */
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Pos (0UL)
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Msk (0x1UL << SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Pos)
                                                                            /*!< Bit mask of TASKS_CALIBRATEOFFSET field.*/
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Min (0x1UL) /*!< Min enumerator value of TASKS_CALIBRATEOFFSET
                                                                            field.*/
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Max (0x1UL) /*!< Max enumerator value of TASKS_CALIBRATEOFFSET
                                                                            field.*/
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Trigger (0x1UL)


/* SAADC_SUBSCRIBE_START: Subscribe configuration for task START */
  #define SAADC_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define SAADC_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define SAADC_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_START_CHIDX_Pos)
  #define SAADC_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define SAADC_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_SUBSCRIBE_START_EN_Pos (31UL)
  #define SAADC_SUBSCRIBE_START_EN_Msk (0x1UL << SAADC_SUBSCRIBE_START_EN_Pos)
  #define SAADC_SUBSCRIBE_START_EN_Min (0x0UL)
  #define SAADC_SUBSCRIBE_START_EN_Max (0x1UL)
  #define SAADC_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define SAADC_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* SAADC_SUBSCRIBE_SAMPLE: Subscribe configuration for task SAMPLE */
  #define SAADC_SUBSCRIBE_SAMPLE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SAMPLE will subscribe to */
  #define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Pos (0UL)
  #define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_SAMPLE_CHIDX_Pos)
  #define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Min (0x00UL)
  #define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Pos (31UL)
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Msk (0x1UL << SAADC_SUBSCRIBE_SAMPLE_EN_Pos)
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Min (0x0UL)
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Max (0x1UL)
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Disabled (0x0UL)
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Enabled (0x1UL)


/* SAADC_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define SAADC_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define SAADC_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define SAADC_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_STOP_CHIDX_Pos)
  #define SAADC_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define SAADC_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define SAADC_SUBSCRIBE_STOP_EN_Msk (0x1UL << SAADC_SUBSCRIBE_STOP_EN_Pos)
  #define SAADC_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define SAADC_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define SAADC_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define SAADC_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* SAADC_SUBSCRIBE_CALIBRATEOFFSET: Subscribe configuration for task CALIBRATEOFFSET */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CALIBRATEOFFSET will subscribe to */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Pos (0UL)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Min (0x00UL)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Pos (31UL)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Msk (0x1UL << SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Pos)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Min (0x0UL)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Max (0x1UL)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Disabled (0x0UL)
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Enabled (0x1UL)


/* SAADC_EVENTS_STARTED: The ADC has started */
  #define SAADC_EVENTS_STARTED_ResetValue (0x00000000UL)

/* EVENTS_STARTED @Bit 0 : The ADC has started */
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL)
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << SAADC_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_STARTED field.*/
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Min (0x0UL)
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Max (0x1UL)
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0x0UL)
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Generated (0x1UL)


/* SAADC_EVENTS_END: The ADC has filled up the Result buffer */
  #define SAADC_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : The ADC has filled up the Result buffer */
  #define SAADC_EVENTS_END_EVENTS_END_Pos (0UL)
  #define SAADC_EVENTS_END_EVENTS_END_Msk (0x1UL << SAADC_EVENTS_END_EVENTS_END_Pos)
  #define SAADC_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define SAADC_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define SAADC_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define SAADC_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* SAADC_EVENTS_DONE: A conversion task has been completed. Depending on the mode, multiple conversions might be needed for a
                       result to be transferred to RAM. */

  #define SAADC_EVENTS_DONE_ResetValue (0x00000000UL)

/* EVENTS_DONE @Bit 0 : A conversion task has been completed. Depending on the mode, multiple conversions might be needed for a
                        result to be transferred to RAM. */

  #define SAADC_EVENTS_DONE_EVENTS_DONE_Pos (0UL)
  #define SAADC_EVENTS_DONE_EVENTS_DONE_Msk (0x1UL << SAADC_EVENTS_DONE_EVENTS_DONE_Pos)
  #define SAADC_EVENTS_DONE_EVENTS_DONE_Min (0x0UL)
  #define SAADC_EVENTS_DONE_EVENTS_DONE_Max (0x1UL)
  #define SAADC_EVENTS_DONE_EVENTS_DONE_NotGenerated (0x0UL)
  #define SAADC_EVENTS_DONE_EVENTS_DONE_Generated (0x1UL)


/* SAADC_EVENTS_RESULTDONE: A result is ready to get transferred to RAM. */
  #define SAADC_EVENTS_RESULTDONE_ResetValue (0x00000000UL)

/* EVENTS_RESULTDONE @Bit 0 : A result is ready to get transferred to RAM. */
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Pos (0UL)
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Msk (0x1UL << SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Pos) /*!< Bit mask
                                                                            of EVENTS_RESULTDONE field.*/
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Min (0x0UL)
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Max (0x1UL)
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_NotGenerated (0x0UL)
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Generated (0x1UL)


/* SAADC_EVENTS_CALIBRATEDONE: Calibration is complete */
  #define SAADC_EVENTS_CALIBRATEDONE_ResetValue (0x00000000UL)

/* EVENTS_CALIBRATEDONE @Bit 0 : Calibration is complete */
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Pos (0UL)
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Msk (0x1UL << SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Pos)
                                                                            /*!< Bit mask of EVENTS_CALIBRATEDONE field.*/
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Min (0x0UL)
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Max (0x1UL)
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_NotGenerated (0x0UL)
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Generated (0x1UL)


/* SAADC_EVENTS_STOPPED: The ADC has stopped */
  #define SAADC_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : The ADC has stopped */
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* SAADC_PUBLISH_STARTED: Publish configuration for event STARTED */
  #define SAADC_PUBLISH_STARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STARTED will publish to */
  #define SAADC_PUBLISH_STARTED_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_STARTED_CHIDX_Pos)
  #define SAADC_PUBLISH_STARTED_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_STARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_STARTED_EN_Pos (31UL)
  #define SAADC_PUBLISH_STARTED_EN_Msk (0x1UL << SAADC_PUBLISH_STARTED_EN_Pos)
  #define SAADC_PUBLISH_STARTED_EN_Min (0x0UL)
  #define SAADC_PUBLISH_STARTED_EN_Max (0x1UL)
  #define SAADC_PUBLISH_STARTED_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_STARTED_EN_Enabled (0x1UL)


/* SAADC_PUBLISH_END: Publish configuration for event END */
  #define SAADC_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SAADC_PUBLISH_END_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_END_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_END_CHIDX_Pos)
  #define SAADC_PUBLISH_END_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_END_EN_Pos (31UL)
  #define SAADC_PUBLISH_END_EN_Msk (0x1UL << SAADC_PUBLISH_END_EN_Pos)
  #define SAADC_PUBLISH_END_EN_Min (0x0UL)
  #define SAADC_PUBLISH_END_EN_Max (0x1UL)
  #define SAADC_PUBLISH_END_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_END_EN_Enabled (0x1UL)


/* SAADC_PUBLISH_DONE: Publish configuration for event DONE */
  #define SAADC_PUBLISH_DONE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DONE will publish to */
  #define SAADC_PUBLISH_DONE_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_DONE_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_DONE_CHIDX_Pos)
  #define SAADC_PUBLISH_DONE_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_DONE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_DONE_EN_Pos (31UL)
  #define SAADC_PUBLISH_DONE_EN_Msk (0x1UL << SAADC_PUBLISH_DONE_EN_Pos)
  #define SAADC_PUBLISH_DONE_EN_Min (0x0UL)
  #define SAADC_PUBLISH_DONE_EN_Max (0x1UL)
  #define SAADC_PUBLISH_DONE_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_DONE_EN_Enabled (0x1UL)


/* SAADC_PUBLISH_RESULTDONE: Publish configuration for event RESULTDONE */
  #define SAADC_PUBLISH_RESULTDONE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RESULTDONE will publish to */
  #define SAADC_PUBLISH_RESULTDONE_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_RESULTDONE_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_RESULTDONE_CHIDX_Pos)
  #define SAADC_PUBLISH_RESULTDONE_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_RESULTDONE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_RESULTDONE_EN_Pos (31UL)
  #define SAADC_PUBLISH_RESULTDONE_EN_Msk (0x1UL << SAADC_PUBLISH_RESULTDONE_EN_Pos)
  #define SAADC_PUBLISH_RESULTDONE_EN_Min (0x0UL)
  #define SAADC_PUBLISH_RESULTDONE_EN_Max (0x1UL)
  #define SAADC_PUBLISH_RESULTDONE_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_RESULTDONE_EN_Enabled (0x1UL)


/* SAADC_PUBLISH_CALIBRATEDONE: Publish configuration for event CALIBRATEDONE */
  #define SAADC_PUBLISH_CALIBRATEDONE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CALIBRATEDONE will publish to */
  #define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Pos)
  #define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Pos (31UL)
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Msk (0x1UL << SAADC_PUBLISH_CALIBRATEDONE_EN_Pos)
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Min (0x0UL)
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Max (0x1UL)
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Enabled (0x1UL)


/* SAADC_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define SAADC_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define SAADC_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define SAADC_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_STOPPED_CHIDX_Pos)
  #define SAADC_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define SAADC_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_STOPPED_EN_Pos (31UL)
  #define SAADC_PUBLISH_STOPPED_EN_Msk (0x1UL << SAADC_PUBLISH_STOPPED_EN_Pos)
  #define SAADC_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define SAADC_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define SAADC_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define SAADC_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* SAADC_INTEN: Enable or disable interrupt */
  #define SAADC_INTEN_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Enable or disable interrupt for event STARTED */
  #define SAADC_INTEN_STARTED_Pos (0UL)
  #define SAADC_INTEN_STARTED_Msk (0x1UL << SAADC_INTEN_STARTED_Pos)
  #define SAADC_INTEN_STARTED_Min (0x0UL)
  #define SAADC_INTEN_STARTED_Max (0x1UL)
  #define SAADC_INTEN_STARTED_Disabled (0x0UL)
  #define SAADC_INTEN_STARTED_Enabled (0x1UL)

/* END @Bit 1 : Enable or disable interrupt for event END */
  #define SAADC_INTEN_END_Pos (1UL)
  #define SAADC_INTEN_END_Msk (0x1UL << SAADC_INTEN_END_Pos)
  #define SAADC_INTEN_END_Min (0x0UL)
  #define SAADC_INTEN_END_Max (0x1UL)
  #define SAADC_INTEN_END_Disabled (0x0UL)
  #define SAADC_INTEN_END_Enabled (0x1UL)

/* DONE @Bit 2 : Enable or disable interrupt for event DONE */
  #define SAADC_INTEN_DONE_Pos (2UL)
  #define SAADC_INTEN_DONE_Msk (0x1UL << SAADC_INTEN_DONE_Pos)
  #define SAADC_INTEN_DONE_Min (0x0UL)
  #define SAADC_INTEN_DONE_Max (0x1UL)
  #define SAADC_INTEN_DONE_Disabled (0x0UL)
  #define SAADC_INTEN_DONE_Enabled (0x1UL)

/* RESULTDONE @Bit 3 : Enable or disable interrupt for event RESULTDONE */
  #define SAADC_INTEN_RESULTDONE_Pos (3UL)
  #define SAADC_INTEN_RESULTDONE_Msk (0x1UL << SAADC_INTEN_RESULTDONE_Pos)
  #define SAADC_INTEN_RESULTDONE_Min (0x0UL)
  #define SAADC_INTEN_RESULTDONE_Max (0x1UL)
  #define SAADC_INTEN_RESULTDONE_Disabled (0x0UL)
  #define SAADC_INTEN_RESULTDONE_Enabled (0x1UL)

/* CALIBRATEDONE @Bit 4 : Enable or disable interrupt for event CALIBRATEDONE */
  #define SAADC_INTEN_CALIBRATEDONE_Pos (4UL)
  #define SAADC_INTEN_CALIBRATEDONE_Msk (0x1UL << SAADC_INTEN_CALIBRATEDONE_Pos)
  #define SAADC_INTEN_CALIBRATEDONE_Min (0x0UL)
  #define SAADC_INTEN_CALIBRATEDONE_Max (0x1UL)
  #define SAADC_INTEN_CALIBRATEDONE_Disabled (0x0UL)
  #define SAADC_INTEN_CALIBRATEDONE_Enabled (0x1UL)

/* STOPPED @Bit 5 : Enable or disable interrupt for event STOPPED */
  #define SAADC_INTEN_STOPPED_Pos (5UL)
  #define SAADC_INTEN_STOPPED_Msk (0x1UL << SAADC_INTEN_STOPPED_Pos)
  #define SAADC_INTEN_STOPPED_Min (0x0UL)
  #define SAADC_INTEN_STOPPED_Max (0x1UL)
  #define SAADC_INTEN_STOPPED_Disabled (0x0UL)
  #define SAADC_INTEN_STOPPED_Enabled (0x1UL)

/* CH0LIMITH @Bit 6 : Enable or disable interrupt for event CH0LIMITH */
  #define SAADC_INTEN_CH0LIMITH_Pos (6UL)
  #define SAADC_INTEN_CH0LIMITH_Msk (0x1UL << SAADC_INTEN_CH0LIMITH_Pos)
  #define SAADC_INTEN_CH0LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH0LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH0LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH0LIMITH_Enabled (0x1UL)

/* CH0LIMITL @Bit 7 : Enable or disable interrupt for event CH0LIMITL */
  #define SAADC_INTEN_CH0LIMITL_Pos (7UL)
  #define SAADC_INTEN_CH0LIMITL_Msk (0x1UL << SAADC_INTEN_CH0LIMITL_Pos)
  #define SAADC_INTEN_CH0LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH0LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH0LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH0LIMITL_Enabled (0x1UL)

/* CH1LIMITH @Bit 8 : Enable or disable interrupt for event CH1LIMITH */
  #define SAADC_INTEN_CH1LIMITH_Pos (8UL)
  #define SAADC_INTEN_CH1LIMITH_Msk (0x1UL << SAADC_INTEN_CH1LIMITH_Pos)
  #define SAADC_INTEN_CH1LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH1LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH1LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH1LIMITH_Enabled (0x1UL)

/* CH1LIMITL @Bit 9 : Enable or disable interrupt for event CH1LIMITL */
  #define SAADC_INTEN_CH1LIMITL_Pos (9UL)
  #define SAADC_INTEN_CH1LIMITL_Msk (0x1UL << SAADC_INTEN_CH1LIMITL_Pos)
  #define SAADC_INTEN_CH1LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH1LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH1LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH1LIMITL_Enabled (0x1UL)

/* CH2LIMITH @Bit 10 : Enable or disable interrupt for event CH2LIMITH */
  #define SAADC_INTEN_CH2LIMITH_Pos (10UL)
  #define SAADC_INTEN_CH2LIMITH_Msk (0x1UL << SAADC_INTEN_CH2LIMITH_Pos)
  #define SAADC_INTEN_CH2LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH2LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH2LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH2LIMITH_Enabled (0x1UL)

/* CH2LIMITL @Bit 11 : Enable or disable interrupt for event CH2LIMITL */
  #define SAADC_INTEN_CH2LIMITL_Pos (11UL)
  #define SAADC_INTEN_CH2LIMITL_Msk (0x1UL << SAADC_INTEN_CH2LIMITL_Pos)
  #define SAADC_INTEN_CH2LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH2LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH2LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH2LIMITL_Enabled (0x1UL)

/* CH3LIMITH @Bit 12 : Enable or disable interrupt for event CH3LIMITH */
  #define SAADC_INTEN_CH3LIMITH_Pos (12UL)
  #define SAADC_INTEN_CH3LIMITH_Msk (0x1UL << SAADC_INTEN_CH3LIMITH_Pos)
  #define SAADC_INTEN_CH3LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH3LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH3LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH3LIMITH_Enabled (0x1UL)

/* CH3LIMITL @Bit 13 : Enable or disable interrupt for event CH3LIMITL */
  #define SAADC_INTEN_CH3LIMITL_Pos (13UL)
  #define SAADC_INTEN_CH3LIMITL_Msk (0x1UL << SAADC_INTEN_CH3LIMITL_Pos)
  #define SAADC_INTEN_CH3LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH3LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH3LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH3LIMITL_Enabled (0x1UL)

/* CH4LIMITH @Bit 14 : Enable or disable interrupt for event CH4LIMITH */
  #define SAADC_INTEN_CH4LIMITH_Pos (14UL)
  #define SAADC_INTEN_CH4LIMITH_Msk (0x1UL << SAADC_INTEN_CH4LIMITH_Pos)
  #define SAADC_INTEN_CH4LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH4LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH4LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH4LIMITH_Enabled (0x1UL)

/* CH4LIMITL @Bit 15 : Enable or disable interrupt for event CH4LIMITL */
  #define SAADC_INTEN_CH4LIMITL_Pos (15UL)
  #define SAADC_INTEN_CH4LIMITL_Msk (0x1UL << SAADC_INTEN_CH4LIMITL_Pos)
  #define SAADC_INTEN_CH4LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH4LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH4LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH4LIMITL_Enabled (0x1UL)

/* CH5LIMITH @Bit 16 : Enable or disable interrupt for event CH5LIMITH */
  #define SAADC_INTEN_CH5LIMITH_Pos (16UL)
  #define SAADC_INTEN_CH5LIMITH_Msk (0x1UL << SAADC_INTEN_CH5LIMITH_Pos)
  #define SAADC_INTEN_CH5LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH5LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH5LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH5LIMITH_Enabled (0x1UL)

/* CH5LIMITL @Bit 17 : Enable or disable interrupt for event CH5LIMITL */
  #define SAADC_INTEN_CH5LIMITL_Pos (17UL)
  #define SAADC_INTEN_CH5LIMITL_Msk (0x1UL << SAADC_INTEN_CH5LIMITL_Pos)
  #define SAADC_INTEN_CH5LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH5LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH5LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH5LIMITL_Enabled (0x1UL)

/* CH6LIMITH @Bit 18 : Enable or disable interrupt for event CH6LIMITH */
  #define SAADC_INTEN_CH6LIMITH_Pos (18UL)
  #define SAADC_INTEN_CH6LIMITH_Msk (0x1UL << SAADC_INTEN_CH6LIMITH_Pos)
  #define SAADC_INTEN_CH6LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH6LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH6LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH6LIMITH_Enabled (0x1UL)

/* CH6LIMITL @Bit 19 : Enable or disable interrupt for event CH6LIMITL */
  #define SAADC_INTEN_CH6LIMITL_Pos (19UL)
  #define SAADC_INTEN_CH6LIMITL_Msk (0x1UL << SAADC_INTEN_CH6LIMITL_Pos)
  #define SAADC_INTEN_CH6LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH6LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH6LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH6LIMITL_Enabled (0x1UL)

/* CH7LIMITH @Bit 20 : Enable or disable interrupt for event CH7LIMITH */
  #define SAADC_INTEN_CH7LIMITH_Pos (20UL)
  #define SAADC_INTEN_CH7LIMITH_Msk (0x1UL << SAADC_INTEN_CH7LIMITH_Pos)
  #define SAADC_INTEN_CH7LIMITH_Min (0x0UL)
  #define SAADC_INTEN_CH7LIMITH_Max (0x1UL)
  #define SAADC_INTEN_CH7LIMITH_Disabled (0x0UL)
  #define SAADC_INTEN_CH7LIMITH_Enabled (0x1UL)

/* CH7LIMITL @Bit 21 : Enable or disable interrupt for event CH7LIMITL */
  #define SAADC_INTEN_CH7LIMITL_Pos (21UL)
  #define SAADC_INTEN_CH7LIMITL_Msk (0x1UL << SAADC_INTEN_CH7LIMITL_Pos)
  #define SAADC_INTEN_CH7LIMITL_Min (0x0UL)
  #define SAADC_INTEN_CH7LIMITL_Max (0x1UL)
  #define SAADC_INTEN_CH7LIMITL_Disabled (0x0UL)
  #define SAADC_INTEN_CH7LIMITL_Enabled (0x1UL)


/* SAADC_INTENSET: Enable interrupt */
  #define SAADC_INTENSET_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to enable interrupt for event STARTED */
  #define SAADC_INTENSET_STARTED_Pos (0UL)
  #define SAADC_INTENSET_STARTED_Msk (0x1UL << SAADC_INTENSET_STARTED_Pos)
  #define SAADC_INTENSET_STARTED_Min (0x0UL)
  #define SAADC_INTENSET_STARTED_Max (0x1UL)
  #define SAADC_INTENSET_STARTED_Set (0x1UL)
  #define SAADC_INTENSET_STARTED_Disabled (0x0UL)
  #define SAADC_INTENSET_STARTED_Enabled (0x1UL)

/* END @Bit 1 : Write '1' to enable interrupt for event END */
  #define SAADC_INTENSET_END_Pos (1UL)
  #define SAADC_INTENSET_END_Msk (0x1UL << SAADC_INTENSET_END_Pos)
  #define SAADC_INTENSET_END_Min (0x0UL)
  #define SAADC_INTENSET_END_Max (0x1UL)
  #define SAADC_INTENSET_END_Set (0x1UL)
  #define SAADC_INTENSET_END_Disabled (0x0UL)
  #define SAADC_INTENSET_END_Enabled (0x1UL)

/* DONE @Bit 2 : Write '1' to enable interrupt for event DONE */
  #define SAADC_INTENSET_DONE_Pos (2UL)
  #define SAADC_INTENSET_DONE_Msk (0x1UL << SAADC_INTENSET_DONE_Pos)
  #define SAADC_INTENSET_DONE_Min (0x0UL)
  #define SAADC_INTENSET_DONE_Max (0x1UL)
  #define SAADC_INTENSET_DONE_Set (0x1UL)
  #define SAADC_INTENSET_DONE_Disabled (0x0UL)
  #define SAADC_INTENSET_DONE_Enabled (0x1UL)

/* RESULTDONE @Bit 3 : Write '1' to enable interrupt for event RESULTDONE */
  #define SAADC_INTENSET_RESULTDONE_Pos (3UL)
  #define SAADC_INTENSET_RESULTDONE_Msk (0x1UL << SAADC_INTENSET_RESULTDONE_Pos)
  #define SAADC_INTENSET_RESULTDONE_Min (0x0UL)
  #define SAADC_INTENSET_RESULTDONE_Max (0x1UL)
  #define SAADC_INTENSET_RESULTDONE_Set (0x1UL)
  #define SAADC_INTENSET_RESULTDONE_Disabled (0x0UL)
  #define SAADC_INTENSET_RESULTDONE_Enabled (0x1UL)

/* CALIBRATEDONE @Bit 4 : Write '1' to enable interrupt for event CALIBRATEDONE */
  #define SAADC_INTENSET_CALIBRATEDONE_Pos (4UL)
  #define SAADC_INTENSET_CALIBRATEDONE_Msk (0x1UL << SAADC_INTENSET_CALIBRATEDONE_Pos)
  #define SAADC_INTENSET_CALIBRATEDONE_Min (0x0UL)
  #define SAADC_INTENSET_CALIBRATEDONE_Max (0x1UL)
  #define SAADC_INTENSET_CALIBRATEDONE_Set (0x1UL)
  #define SAADC_INTENSET_CALIBRATEDONE_Disabled (0x0UL)
  #define SAADC_INTENSET_CALIBRATEDONE_Enabled (0x1UL)

/* STOPPED @Bit 5 : Write '1' to enable interrupt for event STOPPED */
  #define SAADC_INTENSET_STOPPED_Pos (5UL)
  #define SAADC_INTENSET_STOPPED_Msk (0x1UL << SAADC_INTENSET_STOPPED_Pos)
  #define SAADC_INTENSET_STOPPED_Min (0x0UL)
  #define SAADC_INTENSET_STOPPED_Max (0x1UL)
  #define SAADC_INTENSET_STOPPED_Set (0x1UL)
  #define SAADC_INTENSET_STOPPED_Disabled (0x0UL)
  #define SAADC_INTENSET_STOPPED_Enabled (0x1UL)

/* CH0LIMITH @Bit 6 : Write '1' to enable interrupt for event CH0LIMITH */
  #define SAADC_INTENSET_CH0LIMITH_Pos (6UL)
  #define SAADC_INTENSET_CH0LIMITH_Msk (0x1UL << SAADC_INTENSET_CH0LIMITH_Pos)
  #define SAADC_INTENSET_CH0LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH0LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH0LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH0LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH0LIMITH_Enabled (0x1UL)

/* CH0LIMITL @Bit 7 : Write '1' to enable interrupt for event CH0LIMITL */
  #define SAADC_INTENSET_CH0LIMITL_Pos (7UL)
  #define SAADC_INTENSET_CH0LIMITL_Msk (0x1UL << SAADC_INTENSET_CH0LIMITL_Pos)
  #define SAADC_INTENSET_CH0LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH0LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH0LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH0LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH0LIMITL_Enabled (0x1UL)

/* CH1LIMITH @Bit 8 : Write '1' to enable interrupt for event CH1LIMITH */
  #define SAADC_INTENSET_CH1LIMITH_Pos (8UL)
  #define SAADC_INTENSET_CH1LIMITH_Msk (0x1UL << SAADC_INTENSET_CH1LIMITH_Pos)
  #define SAADC_INTENSET_CH1LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH1LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH1LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH1LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH1LIMITH_Enabled (0x1UL)

/* CH1LIMITL @Bit 9 : Write '1' to enable interrupt for event CH1LIMITL */
  #define SAADC_INTENSET_CH1LIMITL_Pos (9UL)
  #define SAADC_INTENSET_CH1LIMITL_Msk (0x1UL << SAADC_INTENSET_CH1LIMITL_Pos)
  #define SAADC_INTENSET_CH1LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH1LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH1LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH1LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH1LIMITL_Enabled (0x1UL)

/* CH2LIMITH @Bit 10 : Write '1' to enable interrupt for event CH2LIMITH */
  #define SAADC_INTENSET_CH2LIMITH_Pos (10UL)
  #define SAADC_INTENSET_CH2LIMITH_Msk (0x1UL << SAADC_INTENSET_CH2LIMITH_Pos)
  #define SAADC_INTENSET_CH2LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH2LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH2LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH2LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH2LIMITH_Enabled (0x1UL)

/* CH2LIMITL @Bit 11 : Write '1' to enable interrupt for event CH2LIMITL */
  #define SAADC_INTENSET_CH2LIMITL_Pos (11UL)
  #define SAADC_INTENSET_CH2LIMITL_Msk (0x1UL << SAADC_INTENSET_CH2LIMITL_Pos)
  #define SAADC_INTENSET_CH2LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH2LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH2LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH2LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH2LIMITL_Enabled (0x1UL)

/* CH3LIMITH @Bit 12 : Write '1' to enable interrupt for event CH3LIMITH */
  #define SAADC_INTENSET_CH3LIMITH_Pos (12UL)
  #define SAADC_INTENSET_CH3LIMITH_Msk (0x1UL << SAADC_INTENSET_CH3LIMITH_Pos)
  #define SAADC_INTENSET_CH3LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH3LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH3LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH3LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH3LIMITH_Enabled (0x1UL)

/* CH3LIMITL @Bit 13 : Write '1' to enable interrupt for event CH3LIMITL */
  #define SAADC_INTENSET_CH3LIMITL_Pos (13UL)
  #define SAADC_INTENSET_CH3LIMITL_Msk (0x1UL << SAADC_INTENSET_CH3LIMITL_Pos)
  #define SAADC_INTENSET_CH3LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH3LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH3LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH3LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH3LIMITL_Enabled (0x1UL)

/* CH4LIMITH @Bit 14 : Write '1' to enable interrupt for event CH4LIMITH */
  #define SAADC_INTENSET_CH4LIMITH_Pos (14UL)
  #define SAADC_INTENSET_CH4LIMITH_Msk (0x1UL << SAADC_INTENSET_CH4LIMITH_Pos)
  #define SAADC_INTENSET_CH4LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH4LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH4LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH4LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH4LIMITH_Enabled (0x1UL)

/* CH4LIMITL @Bit 15 : Write '1' to enable interrupt for event CH4LIMITL */
  #define SAADC_INTENSET_CH4LIMITL_Pos (15UL)
  #define SAADC_INTENSET_CH4LIMITL_Msk (0x1UL << SAADC_INTENSET_CH4LIMITL_Pos)
  #define SAADC_INTENSET_CH4LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH4LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH4LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH4LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH4LIMITL_Enabled (0x1UL)

/* CH5LIMITH @Bit 16 : Write '1' to enable interrupt for event CH5LIMITH */
  #define SAADC_INTENSET_CH5LIMITH_Pos (16UL)
  #define SAADC_INTENSET_CH5LIMITH_Msk (0x1UL << SAADC_INTENSET_CH5LIMITH_Pos)
  #define SAADC_INTENSET_CH5LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH5LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH5LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH5LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH5LIMITH_Enabled (0x1UL)

/* CH5LIMITL @Bit 17 : Write '1' to enable interrupt for event CH5LIMITL */
  #define SAADC_INTENSET_CH5LIMITL_Pos (17UL)
  #define SAADC_INTENSET_CH5LIMITL_Msk (0x1UL << SAADC_INTENSET_CH5LIMITL_Pos)
  #define SAADC_INTENSET_CH5LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH5LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH5LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH5LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH5LIMITL_Enabled (0x1UL)

/* CH6LIMITH @Bit 18 : Write '1' to enable interrupt for event CH6LIMITH */
  #define SAADC_INTENSET_CH6LIMITH_Pos (18UL)
  #define SAADC_INTENSET_CH6LIMITH_Msk (0x1UL << SAADC_INTENSET_CH6LIMITH_Pos)
  #define SAADC_INTENSET_CH6LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH6LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH6LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH6LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH6LIMITH_Enabled (0x1UL)

/* CH6LIMITL @Bit 19 : Write '1' to enable interrupt for event CH6LIMITL */
  #define SAADC_INTENSET_CH6LIMITL_Pos (19UL)
  #define SAADC_INTENSET_CH6LIMITL_Msk (0x1UL << SAADC_INTENSET_CH6LIMITL_Pos)
  #define SAADC_INTENSET_CH6LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH6LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH6LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH6LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH6LIMITL_Enabled (0x1UL)

/* CH7LIMITH @Bit 20 : Write '1' to enable interrupt for event CH7LIMITH */
  #define SAADC_INTENSET_CH7LIMITH_Pos (20UL)
  #define SAADC_INTENSET_CH7LIMITH_Msk (0x1UL << SAADC_INTENSET_CH7LIMITH_Pos)
  #define SAADC_INTENSET_CH7LIMITH_Min (0x0UL)
  #define SAADC_INTENSET_CH7LIMITH_Max (0x1UL)
  #define SAADC_INTENSET_CH7LIMITH_Set (0x1UL)
  #define SAADC_INTENSET_CH7LIMITH_Disabled (0x0UL)
  #define SAADC_INTENSET_CH7LIMITH_Enabled (0x1UL)

/* CH7LIMITL @Bit 21 : Write '1' to enable interrupt for event CH7LIMITL */
  #define SAADC_INTENSET_CH7LIMITL_Pos (21UL)
  #define SAADC_INTENSET_CH7LIMITL_Msk (0x1UL << SAADC_INTENSET_CH7LIMITL_Pos)
  #define SAADC_INTENSET_CH7LIMITL_Min (0x0UL)
  #define SAADC_INTENSET_CH7LIMITL_Max (0x1UL)
  #define SAADC_INTENSET_CH7LIMITL_Set (0x1UL)
  #define SAADC_INTENSET_CH7LIMITL_Disabled (0x0UL)
  #define SAADC_INTENSET_CH7LIMITL_Enabled (0x1UL)


/* SAADC_INTENCLR: Disable interrupt */
  #define SAADC_INTENCLR_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to disable interrupt for event STARTED */
  #define SAADC_INTENCLR_STARTED_Pos (0UL)
  #define SAADC_INTENCLR_STARTED_Msk (0x1UL << SAADC_INTENCLR_STARTED_Pos)
  #define SAADC_INTENCLR_STARTED_Min (0x0UL)
  #define SAADC_INTENCLR_STARTED_Max (0x1UL)
  #define SAADC_INTENCLR_STARTED_Clear (0x1UL)
  #define SAADC_INTENCLR_STARTED_Disabled (0x0UL)
  #define SAADC_INTENCLR_STARTED_Enabled (0x1UL)

/* END @Bit 1 : Write '1' to disable interrupt for event END */
  #define SAADC_INTENCLR_END_Pos (1UL)
  #define SAADC_INTENCLR_END_Msk (0x1UL << SAADC_INTENCLR_END_Pos)
  #define SAADC_INTENCLR_END_Min (0x0UL)
  #define SAADC_INTENCLR_END_Max (0x1UL)
  #define SAADC_INTENCLR_END_Clear (0x1UL)
  #define SAADC_INTENCLR_END_Disabled (0x0UL)
  #define SAADC_INTENCLR_END_Enabled (0x1UL)

/* DONE @Bit 2 : Write '1' to disable interrupt for event DONE */
  #define SAADC_INTENCLR_DONE_Pos (2UL)
  #define SAADC_INTENCLR_DONE_Msk (0x1UL << SAADC_INTENCLR_DONE_Pos)
  #define SAADC_INTENCLR_DONE_Min (0x0UL)
  #define SAADC_INTENCLR_DONE_Max (0x1UL)
  #define SAADC_INTENCLR_DONE_Clear (0x1UL)
  #define SAADC_INTENCLR_DONE_Disabled (0x0UL)
  #define SAADC_INTENCLR_DONE_Enabled (0x1UL)

/* RESULTDONE @Bit 3 : Write '1' to disable interrupt for event RESULTDONE */
  #define SAADC_INTENCLR_RESULTDONE_Pos (3UL)
  #define SAADC_INTENCLR_RESULTDONE_Msk (0x1UL << SAADC_INTENCLR_RESULTDONE_Pos)
  #define SAADC_INTENCLR_RESULTDONE_Min (0x0UL)
  #define SAADC_INTENCLR_RESULTDONE_Max (0x1UL)
  #define SAADC_INTENCLR_RESULTDONE_Clear (0x1UL)
  #define SAADC_INTENCLR_RESULTDONE_Disabled (0x0UL)
  #define SAADC_INTENCLR_RESULTDONE_Enabled (0x1UL)

/* CALIBRATEDONE @Bit 4 : Write '1' to disable interrupt for event CALIBRATEDONE */
  #define SAADC_INTENCLR_CALIBRATEDONE_Pos (4UL)
  #define SAADC_INTENCLR_CALIBRATEDONE_Msk (0x1UL << SAADC_INTENCLR_CALIBRATEDONE_Pos)
  #define SAADC_INTENCLR_CALIBRATEDONE_Min (0x0UL)
  #define SAADC_INTENCLR_CALIBRATEDONE_Max (0x1UL)
  #define SAADC_INTENCLR_CALIBRATEDONE_Clear (0x1UL)
  #define SAADC_INTENCLR_CALIBRATEDONE_Disabled (0x0UL)
  #define SAADC_INTENCLR_CALIBRATEDONE_Enabled (0x1UL)

/* STOPPED @Bit 5 : Write '1' to disable interrupt for event STOPPED */
  #define SAADC_INTENCLR_STOPPED_Pos (5UL)
  #define SAADC_INTENCLR_STOPPED_Msk (0x1UL << SAADC_INTENCLR_STOPPED_Pos)
  #define SAADC_INTENCLR_STOPPED_Min (0x0UL)
  #define SAADC_INTENCLR_STOPPED_Max (0x1UL)
  #define SAADC_INTENCLR_STOPPED_Clear (0x1UL)
  #define SAADC_INTENCLR_STOPPED_Disabled (0x0UL)
  #define SAADC_INTENCLR_STOPPED_Enabled (0x1UL)

/* CH0LIMITH @Bit 6 : Write '1' to disable interrupt for event CH0LIMITH */
  #define SAADC_INTENCLR_CH0LIMITH_Pos (6UL)
  #define SAADC_INTENCLR_CH0LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH0LIMITH_Pos)
  #define SAADC_INTENCLR_CH0LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH0LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH0LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH0LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH0LIMITH_Enabled (0x1UL)

/* CH0LIMITL @Bit 7 : Write '1' to disable interrupt for event CH0LIMITL */
  #define SAADC_INTENCLR_CH0LIMITL_Pos (7UL)
  #define SAADC_INTENCLR_CH0LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH0LIMITL_Pos)
  #define SAADC_INTENCLR_CH0LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH0LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH0LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH0LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH0LIMITL_Enabled (0x1UL)

/* CH1LIMITH @Bit 8 : Write '1' to disable interrupt for event CH1LIMITH */
  #define SAADC_INTENCLR_CH1LIMITH_Pos (8UL)
  #define SAADC_INTENCLR_CH1LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH1LIMITH_Pos)
  #define SAADC_INTENCLR_CH1LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH1LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH1LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH1LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH1LIMITH_Enabled (0x1UL)

/* CH1LIMITL @Bit 9 : Write '1' to disable interrupt for event CH1LIMITL */
  #define SAADC_INTENCLR_CH1LIMITL_Pos (9UL)
  #define SAADC_INTENCLR_CH1LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH1LIMITL_Pos)
  #define SAADC_INTENCLR_CH1LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH1LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH1LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH1LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH1LIMITL_Enabled (0x1UL)

/* CH2LIMITH @Bit 10 : Write '1' to disable interrupt for event CH2LIMITH */
  #define SAADC_INTENCLR_CH2LIMITH_Pos (10UL)
  #define SAADC_INTENCLR_CH2LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH2LIMITH_Pos)
  #define SAADC_INTENCLR_CH2LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH2LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH2LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH2LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH2LIMITH_Enabled (0x1UL)

/* CH2LIMITL @Bit 11 : Write '1' to disable interrupt for event CH2LIMITL */
  #define SAADC_INTENCLR_CH2LIMITL_Pos (11UL)
  #define SAADC_INTENCLR_CH2LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH2LIMITL_Pos)
  #define SAADC_INTENCLR_CH2LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH2LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH2LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH2LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH2LIMITL_Enabled (0x1UL)

/* CH3LIMITH @Bit 12 : Write '1' to disable interrupt for event CH3LIMITH */
  #define SAADC_INTENCLR_CH3LIMITH_Pos (12UL)
  #define SAADC_INTENCLR_CH3LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH3LIMITH_Pos)
  #define SAADC_INTENCLR_CH3LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH3LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH3LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH3LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH3LIMITH_Enabled (0x1UL)

/* CH3LIMITL @Bit 13 : Write '1' to disable interrupt for event CH3LIMITL */
  #define SAADC_INTENCLR_CH3LIMITL_Pos (13UL)
  #define SAADC_INTENCLR_CH3LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH3LIMITL_Pos)
  #define SAADC_INTENCLR_CH3LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH3LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH3LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH3LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH3LIMITL_Enabled (0x1UL)

/* CH4LIMITH @Bit 14 : Write '1' to disable interrupt for event CH4LIMITH */
  #define SAADC_INTENCLR_CH4LIMITH_Pos (14UL)
  #define SAADC_INTENCLR_CH4LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH4LIMITH_Pos)
  #define SAADC_INTENCLR_CH4LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH4LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH4LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH4LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH4LIMITH_Enabled (0x1UL)

/* CH4LIMITL @Bit 15 : Write '1' to disable interrupt for event CH4LIMITL */
  #define SAADC_INTENCLR_CH4LIMITL_Pos (15UL)
  #define SAADC_INTENCLR_CH4LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH4LIMITL_Pos)
  #define SAADC_INTENCLR_CH4LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH4LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH4LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH4LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH4LIMITL_Enabled (0x1UL)

/* CH5LIMITH @Bit 16 : Write '1' to disable interrupt for event CH5LIMITH */
  #define SAADC_INTENCLR_CH5LIMITH_Pos (16UL)
  #define SAADC_INTENCLR_CH5LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH5LIMITH_Pos)
  #define SAADC_INTENCLR_CH5LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH5LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH5LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH5LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH5LIMITH_Enabled (0x1UL)

/* CH5LIMITL @Bit 17 : Write '1' to disable interrupt for event CH5LIMITL */
  #define SAADC_INTENCLR_CH5LIMITL_Pos (17UL)
  #define SAADC_INTENCLR_CH5LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH5LIMITL_Pos)
  #define SAADC_INTENCLR_CH5LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH5LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH5LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH5LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH5LIMITL_Enabled (0x1UL)

/* CH6LIMITH @Bit 18 : Write '1' to disable interrupt for event CH6LIMITH */
  #define SAADC_INTENCLR_CH6LIMITH_Pos (18UL)
  #define SAADC_INTENCLR_CH6LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH6LIMITH_Pos)
  #define SAADC_INTENCLR_CH6LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH6LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH6LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH6LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH6LIMITH_Enabled (0x1UL)

/* CH6LIMITL @Bit 19 : Write '1' to disable interrupt for event CH6LIMITL */
  #define SAADC_INTENCLR_CH6LIMITL_Pos (19UL)
  #define SAADC_INTENCLR_CH6LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH6LIMITL_Pos)
  #define SAADC_INTENCLR_CH6LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH6LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH6LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH6LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH6LIMITL_Enabled (0x1UL)

/* CH7LIMITH @Bit 20 : Write '1' to disable interrupt for event CH7LIMITH */
  #define SAADC_INTENCLR_CH7LIMITH_Pos (20UL)
  #define SAADC_INTENCLR_CH7LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH7LIMITH_Pos)
  #define SAADC_INTENCLR_CH7LIMITH_Min (0x0UL)
  #define SAADC_INTENCLR_CH7LIMITH_Max (0x1UL)
  #define SAADC_INTENCLR_CH7LIMITH_Clear (0x1UL)
  #define SAADC_INTENCLR_CH7LIMITH_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH7LIMITH_Enabled (0x1UL)

/* CH7LIMITL @Bit 21 : Write '1' to disable interrupt for event CH7LIMITL */
  #define SAADC_INTENCLR_CH7LIMITL_Pos (21UL)
  #define SAADC_INTENCLR_CH7LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH7LIMITL_Pos)
  #define SAADC_INTENCLR_CH7LIMITL_Min (0x0UL)
  #define SAADC_INTENCLR_CH7LIMITL_Max (0x1UL)
  #define SAADC_INTENCLR_CH7LIMITL_Clear (0x1UL)
  #define SAADC_INTENCLR_CH7LIMITL_Disabled (0x0UL)
  #define SAADC_INTENCLR_CH7LIMITL_Enabled (0x1UL)


/* SAADC_STATUS: Status */
  #define SAADC_STATUS_ResetValue (0x00000000UL)

/* STATUS @Bit 0 : Status */
  #define SAADC_STATUS_STATUS_Pos (0UL)
  #define SAADC_STATUS_STATUS_Msk (0x1UL << SAADC_STATUS_STATUS_Pos)
  #define SAADC_STATUS_STATUS_Min (0x0UL)
  #define SAADC_STATUS_STATUS_Max (0x1UL)
  #define SAADC_STATUS_STATUS_Ready (0x0UL)
  #define SAADC_STATUS_STATUS_Busy (0x1UL)


/* SAADC_ENABLE: Enable or disable ADC */
  #define SAADC_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable or disable ADC */
  #define SAADC_ENABLE_ENABLE_Pos (0UL)
  #define SAADC_ENABLE_ENABLE_Msk (0x1UL << SAADC_ENABLE_ENABLE_Pos)
  #define SAADC_ENABLE_ENABLE_Min (0x0UL)
  #define SAADC_ENABLE_ENABLE_Max (0x1UL)
  #define SAADC_ENABLE_ENABLE_Disabled (0x0UL)
  #define SAADC_ENABLE_ENABLE_Enabled (0x1UL)


/* SAADC_RESOLUTION: Resolution configuration */
  #define SAADC_RESOLUTION_ResetValue (0x00000001UL)

/* VAL @Bits 0..2 : Set the resolution */
  #define SAADC_RESOLUTION_VAL_Pos (0UL)
  #define SAADC_RESOLUTION_VAL_Msk (0x7UL << SAADC_RESOLUTION_VAL_Pos)
  #define SAADC_RESOLUTION_VAL_Min (0x0UL)
  #define SAADC_RESOLUTION_VAL_Max (0x3UL)
  #define SAADC_RESOLUTION_VAL_8bit (0x0UL)
  #define SAADC_RESOLUTION_VAL_10bit (0x1UL)
  #define SAADC_RESOLUTION_VAL_12bit (0x2UL)
  #define SAADC_RESOLUTION_VAL_14bit (0x3UL)


/* SAADC_OVERSAMPLE: Oversampling configuration. OVERSAMPLE should not be combined with SCAN. The RESOLUTION is applied before
                      averaging, thus for high OVERSAMPLE a higher RESOLUTION should be used. */

  #define SAADC_OVERSAMPLE_ResetValue (0x00000000UL)

/* OVERSAMPLE @Bits 0..3 : Oversample control */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Pos (0UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Msk (0xFUL << SAADC_OVERSAMPLE_OVERSAMPLE_Pos)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Min (0x0UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Max (0x8UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Bypass (0x0UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over2x (0x1UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over4x (0x2UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over8x (0x3UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over16x (0x4UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over32x (0x5UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over64x (0x6UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over128x (0x7UL)
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over256x (0x8UL)


/* SAADC_SAMPLERATE: Controls normal or continuous sample rate */
  #define SAADC_SAMPLERATE_ResetValue (0x00000000UL)

/* CC @Bits 0..10 : Capture and compare value. Sample rate is 16 MHz/CC */
  #define SAADC_SAMPLERATE_CC_Pos (0UL)
  #define SAADC_SAMPLERATE_CC_Msk (0x7FFUL << SAADC_SAMPLERATE_CC_Pos)
  #define SAADC_SAMPLERATE_CC_Min (0x008UL)
  #define SAADC_SAMPLERATE_CC_Max (0x7FFUL)

/* MODE @Bit 12 : Select mode for sample rate control */
  #define SAADC_SAMPLERATE_MODE_Pos (12UL)
  #define SAADC_SAMPLERATE_MODE_Msk (0x1UL << SAADC_SAMPLERATE_MODE_Pos)
  #define SAADC_SAMPLERATE_MODE_Min (0x0UL)
  #define SAADC_SAMPLERATE_MODE_Max (0x1UL)
  #define SAADC_SAMPLERATE_MODE_Task (0x0UL)
  #define SAADC_SAMPLERATE_MODE_Timers (0x1UL)


/* SAADC_NOISESHAPE: Enable noise shaping */
  #define SAADC_NOISESHAPE_ResetValue (0x00000000UL)

/* NOISESHAPE @Bits 0..1 : Enable noise shaping */
  #define SAADC_NOISESHAPE_NOISESHAPE_Pos (0UL)
  #define SAADC_NOISESHAPE_NOISESHAPE_Msk (0x3UL << SAADC_NOISESHAPE_NOISESHAPE_Pos)
  #define SAADC_NOISESHAPE_NOISESHAPE_Min (0x0UL)
  #define SAADC_NOISESHAPE_NOISESHAPE_Max (0x2UL)
  #define SAADC_NOISESHAPE_NOISESHAPE_Disable (0x0UL)
  #define SAADC_NOISESHAPE_NOISESHAPE_Audio (0x1UL)  /*!< Noiseshaping and decimating. Larger passband. Provides a 50kS/s cut
                                                          off frequency, 8x the oversampling ratio. See design description for
                                                          more information*/
  #define SAADC_NOISESHAPE_NOISESHAPE_Accuracy (0x2UL) /*!< Noiseshaping and decimating. Smaller passband. Recommended
                                                            resolution setting is 14 bits. Provides a 5kS/s cut off frequency,
                                                            32x the oversampling ratio. See design description for more
                                                            information*/


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           SICR                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct SICR ======================================================= */
/**
  * @brief Factory Information Configuration Registers
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_SICR_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           SPIM                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct SPIM_TASKS_DMA_RX ================================================= */
/**
  * @brief RX [SPIM_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000000) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000010) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_SPIM_TASKS_DMA_RX_Type;

/* SPIM_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL)
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL)
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL)
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL)


/* SPIM_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL)
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL)
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL)
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL)



/* ================================================== Struct SPIM_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [SPIM_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __OM  NRF_SPIM_TASKS_DMA_RX_Type RX;
} NRF_SPIM_TASKS_DMA_Type;


/* ============================================== Struct SPIM_SUBSCRIBE_DMA_RX =============================================== */
/**
  * @brief RX [SPIM_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  ENABLEMATCH[4];
  __IOM uint32_t  DISABLEMATCH[4];
} NRF_SPIM_SUBSCRIBE_DMA_RX_Type;

/* SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL)


/* SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL)
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL)



/* ================================================ Struct SPIM_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [SPIM_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IOM NRF_SPIM_SUBSCRIBE_DMA_RX_Type RX;
} NRF_SPIM_SUBSCRIBE_DMA_Type;


/* ================================================ Struct SPIM_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [SPIM_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_SPIM_EVENTS_DMA_RX_Type;

/* SPIM_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define SPIM_EVENTS_DMA_RX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define SPIM_EVENTS_DMA_RX_END_END_Pos (0UL)
  #define SPIM_EVENTS_DMA_RX_END_END_Msk (0x1UL << SPIM_EVENTS_DMA_RX_END_END_Pos)
  #define SPIM_EVENTS_DMA_RX_END_END_Min (0x0UL)
  #define SPIM_EVENTS_DMA_RX_END_END_Max (0x1UL)
  #define SPIM_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_RX_END_END_Generated (0x1UL)


/* SPIM_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define SPIM_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define SPIM_EVENTS_DMA_RX_READY_READY_Pos (0UL)
  #define SPIM_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << SPIM_EVENTS_DMA_RX_READY_READY_Pos)
  #define SPIM_EVENTS_DMA_RX_READY_READY_Min (0x0UL)
  #define SPIM_EVENTS_DMA_RX_READY_READY_Max (0x1UL)
  #define SPIM_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_RX_READY_READY_Generated (0x1UL)


/* SPIM_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define SPIM_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL)
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL)
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL)
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL)


/* SPIM_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define SPIM_EVENTS_DMA_RX_MATCH_MaxCount (4UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_MinIndex (0UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << SPIM_EVENTS_DMA_RX_MATCH_MATCH_Pos)
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL)



/* ================================================ Struct SPIM_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [SPIM_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
} NRF_SPIM_EVENTS_DMA_TX_Type;

/* SPIM_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define SPIM_EVENTS_DMA_TX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define SPIM_EVENTS_DMA_TX_END_END_Pos (0UL)
  #define SPIM_EVENTS_DMA_TX_END_END_Msk (0x1UL << SPIM_EVENTS_DMA_TX_END_END_Pos)
  #define SPIM_EVENTS_DMA_TX_END_END_Min (0x0UL)
  #define SPIM_EVENTS_DMA_TX_END_END_Max (0x1UL)
  #define SPIM_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_TX_END_END_Generated (0x1UL)


/* SPIM_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define SPIM_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define SPIM_EVENTS_DMA_TX_READY_READY_Pos (0UL)
  #define SPIM_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << SPIM_EVENTS_DMA_TX_READY_READY_Pos)
  #define SPIM_EVENTS_DMA_TX_READY_READY_Min (0x0UL)
  #define SPIM_EVENTS_DMA_TX_READY_READY_Max (0x1UL)
  #define SPIM_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_TX_READY_READY_Generated (0x1UL)


/* SPIM_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define SPIM_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL)
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL)
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL)
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL)



/* ================================================= Struct SPIM_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [SPIM_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_SPIM_EVENTS_DMA_RX_Type RX;
  __IOM NRF_SPIM_EVENTS_DMA_TX_Type TX;
} NRF_SPIM_EVENTS_DMA_Type;


/* =============================================== Struct SPIM_PUBLISH_DMA_RX ================================================ */
/**
  * @brief RX [SPIM_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_SPIM_PUBLISH_DMA_RX_Type;

/* SPIM_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define SPIM_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIM_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_RX_END_CHIDX_Pos)
  #define SPIM_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_RX_END_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_RX_END_EN_Pos)
  #define SPIM_PUBLISH_DMA_RX_END_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_END_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define SPIM_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define SPIM_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_RX_READY_CHIDX_Pos)
  #define SPIM_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_RX_READY_EN_Pos)
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Pos)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define SPIM_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Pos)
  #define SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_RX_MATCH_EN_Pos)
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL)



/* =============================================== Struct SPIM_PUBLISH_DMA_TX ================================================ */
/**
  * @brief TX [SPIM_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
} NRF_SPIM_PUBLISH_DMA_TX_Type;

/* SPIM_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define SPIM_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIM_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_TX_END_CHIDX_Pos)
  #define SPIM_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_TX_END_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_TX_END_EN_Pos)
  #define SPIM_PUBLISH_DMA_TX_END_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_TX_END_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define SPIM_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define SPIM_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_TX_READY_CHIDX_Pos)
  #define SPIM_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_TX_READY_EN_Pos)
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Pos)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL)



/* ================================================= Struct SPIM_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [SPIM_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_SPIM_PUBLISH_DMA_RX_Type RX;
  __IOM NRF_SPIM_PUBLISH_DMA_TX_Type TX;
} NRF_SPIM_PUBLISH_DMA_Type;


/* ================================================== Struct SPIM_IFTIMING =================================================== */
/**
  * @brief IFTIMING [SPIM_IFTIMING] (unspecified)
  */
typedef struct {
  __IOM uint32_t  RXDELAY;
  __IOM uint32_t  CSNDUR;                            /*!< (@ 0x00000004) Minimum duration between edge of CSN and edge of SCK.
                                                                         When SHORTS.END_START is used, this is also the minimum
                                                                         duration CSN must stay high between transactions.*/
} NRF_SPIM_IFTIMING_Type;

/* SPIM_IFTIMING_RXDELAY: Sample delay for input serial data on MISO */
  #define SPIM_IFTIMING_RXDELAY_ResetValue (0x00000002UL)

/* RXDELAY @Bits 0..2 : Sample delay for input serial data on MISO. The value specifies the number of SPIM core clock cycles
                        delay from the the sampling edge of SCK (leading edge for CONFIG.CPHA = 0, trailing edge for CONFIG.CPHA
                        = 1) until the input serial data is sampled. As en example, if RXDELAY = 0 and CONFIG.CPHA = 0, the
                        input serial data is sampled on the rising edge of SCK. */

  #define SPIM_IFTIMING_RXDELAY_RXDELAY_Pos (0UL)
  #define SPIM_IFTIMING_RXDELAY_RXDELAY_Msk (0x7UL << SPIM_IFTIMING_RXDELAY_RXDELAY_Pos)
  #define SPIM_IFTIMING_RXDELAY_RXDELAY_Min (0x0UL)
  #define SPIM_IFTIMING_RXDELAY_RXDELAY_Max (0x7UL)


/* SPIM_IFTIMING_CSNDUR: Minimum duration between edge of CSN and edge of SCK. When SHORTS.END_START is used, this is also the
                          minimum duration CSN must stay high between transactions. */

  #define SPIM_IFTIMING_CSNDUR_ResetValue (0x00000002UL)

/* CSNDUR @Bits 0..7 : Minimum duration between edge of CSN and edge of SCK. When SHORTS.END_START is used, this is the minimum
                       duration CSN must stay high between transactions. The value is specified in number of SPIM core clock
                       cycles. */

  #define SPIM_IFTIMING_CSNDUR_CSNDUR_Pos (0UL)
  #define SPIM_IFTIMING_CSNDUR_CSNDUR_Msk (0xFFUL << SPIM_IFTIMING_CSNDUR_CSNDUR_Pos)
  #define SPIM_IFTIMING_CSNDUR_CSNDUR_Min (0x00UL)
  #define SPIM_IFTIMING_CSNDUR_CSNDUR_Max (0xFFUL)



/* ==================================================== Struct SPIM_PSEL ===================================================== */
/**
  * @brief PSEL [SPIM_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SCK;
  __IOM uint32_t  MOSI;
  __IOM uint32_t  MISO;
  __IOM uint32_t  DCX;
  __IOM uint32_t  CSN;
} NRF_SPIM_PSEL_Type;

/* SPIM_PSEL_SCK: Pin select for SCK */
  #define SPIM_PSEL_SCK_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_SCK_PIN_Pos (0UL)
  #define SPIM_PSEL_SCK_PIN_Msk (0x1FUL << SPIM_PSEL_SCK_PIN_Pos)
  #define SPIM_PSEL_SCK_PIN_Min (0x00UL)
  #define SPIM_PSEL_SCK_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_SCK_PORT_Pos (5UL)
  #define SPIM_PSEL_SCK_PORT_Msk (0x7UL << SPIM_PSEL_SCK_PORT_Pos)
  #define SPIM_PSEL_SCK_PORT_Min (0x0UL)
  #define SPIM_PSEL_SCK_PORT_Max (0x2UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_SCK_CONNECT_Pos (31UL)
  #define SPIM_PSEL_SCK_CONNECT_Msk (0x1UL << SPIM_PSEL_SCK_CONNECT_Pos)
  #define SPIM_PSEL_SCK_CONNECT_Min (0x0UL)
  #define SPIM_PSEL_SCK_CONNECT_Max (0x1UL)
  #define SPIM_PSEL_SCK_CONNECT_Disconnected (0x1UL)
  #define SPIM_PSEL_SCK_CONNECT_Connected (0x0UL)


/* SPIM_PSEL_MOSI: Pin select for MOSI signal */
  #define SPIM_PSEL_MOSI_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_MOSI_PIN_Pos (0UL)
  #define SPIM_PSEL_MOSI_PIN_Msk (0x1FUL << SPIM_PSEL_MOSI_PIN_Pos)
  #define SPIM_PSEL_MOSI_PIN_Min (0x00UL)
  #define SPIM_PSEL_MOSI_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_MOSI_PORT_Pos (5UL)
  #define SPIM_PSEL_MOSI_PORT_Msk (0x7UL << SPIM_PSEL_MOSI_PORT_Pos)
  #define SPIM_PSEL_MOSI_PORT_Min (0x0UL)
  #define SPIM_PSEL_MOSI_PORT_Max (0x2UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_MOSI_CONNECT_Pos (31UL)
  #define SPIM_PSEL_MOSI_CONNECT_Msk (0x1UL << SPIM_PSEL_MOSI_CONNECT_Pos)
  #define SPIM_PSEL_MOSI_CONNECT_Min (0x0UL)
  #define SPIM_PSEL_MOSI_CONNECT_Max (0x1UL)
  #define SPIM_PSEL_MOSI_CONNECT_Disconnected (0x1UL)
  #define SPIM_PSEL_MOSI_CONNECT_Connected (0x0UL)


/* SPIM_PSEL_MISO: Pin select for MISO signal */
  #define SPIM_PSEL_MISO_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_MISO_PIN_Pos (0UL)
  #define SPIM_PSEL_MISO_PIN_Msk (0x1FUL << SPIM_PSEL_MISO_PIN_Pos)
  #define SPIM_PSEL_MISO_PIN_Min (0x00UL)
  #define SPIM_PSEL_MISO_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_MISO_PORT_Pos (5UL)
  #define SPIM_PSEL_MISO_PORT_Msk (0x7UL << SPIM_PSEL_MISO_PORT_Pos)
  #define SPIM_PSEL_MISO_PORT_Min (0x0UL)
  #define SPIM_PSEL_MISO_PORT_Max (0x2UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_MISO_CONNECT_Pos (31UL)
  #define SPIM_PSEL_MISO_CONNECT_Msk (0x1UL << SPIM_PSEL_MISO_CONNECT_Pos)
  #define SPIM_PSEL_MISO_CONNECT_Min (0x0UL)
  #define SPIM_PSEL_MISO_CONNECT_Max (0x1UL)
  #define SPIM_PSEL_MISO_CONNECT_Disconnected (0x1UL)
  #define SPIM_PSEL_MISO_CONNECT_Connected (0x0UL)


/* SPIM_PSEL_DCX: Pin select for DCX signal */
  #define SPIM_PSEL_DCX_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_DCX_PIN_Pos (0UL)
  #define SPIM_PSEL_DCX_PIN_Msk (0x1FUL << SPIM_PSEL_DCX_PIN_Pos)
  #define SPIM_PSEL_DCX_PIN_Min (0x00UL)
  #define SPIM_PSEL_DCX_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_DCX_PORT_Pos (5UL)
  #define SPIM_PSEL_DCX_PORT_Msk (0x7UL << SPIM_PSEL_DCX_PORT_Pos)
  #define SPIM_PSEL_DCX_PORT_Min (0x0UL)
  #define SPIM_PSEL_DCX_PORT_Max (0x2UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_DCX_CONNECT_Pos (31UL)
  #define SPIM_PSEL_DCX_CONNECT_Msk (0x1UL << SPIM_PSEL_DCX_CONNECT_Pos)
  #define SPIM_PSEL_DCX_CONNECT_Min (0x0UL)
  #define SPIM_PSEL_DCX_CONNECT_Max (0x1UL)
  #define SPIM_PSEL_DCX_CONNECT_Disconnected (0x1UL)
  #define SPIM_PSEL_DCX_CONNECT_Connected (0x0UL)


/* SPIM_PSEL_CSN: Pin select for CSN */
  #define SPIM_PSEL_CSN_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_CSN_PIN_Pos (0UL)
  #define SPIM_PSEL_CSN_PIN_Msk (0x1FUL << SPIM_PSEL_CSN_PIN_Pos)
  #define SPIM_PSEL_CSN_PIN_Min (0x00UL)
  #define SPIM_PSEL_CSN_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_CSN_PORT_Pos (5UL)
  #define SPIM_PSEL_CSN_PORT_Msk (0x7UL << SPIM_PSEL_CSN_PORT_Pos)
  #define SPIM_PSEL_CSN_PORT_Min (0x0UL)
  #define SPIM_PSEL_CSN_PORT_Max (0x2UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_CSN_CONNECT_Pos (31UL)
  #define SPIM_PSEL_CSN_CONNECT_Msk (0x1UL << SPIM_PSEL_CSN_CONNECT_Pos)
  #define SPIM_PSEL_CSN_CONNECT_Min (0x0UL)
  #define SPIM_PSEL_CSN_CONNECT_Max (0x1UL)
  #define SPIM_PSEL_CSN_CONNECT_Disconnected (0x1UL)
  #define SPIM_PSEL_CSN_CONNECT_Connected (0x0UL)



/* ================================================ Struct SPIM_DMA_RX_MATCH ================================================= */
/**
  * @brief MATCH [SPIM_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_SPIM_DMA_RX_MATCH_Type;

/* SPIM_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define SPIM_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL)

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL)

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL)

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL)

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL)

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or sticky */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL)

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or sticky */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL)

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or sticky */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL)

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or sticky */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL)
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL)


/* SPIM_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define SPIM_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL)
  #define SPIM_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL)
  #define SPIM_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL)
  #define SPIM_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data to look for */
  #define SPIM_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL)
  #define SPIM_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFFFFFFFUL << SPIM_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/



/* =================================================== Struct SPIM_DMA_RX ==================================================== */
/**
  * @brief RX [SPIM_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  LIST;
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_SPIM_DMA_RX_MATCH_Type MATCH;            /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_SPIM_DMA_RX_Type;

/* SPIM_DMA_RX_PTR: RAM buffer start address */
  #define SPIM_DMA_RX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define SPIM_DMA_RX_PTR_PTR_Pos (0UL)
  #define SPIM_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << SPIM_DMA_RX_PTR_PTR_Pos)


/* SPIM_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define SPIM_DMA_RX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define SPIM_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)
  #define SPIM_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIM_DMA_RX_MAXCNT_MAXCNT_Pos)
  #define SPIM_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define SPIM_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* SPIM_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define SPIM_DMA_RX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define SPIM_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)
  #define SPIM_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIM_DMA_RX_AMOUNT_AMOUNT_Pos)
  #define SPIM_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define SPIM_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* SPIM_DMA_RX_LIST: EasyDMA list type */
  #define SPIM_DMA_RX_LIST_ResetValue (0x00000000UL)

/* TYPE @Bits 0..2 : List type */
  #define SPIM_DMA_RX_LIST_TYPE_Pos (0UL)
  #define SPIM_DMA_RX_LIST_TYPE_Msk (0x7UL << SPIM_DMA_RX_LIST_TYPE_Pos)
  #define SPIM_DMA_RX_LIST_TYPE_Min (0x0UL)
  #define SPIM_DMA_RX_LIST_TYPE_Max (0x1UL)
  #define SPIM_DMA_RX_LIST_TYPE_Disabled (0x0UL)
  #define SPIM_DMA_RX_LIST_TYPE_ArrayList (0x1UL)


/* SPIM_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* SPIM_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define SPIM_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define SPIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define SPIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << SPIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct SPIM_DMA_TX ==================================================== */
/**
  * @brief TX [SPIM_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  LIST;
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_SPIM_DMA_TX_Type;

/* SPIM_DMA_TX_PTR: RAM buffer start address */
  #define SPIM_DMA_TX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define SPIM_DMA_TX_PTR_PTR_Pos (0UL)
  #define SPIM_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << SPIM_DMA_TX_PTR_PTR_Pos)


/* SPIM_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define SPIM_DMA_TX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define SPIM_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)
  #define SPIM_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIM_DMA_TX_MAXCNT_MAXCNT_Pos)
  #define SPIM_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define SPIM_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* SPIM_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define SPIM_DMA_TX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define SPIM_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)
  #define SPIM_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIM_DMA_TX_AMOUNT_AMOUNT_Pos)
  #define SPIM_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define SPIM_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* SPIM_DMA_TX_LIST: EasyDMA list type */
  #define SPIM_DMA_TX_LIST_ResetValue (0x00000000UL)

/* TYPE @Bits 0..2 : List type */
  #define SPIM_DMA_TX_LIST_TYPE_Pos (0UL)
  #define SPIM_DMA_TX_LIST_TYPE_Msk (0x7UL << SPIM_DMA_TX_LIST_TYPE_Pos)
  #define SPIM_DMA_TX_LIST_TYPE_Min (0x0UL)
  #define SPIM_DMA_TX_LIST_TYPE_Max (0x1UL)
  #define SPIM_DMA_TX_LIST_TYPE_Disabled (0x0UL)
  #define SPIM_DMA_TX_LIST_TYPE_ArrayList (0x1UL)


/* SPIM_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* SPIM_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define SPIM_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define SPIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define SPIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << SPIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct SPIM_DMA ===================================================== */
/**
  * @brief DMA [SPIM_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_SPIM_DMA_RX_Type RX;
  __IOM NRF_SPIM_DMA_TX_Type TX;
} NRF_SPIM_DMA_Type;

/* ======================================================= Struct SPIM ======================================================= */
/**
  * @brief Serial Peripheral Interface Master with EasyDMA
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED;
    __OM uint32_t TASKS_SUSPEND;
    __OM uint32_t TASKS_RESUME;
    __IM uint32_t RESERVED1[5];
    __OM NRF_SPIM_TASKS_DMA_Type TASKS_DMA;
    __IM uint32_t RESERVED2[12];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED3;
    __IOM uint32_t SUBSCRIBE_SUSPEND;
    __IOM uint32_t SUBSCRIBE_RESUME;
    __IM uint32_t RESERVED4[5];
    __IOM NRF_SPIM_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA;
    __IM uint32_t RESERVED5[12];
    __IOM uint32_t EVENTS_STARTED;
    __IOM uint32_t EVENTS_STOPPED;
    __IOM uint32_t EVENTS_END;
    __IM uint32_t RESERVED6[16];
    __IOM NRF_SPIM_EVENTS_DMA_Type EVENTS_DMA;
    __IM uint32_t RESERVED7[3];
    __IOM uint32_t PUBLISH_STARTED;
    __IOM uint32_t PUBLISH_STOPPED;
    __IOM uint32_t PUBLISH_END;
    __IM uint32_t RESERVED8[16];
    __IOM NRF_SPIM_PUBLISH_DMA_Type PUBLISH_DMA;
    __IM uint32_t RESERVED9[3];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED10[64];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED11[125];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED12[10];
    __IOM uint32_t PRESCALER;
    __IM uint32_t RESERVED13[9];
    __IOM uint32_t CONFIG;
    __IM uint32_t RESERVED14[21];
    __IOM NRF_SPIM_IFTIMING_Type IFTIMING;
    __IOM uint32_t DCXCNT;
    __IOM uint32_t CSNPOL;
    __IM uint32_t RESERVED15;
    __IOM uint32_t ORC;                              /*!< (@ 0x000005C0) Byte transmitted after TXD.MAXCNT bytes have been
                                                                         transmitted in the case when RXD.MAXCNT is greater than
                                                                         TXD.MAXCNT*/
    __IM uint32_t RESERVED16[15];
    __IOM NRF_SPIM_PSEL_Type PSEL;
    __IM uint32_t RESERVED17[59];
    __IOM NRF_SPIM_DMA_Type DMA;
  } NRF_SPIM_Type;

/* SPIM_TASKS_START: Start SPI transaction */
  #define SPIM_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start SPI transaction */
  #define SPIM_TASKS_START_TASKS_START_Pos (0UL)
  #define SPIM_TASKS_START_TASKS_START_Msk (0x1UL << SPIM_TASKS_START_TASKS_START_Pos)
  #define SPIM_TASKS_START_TASKS_START_Min (0x1UL)
  #define SPIM_TASKS_START_TASKS_START_Max (0x1UL)
  #define SPIM_TASKS_START_TASKS_START_Trigger (0x1UL)


/* SPIM_TASKS_STOP: Stop SPI transaction */
  #define SPIM_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop SPI transaction */
  #define SPIM_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define SPIM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << SPIM_TASKS_STOP_TASKS_STOP_Pos)
  #define SPIM_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define SPIM_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define SPIM_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* SPIM_TASKS_SUSPEND: Suspend SPI transaction */
  #define SPIM_TASKS_SUSPEND_ResetValue (0x00000000UL)

/* TASKS_SUSPEND @Bit 0 : Suspend SPI transaction */
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL)
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND
                                                                            field.*/
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Min (0x1UL)
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Max (0x1UL)
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (0x1UL)


/* SPIM_TASKS_RESUME: Resume SPI transaction */
  #define SPIM_TASKS_RESUME_ResetValue (0x00000000UL)

/* TASKS_RESUME @Bit 0 : Resume SPI transaction */
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Pos (0UL)
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << SPIM_TASKS_RESUME_TASKS_RESUME_Pos)
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Min (0x1UL)
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Max (0x1UL)
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Trigger (0x1UL)


/* SPIM_SUBSCRIBE_START: Subscribe configuration for task START */
  #define SPIM_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define SPIM_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define SPIM_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_START_CHIDX_Pos)
  #define SPIM_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define SPIM_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_START_EN_Pos (31UL)
  #define SPIM_SUBSCRIBE_START_EN_Msk (0x1UL << SPIM_SUBSCRIBE_START_EN_Pos)
  #define SPIM_SUBSCRIBE_START_EN_Min (0x0UL)
  #define SPIM_SUBSCRIBE_START_EN_Max (0x1UL)
  #define SPIM_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define SPIM_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* SPIM_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define SPIM_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define SPIM_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define SPIM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_STOP_CHIDX_Pos)
  #define SPIM_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define SPIM_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define SPIM_SUBSCRIBE_STOP_EN_Msk (0x1UL << SPIM_SUBSCRIBE_STOP_EN_Pos)
  #define SPIM_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define SPIM_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define SPIM_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define SPIM_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* SPIM_SUBSCRIBE_SUSPEND: Subscribe configuration for task SUSPEND */
  #define SPIM_SUBSCRIBE_SUSPEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SUSPEND will subscribe to */
  #define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL)
  #define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_SUSPEND_CHIDX_Pos)
  #define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Min (0x00UL)
  #define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Pos (31UL)
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << SPIM_SUBSCRIBE_SUSPEND_EN_Pos)
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Min (0x0UL)
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Max (0x1UL)
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Disabled (0x0UL)
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Enabled (0x1UL)


/* SPIM_SUBSCRIBE_RESUME: Subscribe configuration for task RESUME */
  #define SPIM_SUBSCRIBE_RESUME_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RESUME will subscribe to */
  #define SPIM_SUBSCRIBE_RESUME_CHIDX_Pos (0UL)
  #define SPIM_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_RESUME_CHIDX_Pos)
  #define SPIM_SUBSCRIBE_RESUME_CHIDX_Min (0x00UL)
  #define SPIM_SUBSCRIBE_RESUME_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_RESUME_EN_Pos (31UL)
  #define SPIM_SUBSCRIBE_RESUME_EN_Msk (0x1UL << SPIM_SUBSCRIBE_RESUME_EN_Pos)
  #define SPIM_SUBSCRIBE_RESUME_EN_Min (0x0UL)
  #define SPIM_SUBSCRIBE_RESUME_EN_Max (0x1UL)
  #define SPIM_SUBSCRIBE_RESUME_EN_Disabled (0x0UL)
  #define SPIM_SUBSCRIBE_RESUME_EN_Enabled (0x1UL)


/* SPIM_EVENTS_STARTED: SPI transaction has started */
  #define SPIM_EVENTS_STARTED_ResetValue (0x00000000UL)

/* EVENTS_STARTED @Bit 0 : SPI transaction has started */
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL)
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << SPIM_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_STARTED field.*/
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Min (0x0UL)
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Max (0x1UL)
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0x0UL)
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Generated (0x1UL)


/* SPIM_EVENTS_STOPPED: SPI transaction has stopped */
  #define SPIM_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : SPI transaction has stopped */
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* SPIM_EVENTS_END: End of RXD buffer and TXD buffer reached */
  #define SPIM_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : End of RXD buffer and TXD buffer reached */
  #define SPIM_EVENTS_END_EVENTS_END_Pos (0UL)
  #define SPIM_EVENTS_END_EVENTS_END_Msk (0x1UL << SPIM_EVENTS_END_EVENTS_END_Pos)
  #define SPIM_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define SPIM_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define SPIM_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define SPIM_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* SPIM_PUBLISH_STARTED: Publish configuration for event STARTED */
  #define SPIM_PUBLISH_STARTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STARTED will publish to */
  #define SPIM_PUBLISH_STARTED_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_STARTED_CHIDX_Pos)
  #define SPIM_PUBLISH_STARTED_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_STARTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_STARTED_EN_Pos (31UL)
  #define SPIM_PUBLISH_STARTED_EN_Msk (0x1UL << SPIM_PUBLISH_STARTED_EN_Pos)
  #define SPIM_PUBLISH_STARTED_EN_Min (0x0UL)
  #define SPIM_PUBLISH_STARTED_EN_Max (0x1UL)
  #define SPIM_PUBLISH_STARTED_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_STARTED_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define SPIM_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define SPIM_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_STOPPED_CHIDX_Pos)
  #define SPIM_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_STOPPED_EN_Pos (31UL)
  #define SPIM_PUBLISH_STOPPED_EN_Msk (0x1UL << SPIM_PUBLISH_STOPPED_EN_Pos)
  #define SPIM_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define SPIM_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define SPIM_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* SPIM_PUBLISH_END: Publish configuration for event END */
  #define SPIM_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIM_PUBLISH_END_CHIDX_Pos (0UL)
  #define SPIM_PUBLISH_END_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_END_CHIDX_Pos)
  #define SPIM_PUBLISH_END_CHIDX_Min (0x00UL)
  #define SPIM_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_END_EN_Pos (31UL)
  #define SPIM_PUBLISH_END_EN_Msk (0x1UL << SPIM_PUBLISH_END_EN_Pos)
  #define SPIM_PUBLISH_END_EN_Min (0x0UL)
  #define SPIM_PUBLISH_END_EN_Max (0x1UL)
  #define SPIM_PUBLISH_END_EN_Disabled (0x0UL)
  #define SPIM_PUBLISH_END_EN_Enabled (0x1UL)


/* SPIM_SHORTS: Shortcuts between local events and tasks */
  #define SPIM_SHORTS_ResetValue (0x00000000UL)

/* END_START @Bit 17 : Shortcut between event END and task START */
  #define SPIM_SHORTS_END_START_Pos (17UL)
  #define SPIM_SHORTS_END_START_Msk (0x1UL << SPIM_SHORTS_END_START_Pos)
  #define SPIM_SHORTS_END_START_Min (0x0UL)
  #define SPIM_SHORTS_END_START_Max (0x1UL)
  #define SPIM_SHORTS_END_START_Disabled (0x0UL)
  #define SPIM_SHORTS_END_START_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL)
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL)
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL)
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL)
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[0] and task DMA.RX.DISABLEMATCH[0] */
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL)
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[1] and task DMA.RX.DISABLEMATCH[1] */
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL)
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[2] and task DMA.RX.DISABLEMATCH[2] */
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL)
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[3] and task DMA.RX.DISABLEMATCH[3] */
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL)
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL)
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL)


/* SPIM_INTENSET: Enable interrupt */
  #define SPIM_INTENSET_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to enable interrupt for event STARTED */
  #define SPIM_INTENSET_STARTED_Pos (0UL)
  #define SPIM_INTENSET_STARTED_Msk (0x1UL << SPIM_INTENSET_STARTED_Pos)
  #define SPIM_INTENSET_STARTED_Min (0x0UL)
  #define SPIM_INTENSET_STARTED_Max (0x1UL)
  #define SPIM_INTENSET_STARTED_Set (0x1UL)
  #define SPIM_INTENSET_STARTED_Disabled (0x0UL)
  #define SPIM_INTENSET_STARTED_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define SPIM_INTENSET_STOPPED_Pos (1UL)
  #define SPIM_INTENSET_STOPPED_Msk (0x1UL << SPIM_INTENSET_STOPPED_Pos)
  #define SPIM_INTENSET_STOPPED_Min (0x0UL)
  #define SPIM_INTENSET_STOPPED_Max (0x1UL)
  #define SPIM_INTENSET_STOPPED_Set (0x1UL)
  #define SPIM_INTENSET_STOPPED_Disabled (0x0UL)
  #define SPIM_INTENSET_STOPPED_Enabled (0x1UL)

/* END @Bit 2 : Write '1' to enable interrupt for event END */
  #define SPIM_INTENSET_END_Pos (2UL)
  #define SPIM_INTENSET_END_Msk (0x1UL << SPIM_INTENSET_END_Pos)
  #define SPIM_INTENSET_END_Min (0x0UL)
  #define SPIM_INTENSET_END_Max (0x1UL)
  #define SPIM_INTENSET_END_Set (0x1UL)
  #define SPIM_INTENSET_END_Disabled (0x0UL)
  #define SPIM_INTENSET_END_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define SPIM_INTENSET_DMARXEND_Pos (19UL)
  #define SPIM_INTENSET_DMARXEND_Msk (0x1UL << SPIM_INTENSET_DMARXEND_Pos)
  #define SPIM_INTENSET_DMARXEND_Min (0x0UL)
  #define SPIM_INTENSET_DMARXEND_Max (0x1UL)
  #define SPIM_INTENSET_DMARXEND_Set (0x1UL)
  #define SPIM_INTENSET_DMARXEND_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define SPIM_INTENSET_DMARXREADY_Pos (20UL)
  #define SPIM_INTENSET_DMARXREADY_Msk (0x1UL << SPIM_INTENSET_DMARXREADY_Pos)
  #define SPIM_INTENSET_DMARXREADY_Min (0x0UL)
  #define SPIM_INTENSET_DMARXREADY_Max (0x1UL)
  #define SPIM_INTENSET_DMARXREADY_Set (0x1UL)
  #define SPIM_INTENSET_DMARXREADY_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define SPIM_INTENSET_DMARXBUSERROR_Pos (21UL)
  #define SPIM_INTENSET_DMARXBUSERROR_Msk (0x1UL << SPIM_INTENSET_DMARXBUSERROR_Pos)
  #define SPIM_INTENSET_DMARXBUSERROR_Min (0x0UL)
  #define SPIM_INTENSET_DMARXBUSERROR_Max (0x1UL)
  #define SPIM_INTENSET_DMARXBUSERROR_Set (0x1UL)
  #define SPIM_INTENSET_DMARXBUSERROR_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define SPIM_INTENSET_DMARXMATCH0_Pos (22UL)
  #define SPIM_INTENSET_DMARXMATCH0_Msk (0x1UL << SPIM_INTENSET_DMARXMATCH0_Pos)
  #define SPIM_INTENSET_DMARXMATCH0_Min (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH0_Max (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH0_Set (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH0_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define SPIM_INTENSET_DMARXMATCH1_Pos (23UL)
  #define SPIM_INTENSET_DMARXMATCH1_Msk (0x1UL << SPIM_INTENSET_DMARXMATCH1_Pos)
  #define SPIM_INTENSET_DMARXMATCH1_Min (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH1_Max (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH1_Set (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH1_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define SPIM_INTENSET_DMARXMATCH2_Pos (24UL)
  #define SPIM_INTENSET_DMARXMATCH2_Msk (0x1UL << SPIM_INTENSET_DMARXMATCH2_Pos)
  #define SPIM_INTENSET_DMARXMATCH2_Min (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH2_Max (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH2_Set (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH2_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define SPIM_INTENSET_DMARXMATCH3_Pos (25UL)
  #define SPIM_INTENSET_DMARXMATCH3_Msk (0x1UL << SPIM_INTENSET_DMARXMATCH3_Pos)
  #define SPIM_INTENSET_DMARXMATCH3_Min (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH3_Max (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH3_Set (0x1UL)
  #define SPIM_INTENSET_DMARXMATCH3_Disabled (0x0UL)
  #define SPIM_INTENSET_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define SPIM_INTENSET_DMATXEND_Pos (26UL)
  #define SPIM_INTENSET_DMATXEND_Msk (0x1UL << SPIM_INTENSET_DMATXEND_Pos)
  #define SPIM_INTENSET_DMATXEND_Min (0x0UL)
  #define SPIM_INTENSET_DMATXEND_Max (0x1UL)
  #define SPIM_INTENSET_DMATXEND_Set (0x1UL)
  #define SPIM_INTENSET_DMATXEND_Disabled (0x0UL)
  #define SPIM_INTENSET_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define SPIM_INTENSET_DMATXREADY_Pos (27UL)
  #define SPIM_INTENSET_DMATXREADY_Msk (0x1UL << SPIM_INTENSET_DMATXREADY_Pos)
  #define SPIM_INTENSET_DMATXREADY_Min (0x0UL)
  #define SPIM_INTENSET_DMATXREADY_Max (0x1UL)
  #define SPIM_INTENSET_DMATXREADY_Set (0x1UL)
  #define SPIM_INTENSET_DMATXREADY_Disabled (0x0UL)
  #define SPIM_INTENSET_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define SPIM_INTENSET_DMATXBUSERROR_Pos (28UL)
  #define SPIM_INTENSET_DMATXBUSERROR_Msk (0x1UL << SPIM_INTENSET_DMATXBUSERROR_Pos)
  #define SPIM_INTENSET_DMATXBUSERROR_Min (0x0UL)
  #define SPIM_INTENSET_DMATXBUSERROR_Max (0x1UL)
  #define SPIM_INTENSET_DMATXBUSERROR_Set (0x1UL)
  #define SPIM_INTENSET_DMATXBUSERROR_Disabled (0x0UL)
  #define SPIM_INTENSET_DMATXBUSERROR_Enabled (0x1UL)


/* SPIM_INTENCLR: Disable interrupt */
  #define SPIM_INTENCLR_ResetValue (0x00000000UL)

/* STARTED @Bit 0 : Write '1' to disable interrupt for event STARTED */
  #define SPIM_INTENCLR_STARTED_Pos (0UL)
  #define SPIM_INTENCLR_STARTED_Msk (0x1UL << SPIM_INTENCLR_STARTED_Pos)
  #define SPIM_INTENCLR_STARTED_Min (0x0UL)
  #define SPIM_INTENCLR_STARTED_Max (0x1UL)
  #define SPIM_INTENCLR_STARTED_Clear (0x1UL)
  #define SPIM_INTENCLR_STARTED_Disabled (0x0UL)
  #define SPIM_INTENCLR_STARTED_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define SPIM_INTENCLR_STOPPED_Pos (1UL)
  #define SPIM_INTENCLR_STOPPED_Msk (0x1UL << SPIM_INTENCLR_STOPPED_Pos)
  #define SPIM_INTENCLR_STOPPED_Min (0x0UL)
  #define SPIM_INTENCLR_STOPPED_Max (0x1UL)
  #define SPIM_INTENCLR_STOPPED_Clear (0x1UL)
  #define SPIM_INTENCLR_STOPPED_Disabled (0x0UL)
  #define SPIM_INTENCLR_STOPPED_Enabled (0x1UL)

/* END @Bit 2 : Write '1' to disable interrupt for event END */
  #define SPIM_INTENCLR_END_Pos (2UL)
  #define SPIM_INTENCLR_END_Msk (0x1UL << SPIM_INTENCLR_END_Pos)
  #define SPIM_INTENCLR_END_Min (0x0UL)
  #define SPIM_INTENCLR_END_Max (0x1UL)
  #define SPIM_INTENCLR_END_Clear (0x1UL)
  #define SPIM_INTENCLR_END_Disabled (0x0UL)
  #define SPIM_INTENCLR_END_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define SPIM_INTENCLR_DMARXEND_Pos (19UL)
  #define SPIM_INTENCLR_DMARXEND_Msk (0x1UL << SPIM_INTENCLR_DMARXEND_Pos)
  #define SPIM_INTENCLR_DMARXEND_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXEND_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXEND_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXEND_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define SPIM_INTENCLR_DMARXREADY_Pos (20UL)
  #define SPIM_INTENCLR_DMARXREADY_Msk (0x1UL << SPIM_INTENCLR_DMARXREADY_Pos)
  #define SPIM_INTENCLR_DMARXREADY_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXREADY_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXREADY_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXREADY_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define SPIM_INTENCLR_DMARXBUSERROR_Pos (21UL)
  #define SPIM_INTENCLR_DMARXBUSERROR_Msk (0x1UL << SPIM_INTENCLR_DMARXBUSERROR_Pos)
  #define SPIM_INTENCLR_DMARXBUSERROR_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXBUSERROR_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXBUSERROR_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXBUSERROR_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define SPIM_INTENCLR_DMARXMATCH0_Pos (22UL)
  #define SPIM_INTENCLR_DMARXMATCH0_Msk (0x1UL << SPIM_INTENCLR_DMARXMATCH0_Pos)
  #define SPIM_INTENCLR_DMARXMATCH0_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH0_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH0_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH0_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define SPIM_INTENCLR_DMARXMATCH1_Pos (23UL)
  #define SPIM_INTENCLR_DMARXMATCH1_Msk (0x1UL << SPIM_INTENCLR_DMARXMATCH1_Pos)
  #define SPIM_INTENCLR_DMARXMATCH1_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH1_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH1_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH1_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define SPIM_INTENCLR_DMARXMATCH2_Pos (24UL)
  #define SPIM_INTENCLR_DMARXMATCH2_Msk (0x1UL << SPIM_INTENCLR_DMARXMATCH2_Pos)
  #define SPIM_INTENCLR_DMARXMATCH2_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH2_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH2_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH2_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define SPIM_INTENCLR_DMARXMATCH3_Pos (25UL)
  #define SPIM_INTENCLR_DMARXMATCH3_Msk (0x1UL << SPIM_INTENCLR_DMARXMATCH3_Pos)
  #define SPIM_INTENCLR_DMARXMATCH3_Min (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH3_Max (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH3_Clear (0x1UL)
  #define SPIM_INTENCLR_DMARXMATCH3_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define SPIM_INTENCLR_DMATXEND_Pos (26UL)
  #define SPIM_INTENCLR_DMATXEND_Msk (0x1UL << SPIM_INTENCLR_DMATXEND_Pos)
  #define SPIM_INTENCLR_DMATXEND_Min (0x0UL)
  #define SPIM_INTENCLR_DMATXEND_Max (0x1UL)
  #define SPIM_INTENCLR_DMATXEND_Clear (0x1UL)
  #define SPIM_INTENCLR_DMATXEND_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define SPIM_INTENCLR_DMATXREADY_Pos (27UL)
  #define SPIM_INTENCLR_DMATXREADY_Msk (0x1UL << SPIM_INTENCLR_DMATXREADY_Pos)
  #define SPIM_INTENCLR_DMATXREADY_Min (0x0UL)
  #define SPIM_INTENCLR_DMATXREADY_Max (0x1UL)
  #define SPIM_INTENCLR_DMATXREADY_Clear (0x1UL)
  #define SPIM_INTENCLR_DMATXREADY_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define SPIM_INTENCLR_DMATXBUSERROR_Pos (28UL)
  #define SPIM_INTENCLR_DMATXBUSERROR_Msk (0x1UL << SPIM_INTENCLR_DMATXBUSERROR_Pos)
  #define SPIM_INTENCLR_DMATXBUSERROR_Min (0x0UL)
  #define SPIM_INTENCLR_DMATXBUSERROR_Max (0x1UL)
  #define SPIM_INTENCLR_DMATXBUSERROR_Clear (0x1UL)
  #define SPIM_INTENCLR_DMATXBUSERROR_Disabled (0x0UL)
  #define SPIM_INTENCLR_DMATXBUSERROR_Enabled (0x1UL)


/* SPIM_ENABLE: Enable SPIM */
  #define SPIM_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..3 : Enable or disable SPIM */
  #define SPIM_ENABLE_ENABLE_Pos (0UL)
  #define SPIM_ENABLE_ENABLE_Msk (0xFUL << SPIM_ENABLE_ENABLE_Pos)
  #define SPIM_ENABLE_ENABLE_Min (0x0UL)
  #define SPIM_ENABLE_ENABLE_Max (0x7UL)
  #define SPIM_ENABLE_ENABLE_Disabled (0x0UL)
  #define SPIM_ENABLE_ENABLE_Enabled (0x7UL)


/* SPIM_PRESCALER: The prescaler is used to set the SPI frequency. */
  #define SPIM_PRESCALER_ResetValue (0x00000040UL)

/* DIVISOR @Bits 0..6 : Core clock to SCK divisor */
  #define SPIM_PRESCALER_DIVISOR_Pos (0UL)
  #define SPIM_PRESCALER_DIVISOR_Msk (0x7FUL << SPIM_PRESCALER_DIVISOR_Pos)
  #define SPIM_PRESCALER_DIVISOR_Min (0x02UL)
  #define SPIM_PRESCALER_DIVISOR_Max (0x7EUL)


/* SPIM_CONFIG: Configuration register */
  #define SPIM_CONFIG_ResetValue (0x00000000UL)

/* ORDER @Bit 0 : Bit order */
  #define SPIM_CONFIG_ORDER_Pos (0UL)
  #define SPIM_CONFIG_ORDER_Msk (0x1UL << SPIM_CONFIG_ORDER_Pos)
  #define SPIM_CONFIG_ORDER_Min (0x0UL)
  #define SPIM_CONFIG_ORDER_Max (0x1UL)
  #define SPIM_CONFIG_ORDER_MsbFirst (0x0UL)
  #define SPIM_CONFIG_ORDER_LsbFirst (0x1UL)

/* CPHA @Bit 1 : Serial clock (SCK) phase */
  #define SPIM_CONFIG_CPHA_Pos (1UL)
  #define SPIM_CONFIG_CPHA_Msk (0x1UL << SPIM_CONFIG_CPHA_Pos)
  #define SPIM_CONFIG_CPHA_Min (0x0UL)
  #define SPIM_CONFIG_CPHA_Max (0x1UL)
  #define SPIM_CONFIG_CPHA_Leading (0x0UL)
  #define SPIM_CONFIG_CPHA_Trailing (0x1UL)

/* CPOL @Bit 2 : Serial clock (SCK) polarity */
  #define SPIM_CONFIG_CPOL_Pos (2UL)
  #define SPIM_CONFIG_CPOL_Msk (0x1UL << SPIM_CONFIG_CPOL_Pos)
  #define SPIM_CONFIG_CPOL_Min (0x0UL)
  #define SPIM_CONFIG_CPOL_Max (0x1UL)
  #define SPIM_CONFIG_CPOL_ActiveHigh (0x0UL)
  #define SPIM_CONFIG_CPOL_ActiveLow (0x1UL)


/* SPIM_DCXCNT: DCX configuration */
  #define SPIM_DCXCNT_ResetValue (0x00000000UL)

/* DCXCNT @Bits 0..3 : This register specifies the number of command bytes preceding the data bytes. The PSEL.DCX line will be
                       low during transmission of command bytes and high during transmission of data bytes. Value 0xF indicates
                       that all bytes are command bytes. */

  #define SPIM_DCXCNT_DCXCNT_Pos (0UL)
  #define SPIM_DCXCNT_DCXCNT_Msk (0xFUL << SPIM_DCXCNT_DCXCNT_Pos)
  #define SPIM_DCXCNT_DCXCNT_Min (0x0UL)
  #define SPIM_DCXCNT_DCXCNT_Max (0xFUL)


/* SPIM_CSNPOL: Polarity of CSN output */
  #define SPIM_CSNPOL_ResetValue (0x00000000UL)

/* CSNPOL0 @Bit 0 : Polarity of CSN output */
  #define SPIM_CSNPOL_CSNPOL0_Pos (0UL)
  #define SPIM_CSNPOL_CSNPOL0_Msk (0x1UL << SPIM_CSNPOL_CSNPOL0_Pos)
  #define SPIM_CSNPOL_CSNPOL0_Min (0x0UL)
  #define SPIM_CSNPOL_CSNPOL0_Max (0x1UL)
  #define SPIM_CSNPOL_CSNPOL0_LOW (0x0UL)
  #define SPIM_CSNPOL_CSNPOL0_HIGH (0x1UL)


/* SPIM_ORC: Byte transmitted after TXD.MAXCNT bytes have been transmitted in the case when RXD.MAXCNT is greater than
              TXD.MAXCNT */

  #define SPIM_ORC_ResetValue (0x00000000UL)

/* ORC @Bits 0..7 : Byte transmitted after TXD.MAXCNT bytes have been transmitted in the case when RXD.MAXCNT is greater than
                    TXD.MAXCNT. */

  #define SPIM_ORC_ORC_Pos (0UL)
  #define SPIM_ORC_ORC_Msk (0xFFUL << SPIM_ORC_ORC_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           SPIS                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct SPIS_TASKS_DMA_RX ================================================= */
/**
  * @brief RX [SPIS_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000000) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000010) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_SPIS_TASKS_DMA_RX_Type;

/* SPIS_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL)
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL)
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL)
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL)


/* SPIS_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL)
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL)
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL)
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL)



/* ================================================== Struct SPIS_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [SPIS_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __OM  NRF_SPIS_TASKS_DMA_RX_Type RX;
} NRF_SPIS_TASKS_DMA_Type;


/* ============================================== Struct SPIS_SUBSCRIBE_DMA_RX =============================================== */
/**
  * @brief RX [SPIS_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  ENABLEMATCH[4];
  __IOM uint32_t  DISABLEMATCH[4];
} NRF_SPIS_SUBSCRIBE_DMA_RX_Type;

/* SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL)


/* SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL)
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL)



/* ================================================ Struct SPIS_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [SPIS_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IOM NRF_SPIS_SUBSCRIBE_DMA_RX_Type RX;
} NRF_SPIS_SUBSCRIBE_DMA_Type;


/* ================================================ Struct SPIS_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [SPIS_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_SPIS_EVENTS_DMA_RX_Type;

/* SPIS_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define SPIS_EVENTS_DMA_RX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define SPIS_EVENTS_DMA_RX_END_END_Pos (0UL)
  #define SPIS_EVENTS_DMA_RX_END_END_Msk (0x1UL << SPIS_EVENTS_DMA_RX_END_END_Pos)
  #define SPIS_EVENTS_DMA_RX_END_END_Min (0x0UL)
  #define SPIS_EVENTS_DMA_RX_END_END_Max (0x1UL)
  #define SPIS_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_RX_END_END_Generated (0x1UL)


/* SPIS_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define SPIS_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define SPIS_EVENTS_DMA_RX_READY_READY_Pos (0UL)
  #define SPIS_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << SPIS_EVENTS_DMA_RX_READY_READY_Pos)
  #define SPIS_EVENTS_DMA_RX_READY_READY_Min (0x0UL)
  #define SPIS_EVENTS_DMA_RX_READY_READY_Max (0x1UL)
  #define SPIS_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_RX_READY_READY_Generated (0x1UL)


/* SPIS_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define SPIS_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL)
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL)
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL)
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL)


/* SPIS_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define SPIS_EVENTS_DMA_RX_MATCH_MaxCount (4UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_MinIndex (0UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << SPIS_EVENTS_DMA_RX_MATCH_MATCH_Pos)
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL)



/* ================================================ Struct SPIS_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [SPIS_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
} NRF_SPIS_EVENTS_DMA_TX_Type;

/* SPIS_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define SPIS_EVENTS_DMA_TX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define SPIS_EVENTS_DMA_TX_END_END_Pos (0UL)
  #define SPIS_EVENTS_DMA_TX_END_END_Msk (0x1UL << SPIS_EVENTS_DMA_TX_END_END_Pos)
  #define SPIS_EVENTS_DMA_TX_END_END_Min (0x0UL)
  #define SPIS_EVENTS_DMA_TX_END_END_Max (0x1UL)
  #define SPIS_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_TX_END_END_Generated (0x1UL)


/* SPIS_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define SPIS_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define SPIS_EVENTS_DMA_TX_READY_READY_Pos (0UL)
  #define SPIS_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << SPIS_EVENTS_DMA_TX_READY_READY_Pos)
  #define SPIS_EVENTS_DMA_TX_READY_READY_Min (0x0UL)
  #define SPIS_EVENTS_DMA_TX_READY_READY_Max (0x1UL)
  #define SPIS_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_TX_READY_READY_Generated (0x1UL)


/* SPIS_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define SPIS_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL)
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL)
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL)
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL)



/* ================================================= Struct SPIS_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [SPIS_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_SPIS_EVENTS_DMA_RX_Type RX;
  __IOM NRF_SPIS_EVENTS_DMA_TX_Type TX;
} NRF_SPIS_EVENTS_DMA_Type;


/* =============================================== Struct SPIS_PUBLISH_DMA_RX ================================================ */
/**
  * @brief RX [SPIS_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_SPIS_PUBLISH_DMA_RX_Type;

/* SPIS_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define SPIS_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIS_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_RX_END_CHIDX_Pos)
  #define SPIS_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_RX_END_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_RX_END_EN_Pos)
  #define SPIS_PUBLISH_DMA_RX_END_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_END_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL)


/* SPIS_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define SPIS_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define SPIS_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_RX_READY_CHIDX_Pos)
  #define SPIS_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_RX_READY_EN_Pos)
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL)


/* SPIS_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Pos)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL)


/* SPIS_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define SPIS_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Pos)
  #define SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_RX_MATCH_EN_Pos)
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL)



/* =============================================== Struct SPIS_PUBLISH_DMA_TX ================================================ */
/**
  * @brief TX [SPIS_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
} NRF_SPIS_PUBLISH_DMA_TX_Type;

/* SPIS_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define SPIS_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIS_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_TX_END_CHIDX_Pos)
  #define SPIS_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_TX_END_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_TX_END_EN_Pos)
  #define SPIS_PUBLISH_DMA_TX_END_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_TX_END_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL)


/* SPIS_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define SPIS_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define SPIS_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_TX_READY_CHIDX_Pos)
  #define SPIS_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_TX_READY_EN_Pos)
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL)


/* SPIS_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Pos)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL)



/* ================================================= Struct SPIS_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [SPIS_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_SPIS_PUBLISH_DMA_RX_Type RX;
  __IOM NRF_SPIS_PUBLISH_DMA_TX_Type TX;
} NRF_SPIS_PUBLISH_DMA_Type;


/* ==================================================== Struct SPIS_PSEL ===================================================== */
/**
  * @brief PSEL [SPIS_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SCK;
  __IOM uint32_t  MISO;
  __IOM uint32_t  MOSI;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CSN;
} NRF_SPIS_PSEL_Type;

/* SPIS_PSEL_SCK: Pin select for SCK */
  #define SPIS_PSEL_SCK_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIS_PSEL_SCK_PIN_Pos (0UL)
  #define SPIS_PSEL_SCK_PIN_Msk (0x1FUL << SPIS_PSEL_SCK_PIN_Pos)
  #define SPIS_PSEL_SCK_PIN_Min (0x00UL)
  #define SPIS_PSEL_SCK_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIS_PSEL_SCK_PORT_Pos (5UL)
  #define SPIS_PSEL_SCK_PORT_Msk (0x7UL << SPIS_PSEL_SCK_PORT_Pos)
  #define SPIS_PSEL_SCK_PORT_Min (0x0UL)
  #define SPIS_PSEL_SCK_PORT_Max (0x2UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIS_PSEL_SCK_CONNECT_Pos (31UL)
  #define SPIS_PSEL_SCK_CONNECT_Msk (0x1UL << SPIS_PSEL_SCK_CONNECT_Pos)
  #define SPIS_PSEL_SCK_CONNECT_Min (0x0UL)
  #define SPIS_PSEL_SCK_CONNECT_Max (0x1UL)
  #define SPIS_PSEL_SCK_CONNECT_Disconnected (0x1UL)
  #define SPIS_PSEL_SCK_CONNECT_Connected (0x0UL)


/* SPIS_PSEL_MISO: Pin select for MISO signal */
  #define SPIS_PSEL_MISO_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIS_PSEL_MISO_PIN_Pos (0UL)
  #define SPIS_PSEL_MISO_PIN_Msk (0x1FUL << SPIS_PSEL_MISO_PIN_Pos)
  #define SPIS_PSEL_MISO_PIN_Min (0x00UL)
  #define SPIS_PSEL_MISO_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIS_PSEL_MISO_PORT_Pos (5UL)
  #define SPIS_PSEL_MISO_PORT_Msk (0x7UL << SPIS_PSEL_MISO_PORT_Pos)
  #define SPIS_PSEL_MISO_PORT_Min (0x0UL)
  #define SPIS_PSEL_MISO_PORT_Max (0x2UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIS_PSEL_MISO_CONNECT_Pos (31UL)
  #define SPIS_PSEL_MISO_CONNECT_Msk (0x1UL << SPIS_PSEL_MISO_CONNECT_Pos)
  #define SPIS_PSEL_MISO_CONNECT_Min (0x0UL)
  #define SPIS_PSEL_MISO_CONNECT_Max (0x1UL)
  #define SPIS_PSEL_MISO_CONNECT_Disconnected (0x1UL)
  #define SPIS_PSEL_MISO_CONNECT_Connected (0x0UL)


/* SPIS_PSEL_MOSI: Pin select for MOSI signal */
  #define SPIS_PSEL_MOSI_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIS_PSEL_MOSI_PIN_Pos (0UL)
  #define SPIS_PSEL_MOSI_PIN_Msk (0x1FUL << SPIS_PSEL_MOSI_PIN_Pos)
  #define SPIS_PSEL_MOSI_PIN_Min (0x00UL)
  #define SPIS_PSEL_MOSI_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIS_PSEL_MOSI_PORT_Pos (5UL)
  #define SPIS_PSEL_MOSI_PORT_Msk (0x7UL << SPIS_PSEL_MOSI_PORT_Pos)
  #define SPIS_PSEL_MOSI_PORT_Min (0x0UL)
  #define SPIS_PSEL_MOSI_PORT_Max (0x2UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIS_PSEL_MOSI_CONNECT_Pos (31UL)
  #define SPIS_PSEL_MOSI_CONNECT_Msk (0x1UL << SPIS_PSEL_MOSI_CONNECT_Pos)
  #define SPIS_PSEL_MOSI_CONNECT_Min (0x0UL)
  #define SPIS_PSEL_MOSI_CONNECT_Max (0x1UL)
  #define SPIS_PSEL_MOSI_CONNECT_Disconnected (0x1UL)
  #define SPIS_PSEL_MOSI_CONNECT_Connected (0x0UL)


/* SPIS_PSEL_CSN: Pin select for CSN signal */
  #define SPIS_PSEL_CSN_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define SPIS_PSEL_CSN_PIN_Pos (0UL)
  #define SPIS_PSEL_CSN_PIN_Msk (0x1FUL << SPIS_PSEL_CSN_PIN_Pos)
  #define SPIS_PSEL_CSN_PIN_Min (0x00UL)
  #define SPIS_PSEL_CSN_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define SPIS_PSEL_CSN_PORT_Pos (5UL)
  #define SPIS_PSEL_CSN_PORT_Msk (0x7UL << SPIS_PSEL_CSN_PORT_Pos)
  #define SPIS_PSEL_CSN_PORT_Min (0x0UL)
  #define SPIS_PSEL_CSN_PORT_Max (0x2UL)

/* CONNECT @Bit 31 : Connection */
  #define SPIS_PSEL_CSN_CONNECT_Pos (31UL)
  #define SPIS_PSEL_CSN_CONNECT_Msk (0x1UL << SPIS_PSEL_CSN_CONNECT_Pos)
  #define SPIS_PSEL_CSN_CONNECT_Min (0x0UL)
  #define SPIS_PSEL_CSN_CONNECT_Max (0x1UL)
  #define SPIS_PSEL_CSN_CONNECT_Disconnected (0x1UL)
  #define SPIS_PSEL_CSN_CONNECT_Connected (0x0UL)



/* ================================================ Struct SPIS_DMA_RX_MATCH ================================================= */
/**
  * @brief MATCH [SPIS_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_SPIS_DMA_RX_MATCH_Type;

/* SPIS_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define SPIS_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL)

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Pos)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL)

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Pos)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL)

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Pos)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL)

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Pos)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL)

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or sticky */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL)

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or sticky */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL)

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or sticky */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL)

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or sticky */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL)
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL)


/* SPIS_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define SPIS_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL)
  #define SPIS_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL)
  #define SPIS_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL)
  #define SPIS_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data to look for */
  #define SPIS_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL)
  #define SPIS_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFFFFFFFUL << SPIS_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/



/* =================================================== Struct SPIS_DMA_RX ==================================================== */
/**
  * @brief RX [SPIS_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_SPIS_DMA_RX_MATCH_Type MATCH;            /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_SPIS_DMA_RX_Type;

/* SPIS_DMA_RX_PTR: RAM buffer start address */
  #define SPIS_DMA_RX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define SPIS_DMA_RX_PTR_PTR_Pos (0UL)
  #define SPIS_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << SPIS_DMA_RX_PTR_PTR_Pos)


/* SPIS_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define SPIS_DMA_RX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define SPIS_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)
  #define SPIS_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIS_DMA_RX_MAXCNT_MAXCNT_Pos)
  #define SPIS_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define SPIS_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* SPIS_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define SPIS_DMA_RX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define SPIS_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)
  #define SPIS_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIS_DMA_RX_AMOUNT_AMOUNT_Pos)
  #define SPIS_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define SPIS_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* SPIS_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* SPIS_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define SPIS_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define SPIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define SPIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << SPIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct SPIS_DMA_TX ==================================================== */
/**
  * @brief TX [SPIS_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_SPIS_DMA_TX_Type;

/* SPIS_DMA_TX_PTR: RAM buffer start address */
  #define SPIS_DMA_TX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define SPIS_DMA_TX_PTR_PTR_Pos (0UL)
  #define SPIS_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << SPIS_DMA_TX_PTR_PTR_Pos)


/* SPIS_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define SPIS_DMA_TX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define SPIS_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)
  #define SPIS_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIS_DMA_TX_MAXCNT_MAXCNT_Pos)
  #define SPIS_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define SPIS_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* SPIS_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define SPIS_DMA_TX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define SPIS_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)
  #define SPIS_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIS_DMA_TX_AMOUNT_AMOUNT_Pos)
  #define SPIS_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define SPIS_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* SPIS_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* SPIS_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define SPIS_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define SPIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define SPIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << SPIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct SPIS_DMA ===================================================== */
/**
  * @brief DMA [SPIS_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_SPIS_DMA_RX_Type RX;
  __IOM NRF_SPIS_DMA_TX_Type TX;
} NRF_SPIS_DMA_Type;

/* ======================================================= Struct SPIS ======================================================= */
/**
  * @brief SPI Slave
  */
  typedef struct {
    __IM uint32_t RESERVED[5];
    __OM uint32_t TASKS_ACQUIRE;
    __OM uint32_t TASKS_RELEASE;                     /*!< (@ 0x00000018) Release SPI semaphore, enabling the SPI slave to
                                                                         acquire it*/
    __IM uint32_t RESERVED1[3];
    __OM NRF_SPIS_TASKS_DMA_Type TASKS_DMA;
    __IM uint32_t RESERVED2[17];
    __IOM uint32_t SUBSCRIBE_ACQUIRE;
    __IOM uint32_t SUBSCRIBE_RELEASE;
    __IM uint32_t RESERVED3[3];
    __IOM NRF_SPIS_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA;
    __IM uint32_t RESERVED4[13];
    __IOM uint32_t EVENTS_END;
    __IM uint32_t RESERVED5[4];
    __IOM uint32_t EVENTS_ACQUIRED;
    __IM uint32_t RESERVED6[12];
    __IOM NRF_SPIS_EVENTS_DMA_Type EVENTS_DMA;
    __IM uint32_t RESERVED7[4];
    __IOM uint32_t PUBLISH_END;
    __IM uint32_t RESERVED8[4];
    __IOM uint32_t PUBLISH_ACQUIRED;
    __IM uint32_t RESERVED9[12];
    __IOM NRF_SPIS_PUBLISH_DMA_Type PUBLISH_DMA;
    __IM uint32_t RESERVED10[3];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED11[64];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED12[61];
    __IM uint32_t SEMSTAT;
    __IM uint32_t RESERVED13[15];
    __IOM uint32_t STATUS;
    __IM uint32_t RESERVED14[47];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED15[20];
    __IOM uint32_t CONFIG;
    __IM uint32_t RESERVED16;
    __IOM uint32_t DEF;                              /*!< (@ 0x0000055C) Default character. Character clocked out in case of an
                                                                         ignored transaction.*/
    __IM uint32_t RESERVED17[24];
    __IOM uint32_t ORC;
    __IM uint32_t RESERVED18[15];
    __IOM NRF_SPIS_PSEL_Type PSEL;
    __IM uint32_t RESERVED19[59];
    __IOM NRF_SPIS_DMA_Type DMA;
  } NRF_SPIS_Type;

/* SPIS_TASKS_ACQUIRE: Acquire SPI semaphore */
  #define SPIS_TASKS_ACQUIRE_ResetValue (0x00000000UL)

/* TASKS_ACQUIRE @Bit 0 : Acquire SPI semaphore */
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Pos (0UL)
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Msk (0x1UL << SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Pos) /*!< Bit mask of TASKS_ACQUIRE
                                                                            field.*/
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Min (0x1UL)
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Max (0x1UL)
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Trigger (0x1UL)


/* SPIS_TASKS_RELEASE: Release SPI semaphore, enabling the SPI slave to acquire it */
  #define SPIS_TASKS_RELEASE_ResetValue (0x00000000UL)

/* TASKS_RELEASE @Bit 0 : Release SPI semaphore, enabling the SPI slave to acquire it */
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Pos (0UL)
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Msk (0x1UL << SPIS_TASKS_RELEASE_TASKS_RELEASE_Pos) /*!< Bit mask of TASKS_RELEASE
                                                                            field.*/
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Min (0x1UL)
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Max (0x1UL)
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Trigger (0x1UL)


/* SPIS_SUBSCRIBE_ACQUIRE: Subscribe configuration for task ACQUIRE */
  #define SPIS_SUBSCRIBE_ACQUIRE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ACQUIRE will subscribe to */
  #define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Pos (0UL)
  #define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Pos)
  #define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Min (0x00UL)
  #define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Pos (31UL)
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Msk (0x1UL << SPIS_SUBSCRIBE_ACQUIRE_EN_Pos)
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Min (0x0UL)
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Max (0x1UL)
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Disabled (0x0UL)
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Enabled (0x1UL)


/* SPIS_SUBSCRIBE_RELEASE: Subscribe configuration for task RELEASE */
  #define SPIS_SUBSCRIBE_RELEASE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RELEASE will subscribe to */
  #define SPIS_SUBSCRIBE_RELEASE_CHIDX_Pos (0UL)
  #define SPIS_SUBSCRIBE_RELEASE_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_RELEASE_CHIDX_Pos)
  #define SPIS_SUBSCRIBE_RELEASE_CHIDX_Min (0x00UL)
  #define SPIS_SUBSCRIBE_RELEASE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_SUBSCRIBE_RELEASE_EN_Pos (31UL)
  #define SPIS_SUBSCRIBE_RELEASE_EN_Msk (0x1UL << SPIS_SUBSCRIBE_RELEASE_EN_Pos)
  #define SPIS_SUBSCRIBE_RELEASE_EN_Min (0x0UL)
  #define SPIS_SUBSCRIBE_RELEASE_EN_Max (0x1UL)
  #define SPIS_SUBSCRIBE_RELEASE_EN_Disabled (0x0UL)
  #define SPIS_SUBSCRIBE_RELEASE_EN_Enabled (0x1UL)


/* SPIS_EVENTS_END: Granted transaction completed */
  #define SPIS_EVENTS_END_ResetValue (0x00000000UL)

/* EVENTS_END @Bit 0 : Granted transaction completed */
  #define SPIS_EVENTS_END_EVENTS_END_Pos (0UL)
  #define SPIS_EVENTS_END_EVENTS_END_Msk (0x1UL << SPIS_EVENTS_END_EVENTS_END_Pos)
  #define SPIS_EVENTS_END_EVENTS_END_Min (0x0UL)
  #define SPIS_EVENTS_END_EVENTS_END_Max (0x1UL)
  #define SPIS_EVENTS_END_EVENTS_END_NotGenerated (0x0UL)
  #define SPIS_EVENTS_END_EVENTS_END_Generated (0x1UL)


/* SPIS_EVENTS_ACQUIRED: Semaphore acquired */
  #define SPIS_EVENTS_ACQUIRED_ResetValue (0x00000000UL)

/* EVENTS_ACQUIRED @Bit 0 : Semaphore acquired */
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Pos (0UL)
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Msk (0x1UL << SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Pos) /*!< Bit mask of
                                                                            EVENTS_ACQUIRED field.*/
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Min (0x0UL)
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Max (0x1UL)
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_NotGenerated (0x0UL)
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Generated (0x1UL)


/* SPIS_PUBLISH_END: Publish configuration for event END */
  #define SPIS_PUBLISH_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIS_PUBLISH_END_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_END_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_END_CHIDX_Pos)
  #define SPIS_PUBLISH_END_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_END_EN_Pos (31UL)
  #define SPIS_PUBLISH_END_EN_Msk (0x1UL << SPIS_PUBLISH_END_EN_Pos)
  #define SPIS_PUBLISH_END_EN_Min (0x0UL)
  #define SPIS_PUBLISH_END_EN_Max (0x1UL)
  #define SPIS_PUBLISH_END_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_END_EN_Enabled (0x1UL)


/* SPIS_PUBLISH_ACQUIRED: Publish configuration for event ACQUIRED */
  #define SPIS_PUBLISH_ACQUIRED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ACQUIRED will publish to */
  #define SPIS_PUBLISH_ACQUIRED_CHIDX_Pos (0UL)
  #define SPIS_PUBLISH_ACQUIRED_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_ACQUIRED_CHIDX_Pos)
  #define SPIS_PUBLISH_ACQUIRED_CHIDX_Min (0x00UL)
  #define SPIS_PUBLISH_ACQUIRED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_ACQUIRED_EN_Pos (31UL)
  #define SPIS_PUBLISH_ACQUIRED_EN_Msk (0x1UL << SPIS_PUBLISH_ACQUIRED_EN_Pos)
  #define SPIS_PUBLISH_ACQUIRED_EN_Min (0x0UL)
  #define SPIS_PUBLISH_ACQUIRED_EN_Max (0x1UL)
  #define SPIS_PUBLISH_ACQUIRED_EN_Disabled (0x0UL)
  #define SPIS_PUBLISH_ACQUIRED_EN_Enabled (0x1UL)


/* SPIS_SHORTS: Shortcuts between local events and tasks */
  #define SPIS_SHORTS_ResetValue (0x00000000UL)

/* END_ACQUIRE @Bit 2 : Shortcut between event END and task ACQUIRE */
  #define SPIS_SHORTS_END_ACQUIRE_Pos (2UL)
  #define SPIS_SHORTS_END_ACQUIRE_Msk (0x1UL << SPIS_SHORTS_END_ACQUIRE_Pos)
  #define SPIS_SHORTS_END_ACQUIRE_Min (0x0UL)
  #define SPIS_SHORTS_END_ACQUIRE_Max (0x1UL)
  #define SPIS_SHORTS_END_ACQUIRE_Disabled (0x0UL)
  #define SPIS_SHORTS_END_ACQUIRE_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL)
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL)
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL)
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL)
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL)
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL)
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL)
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL)
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL)
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL)


/* SPIS_INTENSET: Enable interrupt */
  #define SPIS_INTENSET_ResetValue (0x00000000UL)

/* END @Bit 1 : Write '1' to enable interrupt for event END */
  #define SPIS_INTENSET_END_Pos (1UL)
  #define SPIS_INTENSET_END_Msk (0x1UL << SPIS_INTENSET_END_Pos)
  #define SPIS_INTENSET_END_Min (0x0UL)
  #define SPIS_INTENSET_END_Max (0x1UL)
  #define SPIS_INTENSET_END_Set (0x1UL)
  #define SPIS_INTENSET_END_Disabled (0x0UL)
  #define SPIS_INTENSET_END_Enabled (0x1UL)

/* ACQUIRED @Bit 6 : Write '1' to enable interrupt for event ACQUIRED */
  #define SPIS_INTENSET_ACQUIRED_Pos (6UL)
  #define SPIS_INTENSET_ACQUIRED_Msk (0x1UL << SPIS_INTENSET_ACQUIRED_Pos)
  #define SPIS_INTENSET_ACQUIRED_Min (0x0UL)
  #define SPIS_INTENSET_ACQUIRED_Max (0x1UL)
  #define SPIS_INTENSET_ACQUIRED_Set (0x1UL)
  #define SPIS_INTENSET_ACQUIRED_Disabled (0x0UL)
  #define SPIS_INTENSET_ACQUIRED_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define SPIS_INTENSET_DMARXEND_Pos (19UL)
  #define SPIS_INTENSET_DMARXEND_Msk (0x1UL << SPIS_INTENSET_DMARXEND_Pos)
  #define SPIS_INTENSET_DMARXEND_Min (0x0UL)
  #define SPIS_INTENSET_DMARXEND_Max (0x1UL)
  #define SPIS_INTENSET_DMARXEND_Set (0x1UL)
  #define SPIS_INTENSET_DMARXEND_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define SPIS_INTENSET_DMARXREADY_Pos (20UL)
  #define SPIS_INTENSET_DMARXREADY_Msk (0x1UL << SPIS_INTENSET_DMARXREADY_Pos)
  #define SPIS_INTENSET_DMARXREADY_Min (0x0UL)
  #define SPIS_INTENSET_DMARXREADY_Max (0x1UL)
  #define SPIS_INTENSET_DMARXREADY_Set (0x1UL)
  #define SPIS_INTENSET_DMARXREADY_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define SPIS_INTENSET_DMARXBUSERROR_Pos (21UL)
  #define SPIS_INTENSET_DMARXBUSERROR_Msk (0x1UL << SPIS_INTENSET_DMARXBUSERROR_Pos)
  #define SPIS_INTENSET_DMARXBUSERROR_Min (0x0UL)
  #define SPIS_INTENSET_DMARXBUSERROR_Max (0x1UL)
  #define SPIS_INTENSET_DMARXBUSERROR_Set (0x1UL)
  #define SPIS_INTENSET_DMARXBUSERROR_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define SPIS_INTENSET_DMARXMATCH0_Pos (22UL)
  #define SPIS_INTENSET_DMARXMATCH0_Msk (0x1UL << SPIS_INTENSET_DMARXMATCH0_Pos)
  #define SPIS_INTENSET_DMARXMATCH0_Min (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH0_Max (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH0_Set (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH0_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define SPIS_INTENSET_DMARXMATCH1_Pos (23UL)
  #define SPIS_INTENSET_DMARXMATCH1_Msk (0x1UL << SPIS_INTENSET_DMARXMATCH1_Pos)
  #define SPIS_INTENSET_DMARXMATCH1_Min (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH1_Max (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH1_Set (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH1_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define SPIS_INTENSET_DMARXMATCH2_Pos (24UL)
  #define SPIS_INTENSET_DMARXMATCH2_Msk (0x1UL << SPIS_INTENSET_DMARXMATCH2_Pos)
  #define SPIS_INTENSET_DMARXMATCH2_Min (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH2_Max (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH2_Set (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH2_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define SPIS_INTENSET_DMARXMATCH3_Pos (25UL)
  #define SPIS_INTENSET_DMARXMATCH3_Msk (0x1UL << SPIS_INTENSET_DMARXMATCH3_Pos)
  #define SPIS_INTENSET_DMARXMATCH3_Min (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH3_Max (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH3_Set (0x1UL)
  #define SPIS_INTENSET_DMARXMATCH3_Disabled (0x0UL)
  #define SPIS_INTENSET_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define SPIS_INTENSET_DMATXEND_Pos (26UL)
  #define SPIS_INTENSET_DMATXEND_Msk (0x1UL << SPIS_INTENSET_DMATXEND_Pos)
  #define SPIS_INTENSET_DMATXEND_Min (0x0UL)
  #define SPIS_INTENSET_DMATXEND_Max (0x1UL)
  #define SPIS_INTENSET_DMATXEND_Set (0x1UL)
  #define SPIS_INTENSET_DMATXEND_Disabled (0x0UL)
  #define SPIS_INTENSET_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define SPIS_INTENSET_DMATXREADY_Pos (27UL)
  #define SPIS_INTENSET_DMATXREADY_Msk (0x1UL << SPIS_INTENSET_DMATXREADY_Pos)
  #define SPIS_INTENSET_DMATXREADY_Min (0x0UL)
  #define SPIS_INTENSET_DMATXREADY_Max (0x1UL)
  #define SPIS_INTENSET_DMATXREADY_Set (0x1UL)
  #define SPIS_INTENSET_DMATXREADY_Disabled (0x0UL)
  #define SPIS_INTENSET_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define SPIS_INTENSET_DMATXBUSERROR_Pos (28UL)
  #define SPIS_INTENSET_DMATXBUSERROR_Msk (0x1UL << SPIS_INTENSET_DMATXBUSERROR_Pos)
  #define SPIS_INTENSET_DMATXBUSERROR_Min (0x0UL)
  #define SPIS_INTENSET_DMATXBUSERROR_Max (0x1UL)
  #define SPIS_INTENSET_DMATXBUSERROR_Set (0x1UL)
  #define SPIS_INTENSET_DMATXBUSERROR_Disabled (0x0UL)
  #define SPIS_INTENSET_DMATXBUSERROR_Enabled (0x1UL)


/* SPIS_INTENCLR: Disable interrupt */
  #define SPIS_INTENCLR_ResetValue (0x00000000UL)

/* END @Bit 1 : Write '1' to disable interrupt for event END */
  #define SPIS_INTENCLR_END_Pos (1UL)
  #define SPIS_INTENCLR_END_Msk (0x1UL << SPIS_INTENCLR_END_Pos)
  #define SPIS_INTENCLR_END_Min (0x0UL)
  #define SPIS_INTENCLR_END_Max (0x1UL)
  #define SPIS_INTENCLR_END_Clear (0x1UL)
  #define SPIS_INTENCLR_END_Disabled (0x0UL)
  #define SPIS_INTENCLR_END_Enabled (0x1UL)

/* ACQUIRED @Bit 6 : Write '1' to disable interrupt for event ACQUIRED */
  #define SPIS_INTENCLR_ACQUIRED_Pos (6UL)
  #define SPIS_INTENCLR_ACQUIRED_Msk (0x1UL << SPIS_INTENCLR_ACQUIRED_Pos)
  #define SPIS_INTENCLR_ACQUIRED_Min (0x0UL)
  #define SPIS_INTENCLR_ACQUIRED_Max (0x1UL)
  #define SPIS_INTENCLR_ACQUIRED_Clear (0x1UL)
  #define SPIS_INTENCLR_ACQUIRED_Disabled (0x0UL)
  #define SPIS_INTENCLR_ACQUIRED_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define SPIS_INTENCLR_DMARXEND_Pos (19UL)
  #define SPIS_INTENCLR_DMARXEND_Msk (0x1UL << SPIS_INTENCLR_DMARXEND_Pos)
  #define SPIS_INTENCLR_DMARXEND_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXEND_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXEND_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXEND_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define SPIS_INTENCLR_DMARXREADY_Pos (20UL)
  #define SPIS_INTENCLR_DMARXREADY_Msk (0x1UL << SPIS_INTENCLR_DMARXREADY_Pos)
  #define SPIS_INTENCLR_DMARXREADY_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXREADY_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXREADY_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXREADY_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define SPIS_INTENCLR_DMARXBUSERROR_Pos (21UL)
  #define SPIS_INTENCLR_DMARXBUSERROR_Msk (0x1UL << SPIS_INTENCLR_DMARXBUSERROR_Pos)
  #define SPIS_INTENCLR_DMARXBUSERROR_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXBUSERROR_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXBUSERROR_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXBUSERROR_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define SPIS_INTENCLR_DMARXMATCH0_Pos (22UL)
  #define SPIS_INTENCLR_DMARXMATCH0_Msk (0x1UL << SPIS_INTENCLR_DMARXMATCH0_Pos)
  #define SPIS_INTENCLR_DMARXMATCH0_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH0_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH0_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH0_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define SPIS_INTENCLR_DMARXMATCH1_Pos (23UL)
  #define SPIS_INTENCLR_DMARXMATCH1_Msk (0x1UL << SPIS_INTENCLR_DMARXMATCH1_Pos)
  #define SPIS_INTENCLR_DMARXMATCH1_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH1_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH1_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH1_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define SPIS_INTENCLR_DMARXMATCH2_Pos (24UL)
  #define SPIS_INTENCLR_DMARXMATCH2_Msk (0x1UL << SPIS_INTENCLR_DMARXMATCH2_Pos)
  #define SPIS_INTENCLR_DMARXMATCH2_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH2_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH2_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH2_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define SPIS_INTENCLR_DMARXMATCH3_Pos (25UL)
  #define SPIS_INTENCLR_DMARXMATCH3_Msk (0x1UL << SPIS_INTENCLR_DMARXMATCH3_Pos)
  #define SPIS_INTENCLR_DMARXMATCH3_Min (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH3_Max (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH3_Clear (0x1UL)
  #define SPIS_INTENCLR_DMARXMATCH3_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define SPIS_INTENCLR_DMATXEND_Pos (26UL)
  #define SPIS_INTENCLR_DMATXEND_Msk (0x1UL << SPIS_INTENCLR_DMATXEND_Pos)
  #define SPIS_INTENCLR_DMATXEND_Min (0x0UL)
  #define SPIS_INTENCLR_DMATXEND_Max (0x1UL)
  #define SPIS_INTENCLR_DMATXEND_Clear (0x1UL)
  #define SPIS_INTENCLR_DMATXEND_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define SPIS_INTENCLR_DMATXREADY_Pos (27UL)
  #define SPIS_INTENCLR_DMATXREADY_Msk (0x1UL << SPIS_INTENCLR_DMATXREADY_Pos)
  #define SPIS_INTENCLR_DMATXREADY_Min (0x0UL)
  #define SPIS_INTENCLR_DMATXREADY_Max (0x1UL)
  #define SPIS_INTENCLR_DMATXREADY_Clear (0x1UL)
  #define SPIS_INTENCLR_DMATXREADY_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define SPIS_INTENCLR_DMATXBUSERROR_Pos (28UL)
  #define SPIS_INTENCLR_DMATXBUSERROR_Msk (0x1UL << SPIS_INTENCLR_DMATXBUSERROR_Pos)
  #define SPIS_INTENCLR_DMATXBUSERROR_Min (0x0UL)
  #define SPIS_INTENCLR_DMATXBUSERROR_Max (0x1UL)
  #define SPIS_INTENCLR_DMATXBUSERROR_Clear (0x1UL)
  #define SPIS_INTENCLR_DMATXBUSERROR_Disabled (0x0UL)
  #define SPIS_INTENCLR_DMATXBUSERROR_Enabled (0x1UL)


/* SPIS_SEMSTAT: Semaphore status register */
  #define SPIS_SEMSTAT_ResetValue (0x00000001UL)

/* SEMSTAT @Bits 0..1 : Semaphore status */
  #define SPIS_SEMSTAT_SEMSTAT_Pos (0UL)
  #define SPIS_SEMSTAT_SEMSTAT_Msk (0x3UL << SPIS_SEMSTAT_SEMSTAT_Pos)
  #define SPIS_SEMSTAT_SEMSTAT_Min (0x0UL)
  #define SPIS_SEMSTAT_SEMSTAT_Max (0x3UL)
  #define SPIS_SEMSTAT_SEMSTAT_Free (0x0UL)
  #define SPIS_SEMSTAT_SEMSTAT_CPU (0x1UL)
  #define SPIS_SEMSTAT_SEMSTAT_SPIS (0x2UL)
  #define SPIS_SEMSTAT_SEMSTAT_CPUPending (0x3UL)


/* SPIS_STATUS: Status from last transaction */
  #define SPIS_STATUS_ResetValue (0x00000000UL)

/* OVERREAD @Bit 0 : TX buffer over-read detected, and prevented */
  #define SPIS_STATUS_OVERREAD_Pos (0UL)
  #define SPIS_STATUS_OVERREAD_Msk (0x1UL << SPIS_STATUS_OVERREAD_Pos)
  #define SPIS_STATUS_OVERREAD_Min (0x0UL)
  #define SPIS_STATUS_OVERREAD_Max (0x1UL)
  #define SPIS_STATUS_OVERREAD_NotPresent (0x0UL)
  #define SPIS_STATUS_OVERREAD_Present (0x1UL)
  #define SPIS_STATUS_OVERREAD_Clear (0x1UL)

/* OVERFLOW @Bit 1 : RX buffer overflow detected, and prevented */
  #define SPIS_STATUS_OVERFLOW_Pos (1UL)
  #define SPIS_STATUS_OVERFLOW_Msk (0x1UL << SPIS_STATUS_OVERFLOW_Pos)
  #define SPIS_STATUS_OVERFLOW_Min (0x0UL)
  #define SPIS_STATUS_OVERFLOW_Max (0x1UL)
  #define SPIS_STATUS_OVERFLOW_NotPresent (0x0UL)
  #define SPIS_STATUS_OVERFLOW_Present (0x1UL)
  #define SPIS_STATUS_OVERFLOW_Clear (0x1UL)


/* SPIS_ENABLE: Enable SPI slave */
  #define SPIS_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..3 : Enable or disable SPI slave */
  #define SPIS_ENABLE_ENABLE_Pos (0UL)
  #define SPIS_ENABLE_ENABLE_Msk (0xFUL << SPIS_ENABLE_ENABLE_Pos)
  #define SPIS_ENABLE_ENABLE_Min (0x0UL)
  #define SPIS_ENABLE_ENABLE_Max (0x2UL)
  #define SPIS_ENABLE_ENABLE_Disabled (0x0UL)
  #define SPIS_ENABLE_ENABLE_Enabled (0x2UL)


/* SPIS_CONFIG: Configuration register */
  #define SPIS_CONFIG_ResetValue (0x00000000UL)

/* ORDER @Bit 0 : Bit order */
  #define SPIS_CONFIG_ORDER_Pos (0UL)
  #define SPIS_CONFIG_ORDER_Msk (0x1UL << SPIS_CONFIG_ORDER_Pos)
  #define SPIS_CONFIG_ORDER_Min (0x0UL)
  #define SPIS_CONFIG_ORDER_Max (0x1UL)
  #define SPIS_CONFIG_ORDER_MsbFirst (0x0UL)
  #define SPIS_CONFIG_ORDER_LsbFirst (0x1UL)

/* CPHA @Bit 1 : Serial clock (SCK) phase */
  #define SPIS_CONFIG_CPHA_Pos (1UL)
  #define SPIS_CONFIG_CPHA_Msk (0x1UL << SPIS_CONFIG_CPHA_Pos)
  #define SPIS_CONFIG_CPHA_Min (0x0UL)
  #define SPIS_CONFIG_CPHA_Max (0x1UL)
  #define SPIS_CONFIG_CPHA_Leading (0x0UL)
  #define SPIS_CONFIG_CPHA_Trailing (0x1UL)

/* CPOL @Bit 2 : Serial clock (SCK) polarity */
  #define SPIS_CONFIG_CPOL_Pos (2UL)
  #define SPIS_CONFIG_CPOL_Msk (0x1UL << SPIS_CONFIG_CPOL_Pos)
  #define SPIS_CONFIG_CPOL_Min (0x0UL)
  #define SPIS_CONFIG_CPOL_Max (0x1UL)
  #define SPIS_CONFIG_CPOL_ActiveHigh (0x0UL)
  #define SPIS_CONFIG_CPOL_ActiveLow (0x1UL)


/* SPIS_DEF: Default character. Character clocked out in case of an ignored transaction. */
  #define SPIS_DEF_ResetValue (0x00000000UL)

/* DEF @Bits 0..7 : Default character. Character clocked out in case of an ignored transaction. */
  #define SPIS_DEF_DEF_Pos (0UL)
  #define SPIS_DEF_DEF_Msk (0xFFUL << SPIS_DEF_DEF_Pos)


/* SPIS_ORC: Over-read character */
  #define SPIS_ORC_ResetValue (0x00000000UL)

/* ORC @Bits 0..7 : Over-read character. Character clocked out after an over-read of the transmit buffer. */
  #define SPIS_ORC_ORC_Pos (0UL)
  #define SPIS_ORC_ORC_Msk (0xFFUL << SPIS_ORC_ORC_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            SPU                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct SPU_PERIPHACCERR ================================================= */
/**
  * @brief PERIPHACCERR [SPU_PERIPHACCERR] (unspecified)
  */
typedef struct {
  __IM  uint32_t  ADDRESS;
} NRF_SPU_PERIPHACCERR_Type;

/* SPU_PERIPHACCERR_ADDRESS: Address of the transaction that caused first error. */
  #define SPU_PERIPHACCERR_ADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..15 : Address */
  #define SPU_PERIPHACCERR_ADDRESS_ADDRESS_Pos (0UL)
  #define SPU_PERIPHACCERR_ADDRESS_ADDRESS_Msk (0xFFFFUL << SPU_PERIPHACCERR_ADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/



/* ==================================================== Struct SPU_PERIPH ==================================================== */
/**
  * @brief PERIPH [SPU_PERIPH] (unspecified)
  */
typedef struct {
  __IOM uint32_t  PERM;                              /*!< (@ 0x00000000) Get and set the applicable access permissions for the
                                                                         peripheral slave index n*/
} NRF_SPU_PERIPH_Type;
  #define SPU_PERIPH_MaxCount (64UL)
  #define SPU_PERIPH_MaxIndex (63UL)
  #define SPU_PERIPH_MinIndex (0UL)

/* SPU_PERIPH_PERM: Get and set the applicable access permissions for the peripheral slave index n */
  #define SPU_PERIPH_PERM_ResetValue (0x8000000AUL)

/* SECUREMAPPING @Bits 0..1 : Read capabilities for TrustZone Cortex-M secure attribute */
  #define SPU_PERIPH_PERM_SECUREMAPPING_Pos (0UL)
  #define SPU_PERIPH_PERM_SECUREMAPPING_Msk (0x3UL << SPU_PERIPH_PERM_SECUREMAPPING_Pos)
  #define SPU_PERIPH_PERM_SECUREMAPPING_Min (0x0UL)
  #define SPU_PERIPH_PERM_SECUREMAPPING_Max (0x3UL)
  #define SPU_PERIPH_PERM_SECUREMAPPING_NonSecure (0x0UL)
  #define SPU_PERIPH_PERM_SECUREMAPPING_Secure (0x1UL)
  #define SPU_PERIPH_PERM_SECUREMAPPING_UserSelectable (0x2UL) /*!< Non-secure or secure attribute for this peripheral is
                                                                    defined by the PERIPH[n].PERM register*/
  #define SPU_PERIPH_PERM_SECUREMAPPING_Split (0x3UL)

/* DMA @Bits 2..3 : Read the peripheral DMA capabilities */
  #define SPU_PERIPH_PERM_DMA_Pos (2UL)
  #define SPU_PERIPH_PERM_DMA_Msk (0x3UL << SPU_PERIPH_PERM_DMA_Pos)
  #define SPU_PERIPH_PERM_DMA_Min (0x0UL)
  #define SPU_PERIPH_PERM_DMA_Max (0x2UL)
  #define SPU_PERIPH_PERM_DMA_NoDMA (0x0UL)
  #define SPU_PERIPH_PERM_DMA_NoSeparateAttribute (0x1UL) /*!< Peripheral has DMA and DMA transfers always have the same
                                                               security attribute as assigned to the peripheral*/
  #define SPU_PERIPH_PERM_DMA_SeparateAttribute (0x2UL) /*!< Peripheral has DMA and DMA transfers can have a different security
                                                             attribute than the one assigned to the peripheral*/

/* SECATTR @Bit 4 : Peripheral security mapping */
  #define SPU_PERIPH_PERM_SECATTR_Pos (4UL)
  #define SPU_PERIPH_PERM_SECATTR_Msk (0x1UL << SPU_PERIPH_PERM_SECATTR_Pos)
  #define SPU_PERIPH_PERM_SECATTR_Min (0x0UL)
  #define SPU_PERIPH_PERM_SECATTR_Max (0x1UL)
  #define SPU_PERIPH_PERM_SECATTR_Secure (0x1UL)
  #define SPU_PERIPH_PERM_SECATTR_NonSecure (0x0UL)  /*!< If SECUREMAPPING == UserSelectable: Peripheral is mapped in non-secure
                                                          peripheral address space. If SECUREMAPPING == Split: Peripheral is
                                                          mapped in non-secure and secure peripheral address space.*/

/* DMASEC @Bit 5 : Security attribution for the DMA transfer */
  #define SPU_PERIPH_PERM_DMASEC_Pos (5UL)
  #define SPU_PERIPH_PERM_DMASEC_Msk (0x1UL << SPU_PERIPH_PERM_DMASEC_Pos)
  #define SPU_PERIPH_PERM_DMASEC_Min (0x0UL)
  #define SPU_PERIPH_PERM_DMASEC_Max (0x1UL)
  #define SPU_PERIPH_PERM_DMASEC_Secure (0x1UL)      /*!< DMA transfers initiated by this peripheral have the secure attribute
                                                          set*/
  #define SPU_PERIPH_PERM_DMASEC_NonSecure (0x0UL)   /*!< DMA transfers initiated by this peripheral have the non-secure
                                                          attribute set*/

/* LOCK @Bit 8 : Register lock */
  #define SPU_PERIPH_PERM_LOCK_Pos (8UL)
  #define SPU_PERIPH_PERM_LOCK_Msk (0x1UL << SPU_PERIPH_PERM_LOCK_Pos)
  #define SPU_PERIPH_PERM_LOCK_Min (0x0UL)
  #define SPU_PERIPH_PERM_LOCK_Max (0x1UL)
  #define SPU_PERIPH_PERM_LOCK_Unlocked (0x0UL)
  #define SPU_PERIPH_PERM_LOCK_Locked (0x1UL)

/* PRESENT @Bit 31 : Indicates if a peripheral is present with peripheral slave index n */
  #define SPU_PERIPH_PERM_PRESENT_Pos (31UL)
  #define SPU_PERIPH_PERM_PRESENT_Msk (0x1UL << SPU_PERIPH_PERM_PRESENT_Pos)
  #define SPU_PERIPH_PERM_PRESENT_Min (0x0UL)
  #define SPU_PERIPH_PERM_PRESENT_Max (0x1UL)
  #define SPU_PERIPH_PERM_PRESENT_NotPresent (0x0UL)
  #define SPU_PERIPH_PERM_PRESENT_IsPresent (0x1UL)



/* ================================================ Struct SPU_FEATURE_DPPIC ================================================= */
/**
  * @brief DPPIC [SPU_FEATURE_DPPIC] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CH[24];
  __IOM uint32_t  CHG[8];
} NRF_SPU_FEATURE_DPPIC_Type;

/* SPU_FEATURE_DPPIC_CH: Configuration of features for channel n of DPPIC */
  #define SPU_FEATURE_DPPIC_CH_MaxCount (24UL)
  #define SPU_FEATURE_DPPIC_CH_MaxIndex (23UL)
  #define SPU_FEATURE_DPPIC_CH_MinIndex (0UL)
  #define SPU_FEATURE_DPPIC_CH_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_DPPIC_CH_SECATTR_Pos (4UL)
  #define SPU_FEATURE_DPPIC_CH_SECATTR_Msk (0x1UL << SPU_FEATURE_DPPIC_CH_SECATTR_Pos)
  #define SPU_FEATURE_DPPIC_CH_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_DPPIC_CH_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_DPPIC_CH_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_DPPIC_CH_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_DPPIC_CH_LOCK_Pos (8UL)
  #define SPU_FEATURE_DPPIC_CH_LOCK_Msk (0x1UL << SPU_FEATURE_DPPIC_CH_LOCK_Pos)
  #define SPU_FEATURE_DPPIC_CH_LOCK_Min (0x0UL)
  #define SPU_FEATURE_DPPIC_CH_LOCK_Max (0x1UL)
  #define SPU_FEATURE_DPPIC_CH_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_DPPIC_CH_LOCK_Locked (0x1UL)


/* SPU_FEATURE_DPPIC_CHG: Configuration of features for channel group n of DPPIC */
  #define SPU_FEATURE_DPPIC_CHG_MaxCount (8UL)
  #define SPU_FEATURE_DPPIC_CHG_MaxIndex (7UL)
  #define SPU_FEATURE_DPPIC_CHG_MinIndex (0UL)
  #define SPU_FEATURE_DPPIC_CHG_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_DPPIC_CHG_SECATTR_Pos (4UL)
  #define SPU_FEATURE_DPPIC_CHG_SECATTR_Msk (0x1UL << SPU_FEATURE_DPPIC_CHG_SECATTR_Pos)
  #define SPU_FEATURE_DPPIC_CHG_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_DPPIC_CHG_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_DPPIC_CHG_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_DPPIC_CHG_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_DPPIC_CHG_LOCK_Pos (8UL)
  #define SPU_FEATURE_DPPIC_CHG_LOCK_Msk (0x1UL << SPU_FEATURE_DPPIC_CHG_LOCK_Pos)
  #define SPU_FEATURE_DPPIC_CHG_LOCK_Min (0x0UL)
  #define SPU_FEATURE_DPPIC_CHG_LOCK_Max (0x1UL)
  #define SPU_FEATURE_DPPIC_CHG_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_DPPIC_CHG_LOCK_Locked (0x1UL)



/* ================================================ Struct SPU_FEATURE_GPIOTE ================================================ */
/**
  * @brief GPIOTE [SPU_FEATURE_GPIOTE] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CH[8];
  __IOM uint32_t  INTERRUPT[8];
} NRF_SPU_FEATURE_GPIOTE_Type;
  #define SPU_FEATURE_GPIOTE_MaxCount (2UL)
  #define SPU_FEATURE_GPIOTE_MaxIndex (1UL)
  #define SPU_FEATURE_GPIOTE_MinIndex (0UL)

/* SPU_FEATURE_GPIOTE_CH: Configuration of features for channel o of GPIOTE[n] */
  #define SPU_FEATURE_GPIOTE_CH_MaxCount (8UL)
  #define SPU_FEATURE_GPIOTE_CH_MaxIndex (7UL)
  #define SPU_FEATURE_GPIOTE_CH_MinIndex (0UL)
  #define SPU_FEATURE_GPIOTE_CH_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GPIOTE_CH_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GPIOTE_CH_SECATTR_Msk (0x1UL << SPU_FEATURE_GPIOTE_CH_SECATTR_Pos)
  #define SPU_FEATURE_GPIOTE_CH_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GPIOTE_CH_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GPIOTE_CH_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GPIOTE_CH_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GPIOTE_CH_LOCK_Pos (8UL)
  #define SPU_FEATURE_GPIOTE_CH_LOCK_Msk (0x1UL << SPU_FEATURE_GPIOTE_CH_LOCK_Pos)
  #define SPU_FEATURE_GPIOTE_CH_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GPIOTE_CH_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GPIOTE_CH_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GPIOTE_CH_LOCK_Locked (0x1UL)


/* SPU_FEATURE_GPIOTE_INTERRUPT: Configuration of features for interrupt o of GPIOTE[n] */
  #define SPU_FEATURE_GPIOTE_INTERRUPT_MaxCount (8UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_MaxIndex (7UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_MinIndex (0UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_Msk (0x1UL << SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_Pos) /*!< Bit mask of SECATTR
                                                                            field.*/
  #define SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Pos (8UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Msk (0x1UL << SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Pos)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GPIOTE_INTERRUPT_LOCK_Locked (0x1UL)



/* ================================================= Struct SPU_FEATURE_GPIO ================================================= */
/**
  * @brief GPIO [SPU_FEATURE_GPIO] (unspecified)
  */
typedef struct {
  __IOM uint32_t  PIN[32];
} NRF_SPU_FEATURE_GPIO_Type;
  #define SPU_FEATURE_GPIO_MaxCount (4UL)
  #define SPU_FEATURE_GPIO_MaxIndex (3UL)
  #define SPU_FEATURE_GPIO_MinIndex (0UL)

/* SPU_FEATURE_GPIO_PIN: Configuration of features for GPIO[n] PIN[o] */
  #define SPU_FEATURE_GPIO_PIN_MaxCount (32UL)
  #define SPU_FEATURE_GPIO_PIN_MaxIndex (31UL)
  #define SPU_FEATURE_GPIO_PIN_MinIndex (0UL)
  #define SPU_FEATURE_GPIO_PIN_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GPIO_PIN_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GPIO_PIN_SECATTR_Msk (0x1UL << SPU_FEATURE_GPIO_PIN_SECATTR_Pos)
  #define SPU_FEATURE_GPIO_PIN_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GPIO_PIN_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GPIO_PIN_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GPIO_PIN_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GPIO_PIN_LOCK_Pos (8UL)
  #define SPU_FEATURE_GPIO_PIN_LOCK_Msk (0x1UL << SPU_FEATURE_GPIO_PIN_LOCK_Pos)
  #define SPU_FEATURE_GPIO_PIN_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GPIO_PIN_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GPIO_PIN_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GPIO_PIN_LOCK_Locked (0x1UL)



/* ================================================ Struct SPU_FEATURE_CRACEN ================================================ */
/**
  * @brief CRACEN [SPU_FEATURE_CRACEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SEED;
} NRF_SPU_FEATURE_CRACEN_Type;

/* SPU_FEATURE_CRACEN_SEED: Configuration for CRACEN SEED */
  #define SPU_FEATURE_CRACEN_SEED_ResetValue (0x00020010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_CRACEN_SEED_SECATTR_Pos (4UL)
  #define SPU_FEATURE_CRACEN_SEED_SECATTR_Msk (0x1UL << SPU_FEATURE_CRACEN_SEED_SECATTR_Pos)
  #define SPU_FEATURE_CRACEN_SEED_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_CRACEN_SEED_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_CRACEN_SEED_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_CRACEN_SEED_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_CRACEN_SEED_LOCK_Pos (8UL)
  #define SPU_FEATURE_CRACEN_SEED_LOCK_Msk (0x1UL << SPU_FEATURE_CRACEN_SEED_LOCK_Pos)
  #define SPU_FEATURE_CRACEN_SEED_LOCK_Min (0x0UL)
  #define SPU_FEATURE_CRACEN_SEED_LOCK_Max (0x1UL)
  #define SPU_FEATURE_CRACEN_SEED_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_CRACEN_SEED_LOCK_Locked (0x1UL)



/* ================================================= Struct SPU_FEATURE_GRTC ================================================= */
/**
  * @brief GRTC [SPU_FEATURE_GRTC] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CC[24];
  __IM  uint32_t  RESERVED[5];
  __IOM uint32_t  PWMCONFIG;
  __IOM uint32_t  CLK;
  __IOM uint32_t  SYSCOUNTER;                        /*!< (@ 0x0000007C) Configuration of features for SYSCOUNTERL/SYSCOUNTERH
                                                                         of GRTC*/
  __IOM uint32_t  INTERRUPT[16];
} NRF_SPU_FEATURE_GRTC_Type;

/* SPU_FEATURE_GRTC_CC: Configuration of features for CC n of GRTC */
  #define SPU_FEATURE_GRTC_CC_MaxCount (24UL)
  #define SPU_FEATURE_GRTC_CC_MaxIndex (23UL)
  #define SPU_FEATURE_GRTC_CC_MinIndex (0UL)
  #define SPU_FEATURE_GRTC_CC_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GRTC_CC_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GRTC_CC_SECATTR_Msk (0x1UL << SPU_FEATURE_GRTC_CC_SECATTR_Pos)
  #define SPU_FEATURE_GRTC_CC_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GRTC_CC_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GRTC_CC_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GRTC_CC_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GRTC_CC_LOCK_Pos (8UL)
  #define SPU_FEATURE_GRTC_CC_LOCK_Msk (0x1UL << SPU_FEATURE_GRTC_CC_LOCK_Pos)
  #define SPU_FEATURE_GRTC_CC_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GRTC_CC_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GRTC_CC_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GRTC_CC_LOCK_Locked (0x1UL)


/* SPU_FEATURE_GRTC_PWMCONFIG: Configuration of feature for PWMCONFIG of GRTC */
  #define SPU_FEATURE_GRTC_PWMCONFIG_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_Msk (0x1UL << SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_Pos) /*!< Bit mask of SECATTR
                                                                            field.*/
  #define SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Pos (8UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Msk (0x1UL << SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Pos)
  #define SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GRTC_PWMCONFIG_LOCK_Locked (0x1UL)


/* SPU_FEATURE_GRTC_CLK: Configuration of features for CLKOUT/CLKCFG of GRTC */
  #define SPU_FEATURE_GRTC_CLK_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GRTC_CLK_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GRTC_CLK_SECATTR_Msk (0x1UL << SPU_FEATURE_GRTC_CLK_SECATTR_Pos)
  #define SPU_FEATURE_GRTC_CLK_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GRTC_CLK_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GRTC_CLK_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GRTC_CLK_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GRTC_CLK_LOCK_Pos (8UL)
  #define SPU_FEATURE_GRTC_CLK_LOCK_Msk (0x1UL << SPU_FEATURE_GRTC_CLK_LOCK_Pos)
  #define SPU_FEATURE_GRTC_CLK_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GRTC_CLK_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GRTC_CLK_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GRTC_CLK_LOCK_Locked (0x1UL)


/* SPU_FEATURE_GRTC_SYSCOUNTER: Configuration of features for SYSCOUNTERL/SYSCOUNTERH of GRTC */
  #define SPU_FEATURE_GRTC_SYSCOUNTER_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_Msk (0x1UL << SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_Pos) /*!< Bit mask of SECATTR
                                                                            field.*/
  #define SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Pos (8UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Msk (0x1UL << SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Pos)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GRTC_SYSCOUNTER_LOCK_Locked (0x1UL)


/* SPU_FEATURE_GRTC_INTERRUPT: Configuration of features for interrupt n of GRTC */
  #define SPU_FEATURE_GRTC_INTERRUPT_MaxCount (16UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_MaxIndex (15UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_MinIndex (0UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_ResetValue (0x00100010UL)

/* SECATTR @Bit 4 : SECATTR feature */
  #define SPU_FEATURE_GRTC_INTERRUPT_SECATTR_Pos (4UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_SECATTR_Msk (0x1UL << SPU_FEATURE_GRTC_INTERRUPT_SECATTR_Pos) /*!< Bit mask of SECATTR
                                                                            field.*/
  #define SPU_FEATURE_GRTC_INTERRUPT_SECATTR_Min (0x0UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_SECATTR_Max (0x1UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_SECATTR_NonSecure (0x0UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_SECATTR_Secure (0x1UL)

/* LOCK @Bit 8 : LOCK feature */
  #define SPU_FEATURE_GRTC_INTERRUPT_LOCK_Pos (8UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_LOCK_Msk (0x1UL << SPU_FEATURE_GRTC_INTERRUPT_LOCK_Pos)
  #define SPU_FEATURE_GRTC_INTERRUPT_LOCK_Min (0x0UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_LOCK_Max (0x1UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_LOCK_Unlocked (0x0UL)
  #define SPU_FEATURE_GRTC_INTERRUPT_LOCK_Locked (0x1UL)



/* =================================================== Struct SPU_FEATURE ==================================================== */
/**
  * @brief FEATURE [SPU_FEATURE] (unspecified)
  */
typedef union {
  struct {
    __IM uint32_t RESERVED[32];
    __IOM NRF_SPU_FEATURE_DPPIC_Type DPPIC;
    __IOM NRF_SPU_FEATURE_GPIOTE_Type GPIOTE[2];
    __IM uint32_t RESERVED1[32];
    #if defined(_GNUC_)
      #pragma GCC diagnostic push
      #pragma GCC diagnostic ignored "-Wpedantic"
    #endif
    union {
      __IOM NRF_SPU_FEATURE_GPIO_Type GPIO[4];
      struct {
        __IM uint32_t RESERVED2[96];
        __IOM NRF_SPU_FEATURE_CRACEN_Type CRACEN;
      };
      __IM uint32_t RESERVED3[128];
    };
    #if defined(_GNUC_)
      #pragma GCC diagnostic pop
    #endif
    __IM uint32_t RESERVED4[192];
    __IOM NRF_SPU_FEATURE_GRTC_Type GRTC;
  };
} NRF_SPU_FEATURE_Type;

/* ======================================================= Struct SPU ======================================================== */
/**
  * @brief System protection unit
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_PERIPHACCERR;              /*!< (@ 0x00000100) A security violation has been detected on one or
                                                                         several peripherals*/
    __IM uint32_t RESERVED1[127];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED2[61];
    __IOM NRF_SPU_PERIPHACCERR_Type PERIPHACCERR;
    __IM uint32_t RESERVED3[62];
    __IOM NRF_SPU_PERIPH_Type PERIPH[64];
    __IOM NRF_SPU_FEATURE_Type FEATURE;
  } NRF_SPU_Type;

/* SPU_EVENTS_PERIPHACCERR: A security violation has been detected on one or several peripherals */
  #define SPU_EVENTS_PERIPHACCERR_ResetValue (0x00000000UL)

/* EVENTS_PERIPHACCERR @Bit 0 : A security violation has been detected on one or several peripherals */
  #define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Pos (0UL)
  #define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Msk (0x1UL << SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Pos) /*!< Bit
                                                                            mask of EVENTS_PERIPHACCERR field.*/
  #define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Min (0x0UL)
  #define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Max (0x1UL)
  #define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_NotGenerated (0x0UL)
  #define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Generated (0x1UL)


/* SPU_INTEN: Enable or disable interrupt */
  #define SPU_INTEN_ResetValue (0x00000000UL)

/* PERIPHACCERR @Bit 0 : Enable or disable interrupt for event PERIPHACCERR */
  #define SPU_INTEN_PERIPHACCERR_Pos (0UL)
  #define SPU_INTEN_PERIPHACCERR_Msk (0x1UL << SPU_INTEN_PERIPHACCERR_Pos)
  #define SPU_INTEN_PERIPHACCERR_Min (0x0UL)
  #define SPU_INTEN_PERIPHACCERR_Max (0x1UL)
  #define SPU_INTEN_PERIPHACCERR_Disabled (0x0UL)
  #define SPU_INTEN_PERIPHACCERR_Enabled (0x1UL)


/* SPU_INTENSET: Enable interrupt */
  #define SPU_INTENSET_ResetValue (0x00000000UL)

/* PERIPHACCERR @Bit 0 : Write '1' to enable interrupt for event PERIPHACCERR */
  #define SPU_INTENSET_PERIPHACCERR_Pos (0UL)
  #define SPU_INTENSET_PERIPHACCERR_Msk (0x1UL << SPU_INTENSET_PERIPHACCERR_Pos)
  #define SPU_INTENSET_PERIPHACCERR_Min (0x0UL)
  #define SPU_INTENSET_PERIPHACCERR_Max (0x1UL)
  #define SPU_INTENSET_PERIPHACCERR_Set (0x1UL)
  #define SPU_INTENSET_PERIPHACCERR_Disabled (0x0UL)
  #define SPU_INTENSET_PERIPHACCERR_Enabled (0x1UL)


/* SPU_INTENCLR: Disable interrupt */
  #define SPU_INTENCLR_ResetValue (0x00000000UL)

/* PERIPHACCERR @Bit 0 : Write '1' to disable interrupt for event PERIPHACCERR */
  #define SPU_INTENCLR_PERIPHACCERR_Pos (0UL)
  #define SPU_INTENCLR_PERIPHACCERR_Msk (0x1UL << SPU_INTENCLR_PERIPHACCERR_Pos)
  #define SPU_INTENCLR_PERIPHACCERR_Min (0x0UL)
  #define SPU_INTENCLR_PERIPHACCERR_Max (0x1UL)
  #define SPU_INTENCLR_PERIPHACCERR_Clear (0x1UL)
  #define SPU_INTENCLR_PERIPHACCERR_Disabled (0x0UL)
  #define SPU_INTENCLR_PERIPHACCERR_Enabled (0x1UL)


/* SPU_INTPEND: Pending interrupts */
  #define SPU_INTPEND_ResetValue (0x00000000UL)

/* PERIPHACCERR @Bit 0 : Read pending status of interrupt for event PERIPHACCERR */
  #define SPU_INTPEND_PERIPHACCERR_Pos (0UL)
  #define SPU_INTPEND_PERIPHACCERR_Msk (0x1UL << SPU_INTPEND_PERIPHACCERR_Pos)
  #define SPU_INTPEND_PERIPHACCERR_Min (0x0UL)
  #define SPU_INTPEND_PERIPHACCERR_Max (0x1UL)
  #define SPU_INTPEND_PERIPHACCERR_NotPending (0x0UL)
  #define SPU_INTPEND_PERIPHACCERR_Pending (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            SWI                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct SWI ======================================================== */
/**
  * @brief Software interrupt
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_SWI_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            TAD                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct TAD ======================================================== */
/**
  * @brief Trace and debug control
  */
  typedef struct {
    __IM uint32_t RESERVED[256];
    __IOM uint32_t SYSPWRUPREQ;
    __IOM uint32_t DBGPWRUPREQ;
    __IM uint32_t RESERVED1[62];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED2[5];
    __IOM uint32_t TRACEPORTSPEED;
    __IM uint32_t RESERVED3;
    __IOM uint32_t TINSTANCE;
  } NRF_TAD_Type;

/* TAD_SYSPWRUPREQ: System power-up request */
  #define TAD_SYSPWRUPREQ_ResetValue (0x00000000UL)

/* ACTIVE @Bit 0 : Activate power-up request */
  #define TAD_SYSPWRUPREQ_ACTIVE_Pos (0UL)
  #define TAD_SYSPWRUPREQ_ACTIVE_Msk (0x1UL << TAD_SYSPWRUPREQ_ACTIVE_Pos)
  #define TAD_SYSPWRUPREQ_ACTIVE_Min (0x0UL)
  #define TAD_SYSPWRUPREQ_ACTIVE_Max (0x1UL)
  #define TAD_SYSPWRUPREQ_ACTIVE_NotActive (0x0UL)
  #define TAD_SYSPWRUPREQ_ACTIVE_Active (0x1UL)


/* TAD_DBGPWRUPREQ: Debug power-up request */
  #define TAD_DBGPWRUPREQ_ResetValue (0x00000000UL)

/* ACTIVE @Bit 0 : Activate power-up request */
  #define TAD_DBGPWRUPREQ_ACTIVE_Pos (0UL)
  #define TAD_DBGPWRUPREQ_ACTIVE_Msk (0x1UL << TAD_DBGPWRUPREQ_ACTIVE_Pos)
  #define TAD_DBGPWRUPREQ_ACTIVE_Min (0x0UL)
  #define TAD_DBGPWRUPREQ_ACTIVE_Max (0x1UL)
  #define TAD_DBGPWRUPREQ_ACTIVE_NotActive (0x0UL)
  #define TAD_DBGPWRUPREQ_ACTIVE_Active (0x1UL)


/* TAD_ENABLE: Enable debug domain and aquire selected GPIOs */
  #define TAD_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define TAD_ENABLE_ENABLE_Pos (0UL)
  #define TAD_ENABLE_ENABLE_Msk (0x1UL << TAD_ENABLE_ENABLE_Pos)
  #define TAD_ENABLE_ENABLE_Min (0x0UL)
  #define TAD_ENABLE_ENABLE_Max (0x1UL)
  #define TAD_ENABLE_ENABLE_DISABLED (0x0UL)
  #define TAD_ENABLE_ENABLE_ENABLED (0x1UL)


/* TAD_TRACEPORTSPEED: Trace port speed */
  #define TAD_TRACEPORTSPEED_ResetValue (0x00000000UL)

/* TRACEPORTSPEED @Bits 0..1 : Trace port speed is divided from CPU clock. The TRACECLK pin output will be divided again by two
                               from the trace port clock. */

  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Pos (0UL)
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Msk (0x3UL << TAD_TRACEPORTSPEED_TRACEPORTSPEED_Pos) /*!< Bit mask of TRACEPORTSPEED
                                                                            field.*/
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Min (0x0UL)
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Max (0x3UL)
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_DIV1 (0x0UL)
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_DIV2 (0x1UL)
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_DIV4 (0x2UL)
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_DIV32 (0x3UL)


/* TAD_TINSTANCE: SW-DP Target instance */
  #define TAD_TINSTANCE_ResetValue (0x00000000UL)

/* TINSTANCE @Bits 0..3 : TINSTANCE bits are used in the SW-DP DLPIDR.TINSTANCE field. */
  #define TAD_TINSTANCE_TINSTANCE_Pos (0UL)
  #define TAD_TINSTANCE_TINSTANCE_Msk (0xFUL << TAD_TINSTANCE_TINSTANCE_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TAMPC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct TAMPC_ACTIVESHIELD ================================================ */
/**
  * @brief ACTIVESHIELD [TAMPC_ACTIVESHIELD] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CHEN;
} NRF_TAMPC_ACTIVESHIELD_Type;

/* TAMPC_ACTIVESHIELD_CHEN: Active shield detector channel enable register. */
  #define TAMPC_ACTIVESHIELD_CHEN_ResetValue (0x00000000UL)

/* CH0 @Bit 0 : Enable or disable active shield channel 0. */
  #define TAMPC_ACTIVESHIELD_CHEN_CH0_Pos (0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH0_Msk (0x1UL << TAMPC_ACTIVESHIELD_CHEN_CH0_Pos)
  #define TAMPC_ACTIVESHIELD_CHEN_CH0_Min (0x0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH0_Max (0x1UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH0_Disabled (0x0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH0_Enabled (0x1UL)

/* CH1 @Bit 1 : Enable or disable active shield channel 1. */
  #define TAMPC_ACTIVESHIELD_CHEN_CH1_Pos (1UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH1_Msk (0x1UL << TAMPC_ACTIVESHIELD_CHEN_CH1_Pos)
  #define TAMPC_ACTIVESHIELD_CHEN_CH1_Min (0x0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH1_Max (0x1UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH1_Disabled (0x0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH1_Enabled (0x1UL)

/* CH2 @Bit 2 : Enable or disable active shield channel 2. */
  #define TAMPC_ACTIVESHIELD_CHEN_CH2_Pos (2UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH2_Msk (0x1UL << TAMPC_ACTIVESHIELD_CHEN_CH2_Pos)
  #define TAMPC_ACTIVESHIELD_CHEN_CH2_Min (0x0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH2_Max (0x1UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH2_Disabled (0x0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH2_Enabled (0x1UL)

/* CH3 @Bit 3 : Enable or disable active shield channel 3. */
  #define TAMPC_ACTIVESHIELD_CHEN_CH3_Pos (3UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH3_Msk (0x1UL << TAMPC_ACTIVESHIELD_CHEN_CH3_Pos)
  #define TAMPC_ACTIVESHIELD_CHEN_CH3_Min (0x0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH3_Max (0x1UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH3_Disabled (0x0UL)
  #define TAMPC_ACTIVESHIELD_CHEN_CH3_Enabled (0x1UL)



/* ============================================ Struct TAMPC_PROTECT_DOMAIN_DBGEN ============================================ */
/**
  * @brief DBGEN [TAMPC_PROTECT_DOMAIN_DBGEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for invasive (halting) debug enable
                                                                         for the local debug components within domain n.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for invasive (halting) debug enable for
                                                                         domain n.*/
} NRF_TAMPC_PROTECT_DOMAIN_DBGEN_Type;

/* TAMPC_PROTECT_DOMAIN_DBGEN_CTRL: Control register for invasive (halting) debug enable for the local debug components within
                                     domain n. */

  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of dbgen signal. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_DOMAIN_DBGEN_STATUS: Status register for invasive (halting) debug enable for domain n. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Pos) /*!< Bit mask of
                                                                            ERROR field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Error (0x1UL)



/* ============================================ Struct TAMPC_PROTECT_DOMAIN_NIDEN ============================================ */
/**
  * @brief NIDEN [TAMPC_PROTECT_DOMAIN_NIDEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for non-invasive debug enable for the
                                                                         local debug components within domain n.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for non-invasive debug enable for
                                                                         domain n.*/
} NRF_TAMPC_PROTECT_DOMAIN_NIDEN_Type;

/* TAMPC_PROTECT_DOMAIN_NIDEN_CTRL: Control register for non-invasive debug enable for the local debug components within domain
                                     n. */

  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of niden signal. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_DOMAIN_NIDEN_STATUS: Status register for non-invasive debug enable for domain n. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Pos) /*!< Bit mask of
                                                                            ERROR field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Error (0x1UL)



/* =========================================== Struct TAMPC_PROTECT_DOMAIN_SPIDEN ============================================ */
/**
  * @brief SPIDEN [TAMPC_PROTECT_DOMAIN_SPIDEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for secure priviliged invasive
                                                                         (halting) debug enable for the local debug components
                                                                         within domain n.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for secure priviliged invasive
                                                                         (halting) debug enable for domain n.*/
} NRF_TAMPC_PROTECT_DOMAIN_SPIDEN_Type;

/* TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL: Control register for secure priviliged invasive (halting) debug enable for the local debug
                                      components within domain n. */

  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of spiden signal. */
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_Pos) /*!< Bit mask of
                                                                            VALUE field.*/
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS: Status register for secure priviliged invasive (halting) debug enable for domain n. */
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_Pos) /*!< Bit mask of
                                                                            ERROR field.*/
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPIDEN_STATUS_ERROR_Error (0x1UL)



/* =========================================== Struct TAMPC_PROTECT_DOMAIN_SPNIDEN =========================================== */
/**
  * @brief SPNIDEN [TAMPC_PROTECT_DOMAIN_SPNIDEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for secure priviliged non-invasive
                                                                         debug enable for the local debug components within
                                                                         domain n.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for secure priviliged non-invasive
                                                                         debug enable for domain n.*/
} NRF_TAMPC_PROTECT_DOMAIN_SPNIDEN_Type;

/* TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL: Control register for secure priviliged non-invasive debug enable for the local debug
                                       components within domain n. */

  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of spniden signal. */
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_Pos) /*!< Bit mask of
                                                                            VALUE field.*/
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS: Status register for secure priviliged non-invasive debug enable for domain n. */
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_Pos) /*!< Bit mask
                                                                            of ERROR field.*/
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_DOMAIN_SPNIDEN_STATUS_ERROR_Error (0x1UL)



/* =============================================== Struct TAMPC_PROTECT_DOMAIN =============================================== */
/**
  * @brief DOMAIN [TAMPC_PROTECT_DOMAIN] (unspecified)
  */
typedef struct {
  __IOM NRF_TAMPC_PROTECT_DOMAIN_DBGEN_Type DBGEN;
  __IOM NRF_TAMPC_PROTECT_DOMAIN_NIDEN_Type NIDEN;
  __IOM NRF_TAMPC_PROTECT_DOMAIN_SPIDEN_Type SPIDEN;
  __IOM NRF_TAMPC_PROTECT_DOMAIN_SPNIDEN_Type SPNIDEN;
} NRF_TAMPC_PROTECT_DOMAIN_Type;
  #define TAMPC_PROTECT_DOMAIN_MaxCount (1UL)
  #define TAMPC_PROTECT_DOMAIN_MaxIndex (0UL)
  #define TAMPC_PROTECT_DOMAIN_MinIndex (0UL)


/* ============================================== Struct TAMPC_PROTECT_AP_DBGEN ============================================== */
/**
  * @brief DBGEN [TAMPC_PROTECT_AP_DBGEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register to enable invasive (halting) debug in
                                                                         domain n's access port.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for invasive (halting) debug enable for
                                                                         domain n's access port.*/
} NRF_TAMPC_PROTECT_AP_DBGEN_Type;

/* TAMPC_PROTECT_AP_DBGEN_CTRL: Control register to enable invasive (halting) debug in domain n's access port. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of dbgen signal. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Pos)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Pos)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Pos) /*!< Bit
                                                                            mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Pos)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_AP_DBGEN_STATUS: Status register for invasive (halting) debug enable for domain n's access port. */
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Pos) /*!< Bit mask of ERROR
                                                                            field.*/
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Error (0x1UL)



/* ================================================= Struct TAMPC_PROTECT_AP ================================================= */
/**
  * @brief AP [TAMPC_PROTECT_AP] (unspecified)
  */
typedef struct {
  __IOM NRF_TAMPC_PROTECT_AP_DBGEN_Type DBGEN;
  __IM  uint32_t  RESERVED[2];
} NRF_TAMPC_PROTECT_AP_Type;
  #define TAMPC_PROTECT_AP_MaxCount (1UL)
  #define TAMPC_PROTECT_AP_MaxIndex (0UL)
  #define TAMPC_PROTECT_AP_MinIndex (0UL)


/* ============================================ Struct TAMPC_PROTECT_ACTIVESHIELD ============================================ */
/**
  * @brief ACTIVESHIELD [TAMPC_PROTECT_ACTIVESHIELD] Enable active shield detector.
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for active shield detector enable
                                                                         signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for active shield detector enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_ACTIVESHIELD_Type;

/* TAMPC_PROTECT_ACTIVESHIELD_CTRL: Control register for active shield detector enable signal. */
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of active shield enable signal. */
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_ACTIVESHIELD_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_ACTIVESHIELD_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_ACTIVESHIELD_STATUS: Status register for active shield detector enable signal. */
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_Pos) /*!< Bit mask of
                                                                            ERROR field.*/
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_ACTIVESHIELD_STATUS_ERROR_Error (0x1UL)



/* ============================================= Struct TAMPC_PROTECT_CRACENTAMP ============================================= */
/**
  * @brief CRACENTAMP [TAMPC_PROTECT_CRACENTAMP] Enable tamper detector from CRACEN.
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for CRACEN tamper detector enable
                                                                         signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for CRACEN tamper detector enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_CRACENTAMP_Type;

/* TAMPC_PROTECT_CRACENTAMP_CTRL: Control register for CRACEN tamper detector enable signal. */
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_ResetValue (0x00000011UL)

/* VALUE @Bit 0 : Set value of CRACEN tamper detector enable signal. */
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Pos)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Pos) /*!<
                                                                            Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_CRACENTAMP_CTRL_KEY_Pos)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_CRACENTAMP_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_CRACENTAMP_STATUS: Status register for CRACEN tamper detector enable signal. */
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_Pos) /*!< Bit mask of ERROR
                                                                            field.*/
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_CRACENTAMP_STATUS_ERROR_Error (0x1UL)



/* ========================================== Struct TAMPC_PROTECT_GLITCHSLOWDOMAIN ========================================== */
/**
  * @brief GLITCHSLOWDOMAIN [TAMPC_PROTECT_GLITCHSLOWDOMAIN] Enable slow domain glitch detectors.
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for slow domain glitch detectors
                                                                         enable signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for slow domain glitch detectors enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_GLITCHSLOWDOMAIN_Type;

/* TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL: Control register for slow domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_ResetValue (0x00000011UL)

/* VALUE @Bit 0 : Set value of slow domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Pos) /*!< Bit mask
                                                                            of VALUE field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Pos) /*!< Bit mask of
                                                                            LOCK field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Pos) /*!< Bit mask of
                                                                            KEY field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS: Status register for slow domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Pos) /*!< Bit
                                                                            mask of ERROR field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Error (0x1UL)



/* ========================================== Struct TAMPC_PROTECT_GLITCHFASTDOMAIN ========================================== */
/**
  * @brief GLITCHFASTDOMAIN [TAMPC_PROTECT_GLITCHFASTDOMAIN] Enable fast domain glitch detectors.
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for fast domain glitch detectors
                                                                         enable signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for fast domain glitch detectors enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_GLITCHFASTDOMAIN_Type;

/* TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL: Control register for fast domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_ResetValue (0x00000011UL)

/* VALUE @Bit 0 : Set value of fast domain glitch detector's enable signal. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Pos) /*!< Bit mask
                                                                            of VALUE field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Pos) /*!< Bit mask of
                                                                            LOCK field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Pos) /*!< Bit mask of
                                                                            KEY field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS: Status register for fast domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Pos) /*!< Bit
                                                                            mask of ERROR field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Error (0x1UL)



/* ============================================= Struct TAMPC_PROTECT_EXTRESETEN ============================================= */
/**
  * @brief EXTRESETEN [TAMPC_PROTECT_EXTRESETEN] Trigger a reset when tamper is detected by the external tamper detectors.
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for external tamper reset enable
                                                                         signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for external tamper reset enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_EXTRESETEN_Type;

/* TAMPC_PROTECT_EXTRESETEN_CTRL: Control register for external tamper reset enable signal. */
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of external tamper reset enable signal. */
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Pos)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Pos) /*!<
                                                                            Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_EXTRESETEN_CTRL_KEY_Pos)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_EXTRESETEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_EXTRESETEN_STATUS: Status register for external tamper reset enable signal. */
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_Pos) /*!< Bit mask of ERROR
                                                                            field.*/
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_EXTRESETEN_STATUS_ERROR_Error (0x1UL)



/* ============================================= Struct TAMPC_PROTECT_INTRESETEN ============================================= */
/**
  * @brief INTRESETEN [TAMPC_PROTECT_INTRESETEN] Trigger a reset when tamper is detected by the glitch detectors, signal
            protector or CRACEN tamper detector.

  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for internal tamper reset enable
                                                                         signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for internal tamper reset enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_INTRESETEN_Type;

/* TAMPC_PROTECT_INTRESETEN_CTRL: Control register for internal tamper reset enable signal. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_ResetValue (0x00000011UL)

/* VALUE @Bit 0 : Set value of internal tamper reset enable signal. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Pos)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Pos) /*!<
                                                                            Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Pos)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_INTRESETEN_STATUS: Status register for internal tamper reset enable signal. */
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Pos) /*!< Bit mask of ERROR
                                                                            field.*/
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Error (0x1UL)



/* ============================================ Struct TAMPC_PROTECT_ERASEPROTECT ============================================ */
/**
  * @brief ERASEPROTECT [TAMPC_PROTECT_ERASEPROTECT] Device erase protection.
  */
typedef struct {
  __IOM uint32_t  CTRL;
  __IOM uint32_t  STATUS;
} NRF_TAMPC_PROTECT_ERASEPROTECT_Type;

/* TAMPC_PROTECT_ERASEPROTECT_CTRL: Control register for erase protection. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_ResetValue (0x00000010UL)

/* VALUE @Bit 0 : Set value of eraseprotect signal. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Pos (0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Min (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Max (0x1UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Low (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_High (0x1UL)

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Pos (1UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Min (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Max (0x1UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Disabled (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Enabled (0x1UL)

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Pos (4UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Min (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Max (0xFUL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Disabled (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Enabled (0x1UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Clear (0xFUL)

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Pos (16UL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Min (0x50FAUL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Max (0x50FAUL)
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_KEY (0x50FAUL)


/* TAMPC_PROTECT_ERASEPROTECT_STATUS: Status register for eraseprotect. */
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ResetValue (0x00000000UL)

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Pos (0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Pos) /*!< Bit mask of
                                                                            ERROR field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Min (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Max (0x1UL)
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_NoError (0x0UL)
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Error (0x1UL)



/* ================================================== Struct TAMPC_PROTECT =================================================== */
/**
  * @brief PROTECT [TAMPC_PROTECT] (unspecified)
  */
typedef union {
  struct {
    __IOM NRF_TAMPC_PROTECT_DOMAIN_Type DOMAIN[1];
    __IM uint32_t RESERVED[120];
    __IOM NRF_TAMPC_PROTECT_AP_Type AP[1];
    __IM uint32_t RESERVED1[124];
    __IOM NRF_TAMPC_PROTECT_ACTIVESHIELD_Type ACTIVESHIELD;
    __IM uint32_t RESERVED2[12];
    __IOM NRF_TAMPC_PROTECT_CRACENTAMP_Type CRACENTAMP;
    __IOM NRF_TAMPC_PROTECT_GLITCHSLOWDOMAIN_Type GLITCHSLOWDOMAIN;
    __IOM NRF_TAMPC_PROTECT_GLITCHFASTDOMAIN_Type GLITCHFASTDOMAIN;
    __IM uint32_t RESERVED3[8];
    __IOM NRF_TAMPC_PROTECT_EXTRESETEN_Type EXTRESETEN; /*!< (@ 0x00000470) Trigger a reset when tamper is detected by the
                                                                            external tamper detectors.*/
    __IOM NRF_TAMPC_PROTECT_INTRESETEN_Type INTRESETEN; /*!< (@ 0x00000478) Trigger a reset when tamper is detected by the
                                                                            glitch detectors, signal protector or CRACEN tamper
                                                                            detector.*/
    __IOM NRF_TAMPC_PROTECT_ERASEPROTECT_Type ERASEPROTECT;
  };
} NRF_TAMPC_PROTECT_Type;

/* ====================================================== Struct TAMPC ======================================================= */
/**
  * @brief Tamper controller
  */
  typedef struct {
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_TAMPER;
    __IOM uint32_t EVENTS_WRITEERROR;                /*!< (@ 0x00000104) Attempt to write a VALUE in PROTECT registers without
                                                                         clearing the WRITEPROTECT.*/
    __IM uint32_t RESERVED1[126];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED2[60];
    __IOM uint32_t STATUS;
    __IOM NRF_TAMPC_ACTIVESHIELD_Type ACTIVESHIELD;
    __IM uint32_t RESERVED3[62];
    __IOM NRF_TAMPC_PROTECT_Type PROTECT;
  } NRF_TAMPC_Type;

/* TAMPC_EVENTS_TAMPER: Tamper controller detected an error. */
  #define TAMPC_EVENTS_TAMPER_ResetValue (0x00000000UL)

/* EVENTS_TAMPER @Bit 0 : Tamper controller detected an error. */
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Pos (0UL)
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Msk (0x1UL << TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Pos) /*!< Bit mask of EVENTS_TAMPER
                                                                            field.*/
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Min (0x0UL)
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Max (0x1UL)
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_NotGenerated (0x0UL)
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Generated (0x1UL)


/* TAMPC_EVENTS_WRITEERROR: Attempt to write a VALUE in PROTECT registers without clearing the WRITEPROTECT. */
  #define TAMPC_EVENTS_WRITEERROR_ResetValue (0x00000000UL)

/* EVENTS_WRITEERROR @Bit 0 : Attempt to write a VALUE in PROTECT registers without clearing the WRITEPROTECT. */
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Pos (0UL)
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Msk (0x1UL << TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Pos) /*!< Bit mask
                                                                            of EVENTS_WRITEERROR field.*/
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Min (0x0UL)
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Max (0x1UL)
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_NotGenerated (0x0UL)
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Generated (0x1UL)


/* TAMPC_INTEN: Enable or disable interrupt */
  #define TAMPC_INTEN_ResetValue (0x00000000UL)

/* TAMPER @Bit 0 : Enable or disable interrupt for event TAMPER */
  #define TAMPC_INTEN_TAMPER_Pos (0UL)
  #define TAMPC_INTEN_TAMPER_Msk (0x1UL << TAMPC_INTEN_TAMPER_Pos)
  #define TAMPC_INTEN_TAMPER_Min (0x0UL)
  #define TAMPC_INTEN_TAMPER_Max (0x1UL)
  #define TAMPC_INTEN_TAMPER_Disabled (0x0UL)
  #define TAMPC_INTEN_TAMPER_Enabled (0x1UL)

/* WRITEERROR @Bit 1 : Enable or disable interrupt for event WRITEERROR */
  #define TAMPC_INTEN_WRITEERROR_Pos (1UL)
  #define TAMPC_INTEN_WRITEERROR_Msk (0x1UL << TAMPC_INTEN_WRITEERROR_Pos)
  #define TAMPC_INTEN_WRITEERROR_Min (0x0UL)
  #define TAMPC_INTEN_WRITEERROR_Max (0x1UL)
  #define TAMPC_INTEN_WRITEERROR_Disabled (0x0UL)
  #define TAMPC_INTEN_WRITEERROR_Enabled (0x1UL)


/* TAMPC_INTENSET: Enable interrupt */
  #define TAMPC_INTENSET_ResetValue (0x00000000UL)

/* TAMPER @Bit 0 : Write '1' to enable interrupt for event TAMPER */
  #define TAMPC_INTENSET_TAMPER_Pos (0UL)
  #define TAMPC_INTENSET_TAMPER_Msk (0x1UL << TAMPC_INTENSET_TAMPER_Pos)
  #define TAMPC_INTENSET_TAMPER_Min (0x0UL)
  #define TAMPC_INTENSET_TAMPER_Max (0x1UL)
  #define TAMPC_INTENSET_TAMPER_Set (0x1UL)
  #define TAMPC_INTENSET_TAMPER_Disabled (0x0UL)
  #define TAMPC_INTENSET_TAMPER_Enabled (0x1UL)

/* WRITEERROR @Bit 1 : Write '1' to enable interrupt for event WRITEERROR */
  #define TAMPC_INTENSET_WRITEERROR_Pos (1UL)
  #define TAMPC_INTENSET_WRITEERROR_Msk (0x1UL << TAMPC_INTENSET_WRITEERROR_Pos)
  #define TAMPC_INTENSET_WRITEERROR_Min (0x0UL)
  #define TAMPC_INTENSET_WRITEERROR_Max (0x1UL)
  #define TAMPC_INTENSET_WRITEERROR_Set (0x1UL)
  #define TAMPC_INTENSET_WRITEERROR_Disabled (0x0UL)
  #define TAMPC_INTENSET_WRITEERROR_Enabled (0x1UL)


/* TAMPC_INTENCLR: Disable interrupt */
  #define TAMPC_INTENCLR_ResetValue (0x00000000UL)

/* TAMPER @Bit 0 : Write '1' to disable interrupt for event TAMPER */
  #define TAMPC_INTENCLR_TAMPER_Pos (0UL)
  #define TAMPC_INTENCLR_TAMPER_Msk (0x1UL << TAMPC_INTENCLR_TAMPER_Pos)
  #define TAMPC_INTENCLR_TAMPER_Min (0x0UL)
  #define TAMPC_INTENCLR_TAMPER_Max (0x1UL)
  #define TAMPC_INTENCLR_TAMPER_Clear (0x1UL)
  #define TAMPC_INTENCLR_TAMPER_Disabled (0x0UL)
  #define TAMPC_INTENCLR_TAMPER_Enabled (0x1UL)

/* WRITEERROR @Bit 1 : Write '1' to disable interrupt for event WRITEERROR */
  #define TAMPC_INTENCLR_WRITEERROR_Pos (1UL)
  #define TAMPC_INTENCLR_WRITEERROR_Msk (0x1UL << TAMPC_INTENCLR_WRITEERROR_Pos)
  #define TAMPC_INTENCLR_WRITEERROR_Min (0x0UL)
  #define TAMPC_INTENCLR_WRITEERROR_Max (0x1UL)
  #define TAMPC_INTENCLR_WRITEERROR_Clear (0x1UL)
  #define TAMPC_INTENCLR_WRITEERROR_Disabled (0x0UL)
  #define TAMPC_INTENCLR_WRITEERROR_Enabled (0x1UL)


/* TAMPC_INTPEND: Pending interrupts */
  #define TAMPC_INTPEND_ResetValue (0x00000000UL)

/* TAMPER @Bit 0 : Read pending status of interrupt for event TAMPER */
  #define TAMPC_INTPEND_TAMPER_Pos (0UL)
  #define TAMPC_INTPEND_TAMPER_Msk (0x1UL << TAMPC_INTPEND_TAMPER_Pos)
  #define TAMPC_INTPEND_TAMPER_Min (0x0UL)
  #define TAMPC_INTPEND_TAMPER_Max (0x1UL)
  #define TAMPC_INTPEND_TAMPER_NotPending (0x0UL)
  #define TAMPC_INTPEND_TAMPER_Pending (0x1UL)

/* WRITEERROR @Bit 1 : Read pending status of interrupt for event WRITEERROR */
  #define TAMPC_INTPEND_WRITEERROR_Pos (1UL)
  #define TAMPC_INTPEND_WRITEERROR_Msk (0x1UL << TAMPC_INTPEND_WRITEERROR_Pos)
  #define TAMPC_INTPEND_WRITEERROR_Min (0x0UL)
  #define TAMPC_INTPEND_WRITEERROR_Max (0x1UL)
  #define TAMPC_INTPEND_WRITEERROR_NotPending (0x0UL)
  #define TAMPC_INTPEND_WRITEERROR_Pending (0x1UL)


/* TAMPC_STATUS: The tamper controller status. */
  #define TAMPC_STATUS_ResetValue (0x00000000UL)

/* ACTIVESHIELD @Bit 0 : Active shield detector detected an error. */
  #define TAMPC_STATUS_ACTIVESHIELD_Pos (0UL)
  #define TAMPC_STATUS_ACTIVESHIELD_Msk (0x1UL << TAMPC_STATUS_ACTIVESHIELD_Pos)
  #define TAMPC_STATUS_ACTIVESHIELD_Min (0x0UL)
  #define TAMPC_STATUS_ACTIVESHIELD_Max (0x1UL)
  #define TAMPC_STATUS_ACTIVESHIELD_NotDetected (0x0UL)
  #define TAMPC_STATUS_ACTIVESHIELD_Detected (0x1UL)

/* PROTECT @Bit 4 : Error detected for the protected signals. */
  #define TAMPC_STATUS_PROTECT_Pos (4UL)
  #define TAMPC_STATUS_PROTECT_Msk (0x1UL << TAMPC_STATUS_PROTECT_Pos)
  #define TAMPC_STATUS_PROTECT_Min (0x0UL)
  #define TAMPC_STATUS_PROTECT_Max (0x1UL)
  #define TAMPC_STATUS_PROTECT_NotDetected (0x0UL)
  #define TAMPC_STATUS_PROTECT_Detected (0x1UL)

/* CRACENTAMP @Bit 5 : CRACEN detected an error. */
  #define TAMPC_STATUS_CRACENTAMP_Pos (5UL)
  #define TAMPC_STATUS_CRACENTAMP_Msk (0x1UL << TAMPC_STATUS_CRACENTAMP_Pos)
  #define TAMPC_STATUS_CRACENTAMP_Min (0x0UL)
  #define TAMPC_STATUS_CRACENTAMP_Max (0x1UL)
  #define TAMPC_STATUS_CRACENTAMP_NotDetected (0x0UL)
  #define TAMPC_STATUS_CRACENTAMP_Detected (0x1UL)

/* GLITCHSLOWDOMAIN0 @Bit 8 : Slow domain glitch detector 0 detected an error. */
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Pos (8UL)
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Msk (0x1UL << TAMPC_STATUS_GLITCHSLOWDOMAIN0_Pos) /*!< Bit mask of GLITCHSLOWDOMAIN0
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Min (0x0UL)
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Max (0x1UL)
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_NotDetected (0x0UL)
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Detected (0x1UL)

/* GLITCHFASTDOMAIN0 @Bit 12 : Fast domain glitch detector 0 detected an error. */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Pos (12UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Msk (0x1UL << TAMPC_STATUS_GLITCHFASTDOMAIN0_Pos) /*!< Bit mask of GLITCHFASTDOMAIN0
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Min (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Max (0x1UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_NotDetected (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Detected (0x1UL)

/* GLITCHFASTDOMAIN1 @Bit 13 : Fast domain glitch detector 1 detected an error. */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Pos (13UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Msk (0x1UL << TAMPC_STATUS_GLITCHFASTDOMAIN1_Pos) /*!< Bit mask of GLITCHFASTDOMAIN1
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Min (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Max (0x1UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_NotDetected (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Detected (0x1UL)

/* GLITCHFASTDOMAIN2 @Bit 14 : Fast domain glitch detector 2 detected an error. */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Pos (14UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Msk (0x1UL << TAMPC_STATUS_GLITCHFASTDOMAIN2_Pos) /*!< Bit mask of GLITCHFASTDOMAIN2
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Min (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Max (0x1UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_NotDetected (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Detected (0x1UL)

/* GLITCHFASTDOMAIN3 @Bit 15 : Fast domain glitch detector 3 detected an error. */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Pos (15UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Msk (0x1UL << TAMPC_STATUS_GLITCHFASTDOMAIN3_Pos) /*!< Bit mask of GLITCHFASTDOMAIN3
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Min (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Max (0x1UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_NotDetected (0x0UL)
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Detected (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            TDM                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct TDM_CONFIG_MCK ================================================== */
/**
  * @brief MCK [TDM_CONFIG_MCK] (unspecified)
  */
typedef struct {
  __IOM uint32_t  EN;
  __IOM uint32_t  DIV;
  __IOM uint32_t  SRC;
} NRF_TDM_CONFIG_MCK_Type;

/* TDM_CONFIG_MCK_EN: Master clock generator enable. */
  #define TDM_CONFIG_MCK_EN_ResetValue (0x00000000UL)

/* MCKEN @Bit 0 : Master clock generator enable. */
  #define TDM_CONFIG_MCK_EN_MCKEN_Pos (0UL)
  #define TDM_CONFIG_MCK_EN_MCKEN_Msk (0x1UL << TDM_CONFIG_MCK_EN_MCKEN_Pos)
  #define TDM_CONFIG_MCK_EN_MCKEN_Min (0x0UL)
  #define TDM_CONFIG_MCK_EN_MCKEN_Max (0x1UL)
  #define TDM_CONFIG_MCK_EN_MCKEN_Disabled (0x0UL)
  #define TDM_CONFIG_MCK_EN_MCKEN_Enabled (0x1UL)


/* TDM_CONFIG_MCK_DIV: MCK divider. */
  #define TDM_CONFIG_MCK_DIV_ResetValue (0x00000000UL)

/* DIV @Bits 0..31 : MCK frequency configuration */
  #define TDM_CONFIG_MCK_DIV_DIV_Pos (0UL)
  #define TDM_CONFIG_MCK_DIV_DIV_Msk (0xFFFFFFFFUL << TDM_CONFIG_MCK_DIV_DIV_Pos)
  #define TDM_CONFIG_MCK_DIV_DIV_Min (0x20C0000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_Max (0x80000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV2 (0x80000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV3 (0x50000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV4 (0x40000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV5 (0x30000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV6 (0x28000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV8 (0x20000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV10 (0x18000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV11 (0x16000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV15 (0x11000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV16 (0x10000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV21 (0x0C000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV23 (0x0B000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV30 (0x08800000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV31 (0x08400000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV32 (0x08000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV42 (0x06000000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV63 (0x04100000UL)
  #define TDM_CONFIG_MCK_DIV_DIV_CKDIV125 (0x020C0000UL)


/* TDM_CONFIG_MCK_SRC: MCK clock source selection */
  #define TDM_CONFIG_MCK_SRC_ResetValue (0x00000000UL)

/* CLKSRC @Bit 0 : Clock source selection */
  #define TDM_CONFIG_MCK_SRC_CLKSRC_Pos (0UL)
  #define TDM_CONFIG_MCK_SRC_CLKSRC_Msk (0x1UL << TDM_CONFIG_MCK_SRC_CLKSRC_Pos)
  #define TDM_CONFIG_MCK_SRC_CLKSRC_Min (0x0UL)
  #define TDM_CONFIG_MCK_SRC_CLKSRC_Max (0x1UL)
  #define TDM_CONFIG_MCK_SRC_CLKSRC_PCLK32M (0x0UL)
  #define TDM_CONFIG_MCK_SRC_CLKSRC_ACLK (0x1UL)

/* BYPASS @Bit 8 : Bypass clock generator. MCK will be equal to source input. If bypass is enabled the MCKFREQ setting has no
                   effect. */

  #define TDM_CONFIG_MCK_SRC_BYPASS_Pos (8UL)
  #define TDM_CONFIG_MCK_SRC_BYPASS_Msk (0x1UL << TDM_CONFIG_MCK_SRC_BYPASS_Pos)
  #define TDM_CONFIG_MCK_SRC_BYPASS_Min (0x0UL)
  #define TDM_CONFIG_MCK_SRC_BYPASS_Max (0x1UL)
  #define TDM_CONFIG_MCK_SRC_BYPASS_Disable (0x0UL)
  #define TDM_CONFIG_MCK_SRC_BYPASS_Enable (0x1UL)



/* ================================================== Struct TDM_CONFIG_SCK ================================================== */
/**
  * @brief SCK [TDM_CONFIG_SCK] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DIV;
  __IOM uint32_t  SRC;
  __IOM uint32_t  POLARITY;
} NRF_TDM_CONFIG_SCK_Type;

/* TDM_CONFIG_SCK_DIV: SCK divider. */
  #define TDM_CONFIG_SCK_DIV_ResetValue (0x00000000UL)

/* SCKDIV @Bits 0..31 : SCK frequency configuration */
  #define TDM_CONFIG_SCK_DIV_SCKDIV_Pos (0UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_Msk (0xFFFFFFFFUL << TDM_CONFIG_SCK_DIV_SCKDIV_Pos)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_Min (0x20C0000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_Max (0x80000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV2 (0x80000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV3 (0x50000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV4 (0x40000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV5 (0x30000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV6 (0x28000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV8 (0x20000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV10 (0x18000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV11 (0x16000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV15 (0x11000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV16 (0x10000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV21 (0x0C000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV23 (0x0B000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV30 (0x08800000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV31 (0x08400000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV32 (0x08000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV42 (0x06000000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV63 (0x04100000UL)
  #define TDM_CONFIG_SCK_DIV_SCKDIV_CKDIV125 (0x020C0000UL)


/* TDM_CONFIG_SCK_SRC: SCK clock source selection */
  #define TDM_CONFIG_SCK_SRC_ResetValue (0x00000000UL)

/* CLKSRC @Bit 0 : Clock source selection */
  #define TDM_CONFIG_SCK_SRC_CLKSRC_Pos (0UL)
  #define TDM_CONFIG_SCK_SRC_CLKSRC_Msk (0x1UL << TDM_CONFIG_SCK_SRC_CLKSRC_Pos)
  #define TDM_CONFIG_SCK_SRC_CLKSRC_Min (0x0UL)
  #define TDM_CONFIG_SCK_SRC_CLKSRC_Max (0x1UL)
  #define TDM_CONFIG_SCK_SRC_CLKSRC_PCLK32M (0x0UL)
  #define TDM_CONFIG_SCK_SRC_CLKSRC_ACLK (0x1UL)

/* BYPASS @Bit 8 : Bypass clock generator. SCK will be equal to source input. If bypass is enabled the SCKFREQ setting has no
                   effect. */

  #define TDM_CONFIG_SCK_SRC_BYPASS_Pos (8UL)
  #define TDM_CONFIG_SCK_SRC_BYPASS_Msk (0x1UL << TDM_CONFIG_SCK_SRC_BYPASS_Pos)
  #define TDM_CONFIG_SCK_SRC_BYPASS_Min (0x0UL)
  #define TDM_CONFIG_SCK_SRC_BYPASS_Max (0x1UL)
  #define TDM_CONFIG_SCK_SRC_BYPASS_Disable (0x0UL)
  #define TDM_CONFIG_SCK_SRC_BYPASS_Enable (0x1UL)


/* TDM_CONFIG_SCK_POLARITY: Set SCK Polarity. */
  #define TDM_CONFIG_SCK_POLARITY_ResetValue (0x00000000UL)

/* SCKPOLARITY @Bit 0 : Set the polarity of the active SCK edge. */
  #define TDM_CONFIG_SCK_POLARITY_SCKPOLARITY_Pos (0UL)
  #define TDM_CONFIG_SCK_POLARITY_SCKPOLARITY_Msk (0x1UL << TDM_CONFIG_SCK_POLARITY_SCKPOLARITY_Pos) /*!< Bit mask of
                                                                            SCKPOLARITY field.*/
  #define TDM_CONFIG_SCK_POLARITY_SCKPOLARITY_Min (0x0UL)
  #define TDM_CONFIG_SCK_POLARITY_SCKPOLARITY_Max (0x1UL)
  #define TDM_CONFIG_SCK_POLARITY_SCKPOLARITY_PosEdge (0x0UL) /*!< TX data is written to the SDOUT pin on the falling edge of
                                                                   SCK, ready to be received on the rising edge of SCK.*/
  #define TDM_CONFIG_SCK_POLARITY_SCKPOLARITY_NegEdge (0x1UL) /*!< TX data is written to the SDOUT pin on the rising edge of
                                                                   SCK, ready to be received on the falling edge of SCK.*/



/* ================================================ Struct TDM_CONFIG_CHANNEL ================================================ */
/**
  * @brief CHANNEL [TDM_CONFIG_CHANNEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  MASK;
  __IOM uint32_t  NUM;
  __IOM uint32_t  DELAY;
} NRF_TDM_CONFIG_CHANNEL_Type;

/* TDM_CONFIG_CHANNEL_MASK: Select which channels are to be used. */
  #define TDM_CONFIG_CHANNEL_MASK_ResetValue (0x00FF00FFUL)

/* Rx0Enable @Bit 0 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Rx0Enable_Pos (0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx0Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Rx0Enable_Pos) /*!< Bit mask of Rx0Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Rx0Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx0Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx0Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx0Enable_Enable (0x1UL)

/* Rx1Enable @Bit 1 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Rx1Enable_Pos (1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx1Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Rx1Enable_Pos) /*!< Bit mask of Rx1Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Rx1Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx1Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx1Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx1Enable_Enable (0x1UL)

/* Rx2Enable @Bit 2 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Rx2Enable_Pos (2UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx2Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Rx2Enable_Pos) /*!< Bit mask of Rx2Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Rx2Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx2Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx2Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx2Enable_Enable (0x1UL)

/* Rx3Enable @Bit 3 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Rx3Enable_Pos (3UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx3Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Rx3Enable_Pos) /*!< Bit mask of Rx3Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Rx3Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx3Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx3Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx3Enable_Enable (0x1UL)

/* Rx4Enable @Bit 4 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Rx4Enable_Pos (4UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx4Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Rx4Enable_Pos) /*!< Bit mask of Rx4Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Rx4Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx4Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx4Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx4Enable_Enable (0x1UL)

/* Rx5Enable @Bit 5 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Rx5Enable_Pos (5UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx5Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Rx5Enable_Pos) /*!< Bit mask of Rx5Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Rx5Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx5Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx5Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx5Enable_Enable (0x1UL)

/* Rx6Enable @Bit 6 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Rx6Enable_Pos (6UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx6Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Rx6Enable_Pos) /*!< Bit mask of Rx6Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Rx6Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx6Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx6Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx6Enable_Enable (0x1UL)

/* Rx7Enable @Bit 7 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Rx7Enable_Pos (7UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx7Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Rx7Enable_Pos) /*!< Bit mask of Rx7Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Rx7Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx7Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx7Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Rx7Enable_Enable (0x1UL)

/* Tx0Enable @Bit 16 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Tx0Enable_Pos (16UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx0Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Tx0Enable_Pos) /*!< Bit mask of Tx0Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Tx0Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx0Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx0Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx0Enable_Enable (0x1UL)

/* Tx1Enable @Bit 17 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Tx1Enable_Pos (17UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx1Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Tx1Enable_Pos) /*!< Bit mask of Tx1Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Tx1Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx1Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx1Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx1Enable_Enable (0x1UL)

/* Tx2Enable @Bit 18 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Tx2Enable_Pos (18UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx2Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Tx2Enable_Pos) /*!< Bit mask of Tx2Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Tx2Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx2Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx2Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx2Enable_Enable (0x1UL)

/* Tx3Enable @Bit 19 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Tx3Enable_Pos (19UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx3Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Tx3Enable_Pos) /*!< Bit mask of Tx3Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Tx3Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx3Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx3Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx3Enable_Enable (0x1UL)

/* Tx4Enable @Bit 20 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Tx4Enable_Pos (20UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx4Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Tx4Enable_Pos) /*!< Bit mask of Tx4Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Tx4Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx4Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx4Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx4Enable_Enable (0x1UL)

/* Tx5Enable @Bit 21 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Tx5Enable_Pos (21UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx5Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Tx5Enable_Pos) /*!< Bit mask of Tx5Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Tx5Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx5Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx5Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx5Enable_Enable (0x1UL)

/* Tx6Enable @Bit 22 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Tx6Enable_Pos (22UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx6Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Tx6Enable_Pos) /*!< Bit mask of Tx6Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Tx6Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx6Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx6Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx6Enable_Enable (0x1UL)

/* Tx7Enable @Bit 23 : (unspecified) */
  #define TDM_CONFIG_CHANNEL_MASK_Tx7Enable_Pos (23UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx7Enable_Msk (0x1UL << TDM_CONFIG_CHANNEL_MASK_Tx7Enable_Pos) /*!< Bit mask of Tx7Enable
                                                                            field.*/
  #define TDM_CONFIG_CHANNEL_MASK_Tx7Enable_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx7Enable_Max (0x1UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx7Enable_Disable (0x0UL)
  #define TDM_CONFIG_CHANNEL_MASK_Tx7Enable_Enable (0x1UL)


/* TDM_CONFIG_CHANNEL_NUM: Select number of channels. */
  #define TDM_CONFIG_CHANNEL_NUM_ResetValue (0x00000001UL)

/* NUM @Bits 0..3 : Select number of channels. */
  #define TDM_CONFIG_CHANNEL_NUM_NUM_Pos (0UL)
  #define TDM_CONFIG_CHANNEL_NUM_NUM_Msk (0xFUL << TDM_CONFIG_CHANNEL_NUM_NUM_Pos)
  #define TDM_CONFIG_CHANNEL_NUM_NUM_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_NUM_NUM_Max (0x7UL)
  #define TDM_CONFIG_CHANNEL_NUM_NUM_Tdm1Ch (0x0UL)
  #define TDM_CONFIG_CHANNEL_NUM_NUM_Tdm2Ch (0x1UL)
  #define TDM_CONFIG_CHANNEL_NUM_NUM_Tdm3Ch (0x2UL)
  #define TDM_CONFIG_CHANNEL_NUM_NUM_Tdm4Ch (0x3UL)
  #define TDM_CONFIG_CHANNEL_NUM_NUM_Tdm5Ch (0x4UL)
  #define TDM_CONFIG_CHANNEL_NUM_NUM_Tdm6Ch (0x5UL)
  #define TDM_CONFIG_CHANNEL_NUM_NUM_Tdm7Ch (0x6UL)
  #define TDM_CONFIG_CHANNEL_NUM_NUM_Tdm8Ch (0x7UL)


/* TDM_CONFIG_CHANNEL_DELAY: Set channel delay. */
  #define TDM_CONFIG_CHANNEL_DELAY_ResetValue (0x00000001UL)

/* DELAY @Bits 0..1 : Configure number of inactive SCK periods from edge of FSYNC until start of first data bit. */
  #define TDM_CONFIG_CHANNEL_DELAY_DELAY_Pos (0UL)
  #define TDM_CONFIG_CHANNEL_DELAY_DELAY_Msk (0x3UL << TDM_CONFIG_CHANNEL_DELAY_DELAY_Pos)
  #define TDM_CONFIG_CHANNEL_DELAY_DELAY_Min (0x0UL)
  #define TDM_CONFIG_CHANNEL_DELAY_DELAY_Max (0x2UL)
  #define TDM_CONFIG_CHANNEL_DELAY_DELAY_Delay0Ck (0x0UL)
  #define TDM_CONFIG_CHANNEL_DELAY_DELAY_Delay1Ck (0x1UL)
  #define TDM_CONFIG_CHANNEL_DELAY_DELAY_Delay2Ck (0x2UL)



/* ================================================= Struct TDM_CONFIG_FSYNC ================================================= */
/**
  * @brief FSYNC [TDM_CONFIG_FSYNC] (unspecified)
  */
typedef struct {
  __IOM uint32_t  POLARITY;
  __IOM uint32_t  DURATION;
} NRF_TDM_CONFIG_FSYNC_Type;

/* TDM_CONFIG_FSYNC_POLARITY: Set FSYNC Polarity. */
  #define TDM_CONFIG_FSYNC_POLARITY_ResetValue (0x00000000UL)

/* POLARITY @Bit 0 : Set the polarity of the active period of FSYNC. */
  #define TDM_CONFIG_FSYNC_POLARITY_POLARITY_Pos (0UL)
  #define TDM_CONFIG_FSYNC_POLARITY_POLARITY_Msk (0x1UL << TDM_CONFIG_FSYNC_POLARITY_POLARITY_Pos) /*!< Bit mask of POLARITY
                                                                            field.*/
  #define TDM_CONFIG_FSYNC_POLARITY_POLARITY_Min (0x0UL)
  #define TDM_CONFIG_FSYNC_POLARITY_POLARITY_Max (0x1UL)
  #define TDM_CONFIG_FSYNC_POLARITY_POLARITY_NegEdge (0x0UL)
  #define TDM_CONFIG_FSYNC_POLARITY_POLARITY_PosEdge (0x1UL)


/* TDM_CONFIG_FSYNC_DURATION: Set FSYNC Duration. */
  #define TDM_CONFIG_FSYNC_DURATION_ResetValue (0x00000001UL)

/* DURATION @Bit 0 : Set the duration of the active period of FSYNC in Master mode. */
  #define TDM_CONFIG_FSYNC_DURATION_DURATION_Pos (0UL)
  #define TDM_CONFIG_FSYNC_DURATION_DURATION_Msk (0x1UL << TDM_CONFIG_FSYNC_DURATION_DURATION_Pos) /*!< Bit mask of DURATION
                                                                            field.*/
  #define TDM_CONFIG_FSYNC_DURATION_DURATION_Min (0x0UL)
  #define TDM_CONFIG_FSYNC_DURATION_DURATION_Max (0x1UL)
  #define TDM_CONFIG_FSYNC_DURATION_DURATION_Sck (0x0UL)
  #define TDM_CONFIG_FSYNC_DURATION_DURATION_Channel (0x1UL)



/* ==================================================== Struct TDM_CONFIG ==================================================== */
/**
  * @brief CONFIG [TDM_CONFIG] Configuration registers.
  */
typedef struct {
  __IOM uint32_t  MODE;
  __IOM uint32_t  RXTXEN;
  __IOM NRF_TDM_CONFIG_MCK_Type MCK;
  __IOM NRF_TDM_CONFIG_SCK_Type SCK;
  __IOM uint32_t  SWIDTH;
  __IOM uint32_t  ALIGN;
  __IOM NRF_TDM_CONFIG_CHANNEL_Type CHANNEL;
  __IOM NRF_TDM_CONFIG_FSYNC_Type FSYNC;
  __IOM uint32_t  ORS;                               /*!< (@ 0x0000003C) Over-read sample: Extra sample bytes that are
                                                                         transmitted after TXD.MAXCNT bytes have been
                                                                         transmitted, in the case when RXD.MAXCNT is greater
                                                                         than TXD.MAXCNT.*/
} NRF_TDM_CONFIG_Type;

/* TDM_CONFIG_MODE: Mode configuration */
  #define TDM_CONFIG_MODE_ResetValue (0x00000000UL)

/* MODE @Bit 0 : Mode configuration */
  #define TDM_CONFIG_MODE_MODE_Pos (0UL)
  #define TDM_CONFIG_MODE_MODE_Msk (0x1UL << TDM_CONFIG_MODE_MODE_Pos)
  #define TDM_CONFIG_MODE_MODE_Min (0x0UL)
  #define TDM_CONFIG_MODE_MODE_Max (0x1UL)
  #define TDM_CONFIG_MODE_MODE_Master (0x0UL)        /*!< Master mode. SCK and FSYNC generated from internal master clock (MCK)
                                                          and output on PSEL.SCK and PSEL.FSYNC.*/
  #define TDM_CONFIG_MODE_MODE_Slave (0x1UL)         /*!< Slave mode. SCK and FSYNC generated by external master and received on
                                                          PSEL.SCK and PSEL.FSYNC.*/


/* TDM_CONFIG_RXTXEN: Reception (RX) and transmission (TX) enable. */
  #define TDM_CONFIG_RXTXEN_ResetValue (0x00000000UL)

/* RXTXEN @Bits 0..1 : Enable reception or transmission. */
  #define TDM_CONFIG_RXTXEN_RXTXEN_Pos (0UL)
  #define TDM_CONFIG_RXTXEN_RXTXEN_Msk (0x3UL << TDM_CONFIG_RXTXEN_RXTXEN_Pos)
  #define TDM_CONFIG_RXTXEN_RXTXEN_Min (0x0UL)
  #define TDM_CONFIG_RXTXEN_RXTXEN_Max (0x2UL)
  #define TDM_CONFIG_RXTXEN_RXTXEN_Duplex (0x0UL)    /*!< Enable both reception and transmission. Data will be written to the
                                                          RXD.PTR address and data transmitted from the TXD.PTR address.*/
  #define TDM_CONFIG_RXTXEN_RXTXEN_Rx (0x1UL)        /*!< Enable reception, disable transmission. Data will be written to the
                                                          RXD.PTR address.*/
  #define TDM_CONFIG_RXTXEN_RXTXEN_Tx (0x2UL)        /*!< Enable transmission, disable reception. Data will be transmitted from
                                                          the TXD.PTR address.*/


/* TDM_CONFIG_SWIDTH: Sample and word width configuration. */
  #define TDM_CONFIG_SWIDTH_ResetValue (0x00000001UL)

/* SWIDTH @Bits 0..2 : Sample and word width */
  #define TDM_CONFIG_SWIDTH_SWIDTH_Pos (0UL)
  #define TDM_CONFIG_SWIDTH_SWIDTH_Msk (0x7UL << TDM_CONFIG_SWIDTH_SWIDTH_Pos)
  #define TDM_CONFIG_SWIDTH_SWIDTH_Min (0x0UL)
  #define TDM_CONFIG_SWIDTH_SWIDTH_Max (0x7UL)
  #define TDM_CONFIG_SWIDTH_SWIDTH_8Bit (0x0UL)
  #define TDM_CONFIG_SWIDTH_SWIDTH_16Bit (0x1UL)
  #define TDM_CONFIG_SWIDTH_SWIDTH_24Bit (0x2UL)
  #define TDM_CONFIG_SWIDTH_SWIDTH_32Bit (0x3UL)
  #define TDM_CONFIG_SWIDTH_SWIDTH_8BitIn16 (0x4UL)
  #define TDM_CONFIG_SWIDTH_SWIDTH_8BitIn32 (0x5UL)
  #define TDM_CONFIG_SWIDTH_SWIDTH_16BitIn32 (0x6UL)
  #define TDM_CONFIG_SWIDTH_SWIDTH_24BitIn32 (0x7UL)


/* TDM_CONFIG_ALIGN: Alignment of sample within the audio data word. */
  #define TDM_CONFIG_ALIGN_ResetValue (0x00000000UL)

/* ALIGN @Bit 0 : Alignment of sample within the audio data word. */
  #define TDM_CONFIG_ALIGN_ALIGN_Pos (0UL)
  #define TDM_CONFIG_ALIGN_ALIGN_Msk (0x1UL << TDM_CONFIG_ALIGN_ALIGN_Pos)
  #define TDM_CONFIG_ALIGN_ALIGN_Min (0x0UL)
  #define TDM_CONFIG_ALIGN_ALIGN_Max (0x1UL)
  #define TDM_CONFIG_ALIGN_ALIGN_Left (0x0UL)
  #define TDM_CONFIG_ALIGN_ALIGN_Right (0x1UL)


/* TDM_CONFIG_ORS: Over-read sample: Extra sample bytes that are transmitted after TXD.MAXCNT bytes have been transmitted, in
                    the case when RXD.MAXCNT is greater than TXD.MAXCNT. */

  #define TDM_CONFIG_ORS_ResetValue (0x00000000UL)

/* ORS @Bits 0..31 : Data transmitted after TXD.MAXCNT bytes have been transmitted in the case when RXD.MAXCNT is greater than
                     TXD.MAXCNT. */

  #define TDM_CONFIG_ORS_ORS_Pos (0UL)
  #define TDM_CONFIG_ORS_ORS_Msk (0xFFFFFFFFUL << TDM_CONFIG_ORS_ORS_Pos)



/* ===================================================== Struct TDM_PSEL ===================================================== */
/**
  * @brief PSEL [TDM_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  MCK;
  __IOM uint32_t  SCK;
  __IOM uint32_t  FSYNC;
  __IOM uint32_t  SDIN;
  __IOM uint32_t  SDOUT;
} NRF_TDM_PSEL_Type;

/* TDM_PSEL_MCK: Pin select for MCK signal */
  #define TDM_PSEL_MCK_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define TDM_PSEL_MCK_PIN_Pos (0UL)
  #define TDM_PSEL_MCK_PIN_Msk (0x1FUL << TDM_PSEL_MCK_PIN_Pos)
  #define TDM_PSEL_MCK_PIN_Min (0x00UL)
  #define TDM_PSEL_MCK_PIN_Max (0x1FUL)

/* PORT @Bits 5..8 : Port number */
  #define TDM_PSEL_MCK_PORT_Pos (5UL)
  #define TDM_PSEL_MCK_PORT_Msk (0xFUL << TDM_PSEL_MCK_PORT_Pos)
  #define TDM_PSEL_MCK_PORT_Min (0x0UL)
  #define TDM_PSEL_MCK_PORT_Max (0xFUL)

/* CONNECT @Bit 31 : Connection */
  #define TDM_PSEL_MCK_CONNECT_Pos (31UL)
  #define TDM_PSEL_MCK_CONNECT_Msk (0x1UL << TDM_PSEL_MCK_CONNECT_Pos)
  #define TDM_PSEL_MCK_CONNECT_Min (0x0UL)
  #define TDM_PSEL_MCK_CONNECT_Max (0x1UL)
  #define TDM_PSEL_MCK_CONNECT_Disconnected (0x1UL)
  #define TDM_PSEL_MCK_CONNECT_Connected (0x0UL)


/* TDM_PSEL_SCK: Pin select for SCK signal */
  #define TDM_PSEL_SCK_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define TDM_PSEL_SCK_PIN_Pos (0UL)
  #define TDM_PSEL_SCK_PIN_Msk (0x1FUL << TDM_PSEL_SCK_PIN_Pos)
  #define TDM_PSEL_SCK_PIN_Min (0x00UL)
  #define TDM_PSEL_SCK_PIN_Max (0x1FUL)

/* PORT @Bits 5..8 : Port number */
  #define TDM_PSEL_SCK_PORT_Pos (5UL)
  #define TDM_PSEL_SCK_PORT_Msk (0xFUL << TDM_PSEL_SCK_PORT_Pos)
  #define TDM_PSEL_SCK_PORT_Min (0x0UL)
  #define TDM_PSEL_SCK_PORT_Max (0xFUL)

/* CONNECT @Bit 31 : Connection */
  #define TDM_PSEL_SCK_CONNECT_Pos (31UL)
  #define TDM_PSEL_SCK_CONNECT_Msk (0x1UL << TDM_PSEL_SCK_CONNECT_Pos)
  #define TDM_PSEL_SCK_CONNECT_Min (0x0UL)
  #define TDM_PSEL_SCK_CONNECT_Max (0x1UL)
  #define TDM_PSEL_SCK_CONNECT_Disconnected (0x1UL)
  #define TDM_PSEL_SCK_CONNECT_Connected (0x0UL)


/* TDM_PSEL_FSYNC: Pin select for FSYNC signal */
  #define TDM_PSEL_FSYNC_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define TDM_PSEL_FSYNC_PIN_Pos (0UL)
  #define TDM_PSEL_FSYNC_PIN_Msk (0x1FUL << TDM_PSEL_FSYNC_PIN_Pos)
  #define TDM_PSEL_FSYNC_PIN_Min (0x00UL)
  #define TDM_PSEL_FSYNC_PIN_Max (0x1FUL)

/* PORT @Bits 5..8 : Port number */
  #define TDM_PSEL_FSYNC_PORT_Pos (5UL)
  #define TDM_PSEL_FSYNC_PORT_Msk (0xFUL << TDM_PSEL_FSYNC_PORT_Pos)
  #define TDM_PSEL_FSYNC_PORT_Min (0x0UL)
  #define TDM_PSEL_FSYNC_PORT_Max (0xFUL)

/* CONNECT @Bit 31 : Connection */
  #define TDM_PSEL_FSYNC_CONNECT_Pos (31UL)
  #define TDM_PSEL_FSYNC_CONNECT_Msk (0x1UL << TDM_PSEL_FSYNC_CONNECT_Pos)
  #define TDM_PSEL_FSYNC_CONNECT_Min (0x0UL)
  #define TDM_PSEL_FSYNC_CONNECT_Max (0x1UL)
  #define TDM_PSEL_FSYNC_CONNECT_Disconnected (0x1UL)
  #define TDM_PSEL_FSYNC_CONNECT_Connected (0x0UL)


/* TDM_PSEL_SDIN: Pin select for SDIN signal */
  #define TDM_PSEL_SDIN_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define TDM_PSEL_SDIN_PIN_Pos (0UL)
  #define TDM_PSEL_SDIN_PIN_Msk (0x1FUL << TDM_PSEL_SDIN_PIN_Pos)
  #define TDM_PSEL_SDIN_PIN_Min (0x00UL)
  #define TDM_PSEL_SDIN_PIN_Max (0x1FUL)

/* PORT @Bits 5..8 : Port number */
  #define TDM_PSEL_SDIN_PORT_Pos (5UL)
  #define TDM_PSEL_SDIN_PORT_Msk (0xFUL << TDM_PSEL_SDIN_PORT_Pos)
  #define TDM_PSEL_SDIN_PORT_Min (0x0UL)
  #define TDM_PSEL_SDIN_PORT_Max (0xFUL)

/* CONNECT @Bit 31 : Connection */
  #define TDM_PSEL_SDIN_CONNECT_Pos (31UL)
  #define TDM_PSEL_SDIN_CONNECT_Msk (0x1UL << TDM_PSEL_SDIN_CONNECT_Pos)
  #define TDM_PSEL_SDIN_CONNECT_Min (0x0UL)
  #define TDM_PSEL_SDIN_CONNECT_Max (0x1UL)
  #define TDM_PSEL_SDIN_CONNECT_Disconnected (0x1UL)
  #define TDM_PSEL_SDIN_CONNECT_Connected (0x0UL)


/* TDM_PSEL_SDOUT: Pin select for SDOUT signal */
  #define TDM_PSEL_SDOUT_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define TDM_PSEL_SDOUT_PIN_Pos (0UL)
  #define TDM_PSEL_SDOUT_PIN_Msk (0x1FUL << TDM_PSEL_SDOUT_PIN_Pos)
  #define TDM_PSEL_SDOUT_PIN_Min (0x00UL)
  #define TDM_PSEL_SDOUT_PIN_Max (0x1FUL)

/* PORT @Bits 5..8 : Port number */
  #define TDM_PSEL_SDOUT_PORT_Pos (5UL)
  #define TDM_PSEL_SDOUT_PORT_Msk (0xFUL << TDM_PSEL_SDOUT_PORT_Pos)
  #define TDM_PSEL_SDOUT_PORT_Min (0x0UL)
  #define TDM_PSEL_SDOUT_PORT_Max (0xFUL)

/* CONNECT @Bit 31 : Connection */
  #define TDM_PSEL_SDOUT_CONNECT_Pos (31UL)
  #define TDM_PSEL_SDOUT_CONNECT_Msk (0x1UL << TDM_PSEL_SDOUT_CONNECT_Pos)
  #define TDM_PSEL_SDOUT_CONNECT_Min (0x0UL)
  #define TDM_PSEL_SDOUT_CONNECT_Max (0x1UL)
  #define TDM_PSEL_SDOUT_CONNECT_Disconnected (0x1UL)
  #define TDM_PSEL_SDOUT_CONNECT_Connected (0x0UL)



/* ===================================================== Struct TDM_RXD ====================================================== */
/**
  * @brief RXD [TDM_RXD] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event.*/
  __IM  uint32_t  CURRENTAMOUNT;
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  MODE;
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_TDM_RXD_Type;

/* TDM_RXD_PTR: RAM buffer start address */
  #define TDM_RXD_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TDM_RXD_PTR_PTR_Pos (0UL)
  #define TDM_RXD_PTR_PTR_Msk (0xFFFFFFFFUL << TDM_RXD_PTR_PTR_Pos)


/* TDM_RXD_MAXCNT: Maximum number of bytes in channel buffer */
  #define TDM_RXD_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TDM_RXD_MAXCNT_MAXCNT_Pos (0UL)
  #define TDM_RXD_MAXCNT_MAXCNT_Msk (0xFFFFUL << TDM_RXD_MAXCNT_MAXCNT_Pos)
  #define TDM_RXD_MAXCNT_MAXCNT_Min (0x0001UL)
  #define TDM_RXD_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* TDM_RXD_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. */
  #define TDM_RXD_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TDM_RXD_AMOUNT_AMOUNT_Pos (0UL)
  #define TDM_RXD_AMOUNT_AMOUNT_Msk (0xFFFFUL << TDM_RXD_AMOUNT_AMOUNT_Pos)
  #define TDM_RXD_AMOUNT_AMOUNT_Min (0x0001UL)
  #define TDM_RXD_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* TDM_RXD_CURRENTAMOUNT: Number of bytes transferred in the current transaction */
  #define TDM_RXD_CURRENTAMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the current transaction. Continuously updated. */
  #define TDM_RXD_CURRENTAMOUNT_AMOUNT_Pos (0UL)
  #define TDM_RXD_CURRENTAMOUNT_AMOUNT_Msk (0xFFFFUL << TDM_RXD_CURRENTAMOUNT_AMOUNT_Pos)
  #define TDM_RXD_CURRENTAMOUNT_AMOUNT_Min (0x0001UL)
  #define TDM_RXD_CURRENTAMOUNT_AMOUNT_Max (0xFFFFUL)


/* TDM_RXD_MODE: Configure EasyDMA mode */
  #define TDM_RXD_MODE_ResetValue (0x00000001UL)

/* LPOP @Bits 0..1 : Enable low-power operation, or use low-latency */
  #define TDM_RXD_MODE_LPOP_Pos (0UL)
  #define TDM_RXD_MODE_LPOP_Msk (0x3UL << TDM_RXD_MODE_LPOP_Pos)
  #define TDM_RXD_MODE_LPOP_Min (0x0UL)
  #define TDM_RXD_MODE_LPOP_Max (0x1UL)
  #define TDM_RXD_MODE_LPOP_LowLat (0x0UL)
  #define TDM_RXD_MODE_LPOP_LowPower (0x1UL)


/* TDM_RXD_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TDM_RXD_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define TDM_RXD_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define TDM_RXD_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TDM_RXD_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of ENABLE
                                                                            field.*/
  #define TDM_RXD_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define TDM_RXD_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define TDM_RXD_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define TDM_RXD_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* TDM_RXD_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TDM_RXD_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TDM_RXD_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define TDM_RXD_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TDM_RXD_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/



/* ===================================================== Struct TDM_TXD ====================================================== */
/**
  * @brief TXD [TDM_TXD] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event.*/
  __IM  uint32_t  CURRENTAMOUNT;
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  MODE;
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_TDM_TXD_Type;

/* TDM_TXD_PTR: RAM buffer start address */
  #define TDM_TXD_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TDM_TXD_PTR_PTR_Pos (0UL)
  #define TDM_TXD_PTR_PTR_Msk (0xFFFFFFFFUL << TDM_TXD_PTR_PTR_Pos)


/* TDM_TXD_MAXCNT: Maximum number of bytes in channel buffer */
  #define TDM_TXD_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TDM_TXD_MAXCNT_MAXCNT_Pos (0UL)
  #define TDM_TXD_MAXCNT_MAXCNT_Msk (0xFFFFUL << TDM_TXD_MAXCNT_MAXCNT_Pos)
  #define TDM_TXD_MAXCNT_MAXCNT_Min (0x0001UL)
  #define TDM_TXD_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* TDM_TXD_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. */
  #define TDM_TXD_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TDM_TXD_AMOUNT_AMOUNT_Pos (0UL)
  #define TDM_TXD_AMOUNT_AMOUNT_Msk (0xFFFFUL << TDM_TXD_AMOUNT_AMOUNT_Pos)
  #define TDM_TXD_AMOUNT_AMOUNT_Min (0x0001UL)
  #define TDM_TXD_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* TDM_TXD_CURRENTAMOUNT: Number of bytes transferred in the current transaction */
  #define TDM_TXD_CURRENTAMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the current transaction. Continuously updated. */
  #define TDM_TXD_CURRENTAMOUNT_AMOUNT_Pos (0UL)
  #define TDM_TXD_CURRENTAMOUNT_AMOUNT_Msk (0xFFFFUL << TDM_TXD_CURRENTAMOUNT_AMOUNT_Pos)
  #define TDM_TXD_CURRENTAMOUNT_AMOUNT_Min (0x0001UL)
  #define TDM_TXD_CURRENTAMOUNT_AMOUNT_Max (0xFFFFUL)


/* TDM_TXD_MODE: Configure EasyDMA mode */
  #define TDM_TXD_MODE_ResetValue (0x00000001UL)

/* LPOP @Bits 0..1 : Enable low-power operation, or use low-latency */
  #define TDM_TXD_MODE_LPOP_Pos (0UL)
  #define TDM_TXD_MODE_LPOP_Msk (0x3UL << TDM_TXD_MODE_LPOP_Pos)
  #define TDM_TXD_MODE_LPOP_Min (0x0UL)
  #define TDM_TXD_MODE_LPOP_Max (0x1UL)
  #define TDM_TXD_MODE_LPOP_LowLat (0x0UL)
  #define TDM_TXD_MODE_LPOP_LowPower (0x1UL)


/* TDM_TXD_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TDM_TXD_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define TDM_TXD_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define TDM_TXD_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TDM_TXD_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of ENABLE
                                                                            field.*/
  #define TDM_TXD_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define TDM_TXD_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define TDM_TXD_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define TDM_TXD_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* TDM_TXD_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TDM_TXD_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TDM_TXD_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define TDM_TXD_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TDM_TXD_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/


/* ======================================================= Struct TDM ======================================================== */
/**
  * @brief Time division multiplexed audio interface
  */
  typedef struct {
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Starts continuous TDM transfer. Also starts MCK when
                                                                         this is enabled*/
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Stops TDM transfer after the completion of MAXCNT
                                                                         words. Triggering this task will cause the STOPPED
                                                                         event to be generated.*/
    __OM uint32_t TASKS_ABORT;                       /*!< (@ 0x00000008) Abort TDM transfer without completing MAXCNT words.
                                                                         Triggering this task will cause the ABORTED event to be
                                                                         generated.*/
    __IM uint32_t RESERVED[29];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_ABORT;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_RXPTRUPD;                  /*!< (@ 0x00000104) The RXD.PTR register has been copied to internal
                                                                         double-buffers. When TDM is started and RX is enabled,
                                                                         this event will be generated for every RXTXD.MAXCNT
                                                                         words received on the SDIN pin.*/
    __IOM uint32_t EVENTS_STOPPED;
    __IOM uint32_t EVENTS_ABORTED;
    __IM uint32_t RESERVED2[2];
    __IOM uint32_t EVENTS_TXPTRUPD;                  /*!< (@ 0x00000118) The TDX.PTR register has been copied to internal
                                                                         double-buffers. When TDM is started and TX is enabled,
                                                                         this event will be generated for every RXTXD.MAXCNT
                                                                         words that are sent on the SDOUT pin.*/
    __IM uint32_t RESERVED3;
    __IOM uint32_t EVENTS_MAXCNT;                    /*!< (@ 0x00000120) MAXCNT block event, generated on the active edge of
                                                                         FSYNC of every MAXCNT block*/
    __IM uint32_t RESERVED4[24];
    __IOM uint32_t PUBLISH_RXPTRUPD;
    __IOM uint32_t PUBLISH_STOPPED;
    __IOM uint32_t PUBLISH_ABORTED;
    __IM uint32_t RESERVED5[2];
    __IOM uint32_t PUBLISH_TXPTRUPD;
    __IM uint32_t RESERVED6;
    __IOM uint32_t PUBLISH_MAXCNT;
    __IM uint32_t RESERVED7[87];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED8[125];
    __IOM uint32_t ENABLE;
    __IOM NRF_TDM_CONFIG_Type CONFIG;
    __IM uint32_t RESERVED9[11];
    __IOM NRF_TDM_PSEL_Type PSEL;
    __IM uint32_t RESERVED10[95];
    __IOM NRF_TDM_RXD_Type RXD;
    __IM uint32_t RESERVED11[7];
    __IOM NRF_TDM_TXD_Type TXD;
  } NRF_TDM_Type;

/* TDM_TASKS_START: Starts continuous TDM transfer. Also starts MCK when this is enabled */
  #define TDM_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Starts continuous TDM transfer. Also starts MCK when this is enabled */
  #define TDM_TASKS_START_TASKS_START_Pos (0UL)
  #define TDM_TASKS_START_TASKS_START_Msk (0x1UL << TDM_TASKS_START_TASKS_START_Pos)
  #define TDM_TASKS_START_TASKS_START_Min (0x1UL)
  #define TDM_TASKS_START_TASKS_START_Max (0x1UL)
  #define TDM_TASKS_START_TASKS_START_Trigger (0x1UL)


/* TDM_TASKS_STOP: Stops TDM transfer after the completion of MAXCNT words. Triggering this task will cause the STOPPED event to
                    be generated. */

  #define TDM_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stops TDM transfer after the completion of MAXCNT words. Triggering this task will cause the STOPPED
                       event to be generated. */

  #define TDM_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define TDM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TDM_TASKS_STOP_TASKS_STOP_Pos)
  #define TDM_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define TDM_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define TDM_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* TDM_TASKS_ABORT: Abort TDM transfer without completing MAXCNT words. Triggering this task will cause the ABORTED event to be
                     generated. */

  #define TDM_TASKS_ABORT_ResetValue (0x00000000UL)

/* TASKS_ABORT @Bit 0 : Abort TDM transfer without completing MAXCNT words. Triggering this task will cause the ABORTED event to
                        be generated. */

  #define TDM_TASKS_ABORT_TASKS_ABORT_Pos (0UL)
  #define TDM_TASKS_ABORT_TASKS_ABORT_Msk (0x1UL << TDM_TASKS_ABORT_TASKS_ABORT_Pos)
  #define TDM_TASKS_ABORT_TASKS_ABORT_Min (0x1UL)
  #define TDM_TASKS_ABORT_TASKS_ABORT_Max (0x1UL)
  #define TDM_TASKS_ABORT_TASKS_ABORT_Trigger (0x1UL)


/* TDM_SUBSCRIBE_START: Subscribe configuration for task START */
  #define TDM_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define TDM_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define TDM_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << TDM_SUBSCRIBE_START_CHIDX_Pos)
  #define TDM_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define TDM_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TDM_SUBSCRIBE_START_EN_Pos (31UL)
  #define TDM_SUBSCRIBE_START_EN_Msk (0x1UL << TDM_SUBSCRIBE_START_EN_Pos)
  #define TDM_SUBSCRIBE_START_EN_Min (0x0UL)
  #define TDM_SUBSCRIBE_START_EN_Max (0x1UL)
  #define TDM_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define TDM_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* TDM_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define TDM_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TDM_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define TDM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TDM_SUBSCRIBE_STOP_CHIDX_Pos)
  #define TDM_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define TDM_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TDM_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define TDM_SUBSCRIBE_STOP_EN_Msk (0x1UL << TDM_SUBSCRIBE_STOP_EN_Pos)
  #define TDM_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define TDM_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define TDM_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define TDM_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* TDM_SUBSCRIBE_ABORT: Subscribe configuration for task ABORT */
  #define TDM_SUBSCRIBE_ABORT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ABORT will subscribe to */
  #define TDM_SUBSCRIBE_ABORT_CHIDX_Pos (0UL)
  #define TDM_SUBSCRIBE_ABORT_CHIDX_Msk (0xFFUL << TDM_SUBSCRIBE_ABORT_CHIDX_Pos)
  #define TDM_SUBSCRIBE_ABORT_CHIDX_Min (0x00UL)
  #define TDM_SUBSCRIBE_ABORT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TDM_SUBSCRIBE_ABORT_EN_Pos (31UL)
  #define TDM_SUBSCRIBE_ABORT_EN_Msk (0x1UL << TDM_SUBSCRIBE_ABORT_EN_Pos)
  #define TDM_SUBSCRIBE_ABORT_EN_Min (0x0UL)
  #define TDM_SUBSCRIBE_ABORT_EN_Max (0x1UL)
  #define TDM_SUBSCRIBE_ABORT_EN_Disabled (0x0UL)
  #define TDM_SUBSCRIBE_ABORT_EN_Enabled (0x1UL)


/* TDM_EVENTS_RXPTRUPD: The RXD.PTR register has been copied to internal double-buffers. When TDM is started and RX is enabled,
                         this event will be generated for every RXTXD.MAXCNT words received on the SDIN pin. */

  #define TDM_EVENTS_RXPTRUPD_ResetValue (0x00000000UL)

/* EVENTS_RXPTRUPD @Bit 0 : The RXD.PTR register has been copied to internal double-buffers. When TDM is started and RX is
                            enabled, this event will be generated for every RXTXD.MAXCNT words received on the SDIN pin. */

  #define TDM_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Pos (0UL)
  #define TDM_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Msk (0x1UL << TDM_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Pos) /*!< Bit mask of
                                                                            EVENTS_RXPTRUPD field.*/
  #define TDM_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Min (0x0UL)
  #define TDM_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Max (0x1UL)
  #define TDM_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_NotGenerated (0x0UL)
  #define TDM_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Generated (0x1UL)


/* TDM_EVENTS_STOPPED: Transfer stopped. */
  #define TDM_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : Transfer stopped. */
  #define TDM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define TDM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << TDM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED
                                                                            field.*/
  #define TDM_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define TDM_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define TDM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define TDM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* TDM_EVENTS_ABORTED: Transfer aborted. */
  #define TDM_EVENTS_ABORTED_ResetValue (0x00000000UL)

/* EVENTS_ABORTED @Bit 0 : Transfer aborted. */
  #define TDM_EVENTS_ABORTED_EVENTS_ABORTED_Pos (0UL)
  #define TDM_EVENTS_ABORTED_EVENTS_ABORTED_Msk (0x1UL << TDM_EVENTS_ABORTED_EVENTS_ABORTED_Pos) /*!< Bit mask of EVENTS_ABORTED
                                                                            field.*/
  #define TDM_EVENTS_ABORTED_EVENTS_ABORTED_Min (0x0UL)
  #define TDM_EVENTS_ABORTED_EVENTS_ABORTED_Max (0x1UL)
  #define TDM_EVENTS_ABORTED_EVENTS_ABORTED_NotGenerated (0x0UL)
  #define TDM_EVENTS_ABORTED_EVENTS_ABORTED_Generated (0x1UL)


/* TDM_EVENTS_TXPTRUPD: The TDX.PTR register has been copied to internal double-buffers. When TDM is started and TX is enabled,
                         this event will be generated for every RXTXD.MAXCNT words that are sent on the SDOUT pin. */

  #define TDM_EVENTS_TXPTRUPD_ResetValue (0x00000000UL)

/* EVENTS_TXPTRUPD @Bit 0 : The TDX.PTR register has been copied to internal double-buffers. When TDM is started and TX is
                            enabled, this event will be generated for every RXTXD.MAXCNT words that are sent on the SDOUT pin. */

  #define TDM_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Pos (0UL)
  #define TDM_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Msk (0x1UL << TDM_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Pos) /*!< Bit mask of
                                                                            EVENTS_TXPTRUPD field.*/
  #define TDM_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Min (0x0UL)
  #define TDM_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Max (0x1UL)
  #define TDM_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_NotGenerated (0x0UL)
  #define TDM_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Generated (0x1UL)


/* TDM_EVENTS_MAXCNT: MAXCNT block event, generated on the active edge of FSYNC of every MAXCNT block */
  #define TDM_EVENTS_MAXCNT_ResetValue (0x00000000UL)

/* EVENTS_MAXCNT @Bit 0 : MAXCNT block event, generated on the active edge of FSYNC of every MAXCNT block */
  #define TDM_EVENTS_MAXCNT_EVENTS_MAXCNT_Pos (0UL)
  #define TDM_EVENTS_MAXCNT_EVENTS_MAXCNT_Msk (0x1UL << TDM_EVENTS_MAXCNT_EVENTS_MAXCNT_Pos) /*!< Bit mask of EVENTS_MAXCNT
                                                                            field.*/
  #define TDM_EVENTS_MAXCNT_EVENTS_MAXCNT_Min (0x0UL)
  #define TDM_EVENTS_MAXCNT_EVENTS_MAXCNT_Max (0x1UL)
  #define TDM_EVENTS_MAXCNT_EVENTS_MAXCNT_NotGenerated (0x0UL)
  #define TDM_EVENTS_MAXCNT_EVENTS_MAXCNT_Generated (0x1UL)


/* TDM_PUBLISH_RXPTRUPD: Publish configuration for event RXPTRUPD */
  #define TDM_PUBLISH_RXPTRUPD_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RXPTRUPD will publish to */
  #define TDM_PUBLISH_RXPTRUPD_CHIDX_Pos (0UL)
  #define TDM_PUBLISH_RXPTRUPD_CHIDX_Msk (0xFFUL << TDM_PUBLISH_RXPTRUPD_CHIDX_Pos)
  #define TDM_PUBLISH_RXPTRUPD_CHIDX_Min (0x00UL)
  #define TDM_PUBLISH_RXPTRUPD_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TDM_PUBLISH_RXPTRUPD_EN_Pos (31UL)
  #define TDM_PUBLISH_RXPTRUPD_EN_Msk (0x1UL << TDM_PUBLISH_RXPTRUPD_EN_Pos)
  #define TDM_PUBLISH_RXPTRUPD_EN_Min (0x0UL)
  #define TDM_PUBLISH_RXPTRUPD_EN_Max (0x1UL)
  #define TDM_PUBLISH_RXPTRUPD_EN_Disabled (0x0UL)
  #define TDM_PUBLISH_RXPTRUPD_EN_Enabled (0x1UL)


/* TDM_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define TDM_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define TDM_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define TDM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << TDM_PUBLISH_STOPPED_CHIDX_Pos)
  #define TDM_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define TDM_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TDM_PUBLISH_STOPPED_EN_Pos (31UL)
  #define TDM_PUBLISH_STOPPED_EN_Msk (0x1UL << TDM_PUBLISH_STOPPED_EN_Pos)
  #define TDM_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define TDM_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define TDM_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define TDM_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* TDM_PUBLISH_ABORTED: Publish configuration for event ABORTED */
  #define TDM_PUBLISH_ABORTED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ABORTED will publish to */
  #define TDM_PUBLISH_ABORTED_CHIDX_Pos (0UL)
  #define TDM_PUBLISH_ABORTED_CHIDX_Msk (0xFFUL << TDM_PUBLISH_ABORTED_CHIDX_Pos)
  #define TDM_PUBLISH_ABORTED_CHIDX_Min (0x00UL)
  #define TDM_PUBLISH_ABORTED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TDM_PUBLISH_ABORTED_EN_Pos (31UL)
  #define TDM_PUBLISH_ABORTED_EN_Msk (0x1UL << TDM_PUBLISH_ABORTED_EN_Pos)
  #define TDM_PUBLISH_ABORTED_EN_Min (0x0UL)
  #define TDM_PUBLISH_ABORTED_EN_Max (0x1UL)
  #define TDM_PUBLISH_ABORTED_EN_Disabled (0x0UL)
  #define TDM_PUBLISH_ABORTED_EN_Enabled (0x1UL)


/* TDM_PUBLISH_TXPTRUPD: Publish configuration for event TXPTRUPD */
  #define TDM_PUBLISH_TXPTRUPD_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event TXPTRUPD will publish to */
  #define TDM_PUBLISH_TXPTRUPD_CHIDX_Pos (0UL)
  #define TDM_PUBLISH_TXPTRUPD_CHIDX_Msk (0xFFUL << TDM_PUBLISH_TXPTRUPD_CHIDX_Pos)
  #define TDM_PUBLISH_TXPTRUPD_CHIDX_Min (0x00UL)
  #define TDM_PUBLISH_TXPTRUPD_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TDM_PUBLISH_TXPTRUPD_EN_Pos (31UL)
  #define TDM_PUBLISH_TXPTRUPD_EN_Msk (0x1UL << TDM_PUBLISH_TXPTRUPD_EN_Pos)
  #define TDM_PUBLISH_TXPTRUPD_EN_Min (0x0UL)
  #define TDM_PUBLISH_TXPTRUPD_EN_Max (0x1UL)
  #define TDM_PUBLISH_TXPTRUPD_EN_Disabled (0x0UL)
  #define TDM_PUBLISH_TXPTRUPD_EN_Enabled (0x1UL)


/* TDM_PUBLISH_MAXCNT: Publish configuration for event MAXCNT */
  #define TDM_PUBLISH_MAXCNT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event MAXCNT will publish to */
  #define TDM_PUBLISH_MAXCNT_CHIDX_Pos (0UL)
  #define TDM_PUBLISH_MAXCNT_CHIDX_Msk (0xFFUL << TDM_PUBLISH_MAXCNT_CHIDX_Pos)
  #define TDM_PUBLISH_MAXCNT_CHIDX_Min (0x00UL)
  #define TDM_PUBLISH_MAXCNT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TDM_PUBLISH_MAXCNT_EN_Pos (31UL)
  #define TDM_PUBLISH_MAXCNT_EN_Msk (0x1UL << TDM_PUBLISH_MAXCNT_EN_Pos)
  #define TDM_PUBLISH_MAXCNT_EN_Min (0x0UL)
  #define TDM_PUBLISH_MAXCNT_EN_Max (0x1UL)
  #define TDM_PUBLISH_MAXCNT_EN_Disabled (0x0UL)
  #define TDM_PUBLISH_MAXCNT_EN_Enabled (0x1UL)


/* TDM_INTEN: Enable or disable interrupt */
  #define TDM_INTEN_ResetValue (0x00000000UL)

/* RXPTRUPD @Bit 1 : Enable or disable interrupt for event RXPTRUPD */
  #define TDM_INTEN_RXPTRUPD_Pos (1UL)
  #define TDM_INTEN_RXPTRUPD_Msk (0x1UL << TDM_INTEN_RXPTRUPD_Pos)
  #define TDM_INTEN_RXPTRUPD_Min (0x0UL)
  #define TDM_INTEN_RXPTRUPD_Max (0x1UL)
  #define TDM_INTEN_RXPTRUPD_Disabled (0x0UL)
  #define TDM_INTEN_RXPTRUPD_Enabled (0x1UL)

/* STOPPED @Bit 2 : Enable or disable interrupt for event STOPPED */
  #define TDM_INTEN_STOPPED_Pos (2UL)
  #define TDM_INTEN_STOPPED_Msk (0x1UL << TDM_INTEN_STOPPED_Pos)
  #define TDM_INTEN_STOPPED_Min (0x0UL)
  #define TDM_INTEN_STOPPED_Max (0x1UL)
  #define TDM_INTEN_STOPPED_Disabled (0x0UL)
  #define TDM_INTEN_STOPPED_Enabled (0x1UL)

/* ABORTED @Bit 3 : Enable or disable interrupt for event ABORTED */
  #define TDM_INTEN_ABORTED_Pos (3UL)
  #define TDM_INTEN_ABORTED_Msk (0x1UL << TDM_INTEN_ABORTED_Pos)
  #define TDM_INTEN_ABORTED_Min (0x0UL)
  #define TDM_INTEN_ABORTED_Max (0x1UL)
  #define TDM_INTEN_ABORTED_Disabled (0x0UL)
  #define TDM_INTEN_ABORTED_Enabled (0x1UL)

/* TXPTRUPD @Bit 6 : Enable or disable interrupt for event TXPTRUPD */
  #define TDM_INTEN_TXPTRUPD_Pos (6UL)
  #define TDM_INTEN_TXPTRUPD_Msk (0x1UL << TDM_INTEN_TXPTRUPD_Pos)
  #define TDM_INTEN_TXPTRUPD_Min (0x0UL)
  #define TDM_INTEN_TXPTRUPD_Max (0x1UL)
  #define TDM_INTEN_TXPTRUPD_Disabled (0x0UL)
  #define TDM_INTEN_TXPTRUPD_Enabled (0x1UL)

/* MAXCNT @Bit 8 : Enable or disable interrupt for event MAXCNT */
  #define TDM_INTEN_MAXCNT_Pos (8UL)
  #define TDM_INTEN_MAXCNT_Msk (0x1UL << TDM_INTEN_MAXCNT_Pos)
  #define TDM_INTEN_MAXCNT_Min (0x0UL)
  #define TDM_INTEN_MAXCNT_Max (0x1UL)
  #define TDM_INTEN_MAXCNT_Disabled (0x0UL)
  #define TDM_INTEN_MAXCNT_Enabled (0x1UL)


/* TDM_INTENSET: Enable interrupt */
  #define TDM_INTENSET_ResetValue (0x00000000UL)

/* RXPTRUPD @Bit 1 : Write '1' to enable interrupt for event RXPTRUPD */
  #define TDM_INTENSET_RXPTRUPD_Pos (1UL)
  #define TDM_INTENSET_RXPTRUPD_Msk (0x1UL << TDM_INTENSET_RXPTRUPD_Pos)
  #define TDM_INTENSET_RXPTRUPD_Min (0x0UL)
  #define TDM_INTENSET_RXPTRUPD_Max (0x1UL)
  #define TDM_INTENSET_RXPTRUPD_Set (0x1UL)
  #define TDM_INTENSET_RXPTRUPD_Disabled (0x0UL)
  #define TDM_INTENSET_RXPTRUPD_Enabled (0x1UL)

/* STOPPED @Bit 2 : Write '1' to enable interrupt for event STOPPED */
  #define TDM_INTENSET_STOPPED_Pos (2UL)
  #define TDM_INTENSET_STOPPED_Msk (0x1UL << TDM_INTENSET_STOPPED_Pos)
  #define TDM_INTENSET_STOPPED_Min (0x0UL)
  #define TDM_INTENSET_STOPPED_Max (0x1UL)
  #define TDM_INTENSET_STOPPED_Set (0x1UL)
  #define TDM_INTENSET_STOPPED_Disabled (0x0UL)
  #define TDM_INTENSET_STOPPED_Enabled (0x1UL)

/* ABORTED @Bit 3 : Write '1' to enable interrupt for event ABORTED */
  #define TDM_INTENSET_ABORTED_Pos (3UL)
  #define TDM_INTENSET_ABORTED_Msk (0x1UL << TDM_INTENSET_ABORTED_Pos)
  #define TDM_INTENSET_ABORTED_Min (0x0UL)
  #define TDM_INTENSET_ABORTED_Max (0x1UL)
  #define TDM_INTENSET_ABORTED_Set (0x1UL)
  #define TDM_INTENSET_ABORTED_Disabled (0x0UL)
  #define TDM_INTENSET_ABORTED_Enabled (0x1UL)

/* TXPTRUPD @Bit 6 : Write '1' to enable interrupt for event TXPTRUPD */
  #define TDM_INTENSET_TXPTRUPD_Pos (6UL)
  #define TDM_INTENSET_TXPTRUPD_Msk (0x1UL << TDM_INTENSET_TXPTRUPD_Pos)
  #define TDM_INTENSET_TXPTRUPD_Min (0x0UL)
  #define TDM_INTENSET_TXPTRUPD_Max (0x1UL)
  #define TDM_INTENSET_TXPTRUPD_Set (0x1UL)
  #define TDM_INTENSET_TXPTRUPD_Disabled (0x0UL)
  #define TDM_INTENSET_TXPTRUPD_Enabled (0x1UL)

/* MAXCNT @Bit 8 : Write '1' to enable interrupt for event MAXCNT */
  #define TDM_INTENSET_MAXCNT_Pos (8UL)
  #define TDM_INTENSET_MAXCNT_Msk (0x1UL << TDM_INTENSET_MAXCNT_Pos)
  #define TDM_INTENSET_MAXCNT_Min (0x0UL)
  #define TDM_INTENSET_MAXCNT_Max (0x1UL)
  #define TDM_INTENSET_MAXCNT_Set (0x1UL)
  #define TDM_INTENSET_MAXCNT_Disabled (0x0UL)
  #define TDM_INTENSET_MAXCNT_Enabled (0x1UL)


/* TDM_INTENCLR: Disable interrupt */
  #define TDM_INTENCLR_ResetValue (0x00000000UL)

/* RXPTRUPD @Bit 1 : Write '1' to disable interrupt for event RXPTRUPD */
  #define TDM_INTENCLR_RXPTRUPD_Pos (1UL)
  #define TDM_INTENCLR_RXPTRUPD_Msk (0x1UL << TDM_INTENCLR_RXPTRUPD_Pos)
  #define TDM_INTENCLR_RXPTRUPD_Min (0x0UL)
  #define TDM_INTENCLR_RXPTRUPD_Max (0x1UL)
  #define TDM_INTENCLR_RXPTRUPD_Clear (0x1UL)
  #define TDM_INTENCLR_RXPTRUPD_Disabled (0x0UL)
  #define TDM_INTENCLR_RXPTRUPD_Enabled (0x1UL)

/* STOPPED @Bit 2 : Write '1' to disable interrupt for event STOPPED */
  #define TDM_INTENCLR_STOPPED_Pos (2UL)
  #define TDM_INTENCLR_STOPPED_Msk (0x1UL << TDM_INTENCLR_STOPPED_Pos)
  #define TDM_INTENCLR_STOPPED_Min (0x0UL)
  #define TDM_INTENCLR_STOPPED_Max (0x1UL)
  #define TDM_INTENCLR_STOPPED_Clear (0x1UL)
  #define TDM_INTENCLR_STOPPED_Disabled (0x0UL)
  #define TDM_INTENCLR_STOPPED_Enabled (0x1UL)

/* ABORTED @Bit 3 : Write '1' to disable interrupt for event ABORTED */
  #define TDM_INTENCLR_ABORTED_Pos (3UL)
  #define TDM_INTENCLR_ABORTED_Msk (0x1UL << TDM_INTENCLR_ABORTED_Pos)
  #define TDM_INTENCLR_ABORTED_Min (0x0UL)
  #define TDM_INTENCLR_ABORTED_Max (0x1UL)
  #define TDM_INTENCLR_ABORTED_Clear (0x1UL)
  #define TDM_INTENCLR_ABORTED_Disabled (0x0UL)
  #define TDM_INTENCLR_ABORTED_Enabled (0x1UL)

/* TXPTRUPD @Bit 6 : Write '1' to disable interrupt for event TXPTRUPD */
  #define TDM_INTENCLR_TXPTRUPD_Pos (6UL)
  #define TDM_INTENCLR_TXPTRUPD_Msk (0x1UL << TDM_INTENCLR_TXPTRUPD_Pos)
  #define TDM_INTENCLR_TXPTRUPD_Min (0x0UL)
  #define TDM_INTENCLR_TXPTRUPD_Max (0x1UL)
  #define TDM_INTENCLR_TXPTRUPD_Clear (0x1UL)
  #define TDM_INTENCLR_TXPTRUPD_Disabled (0x0UL)
  #define TDM_INTENCLR_TXPTRUPD_Enabled (0x1UL)

/* MAXCNT @Bit 8 : Write '1' to disable interrupt for event MAXCNT */
  #define TDM_INTENCLR_MAXCNT_Pos (8UL)
  #define TDM_INTENCLR_MAXCNT_Msk (0x1UL << TDM_INTENCLR_MAXCNT_Pos)
  #define TDM_INTENCLR_MAXCNT_Min (0x0UL)
  #define TDM_INTENCLR_MAXCNT_Max (0x1UL)
  #define TDM_INTENCLR_MAXCNT_Clear (0x1UL)
  #define TDM_INTENCLR_MAXCNT_Disabled (0x0UL)
  #define TDM_INTENCLR_MAXCNT_Enabled (0x1UL)


/* TDM_ENABLE: Enable TDM */
  #define TDM_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable TDM */
  #define TDM_ENABLE_ENABLE_Pos (0UL)
  #define TDM_ENABLE_ENABLE_Msk (0x1UL << TDM_ENABLE_ENABLE_Pos)
  #define TDM_ENABLE_ENABLE_Min (0x0UL)
  #define TDM_ENABLE_ENABLE_Max (0x1UL)
  #define TDM_ENABLE_ENABLE_Disabled (0x0UL)
  #define TDM_ENABLE_ENABLE_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TEMP                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct TEMP ======================================================= */
/**
  * @brief Temperature Sensor
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_DATARDY;
    __IM uint32_t RESERVED2[31];
    __IOM uint32_t PUBLISH_DATARDY;
    __IM uint32_t RESERVED3[96];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED4[127];
    __IM int32_t  TEMP;
    __IM uint32_t RESERVED5[5];
    __IOM uint32_t A0;
    __IOM uint32_t A1;
    __IOM uint32_t A2;
    __IOM uint32_t A3;
    __IOM uint32_t A4;
    __IOM uint32_t A5;
    __IOM uint32_t A6;
    __IM uint32_t RESERVED6;
    __IOM uint32_t B0;
    __IOM uint32_t B1;
    __IOM uint32_t B2;
    __IOM uint32_t B3;
    __IOM uint32_t B4;
    __IOM uint32_t B5;
    __IOM uint32_t B6;
    __IM uint32_t RESERVED7;
    __IOM uint32_t T0;
    __IOM uint32_t T1;
    __IOM uint32_t T2;
    __IOM uint32_t T3;
    __IOM uint32_t T4;
    __IOM uint32_t T5;
  } NRF_TEMP_Type;

/* TEMP_TASKS_START: Start temperature measurement */
  #define TEMP_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start temperature measurement */
  #define TEMP_TASKS_START_TASKS_START_Pos (0UL)
  #define TEMP_TASKS_START_TASKS_START_Msk (0x1UL << TEMP_TASKS_START_TASKS_START_Pos)
  #define TEMP_TASKS_START_TASKS_START_Min (0x1UL)
  #define TEMP_TASKS_START_TASKS_START_Max (0x1UL)
  #define TEMP_TASKS_START_TASKS_START_Trigger (0x1UL)


/* TEMP_TASKS_STOP: Stop temperature measurement */
  #define TEMP_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop temperature measurement */
  #define TEMP_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define TEMP_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TEMP_TASKS_STOP_TASKS_STOP_Pos)
  #define TEMP_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define TEMP_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define TEMP_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* TEMP_SUBSCRIBE_START: Subscribe configuration for task START */
  #define TEMP_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define TEMP_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define TEMP_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << TEMP_SUBSCRIBE_START_CHIDX_Pos)
  #define TEMP_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define TEMP_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TEMP_SUBSCRIBE_START_EN_Pos (31UL)
  #define TEMP_SUBSCRIBE_START_EN_Msk (0x1UL << TEMP_SUBSCRIBE_START_EN_Pos)
  #define TEMP_SUBSCRIBE_START_EN_Min (0x0UL)
  #define TEMP_SUBSCRIBE_START_EN_Max (0x1UL)
  #define TEMP_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define TEMP_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* TEMP_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define TEMP_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TEMP_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define TEMP_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TEMP_SUBSCRIBE_STOP_CHIDX_Pos)
  #define TEMP_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define TEMP_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TEMP_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define TEMP_SUBSCRIBE_STOP_EN_Msk (0x1UL << TEMP_SUBSCRIBE_STOP_EN_Pos)
  #define TEMP_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define TEMP_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define TEMP_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define TEMP_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* TEMP_EVENTS_DATARDY: Temperature measurement complete, data ready */
  #define TEMP_EVENTS_DATARDY_ResetValue (0x00000000UL)

/* EVENTS_DATARDY @Bit 0 : Temperature measurement complete, data ready */
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Pos (0UL)
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Msk (0x1UL << TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Pos) /*!< Bit mask of
                                                                            EVENTS_DATARDY field.*/
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Min (0x0UL)
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Max (0x1UL)
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_NotGenerated (0x0UL)
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Generated (0x1UL)


/* TEMP_PUBLISH_DATARDY: Publish configuration for event DATARDY */
  #define TEMP_PUBLISH_DATARDY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event DATARDY will publish to */
  #define TEMP_PUBLISH_DATARDY_CHIDX_Pos (0UL)
  #define TEMP_PUBLISH_DATARDY_CHIDX_Msk (0xFFUL << TEMP_PUBLISH_DATARDY_CHIDX_Pos)
  #define TEMP_PUBLISH_DATARDY_CHIDX_Min (0x00UL)
  #define TEMP_PUBLISH_DATARDY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TEMP_PUBLISH_DATARDY_EN_Pos (31UL)
  #define TEMP_PUBLISH_DATARDY_EN_Msk (0x1UL << TEMP_PUBLISH_DATARDY_EN_Pos)
  #define TEMP_PUBLISH_DATARDY_EN_Min (0x0UL)
  #define TEMP_PUBLISH_DATARDY_EN_Max (0x1UL)
  #define TEMP_PUBLISH_DATARDY_EN_Disabled (0x0UL)
  #define TEMP_PUBLISH_DATARDY_EN_Enabled (0x1UL)


/* TEMP_INTENSET: Enable interrupt */
  #define TEMP_INTENSET_ResetValue (0x00000000UL)

/* DATARDY @Bit 0 : Write '1' to enable interrupt for event DATARDY */
  #define TEMP_INTENSET_DATARDY_Pos (0UL)
  #define TEMP_INTENSET_DATARDY_Msk (0x1UL << TEMP_INTENSET_DATARDY_Pos)
  #define TEMP_INTENSET_DATARDY_Min (0x0UL)
  #define TEMP_INTENSET_DATARDY_Max (0x1UL)
  #define TEMP_INTENSET_DATARDY_Set (0x1UL)
  #define TEMP_INTENSET_DATARDY_Disabled (0x0UL)
  #define TEMP_INTENSET_DATARDY_Enabled (0x1UL)


/* TEMP_INTENCLR: Disable interrupt */
  #define TEMP_INTENCLR_ResetValue (0x00000000UL)

/* DATARDY @Bit 0 : Write '1' to disable interrupt for event DATARDY */
  #define TEMP_INTENCLR_DATARDY_Pos (0UL)
  #define TEMP_INTENCLR_DATARDY_Msk (0x1UL << TEMP_INTENCLR_DATARDY_Pos)
  #define TEMP_INTENCLR_DATARDY_Min (0x0UL)
  #define TEMP_INTENCLR_DATARDY_Max (0x1UL)
  #define TEMP_INTENCLR_DATARDY_Clear (0x1UL)
  #define TEMP_INTENCLR_DATARDY_Disabled (0x0UL)
  #define TEMP_INTENCLR_DATARDY_Enabled (0x1UL)


/* TEMP_TEMP: Temperature in degC (0.25deg steps) */
  #define TEMP_TEMP_ResetValue (0x00000000UL)

/* TEMP @Bits 0..31 : Temperature in degC (0.25deg steps) */
  #define TEMP_TEMP_TEMP_Pos (0UL)
  #define TEMP_TEMP_TEMP_Msk (0xFFFFFFFFUL << TEMP_TEMP_TEMP_Pos)


/* TEMP_A0: Slope of 1st piece wise linear function */
  #define TEMP_A0_ResetValue (0x000002D6UL)

/* A0 @Bits 0..11 : Slope of 1st piece wise linear function */
  #define TEMP_A0_A0_Pos (0UL)
  #define TEMP_A0_A0_Msk (0xFFFUL << TEMP_A0_A0_Pos)


/* TEMP_A1: Slope of 2nd piece wise linear function */
  #define TEMP_A1_ResetValue (0x0000032DUL)

/* A1 @Bits 0..11 : Slope of 2nd piece wise linear function */
  #define TEMP_A1_A1_Pos (0UL)
  #define TEMP_A1_A1_Msk (0xFFFUL << TEMP_A1_A1_Pos)


/* TEMP_A2: Slope of 3rd piece wise linear function */
  #define TEMP_A2_ResetValue (0x00000384UL)

/* A2 @Bits 0..11 : Slope of 3rd piece wise linear function */
  #define TEMP_A2_A2_Pos (0UL)
  #define TEMP_A2_A2_Msk (0xFFFUL << TEMP_A2_A2_Pos)


/* TEMP_A3: Slope of 4th piece wise linear function */
  #define TEMP_A3_ResetValue (0x000003E9UL)

/* A3 @Bits 0..11 : Slope of 4th piece wise linear function */
  #define TEMP_A3_A3_Pos (0UL)
  #define TEMP_A3_A3_Msk (0xFFFUL << TEMP_A3_A3_Pos)


/* TEMP_A4: Slope of 5th piece wise linear function */
  #define TEMP_A4_ResetValue (0x0000046FUL)

/* A4 @Bits 0..11 : Slope of 5th piece wise linear function */
  #define TEMP_A4_A4_Pos (0UL)
  #define TEMP_A4_A4_Msk (0xFFFUL << TEMP_A4_A4_Pos)


/* TEMP_A5: Slope of 6th piece wise linear function */
  #define TEMP_A5_ResetValue (0x00000522UL)

/* A5 @Bits 0..11 : Slope of 6th piece wise linear function */
  #define TEMP_A5_A5_Pos (0UL)
  #define TEMP_A5_A5_Msk (0xFFFUL << TEMP_A5_A5_Pos)


/* TEMP_A6: Slope of 7th piece wise linear function */
  #define TEMP_A6_ResetValue (0x000005B7UL)

/* A6 @Bits 0..11 : Slope of 7th piece wise linear function */
  #define TEMP_A6_A6_Pos (0UL)
  #define TEMP_A6_A6_Msk (0xFFFUL << TEMP_A6_A6_Pos)


/* TEMP_B0: y-intercept of 1st piece wise linear function */
  #define TEMP_B0_ResetValue (0x00000FD6UL)

/* B0 @Bits 0..11 : y-intercept of 1st piece wise linear function */
  #define TEMP_B0_B0_Pos (0UL)
  #define TEMP_B0_B0_Msk (0xFFFUL << TEMP_B0_B0_Pos)


/* TEMP_B1: y-intercept of 2nd piece wise linear function */
  #define TEMP_B1_ResetValue (0x00000F76UL)

/* B1 @Bits 0..11 : y-intercept of 2nd piece wise linear function */
  #define TEMP_B1_B1_Pos (0UL)
  #define TEMP_B1_B1_Msk (0xFFFUL << TEMP_B1_B1_Pos)


/* TEMP_B2: y-intercept of 3rd piece wise linear function */
  #define TEMP_B2_ResetValue (0x00000F8AUL)

/* B2 @Bits 0..11 : y-intercept of 3rd piece wise linear function */
  #define TEMP_B2_B2_Pos (0UL)
  #define TEMP_B2_B2_Msk (0xFFFUL << TEMP_B2_B2_Pos)


/* TEMP_B3: y-intercept of 4th piece wise linear function */
  #define TEMP_B3_ResetValue (0x00000FF8UL)

/* B3 @Bits 0..11 : y-intercept of 4th piece wise linear function */
  #define TEMP_B3_B3_Pos (0UL)
  #define TEMP_B3_B3_Msk (0xFFFUL << TEMP_B3_B3_Pos)


/* TEMP_B4: y-intercept of 5th piece wise linear function */
  #define TEMP_B4_ResetValue (0x000000CCUL)

/* B4 @Bits 0..11 : y-intercept of 5th piece wise linear function */
  #define TEMP_B4_B4_Pos (0UL)
  #define TEMP_B4_B4_Msk (0xFFFUL << TEMP_B4_B4_Pos)


/* TEMP_B5: y-intercept of 6th piece wise linear function */
  #define TEMP_B5_ResetValue (0x00000207UL)

/* B5 @Bits 0..11 : y-intercept of 6th piece wise linear function */
  #define TEMP_B5_B5_Pos (0UL)
  #define TEMP_B5_B5_Msk (0xFFFUL << TEMP_B5_B5_Pos)


/* TEMP_B6: y-intercept of 7th piece wise linear function */
  #define TEMP_B6_ResetValue (0x00000558UL)

/* B6 @Bits 0..11 : y-intercept of 7th piece wise linear function */
  #define TEMP_B6_B6_Pos (0UL)
  #define TEMP_B6_B6_Msk (0xFFFUL << TEMP_B6_B6_Pos)


/* TEMP_T0: End point of 1st piece wise linear function */
  #define TEMP_T0_ResetValue (0x000000E2UL)

/* T0 @Bits 0..7 : End point of 1st piece wise linear function */
  #define TEMP_T0_T0_Pos (0UL)
  #define TEMP_T0_T0_Msk (0xFFUL << TEMP_T0_T0_Pos)


/* TEMP_T1: End point of 2nd piece wise linear function */
  #define TEMP_T1_ResetValue (0x00000002UL)

/* T1 @Bits 0..7 : End point of 2nd piece wise linear function */
  #define TEMP_T1_T1_Pos (0UL)
  #define TEMP_T1_T1_Msk (0xFFUL << TEMP_T1_T1_Pos)


/* TEMP_T2: End point of 3rd piece wise linear function */
  #define TEMP_T2_ResetValue (0x0000001FUL)

/* T2 @Bits 0..7 : End point of 3rd piece wise linear function */
  #define TEMP_T2_T2_Pos (0UL)
  #define TEMP_T2_T2_Msk (0xFFUL << TEMP_T2_T2_Pos)


/* TEMP_T3: End point of 4th piece wise linear function */
  #define TEMP_T3_ResetValue (0x00000038UL)

/* T3 @Bits 0..7 : End point of 4th piece wise linear function */
  #define TEMP_T3_T3_Pos (0UL)
  #define TEMP_T3_T3_Msk (0xFFUL << TEMP_T3_T3_Pos)


/* TEMP_T4: End point of 5th piece wise linear function */
  #define TEMP_T4_ResetValue (0x0000004FUL)

/* T4 @Bits 0..7 : End point of 5th piece wise linear function */
  #define TEMP_T4_T4_Pos (0UL)
  #define TEMP_T4_T4_Msk (0xFFUL << TEMP_T4_T4_Pos)


/* TEMP_T5: End point of 6th piece wise linear function */
  #define TEMP_T5_ResetValue (0x00000066UL)

/* T5 @Bits 0..7 : End point of 6th piece wise linear function */
  #define TEMP_T5_T5_Pos (0UL)
  #define TEMP_T5_T5_Msk (0xFFUL << TEMP_T5_T5_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TIMER                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct TIMER ======================================================= */
/**
  * @brief Timer/Counter
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __OM uint32_t TASKS_COUNT;
    __OM uint32_t TASKS_CLEAR;
    __IM uint32_t RESERVED[12];
    __OM uint32_t TASKS_CAPTURE[8];
    __IM uint32_t RESERVED1[8];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IOM uint32_t SUBSCRIBE_COUNT;
    __IOM uint32_t SUBSCRIBE_CLEAR;
    __IM uint32_t RESERVED2[12];
    __IOM uint32_t SUBSCRIBE_CAPTURE[8];
    __IM uint32_t RESERVED3[24];
    __IOM uint32_t EVENTS_COMPARE[8];
    __IM uint32_t RESERVED4[24];
    __IOM uint32_t PUBLISH_COMPARE[8];
    __IM uint32_t RESERVED5[8];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED6[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED7[126];
    __IOM uint32_t MODE;
    __IOM uint32_t BITMODE;
    __IM uint32_t RESERVED8;
    __IOM uint32_t PRESCALER;
    __IM uint32_t RESERVED9[11];
    __IOM uint32_t CC[8];
    __IM uint32_t RESERVED10[8];
    __IOM uint32_t ONESHOTEN[8];                     /*!< (@ 0x00000580) Enable one-shot operation for Capture/Compare channel
                                                                         n*/
  } NRF_TIMER_Type;

/* TIMER_TASKS_START: Start Timer */
  #define TIMER_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start Timer */
  #define TIMER_TASKS_START_TASKS_START_Pos (0UL)
  #define TIMER_TASKS_START_TASKS_START_Msk (0x1UL << TIMER_TASKS_START_TASKS_START_Pos)
  #define TIMER_TASKS_START_TASKS_START_Min (0x1UL)
  #define TIMER_TASKS_START_TASKS_START_Max (0x1UL)
  #define TIMER_TASKS_START_TASKS_START_Trigger (0x1UL)


/* TIMER_TASKS_STOP: Stop Timer */
  #define TIMER_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop Timer */
  #define TIMER_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define TIMER_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TIMER_TASKS_STOP_TASKS_STOP_Pos)
  #define TIMER_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define TIMER_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define TIMER_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* TIMER_TASKS_COUNT: Increment Timer (Counter mode only) */
  #define TIMER_TASKS_COUNT_ResetValue (0x00000000UL)

/* TASKS_COUNT @Bit 0 : Increment Timer (Counter mode only) */
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Pos (0UL)
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Msk (0x1UL << TIMER_TASKS_COUNT_TASKS_COUNT_Pos)
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Min (0x1UL)
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Max (0x1UL)
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Trigger (0x1UL)


/* TIMER_TASKS_CLEAR: Clear time */
  #define TIMER_TASKS_CLEAR_ResetValue (0x00000000UL)

/* TASKS_CLEAR @Bit 0 : Clear time */
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Pos (0UL)
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Msk (0x1UL << TIMER_TASKS_CLEAR_TASKS_CLEAR_Pos)
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Min (0x1UL)
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Max (0x1UL)
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Trigger (0x1UL)


/* TIMER_TASKS_CAPTURE: Capture Timer value to CC[n] register */
  #define TIMER_TASKS_CAPTURE_MaxCount (8UL)
  #define TIMER_TASKS_CAPTURE_MaxIndex (7UL)
  #define TIMER_TASKS_CAPTURE_MinIndex (0UL)
  #define TIMER_TASKS_CAPTURE_ResetValue (0x00000000UL)

/* TASKS_CAPTURE @Bit 0 : Capture Timer value to CC[n] register */
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Pos (0UL)
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Msk (0x1UL << TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Pos) /*!< Bit mask of TASKS_CAPTURE
                                                                            field.*/
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Min (0x1UL)
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Max (0x1UL)
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Trigger (0x1UL)


/* TIMER_SUBSCRIBE_START: Subscribe configuration for task START */
  #define TIMER_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define TIMER_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define TIMER_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_START_CHIDX_Pos)
  #define TIMER_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define TIMER_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_START_EN_Pos (31UL)
  #define TIMER_SUBSCRIBE_START_EN_Msk (0x1UL << TIMER_SUBSCRIBE_START_EN_Pos)
  #define TIMER_SUBSCRIBE_START_EN_Min (0x0UL)
  #define TIMER_SUBSCRIBE_START_EN_Max (0x1UL)
  #define TIMER_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define TIMER_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* TIMER_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define TIMER_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TIMER_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define TIMER_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_STOP_CHIDX_Pos)
  #define TIMER_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define TIMER_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define TIMER_SUBSCRIBE_STOP_EN_Msk (0x1UL << TIMER_SUBSCRIBE_STOP_EN_Pos)
  #define TIMER_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define TIMER_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define TIMER_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define TIMER_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* TIMER_SUBSCRIBE_COUNT: Subscribe configuration for task COUNT */
  #define TIMER_SUBSCRIBE_COUNT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task COUNT will subscribe to */
  #define TIMER_SUBSCRIBE_COUNT_CHIDX_Pos (0UL)
  #define TIMER_SUBSCRIBE_COUNT_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_COUNT_CHIDX_Pos)
  #define TIMER_SUBSCRIBE_COUNT_CHIDX_Min (0x00UL)
  #define TIMER_SUBSCRIBE_COUNT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_COUNT_EN_Pos (31UL)
  #define TIMER_SUBSCRIBE_COUNT_EN_Msk (0x1UL << TIMER_SUBSCRIBE_COUNT_EN_Pos)
  #define TIMER_SUBSCRIBE_COUNT_EN_Min (0x0UL)
  #define TIMER_SUBSCRIBE_COUNT_EN_Max (0x1UL)
  #define TIMER_SUBSCRIBE_COUNT_EN_Disabled (0x0UL)
  #define TIMER_SUBSCRIBE_COUNT_EN_Enabled (0x1UL)


/* TIMER_SUBSCRIBE_CLEAR: Subscribe configuration for task CLEAR */
  #define TIMER_SUBSCRIBE_CLEAR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CLEAR will subscribe to */
  #define TIMER_SUBSCRIBE_CLEAR_CHIDX_Pos (0UL)
  #define TIMER_SUBSCRIBE_CLEAR_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_CLEAR_CHIDX_Pos)
  #define TIMER_SUBSCRIBE_CLEAR_CHIDX_Min (0x00UL)
  #define TIMER_SUBSCRIBE_CLEAR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_CLEAR_EN_Pos (31UL)
  #define TIMER_SUBSCRIBE_CLEAR_EN_Msk (0x1UL << TIMER_SUBSCRIBE_CLEAR_EN_Pos)
  #define TIMER_SUBSCRIBE_CLEAR_EN_Min (0x0UL)
  #define TIMER_SUBSCRIBE_CLEAR_EN_Max (0x1UL)
  #define TIMER_SUBSCRIBE_CLEAR_EN_Disabled (0x0UL)
  #define TIMER_SUBSCRIBE_CLEAR_EN_Enabled (0x1UL)


/* TIMER_SUBSCRIBE_CAPTURE: Subscribe configuration for task CAPTURE[n] */
  #define TIMER_SUBSCRIBE_CAPTURE_MaxCount (8UL)
  #define TIMER_SUBSCRIBE_CAPTURE_MaxIndex (7UL)
  #define TIMER_SUBSCRIBE_CAPTURE_MinIndex (0UL)
  #define TIMER_SUBSCRIBE_CAPTURE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task CAPTURE[n] will subscribe to */
  #define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Pos (0UL)
  #define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_CAPTURE_CHIDX_Pos)
  #define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Min (0x00UL)
  #define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Pos (31UL)
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Msk (0x1UL << TIMER_SUBSCRIBE_CAPTURE_EN_Pos)
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Min (0x0UL)
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Max (0x1UL)
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Disabled (0x0UL)
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Enabled (0x1UL)


/* TIMER_EVENTS_COMPARE: Compare event on CC[n] match */
  #define TIMER_EVENTS_COMPARE_MaxCount (8UL)
  #define TIMER_EVENTS_COMPARE_MaxIndex (7UL)
  #define TIMER_EVENTS_COMPARE_MinIndex (0UL)
  #define TIMER_EVENTS_COMPARE_ResetValue (0x00000000UL)

/* EVENTS_COMPARE @Bit 0 : Compare event on CC[n] match */
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Pos (0UL)
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Msk (0x1UL << TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Pos) /*!< Bit mask of
                                                                            EVENTS_COMPARE field.*/
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Min (0x0UL)
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Max (0x1UL)
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_NotGenerated (0x0UL)
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Generated (0x1UL)


/* TIMER_PUBLISH_COMPARE: Publish configuration for event COMPARE[n] */
  #define TIMER_PUBLISH_COMPARE_MaxCount (8UL)
  #define TIMER_PUBLISH_COMPARE_MaxIndex (7UL)
  #define TIMER_PUBLISH_COMPARE_MinIndex (0UL)
  #define TIMER_PUBLISH_COMPARE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event COMPARE[n] will publish to */
  #define TIMER_PUBLISH_COMPARE_CHIDX_Pos (0UL)
  #define TIMER_PUBLISH_COMPARE_CHIDX_Msk (0xFFUL << TIMER_PUBLISH_COMPARE_CHIDX_Pos)
  #define TIMER_PUBLISH_COMPARE_CHIDX_Min (0x00UL)
  #define TIMER_PUBLISH_COMPARE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TIMER_PUBLISH_COMPARE_EN_Pos (31UL)
  #define TIMER_PUBLISH_COMPARE_EN_Msk (0x1UL << TIMER_PUBLISH_COMPARE_EN_Pos)
  #define TIMER_PUBLISH_COMPARE_EN_Min (0x0UL)
  #define TIMER_PUBLISH_COMPARE_EN_Max (0x1UL)
  #define TIMER_PUBLISH_COMPARE_EN_Disabled (0x0UL)
  #define TIMER_PUBLISH_COMPARE_EN_Enabled (0x1UL)


/* TIMER_SHORTS: Shortcuts between local events and tasks */
  #define TIMER_SHORTS_ResetValue (0x00000000UL)

/* COMPARE0_CLEAR @Bit 0 : Shortcut between event COMPARE[0] and task CLEAR */
  #define TIMER_SHORTS_COMPARE0_CLEAR_Pos (0UL)
  #define TIMER_SHORTS_COMPARE0_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE0_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE0_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE0_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE0_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE0_CLEAR_Enabled (0x1UL)

/* COMPARE1_CLEAR @Bit 1 : Shortcut between event COMPARE[1] and task CLEAR */
  #define TIMER_SHORTS_COMPARE1_CLEAR_Pos (1UL)
  #define TIMER_SHORTS_COMPARE1_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE1_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE1_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE1_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE1_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE1_CLEAR_Enabled (0x1UL)

/* COMPARE2_CLEAR @Bit 2 : Shortcut between event COMPARE[2] and task CLEAR */
  #define TIMER_SHORTS_COMPARE2_CLEAR_Pos (2UL)
  #define TIMER_SHORTS_COMPARE2_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE2_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE2_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE2_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE2_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE2_CLEAR_Enabled (0x1UL)

/* COMPARE3_CLEAR @Bit 3 : Shortcut between event COMPARE[3] and task CLEAR */
  #define TIMER_SHORTS_COMPARE3_CLEAR_Pos (3UL)
  #define TIMER_SHORTS_COMPARE3_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE3_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE3_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE3_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE3_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE3_CLEAR_Enabled (0x1UL)

/* COMPARE4_CLEAR @Bit 4 : Shortcut between event COMPARE[4] and task CLEAR */
  #define TIMER_SHORTS_COMPARE4_CLEAR_Pos (4UL)
  #define TIMER_SHORTS_COMPARE4_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE4_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE4_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE4_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE4_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE4_CLEAR_Enabled (0x1UL)

/* COMPARE5_CLEAR @Bit 5 : Shortcut between event COMPARE[5] and task CLEAR */
  #define TIMER_SHORTS_COMPARE5_CLEAR_Pos (5UL)
  #define TIMER_SHORTS_COMPARE5_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE5_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE5_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE5_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE5_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE5_CLEAR_Enabled (0x1UL)

/* COMPARE6_CLEAR @Bit 6 : Shortcut between event COMPARE[6] and task CLEAR */
  #define TIMER_SHORTS_COMPARE6_CLEAR_Pos (6UL)
  #define TIMER_SHORTS_COMPARE6_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE6_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE6_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE6_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE6_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE6_CLEAR_Enabled (0x1UL)

/* COMPARE7_CLEAR @Bit 7 : Shortcut between event COMPARE[7] and task CLEAR */
  #define TIMER_SHORTS_COMPARE7_CLEAR_Pos (7UL)
  #define TIMER_SHORTS_COMPARE7_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE7_CLEAR_Pos)
  #define TIMER_SHORTS_COMPARE7_CLEAR_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE7_CLEAR_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE7_CLEAR_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE7_CLEAR_Enabled (0x1UL)

/* COMPARE0_STOP @Bit 16 : Shortcut between event COMPARE[0] and task STOP */
  #define TIMER_SHORTS_COMPARE0_STOP_Pos (16UL)
  #define TIMER_SHORTS_COMPARE0_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE0_STOP_Pos)
  #define TIMER_SHORTS_COMPARE0_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE0_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE0_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE0_STOP_Enabled (0x1UL)

/* COMPARE1_STOP @Bit 17 : Shortcut between event COMPARE[1] and task STOP */
  #define TIMER_SHORTS_COMPARE1_STOP_Pos (17UL)
  #define TIMER_SHORTS_COMPARE1_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE1_STOP_Pos)
  #define TIMER_SHORTS_COMPARE1_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE1_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE1_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE1_STOP_Enabled (0x1UL)

/* COMPARE2_STOP @Bit 18 : Shortcut between event COMPARE[2] and task STOP */
  #define TIMER_SHORTS_COMPARE2_STOP_Pos (18UL)
  #define TIMER_SHORTS_COMPARE2_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE2_STOP_Pos)
  #define TIMER_SHORTS_COMPARE2_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE2_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE2_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE2_STOP_Enabled (0x1UL)

/* COMPARE3_STOP @Bit 19 : Shortcut between event COMPARE[3] and task STOP */
  #define TIMER_SHORTS_COMPARE3_STOP_Pos (19UL)
  #define TIMER_SHORTS_COMPARE3_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE3_STOP_Pos)
  #define TIMER_SHORTS_COMPARE3_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE3_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE3_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE3_STOP_Enabled (0x1UL)

/* COMPARE4_STOP @Bit 20 : Shortcut between event COMPARE[4] and task STOP */
  #define TIMER_SHORTS_COMPARE4_STOP_Pos (20UL)
  #define TIMER_SHORTS_COMPARE4_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE4_STOP_Pos)
  #define TIMER_SHORTS_COMPARE4_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE4_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE4_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE4_STOP_Enabled (0x1UL)

/* COMPARE5_STOP @Bit 21 : Shortcut between event COMPARE[5] and task STOP */
  #define TIMER_SHORTS_COMPARE5_STOP_Pos (21UL)
  #define TIMER_SHORTS_COMPARE5_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE5_STOP_Pos)
  #define TIMER_SHORTS_COMPARE5_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE5_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE5_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE5_STOP_Enabled (0x1UL)

/* COMPARE6_STOP @Bit 22 : Shortcut between event COMPARE[6] and task STOP */
  #define TIMER_SHORTS_COMPARE6_STOP_Pos (22UL)
  #define TIMER_SHORTS_COMPARE6_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE6_STOP_Pos)
  #define TIMER_SHORTS_COMPARE6_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE6_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE6_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE6_STOP_Enabled (0x1UL)

/* COMPARE7_STOP @Bit 23 : Shortcut between event COMPARE[7] and task STOP */
  #define TIMER_SHORTS_COMPARE7_STOP_Pos (23UL)
  #define TIMER_SHORTS_COMPARE7_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE7_STOP_Pos)
  #define TIMER_SHORTS_COMPARE7_STOP_Min (0x0UL)
  #define TIMER_SHORTS_COMPARE7_STOP_Max (0x1UL)
  #define TIMER_SHORTS_COMPARE7_STOP_Disabled (0x0UL)
  #define TIMER_SHORTS_COMPARE7_STOP_Enabled (0x1UL)


/* TIMER_INTEN: Enable or disable interrupt */
  #define TIMER_INTEN_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 16 : Enable or disable interrupt for event COMPARE[0] */
  #define TIMER_INTEN_COMPARE0_Pos (16UL)
  #define TIMER_INTEN_COMPARE0_Msk (0x1UL << TIMER_INTEN_COMPARE0_Pos)
  #define TIMER_INTEN_COMPARE0_Min (0x0UL)
  #define TIMER_INTEN_COMPARE0_Max (0x1UL)
  #define TIMER_INTEN_COMPARE0_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 17 : Enable or disable interrupt for event COMPARE[1] */
  #define TIMER_INTEN_COMPARE1_Pos (17UL)
  #define TIMER_INTEN_COMPARE1_Msk (0x1UL << TIMER_INTEN_COMPARE1_Pos)
  #define TIMER_INTEN_COMPARE1_Min (0x0UL)
  #define TIMER_INTEN_COMPARE1_Max (0x1UL)
  #define TIMER_INTEN_COMPARE1_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 18 : Enable or disable interrupt for event COMPARE[2] */
  #define TIMER_INTEN_COMPARE2_Pos (18UL)
  #define TIMER_INTEN_COMPARE2_Msk (0x1UL << TIMER_INTEN_COMPARE2_Pos)
  #define TIMER_INTEN_COMPARE2_Min (0x0UL)
  #define TIMER_INTEN_COMPARE2_Max (0x1UL)
  #define TIMER_INTEN_COMPARE2_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 19 : Enable or disable interrupt for event COMPARE[3] */
  #define TIMER_INTEN_COMPARE3_Pos (19UL)
  #define TIMER_INTEN_COMPARE3_Msk (0x1UL << TIMER_INTEN_COMPARE3_Pos)
  #define TIMER_INTEN_COMPARE3_Min (0x0UL)
  #define TIMER_INTEN_COMPARE3_Max (0x1UL)
  #define TIMER_INTEN_COMPARE3_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 20 : Enable or disable interrupt for event COMPARE[4] */
  #define TIMER_INTEN_COMPARE4_Pos (20UL)
  #define TIMER_INTEN_COMPARE4_Msk (0x1UL << TIMER_INTEN_COMPARE4_Pos)
  #define TIMER_INTEN_COMPARE4_Min (0x0UL)
  #define TIMER_INTEN_COMPARE4_Max (0x1UL)
  #define TIMER_INTEN_COMPARE4_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 21 : Enable or disable interrupt for event COMPARE[5] */
  #define TIMER_INTEN_COMPARE5_Pos (21UL)
  #define TIMER_INTEN_COMPARE5_Msk (0x1UL << TIMER_INTEN_COMPARE5_Pos)
  #define TIMER_INTEN_COMPARE5_Min (0x0UL)
  #define TIMER_INTEN_COMPARE5_Max (0x1UL)
  #define TIMER_INTEN_COMPARE5_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 22 : Enable or disable interrupt for event COMPARE[6] */
  #define TIMER_INTEN_COMPARE6_Pos (22UL)
  #define TIMER_INTEN_COMPARE6_Msk (0x1UL << TIMER_INTEN_COMPARE6_Pos)
  #define TIMER_INTEN_COMPARE6_Min (0x0UL)
  #define TIMER_INTEN_COMPARE6_Max (0x1UL)
  #define TIMER_INTEN_COMPARE6_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 23 : Enable or disable interrupt for event COMPARE[7] */
  #define TIMER_INTEN_COMPARE7_Pos (23UL)
  #define TIMER_INTEN_COMPARE7_Msk (0x1UL << TIMER_INTEN_COMPARE7_Pos)
  #define TIMER_INTEN_COMPARE7_Min (0x0UL)
  #define TIMER_INTEN_COMPARE7_Max (0x1UL)
  #define TIMER_INTEN_COMPARE7_Disabled (0x0UL)
  #define TIMER_INTEN_COMPARE7_Enabled (0x1UL)


/* TIMER_INTENSET: Enable interrupt */
  #define TIMER_INTENSET_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 16 : Write '1' to enable interrupt for event COMPARE[0] */
  #define TIMER_INTENSET_COMPARE0_Pos (16UL)
  #define TIMER_INTENSET_COMPARE0_Msk (0x1UL << TIMER_INTENSET_COMPARE0_Pos)
  #define TIMER_INTENSET_COMPARE0_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE0_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE0_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE0_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 17 : Write '1' to enable interrupt for event COMPARE[1] */
  #define TIMER_INTENSET_COMPARE1_Pos (17UL)
  #define TIMER_INTENSET_COMPARE1_Msk (0x1UL << TIMER_INTENSET_COMPARE1_Pos)
  #define TIMER_INTENSET_COMPARE1_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE1_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE1_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE1_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 18 : Write '1' to enable interrupt for event COMPARE[2] */
  #define TIMER_INTENSET_COMPARE2_Pos (18UL)
  #define TIMER_INTENSET_COMPARE2_Msk (0x1UL << TIMER_INTENSET_COMPARE2_Pos)
  #define TIMER_INTENSET_COMPARE2_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE2_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE2_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE2_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 19 : Write '1' to enable interrupt for event COMPARE[3] */
  #define TIMER_INTENSET_COMPARE3_Pos (19UL)
  #define TIMER_INTENSET_COMPARE3_Msk (0x1UL << TIMER_INTENSET_COMPARE3_Pos)
  #define TIMER_INTENSET_COMPARE3_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE3_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE3_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE3_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 20 : Write '1' to enable interrupt for event COMPARE[4] */
  #define TIMER_INTENSET_COMPARE4_Pos (20UL)
  #define TIMER_INTENSET_COMPARE4_Msk (0x1UL << TIMER_INTENSET_COMPARE4_Pos)
  #define TIMER_INTENSET_COMPARE4_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE4_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE4_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE4_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 21 : Write '1' to enable interrupt for event COMPARE[5] */
  #define TIMER_INTENSET_COMPARE5_Pos (21UL)
  #define TIMER_INTENSET_COMPARE5_Msk (0x1UL << TIMER_INTENSET_COMPARE5_Pos)
  #define TIMER_INTENSET_COMPARE5_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE5_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE5_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE5_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 22 : Write '1' to enable interrupt for event COMPARE[6] */
  #define TIMER_INTENSET_COMPARE6_Pos (22UL)
  #define TIMER_INTENSET_COMPARE6_Msk (0x1UL << TIMER_INTENSET_COMPARE6_Pos)
  #define TIMER_INTENSET_COMPARE6_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE6_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE6_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE6_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 23 : Write '1' to enable interrupt for event COMPARE[7] */
  #define TIMER_INTENSET_COMPARE7_Pos (23UL)
  #define TIMER_INTENSET_COMPARE7_Msk (0x1UL << TIMER_INTENSET_COMPARE7_Pos)
  #define TIMER_INTENSET_COMPARE7_Min (0x0UL)
  #define TIMER_INTENSET_COMPARE7_Max (0x1UL)
  #define TIMER_INTENSET_COMPARE7_Set (0x1UL)
  #define TIMER_INTENSET_COMPARE7_Disabled (0x0UL)
  #define TIMER_INTENSET_COMPARE7_Enabled (0x1UL)


/* TIMER_INTENCLR: Disable interrupt */
  #define TIMER_INTENCLR_ResetValue (0x00000000UL)

/* COMPARE0 @Bit 16 : Write '1' to disable interrupt for event COMPARE[0] */
  #define TIMER_INTENCLR_COMPARE0_Pos (16UL)
  #define TIMER_INTENCLR_COMPARE0_Msk (0x1UL << TIMER_INTENCLR_COMPARE0_Pos)
  #define TIMER_INTENCLR_COMPARE0_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE0_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE0_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE0_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE0_Enabled (0x1UL)

/* COMPARE1 @Bit 17 : Write '1' to disable interrupt for event COMPARE[1] */
  #define TIMER_INTENCLR_COMPARE1_Pos (17UL)
  #define TIMER_INTENCLR_COMPARE1_Msk (0x1UL << TIMER_INTENCLR_COMPARE1_Pos)
  #define TIMER_INTENCLR_COMPARE1_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE1_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE1_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE1_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE1_Enabled (0x1UL)

/* COMPARE2 @Bit 18 : Write '1' to disable interrupt for event COMPARE[2] */
  #define TIMER_INTENCLR_COMPARE2_Pos (18UL)
  #define TIMER_INTENCLR_COMPARE2_Msk (0x1UL << TIMER_INTENCLR_COMPARE2_Pos)
  #define TIMER_INTENCLR_COMPARE2_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE2_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE2_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE2_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE2_Enabled (0x1UL)

/* COMPARE3 @Bit 19 : Write '1' to disable interrupt for event COMPARE[3] */
  #define TIMER_INTENCLR_COMPARE3_Pos (19UL)
  #define TIMER_INTENCLR_COMPARE3_Msk (0x1UL << TIMER_INTENCLR_COMPARE3_Pos)
  #define TIMER_INTENCLR_COMPARE3_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE3_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE3_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE3_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE3_Enabled (0x1UL)

/* COMPARE4 @Bit 20 : Write '1' to disable interrupt for event COMPARE[4] */
  #define TIMER_INTENCLR_COMPARE4_Pos (20UL)
  #define TIMER_INTENCLR_COMPARE4_Msk (0x1UL << TIMER_INTENCLR_COMPARE4_Pos)
  #define TIMER_INTENCLR_COMPARE4_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE4_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE4_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE4_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE4_Enabled (0x1UL)

/* COMPARE5 @Bit 21 : Write '1' to disable interrupt for event COMPARE[5] */
  #define TIMER_INTENCLR_COMPARE5_Pos (21UL)
  #define TIMER_INTENCLR_COMPARE5_Msk (0x1UL << TIMER_INTENCLR_COMPARE5_Pos)
  #define TIMER_INTENCLR_COMPARE5_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE5_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE5_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE5_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE5_Enabled (0x1UL)

/* COMPARE6 @Bit 22 : Write '1' to disable interrupt for event COMPARE[6] */
  #define TIMER_INTENCLR_COMPARE6_Pos (22UL)
  #define TIMER_INTENCLR_COMPARE6_Msk (0x1UL << TIMER_INTENCLR_COMPARE6_Pos)
  #define TIMER_INTENCLR_COMPARE6_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE6_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE6_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE6_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE6_Enabled (0x1UL)

/* COMPARE7 @Bit 23 : Write '1' to disable interrupt for event COMPARE[7] */
  #define TIMER_INTENCLR_COMPARE7_Pos (23UL)
  #define TIMER_INTENCLR_COMPARE7_Msk (0x1UL << TIMER_INTENCLR_COMPARE7_Pos)
  #define TIMER_INTENCLR_COMPARE7_Min (0x0UL)
  #define TIMER_INTENCLR_COMPARE7_Max (0x1UL)
  #define TIMER_INTENCLR_COMPARE7_Clear (0x1UL)
  #define TIMER_INTENCLR_COMPARE7_Disabled (0x0UL)
  #define TIMER_INTENCLR_COMPARE7_Enabled (0x1UL)


/* TIMER_MODE: Timer mode selection */
  #define TIMER_MODE_ResetValue (0x00000000UL)

/* MODE @Bits 0..1 : Timer mode */
  #define TIMER_MODE_MODE_Pos (0UL)
  #define TIMER_MODE_MODE_Msk (0x3UL << TIMER_MODE_MODE_Pos)
  #define TIMER_MODE_MODE_Min (0x0UL)
  #define TIMER_MODE_MODE_Max (0x2UL)
  #define TIMER_MODE_MODE_Timer (0x0UL)
  #define TIMER_MODE_MODE_Counter (0x1UL)
  #define TIMER_MODE_MODE_LowPowerCounter (0x2UL)


/* TIMER_BITMODE: Configure the number of bits used by the TIMER */
  #define TIMER_BITMODE_ResetValue (0x00000000UL)

/* BITMODE @Bits 0..1 : Timer bit width */
  #define TIMER_BITMODE_BITMODE_Pos (0UL)
  #define TIMER_BITMODE_BITMODE_Msk (0x3UL << TIMER_BITMODE_BITMODE_Pos)
  #define TIMER_BITMODE_BITMODE_Min (0x0UL)
  #define TIMER_BITMODE_BITMODE_Max (0x3UL)
  #define TIMER_BITMODE_BITMODE_16Bit (0x0UL)
  #define TIMER_BITMODE_BITMODE_08Bit (0x1UL)
  #define TIMER_BITMODE_BITMODE_24Bit (0x2UL)
  #define TIMER_BITMODE_BITMODE_32Bit (0x3UL)


/* TIMER_PRESCALER: Timer prescaler register */
  #define TIMER_PRESCALER_ResetValue (0x00000004UL)

/* PRESCALER @Bits 0..3 : Prescaler value */
  #define TIMER_PRESCALER_PRESCALER_Pos (0UL)
  #define TIMER_PRESCALER_PRESCALER_Msk (0xFUL << TIMER_PRESCALER_PRESCALER_Pos)
  #define TIMER_PRESCALER_PRESCALER_Min (0x0UL)
  #define TIMER_PRESCALER_PRESCALER_Max (0x9UL)


/* TIMER_CC: Capture/Compare register n */
  #define TIMER_CC_MaxCount (8UL)
  #define TIMER_CC_MaxIndex (7UL)
  #define TIMER_CC_MinIndex (0UL)
  #define TIMER_CC_ResetValue (0x00000000UL)

/* CC @Bits 0..31 : Capture/Compare value */
  #define TIMER_CC_CC_Pos (0UL)
  #define TIMER_CC_CC_Msk (0xFFFFFFFFUL << TIMER_CC_CC_Pos)


/* TIMER_ONESHOTEN: Enable one-shot operation for Capture/Compare channel n */
  #define TIMER_ONESHOTEN_MaxCount (8UL)
  #define TIMER_ONESHOTEN_MaxIndex (7UL)
  #define TIMER_ONESHOTEN_MinIndex (0UL)
  #define TIMER_ONESHOTEN_ResetValue (0x00000000UL)

/* ONESHOTEN @Bit 0 : Enable one-shot operation */
  #define TIMER_ONESHOTEN_ONESHOTEN_Pos (0UL)
  #define TIMER_ONESHOTEN_ONESHOTEN_Msk (0x1UL << TIMER_ONESHOTEN_ONESHOTEN_Pos)
  #define TIMER_ONESHOTEN_ONESHOTEN_Min (0x0UL)
  #define TIMER_ONESHOTEN_ONESHOTEN_Max (0x1UL)
  #define TIMER_ONESHOTEN_ONESHOTEN_Disable (0x0UL)
  #define TIMER_ONESHOTEN_ONESHOTEN_Enable (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TPIU                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct TPIU ======================================================= */
/**
  * @brief Trace Port Interface Unit
  */
  typedef struct {
    __IOM uint32_t SUPPORTEDPORTSIZES;               /*!< (@ 0x00000000) Each bit location is a single port size that is
                                                                         supported on the device.*/
    __IOM uint32_t CURRENTPORTSIZE;                  /*!< (@ 0x00000004) Each bit location is a single port size. One bit can be
                                                                         set, and indicates the current port size.*/
    __IM uint32_t RESERVED[62];
    __IOM uint32_t SUPPORTEDTRIGGERMODES;            /*!< (@ 0x00000100) The Supported_trigger_modes register indicates the
                                                                         implemented trigger counter multipliers and other
                                                                         supported features of the trigger system.*/
    __IOM uint32_t TRIGGERCOUNTERVALUE;              /*!< (@ 0x00000104) The Trigger_counter_value register enables delaying the
                                                                         indication of triggers to any external connected trace
                                                                         capture or storage devices.*/
    __IOM uint32_t TRIGGERMULTIPLIER;                /*!< (@ 0x00000108) The Trigger_multiplier register contains the selectors
                                                                         for the trigger counter multiplier.*/
    __IM uint32_t RESERVED1[61];
    __IOM uint32_t SUPPPORTEDTESTPATTERNMODES;       /*!< (@ 0x00000200) The Supported_test_pattern_modes register provides a
                                                                         set of known bit sequences or patterns that can be
                                                                         output over the trace port and can be detected by the
                                                                         TPA or other associated trace capture device.*/
    __IOM uint32_t CURRENTTESTPATTERNMODES;          /*!< (@ 0x00000204) Current_test_pattern_mode indicates the current test
                                                                         pattern or mode selected.*/
    __IOM uint32_t TPRCR;                            /*!< (@ 0x00000208) The TPRCR register is an 8-bit counter start value that
                                                                         is decremented. A write sets the initial counter value
                                                                         and a read returns the programmed value.*/
    __IM uint32_t RESERVED2[61];
    __IOM uint32_t FFSR;                             /*!< (@ 0x00000300) The FFSR register indicates the current status of the
                                                                         formatter and flush features available in the TPIU.*/
    __IOM uint32_t FFCR;                             /*!< (@ 0x00000304) The FFCR register controls the generation of stop,
                                                                         trigger, and flush events.*/
    __IOM uint32_t FSCR;                             /*!< (@ 0x00000308) The FSCR register enables the frequency of
                                                                         synchronization information to be optimized to suit the
                                                                         Trace Port Analyzer (TPA) capture buffer size.*/
    __IM uint32_t RESERVED3[61];
    __IOM uint32_t EXTCTLINPORT;                     /*!< (@ 0x00000400) Two ports can be used as a control and feedback
                                                                         mechanism for any serializers, pin sharing
                                                                         multiplexers, or other solutions that might be added to
                                                                         the trace output pins either for pin control or a
                                                                         high-speed trace port solution.*/
    __IOM uint32_t EXTCTLOUTPORT;                    /*!< (@ 0x00000404) Two ports can be used as a control and feedback
                                                                         mechanism for any serializers, pin sharing
                                                                         multiplexers, or other solutions that might be added to
                                                                         the trace output pins either for pin control or a high
                                                                         speed trace port solution. These ports are raw register
                                                                         banks that sample or export the corresponding external
                                                                         pins.*/
    __IM uint32_t RESERVED4[695];
    __IOM uint32_t ITTRFLINACK;                      /*!< (@ 0x00000EE4) The ITTRFLINACK register enables control of the
                                                                         triginack and flushinack outputs from the TPIU.*/
    __IOM uint32_t ITTRFLIN;                         /*!< (@ 0x00000EE8) The ITTRFLIN register contains the values of the
                                                                         flushin and trigin inputs to the TPIU.*/
    __IOM uint32_t ITATBDATA0;                       /*!< (@ 0x00000EEC) The ITATBDATA0 register contains the value of the
                                                                         atdatas inputs to the TPIU. The values are valid only
                                                                         when atvalids is HIGH.*/
    __IOM uint32_t ITATBCTR2;                        /*!< (@ 0x00000EF0) Enables control of the atreadys and afvalids outputs of
                                                                         the TPIU.*/
    __IOM uint32_t ITATBCTR1;                        /*!< (@ 0x00000EF4) The ITATBCTR1 register contains the value of the atids
                                                                         input to the TPIU. This is only valid when atvalids is
                                                                         HIGH.*/
    __IOM uint32_t ITATBCTR0;                        /*!< (@ 0x00000EF8) The ITATBCTR0 register captures the values of the
                                                                         atvalids, afreadys, and atbytess inputs to the TPIU. To
                                                                         ensure the integration registers work correctly in a
                                                                         system, the value of atbytess is only valid when
                                                                         atvalids, bit[0], is HIGH.*/
    __IM uint32_t RESERVED5;
    __IOM uint32_t ITCTRL;                           /*!< (@ 0x00000F00) Used to enable topology detection. This register
                                                                         enables the component to switch from a functional mode,
                                                                         the default behavior, to integration mode where the
                                                                         inputs and outputs of the component can be directly
                                                                         controlled for integration testing and topology
                                                                         solving.*/
    __IM uint32_t RESERVED6[39];
    __IOM uint32_t CLAIMSET;                         /*!< (@ 0x00000FA0) Software can use the claim tag to coordinate
                                                                         application and debugger access to trace unit
                                                                         functionality. The claim tags have no effect on the
                                                                         operation of the component. The CLAIMSET register sets
                                                                         bits in the claim tag, and determines the number of
                                                                         claim bits implemented.*/
    __IOM uint32_t CLAIMCLR;                         /*!< (@ 0x00000FA4) Software can use the claim tag to coordinate
                                                                         application and debugger access to trace unit
                                                                         functionality. The claim tags have no effect on the
                                                                         operation of the component. The CLAIMCLR register sets
                                                                         the bits in the claim tag to 0 and determines the
                                                                         current value of the claim tag.*/
    __IM uint32_t RESERVED7[2];
    __IOM uint32_t LAR;                              /*!< (@ 0x00000FB0) This is used to enable write access to device
                                                                         registers.*/
    __IOM uint32_t LSR;                              /*!< (@ 0x00000FB4) This indicates the status of the lock control
                                                                         mechanism. This lock prevents accidental writes by code
                                                                         under debug. Accesses to the extended stimulus port
                                                                         registers are not affected by the lock mechanism. This
                                                                         register must always be present although there might
                                                                         not be any lock access control mechanism. The lock
                                                                         mechanism, where present and locked, must block write
                                                                         accesses to any control register, except the Lock
                                                                         Access Register. For most components this covers all
                                                                         registers except for the Lock Access Register.*/
    __IOM uint32_t AUTHSTATUS;                       /*!< (@ 0x00000FB8) Indicates the current level of tracing permitted by the
                                                                         system*/
    __IM uint32_t RESERVED8[3];
    __IM uint32_t DEVID;
    __IM uint32_t DEVTYPE;                           /*!< (@ 0x00000FCC) The DEVTYPE register provides a debugger with
                                                                         information about the component when the Part Number
                                                                         field is not recognized. The debugger can then report
                                                                         this information.*/
    __IOM uint32_t PIDR4;
    __IM uint32_t RESERVED9[3];
    __IOM uint32_t PIDR0;
    __IOM uint32_t PIDR1;
    __IOM uint32_t PIDR2;
    __IOM uint32_t PIDR3;
    __IOM uint32_t CIDR0;
    __IOM uint32_t CIDR1;
    __IOM uint32_t CIDR2;
    __IOM uint32_t CIDR3;
  } NRF_TPIU_Type;

/* TPIU_SUPPORTEDPORTSIZES: Each bit location is a single port size that is supported on the device. */
  #define TPIU_SUPPORTEDPORTSIZES_ResetValue (0x00000000UL)

/* PORT_SIZE_1 @Bit 0 : Indicates whether the TPIU supports port size of 1-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_1_Pos (0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_1_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_1_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_1 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_1_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_1_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_1_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_1_Supported (0x1UL)

/* PORT_SIZE_2 @Bit 1 : Indicates whether the TPIU supports port size of 2-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_2_Pos (1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_2_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_2_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_2 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_2_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_2_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_2_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_2_Supported (0x1UL)

/* PORT_SIZE_3 @Bit 2 : Indicates whether the TPIU supports port size of 3-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_3_Pos (2UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_3_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_3_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_3 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_3_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_3_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_3_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_3_Supported (0x1UL)

/* PORT_SIZE_4 @Bit 3 : Indicates whether the TPIU supports port size of 4-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_4_Pos (3UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_4_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_4_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_4 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_4_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_4_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_4_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_4_Supported (0x1UL)

/* PORT_SIZE_5 @Bit 4 : Indicates whether the TPIU supports port size of 5-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_5_Pos (4UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_5_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_5_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_5 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_5_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_5_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_5_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_5_Supported (0x1UL)

/* PORT_SIZE_6 @Bit 5 : Indicates whether the TPIU supports port size of 6-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_6_Pos (5UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_6_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_6_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_6 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_6_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_6_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_6_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_6_Supported (0x1UL)

/* PORT_SIZE_7 @Bit 6 : Indicates whether the TPIU supports port size of 7-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_7_Pos (6UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_7_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_7_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_7 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_7_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_7_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_7_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_7_Supported (0x1UL)

/* PORT_SIZE_8 @Bit 7 : Indicates whether the TPIU supports port size of 8-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_8_Pos (7UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_8_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_8_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_8 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_8_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_8_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_8_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_8_Supported (0x1UL)

/* PORT_SIZE_9 @Bit 8 : Indicates whether the TPIU supports port size of 9-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_9_Pos (8UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_9_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_9_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_9 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_9_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_9_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_9_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_9_Supported (0x1UL)

/* PORT_SIZE_10 @Bit 9 : Indicates whether the TPIU supports port size of 10-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_10_Pos (9UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_10_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_10_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_10 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_10_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_10_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_10_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_10_Supported (0x1UL)

/* PORT_SIZE_11 @Bit 10 : Indicates whether the TPIU supports port size of 11-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_11_Pos (10UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_11_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_11_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_11 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_11_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_11_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_11_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_11_Supported (0x1UL)

/* PORT_SIZE_12 @Bit 11 : Indicates whether the TPIU supports port size of 12-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_12_Pos (11UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_12_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_12_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_12 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_12_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_12_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_12_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_12_Supported (0x1UL)

/* PORT_SIZE_13 @Bit 12 : Indicates whether the TPIU supports port size of 13-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_13_Pos (12UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_13_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_13_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_13 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_13_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_13_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_13_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_13_Supported (0x1UL)

/* PORT_SIZE_14 @Bit 13 : Indicates whether the TPIU supports port size of 14-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_14_Pos (13UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_14_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_14_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_14 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_14_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_14_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_14_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_14_Supported (0x1UL)

/* PORT_SIZE_15 @Bit 14 : Indicates whether the TPIU supports port size of 15-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_15_Pos (14UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_15_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_15_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_15 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_15_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_15_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_15_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_15_Supported (0x1UL)

/* PORT_SIZE_16 @Bit 15 : Indicates whether the TPIU supports port size of 16-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_16_Pos (15UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_16_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_16_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_16 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_16_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_16_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_16_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_16_Supported (0x1UL)

/* PORT_SIZE_17 @Bit 16 : Indicates whether the TPIU supports port size of 17-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_17_Pos (16UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_17_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_17_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_17 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_17_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_17_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_17_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_17_Supported (0x1UL)

/* PORT_SIZE_18 @Bit 17 : Indicates whether the TPIU supports port size of 18-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_18_Pos (17UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_18_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_18_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_18 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_18_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_18_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_18_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_18_Supported (0x1UL)

/* PORT_SIZE_19 @Bit 18 : Indicates whether the TPIU supports port size of 19-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_19_Pos (18UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_19_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_19_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_19 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_19_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_19_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_19_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_19_Supported (0x1UL)

/* PORT_SIZE_20 @Bit 19 : Indicates whether the TPIU supports port size of 20-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_20_Pos (19UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_20_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_20_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_20 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_20_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_20_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_20_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_20_Supported (0x1UL)

/* PORT_SIZE_21 @Bit 20 : Indicates whether the TPIU supports port size of 21-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_21_Pos (20UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_21_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_21_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_21 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_21_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_21_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_21_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_21_Supported (0x1UL)

/* PORT_SIZE_22 @Bit 21 : Indicates whether the TPIU supports port size of 22-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_22_Pos (21UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_22_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_22_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_22 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_22_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_22_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_22_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_22_Supported (0x1UL)

/* PORT_SIZE_23 @Bit 22 : Indicates whether the TPIU supports port size of 23-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_23_Pos (22UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_23_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_23_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_23 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_23_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_23_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_23_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_23_Supported (0x1UL)

/* PORT_SIZE_24 @Bit 23 : Indicates whether the TPIU supports port size of 24-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_24_Pos (23UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_24_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_24_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_24 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_24_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_24_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_24_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_24_Supported (0x1UL)

/* PORT_SIZE_25 @Bit 24 : Indicates whether the TPIU supports port size of 25-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_25_Pos (24UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_25_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_25_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_25 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_25_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_25_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_25_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_25_Supported (0x1UL)

/* PORT_SIZE_26 @Bit 25 : Indicates whether the TPIU supports port size of 26-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_26_Pos (25UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_26_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_26_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_26 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_26_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_26_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_26_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_26_Supported (0x1UL)

/* PORT_SIZE_27 @Bit 26 : Indicates whether the TPIU supports port size of 27-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_27_Pos (26UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_27_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_27_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_27 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_27_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_27_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_27_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_27_Supported (0x1UL)

/* PORT_SIZE_28 @Bit 27 : Indicates whether the TPIU supports port size of 28-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_28_Pos (27UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_28_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_28_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_28 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_28_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_28_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_28_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_28_Supported (0x1UL)

/* PORT_SIZE_29 @Bit 28 : Indicates whether the TPIU supports port size of 29-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_29_Pos (28UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_29_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_29_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_29 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_29_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_29_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_29_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_29_Supported (0x1UL)

/* PORT_SIZE_30 @Bit 29 : Indicates whether the TPIU supports port size of 30-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_30_Pos (29UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_30_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_30_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_30 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_30_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_30_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_30_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_30_Supported (0x1UL)

/* PORT_SIZE_31 @Bit 30 : Indicates whether the TPIU supports port size of 31-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_31_Pos (30UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_31_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_31_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_31 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_31_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_31_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_31_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_31_Supported (0x1UL)

/* PORT_SIZE_32 @Bit 31 : Indicates whether the TPIU supports port size of 32-bit. */
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_32_Pos (31UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_32_Msk (0x1UL << TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_32_Pos) /*!< Bit mask of
                                                                            PORT_SIZE_32 field.*/
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_32_Min (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_32_Max (0x1UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_32_NotSupported (0x0UL)
  #define TPIU_SUPPORTEDPORTSIZES_PORT_SIZE_32_Supported (0x1UL)


/* TPIU_CURRENTPORTSIZE: Each bit location is a single port size. One bit can be set, and indicates the current port size. */
  #define TPIU_CURRENTPORTSIZE_ResetValue (0x00000000UL)

/* PORT_SIZE_1 @Bit 0 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_1_Pos (0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_1_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_1_Pos) /*!< Bit mask of PORT_SIZE_1
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_1_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_1_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_1_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_1_Selected (0x1UL)

/* PORT_SIZE_2 @Bit 1 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_2_Pos (1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_2_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_2_Pos) /*!< Bit mask of PORT_SIZE_2
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_2_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_2_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_2_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_2_Selected (0x1UL)

/* PORT_SIZE_3 @Bit 2 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_3_Pos (2UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_3_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_3_Pos) /*!< Bit mask of PORT_SIZE_3
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_3_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_3_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_3_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_3_Selected (0x1UL)

/* PORT_SIZE_4 @Bit 3 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_4_Pos (3UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_4_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_4_Pos) /*!< Bit mask of PORT_SIZE_4
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_4_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_4_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_4_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_4_Selected (0x1UL)

/* PORT_SIZE_5 @Bit 4 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_5_Pos (4UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_5_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_5_Pos) /*!< Bit mask of PORT_SIZE_5
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_5_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_5_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_5_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_5_Selected (0x1UL)

/* PORT_SIZE_6 @Bit 5 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_6_Pos (5UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_6_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_6_Pos) /*!< Bit mask of PORT_SIZE_6
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_6_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_6_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_6_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_6_Selected (0x1UL)

/* PORT_SIZE_7 @Bit 6 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_7_Pos (6UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_7_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_7_Pos) /*!< Bit mask of PORT_SIZE_7
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_7_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_7_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_7_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_7_Selected (0x1UL)

/* PORT_SIZE_8 @Bit 7 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_8_Pos (7UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_8_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_8_Pos) /*!< Bit mask of PORT_SIZE_8
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_8_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_8_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_8_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_8_Selected (0x1UL)

/* PORT_SIZE_9 @Bit 8 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_9_Pos (8UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_9_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_9_Pos) /*!< Bit mask of PORT_SIZE_9
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_9_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_9_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_9_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_9_Selected (0x1UL)

/* PORT_SIZE_10 @Bit 9 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_10_Pos (9UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_10_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_10_Pos) /*!< Bit mask of PORT_SIZE_10
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_10_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_10_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_10_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_10_Selected (0x1UL)

/* PORT_SIZE_11 @Bit 10 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_11_Pos (10UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_11_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_11_Pos) /*!< Bit mask of PORT_SIZE_11
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_11_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_11_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_11_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_11_Selected (0x1UL)

/* PORT_SIZE_12 @Bit 11 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_12_Pos (11UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_12_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_12_Pos) /*!< Bit mask of PORT_SIZE_12
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_12_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_12_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_12_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_12_Selected (0x1UL)

/* PORT_SIZE_13 @Bit 12 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_13_Pos (12UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_13_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_13_Pos) /*!< Bit mask of PORT_SIZE_13
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_13_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_13_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_13_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_13_Selected (0x1UL)

/* PORT_SIZE_14 @Bit 13 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_14_Pos (13UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_14_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_14_Pos) /*!< Bit mask of PORT_SIZE_14
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_14_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_14_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_14_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_14_Selected (0x1UL)

/* PORT_SIZE_15 @Bit 14 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_15_Pos (14UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_15_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_15_Pos) /*!< Bit mask of PORT_SIZE_15
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_15_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_15_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_15_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_15_Selected (0x1UL)

/* PORT_SIZE_16 @Bit 15 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_16_Pos (15UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_16_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_16_Pos) /*!< Bit mask of PORT_SIZE_16
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_16_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_16_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_16_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_16_Selected (0x1UL)

/* PORT_SIZE_17 @Bit 16 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_17_Pos (16UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_17_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_17_Pos) /*!< Bit mask of PORT_SIZE_17
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_17_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_17_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_17_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_17_Selected (0x1UL)

/* PORT_SIZE_18 @Bit 17 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_18_Pos (17UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_18_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_18_Pos) /*!< Bit mask of PORT_SIZE_18
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_18_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_18_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_18_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_18_Selected (0x1UL)

/* PORT_SIZE_19 @Bit 18 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_19_Pos (18UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_19_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_19_Pos) /*!< Bit mask of PORT_SIZE_19
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_19_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_19_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_19_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_19_Selected (0x1UL)

/* PORT_SIZE_20 @Bit 19 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_20_Pos (19UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_20_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_20_Pos) /*!< Bit mask of PORT_SIZE_20
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_20_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_20_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_20_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_20_Selected (0x1UL)

/* PORT_SIZE_21 @Bit 20 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_21_Pos (20UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_21_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_21_Pos) /*!< Bit mask of PORT_SIZE_21
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_21_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_21_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_21_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_21_Selected (0x1UL)

/* PORT_SIZE_22 @Bit 21 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_22_Pos (21UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_22_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_22_Pos) /*!< Bit mask of PORT_SIZE_22
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_22_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_22_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_22_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_22_Selected (0x1UL)

/* PORT_SIZE_23 @Bit 22 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_23_Pos (22UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_23_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_23_Pos) /*!< Bit mask of PORT_SIZE_23
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_23_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_23_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_23_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_23_Selected (0x1UL)

/* PORT_SIZE_24 @Bit 23 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_24_Pos (23UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_24_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_24_Pos) /*!< Bit mask of PORT_SIZE_24
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_24_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_24_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_24_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_24_Selected (0x1UL)

/* PORT_SIZE_25 @Bit 24 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_25_Pos (24UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_25_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_25_Pos) /*!< Bit mask of PORT_SIZE_25
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_25_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_25_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_25_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_25_Selected (0x1UL)

/* PORT_SIZE_26 @Bit 25 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_26_Pos (25UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_26_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_26_Pos) /*!< Bit mask of PORT_SIZE_26
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_26_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_26_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_26_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_26_Selected (0x1UL)

/* PORT_SIZE_27 @Bit 26 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_27_Pos (26UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_27_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_27_Pos) /*!< Bit mask of PORT_SIZE_27
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_27_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_27_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_27_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_27_Selected (0x1UL)

/* PORT_SIZE_28 @Bit 27 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_28_Pos (27UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_28_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_28_Pos) /*!< Bit mask of PORT_SIZE_28
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_28_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_28_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_28_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_28_Selected (0x1UL)

/* PORT_SIZE_29 @Bit 28 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_29_Pos (28UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_29_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_29_Pos) /*!< Bit mask of PORT_SIZE_29
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_29_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_29_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_29_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_29_Selected (0x1UL)

/* PORT_SIZE_30 @Bit 29 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_30_Pos (29UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_30_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_30_Pos) /*!< Bit mask of PORT_SIZE_30
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_30_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_30_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_30_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_30_Selected (0x1UL)

/* PORT_SIZE_31 @Bit 30 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_31_Pos (30UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_31_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_31_Pos) /*!< Bit mask of PORT_SIZE_31
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_31_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_31_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_31_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_31_Selected (0x1UL)

/* PORT_SIZE_32 @Bit 31 : Indicates which port size is currently selected. */
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_32_Pos (31UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_32_Msk (0x1UL << TPIU_CURRENTPORTSIZE_PORT_SIZE_32_Pos) /*!< Bit mask of PORT_SIZE_32
                                                                            field.*/
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_32_Min (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_32_Max (0x1UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_32_NotSelected (0x0UL)
  #define TPIU_CURRENTPORTSIZE_PORT_SIZE_32_Selected (0x1UL)


/* TPIU_SUPPORTEDTRIGGERMODES: The Supported_trigger_modes register indicates the implemented trigger counter multipliers and
                                other supported features of the trigger system. */

  #define TPIU_SUPPORTEDTRIGGERMODES_ResetValue (0x00000000UL)

/* MULT0 @Bit 0 : Indicates whether multiplying the trigger counter by 2^(0+1) is supported. */
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT0_Pos (0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT0_Msk (0x1UL << TPIU_SUPPORTEDTRIGGERMODES_MULT0_Pos)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT0_Min (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT0_Max (0x1UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT0_NotSelected (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT0_Selected (0x1UL)

/* MULT1 @Bit 1 : Indicates whether multiplying the trigger counter by 2^(1+1) is supported. */
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT1_Pos (1UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT1_Msk (0x1UL << TPIU_SUPPORTEDTRIGGERMODES_MULT1_Pos)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT1_Min (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT1_Max (0x1UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT1_NotSelected (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT1_Selected (0x1UL)

/* MULT2 @Bit 2 : Indicates whether multiplying the trigger counter by 2^(2+1) is supported. */
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT2_Pos (2UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT2_Msk (0x1UL << TPIU_SUPPORTEDTRIGGERMODES_MULT2_Pos)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT2_Min (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT2_Max (0x1UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT2_NotSelected (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT2_Selected (0x1UL)

/* MULT3 @Bit 3 : Indicates whether multiplying the trigger counter by 2^(3+1) is supported. */
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT3_Pos (3UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT3_Msk (0x1UL << TPIU_SUPPORTEDTRIGGERMODES_MULT3_Pos)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT3_Min (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT3_Max (0x1UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT3_NotSelected (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT3_Selected (0x1UL)

/* MULT4 @Bit 4 : Indicates whether multiplying the trigger counter by 2^(4+1) is supported. */
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT4_Pos (4UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT4_Msk (0x1UL << TPIU_SUPPORTEDTRIGGERMODES_MULT4_Pos)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT4_Min (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT4_Max (0x1UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT4_NotSelected (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_MULT4_Selected (0x1UL)

/* TCOUNT8 @Bit 8 : Indicates whether an 8-bit wide counter register is implemented. */
  #define TPIU_SUPPORTEDTRIGGERMODES_TCOUNT8_Pos (8UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_TCOUNT8_Msk (0x1UL << TPIU_SUPPORTEDTRIGGERMODES_TCOUNT8_Pos) /*!< Bit mask of TCOUNT8
                                                                            field.*/
  #define TPIU_SUPPORTEDTRIGGERMODES_TCOUNT8_Min (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_TCOUNT8_Max (0x1UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_TCOUNT8_NotImplemented (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_TCOUNT8_Implemented (0x1UL)

/* TRIGGERED @Bit 16 : A trigger has occurred and the counter has reached 0. */
  #define TPIU_SUPPORTEDTRIGGERMODES_TRIGGERED_Pos (16UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_TRIGGERED_Msk (0x1UL << TPIU_SUPPORTEDTRIGGERMODES_TRIGGERED_Pos) /*!< Bit mask of
                                                                            TRIGGERED field.*/
  #define TPIU_SUPPORTEDTRIGGERMODES_TRIGGERED_Min (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_TRIGGERED_Max (0x1UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_TRIGGERED_NotOccured (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_TRIGGERED_Occured (0x1UL)

/* TRGRUN @Bit 17 : A trigger has occurred but the counter is not at 0. */
  #define TPIU_SUPPORTEDTRIGGERMODES_TRGRUN_Pos (17UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_TRGRUN_Msk (0x1UL << TPIU_SUPPORTEDTRIGGERMODES_TRGRUN_Pos)
  #define TPIU_SUPPORTEDTRIGGERMODES_TRGRUN_Min (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_TRGRUN_Max (0x1UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_TRGRUN_NotOccured (0x0UL)
  #define TPIU_SUPPORTEDTRIGGERMODES_TRGRUN_Occured (0x1UL)


/* TPIU_TRIGGERCOUNTERVALUE: The Trigger_counter_value register enables delaying the indication of triggers to any external
                              connected trace capture or storage devices. */

  #define TPIU_TRIGGERCOUNTERVALUE_ResetValue (0x00000000UL)

/* TrigCount @Bits 0..7 : 8-bit counter value for the number of words to be output from the formatter before a trigger is
                          inserted. */

  #define TPIU_TRIGGERCOUNTERVALUE_TrigCount_Pos (0UL)
  #define TPIU_TRIGGERCOUNTERVALUE_TrigCount_Msk (0xFFUL << TPIU_TRIGGERCOUNTERVALUE_TrigCount_Pos) /*!< Bit mask of TrigCount
                                                                            field.*/
  #define TPIU_TRIGGERCOUNTERVALUE_TrigCount_Min (0x00UL)
  #define TPIU_TRIGGERCOUNTERVALUE_TrigCount_Max (0xFFUL)


/* TPIU_TRIGGERMULTIPLIER: The Trigger_multiplier register contains the selectors for the trigger counter multiplier. */
  #define TPIU_TRIGGERMULTIPLIER_ResetValue (0x00000000UL)

/* MULT0 @Bit 0 : Multiply the Trigger Counter by 2^n. */
  #define TPIU_TRIGGERMULTIPLIER_MULT0_Pos (0UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT0_Msk (0x1UL << TPIU_TRIGGERMULTIPLIER_MULT0_Pos)
  #define TPIU_TRIGGERMULTIPLIER_MULT0_Min (0x0UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT0_Max (0x1UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT0_Disabled (0x0UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT0_Enabled (0x1UL)

/* MULT1 @Bit 1 : Multiply the Trigger Counter by 2^n. */
  #define TPIU_TRIGGERMULTIPLIER_MULT1_Pos (1UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT1_Msk (0x1UL << TPIU_TRIGGERMULTIPLIER_MULT1_Pos)
  #define TPIU_TRIGGERMULTIPLIER_MULT1_Min (0x0UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT1_Max (0x1UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT1_Disabled (0x0UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT1_Enabled (0x1UL)

/* MULT2 @Bit 2 : Multiply the Trigger Counter by 2^n. */
  #define TPIU_TRIGGERMULTIPLIER_MULT2_Pos (2UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT2_Msk (0x1UL << TPIU_TRIGGERMULTIPLIER_MULT2_Pos)
  #define TPIU_TRIGGERMULTIPLIER_MULT2_Min (0x0UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT2_Max (0x1UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT2_Disabled (0x0UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT2_Enabled (0x1UL)

/* MULT3 @Bit 3 : Multiply the Trigger Counter by 2^n. */
  #define TPIU_TRIGGERMULTIPLIER_MULT3_Pos (3UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT3_Msk (0x1UL << TPIU_TRIGGERMULTIPLIER_MULT3_Pos)
  #define TPIU_TRIGGERMULTIPLIER_MULT3_Min (0x0UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT3_Max (0x1UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT3_Disabled (0x0UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT3_Enabled (0x1UL)

/* MULT4 @Bit 4 : Multiply the Trigger Counter by 2^n. */
  #define TPIU_TRIGGERMULTIPLIER_MULT4_Pos (4UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT4_Msk (0x1UL << TPIU_TRIGGERMULTIPLIER_MULT4_Pos)
  #define TPIU_TRIGGERMULTIPLIER_MULT4_Min (0x0UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT4_Max (0x1UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT4_Disabled (0x0UL)
  #define TPIU_TRIGGERMULTIPLIER_MULT4_Enabled (0x1UL)


/* TPIU_SUPPPORTEDTESTPATTERNMODES: The Supported_test_pattern_modes register provides a set of known bit sequences or patterns
                                     that can be output over the trace port and can be detected by the TPA or other associated
                                     trace capture device. */

  #define TPIU_SUPPPORTEDTESTPATTERNMODES_ResetValue (0x00000000UL)

/* PATW1 @Bit 0 : Indicates whether the walking 1s pattern is supported as output over the trace port. */
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATW1_Pos (0UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATW1_Msk (0x1UL << TPIU_SUPPPORTEDTESTPATTERNMODES_PATW1_Pos) /*!< Bit mask of PATW1
                                                                            field.*/
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATW1_Min (0x0UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATW1_Max (0x1UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATW1_NotSupported (0x0UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATW1_Supported (0x1UL)

/* PATW0 @Bit 1 : Indicates whether the walking 0s pattern is supported as output over the trace port. */
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATW0_Pos (1UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATW0_Msk (0x1UL << TPIU_SUPPPORTEDTESTPATTERNMODES_PATW0_Pos) /*!< Bit mask of PATW0
                                                                            field.*/
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATW0_Min (0x0UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATW0_Max (0x1UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATW0_NotSupported (0x0UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATW0_Supported (0x1UL)

/* PATA5 @Bit 2 : Indicates whether the AA/55 pattern is supported as output over the trace port. */
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATA5_Pos (2UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATA5_Msk (0x1UL << TPIU_SUPPPORTEDTESTPATTERNMODES_PATA5_Pos) /*!< Bit mask of PATA5
                                                                            field.*/
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATA5_Min (0x0UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATA5_Max (0x1UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATA5_NotSupported (0x0UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATA5_Supported (0x1UL)

/* PATF0 @Bit 3 : Indicates whether the FF/00 pattern is supported as output over the trace port. */
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATF0_Pos (3UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATF0_Msk (0x1UL << TPIU_SUPPPORTEDTESTPATTERNMODES_PATF0_Pos) /*!< Bit mask of PATF0
                                                                            field.*/
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATF0_Min (0x0UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATF0_Max (0x1UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATF0_NotSupported (0x0UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PATF0_Supported (0x1UL)

/* PTIMEEN @Bit 16 : Indicates whether timed mode is supported. */
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PTIMEEN_Pos (16UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PTIMEEN_Msk (0x1UL << TPIU_SUPPPORTEDTESTPATTERNMODES_PTIMEEN_Pos) /*!< Bit mask of
                                                                            PTIMEEN field.*/
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PTIMEEN_Min (0x0UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PTIMEEN_Max (0x1UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PTIMEEN_NotSupported (0x0UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PTIMEEN_Supported (0x1UL)

/* PCONTEN @Bit 17 : Indicates whether continuous mode is supported. */
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PCONTEN_Pos (17UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PCONTEN_Msk (0x1UL << TPIU_SUPPPORTEDTESTPATTERNMODES_PCONTEN_Pos) /*!< Bit mask of
                                                                            PCONTEN field.*/
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PCONTEN_Min (0x0UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PCONTEN_Max (0x1UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PCONTEN_NotSupported (0x0UL)
  #define TPIU_SUPPPORTEDTESTPATTERNMODES_PCONTEN_Supported (0x1UL)


/* TPIU_CURRENTTESTPATTERNMODES: Current_test_pattern_mode indicates the current test pattern or mode selected. */
  #define TPIU_CURRENTTESTPATTERNMODES_ResetValue (0x00000000UL)

/* PATW1 @Bit 0 : Indicates whether the walking 1s pattern is supported as output over the trace port. */
  #define TPIU_CURRENTTESTPATTERNMODES_PATW1_Pos (0UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATW1_Msk (0x1UL << TPIU_CURRENTTESTPATTERNMODES_PATW1_Pos) /*!< Bit mask of PATW1
                                                                            field.*/
  #define TPIU_CURRENTTESTPATTERNMODES_PATW1_Min (0x0UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATW1_Max (0x1UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATW1_Disabled (0x0UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATW1_Enabled (0x1UL)

/* PATW0 @Bit 1 : Indicates whether the walking 0s pattern is supported as output over the trace port. */
  #define TPIU_CURRENTTESTPATTERNMODES_PATW0_Pos (1UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATW0_Msk (0x1UL << TPIU_CURRENTTESTPATTERNMODES_PATW0_Pos) /*!< Bit mask of PATW0
                                                                            field.*/
  #define TPIU_CURRENTTESTPATTERNMODES_PATW0_Min (0x0UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATW0_Max (0x1UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATW0_Disabled (0x0UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATW0_Enabled (0x1UL)

/* PATA5 @Bit 2 : Indicates whether the AA/55 pattern is supported as output over the trace port. */
  #define TPIU_CURRENTTESTPATTERNMODES_PATA5_Pos (2UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATA5_Msk (0x1UL << TPIU_CURRENTTESTPATTERNMODES_PATA5_Pos) /*!< Bit mask of PATA5
                                                                            field.*/
  #define TPIU_CURRENTTESTPATTERNMODES_PATA5_Min (0x0UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATA5_Max (0x1UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATA5_Disabled (0x0UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATA5_Enabled (0x1UL)

/* PATF0 @Bit 3 : Indicates whether the FF/00 pattern is supported as output over the trace port. */
  #define TPIU_CURRENTTESTPATTERNMODES_PATF0_Pos (3UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATF0_Msk (0x1UL << TPIU_CURRENTTESTPATTERNMODES_PATF0_Pos) /*!< Bit mask of PATF0
                                                                            field.*/
  #define TPIU_CURRENTTESTPATTERNMODES_PATF0_Min (0x0UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATF0_Max (0x1UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATF0_Disabled (0x0UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PATF0_Enabled (0x1UL)

/* PTIMEEN @Bit 16 : Indicates whether timed mode is supported. */
  #define TPIU_CURRENTTESTPATTERNMODES_PTIMEEN_Pos (16UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PTIMEEN_Msk (0x1UL << TPIU_CURRENTTESTPATTERNMODES_PTIMEEN_Pos) /*!< Bit mask of PTIMEEN
                                                                            field.*/
  #define TPIU_CURRENTTESTPATTERNMODES_PTIMEEN_Min (0x0UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PTIMEEN_Max (0x1UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PTIMEEN_Disabled (0x0UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PTIMEEN_Enabled (0x1UL)

/* PCONTEN @Bit 17 : Indicates whether continuous mode is supported. */
  #define TPIU_CURRENTTESTPATTERNMODES_PCONTEN_Pos (17UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PCONTEN_Msk (0x1UL << TPIU_CURRENTTESTPATTERNMODES_PCONTEN_Pos) /*!< Bit mask of PCONTEN
                                                                            field.*/
  #define TPIU_CURRENTTESTPATTERNMODES_PCONTEN_Min (0x0UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PCONTEN_Max (0x1UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PCONTEN_Disabled (0x0UL)
  #define TPIU_CURRENTTESTPATTERNMODES_PCONTEN_Enabled (0x1UL)


/* TPIU_TPRCR: The TPRCR register is an 8-bit counter start value that is decremented. A write sets the initial counter value
                and a read returns the programmed value. */

  #define TPIU_TPRCR_ResetValue (0x00000000UL)

/* PATTCOUNT @Bits 0..7 : 8-bit counter value to indicate the number of traceclkin cycles for which a pattern runs before it
                          switches to the next pattern. */

  #define TPIU_TPRCR_PATTCOUNT_Pos (0UL)
  #define TPIU_TPRCR_PATTCOUNT_Msk (0xFFUL << TPIU_TPRCR_PATTCOUNT_Pos)
  #define TPIU_TPRCR_PATTCOUNT_Min (0x00UL)
  #define TPIU_TPRCR_PATTCOUNT_Max (0xFFUL)


/* TPIU_FFSR: The FFSR register indicates the current status of the formatter and flush features available in the TPIU. */
  #define TPIU_FFSR_ResetValue (0x00000000UL)

/* FLINPROG @Bit 0 : Flush in progress. */
  #define TPIU_FFSR_FLINPROG_Pos (0UL)
  #define TPIU_FFSR_FLINPROG_Msk (0x1UL << TPIU_FFSR_FLINPROG_Pos)
  #define TPIU_FFSR_FLINPROG_Min (0x0UL)
  #define TPIU_FFSR_FLINPROG_Max (0x1UL)
  #define TPIU_FFSR_FLINPROG_NotInProgress (0x0UL)
  #define TPIU_FFSR_FLINPROG_InProgress (0x1UL)

/* FTSTOPPED @Bit 1 : The formatter has received a stop request signal and all trace data and post-amble is sent. Any additional
                      trace data on the ATB interface is ignored and atreadys goes HIGH. */

  #define TPIU_FFSR_FTSTOPPED_Pos (1UL)
  #define TPIU_FFSR_FTSTOPPED_Msk (0x1UL << TPIU_FFSR_FTSTOPPED_Pos)
  #define TPIU_FFSR_FTSTOPPED_Min (0x0UL)
  #define TPIU_FFSR_FTSTOPPED_Max (0x1UL)
  #define TPIU_FFSR_FTSTOPPED_Running (0x0UL)
  #define TPIU_FFSR_FTSTOPPED_Stopped (0x1UL)

/* TCPRESENT @Bit 2 : Indicates whether the TRACECTL pin is available for use. */
  #define TPIU_FFSR_TCPRESENT_Pos (2UL)
  #define TPIU_FFSR_TCPRESENT_Msk (0x1UL << TPIU_FFSR_TCPRESENT_Pos)
  #define TPIU_FFSR_TCPRESENT_Min (0x0UL)
  #define TPIU_FFSR_TCPRESENT_Max (0x1UL)
  #define TPIU_FFSR_TCPRESENT_NotPresent (0x0UL)
  #define TPIU_FFSR_TCPRESENT_Present (0x1UL)


/* TPIU_FFCR: The FFCR register controls the generation of stop, trigger, and flush events. */
  #define TPIU_FFCR_ResetValue (0x00000000UL)

/* ENFTC @Bit 0 : Do not embed triggers into the formatted stream. Trace disable cycles and triggers are indicated by tracectl,
                  where present. */

  #define TPIU_FFCR_ENFTC_Pos (0UL)
  #define TPIU_FFCR_ENFTC_Msk (0x1UL << TPIU_FFCR_ENFTC_Pos)
  #define TPIU_FFCR_ENFTC_Min (0x0UL)
  #define TPIU_FFCR_ENFTC_Max (0x1UL)
  #define TPIU_FFCR_ENFTC_Disabled (0x0UL)
  #define TPIU_FFCR_ENFTC_Enabled (0x1UL)

/* ENFCONT @Bit 1 : Is embedded in trigger packets and indicates that no cycle is using sync packets. */
  #define TPIU_FFCR_ENFCONT_Pos (1UL)
  #define TPIU_FFCR_ENFCONT_Msk (0x1UL << TPIU_FFCR_ENFCONT_Pos)
  #define TPIU_FFCR_ENFCONT_Min (0x0UL)
  #define TPIU_FFCR_ENFCONT_Max (0x1UL)
  #define TPIU_FFCR_ENFCONT_Disabled (0x0UL)
  #define TPIU_FFCR_ENFCONT_Enabled (0x1UL)

/* FONFLIN @Bit 4 : Enables the use of the flushin connection. */
  #define TPIU_FFCR_FONFLIN_Pos (4UL)
  #define TPIU_FFCR_FONFLIN_Msk (0x1UL << TPIU_FFCR_FONFLIN_Pos)
  #define TPIU_FFCR_FONFLIN_Min (0x0UL)
  #define TPIU_FFCR_FONFLIN_Max (0x1UL)
  #define TPIU_FFCR_FONFLIN_Disabled (0x0UL)
  #define TPIU_FFCR_FONFLIN_Enabled (0x1UL)

/* FONTRIG @Bit 5 : Initiates a manual flush of data in the system when a trigger event occurs. */
  #define TPIU_FFCR_FONTRIG_Pos (5UL)
  #define TPIU_FFCR_FONTRIG_Msk (0x1UL << TPIU_FFCR_FONTRIG_Pos)
  #define TPIU_FFCR_FONTRIG_Min (0x0UL)
  #define TPIU_FFCR_FONTRIG_Max (0x1UL)
  #define TPIU_FFCR_FONTRIG_Disabled (0x0UL)
  #define TPIU_FFCR_FONTRIG_Enabled (0x1UL)

/* FONMANR @Bit 6 : Generates a flush. This bit is set to 0 when this flush is serviced. */
  #define TPIU_FFCR_FONMANR_Pos (6UL)
  #define TPIU_FFCR_FONMANR_Msk (0x1UL << TPIU_FFCR_FONMANR_Pos)
  #define TPIU_FFCR_FONMANR_Min (0x0UL)
  #define TPIU_FFCR_FONMANR_Max (0x1UL)
  #define TPIU_FFCR_FONMANR_Disabled (0x0UL)
  #define TPIU_FFCR_FONMANR_Enabled (0x1UL)

/* FONMANW @Bit 7 : Generates a flush. This bit is set to 1 when this flush is serviced. */
  #define TPIU_FFCR_FONMANW_Pos (7UL)
  #define TPIU_FFCR_FONMANW_Msk (0x1UL << TPIU_FFCR_FONMANW_Pos)
  #define TPIU_FFCR_FONMANW_Min (0x0UL)
  #define TPIU_FFCR_FONMANW_Max (0x1UL)
  #define TPIU_FFCR_FONMANW_Disabled (0x0UL)
  #define TPIU_FFCR_FONMANW_Enabled (0x1UL)

/* TRIGIN @Bit 8 : Indicates a trigger when trigin is asserted. */
  #define TPIU_FFCR_TRIGIN_Pos (8UL)
  #define TPIU_FFCR_TRIGIN_Msk (0x1UL << TPIU_FFCR_TRIGIN_Pos)
  #define TPIU_FFCR_TRIGIN_Min (0x0UL)
  #define TPIU_FFCR_TRIGIN_Max (0x1UL)
  #define TPIU_FFCR_TRIGIN_Disabled (0x0UL)
  #define TPIU_FFCR_TRIGIN_Enabled (0x1UL)

/* TRIGEVT @Bit 9 : Indicates a trigger on a trigger event. */
  #define TPIU_FFCR_TRIGEVT_Pos (9UL)
  #define TPIU_FFCR_TRIGEVT_Msk (0x1UL << TPIU_FFCR_TRIGEVT_Pos)
  #define TPIU_FFCR_TRIGEVT_Min (0x0UL)
  #define TPIU_FFCR_TRIGEVT_Max (0x1UL)
  #define TPIU_FFCR_TRIGEVT_Disabled (0x0UL)
  #define TPIU_FFCR_TRIGEVT_Enabled (0x1UL)

/* TRIGFL @Bit 10 : Indicates a trigger when flush completion on afreadys is returned. */
  #define TPIU_FFCR_TRIGFL_Pos (10UL)
  #define TPIU_FFCR_TRIGFL_Msk (0x1UL << TPIU_FFCR_TRIGFL_Pos)
  #define TPIU_FFCR_TRIGFL_Min (0x0UL)
  #define TPIU_FFCR_TRIGFL_Max (0x1UL)
  #define TPIU_FFCR_TRIGFL_Disabled (0x0UL)
  #define TPIU_FFCR_TRIGFL_Enabled (0x1UL)

/* STOPFL @Bit 12 : Forces the FIFO to drain off any part-completed packets. */
  #define TPIU_FFCR_STOPFL_Pos (12UL)
  #define TPIU_FFCR_STOPFL_Msk (0x1UL << TPIU_FFCR_STOPFL_Pos)
  #define TPIU_FFCR_STOPFL_Min (0x0UL)
  #define TPIU_FFCR_STOPFL_Max (0x1UL)
  #define TPIU_FFCR_STOPFL_Disabled (0x0UL)
  #define TPIU_FFCR_STOPFL_Enabled (0x1UL)

/* STOPTRIG @Bit 13 : Stops the formatter after a trigger event is observed. Reset to disabled or 0. */
  #define TPIU_FFCR_STOPTRIG_Pos (13UL)
  #define TPIU_FFCR_STOPTRIG_Msk (0x1UL << TPIU_FFCR_STOPTRIG_Pos)
  #define TPIU_FFCR_STOPTRIG_Min (0x0UL)
  #define TPIU_FFCR_STOPTRIG_Max (0x1UL)
  #define TPIU_FFCR_STOPTRIG_Disabled (0x0UL)
  #define TPIU_FFCR_STOPTRIG_Enabled (0x1UL)


/* TPIU_FSCR: The FSCR register enables the frequency of synchronization information to be optimized to suit the Trace Port
               Analyzer (TPA) capture buffer size. */

  #define TPIU_FSCR_ResetValue (0x00000000UL)

/* CYCCOUNT @Bits 0..11 : 12-bit counter reload value. Indicates the number of complete frames between full synchronization
                          packets. */

  #define TPIU_FSCR_CYCCOUNT_Pos (0UL)
  #define TPIU_FSCR_CYCCOUNT_Msk (0xFFFUL << TPIU_FSCR_CYCCOUNT_Pos)
  #define TPIU_FSCR_CYCCOUNT_Min (0x000UL)
  #define TPIU_FSCR_CYCCOUNT_Max (0x400UL)


/* TPIU_EXTCTLINPORT: Two ports can be used as a control and feedback mechanism for any serializers, pin sharing multiplexers,
                       or other solutions that might be added to the trace output pins either for pin control or a high-speed
                       trace port solution. */

  #define TPIU_EXTCTLINPORT_ResetValue (0x00000000UL)

/* EXTCTLIN0 @Bit 0 : EXTCTL inputs. */
  #define TPIU_EXTCTLINPORT_EXTCTLIN0_Pos (0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN0_Msk (0x1UL << TPIU_EXTCTLINPORT_EXTCTLIN0_Pos)
  #define TPIU_EXTCTLINPORT_EXTCTLIN0_Min (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN0_Max (0x1UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN0_Low (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN0_High (0x1UL)

/* EXTCTLIN1 @Bit 1 : EXTCTL inputs. */
  #define TPIU_EXTCTLINPORT_EXTCTLIN1_Pos (1UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN1_Msk (0x1UL << TPIU_EXTCTLINPORT_EXTCTLIN1_Pos)
  #define TPIU_EXTCTLINPORT_EXTCTLIN1_Min (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN1_Max (0x1UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN1_Low (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN1_High (0x1UL)

/* EXTCTLIN2 @Bit 2 : EXTCTL inputs. */
  #define TPIU_EXTCTLINPORT_EXTCTLIN2_Pos (2UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN2_Msk (0x1UL << TPIU_EXTCTLINPORT_EXTCTLIN2_Pos)
  #define TPIU_EXTCTLINPORT_EXTCTLIN2_Min (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN2_Max (0x1UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN2_Low (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN2_High (0x1UL)

/* EXTCTLIN3 @Bit 3 : EXTCTL inputs. */
  #define TPIU_EXTCTLINPORT_EXTCTLIN3_Pos (3UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN3_Msk (0x1UL << TPIU_EXTCTLINPORT_EXTCTLIN3_Pos)
  #define TPIU_EXTCTLINPORT_EXTCTLIN3_Min (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN3_Max (0x1UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN3_Low (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN3_High (0x1UL)

/* EXTCTLIN4 @Bit 4 : EXTCTL inputs. */
  #define TPIU_EXTCTLINPORT_EXTCTLIN4_Pos (4UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN4_Msk (0x1UL << TPIU_EXTCTLINPORT_EXTCTLIN4_Pos)
  #define TPIU_EXTCTLINPORT_EXTCTLIN4_Min (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN4_Max (0x1UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN4_Low (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN4_High (0x1UL)

/* EXTCTLIN5 @Bit 5 : EXTCTL inputs. */
  #define TPIU_EXTCTLINPORT_EXTCTLIN5_Pos (5UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN5_Msk (0x1UL << TPIU_EXTCTLINPORT_EXTCTLIN5_Pos)
  #define TPIU_EXTCTLINPORT_EXTCTLIN5_Min (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN5_Max (0x1UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN5_Low (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN5_High (0x1UL)

/* EXTCTLIN6 @Bit 6 : EXTCTL inputs. */
  #define TPIU_EXTCTLINPORT_EXTCTLIN6_Pos (6UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN6_Msk (0x1UL << TPIU_EXTCTLINPORT_EXTCTLIN6_Pos)
  #define TPIU_EXTCTLINPORT_EXTCTLIN6_Min (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN6_Max (0x1UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN6_Low (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN6_High (0x1UL)

/* EXTCTLIN7 @Bit 7 : EXTCTL inputs. */
  #define TPIU_EXTCTLINPORT_EXTCTLIN7_Pos (7UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN7_Msk (0x1UL << TPIU_EXTCTLINPORT_EXTCTLIN7_Pos)
  #define TPIU_EXTCTLINPORT_EXTCTLIN7_Min (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN7_Max (0x1UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN7_Low (0x0UL)
  #define TPIU_EXTCTLINPORT_EXTCTLIN7_High (0x1UL)


/* TPIU_EXTCTLOUTPORT: Two ports can be used as a control and feedback mechanism for any serializers, pin sharing multiplexers,
                        or other solutions that might be added to the trace output pins either for pin control or a high speed
                        trace port solution. These ports are raw register banks that sample or export the corresponding external
                        pins. */

  #define TPIU_EXTCTLOUTPORT_ResetValue (0x00000000UL)

/* EXTCTLOUT0 @Bit 0 : EXTCTL outputs. */
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT0_Pos (0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT0_Msk (0x1UL << TPIU_EXTCTLOUTPORT_EXTCTLOUT0_Pos)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT0_Min (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT0_Max (0x1UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT0_Low (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT0_High (0x1UL)

/* EXTCTLOUT1 @Bit 1 : EXTCTL outputs. */
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT1_Pos (1UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT1_Msk (0x1UL << TPIU_EXTCTLOUTPORT_EXTCTLOUT1_Pos)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT1_Min (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT1_Max (0x1UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT1_Low (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT1_High (0x1UL)

/* EXTCTLOUT2 @Bit 2 : EXTCTL outputs. */
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT2_Pos (2UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT2_Msk (0x1UL << TPIU_EXTCTLOUTPORT_EXTCTLOUT2_Pos)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT2_Min (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT2_Max (0x1UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT2_Low (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT2_High (0x1UL)

/* EXTCTLOUT3 @Bit 3 : EXTCTL outputs. */
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT3_Pos (3UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT3_Msk (0x1UL << TPIU_EXTCTLOUTPORT_EXTCTLOUT3_Pos)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT3_Min (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT3_Max (0x1UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT3_Low (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT3_High (0x1UL)

/* EXTCTLOUT4 @Bit 4 : EXTCTL outputs. */
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT4_Pos (4UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT4_Msk (0x1UL << TPIU_EXTCTLOUTPORT_EXTCTLOUT4_Pos)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT4_Min (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT4_Max (0x1UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT4_Low (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT4_High (0x1UL)

/* EXTCTLOUT5 @Bit 5 : EXTCTL outputs. */
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT5_Pos (5UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT5_Msk (0x1UL << TPIU_EXTCTLOUTPORT_EXTCTLOUT5_Pos)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT5_Min (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT5_Max (0x1UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT5_Low (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT5_High (0x1UL)

/* EXTCTLOUT6 @Bit 6 : EXTCTL outputs. */
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT6_Pos (6UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT6_Msk (0x1UL << TPIU_EXTCTLOUTPORT_EXTCTLOUT6_Pos)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT6_Min (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT6_Max (0x1UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT6_Low (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT6_High (0x1UL)

/* EXTCTLOUT7 @Bit 7 : EXTCTL outputs. */
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT7_Pos (7UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT7_Msk (0x1UL << TPIU_EXTCTLOUTPORT_EXTCTLOUT7_Pos)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT7_Min (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT7_Max (0x1UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT7_Low (0x0UL)
  #define TPIU_EXTCTLOUTPORT_EXTCTLOUT7_High (0x1UL)


/* TPIU_ITTRFLINACK: The ITTRFLINACK register enables control of the triginack and flushinack outputs from the TPIU. */
  #define TPIU_ITTRFLINACK_ResetValue (0x00000000UL)

/* TRIGINACK @Bit 0 : Sets the value of triginack. */
  #define TPIU_ITTRFLINACK_TRIGINACK_Pos (0UL)
  #define TPIU_ITTRFLINACK_TRIGINACK_Msk (0x1UL << TPIU_ITTRFLINACK_TRIGINACK_Pos)
  #define TPIU_ITTRFLINACK_TRIGINACK_Min (0x0UL)
  #define TPIU_ITTRFLINACK_TRIGINACK_Max (0x1UL)
  #define TPIU_ITTRFLINACK_TRIGINACK_Low (0x0UL)
  #define TPIU_ITTRFLINACK_TRIGINACK_High (0x1UL)

/* FLUSHINACK @Bit 1 : Sets the value of flushinack. */
  #define TPIU_ITTRFLINACK_FLUSHINACK_Pos (1UL)
  #define TPIU_ITTRFLINACK_FLUSHINACK_Msk (0x1UL << TPIU_ITTRFLINACK_FLUSHINACK_Pos)
  #define TPIU_ITTRFLINACK_FLUSHINACK_Min (0x0UL)
  #define TPIU_ITTRFLINACK_FLUSHINACK_Max (0x1UL)
  #define TPIU_ITTRFLINACK_FLUSHINACK_Low (0x0UL)
  #define TPIU_ITTRFLINACK_FLUSHINACK_High (0x1UL)


/* TPIU_ITTRFLIN: The ITTRFLIN register contains the values of the flushin and trigin inputs to the TPIU. */
  #define TPIU_ITTRFLIN_ResetValue (0x00000000UL)

/* TRIGIN @Bit 0 : Reads the value of trigin. */
  #define TPIU_ITTRFLIN_TRIGIN_Pos (0UL)
  #define TPIU_ITTRFLIN_TRIGIN_Msk (0x1UL << TPIU_ITTRFLIN_TRIGIN_Pos)
  #define TPIU_ITTRFLIN_TRIGIN_Min (0x0UL)
  #define TPIU_ITTRFLIN_TRIGIN_Max (0x1UL)
  #define TPIU_ITTRFLIN_TRIGIN_Low (0x0UL)
  #define TPIU_ITTRFLIN_TRIGIN_High (0x1UL)

/* FLUSHIN @Bit 1 : Reads the value of flushin. */
  #define TPIU_ITTRFLIN_FLUSHIN_Pos (1UL)
  #define TPIU_ITTRFLIN_FLUSHIN_Msk (0x1UL << TPIU_ITTRFLIN_FLUSHIN_Pos)
  #define TPIU_ITTRFLIN_FLUSHIN_Min (0x0UL)
  #define TPIU_ITTRFLIN_FLUSHIN_Max (0x1UL)
  #define TPIU_ITTRFLIN_FLUSHIN_Low (0x0UL)
  #define TPIU_ITTRFLIN_FLUSHIN_High (0x1UL)


/* TPIU_ITATBDATA0: The ITATBDATA0 register contains the value of the atdatas inputs to the TPIU. The values are valid only when
                     atvalids is HIGH. */

  #define TPIU_ITATBDATA0_ResetValue (0x00000000UL)

/* ATDATA0 @Bit 0 : A read access returns the value of a pin on atdatas_x of the enabled port. A write access writes to the
                    corresponding atdatam pin of the enabled port. */

  #define TPIU_ITATBDATA0_ATDATA0_Pos (0UL)
  #define TPIU_ITATBDATA0_ATDATA0_Msk (0x1UL << TPIU_ITATBDATA0_ATDATA0_Pos)
  #define TPIU_ITATBDATA0_ATDATA0_Min (0x0UL)
  #define TPIU_ITATBDATA0_ATDATA0_Max (0x1UL)
  #define TPIU_ITATBDATA0_ATDATA0_Low (0x0UL)
  #define TPIU_ITATBDATA0_ATDATA0_High (0x1UL)

/* ATDATA1 @Bit 1 : A read access returns the value of a pin on atdatas_x of the enabled port. A write access writes to the
                    corresponding atdatam pin of the enabled port. */

  #define TPIU_ITATBDATA0_ATDATA1_Pos (1UL)
  #define TPIU_ITATBDATA0_ATDATA1_Msk (0x1UL << TPIU_ITATBDATA0_ATDATA1_Pos)
  #define TPIU_ITATBDATA0_ATDATA1_Min (0x0UL)
  #define TPIU_ITATBDATA0_ATDATA1_Max (0x1UL)
  #define TPIU_ITATBDATA0_ATDATA1_Low (0x0UL)
  #define TPIU_ITATBDATA0_ATDATA1_High (0x1UL)

/* ATDATA2 @Bit 2 : A read access returns the value of a pin on atdatas_x of the enabled port. A write access writes to the
                    corresponding atdatam pin of the enabled port. */

  #define TPIU_ITATBDATA0_ATDATA2_Pos (2UL)
  #define TPIU_ITATBDATA0_ATDATA2_Msk (0x1UL << TPIU_ITATBDATA0_ATDATA2_Pos)
  #define TPIU_ITATBDATA0_ATDATA2_Min (0x0UL)
  #define TPIU_ITATBDATA0_ATDATA2_Max (0x1UL)
  #define TPIU_ITATBDATA0_ATDATA2_Low (0x0UL)
  #define TPIU_ITATBDATA0_ATDATA2_High (0x1UL)

/* ATDATA3 @Bit 3 : A read access returns the value of a pin on atdatas_x of the enabled port. A write access writes to the
                    corresponding atdatam pin of the enabled port. */

  #define TPIU_ITATBDATA0_ATDATA3_Pos (3UL)
  #define TPIU_ITATBDATA0_ATDATA3_Msk (0x1UL << TPIU_ITATBDATA0_ATDATA3_Pos)
  #define TPIU_ITATBDATA0_ATDATA3_Min (0x0UL)
  #define TPIU_ITATBDATA0_ATDATA3_Max (0x1UL)
  #define TPIU_ITATBDATA0_ATDATA3_Low (0x0UL)
  #define TPIU_ITATBDATA0_ATDATA3_High (0x1UL)

/* ATDATA4 @Bit 4 : A read access returns the value of a pin on atdatas_x of the enabled port. A write access writes to the
                    corresponding atdatam pin of the enabled port. */

  #define TPIU_ITATBDATA0_ATDATA4_Pos (4UL)
  #define TPIU_ITATBDATA0_ATDATA4_Msk (0x1UL << TPIU_ITATBDATA0_ATDATA4_Pos)
  #define TPIU_ITATBDATA0_ATDATA4_Min (0x0UL)
  #define TPIU_ITATBDATA0_ATDATA4_Max (0x1UL)
  #define TPIU_ITATBDATA0_ATDATA4_Low (0x0UL)
  #define TPIU_ITATBDATA0_ATDATA4_High (0x1UL)


/* TPIU_ITATBCTR2: Enables control of the atreadys and afvalids outputs of the TPIU. */
  #define TPIU_ITATBCTR2_ResetValue (0x00000000UL)

/* ATREADY @Bit 0 : Sets the value of afvalid. */
  #define TPIU_ITATBCTR2_ATREADY_Pos (0UL)
  #define TPIU_ITATBCTR2_ATREADY_Msk (0x1UL << TPIU_ITATBCTR2_ATREADY_Pos)
  #define TPIU_ITATBCTR2_ATREADY_Min (0x0UL)
  #define TPIU_ITATBCTR2_ATREADY_Max (0x1UL)
  #define TPIU_ITATBCTR2_ATREADY_Low (0x0UL)
  #define TPIU_ITATBCTR2_ATREADY_High (0x1UL)

/* AFVALID @Bit 1 : Sets the value of atready. */
  #define TPIU_ITATBCTR2_AFVALID_Pos (1UL)
  #define TPIU_ITATBCTR2_AFVALID_Msk (0x1UL << TPIU_ITATBCTR2_AFVALID_Pos)
  #define TPIU_ITATBCTR2_AFVALID_Min (0x0UL)
  #define TPIU_ITATBCTR2_AFVALID_Max (0x1UL)
  #define TPIU_ITATBCTR2_AFVALID_Low (0x0UL)
  #define TPIU_ITATBCTR2_AFVALID_High (0x1UL)


/* TPIU_ITATBCTR1: The ITATBCTR1 register contains the value of the atids input to the TPIU. This is only valid when atvalids is
                    HIGH. */

  #define TPIU_ITATBCTR1_ResetValue (0x00000000UL)

/* ATID @Bits 0..6 : Reads the value of atids. */
  #define TPIU_ITATBCTR1_ATID_Pos (0UL)
  #define TPIU_ITATBCTR1_ATID_Msk (0x7FUL << TPIU_ITATBCTR1_ATID_Pos)
  #define TPIU_ITATBCTR1_ATID_Min (0x0UL)
  #define TPIU_ITATBCTR1_ATID_Max (0x1UL)
  #define TPIU_ITATBCTR1_ATID_Low (0x00UL)
  #define TPIU_ITATBCTR1_ATID_High (0x01UL)


/* TPIU_ITATBCTR0: The ITATBCTR0 register captures the values of the atvalids, afreadys, and atbytess inputs to the TPIU. To
                    ensure the integration registers work correctly in a system, the value of atbytess is only valid when
                    atvalids, bit[0], is HIGH. */

  #define TPIU_ITATBCTR0_ResetValue (0x00000000UL)

/* ATVALID @Bit 0 : Reads the value of atvalids. */
  #define TPIU_ITATBCTR0_ATVALID_Pos (0UL)
  #define TPIU_ITATBCTR0_ATVALID_Msk (0x1UL << TPIU_ITATBCTR0_ATVALID_Pos)
  #define TPIU_ITATBCTR0_ATVALID_Min (0x0UL)
  #define TPIU_ITATBCTR0_ATVALID_Max (0x1UL)
  #define TPIU_ITATBCTR0_ATVALID_Low (0x0UL)
  #define TPIU_ITATBCTR0_ATVALID_High (0x1UL)

/* AFREADY @Bit 2 : Reads the value of afreadys. */
  #define TPIU_ITATBCTR0_AFREADY_Pos (2UL)
  #define TPIU_ITATBCTR0_AFREADY_Msk (0x1UL << TPIU_ITATBCTR0_AFREADY_Pos)
  #define TPIU_ITATBCTR0_AFREADY_Min (0x0UL)
  #define TPIU_ITATBCTR0_AFREADY_Max (0x1UL)
  #define TPIU_ITATBCTR0_AFREADY_Low (0x0UL)
  #define TPIU_ITATBCTR0_AFREADY_High (0x1UL)

/* ATBYTES @Bits 8..9 : Reads the value of atbytess. */
  #define TPIU_ITATBCTR0_ATBYTES_Pos (8UL)
  #define TPIU_ITATBCTR0_ATBYTES_Msk (0x3UL << TPIU_ITATBCTR0_ATBYTES_Pos)
  #define TPIU_ITATBCTR0_ATBYTES_Min (0x0UL)
  #define TPIU_ITATBCTR0_ATBYTES_Max (0x1UL)
  #define TPIU_ITATBCTR0_ATBYTES_Low (0x0UL)
  #define TPIU_ITATBCTR0_ATBYTES_High (0x1UL)


/* TPIU_ITCTRL: Used to enable topology detection. This register enables the component to switch from a functional mode, the
                 default behavior, to integration mode where the inputs and outputs of the component can be directly controlled
                 for integration testing and topology solving. */

  #define TPIU_ITCTRL_ResetValue (0x00000000UL)

/* INTEGRATIONMODE @Bit 0 : Enables the component to switch from functional mode to integration mode and back. If no integration
                            functionality is implemented, this register must read as zero. */

  #define TPIU_ITCTRL_INTEGRATIONMODE_Pos (0UL)
  #define TPIU_ITCTRL_INTEGRATIONMODE_Msk (0x1UL << TPIU_ITCTRL_INTEGRATIONMODE_Pos)
  #define TPIU_ITCTRL_INTEGRATIONMODE_Min (0x0UL)
  #define TPIU_ITCTRL_INTEGRATIONMODE_Max (0x1UL)
  #define TPIU_ITCTRL_INTEGRATIONMODE_Disabled (0x0UL)
  #define TPIU_ITCTRL_INTEGRATIONMODE_Enabled (0x1UL)


/* TPIU_CLAIMSET: Software can use the claim tag to coordinate application and debugger access to trace unit functionality. The
                   claim tags have no effect on the operation of the component. The CLAIMSET register sets bits in the claim
                   tag, and determines the number of claim bits implemented. */

  #define TPIU_CLAIMSET_ResetValue (0x00000000UL)

/* BIT0 @Bit 0 : Set claim bit 0 and check if bit is implemented or not. */
  #define TPIU_CLAIMSET_BIT0_Pos (0UL)
  #define TPIU_CLAIMSET_BIT0_Msk (0x1UL << TPIU_CLAIMSET_BIT0_Pos)
  #define TPIU_CLAIMSET_BIT0_Min (0x0UL)
  #define TPIU_CLAIMSET_BIT0_Max (0x1UL)
  #define TPIU_CLAIMSET_BIT0_NotImplemented (0x0UL)
  #define TPIU_CLAIMSET_BIT0_Implemented (0x1UL)
  #define TPIU_CLAIMSET_BIT0_Set (0x1UL)

/* BIT1 @Bit 1 : Set claim bit 1 and check if bit is implemented or not. */
  #define TPIU_CLAIMSET_BIT1_Pos (1UL)
  #define TPIU_CLAIMSET_BIT1_Msk (0x1UL << TPIU_CLAIMSET_BIT1_Pos)
  #define TPIU_CLAIMSET_BIT1_Min (0x0UL)
  #define TPIU_CLAIMSET_BIT1_Max (0x1UL)
  #define TPIU_CLAIMSET_BIT1_NotImplemented (0x0UL)
  #define TPIU_CLAIMSET_BIT1_Implemented (0x1UL)
  #define TPIU_CLAIMSET_BIT1_Set (0x1UL)

/* BIT2 @Bit 2 : Set claim bit 2 and check if bit is implemented or not. */
  #define TPIU_CLAIMSET_BIT2_Pos (2UL)
  #define TPIU_CLAIMSET_BIT2_Msk (0x1UL << TPIU_CLAIMSET_BIT2_Pos)
  #define TPIU_CLAIMSET_BIT2_Min (0x0UL)
  #define TPIU_CLAIMSET_BIT2_Max (0x1UL)
  #define TPIU_CLAIMSET_BIT2_NotImplemented (0x0UL)
  #define TPIU_CLAIMSET_BIT2_Implemented (0x1UL)
  #define TPIU_CLAIMSET_BIT2_Set (0x1UL)

/* BIT3 @Bit 3 : Set claim bit 3 and check if bit is implemented or not. */
  #define TPIU_CLAIMSET_BIT3_Pos (3UL)
  #define TPIU_CLAIMSET_BIT3_Msk (0x1UL << TPIU_CLAIMSET_BIT3_Pos)
  #define TPIU_CLAIMSET_BIT3_Min (0x0UL)
  #define TPIU_CLAIMSET_BIT3_Max (0x1UL)
  #define TPIU_CLAIMSET_BIT3_NotImplemented (0x0UL)
  #define TPIU_CLAIMSET_BIT3_Implemented (0x1UL)
  #define TPIU_CLAIMSET_BIT3_Set (0x1UL)


/* TPIU_CLAIMCLR: Software can use the claim tag to coordinate application and debugger access to trace unit functionality. The
                   claim tags have no effect on the operation of the component. The CLAIMCLR register sets the bits in the claim
                   tag to 0 and determines the current value of the claim tag. */

  #define TPIU_CLAIMCLR_ResetValue (0x00000000UL)

/* BIT0 @Bit 0 : Read or clear claim bit 0. */
  #define TPIU_CLAIMCLR_BIT0_Pos (0UL)
  #define TPIU_CLAIMCLR_BIT0_Msk (0x1UL << TPIU_CLAIMCLR_BIT0_Pos)
  #define TPIU_CLAIMCLR_BIT0_Min (0x0UL)
  #define TPIU_CLAIMCLR_BIT0_Max (0x1UL)
  #define TPIU_CLAIMCLR_BIT0_Cleared (0x0UL)
  #define TPIU_CLAIMCLR_BIT0_Set (0x1UL)
  #define TPIU_CLAIMCLR_BIT0_Clear (0x1UL)

/* BIT1 @Bit 1 : Read or clear claim bit 1. */
  #define TPIU_CLAIMCLR_BIT1_Pos (1UL)
  #define TPIU_CLAIMCLR_BIT1_Msk (0x1UL << TPIU_CLAIMCLR_BIT1_Pos)
  #define TPIU_CLAIMCLR_BIT1_Min (0x0UL)
  #define TPIU_CLAIMCLR_BIT1_Max (0x1UL)
  #define TPIU_CLAIMCLR_BIT1_Cleared (0x0UL)
  #define TPIU_CLAIMCLR_BIT1_Set (0x1UL)
  #define TPIU_CLAIMCLR_BIT1_Clear (0x1UL)

/* BIT2 @Bit 2 : Read or clear claim bit 2. */
  #define TPIU_CLAIMCLR_BIT2_Pos (2UL)
  #define TPIU_CLAIMCLR_BIT2_Msk (0x1UL << TPIU_CLAIMCLR_BIT2_Pos)
  #define TPIU_CLAIMCLR_BIT2_Min (0x0UL)
  #define TPIU_CLAIMCLR_BIT2_Max (0x1UL)
  #define TPIU_CLAIMCLR_BIT2_Cleared (0x0UL)
  #define TPIU_CLAIMCLR_BIT2_Set (0x1UL)
  #define TPIU_CLAIMCLR_BIT2_Clear (0x1UL)

/* BIT3 @Bit 3 : Read or clear claim bit 3. */
  #define TPIU_CLAIMCLR_BIT3_Pos (3UL)
  #define TPIU_CLAIMCLR_BIT3_Msk (0x1UL << TPIU_CLAIMCLR_BIT3_Pos)
  #define TPIU_CLAIMCLR_BIT3_Min (0x0UL)
  #define TPIU_CLAIMCLR_BIT3_Max (0x1UL)
  #define TPIU_CLAIMCLR_BIT3_Cleared (0x0UL)
  #define TPIU_CLAIMCLR_BIT3_Set (0x1UL)
  #define TPIU_CLAIMCLR_BIT3_Clear (0x1UL)


/* TPIU_LAR: This is used to enable write access to device registers. */
  #define TPIU_LAR_ResetValue (0x00000000UL)

/* ACCESS @Bits 0..31 : A write of 0xC5ACCE55 enables further write access to this device. Any other write removes write access.
                        */

  #define TPIU_LAR_ACCESS_Pos (0UL)
  #define TPIU_LAR_ACCESS_Msk (0xFFFFFFFFUL << TPIU_LAR_ACCESS_Pos)
  #define TPIU_LAR_ACCESS_Min (0xC5ACCE55UL)
  #define TPIU_LAR_ACCESS_Max (0xC5ACCE55UL)
  #define TPIU_LAR_ACCESS_UnLock (0xC5ACCE55UL)


/* TPIU_LSR: This indicates the status of the lock control mechanism. This lock prevents accidental writes by code under debug.
              Accesses to the extended stimulus port registers are not affected by the lock mechanism. This register must always
              be present although there might not be any lock access control mechanism. The lock mechanism, where present and
              locked, must block write accesses to any control register, except the Lock Access Register. For most components
              this covers all registers except for the Lock Access Register. */

  #define TPIU_LSR_ResetValue (0x00000000UL)

/* PRESENT @Bit 0 : Indicates that a lock control mechanism exists for this device. */
  #define TPIU_LSR_PRESENT_Pos (0UL)
  #define TPIU_LSR_PRESENT_Msk (0x1UL << TPIU_LSR_PRESENT_Pos)
  #define TPIU_LSR_PRESENT_Min (0x0UL)
  #define TPIU_LSR_PRESENT_Max (0x1UL)
  #define TPIU_LSR_PRESENT_NotImplemented (0x0UL)    /*!< No lock control mechanism exists, writes to the Lock Access Register
                                                          are ignored.*/
  #define TPIU_LSR_PRESENT_Implemented (0x1UL)

/* LOCKED @Bit 1 : Returns the current status of the Lock. */
  #define TPIU_LSR_LOCKED_Pos (1UL)
  #define TPIU_LSR_LOCKED_Msk (0x1UL << TPIU_LSR_LOCKED_Pos)
  #define TPIU_LSR_LOCKED_Min (0x0UL)
  #define TPIU_LSR_LOCKED_Max (0x1UL)
  #define TPIU_LSR_LOCKED_UnLocked (0x0UL)
  #define TPIU_LSR_LOCKED_Locked (0x1UL)             /*!< Write access to the component is blocked. All writes to control
                                                          registers are ignored. Reads are permitted.*/

/* TYPE @Bit 2 : Indicates if the Lock Access Register is implemented as 8-bit or 32-bit. */
  #define TPIU_LSR_TYPE_Pos (2UL)
  #define TPIU_LSR_TYPE_Msk (0x1UL << TPIU_LSR_TYPE_Pos)
  #define TPIU_LSR_TYPE_Min (0x0UL)
  #define TPIU_LSR_TYPE_Max (0x1UL)
  #define TPIU_LSR_TYPE_Bits32 (0x0UL)
  #define TPIU_LSR_TYPE_Bits8 (0x1UL)


/* TPIU_AUTHSTATUS: Indicates the current level of tracing permitted by the system */
  #define TPIU_AUTHSTATUS_ResetValue (0x00000000UL)

/* NSID @Bits 0..1 : Non-secure Invasive Debug */
  #define TPIU_AUTHSTATUS_NSID_Pos (0UL)
  #define TPIU_AUTHSTATUS_NSID_Msk (0x3UL << TPIU_AUTHSTATUS_NSID_Pos)
  #define TPIU_AUTHSTATUS_NSID_Min (0x0UL)
  #define TPIU_AUTHSTATUS_NSID_Max (0x1UL)
  #define TPIU_AUTHSTATUS_NSID_NotImplemented (0x0UL)
  #define TPIU_AUTHSTATUS_NSID_Implemented (0x1UL)

/* NSNID @Bits 2..3 : Non-secure Non-Invasive Debug */
  #define TPIU_AUTHSTATUS_NSNID_Pos (2UL)
  #define TPIU_AUTHSTATUS_NSNID_Msk (0x3UL << TPIU_AUTHSTATUS_NSNID_Pos)
  #define TPIU_AUTHSTATUS_NSNID_Min (0x0UL)
  #define TPIU_AUTHSTATUS_NSNID_Max (0x1UL)
  #define TPIU_AUTHSTATUS_NSNID_NotImplemented (0x0UL)
  #define TPIU_AUTHSTATUS_NSNID_Implemented (0x1UL)

/* SID @Bits 4..5 : Secure Invasive Debug */
  #define TPIU_AUTHSTATUS_SID_Pos (4UL)
  #define TPIU_AUTHSTATUS_SID_Msk (0x3UL << TPIU_AUTHSTATUS_SID_Pos)
  #define TPIU_AUTHSTATUS_SID_Min (0x0UL)
  #define TPIU_AUTHSTATUS_SID_Max (0x1UL)
  #define TPIU_AUTHSTATUS_SID_NotImplemented (0x0UL)
  #define TPIU_AUTHSTATUS_SID_Implemented (0x1UL)

/* SNID @Bits 6..7 : Secure Non-Invasive Debug */
  #define TPIU_AUTHSTATUS_SNID_Pos (6UL)
  #define TPIU_AUTHSTATUS_SNID_Msk (0x3UL << TPIU_AUTHSTATUS_SNID_Pos)
  #define TPIU_AUTHSTATUS_SNID_Min (0x0UL)
  #define TPIU_AUTHSTATUS_SNID_Max (0x1UL)
  #define TPIU_AUTHSTATUS_SNID_NotImplemented (0x0UL)
  #define TPIU_AUTHSTATUS_SNID_Implemented (0x1UL)


/* TPIU_DEVID: Indicates the capabilities of the component. */
  #define TPIU_DEVID_ResetValue (0x00000000UL)

/* MUXNUM @Bits 0..4 : Indicates the hidden level of input multiplexing. When non-zero, this value indicates the type of
                       multiplexing on the input to the ATB. Currently only 0x00 is supported, that is, no multiplexing is
                       present. This value helps detect the ATB structure. */

  #define TPIU_DEVID_MUXNUM_Pos (0UL)
  #define TPIU_DEVID_MUXNUM_Msk (0x1FUL << TPIU_DEVID_MUXNUM_Pos)

/* CLKRELAT @Bit 5 : Indicates the relationship between atclk and traceclkin. */
  #define TPIU_DEVID_CLKRELAT_Pos (5UL)
  #define TPIU_DEVID_CLKRELAT_Msk (0x1UL << TPIU_DEVID_CLKRELAT_Pos)
  #define TPIU_DEVID_CLKRELAT_Min (0x0UL)
  #define TPIU_DEVID_CLKRELAT_Max (0x1UL)
  #define TPIU_DEVID_CLKRELAT_Synchronous (0x0UL)
  #define TPIU_DEVID_CLKRELAT_ASynchronous (0x1UL)

/* FIFOSIZE @Bits 6..8 : FIFO size in powers of 2. */
  #define TPIU_DEVID_FIFOSIZE_Pos (6UL)
  #define TPIU_DEVID_FIFOSIZE_Msk (0x7UL << TPIU_DEVID_FIFOSIZE_Pos)
  #define TPIU_DEVID_FIFOSIZE_Min (0x2UL)
  #define TPIU_DEVID_FIFOSIZE_Max (0x2UL)
  #define TPIU_DEVID_FIFOSIZE_Entries4 (0x2UL)

/* TCLKDATA @Bit 9 : Indicates whether trace clock plus data is supported. */
  #define TPIU_DEVID_TCLKDATA_Pos (9UL)
  #define TPIU_DEVID_TCLKDATA_Msk (0x1UL << TPIU_DEVID_TCLKDATA_Pos)
  #define TPIU_DEVID_TCLKDATA_Min (0x0UL)
  #define TPIU_DEVID_TCLKDATA_Max (0x1UL)
  #define TPIU_DEVID_TCLKDATA_Supported (0x0UL)
  #define TPIU_DEVID_TCLKDATA_NotSupported (0x1UL)

/* SWOMAN @Bit 10 : Indicates whether Serial Wire Output, Manchester encoded format, is supported. */
  #define TPIU_DEVID_SWOMAN_Pos (10UL)
  #define TPIU_DEVID_SWOMAN_Msk (0x1UL << TPIU_DEVID_SWOMAN_Pos)
  #define TPIU_DEVID_SWOMAN_Min (0x0UL)
  #define TPIU_DEVID_SWOMAN_Max (0x1UL)
  #define TPIU_DEVID_SWOMAN_NotSupported (0x0UL)
  #define TPIU_DEVID_SWOMAN_Supported (0x1UL)

/* SWOUARTNRZ @Bit 11 : Indicates whether Serial Wire Output, UART or NRZ, is supported. */
  #define TPIU_DEVID_SWOUARTNRZ_Pos (11UL)
  #define TPIU_DEVID_SWOUARTNRZ_Msk (0x1UL << TPIU_DEVID_SWOUARTNRZ_Pos)
  #define TPIU_DEVID_SWOUARTNRZ_Min (0x0UL)
  #define TPIU_DEVID_SWOUARTNRZ_Max (0x1UL)
  #define TPIU_DEVID_SWOUARTNRZ_NotSupported (0x0UL)
  #define TPIU_DEVID_SWOUARTNRZ_Supported (0x1UL)


/* TPIU_DEVTYPE: The DEVTYPE register provides a debugger with information about the component when the Part Number field is not
                  recognized. The debugger can then report this information. */

  #define TPIU_DEVTYPE_ResetValue (0x00000000UL)

/* MAJOR @Bits 0..3 : The main type of the component */
  #define TPIU_DEVTYPE_MAJOR_Pos (0UL)
  #define TPIU_DEVTYPE_MAJOR_Msk (0xFUL << TPIU_DEVTYPE_MAJOR_Pos)
  #define TPIU_DEVTYPE_MAJOR_Min (0x1UL)
  #define TPIU_DEVTYPE_MAJOR_Max (0x1UL)
  #define TPIU_DEVTYPE_MAJOR_TraceSource (0x1UL)

/* SUB @Bits 4..7 : The sub-type of the component */
  #define TPIU_DEVTYPE_SUB_Pos (4UL)
  #define TPIU_DEVTYPE_SUB_Msk (0xFUL << TPIU_DEVTYPE_SUB_Pos)
  #define TPIU_DEVTYPE_SUB_Min (0x1UL)
  #define TPIU_DEVTYPE_SUB_Max (0x1UL)
  #define TPIU_DEVTYPE_SUB_TracePort (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TWIM                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct TWIM_TASKS_DMA_RX ================================================= */
/**
  * @brief RX [TWIM_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000008) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000018) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_TWIM_TASKS_DMA_RX_Type;

/* TWIM_TASKS_DMA_RX_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                             easyDMA. */

  #define TWIM_TASKS_DMA_RX_START_ResetValue (0x00000000UL)

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define TWIM_TASKS_DMA_RX_START_START_Pos (0UL)
  #define TWIM_TASKS_DMA_RX_START_START_Msk (0x1UL << TWIM_TASKS_DMA_RX_START_START_Pos)
  #define TWIM_TASKS_DMA_RX_START_START_Min (0x1UL)
  #define TWIM_TASKS_DMA_RX_START_START_Max (0x1UL)
  #define TWIM_TASKS_DMA_RX_START_START_Trigger (0x1UL)


/* TWIM_TASKS_DMA_RX_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define TWIM_TASKS_DMA_RX_STOP_ResetValue (0x00000000UL)

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Pos (0UL)
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Msk (0x1UL << TWIM_TASKS_DMA_RX_STOP_STOP_Pos)
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Min (0x1UL)
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Max (0x1UL)
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Trigger (0x1UL)


/* TWIM_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL)
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL)
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL)
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL)


/* TWIM_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL)
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL)
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL)
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL)



/* ================================================ Struct TWIM_TASKS_DMA_TX ================================================= */
/**
  * @brief TX [TWIM_TASKS_DMA_TX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
} NRF_TWIM_TASKS_DMA_TX_Type;

/* TWIM_TASKS_DMA_TX_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                             easyDMA. */

  #define TWIM_TASKS_DMA_TX_START_ResetValue (0x00000000UL)

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define TWIM_TASKS_DMA_TX_START_START_Pos (0UL)
  #define TWIM_TASKS_DMA_TX_START_START_Msk (0x1UL << TWIM_TASKS_DMA_TX_START_START_Pos)
  #define TWIM_TASKS_DMA_TX_START_START_Min (0x1UL)
  #define TWIM_TASKS_DMA_TX_START_START_Max (0x1UL)
  #define TWIM_TASKS_DMA_TX_START_START_Trigger (0x1UL)


/* TWIM_TASKS_DMA_TX_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define TWIM_TASKS_DMA_TX_STOP_ResetValue (0x00000000UL)

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Pos (0UL)
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Msk (0x1UL << TWIM_TASKS_DMA_TX_STOP_STOP_Pos)
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Min (0x1UL)
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Max (0x1UL)
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Trigger (0x1UL)



/* ================================================== Struct TWIM_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [TWIM_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __OM  NRF_TWIM_TASKS_DMA_RX_Type RX;
  __OM  NRF_TWIM_TASKS_DMA_TX_Type TX;
} NRF_TWIM_TASKS_DMA_Type;


/* ============================================== Struct TWIM_SUBSCRIBE_DMA_RX =============================================== */
/**
  * @brief RX [TWIM_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;
  __IOM uint32_t  STOP;
  __IOM uint32_t  ENABLEMATCH[4];
  __IOM uint32_t  DISABLEMATCH[4];
} NRF_TWIM_SUBSCRIBE_DMA_RX_Type;

/* TWIM_SUBSCRIBE_DMA_RX_START: Subscribe configuration for task START */
  #define TWIM_SUBSCRIBE_DMA_RX_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_RX_START_EN_Pos)
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Enabled (0x1UL)


/* TWIM_SUBSCRIBE_DMA_RX_STOP: Subscribe configuration for task STOP */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Pos)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Enabled (0x1UL)


/* TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL)


/* TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL)



/* ============================================== Struct TWIM_SUBSCRIBE_DMA_TX =============================================== */
/**
  * @brief TX [TWIM_SUBSCRIBE_DMA_TX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;
  __IOM uint32_t  STOP;
} NRF_TWIM_SUBSCRIBE_DMA_TX_Type;

/* TWIM_SUBSCRIBE_DMA_TX_START: Subscribe configuration for task START */
  #define TWIM_SUBSCRIBE_DMA_TX_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_TX_START_EN_Pos)
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Enabled (0x1UL)


/* TWIM_SUBSCRIBE_DMA_TX_STOP: Subscribe configuration for task STOP */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Pos)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Enabled (0x1UL)



/* ================================================ Struct TWIM_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [TWIM_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IOM NRF_TWIM_SUBSCRIBE_DMA_RX_Type RX;
  __IOM NRF_TWIM_SUBSCRIBE_DMA_TX_Type TX;
} NRF_TWIM_SUBSCRIBE_DMA_Type;


/* ================================================ Struct TWIM_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [TWIM_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_TWIM_EVENTS_DMA_RX_Type;

/* TWIM_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define TWIM_EVENTS_DMA_RX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define TWIM_EVENTS_DMA_RX_END_END_Pos (0UL)
  #define TWIM_EVENTS_DMA_RX_END_END_Msk (0x1UL << TWIM_EVENTS_DMA_RX_END_END_Pos)
  #define TWIM_EVENTS_DMA_RX_END_END_Min (0x0UL)
  #define TWIM_EVENTS_DMA_RX_END_END_Max (0x1UL)
  #define TWIM_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_RX_END_END_Generated (0x1UL)


/* TWIM_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define TWIM_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define TWIM_EVENTS_DMA_RX_READY_READY_Pos (0UL)
  #define TWIM_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << TWIM_EVENTS_DMA_RX_READY_READY_Pos)
  #define TWIM_EVENTS_DMA_RX_READY_READY_Min (0x0UL)
  #define TWIM_EVENTS_DMA_RX_READY_READY_Max (0x1UL)
  #define TWIM_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_RX_READY_READY_Generated (0x1UL)


/* TWIM_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define TWIM_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL)
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL)
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL)
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL)


/* TWIM_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define TWIM_EVENTS_DMA_RX_MATCH_MaxCount (4UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_MinIndex (0UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << TWIM_EVENTS_DMA_RX_MATCH_MATCH_Pos)
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL)



/* ================================================ Struct TWIM_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [TWIM_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
} NRF_TWIM_EVENTS_DMA_TX_Type;

/* TWIM_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define TWIM_EVENTS_DMA_TX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define TWIM_EVENTS_DMA_TX_END_END_Pos (0UL)
  #define TWIM_EVENTS_DMA_TX_END_END_Msk (0x1UL << TWIM_EVENTS_DMA_TX_END_END_Pos)
  #define TWIM_EVENTS_DMA_TX_END_END_Min (0x0UL)
  #define TWIM_EVENTS_DMA_TX_END_END_Max (0x1UL)
  #define TWIM_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_TX_END_END_Generated (0x1UL)


/* TWIM_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define TWIM_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define TWIM_EVENTS_DMA_TX_READY_READY_Pos (0UL)
  #define TWIM_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << TWIM_EVENTS_DMA_TX_READY_READY_Pos)
  #define TWIM_EVENTS_DMA_TX_READY_READY_Min (0x0UL)
  #define TWIM_EVENTS_DMA_TX_READY_READY_Max (0x1UL)
  #define TWIM_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_TX_READY_READY_Generated (0x1UL)


/* TWIM_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define TWIM_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL)
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL)
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL)
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL)



/* ================================================= Struct TWIM_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [TWIM_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_TWIM_EVENTS_DMA_RX_Type RX;
  __IOM NRF_TWIM_EVENTS_DMA_TX_Type TX;
} NRF_TWIM_EVENTS_DMA_Type;


/* =============================================== Struct TWIM_PUBLISH_DMA_RX ================================================ */
/**
  * @brief RX [TWIM_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_TWIM_PUBLISH_DMA_RX_Type;

/* TWIM_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define TWIM_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define TWIM_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_RX_END_CHIDX_Pos)
  #define TWIM_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_RX_END_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_RX_END_EN_Pos)
  #define TWIM_PUBLISH_DMA_RX_END_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_END_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define TWIM_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define TWIM_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_RX_READY_CHIDX_Pos)
  #define TWIM_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_RX_READY_EN_Pos)
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Pos)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define TWIM_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Pos)
  #define TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_RX_MATCH_EN_Pos)
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL)



/* =============================================== Struct TWIM_PUBLISH_DMA_TX ================================================ */
/**
  * @brief TX [TWIM_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
} NRF_TWIM_PUBLISH_DMA_TX_Type;

/* TWIM_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define TWIM_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define TWIM_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_TX_END_CHIDX_Pos)
  #define TWIM_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_TX_END_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_TX_END_EN_Pos)
  #define TWIM_PUBLISH_DMA_TX_END_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_TX_END_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define TWIM_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define TWIM_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_TX_READY_CHIDX_Pos)
  #define TWIM_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_TX_READY_EN_Pos)
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Pos)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL)



/* ================================================= Struct TWIM_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [TWIM_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_TWIM_PUBLISH_DMA_RX_Type RX;
  __IOM NRF_TWIM_PUBLISH_DMA_TX_Type TX;
} NRF_TWIM_PUBLISH_DMA_Type;


/* ==================================================== Struct TWIM_PSEL ===================================================== */
/**
  * @brief PSEL [TWIM_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SCL;
  __IOM uint32_t  SDA;
} NRF_TWIM_PSEL_Type;

/* TWIM_PSEL_SCL: Pin select for SCL signal */
  #define TWIM_PSEL_SCL_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define TWIM_PSEL_SCL_PIN_Pos (0UL)
  #define TWIM_PSEL_SCL_PIN_Msk (0x1FUL << TWIM_PSEL_SCL_PIN_Pos)
  #define TWIM_PSEL_SCL_PIN_Min (0x00UL)
  #define TWIM_PSEL_SCL_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define TWIM_PSEL_SCL_PORT_Pos (5UL)
  #define TWIM_PSEL_SCL_PORT_Msk (0x7UL << TWIM_PSEL_SCL_PORT_Pos)
  #define TWIM_PSEL_SCL_PORT_Min (0x0UL)
  #define TWIM_PSEL_SCL_PORT_Max (0x1UL)

/* CONNECT @Bit 31 : Connection */
  #define TWIM_PSEL_SCL_CONNECT_Pos (31UL)
  #define TWIM_PSEL_SCL_CONNECT_Msk (0x1UL << TWIM_PSEL_SCL_CONNECT_Pos)
  #define TWIM_PSEL_SCL_CONNECT_Min (0x0UL)
  #define TWIM_PSEL_SCL_CONNECT_Max (0x1UL)
  #define TWIM_PSEL_SCL_CONNECT_Disconnected (0x1UL)
  #define TWIM_PSEL_SCL_CONNECT_Connected (0x0UL)


/* TWIM_PSEL_SDA: Pin select for SDA signal */
  #define TWIM_PSEL_SDA_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define TWIM_PSEL_SDA_PIN_Pos (0UL)
  #define TWIM_PSEL_SDA_PIN_Msk (0x1FUL << TWIM_PSEL_SDA_PIN_Pos)
  #define TWIM_PSEL_SDA_PIN_Min (0x00UL)
  #define TWIM_PSEL_SDA_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define TWIM_PSEL_SDA_PORT_Pos (5UL)
  #define TWIM_PSEL_SDA_PORT_Msk (0x7UL << TWIM_PSEL_SDA_PORT_Pos)
  #define TWIM_PSEL_SDA_PORT_Min (0x0UL)
  #define TWIM_PSEL_SDA_PORT_Max (0x1UL)

/* CONNECT @Bit 31 : Connection */
  #define TWIM_PSEL_SDA_CONNECT_Pos (31UL)
  #define TWIM_PSEL_SDA_CONNECT_Msk (0x1UL << TWIM_PSEL_SDA_CONNECT_Pos)
  #define TWIM_PSEL_SDA_CONNECT_Min (0x0UL)
  #define TWIM_PSEL_SDA_CONNECT_Max (0x1UL)
  #define TWIM_PSEL_SDA_CONNECT_Disconnected (0x1UL)
  #define TWIM_PSEL_SDA_CONNECT_Connected (0x0UL)



/* ================================================ Struct TWIM_DMA_RX_MATCH ================================================= */
/**
  * @brief MATCH [TWIM_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_TWIM_DMA_RX_MATCH_Type;

/* TWIM_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define TWIM_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL)

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL)

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL)

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL)

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL)

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or sticky */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL)

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or sticky */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL)

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or sticky */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL)

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or sticky */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL)
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL)


/* TWIM_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define TWIM_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL)
  #define TWIM_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL)
  #define TWIM_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL)
  #define TWIM_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data to look for */
  #define TWIM_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL)
  #define TWIM_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFFFFFFFUL << TWIM_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/



/* =================================================== Struct TWIM_DMA_RX ==================================================== */
/**
  * @brief RX [TWIM_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_TWIM_DMA_RX_MATCH_Type MATCH;            /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_TWIM_DMA_RX_Type;

/* TWIM_DMA_RX_PTR: RAM buffer start address */
  #define TWIM_DMA_RX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TWIM_DMA_RX_PTR_PTR_Pos (0UL)
  #define TWIM_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << TWIM_DMA_RX_PTR_PTR_Pos)


/* TWIM_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define TWIM_DMA_RX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TWIM_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)
  #define TWIM_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIM_DMA_RX_MAXCNT_MAXCNT_Pos)
  #define TWIM_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define TWIM_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* TWIM_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define TWIM_DMA_RX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TWIM_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)
  #define TWIM_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIM_DMA_RX_AMOUNT_AMOUNT_Pos)
  #define TWIM_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define TWIM_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* TWIM_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* TWIM_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TWIM_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TWIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define TWIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TWIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct TWIM_DMA_TX ==================================================== */
/**
  * @brief TX [TWIM_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_TWIM_DMA_TX_Type;

/* TWIM_DMA_TX_PTR: RAM buffer start address */
  #define TWIM_DMA_TX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TWIM_DMA_TX_PTR_PTR_Pos (0UL)
  #define TWIM_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << TWIM_DMA_TX_PTR_PTR_Pos)


/* TWIM_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define TWIM_DMA_TX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TWIM_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)
  #define TWIM_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIM_DMA_TX_MAXCNT_MAXCNT_Pos)
  #define TWIM_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define TWIM_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* TWIM_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define TWIM_DMA_TX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TWIM_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)
  #define TWIM_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIM_DMA_TX_AMOUNT_AMOUNT_Pos)
  #define TWIM_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define TWIM_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* TWIM_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* TWIM_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TWIM_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TWIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define TWIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TWIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct TWIM_DMA ===================================================== */
/**
  * @brief DMA [TWIM_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_TWIM_DMA_RX_Type RX;
  __IOM NRF_TWIM_DMA_TX_Type TX;
} NRF_TWIM_DMA_Type;

/* ======================================================= Struct TWIM ======================================================= */
/**
  * @brief I2C compatible Two-Wire Master Interface with EasyDMA
  */
  typedef struct {
    __IM uint32_t RESERVED;
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Stop TWI transaction. Must be issued while the TWI
                                                                         master is not suspended.*/
    __IM uint32_t RESERVED1;
    __OM uint32_t TASKS_SUSPEND;
    __OM uint32_t TASKS_RESUME;
    __IM uint32_t RESERVED2[5];
    __OM NRF_TWIM_TASKS_DMA_Type TASKS_DMA;
    __IM uint32_t RESERVED3[11];
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED4;
    __IOM uint32_t SUBSCRIBE_SUSPEND;
    __IOM uint32_t SUBSCRIBE_RESUME;
    __IM uint32_t RESERVED5[5];
    __IOM NRF_TWIM_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA;
    __IM uint32_t RESERVED6[11];
    __IOM uint32_t EVENTS_STOPPED;
    __IM uint32_t RESERVED7[3];
    __IOM uint32_t EVENTS_ERROR;
    __IM uint32_t RESERVED8[4];
    __IOM uint32_t EVENTS_SUSPENDED;                 /*!< (@ 0x00000128) SUSPEND task has been issued, TWI traffic is now
                                                                         suspended.*/
    __IM uint32_t RESERVED9[2];
    __IOM uint32_t EVENTS_LASTRX;
    __IOM uint32_t EVENTS_LASTTX;
    __IM uint32_t RESERVED10[4];
    __IOM NRF_TWIM_EVENTS_DMA_Type EVENTS_DMA;
    __IM uint32_t RESERVED11[4];
    __IOM uint32_t PUBLISH_STOPPED;
    __IM uint32_t RESERVED12[3];
    __IOM uint32_t PUBLISH_ERROR;
    __IM uint32_t RESERVED13[4];
    __IOM uint32_t PUBLISH_SUSPENDED;
    __IM uint32_t RESERVED14[2];
    __IOM uint32_t PUBLISH_LASTRX;
    __IOM uint32_t PUBLISH_LASTTX;
    __IM uint32_t RESERVED15[4];
    __IOM NRF_TWIM_PUBLISH_DMA_Type PUBLISH_DMA;
    __IM uint32_t RESERVED16[3];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED17[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED18[110];
    __IOM uint32_t ERRORSRC;
    __IM uint32_t RESERVED19[14];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED20[8];
    __IOM uint32_t FREQUENCY;                        /*!< (@ 0x00000524) TWI frequency. Accuracy depends on the HFCLK source
                                                                         selected.*/
    __IM uint32_t RESERVED21[24];
    __IOM uint32_t ADDRESS;
    __IM uint32_t RESERVED22[29];
    __IOM NRF_TWIM_PSEL_Type PSEL;
    __IM uint32_t RESERVED23[62];
    __IOM NRF_TWIM_DMA_Type DMA;
  } NRF_TWIM_Type;

/* TWIM_TASKS_STOP: Stop TWI transaction. Must be issued while the TWI master is not suspended. */
  #define TWIM_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop TWI transaction. Must be issued while the TWI master is not suspended. */
  #define TWIM_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define TWIM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TWIM_TASKS_STOP_TASKS_STOP_Pos)
  #define TWIM_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define TWIM_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define TWIM_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* TWIM_TASKS_SUSPEND: Suspend TWI transaction */
  #define TWIM_TASKS_SUSPEND_ResetValue (0x00000000UL)

/* TASKS_SUSPEND @Bit 0 : Suspend TWI transaction */
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL)
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND
                                                                            field.*/
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Min (0x1UL)
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Max (0x1UL)
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (0x1UL)


/* TWIM_TASKS_RESUME: Resume TWI transaction */
  #define TWIM_TASKS_RESUME_ResetValue (0x00000000UL)

/* TASKS_RESUME @Bit 0 : Resume TWI transaction */
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Pos (0UL)
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << TWIM_TASKS_RESUME_TASKS_RESUME_Pos)
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Min (0x1UL)
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Max (0x1UL)
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Trigger (0x1UL)


/* TWIM_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define TWIM_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TWIM_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_STOP_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_STOP_EN_Msk (0x1UL << TWIM_SUBSCRIBE_STOP_EN_Pos)
  #define TWIM_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* TWIM_SUBSCRIBE_SUSPEND: Subscribe configuration for task SUSPEND */
  #define TWIM_SUBSCRIBE_SUSPEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SUSPEND will subscribe to */
  #define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_SUSPEND_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << TWIM_SUBSCRIBE_SUSPEND_EN_Pos)
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Enabled (0x1UL)


/* TWIM_SUBSCRIBE_RESUME: Subscribe configuration for task RESUME */
  #define TWIM_SUBSCRIBE_RESUME_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RESUME will subscribe to */
  #define TWIM_SUBSCRIBE_RESUME_CHIDX_Pos (0UL)
  #define TWIM_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_RESUME_CHIDX_Pos)
  #define TWIM_SUBSCRIBE_RESUME_CHIDX_Min (0x00UL)
  #define TWIM_SUBSCRIBE_RESUME_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_RESUME_EN_Pos (31UL)
  #define TWIM_SUBSCRIBE_RESUME_EN_Msk (0x1UL << TWIM_SUBSCRIBE_RESUME_EN_Pos)
  #define TWIM_SUBSCRIBE_RESUME_EN_Min (0x0UL)
  #define TWIM_SUBSCRIBE_RESUME_EN_Max (0x1UL)
  #define TWIM_SUBSCRIBE_RESUME_EN_Disabled (0x0UL)
  #define TWIM_SUBSCRIBE_RESUME_EN_Enabled (0x1UL)


/* TWIM_EVENTS_STOPPED: TWI stopped */
  #define TWIM_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : TWI stopped */
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* TWIM_EVENTS_ERROR: TWI error */
  #define TWIM_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : TWI error */
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << TWIM_EVENTS_ERROR_EVENTS_ERROR_Pos)
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* TWIM_EVENTS_SUSPENDED: SUSPEND task has been issued, TWI traffic is now suspended. */
  #define TWIM_EVENTS_SUSPENDED_ResetValue (0x00000000UL)

/* EVENTS_SUSPENDED @Bit 0 : SUSPEND task has been issued, TWI traffic is now suspended. */
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos (0UL)
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Msk (0x1UL << TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos) /*!< Bit mask of
                                                                            EVENTS_SUSPENDED field.*/
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Min (0x0UL)
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Max (0x1UL)
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_NotGenerated (0x0UL)
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Generated (0x1UL)


/* TWIM_EVENTS_LASTRX: Byte boundary, starting to receive the last byte */
  #define TWIM_EVENTS_LASTRX_ResetValue (0x00000000UL)

/* EVENTS_LASTRX @Bit 0 : Byte boundary, starting to receive the last byte */
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Pos (0UL)
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Msk (0x1UL << TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Pos) /*!< Bit mask of EVENTS_LASTRX
                                                                            field.*/
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Min (0x0UL)
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Max (0x1UL)
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_NotGenerated (0x0UL)
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Generated (0x1UL)


/* TWIM_EVENTS_LASTTX: Byte boundary, starting to transmit the last byte */
  #define TWIM_EVENTS_LASTTX_ResetValue (0x00000000UL)

/* EVENTS_LASTTX @Bit 0 : Byte boundary, starting to transmit the last byte */
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Pos (0UL)
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Msk (0x1UL << TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Pos) /*!< Bit mask of EVENTS_LASTTX
                                                                            field.*/
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Min (0x0UL)
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Max (0x1UL)
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_NotGenerated (0x0UL)
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Generated (0x1UL)


/* TWIM_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define TWIM_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define TWIM_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_STOPPED_CHIDX_Pos)
  #define TWIM_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_STOPPED_EN_Pos (31UL)
  #define TWIM_PUBLISH_STOPPED_EN_Msk (0x1UL << TWIM_PUBLISH_STOPPED_EN_Pos)
  #define TWIM_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define TWIM_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define TWIM_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define TWIM_PUBLISH_ERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define TWIM_PUBLISH_ERROR_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_ERROR_CHIDX_Pos)
  #define TWIM_PUBLISH_ERROR_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_ERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_ERROR_EN_Pos (31UL)
  #define TWIM_PUBLISH_ERROR_EN_Msk (0x1UL << TWIM_PUBLISH_ERROR_EN_Pos)
  #define TWIM_PUBLISH_ERROR_EN_Min (0x0UL)
  #define TWIM_PUBLISH_ERROR_EN_Max (0x1UL)
  #define TWIM_PUBLISH_ERROR_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_ERROR_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_SUSPENDED: Publish configuration for event SUSPENDED */
  #define TWIM_PUBLISH_SUSPENDED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SUSPENDED will publish to */
  #define TWIM_PUBLISH_SUSPENDED_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_SUSPENDED_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_SUSPENDED_CHIDX_Pos)
  #define TWIM_PUBLISH_SUSPENDED_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_SUSPENDED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_SUSPENDED_EN_Pos (31UL)
  #define TWIM_PUBLISH_SUSPENDED_EN_Msk (0x1UL << TWIM_PUBLISH_SUSPENDED_EN_Pos)
  #define TWIM_PUBLISH_SUSPENDED_EN_Min (0x0UL)
  #define TWIM_PUBLISH_SUSPENDED_EN_Max (0x1UL)
  #define TWIM_PUBLISH_SUSPENDED_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_SUSPENDED_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_LASTRX: Publish configuration for event LASTRX */
  #define TWIM_PUBLISH_LASTRX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event LASTRX will publish to */
  #define TWIM_PUBLISH_LASTRX_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_LASTRX_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_LASTRX_CHIDX_Pos)
  #define TWIM_PUBLISH_LASTRX_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_LASTRX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_LASTRX_EN_Pos (31UL)
  #define TWIM_PUBLISH_LASTRX_EN_Msk (0x1UL << TWIM_PUBLISH_LASTRX_EN_Pos)
  #define TWIM_PUBLISH_LASTRX_EN_Min (0x0UL)
  #define TWIM_PUBLISH_LASTRX_EN_Max (0x1UL)
  #define TWIM_PUBLISH_LASTRX_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_LASTRX_EN_Enabled (0x1UL)


/* TWIM_PUBLISH_LASTTX: Publish configuration for event LASTTX */
  #define TWIM_PUBLISH_LASTTX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event LASTTX will publish to */
  #define TWIM_PUBLISH_LASTTX_CHIDX_Pos (0UL)
  #define TWIM_PUBLISH_LASTTX_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_LASTTX_CHIDX_Pos)
  #define TWIM_PUBLISH_LASTTX_CHIDX_Min (0x00UL)
  #define TWIM_PUBLISH_LASTTX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_LASTTX_EN_Pos (31UL)
  #define TWIM_PUBLISH_LASTTX_EN_Msk (0x1UL << TWIM_PUBLISH_LASTTX_EN_Pos)
  #define TWIM_PUBLISH_LASTTX_EN_Min (0x0UL)
  #define TWIM_PUBLISH_LASTTX_EN_Max (0x1UL)
  #define TWIM_PUBLISH_LASTTX_EN_Disabled (0x0UL)
  #define TWIM_PUBLISH_LASTTX_EN_Enabled (0x1UL)


/* TWIM_SHORTS: Shortcuts between local events and tasks */
  #define TWIM_SHORTS_ResetValue (0x00000000UL)

/* LASTTX_DMA_RX_START @Bit 7 : Shortcut between event LASTTX and task DMA.RX.START */
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Pos (7UL)
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Msk (0x1UL << TWIM_SHORTS_LASTTX_DMA_RX_START_Pos) /*!< Bit mask of
                                                                            LASTTX_DMA_RX_START field.*/
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Min (0x0UL)
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Max (0x1UL)
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Disabled (0x0UL)
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Enabled (0x1UL)

/* LASTTX_SUSPEND @Bit 8 : Shortcut between event LASTTX and task SUSPEND */
  #define TWIM_SHORTS_LASTTX_SUSPEND_Pos (8UL)
  #define TWIM_SHORTS_LASTTX_SUSPEND_Msk (0x1UL << TWIM_SHORTS_LASTTX_SUSPEND_Pos)
  #define TWIM_SHORTS_LASTTX_SUSPEND_Min (0x0UL)
  #define TWIM_SHORTS_LASTTX_SUSPEND_Max (0x1UL)
  #define TWIM_SHORTS_LASTTX_SUSPEND_Disabled (0x0UL)
  #define TWIM_SHORTS_LASTTX_SUSPEND_Enabled (0x1UL)

/* LASTTX_STOP @Bit 9 : Shortcut between event LASTTX and task STOP */
  #define TWIM_SHORTS_LASTTX_STOP_Pos (9UL)
  #define TWIM_SHORTS_LASTTX_STOP_Msk (0x1UL << TWIM_SHORTS_LASTTX_STOP_Pos)
  #define TWIM_SHORTS_LASTTX_STOP_Min (0x0UL)
  #define TWIM_SHORTS_LASTTX_STOP_Max (0x1UL)
  #define TWIM_SHORTS_LASTTX_STOP_Disabled (0x0UL)
  #define TWIM_SHORTS_LASTTX_STOP_Enabled (0x1UL)

/* LASTRX_DMA_TX_START @Bit 10 : Shortcut between event LASTRX and task DMA.TX.START */
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Pos (10UL)
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Msk (0x1UL << TWIM_SHORTS_LASTRX_DMA_TX_START_Pos) /*!< Bit mask of
                                                                            LASTRX_DMA_TX_START field.*/
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Min (0x0UL)
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Max (0x1UL)
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Disabled (0x0UL)
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Enabled (0x1UL)

/* LASTRX_STOP @Bit 12 : Shortcut between event LASTRX and task STOP */
  #define TWIM_SHORTS_LASTRX_STOP_Pos (12UL)
  #define TWIM_SHORTS_LASTRX_STOP_Msk (0x1UL << TWIM_SHORTS_LASTRX_STOP_Pos)
  #define TWIM_SHORTS_LASTRX_STOP_Min (0x0UL)
  #define TWIM_SHORTS_LASTRX_STOP_Max (0x1UL)
  #define TWIM_SHORTS_LASTRX_STOP_Disabled (0x0UL)
  #define TWIM_SHORTS_LASTRX_STOP_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL)
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL)
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL)
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL)
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL)
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL)
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL)
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL)
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL)
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL)


/* TWIM_INTEN: Enable or disable interrupt */
  #define TWIM_INTEN_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Enable or disable interrupt for event STOPPED */
  #define TWIM_INTEN_STOPPED_Pos (1UL)
  #define TWIM_INTEN_STOPPED_Msk (0x1UL << TWIM_INTEN_STOPPED_Pos)
  #define TWIM_INTEN_STOPPED_Min (0x0UL)
  #define TWIM_INTEN_STOPPED_Max (0x1UL)
  #define TWIM_INTEN_STOPPED_Disabled (0x0UL)
  #define TWIM_INTEN_STOPPED_Enabled (0x1UL)

/* ERROR @Bit 5 : Enable or disable interrupt for event ERROR */
  #define TWIM_INTEN_ERROR_Pos (5UL)
  #define TWIM_INTEN_ERROR_Msk (0x1UL << TWIM_INTEN_ERROR_Pos)
  #define TWIM_INTEN_ERROR_Min (0x0UL)
  #define TWIM_INTEN_ERROR_Max (0x1UL)
  #define TWIM_INTEN_ERROR_Disabled (0x0UL)
  #define TWIM_INTEN_ERROR_Enabled (0x1UL)

/* SUSPENDED @Bit 10 : Enable or disable interrupt for event SUSPENDED */
  #define TWIM_INTEN_SUSPENDED_Pos (10UL)
  #define TWIM_INTEN_SUSPENDED_Msk (0x1UL << TWIM_INTEN_SUSPENDED_Pos)
  #define TWIM_INTEN_SUSPENDED_Min (0x0UL)
  #define TWIM_INTEN_SUSPENDED_Max (0x1UL)
  #define TWIM_INTEN_SUSPENDED_Disabled (0x0UL)
  #define TWIM_INTEN_SUSPENDED_Enabled (0x1UL)

/* LASTRX @Bit 13 : Enable or disable interrupt for event LASTRX */
  #define TWIM_INTEN_LASTRX_Pos (13UL)
  #define TWIM_INTEN_LASTRX_Msk (0x1UL << TWIM_INTEN_LASTRX_Pos)
  #define TWIM_INTEN_LASTRX_Min (0x0UL)
  #define TWIM_INTEN_LASTRX_Max (0x1UL)
  #define TWIM_INTEN_LASTRX_Disabled (0x0UL)
  #define TWIM_INTEN_LASTRX_Enabled (0x1UL)

/* LASTTX @Bit 14 : Enable or disable interrupt for event LASTTX */
  #define TWIM_INTEN_LASTTX_Pos (14UL)
  #define TWIM_INTEN_LASTTX_Msk (0x1UL << TWIM_INTEN_LASTTX_Pos)
  #define TWIM_INTEN_LASTTX_Min (0x0UL)
  #define TWIM_INTEN_LASTTX_Max (0x1UL)
  #define TWIM_INTEN_LASTTX_Disabled (0x0UL)
  #define TWIM_INTEN_LASTTX_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Enable or disable interrupt for event DMARXEND */
  #define TWIM_INTEN_DMARXEND_Pos (19UL)
  #define TWIM_INTEN_DMARXEND_Msk (0x1UL << TWIM_INTEN_DMARXEND_Pos)
  #define TWIM_INTEN_DMARXEND_Min (0x0UL)
  #define TWIM_INTEN_DMARXEND_Max (0x1UL)
  #define TWIM_INTEN_DMARXEND_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Enable or disable interrupt for event DMARXREADY */
  #define TWIM_INTEN_DMARXREADY_Pos (20UL)
  #define TWIM_INTEN_DMARXREADY_Msk (0x1UL << TWIM_INTEN_DMARXREADY_Pos)
  #define TWIM_INTEN_DMARXREADY_Min (0x0UL)
  #define TWIM_INTEN_DMARXREADY_Max (0x1UL)
  #define TWIM_INTEN_DMARXREADY_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Enable or disable interrupt for event DMARXBUSERROR */
  #define TWIM_INTEN_DMARXBUSERROR_Pos (21UL)
  #define TWIM_INTEN_DMARXBUSERROR_Msk (0x1UL << TWIM_INTEN_DMARXBUSERROR_Pos)
  #define TWIM_INTEN_DMARXBUSERROR_Min (0x0UL)
  #define TWIM_INTEN_DMARXBUSERROR_Max (0x1UL)
  #define TWIM_INTEN_DMARXBUSERROR_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Enable or disable interrupt for event DMARXMATCH[0] */
  #define TWIM_INTEN_DMARXMATCH0_Pos (22UL)
  #define TWIM_INTEN_DMARXMATCH0_Msk (0x1UL << TWIM_INTEN_DMARXMATCH0_Pos)
  #define TWIM_INTEN_DMARXMATCH0_Min (0x0UL)
  #define TWIM_INTEN_DMARXMATCH0_Max (0x1UL)
  #define TWIM_INTEN_DMARXMATCH0_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Enable or disable interrupt for event DMARXMATCH[1] */
  #define TWIM_INTEN_DMARXMATCH1_Pos (23UL)
  #define TWIM_INTEN_DMARXMATCH1_Msk (0x1UL << TWIM_INTEN_DMARXMATCH1_Pos)
  #define TWIM_INTEN_DMARXMATCH1_Min (0x0UL)
  #define TWIM_INTEN_DMARXMATCH1_Max (0x1UL)
  #define TWIM_INTEN_DMARXMATCH1_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Enable or disable interrupt for event DMARXMATCH[2] */
  #define TWIM_INTEN_DMARXMATCH2_Pos (24UL)
  #define TWIM_INTEN_DMARXMATCH2_Msk (0x1UL << TWIM_INTEN_DMARXMATCH2_Pos)
  #define TWIM_INTEN_DMARXMATCH2_Min (0x0UL)
  #define TWIM_INTEN_DMARXMATCH2_Max (0x1UL)
  #define TWIM_INTEN_DMARXMATCH2_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Enable or disable interrupt for event DMARXMATCH[3] */
  #define TWIM_INTEN_DMARXMATCH3_Pos (25UL)
  #define TWIM_INTEN_DMARXMATCH3_Msk (0x1UL << TWIM_INTEN_DMARXMATCH3_Pos)
  #define TWIM_INTEN_DMARXMATCH3_Min (0x0UL)
  #define TWIM_INTEN_DMARXMATCH3_Max (0x1UL)
  #define TWIM_INTEN_DMARXMATCH3_Disabled (0x0UL)
  #define TWIM_INTEN_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Enable or disable interrupt for event DMATXEND */
  #define TWIM_INTEN_DMATXEND_Pos (26UL)
  #define TWIM_INTEN_DMATXEND_Msk (0x1UL << TWIM_INTEN_DMATXEND_Pos)
  #define TWIM_INTEN_DMATXEND_Min (0x0UL)
  #define TWIM_INTEN_DMATXEND_Max (0x1UL)
  #define TWIM_INTEN_DMATXEND_Disabled (0x0UL)
  #define TWIM_INTEN_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Enable or disable interrupt for event DMATXREADY */
  #define TWIM_INTEN_DMATXREADY_Pos (27UL)
  #define TWIM_INTEN_DMATXREADY_Msk (0x1UL << TWIM_INTEN_DMATXREADY_Pos)
  #define TWIM_INTEN_DMATXREADY_Min (0x0UL)
  #define TWIM_INTEN_DMATXREADY_Max (0x1UL)
  #define TWIM_INTEN_DMATXREADY_Disabled (0x0UL)
  #define TWIM_INTEN_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Enable or disable interrupt for event DMATXBUSERROR */
  #define TWIM_INTEN_DMATXBUSERROR_Pos (28UL)
  #define TWIM_INTEN_DMATXBUSERROR_Msk (0x1UL << TWIM_INTEN_DMATXBUSERROR_Pos)
  #define TWIM_INTEN_DMATXBUSERROR_Min (0x0UL)
  #define TWIM_INTEN_DMATXBUSERROR_Max (0x1UL)
  #define TWIM_INTEN_DMATXBUSERROR_Disabled (0x0UL)
  #define TWIM_INTEN_DMATXBUSERROR_Enabled (0x1UL)


/* TWIM_INTENSET: Enable interrupt */
  #define TWIM_INTENSET_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define TWIM_INTENSET_STOPPED_Pos (1UL)
  #define TWIM_INTENSET_STOPPED_Msk (0x1UL << TWIM_INTENSET_STOPPED_Pos)
  #define TWIM_INTENSET_STOPPED_Min (0x0UL)
  #define TWIM_INTENSET_STOPPED_Max (0x1UL)
  #define TWIM_INTENSET_STOPPED_Set (0x1UL)
  #define TWIM_INTENSET_STOPPED_Disabled (0x0UL)
  #define TWIM_INTENSET_STOPPED_Enabled (0x1UL)

/* ERROR @Bit 5 : Write '1' to enable interrupt for event ERROR */
  #define TWIM_INTENSET_ERROR_Pos (5UL)
  #define TWIM_INTENSET_ERROR_Msk (0x1UL << TWIM_INTENSET_ERROR_Pos)
  #define TWIM_INTENSET_ERROR_Min (0x0UL)
  #define TWIM_INTENSET_ERROR_Max (0x1UL)
  #define TWIM_INTENSET_ERROR_Set (0x1UL)
  #define TWIM_INTENSET_ERROR_Disabled (0x0UL)
  #define TWIM_INTENSET_ERROR_Enabled (0x1UL)

/* SUSPENDED @Bit 10 : Write '1' to enable interrupt for event SUSPENDED */
  #define TWIM_INTENSET_SUSPENDED_Pos (10UL)
  #define TWIM_INTENSET_SUSPENDED_Msk (0x1UL << TWIM_INTENSET_SUSPENDED_Pos)
  #define TWIM_INTENSET_SUSPENDED_Min (0x0UL)
  #define TWIM_INTENSET_SUSPENDED_Max (0x1UL)
  #define TWIM_INTENSET_SUSPENDED_Set (0x1UL)
  #define TWIM_INTENSET_SUSPENDED_Disabled (0x0UL)
  #define TWIM_INTENSET_SUSPENDED_Enabled (0x1UL)

/* LASTRX @Bit 13 : Write '1' to enable interrupt for event LASTRX */
  #define TWIM_INTENSET_LASTRX_Pos (13UL)
  #define TWIM_INTENSET_LASTRX_Msk (0x1UL << TWIM_INTENSET_LASTRX_Pos)
  #define TWIM_INTENSET_LASTRX_Min (0x0UL)
  #define TWIM_INTENSET_LASTRX_Max (0x1UL)
  #define TWIM_INTENSET_LASTRX_Set (0x1UL)
  #define TWIM_INTENSET_LASTRX_Disabled (0x0UL)
  #define TWIM_INTENSET_LASTRX_Enabled (0x1UL)

/* LASTTX @Bit 14 : Write '1' to enable interrupt for event LASTTX */
  #define TWIM_INTENSET_LASTTX_Pos (14UL)
  #define TWIM_INTENSET_LASTTX_Msk (0x1UL << TWIM_INTENSET_LASTTX_Pos)
  #define TWIM_INTENSET_LASTTX_Min (0x0UL)
  #define TWIM_INTENSET_LASTTX_Max (0x1UL)
  #define TWIM_INTENSET_LASTTX_Set (0x1UL)
  #define TWIM_INTENSET_LASTTX_Disabled (0x0UL)
  #define TWIM_INTENSET_LASTTX_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define TWIM_INTENSET_DMARXEND_Pos (19UL)
  #define TWIM_INTENSET_DMARXEND_Msk (0x1UL << TWIM_INTENSET_DMARXEND_Pos)
  #define TWIM_INTENSET_DMARXEND_Min (0x0UL)
  #define TWIM_INTENSET_DMARXEND_Max (0x1UL)
  #define TWIM_INTENSET_DMARXEND_Set (0x1UL)
  #define TWIM_INTENSET_DMARXEND_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define TWIM_INTENSET_DMARXREADY_Pos (20UL)
  #define TWIM_INTENSET_DMARXREADY_Msk (0x1UL << TWIM_INTENSET_DMARXREADY_Pos)
  #define TWIM_INTENSET_DMARXREADY_Min (0x0UL)
  #define TWIM_INTENSET_DMARXREADY_Max (0x1UL)
  #define TWIM_INTENSET_DMARXREADY_Set (0x1UL)
  #define TWIM_INTENSET_DMARXREADY_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define TWIM_INTENSET_DMARXBUSERROR_Pos (21UL)
  #define TWIM_INTENSET_DMARXBUSERROR_Msk (0x1UL << TWIM_INTENSET_DMARXBUSERROR_Pos)
  #define TWIM_INTENSET_DMARXBUSERROR_Min (0x0UL)
  #define TWIM_INTENSET_DMARXBUSERROR_Max (0x1UL)
  #define TWIM_INTENSET_DMARXBUSERROR_Set (0x1UL)
  #define TWIM_INTENSET_DMARXBUSERROR_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define TWIM_INTENSET_DMARXMATCH0_Pos (22UL)
  #define TWIM_INTENSET_DMARXMATCH0_Msk (0x1UL << TWIM_INTENSET_DMARXMATCH0_Pos)
  #define TWIM_INTENSET_DMARXMATCH0_Min (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH0_Max (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH0_Set (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH0_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define TWIM_INTENSET_DMARXMATCH1_Pos (23UL)
  #define TWIM_INTENSET_DMARXMATCH1_Msk (0x1UL << TWIM_INTENSET_DMARXMATCH1_Pos)
  #define TWIM_INTENSET_DMARXMATCH1_Min (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH1_Max (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH1_Set (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH1_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define TWIM_INTENSET_DMARXMATCH2_Pos (24UL)
  #define TWIM_INTENSET_DMARXMATCH2_Msk (0x1UL << TWIM_INTENSET_DMARXMATCH2_Pos)
  #define TWIM_INTENSET_DMARXMATCH2_Min (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH2_Max (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH2_Set (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH2_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define TWIM_INTENSET_DMARXMATCH3_Pos (25UL)
  #define TWIM_INTENSET_DMARXMATCH3_Msk (0x1UL << TWIM_INTENSET_DMARXMATCH3_Pos)
  #define TWIM_INTENSET_DMARXMATCH3_Min (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH3_Max (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH3_Set (0x1UL)
  #define TWIM_INTENSET_DMARXMATCH3_Disabled (0x0UL)
  #define TWIM_INTENSET_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define TWIM_INTENSET_DMATXEND_Pos (26UL)
  #define TWIM_INTENSET_DMATXEND_Msk (0x1UL << TWIM_INTENSET_DMATXEND_Pos)
  #define TWIM_INTENSET_DMATXEND_Min (0x0UL)
  #define TWIM_INTENSET_DMATXEND_Max (0x1UL)
  #define TWIM_INTENSET_DMATXEND_Set (0x1UL)
  #define TWIM_INTENSET_DMATXEND_Disabled (0x0UL)
  #define TWIM_INTENSET_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define TWIM_INTENSET_DMATXREADY_Pos (27UL)
  #define TWIM_INTENSET_DMATXREADY_Msk (0x1UL << TWIM_INTENSET_DMATXREADY_Pos)
  #define TWIM_INTENSET_DMATXREADY_Min (0x0UL)
  #define TWIM_INTENSET_DMATXREADY_Max (0x1UL)
  #define TWIM_INTENSET_DMATXREADY_Set (0x1UL)
  #define TWIM_INTENSET_DMATXREADY_Disabled (0x0UL)
  #define TWIM_INTENSET_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define TWIM_INTENSET_DMATXBUSERROR_Pos (28UL)
  #define TWIM_INTENSET_DMATXBUSERROR_Msk (0x1UL << TWIM_INTENSET_DMATXBUSERROR_Pos)
  #define TWIM_INTENSET_DMATXBUSERROR_Min (0x0UL)
  #define TWIM_INTENSET_DMATXBUSERROR_Max (0x1UL)
  #define TWIM_INTENSET_DMATXBUSERROR_Set (0x1UL)
  #define TWIM_INTENSET_DMATXBUSERROR_Disabled (0x0UL)
  #define TWIM_INTENSET_DMATXBUSERROR_Enabled (0x1UL)


/* TWIM_INTENCLR: Disable interrupt */
  #define TWIM_INTENCLR_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define TWIM_INTENCLR_STOPPED_Pos (1UL)
  #define TWIM_INTENCLR_STOPPED_Msk (0x1UL << TWIM_INTENCLR_STOPPED_Pos)
  #define TWIM_INTENCLR_STOPPED_Min (0x0UL)
  #define TWIM_INTENCLR_STOPPED_Max (0x1UL)
  #define TWIM_INTENCLR_STOPPED_Clear (0x1UL)
  #define TWIM_INTENCLR_STOPPED_Disabled (0x0UL)
  #define TWIM_INTENCLR_STOPPED_Enabled (0x1UL)

/* ERROR @Bit 5 : Write '1' to disable interrupt for event ERROR */
  #define TWIM_INTENCLR_ERROR_Pos (5UL)
  #define TWIM_INTENCLR_ERROR_Msk (0x1UL << TWIM_INTENCLR_ERROR_Pos)
  #define TWIM_INTENCLR_ERROR_Min (0x0UL)
  #define TWIM_INTENCLR_ERROR_Max (0x1UL)
  #define TWIM_INTENCLR_ERROR_Clear (0x1UL)
  #define TWIM_INTENCLR_ERROR_Disabled (0x0UL)
  #define TWIM_INTENCLR_ERROR_Enabled (0x1UL)

/* SUSPENDED @Bit 10 : Write '1' to disable interrupt for event SUSPENDED */
  #define TWIM_INTENCLR_SUSPENDED_Pos (10UL)
  #define TWIM_INTENCLR_SUSPENDED_Msk (0x1UL << TWIM_INTENCLR_SUSPENDED_Pos)
  #define TWIM_INTENCLR_SUSPENDED_Min (0x0UL)
  #define TWIM_INTENCLR_SUSPENDED_Max (0x1UL)
  #define TWIM_INTENCLR_SUSPENDED_Clear (0x1UL)
  #define TWIM_INTENCLR_SUSPENDED_Disabled (0x0UL)
  #define TWIM_INTENCLR_SUSPENDED_Enabled (0x1UL)

/* LASTRX @Bit 13 : Write '1' to disable interrupt for event LASTRX */
  #define TWIM_INTENCLR_LASTRX_Pos (13UL)
  #define TWIM_INTENCLR_LASTRX_Msk (0x1UL << TWIM_INTENCLR_LASTRX_Pos)
  #define TWIM_INTENCLR_LASTRX_Min (0x0UL)
  #define TWIM_INTENCLR_LASTRX_Max (0x1UL)
  #define TWIM_INTENCLR_LASTRX_Clear (0x1UL)
  #define TWIM_INTENCLR_LASTRX_Disabled (0x0UL)
  #define TWIM_INTENCLR_LASTRX_Enabled (0x1UL)

/* LASTTX @Bit 14 : Write '1' to disable interrupt for event LASTTX */
  #define TWIM_INTENCLR_LASTTX_Pos (14UL)
  #define TWIM_INTENCLR_LASTTX_Msk (0x1UL << TWIM_INTENCLR_LASTTX_Pos)
  #define TWIM_INTENCLR_LASTTX_Min (0x0UL)
  #define TWIM_INTENCLR_LASTTX_Max (0x1UL)
  #define TWIM_INTENCLR_LASTTX_Clear (0x1UL)
  #define TWIM_INTENCLR_LASTTX_Disabled (0x0UL)
  #define TWIM_INTENCLR_LASTTX_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define TWIM_INTENCLR_DMARXEND_Pos (19UL)
  #define TWIM_INTENCLR_DMARXEND_Msk (0x1UL << TWIM_INTENCLR_DMARXEND_Pos)
  #define TWIM_INTENCLR_DMARXEND_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXEND_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXEND_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXEND_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define TWIM_INTENCLR_DMARXREADY_Pos (20UL)
  #define TWIM_INTENCLR_DMARXREADY_Msk (0x1UL << TWIM_INTENCLR_DMARXREADY_Pos)
  #define TWIM_INTENCLR_DMARXREADY_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXREADY_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXREADY_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXREADY_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define TWIM_INTENCLR_DMARXBUSERROR_Pos (21UL)
  #define TWIM_INTENCLR_DMARXBUSERROR_Msk (0x1UL << TWIM_INTENCLR_DMARXBUSERROR_Pos)
  #define TWIM_INTENCLR_DMARXBUSERROR_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXBUSERROR_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXBUSERROR_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXBUSERROR_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define TWIM_INTENCLR_DMARXMATCH0_Pos (22UL)
  #define TWIM_INTENCLR_DMARXMATCH0_Msk (0x1UL << TWIM_INTENCLR_DMARXMATCH0_Pos)
  #define TWIM_INTENCLR_DMARXMATCH0_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH0_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH0_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH0_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define TWIM_INTENCLR_DMARXMATCH1_Pos (23UL)
  #define TWIM_INTENCLR_DMARXMATCH1_Msk (0x1UL << TWIM_INTENCLR_DMARXMATCH1_Pos)
  #define TWIM_INTENCLR_DMARXMATCH1_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH1_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH1_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH1_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define TWIM_INTENCLR_DMARXMATCH2_Pos (24UL)
  #define TWIM_INTENCLR_DMARXMATCH2_Msk (0x1UL << TWIM_INTENCLR_DMARXMATCH2_Pos)
  #define TWIM_INTENCLR_DMARXMATCH2_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH2_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH2_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH2_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define TWIM_INTENCLR_DMARXMATCH3_Pos (25UL)
  #define TWIM_INTENCLR_DMARXMATCH3_Msk (0x1UL << TWIM_INTENCLR_DMARXMATCH3_Pos)
  #define TWIM_INTENCLR_DMARXMATCH3_Min (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH3_Max (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH3_Clear (0x1UL)
  #define TWIM_INTENCLR_DMARXMATCH3_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define TWIM_INTENCLR_DMATXEND_Pos (26UL)
  #define TWIM_INTENCLR_DMATXEND_Msk (0x1UL << TWIM_INTENCLR_DMATXEND_Pos)
  #define TWIM_INTENCLR_DMATXEND_Min (0x0UL)
  #define TWIM_INTENCLR_DMATXEND_Max (0x1UL)
  #define TWIM_INTENCLR_DMATXEND_Clear (0x1UL)
  #define TWIM_INTENCLR_DMATXEND_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define TWIM_INTENCLR_DMATXREADY_Pos (27UL)
  #define TWIM_INTENCLR_DMATXREADY_Msk (0x1UL << TWIM_INTENCLR_DMATXREADY_Pos)
  #define TWIM_INTENCLR_DMATXREADY_Min (0x0UL)
  #define TWIM_INTENCLR_DMATXREADY_Max (0x1UL)
  #define TWIM_INTENCLR_DMATXREADY_Clear (0x1UL)
  #define TWIM_INTENCLR_DMATXREADY_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define TWIM_INTENCLR_DMATXBUSERROR_Pos (28UL)
  #define TWIM_INTENCLR_DMATXBUSERROR_Msk (0x1UL << TWIM_INTENCLR_DMATXBUSERROR_Pos)
  #define TWIM_INTENCLR_DMATXBUSERROR_Min (0x0UL)
  #define TWIM_INTENCLR_DMATXBUSERROR_Max (0x1UL)
  #define TWIM_INTENCLR_DMATXBUSERROR_Clear (0x1UL)
  #define TWIM_INTENCLR_DMATXBUSERROR_Disabled (0x0UL)
  #define TWIM_INTENCLR_DMATXBUSERROR_Enabled (0x1UL)


/* TWIM_ERRORSRC: Error source */
  #define TWIM_ERRORSRC_ResetValue (0x00000000UL)

/* OVERRUN @Bit 0 : Overrun error */
  #define TWIM_ERRORSRC_OVERRUN_Pos (0UL)
  #define TWIM_ERRORSRC_OVERRUN_Msk (0x1UL << TWIM_ERRORSRC_OVERRUN_Pos)
  #define TWIM_ERRORSRC_OVERRUN_Min (0x0UL)
  #define TWIM_ERRORSRC_OVERRUN_Max (0x1UL)
  #define TWIM_ERRORSRC_OVERRUN_NotReceived (0x0UL)
  #define TWIM_ERRORSRC_OVERRUN_Received (0x1UL)

/* ANACK @Bit 1 : NACK received after sending the address (write '1' to clear) */
  #define TWIM_ERRORSRC_ANACK_Pos (1UL)
  #define TWIM_ERRORSRC_ANACK_Msk (0x1UL << TWIM_ERRORSRC_ANACK_Pos)
  #define TWIM_ERRORSRC_ANACK_Min (0x0UL)
  #define TWIM_ERRORSRC_ANACK_Max (0x1UL)
  #define TWIM_ERRORSRC_ANACK_NotReceived (0x0UL)
  #define TWIM_ERRORSRC_ANACK_Received (0x1UL)

/* DNACK @Bit 2 : NACK received after sending a data byte (write '1' to clear) */
  #define TWIM_ERRORSRC_DNACK_Pos (2UL)
  #define TWIM_ERRORSRC_DNACK_Msk (0x1UL << TWIM_ERRORSRC_DNACK_Pos)
  #define TWIM_ERRORSRC_DNACK_Min (0x0UL)
  #define TWIM_ERRORSRC_DNACK_Max (0x1UL)
  #define TWIM_ERRORSRC_DNACK_NotReceived (0x0UL)
  #define TWIM_ERRORSRC_DNACK_Received (0x1UL)


/* TWIM_ENABLE: Enable TWIM */
  #define TWIM_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..3 : Enable or disable TWIM */
  #define TWIM_ENABLE_ENABLE_Pos (0UL)
  #define TWIM_ENABLE_ENABLE_Msk (0xFUL << TWIM_ENABLE_ENABLE_Pos)
  #define TWIM_ENABLE_ENABLE_Min (0x0UL)
  #define TWIM_ENABLE_ENABLE_Max (0x6UL)
  #define TWIM_ENABLE_ENABLE_Disabled (0x0UL)
  #define TWIM_ENABLE_ENABLE_Enabled (0x6UL)


/* TWIM_FREQUENCY: TWI frequency. Accuracy depends on the HFCLK source selected. */
  #define TWIM_FREQUENCY_ResetValue (0x04000000UL)

/* FREQUENCY @Bits 0..31 : TWI master clock frequency */
  #define TWIM_FREQUENCY_FREQUENCY_Pos (0UL)
  #define TWIM_FREQUENCY_FREQUENCY_Msk (0xFFFFFFFFUL << TWIM_FREQUENCY_FREQUENCY_Pos)
  #define TWIM_FREQUENCY_FREQUENCY_Min (0x1980000UL)
  #define TWIM_FREQUENCY_FREQUENCY_Max (0x6400000UL)
  #define TWIM_FREQUENCY_FREQUENCY_K100 (0x01980000UL)
  #define TWIM_FREQUENCY_FREQUENCY_K250 (0x04000000UL)
  #define TWIM_FREQUENCY_FREQUENCY_K400 (0x06400000UL)


/* TWIM_ADDRESS: Address used in the TWI transfer */
  #define TWIM_ADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..6 : Address used in the TWI transfer */
  #define TWIM_ADDRESS_ADDRESS_Pos (0UL)
  #define TWIM_ADDRESS_ADDRESS_Msk (0x7FUL << TWIM_ADDRESS_ADDRESS_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TWIS                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct TWIS_TASKS_DMA_RX ================================================= */
/**
  * @brief RX [TWIS_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000000) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000010) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_TWIS_TASKS_DMA_RX_Type;

/* TWIS_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL)
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL)
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL)
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL)


/* TWIS_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL)
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL)
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL)
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL)



/* ================================================== Struct TWIS_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [TWIS_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __OM  NRF_TWIS_TASKS_DMA_RX_Type RX;
} NRF_TWIS_TASKS_DMA_Type;


/* ============================================== Struct TWIS_SUBSCRIBE_DMA_RX =============================================== */
/**
  * @brief RX [TWIS_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  ENABLEMATCH[4];
  __IOM uint32_t  DISABLEMATCH[4];
} NRF_TWIS_SUBSCRIBE_DMA_RX_Type;

/* TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL)


/* TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL)



/* ================================================ Struct TWIS_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [TWIS_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IOM NRF_TWIS_SUBSCRIBE_DMA_RX_Type RX;
} NRF_TWIS_SUBSCRIBE_DMA_Type;


/* ================================================ Struct TWIS_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [TWIS_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_TWIS_EVENTS_DMA_RX_Type;

/* TWIS_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define TWIS_EVENTS_DMA_RX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define TWIS_EVENTS_DMA_RX_END_END_Pos (0UL)
  #define TWIS_EVENTS_DMA_RX_END_END_Msk (0x1UL << TWIS_EVENTS_DMA_RX_END_END_Pos)
  #define TWIS_EVENTS_DMA_RX_END_END_Min (0x0UL)
  #define TWIS_EVENTS_DMA_RX_END_END_Max (0x1UL)
  #define TWIS_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_RX_END_END_Generated (0x1UL)


/* TWIS_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define TWIS_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define TWIS_EVENTS_DMA_RX_READY_READY_Pos (0UL)
  #define TWIS_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << TWIS_EVENTS_DMA_RX_READY_READY_Pos)
  #define TWIS_EVENTS_DMA_RX_READY_READY_Min (0x0UL)
  #define TWIS_EVENTS_DMA_RX_READY_READY_Max (0x1UL)
  #define TWIS_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_RX_READY_READY_Generated (0x1UL)


/* TWIS_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define TWIS_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL)
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL)
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL)
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL)


/* TWIS_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define TWIS_EVENTS_DMA_RX_MATCH_MaxCount (4UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_MinIndex (0UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << TWIS_EVENTS_DMA_RX_MATCH_MATCH_Pos)
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL)



/* ================================================ Struct TWIS_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [TWIS_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
} NRF_TWIS_EVENTS_DMA_TX_Type;

/* TWIS_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define TWIS_EVENTS_DMA_TX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define TWIS_EVENTS_DMA_TX_END_END_Pos (0UL)
  #define TWIS_EVENTS_DMA_TX_END_END_Msk (0x1UL << TWIS_EVENTS_DMA_TX_END_END_Pos)
  #define TWIS_EVENTS_DMA_TX_END_END_Min (0x0UL)
  #define TWIS_EVENTS_DMA_TX_END_END_Max (0x1UL)
  #define TWIS_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_TX_END_END_Generated (0x1UL)


/* TWIS_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define TWIS_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define TWIS_EVENTS_DMA_TX_READY_READY_Pos (0UL)
  #define TWIS_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << TWIS_EVENTS_DMA_TX_READY_READY_Pos)
  #define TWIS_EVENTS_DMA_TX_READY_READY_Min (0x0UL)
  #define TWIS_EVENTS_DMA_TX_READY_READY_Max (0x1UL)
  #define TWIS_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_TX_READY_READY_Generated (0x1UL)


/* TWIS_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define TWIS_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL)
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL)
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL)
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL)



/* ================================================= Struct TWIS_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [TWIS_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_TWIS_EVENTS_DMA_RX_Type RX;
  __IOM NRF_TWIS_EVENTS_DMA_TX_Type TX;
} NRF_TWIS_EVENTS_DMA_Type;


/* =============================================== Struct TWIS_PUBLISH_DMA_RX ================================================ */
/**
  * @brief RX [TWIS_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_TWIS_PUBLISH_DMA_RX_Type;

/* TWIS_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define TWIS_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define TWIS_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_RX_END_CHIDX_Pos)
  #define TWIS_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_RX_END_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_RX_END_EN_Pos)
  #define TWIS_PUBLISH_DMA_RX_END_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_END_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define TWIS_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define TWIS_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_RX_READY_CHIDX_Pos)
  #define TWIS_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_RX_READY_EN_Pos)
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Pos)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define TWIS_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Pos)
  #define TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_RX_MATCH_EN_Pos)
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL)



/* =============================================== Struct TWIS_PUBLISH_DMA_TX ================================================ */
/**
  * @brief TX [TWIS_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
} NRF_TWIS_PUBLISH_DMA_TX_Type;

/* TWIS_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define TWIS_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define TWIS_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_TX_END_CHIDX_Pos)
  #define TWIS_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_TX_END_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_TX_END_EN_Pos)
  #define TWIS_PUBLISH_DMA_TX_END_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_TX_END_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define TWIS_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define TWIS_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_TX_READY_CHIDX_Pos)
  #define TWIS_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_TX_READY_EN_Pos)
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Pos)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL)



/* ================================================= Struct TWIS_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [TWIS_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_TWIS_PUBLISH_DMA_RX_Type RX;
  __IOM NRF_TWIS_PUBLISH_DMA_TX_Type TX;
} NRF_TWIS_PUBLISH_DMA_Type;


/* ==================================================== Struct TWIS_PSEL ===================================================== */
/**
  * @brief PSEL [TWIS_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SCL;
  __IOM uint32_t  SDA;
} NRF_TWIS_PSEL_Type;

/* TWIS_PSEL_SCL: Pin select for SCL signal */
  #define TWIS_PSEL_SCL_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define TWIS_PSEL_SCL_PIN_Pos (0UL)
  #define TWIS_PSEL_SCL_PIN_Msk (0x1FUL << TWIS_PSEL_SCL_PIN_Pos)
  #define TWIS_PSEL_SCL_PIN_Min (0x00UL)
  #define TWIS_PSEL_SCL_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define TWIS_PSEL_SCL_PORT_Pos (5UL)
  #define TWIS_PSEL_SCL_PORT_Msk (0x7UL << TWIS_PSEL_SCL_PORT_Pos)
  #define TWIS_PSEL_SCL_PORT_Min (0x0UL)
  #define TWIS_PSEL_SCL_PORT_Max (0x1UL)

/* CONNECT @Bit 31 : Connection */
  #define TWIS_PSEL_SCL_CONNECT_Pos (31UL)
  #define TWIS_PSEL_SCL_CONNECT_Msk (0x1UL << TWIS_PSEL_SCL_CONNECT_Pos)
  #define TWIS_PSEL_SCL_CONNECT_Min (0x0UL)
  #define TWIS_PSEL_SCL_CONNECT_Max (0x1UL)
  #define TWIS_PSEL_SCL_CONNECT_Disconnected (0x1UL)
  #define TWIS_PSEL_SCL_CONNECT_Connected (0x0UL)


/* TWIS_PSEL_SDA: Pin select for SDA signal */
  #define TWIS_PSEL_SDA_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define TWIS_PSEL_SDA_PIN_Pos (0UL)
  #define TWIS_PSEL_SDA_PIN_Msk (0x1FUL << TWIS_PSEL_SDA_PIN_Pos)
  #define TWIS_PSEL_SDA_PIN_Min (0x00UL)
  #define TWIS_PSEL_SDA_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define TWIS_PSEL_SDA_PORT_Pos (5UL)
  #define TWIS_PSEL_SDA_PORT_Msk (0x7UL << TWIS_PSEL_SDA_PORT_Pos)
  #define TWIS_PSEL_SDA_PORT_Min (0x0UL)
  #define TWIS_PSEL_SDA_PORT_Max (0x1UL)

/* CONNECT @Bit 31 : Connection */
  #define TWIS_PSEL_SDA_CONNECT_Pos (31UL)
  #define TWIS_PSEL_SDA_CONNECT_Msk (0x1UL << TWIS_PSEL_SDA_CONNECT_Pos)
  #define TWIS_PSEL_SDA_CONNECT_Min (0x0UL)
  #define TWIS_PSEL_SDA_CONNECT_Max (0x1UL)
  #define TWIS_PSEL_SDA_CONNECT_Disconnected (0x1UL)
  #define TWIS_PSEL_SDA_CONNECT_Connected (0x0UL)



/* ================================================ Struct TWIS_DMA_RX_MATCH ================================================= */
/**
  * @brief MATCH [TWIS_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_TWIS_DMA_RX_MATCH_Type;

/* TWIS_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define TWIS_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL)

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Pos)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL)

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Pos)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL)

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Pos)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL)

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Pos)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL)

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or sticky */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL)

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or sticky */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL)

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or sticky */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL)

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or sticky */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL)
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL)


/* TWIS_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define TWIS_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL)
  #define TWIS_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL)
  #define TWIS_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL)
  #define TWIS_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data to look for */
  #define TWIS_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL)
  #define TWIS_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFFFFFFFUL << TWIS_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/



/* =================================================== Struct TWIS_DMA_RX ==================================================== */
/**
  * @brief RX [TWIS_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IOM uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_TWIS_DMA_RX_MATCH_Type MATCH;            /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_TWIS_DMA_RX_Type;

/* TWIS_DMA_RX_PTR: RAM buffer start address */
  #define TWIS_DMA_RX_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TWIS_DMA_RX_PTR_PTR_Pos (0UL)
  #define TWIS_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << TWIS_DMA_RX_PTR_PTR_Pos)


/* TWIS_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define TWIS_DMA_RX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TWIS_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)
  #define TWIS_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIS_DMA_RX_MAXCNT_MAXCNT_Pos)
  #define TWIS_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define TWIS_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* TWIS_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define TWIS_DMA_RX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TWIS_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)
  #define TWIS_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIS_DMA_RX_AMOUNT_AMOUNT_Pos)
  #define TWIS_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define TWIS_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* TWIS_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* TWIS_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TWIS_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TWIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define TWIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TWIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct TWIS_DMA_TX ==================================================== */
/**
  * @brief TX [TWIS_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IOM uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_TWIS_DMA_TX_Type;

/* TWIS_DMA_TX_PTR: RAM buffer start address */
  #define TWIS_DMA_TX_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TWIS_DMA_TX_PTR_PTR_Pos (0UL)
  #define TWIS_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << TWIS_DMA_TX_PTR_PTR_Pos)


/* TWIS_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define TWIS_DMA_TX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TWIS_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)
  #define TWIS_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIS_DMA_TX_MAXCNT_MAXCNT_Pos)
  #define TWIS_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define TWIS_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* TWIS_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define TWIS_DMA_TX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TWIS_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)
  #define TWIS_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIS_DMA_TX_AMOUNT_AMOUNT_Pos)
  #define TWIS_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define TWIS_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* TWIS_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* TWIS_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TWIS_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TWIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define TWIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TWIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct TWIS_DMA ===================================================== */
/**
  * @brief DMA [TWIS_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_TWIS_DMA_RX_Type RX;
  __IOM NRF_TWIS_DMA_TX_Type TX;
} NRF_TWIS_DMA_Type;

/* ======================================================= Struct TWIS ======================================================= */
/**
  * @brief I2C compatible Two-Wire Slave Interface with EasyDMA
  */
  typedef struct {
    __IM uint32_t RESERVED;
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED1;
    __OM uint32_t TASKS_SUSPEND;
    __OM uint32_t TASKS_RESUME;
    __IM uint32_t RESERVED2[3];
    __OM uint32_t TASKS_PREPARERX;
    __OM uint32_t TASKS_PREPARETX;
    __IM uint32_t RESERVED3[2];
    __OM NRF_TWIS_TASKS_DMA_Type TASKS_DMA;
    __IM uint32_t RESERVED4[13];
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED5;
    __IOM uint32_t SUBSCRIBE_SUSPEND;
    __IOM uint32_t SUBSCRIBE_RESUME;
    __IM uint32_t RESERVED6[3];
    __IOM uint32_t SUBSCRIBE_PREPARERX;
    __IOM uint32_t SUBSCRIBE_PREPARETX;
    __IM uint32_t RESERVED7[2];
    __IOM NRF_TWIS_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA;
    __IM uint32_t RESERVED8[13];
    __IOM uint32_t EVENTS_STOPPED;
    __IM uint32_t RESERVED9[3];
    __IOM uint32_t EVENTS_ERROR;
    __IM uint32_t RESERVED10[9];
    __IOM uint32_t EVENTS_WRITE;
    __IOM uint32_t EVENTS_READ;
    __IM uint32_t RESERVED11[2];
    __IOM NRF_TWIS_EVENTS_DMA_Type EVENTS_DMA;
    __IM uint32_t RESERVED12[4];
    __IOM uint32_t PUBLISH_STOPPED;
    __IM uint32_t RESERVED13[3];
    __IOM uint32_t PUBLISH_ERROR;
    __IM uint32_t RESERVED14[9];
    __IOM uint32_t PUBLISH_WRITE;
    __IOM uint32_t PUBLISH_READ;
    __IM uint32_t RESERVED15[2];
    __IOM NRF_TWIS_PUBLISH_DMA_Type PUBLISH_DMA;
    __IM uint32_t RESERVED16[3];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED17[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED18[113];
    __IOM uint32_t ERRORSRC;
    __IM uint32_t MATCH;
    __IM uint32_t RESERVED19[10];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED20[33];
    __IOM uint32_t ADDRESS[2];
    __IM uint32_t RESERVED21;
    __IOM uint32_t CONFIG;
    __IM uint32_t RESERVED22[10];
    __IOM uint32_t ORC;                              /*!< (@ 0x000005C0) Over-read character. Character sent out in case of an
                                                                         over-read of the transmit buffer.*/
    __IM uint32_t RESERVED23[15];
    __IOM NRF_TWIS_PSEL_Type PSEL;
    __IM uint32_t RESERVED24[62];
    __IOM NRF_TWIS_DMA_Type DMA;
  } NRF_TWIS_Type;

/* TWIS_TASKS_STOP: Stop TWI transaction */
  #define TWIS_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop TWI transaction */
  #define TWIS_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define TWIS_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TWIS_TASKS_STOP_TASKS_STOP_Pos)
  #define TWIS_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define TWIS_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define TWIS_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* TWIS_TASKS_SUSPEND: Suspend TWI transaction */
  #define TWIS_TASKS_SUSPEND_ResetValue (0x00000000UL)

/* TASKS_SUSPEND @Bit 0 : Suspend TWI transaction */
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL)
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND
                                                                            field.*/
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Min (0x1UL)
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Max (0x1UL)
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (0x1UL)


/* TWIS_TASKS_RESUME: Resume TWI transaction */
  #define TWIS_TASKS_RESUME_ResetValue (0x00000000UL)

/* TASKS_RESUME @Bit 0 : Resume TWI transaction */
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Pos (0UL)
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << TWIS_TASKS_RESUME_TASKS_RESUME_Pos)
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Min (0x1UL)
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Max (0x1UL)
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Trigger (0x1UL)


/* TWIS_TASKS_PREPARERX: Prepare the TWI slave to respond to a write command */
  #define TWIS_TASKS_PREPARERX_ResetValue (0x00000000UL)

/* TASKS_PREPARERX @Bit 0 : Prepare the TWI slave to respond to a write command */
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Pos (0UL)
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Msk (0x1UL << TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Pos) /*!< Bit mask of
                                                                            TASKS_PREPARERX field.*/
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Min (0x1UL)
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Max (0x1UL)
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Trigger (0x1UL)


/* TWIS_TASKS_PREPARETX: Prepare the TWI slave to respond to a read command */
  #define TWIS_TASKS_PREPARETX_ResetValue (0x00000000UL)

/* TASKS_PREPARETX @Bit 0 : Prepare the TWI slave to respond to a read command */
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Pos (0UL)
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Msk (0x1UL << TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Pos) /*!< Bit mask of
                                                                            TASKS_PREPARETX field.*/
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Min (0x1UL)
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Max (0x1UL)
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Trigger (0x1UL)


/* TWIS_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define TWIS_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TWIS_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_STOP_CHIDX_Pos)
  #define TWIS_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_STOP_EN_Msk (0x1UL << TWIS_SUBSCRIBE_STOP_EN_Pos)
  #define TWIS_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* TWIS_SUBSCRIBE_SUSPEND: Subscribe configuration for task SUSPEND */
  #define TWIS_SUBSCRIBE_SUSPEND_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task SUSPEND will subscribe to */
  #define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_SUSPEND_CHIDX_Pos)
  #define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << TWIS_SUBSCRIBE_SUSPEND_EN_Pos)
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Enabled (0x1UL)


/* TWIS_SUBSCRIBE_RESUME: Subscribe configuration for task RESUME */
  #define TWIS_SUBSCRIBE_RESUME_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task RESUME will subscribe to */
  #define TWIS_SUBSCRIBE_RESUME_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_RESUME_CHIDX_Pos)
  #define TWIS_SUBSCRIBE_RESUME_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_RESUME_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_RESUME_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_RESUME_EN_Msk (0x1UL << TWIS_SUBSCRIBE_RESUME_EN_Pos)
  #define TWIS_SUBSCRIBE_RESUME_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_RESUME_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_RESUME_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_RESUME_EN_Enabled (0x1UL)


/* TWIS_SUBSCRIBE_PREPARERX: Subscribe configuration for task PREPARERX */
  #define TWIS_SUBSCRIBE_PREPARERX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task PREPARERX will subscribe to */
  #define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_PREPARERX_CHIDX_Pos)
  #define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Msk (0x1UL << TWIS_SUBSCRIBE_PREPARERX_EN_Pos)
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Enabled (0x1UL)


/* TWIS_SUBSCRIBE_PREPARETX: Subscribe configuration for task PREPARETX */
  #define TWIS_SUBSCRIBE_PREPARETX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task PREPARETX will subscribe to */
  #define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Pos (0UL)
  #define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_PREPARETX_CHIDX_Pos)
  #define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Min (0x00UL)
  #define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Pos (31UL)
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Msk (0x1UL << TWIS_SUBSCRIBE_PREPARETX_EN_Pos)
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Min (0x0UL)
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Max (0x1UL)
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Disabled (0x0UL)
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Enabled (0x1UL)


/* TWIS_EVENTS_STOPPED: TWI stopped */
  #define TWIS_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : TWI stopped */
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* TWIS_EVENTS_ERROR: TWI error */
  #define TWIS_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : TWI error */
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << TWIS_EVENTS_ERROR_EVENTS_ERROR_Pos)
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* TWIS_EVENTS_WRITE: Write command received */
  #define TWIS_EVENTS_WRITE_ResetValue (0x00000000UL)

/* EVENTS_WRITE @Bit 0 : Write command received */
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Pos (0UL)
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Msk (0x1UL << TWIS_EVENTS_WRITE_EVENTS_WRITE_Pos)
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Min (0x0UL)
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Max (0x1UL)
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_NotGenerated (0x0UL)
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Generated (0x1UL)


/* TWIS_EVENTS_READ: Read command received */
  #define TWIS_EVENTS_READ_ResetValue (0x00000000UL)

/* EVENTS_READ @Bit 0 : Read command received */
  #define TWIS_EVENTS_READ_EVENTS_READ_Pos (0UL)
  #define TWIS_EVENTS_READ_EVENTS_READ_Msk (0x1UL << TWIS_EVENTS_READ_EVENTS_READ_Pos)
  #define TWIS_EVENTS_READ_EVENTS_READ_Min (0x0UL)
  #define TWIS_EVENTS_READ_EVENTS_READ_Max (0x1UL)
  #define TWIS_EVENTS_READ_EVENTS_READ_NotGenerated (0x0UL)
  #define TWIS_EVENTS_READ_EVENTS_READ_Generated (0x1UL)


/* TWIS_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define TWIS_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define TWIS_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_STOPPED_CHIDX_Pos)
  #define TWIS_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_STOPPED_EN_Pos (31UL)
  #define TWIS_PUBLISH_STOPPED_EN_Msk (0x1UL << TWIS_PUBLISH_STOPPED_EN_Pos)
  #define TWIS_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define TWIS_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define TWIS_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define TWIS_PUBLISH_ERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define TWIS_PUBLISH_ERROR_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_ERROR_CHIDX_Pos)
  #define TWIS_PUBLISH_ERROR_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_ERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_ERROR_EN_Pos (31UL)
  #define TWIS_PUBLISH_ERROR_EN_Msk (0x1UL << TWIS_PUBLISH_ERROR_EN_Pos)
  #define TWIS_PUBLISH_ERROR_EN_Min (0x0UL)
  #define TWIS_PUBLISH_ERROR_EN_Max (0x1UL)
  #define TWIS_PUBLISH_ERROR_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_ERROR_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_WRITE: Publish configuration for event WRITE */
  #define TWIS_PUBLISH_WRITE_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event WRITE will publish to */
  #define TWIS_PUBLISH_WRITE_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_WRITE_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_WRITE_CHIDX_Pos)
  #define TWIS_PUBLISH_WRITE_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_WRITE_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_WRITE_EN_Pos (31UL)
  #define TWIS_PUBLISH_WRITE_EN_Msk (0x1UL << TWIS_PUBLISH_WRITE_EN_Pos)
  #define TWIS_PUBLISH_WRITE_EN_Min (0x0UL)
  #define TWIS_PUBLISH_WRITE_EN_Max (0x1UL)
  #define TWIS_PUBLISH_WRITE_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_WRITE_EN_Enabled (0x1UL)


/* TWIS_PUBLISH_READ: Publish configuration for event READ */
  #define TWIS_PUBLISH_READ_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READ will publish to */
  #define TWIS_PUBLISH_READ_CHIDX_Pos (0UL)
  #define TWIS_PUBLISH_READ_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_READ_CHIDX_Pos)
  #define TWIS_PUBLISH_READ_CHIDX_Min (0x00UL)
  #define TWIS_PUBLISH_READ_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_READ_EN_Pos (31UL)
  #define TWIS_PUBLISH_READ_EN_Msk (0x1UL << TWIS_PUBLISH_READ_EN_Pos)
  #define TWIS_PUBLISH_READ_EN_Min (0x0UL)
  #define TWIS_PUBLISH_READ_EN_Max (0x1UL)
  #define TWIS_PUBLISH_READ_EN_Disabled (0x0UL)
  #define TWIS_PUBLISH_READ_EN_Enabled (0x1UL)


/* TWIS_SHORTS: Shortcuts between local events and tasks */
  #define TWIS_SHORTS_ResetValue (0x00000000UL)

/* WRITE_SUSPEND @Bit 13 : Shortcut between event WRITE and task SUSPEND */
  #define TWIS_SHORTS_WRITE_SUSPEND_Pos (13UL)
  #define TWIS_SHORTS_WRITE_SUSPEND_Msk (0x1UL << TWIS_SHORTS_WRITE_SUSPEND_Pos)
  #define TWIS_SHORTS_WRITE_SUSPEND_Min (0x0UL)
  #define TWIS_SHORTS_WRITE_SUSPEND_Max (0x1UL)
  #define TWIS_SHORTS_WRITE_SUSPEND_Disabled (0x0UL)
  #define TWIS_SHORTS_WRITE_SUSPEND_Enabled (0x1UL)

/* READ_SUSPEND @Bit 14 : Shortcut between event READ and task SUSPEND */
  #define TWIS_SHORTS_READ_SUSPEND_Pos (14UL)
  #define TWIS_SHORTS_READ_SUSPEND_Msk (0x1UL << TWIS_SHORTS_READ_SUSPEND_Pos)
  #define TWIS_SHORTS_READ_SUSPEND_Min (0x0UL)
  #define TWIS_SHORTS_READ_SUSPEND_Max (0x1UL)
  #define TWIS_SHORTS_READ_SUSPEND_Disabled (0x0UL)
  #define TWIS_SHORTS_READ_SUSPEND_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL)
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL)
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL)
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL)
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL)
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL)
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL)
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL)
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL)
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL)


/* TWIS_INTEN: Enable or disable interrupt */
  #define TWIS_INTEN_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Enable or disable interrupt for event STOPPED */
  #define TWIS_INTEN_STOPPED_Pos (1UL)
  #define TWIS_INTEN_STOPPED_Msk (0x1UL << TWIS_INTEN_STOPPED_Pos)
  #define TWIS_INTEN_STOPPED_Min (0x0UL)
  #define TWIS_INTEN_STOPPED_Max (0x1UL)
  #define TWIS_INTEN_STOPPED_Disabled (0x0UL)
  #define TWIS_INTEN_STOPPED_Enabled (0x1UL)

/* ERROR @Bit 5 : Enable or disable interrupt for event ERROR */
  #define TWIS_INTEN_ERROR_Pos (5UL)
  #define TWIS_INTEN_ERROR_Msk (0x1UL << TWIS_INTEN_ERROR_Pos)
  #define TWIS_INTEN_ERROR_Min (0x0UL)
  #define TWIS_INTEN_ERROR_Max (0x1UL)
  #define TWIS_INTEN_ERROR_Disabled (0x0UL)
  #define TWIS_INTEN_ERROR_Enabled (0x1UL)

/* WRITE @Bit 15 : Enable or disable interrupt for event WRITE */
  #define TWIS_INTEN_WRITE_Pos (15UL)
  #define TWIS_INTEN_WRITE_Msk (0x1UL << TWIS_INTEN_WRITE_Pos)
  #define TWIS_INTEN_WRITE_Min (0x0UL)
  #define TWIS_INTEN_WRITE_Max (0x1UL)
  #define TWIS_INTEN_WRITE_Disabled (0x0UL)
  #define TWIS_INTEN_WRITE_Enabled (0x1UL)

/* READ @Bit 16 : Enable or disable interrupt for event READ */
  #define TWIS_INTEN_READ_Pos (16UL)
  #define TWIS_INTEN_READ_Msk (0x1UL << TWIS_INTEN_READ_Pos)
  #define TWIS_INTEN_READ_Min (0x0UL)
  #define TWIS_INTEN_READ_Max (0x1UL)
  #define TWIS_INTEN_READ_Disabled (0x0UL)
  #define TWIS_INTEN_READ_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Enable or disable interrupt for event DMARXEND */
  #define TWIS_INTEN_DMARXEND_Pos (19UL)
  #define TWIS_INTEN_DMARXEND_Msk (0x1UL << TWIS_INTEN_DMARXEND_Pos)
  #define TWIS_INTEN_DMARXEND_Min (0x0UL)
  #define TWIS_INTEN_DMARXEND_Max (0x1UL)
  #define TWIS_INTEN_DMARXEND_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Enable or disable interrupt for event DMARXREADY */
  #define TWIS_INTEN_DMARXREADY_Pos (20UL)
  #define TWIS_INTEN_DMARXREADY_Msk (0x1UL << TWIS_INTEN_DMARXREADY_Pos)
  #define TWIS_INTEN_DMARXREADY_Min (0x0UL)
  #define TWIS_INTEN_DMARXREADY_Max (0x1UL)
  #define TWIS_INTEN_DMARXREADY_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Enable or disable interrupt for event DMARXBUSERROR */
  #define TWIS_INTEN_DMARXBUSERROR_Pos (21UL)
  #define TWIS_INTEN_DMARXBUSERROR_Msk (0x1UL << TWIS_INTEN_DMARXBUSERROR_Pos)
  #define TWIS_INTEN_DMARXBUSERROR_Min (0x0UL)
  #define TWIS_INTEN_DMARXBUSERROR_Max (0x1UL)
  #define TWIS_INTEN_DMARXBUSERROR_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Enable or disable interrupt for event DMARXMATCH[0] */
  #define TWIS_INTEN_DMARXMATCH0_Pos (22UL)
  #define TWIS_INTEN_DMARXMATCH0_Msk (0x1UL << TWIS_INTEN_DMARXMATCH0_Pos)
  #define TWIS_INTEN_DMARXMATCH0_Min (0x0UL)
  #define TWIS_INTEN_DMARXMATCH0_Max (0x1UL)
  #define TWIS_INTEN_DMARXMATCH0_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Enable or disable interrupt for event DMARXMATCH[1] */
  #define TWIS_INTEN_DMARXMATCH1_Pos (23UL)
  #define TWIS_INTEN_DMARXMATCH1_Msk (0x1UL << TWIS_INTEN_DMARXMATCH1_Pos)
  #define TWIS_INTEN_DMARXMATCH1_Min (0x0UL)
  #define TWIS_INTEN_DMARXMATCH1_Max (0x1UL)
  #define TWIS_INTEN_DMARXMATCH1_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Enable or disable interrupt for event DMARXMATCH[2] */
  #define TWIS_INTEN_DMARXMATCH2_Pos (24UL)
  #define TWIS_INTEN_DMARXMATCH2_Msk (0x1UL << TWIS_INTEN_DMARXMATCH2_Pos)
  #define TWIS_INTEN_DMARXMATCH2_Min (0x0UL)
  #define TWIS_INTEN_DMARXMATCH2_Max (0x1UL)
  #define TWIS_INTEN_DMARXMATCH2_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Enable or disable interrupt for event DMARXMATCH[3] */
  #define TWIS_INTEN_DMARXMATCH3_Pos (25UL)
  #define TWIS_INTEN_DMARXMATCH3_Msk (0x1UL << TWIS_INTEN_DMARXMATCH3_Pos)
  #define TWIS_INTEN_DMARXMATCH3_Min (0x0UL)
  #define TWIS_INTEN_DMARXMATCH3_Max (0x1UL)
  #define TWIS_INTEN_DMARXMATCH3_Disabled (0x0UL)
  #define TWIS_INTEN_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Enable or disable interrupt for event DMATXEND */
  #define TWIS_INTEN_DMATXEND_Pos (26UL)
  #define TWIS_INTEN_DMATXEND_Msk (0x1UL << TWIS_INTEN_DMATXEND_Pos)
  #define TWIS_INTEN_DMATXEND_Min (0x0UL)
  #define TWIS_INTEN_DMATXEND_Max (0x1UL)
  #define TWIS_INTEN_DMATXEND_Disabled (0x0UL)
  #define TWIS_INTEN_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Enable or disable interrupt for event DMATXREADY */
  #define TWIS_INTEN_DMATXREADY_Pos (27UL)
  #define TWIS_INTEN_DMATXREADY_Msk (0x1UL << TWIS_INTEN_DMATXREADY_Pos)
  #define TWIS_INTEN_DMATXREADY_Min (0x0UL)
  #define TWIS_INTEN_DMATXREADY_Max (0x1UL)
  #define TWIS_INTEN_DMATXREADY_Disabled (0x0UL)
  #define TWIS_INTEN_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Enable or disable interrupt for event DMATXBUSERROR */
  #define TWIS_INTEN_DMATXBUSERROR_Pos (28UL)
  #define TWIS_INTEN_DMATXBUSERROR_Msk (0x1UL << TWIS_INTEN_DMATXBUSERROR_Pos)
  #define TWIS_INTEN_DMATXBUSERROR_Min (0x0UL)
  #define TWIS_INTEN_DMATXBUSERROR_Max (0x1UL)
  #define TWIS_INTEN_DMATXBUSERROR_Disabled (0x0UL)
  #define TWIS_INTEN_DMATXBUSERROR_Enabled (0x1UL)


/* TWIS_INTENSET: Enable interrupt */
  #define TWIS_INTENSET_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define TWIS_INTENSET_STOPPED_Pos (1UL)
  #define TWIS_INTENSET_STOPPED_Msk (0x1UL << TWIS_INTENSET_STOPPED_Pos)
  #define TWIS_INTENSET_STOPPED_Min (0x0UL)
  #define TWIS_INTENSET_STOPPED_Max (0x1UL)
  #define TWIS_INTENSET_STOPPED_Set (0x1UL)
  #define TWIS_INTENSET_STOPPED_Disabled (0x0UL)
  #define TWIS_INTENSET_STOPPED_Enabled (0x1UL)

/* ERROR @Bit 5 : Write '1' to enable interrupt for event ERROR */
  #define TWIS_INTENSET_ERROR_Pos (5UL)
  #define TWIS_INTENSET_ERROR_Msk (0x1UL << TWIS_INTENSET_ERROR_Pos)
  #define TWIS_INTENSET_ERROR_Min (0x0UL)
  #define TWIS_INTENSET_ERROR_Max (0x1UL)
  #define TWIS_INTENSET_ERROR_Set (0x1UL)
  #define TWIS_INTENSET_ERROR_Disabled (0x0UL)
  #define TWIS_INTENSET_ERROR_Enabled (0x1UL)

/* WRITE @Bit 15 : Write '1' to enable interrupt for event WRITE */
  #define TWIS_INTENSET_WRITE_Pos (15UL)
  #define TWIS_INTENSET_WRITE_Msk (0x1UL << TWIS_INTENSET_WRITE_Pos)
  #define TWIS_INTENSET_WRITE_Min (0x0UL)
  #define TWIS_INTENSET_WRITE_Max (0x1UL)
  #define TWIS_INTENSET_WRITE_Set (0x1UL)
  #define TWIS_INTENSET_WRITE_Disabled (0x0UL)
  #define TWIS_INTENSET_WRITE_Enabled (0x1UL)

/* READ @Bit 16 : Write '1' to enable interrupt for event READ */
  #define TWIS_INTENSET_READ_Pos (16UL)
  #define TWIS_INTENSET_READ_Msk (0x1UL << TWIS_INTENSET_READ_Pos)
  #define TWIS_INTENSET_READ_Min (0x0UL)
  #define TWIS_INTENSET_READ_Max (0x1UL)
  #define TWIS_INTENSET_READ_Set (0x1UL)
  #define TWIS_INTENSET_READ_Disabled (0x0UL)
  #define TWIS_INTENSET_READ_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define TWIS_INTENSET_DMARXEND_Pos (19UL)
  #define TWIS_INTENSET_DMARXEND_Msk (0x1UL << TWIS_INTENSET_DMARXEND_Pos)
  #define TWIS_INTENSET_DMARXEND_Min (0x0UL)
  #define TWIS_INTENSET_DMARXEND_Max (0x1UL)
  #define TWIS_INTENSET_DMARXEND_Set (0x1UL)
  #define TWIS_INTENSET_DMARXEND_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define TWIS_INTENSET_DMARXREADY_Pos (20UL)
  #define TWIS_INTENSET_DMARXREADY_Msk (0x1UL << TWIS_INTENSET_DMARXREADY_Pos)
  #define TWIS_INTENSET_DMARXREADY_Min (0x0UL)
  #define TWIS_INTENSET_DMARXREADY_Max (0x1UL)
  #define TWIS_INTENSET_DMARXREADY_Set (0x1UL)
  #define TWIS_INTENSET_DMARXREADY_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define TWIS_INTENSET_DMARXBUSERROR_Pos (21UL)
  #define TWIS_INTENSET_DMARXBUSERROR_Msk (0x1UL << TWIS_INTENSET_DMARXBUSERROR_Pos)
  #define TWIS_INTENSET_DMARXBUSERROR_Min (0x0UL)
  #define TWIS_INTENSET_DMARXBUSERROR_Max (0x1UL)
  #define TWIS_INTENSET_DMARXBUSERROR_Set (0x1UL)
  #define TWIS_INTENSET_DMARXBUSERROR_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define TWIS_INTENSET_DMARXMATCH0_Pos (22UL)
  #define TWIS_INTENSET_DMARXMATCH0_Msk (0x1UL << TWIS_INTENSET_DMARXMATCH0_Pos)
  #define TWIS_INTENSET_DMARXMATCH0_Min (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH0_Max (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH0_Set (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH0_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define TWIS_INTENSET_DMARXMATCH1_Pos (23UL)
  #define TWIS_INTENSET_DMARXMATCH1_Msk (0x1UL << TWIS_INTENSET_DMARXMATCH1_Pos)
  #define TWIS_INTENSET_DMARXMATCH1_Min (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH1_Max (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH1_Set (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH1_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define TWIS_INTENSET_DMARXMATCH2_Pos (24UL)
  #define TWIS_INTENSET_DMARXMATCH2_Msk (0x1UL << TWIS_INTENSET_DMARXMATCH2_Pos)
  #define TWIS_INTENSET_DMARXMATCH2_Min (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH2_Max (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH2_Set (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH2_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define TWIS_INTENSET_DMARXMATCH3_Pos (25UL)
  #define TWIS_INTENSET_DMARXMATCH3_Msk (0x1UL << TWIS_INTENSET_DMARXMATCH3_Pos)
  #define TWIS_INTENSET_DMARXMATCH3_Min (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH3_Max (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH3_Set (0x1UL)
  #define TWIS_INTENSET_DMARXMATCH3_Disabled (0x0UL)
  #define TWIS_INTENSET_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define TWIS_INTENSET_DMATXEND_Pos (26UL)
  #define TWIS_INTENSET_DMATXEND_Msk (0x1UL << TWIS_INTENSET_DMATXEND_Pos)
  #define TWIS_INTENSET_DMATXEND_Min (0x0UL)
  #define TWIS_INTENSET_DMATXEND_Max (0x1UL)
  #define TWIS_INTENSET_DMATXEND_Set (0x1UL)
  #define TWIS_INTENSET_DMATXEND_Disabled (0x0UL)
  #define TWIS_INTENSET_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define TWIS_INTENSET_DMATXREADY_Pos (27UL)
  #define TWIS_INTENSET_DMATXREADY_Msk (0x1UL << TWIS_INTENSET_DMATXREADY_Pos)
  #define TWIS_INTENSET_DMATXREADY_Min (0x0UL)
  #define TWIS_INTENSET_DMATXREADY_Max (0x1UL)
  #define TWIS_INTENSET_DMATXREADY_Set (0x1UL)
  #define TWIS_INTENSET_DMATXREADY_Disabled (0x0UL)
  #define TWIS_INTENSET_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define TWIS_INTENSET_DMATXBUSERROR_Pos (28UL)
  #define TWIS_INTENSET_DMATXBUSERROR_Msk (0x1UL << TWIS_INTENSET_DMATXBUSERROR_Pos)
  #define TWIS_INTENSET_DMATXBUSERROR_Min (0x0UL)
  #define TWIS_INTENSET_DMATXBUSERROR_Max (0x1UL)
  #define TWIS_INTENSET_DMATXBUSERROR_Set (0x1UL)
  #define TWIS_INTENSET_DMATXBUSERROR_Disabled (0x0UL)
  #define TWIS_INTENSET_DMATXBUSERROR_Enabled (0x1UL)


/* TWIS_INTENCLR: Disable interrupt */
  #define TWIS_INTENCLR_ResetValue (0x00000000UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define TWIS_INTENCLR_STOPPED_Pos (1UL)
  #define TWIS_INTENCLR_STOPPED_Msk (0x1UL << TWIS_INTENCLR_STOPPED_Pos)
  #define TWIS_INTENCLR_STOPPED_Min (0x0UL)
  #define TWIS_INTENCLR_STOPPED_Max (0x1UL)
  #define TWIS_INTENCLR_STOPPED_Clear (0x1UL)
  #define TWIS_INTENCLR_STOPPED_Disabled (0x0UL)
  #define TWIS_INTENCLR_STOPPED_Enabled (0x1UL)

/* ERROR @Bit 5 : Write '1' to disable interrupt for event ERROR */
  #define TWIS_INTENCLR_ERROR_Pos (5UL)
  #define TWIS_INTENCLR_ERROR_Msk (0x1UL << TWIS_INTENCLR_ERROR_Pos)
  #define TWIS_INTENCLR_ERROR_Min (0x0UL)
  #define TWIS_INTENCLR_ERROR_Max (0x1UL)
  #define TWIS_INTENCLR_ERROR_Clear (0x1UL)
  #define TWIS_INTENCLR_ERROR_Disabled (0x0UL)
  #define TWIS_INTENCLR_ERROR_Enabled (0x1UL)

/* WRITE @Bit 15 : Write '1' to disable interrupt for event WRITE */
  #define TWIS_INTENCLR_WRITE_Pos (15UL)
  #define TWIS_INTENCLR_WRITE_Msk (0x1UL << TWIS_INTENCLR_WRITE_Pos)
  #define TWIS_INTENCLR_WRITE_Min (0x0UL)
  #define TWIS_INTENCLR_WRITE_Max (0x1UL)
  #define TWIS_INTENCLR_WRITE_Clear (0x1UL)
  #define TWIS_INTENCLR_WRITE_Disabled (0x0UL)
  #define TWIS_INTENCLR_WRITE_Enabled (0x1UL)

/* READ @Bit 16 : Write '1' to disable interrupt for event READ */
  #define TWIS_INTENCLR_READ_Pos (16UL)
  #define TWIS_INTENCLR_READ_Msk (0x1UL << TWIS_INTENCLR_READ_Pos)
  #define TWIS_INTENCLR_READ_Min (0x0UL)
  #define TWIS_INTENCLR_READ_Max (0x1UL)
  #define TWIS_INTENCLR_READ_Clear (0x1UL)
  #define TWIS_INTENCLR_READ_Disabled (0x0UL)
  #define TWIS_INTENCLR_READ_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define TWIS_INTENCLR_DMARXEND_Pos (19UL)
  #define TWIS_INTENCLR_DMARXEND_Msk (0x1UL << TWIS_INTENCLR_DMARXEND_Pos)
  #define TWIS_INTENCLR_DMARXEND_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXEND_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXEND_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXEND_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define TWIS_INTENCLR_DMARXREADY_Pos (20UL)
  #define TWIS_INTENCLR_DMARXREADY_Msk (0x1UL << TWIS_INTENCLR_DMARXREADY_Pos)
  #define TWIS_INTENCLR_DMARXREADY_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXREADY_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXREADY_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXREADY_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define TWIS_INTENCLR_DMARXBUSERROR_Pos (21UL)
  #define TWIS_INTENCLR_DMARXBUSERROR_Msk (0x1UL << TWIS_INTENCLR_DMARXBUSERROR_Pos)
  #define TWIS_INTENCLR_DMARXBUSERROR_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXBUSERROR_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXBUSERROR_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXBUSERROR_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define TWIS_INTENCLR_DMARXMATCH0_Pos (22UL)
  #define TWIS_INTENCLR_DMARXMATCH0_Msk (0x1UL << TWIS_INTENCLR_DMARXMATCH0_Pos)
  #define TWIS_INTENCLR_DMARXMATCH0_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH0_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH0_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH0_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define TWIS_INTENCLR_DMARXMATCH1_Pos (23UL)
  #define TWIS_INTENCLR_DMARXMATCH1_Msk (0x1UL << TWIS_INTENCLR_DMARXMATCH1_Pos)
  #define TWIS_INTENCLR_DMARXMATCH1_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH1_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH1_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH1_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define TWIS_INTENCLR_DMARXMATCH2_Pos (24UL)
  #define TWIS_INTENCLR_DMARXMATCH2_Msk (0x1UL << TWIS_INTENCLR_DMARXMATCH2_Pos)
  #define TWIS_INTENCLR_DMARXMATCH2_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH2_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH2_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH2_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define TWIS_INTENCLR_DMARXMATCH3_Pos (25UL)
  #define TWIS_INTENCLR_DMARXMATCH3_Msk (0x1UL << TWIS_INTENCLR_DMARXMATCH3_Pos)
  #define TWIS_INTENCLR_DMARXMATCH3_Min (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH3_Max (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH3_Clear (0x1UL)
  #define TWIS_INTENCLR_DMARXMATCH3_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define TWIS_INTENCLR_DMATXEND_Pos (26UL)
  #define TWIS_INTENCLR_DMATXEND_Msk (0x1UL << TWIS_INTENCLR_DMATXEND_Pos)
  #define TWIS_INTENCLR_DMATXEND_Min (0x0UL)
  #define TWIS_INTENCLR_DMATXEND_Max (0x1UL)
  #define TWIS_INTENCLR_DMATXEND_Clear (0x1UL)
  #define TWIS_INTENCLR_DMATXEND_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define TWIS_INTENCLR_DMATXREADY_Pos (27UL)
  #define TWIS_INTENCLR_DMATXREADY_Msk (0x1UL << TWIS_INTENCLR_DMATXREADY_Pos)
  #define TWIS_INTENCLR_DMATXREADY_Min (0x0UL)
  #define TWIS_INTENCLR_DMATXREADY_Max (0x1UL)
  #define TWIS_INTENCLR_DMATXREADY_Clear (0x1UL)
  #define TWIS_INTENCLR_DMATXREADY_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define TWIS_INTENCLR_DMATXBUSERROR_Pos (28UL)
  #define TWIS_INTENCLR_DMATXBUSERROR_Msk (0x1UL << TWIS_INTENCLR_DMATXBUSERROR_Pos)
  #define TWIS_INTENCLR_DMATXBUSERROR_Min (0x0UL)
  #define TWIS_INTENCLR_DMATXBUSERROR_Max (0x1UL)
  #define TWIS_INTENCLR_DMATXBUSERROR_Clear (0x1UL)
  #define TWIS_INTENCLR_DMATXBUSERROR_Disabled (0x0UL)
  #define TWIS_INTENCLR_DMATXBUSERROR_Enabled (0x1UL)


/* TWIS_ERRORSRC: Error source */
  #define TWIS_ERRORSRC_ResetValue (0x00000000UL)

/* OVERFLOW @Bit 0 : RX buffer overflow detected, and prevented */
  #define TWIS_ERRORSRC_OVERFLOW_Pos (0UL)
  #define TWIS_ERRORSRC_OVERFLOW_Msk (0x1UL << TWIS_ERRORSRC_OVERFLOW_Pos)
  #define TWIS_ERRORSRC_OVERFLOW_Min (0x0UL)
  #define TWIS_ERRORSRC_OVERFLOW_Max (0x1UL)
  #define TWIS_ERRORSRC_OVERFLOW_NotDetected (0x0UL)
  #define TWIS_ERRORSRC_OVERFLOW_Detected (0x1UL)

/* DNACK @Bit 2 : NACK sent after receiving a data byte */
  #define TWIS_ERRORSRC_DNACK_Pos (2UL)
  #define TWIS_ERRORSRC_DNACK_Msk (0x1UL << TWIS_ERRORSRC_DNACK_Pos)
  #define TWIS_ERRORSRC_DNACK_Min (0x0UL)
  #define TWIS_ERRORSRC_DNACK_Max (0x1UL)
  #define TWIS_ERRORSRC_DNACK_NotReceived (0x0UL)
  #define TWIS_ERRORSRC_DNACK_Received (0x1UL)

/* OVERREAD @Bit 3 : TX buffer over-read detected, and prevented */
  #define TWIS_ERRORSRC_OVERREAD_Pos (3UL)
  #define TWIS_ERRORSRC_OVERREAD_Msk (0x1UL << TWIS_ERRORSRC_OVERREAD_Pos)
  #define TWIS_ERRORSRC_OVERREAD_Min (0x0UL)
  #define TWIS_ERRORSRC_OVERREAD_Max (0x1UL)
  #define TWIS_ERRORSRC_OVERREAD_NotDetected (0x0UL)
  #define TWIS_ERRORSRC_OVERREAD_Detected (0x1UL)


/* TWIS_MATCH: Status register indicating which address had a match */
  #define TWIS_MATCH_ResetValue (0x00000000UL)

/* MATCH @Bit 0 : Indication of which address in ADDRESS that matched the incoming address */
  #define TWIS_MATCH_MATCH_Pos (0UL)
  #define TWIS_MATCH_MATCH_Msk (0x1UL << TWIS_MATCH_MATCH_Pos)
  #define TWIS_MATCH_MATCH_Min (0x0UL)
  #define TWIS_MATCH_MATCH_Max (0x1UL)


/* TWIS_ENABLE: Enable TWIS */
  #define TWIS_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..3 : Enable or disable TWIS */
  #define TWIS_ENABLE_ENABLE_Pos (0UL)
  #define TWIS_ENABLE_ENABLE_Msk (0xFUL << TWIS_ENABLE_ENABLE_Pos)
  #define TWIS_ENABLE_ENABLE_Min (0x0UL)
  #define TWIS_ENABLE_ENABLE_Max (0x9UL)
  #define TWIS_ENABLE_ENABLE_Disabled (0x0UL)
  #define TWIS_ENABLE_ENABLE_Enabled (0x9UL)


/* TWIS_ADDRESS: TWI slave address n */
  #define TWIS_ADDRESS_MaxCount (2UL)
  #define TWIS_ADDRESS_MaxIndex (1UL)
  #define TWIS_ADDRESS_MinIndex (0UL)
  #define TWIS_ADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..6 : TWI slave address */
  #define TWIS_ADDRESS_ADDRESS_Pos (0UL)
  #define TWIS_ADDRESS_ADDRESS_Msk (0x7FUL << TWIS_ADDRESS_ADDRESS_Pos)


/* TWIS_CONFIG: Configuration register for the address match mechanism */
  #define TWIS_CONFIG_ResetValue (0x00000001UL)

/* ADDRESS0 @Bit 0 : Enable or disable address matching on ADDRESS[0] */
  #define TWIS_CONFIG_ADDRESS0_Pos (0UL)
  #define TWIS_CONFIG_ADDRESS0_Msk (0x1UL << TWIS_CONFIG_ADDRESS0_Pos)
  #define TWIS_CONFIG_ADDRESS0_Min (0x0UL)
  #define TWIS_CONFIG_ADDRESS0_Max (0x1UL)
  #define TWIS_CONFIG_ADDRESS0_Disabled (0x0UL)
  #define TWIS_CONFIG_ADDRESS0_Enabled (0x1UL)

/* ADDRESS1 @Bit 1 : Enable or disable address matching on ADDRESS[1] */
  #define TWIS_CONFIG_ADDRESS1_Pos (1UL)
  #define TWIS_CONFIG_ADDRESS1_Msk (0x1UL << TWIS_CONFIG_ADDRESS1_Pos)
  #define TWIS_CONFIG_ADDRESS1_Min (0x0UL)
  #define TWIS_CONFIG_ADDRESS1_Max (0x1UL)
  #define TWIS_CONFIG_ADDRESS1_Disabled (0x0UL)
  #define TWIS_CONFIG_ADDRESS1_Enabled (0x1UL)


/* TWIS_ORC: Over-read character. Character sent out in case of an over-read of the transmit buffer. */
  #define TWIS_ORC_ResetValue (0x00000000UL)

/* ORC @Bits 0..7 : Over-read character. Character sent out in case of an over-read of the transmit buffer. */
  #define TWIS_ORC_ORC_Pos (0UL)
  #define TWIS_ORC_ORC_Msk (0xFFUL << TWIS_ORC_ORC_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           UARTE                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct UARTE_TASKS_DMA_RX ================================================ */
/**
  * @brief RX [UARTE_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000008) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000018) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_UARTE_TASKS_DMA_RX_Type;

/* UARTE_TASKS_DMA_RX_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                              easyDMA. */

  #define UARTE_TASKS_DMA_RX_START_ResetValue (0x00000000UL)

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define UARTE_TASKS_DMA_RX_START_START_Pos (0UL)
  #define UARTE_TASKS_DMA_RX_START_START_Msk (0x1UL << UARTE_TASKS_DMA_RX_START_START_Pos)
  #define UARTE_TASKS_DMA_RX_START_START_Min (0x1UL)
  #define UARTE_TASKS_DMA_RX_START_START_Max (0x1UL)
  #define UARTE_TASKS_DMA_RX_START_START_Trigger (0x1UL)


/* UARTE_TASKS_DMA_RX_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define UARTE_TASKS_DMA_RX_STOP_ResetValue (0x00000000UL)

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Pos (0UL)
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Msk (0x1UL << UARTE_TASKS_DMA_RX_STOP_STOP_Pos)
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Min (0x1UL)
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Max (0x1UL)
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Trigger (0x1UL)


/* UARTE_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL)
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL)
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL)
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL)


/* UARTE_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL)
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL)
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL)
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL)



/* ================================================ Struct UARTE_TASKS_DMA_TX ================================================ */
/**
  * @brief TX [UARTE_TASKS_DMA_TX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
} NRF_UARTE_TASKS_DMA_TX_Type;

/* UARTE_TASKS_DMA_TX_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                              easyDMA. */

  #define UARTE_TASKS_DMA_TX_START_ResetValue (0x00000000UL)

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define UARTE_TASKS_DMA_TX_START_START_Pos (0UL)
  #define UARTE_TASKS_DMA_TX_START_START_Msk (0x1UL << UARTE_TASKS_DMA_TX_START_START_Pos)
  #define UARTE_TASKS_DMA_TX_START_START_Min (0x1UL)
  #define UARTE_TASKS_DMA_TX_START_START_Max (0x1UL)
  #define UARTE_TASKS_DMA_TX_START_START_Trigger (0x1UL)


/* UARTE_TASKS_DMA_TX_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define UARTE_TASKS_DMA_TX_STOP_ResetValue (0x00000000UL)

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Pos (0UL)
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Msk (0x1UL << UARTE_TASKS_DMA_TX_STOP_STOP_Pos)
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Min (0x1UL)
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Max (0x1UL)
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Trigger (0x1UL)



/* ================================================= Struct UARTE_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [UARTE_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __OM  NRF_UARTE_TASKS_DMA_RX_Type RX;
  __OM  NRF_UARTE_TASKS_DMA_TX_Type TX;
} NRF_UARTE_TASKS_DMA_Type;


/* ============================================== Struct UARTE_SUBSCRIBE_DMA_RX ============================================== */
/**
  * @brief RX [UARTE_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;
  __IOM uint32_t  STOP;
  __IOM uint32_t  ENABLEMATCH[4];
  __IOM uint32_t  DISABLEMATCH[4];
} NRF_UARTE_SUBSCRIBE_DMA_RX_Type;

/* UARTE_SUBSCRIBE_DMA_RX_START: Subscribe configuration for task START */
  #define UARTE_SUBSCRIBE_DMA_RX_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_RX_START_EN_Pos)
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Enabled (0x1UL)


/* UARTE_SUBSCRIBE_DMA_RX_STOP: Subscribe configuration for task STOP */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Pos)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Pos)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Enabled (0x1UL)


/* UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL)


/* UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask
                                                                            of CHIDX field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL)



/* ============================================== Struct UARTE_SUBSCRIBE_DMA_TX ============================================== */
/**
  * @brief TX [UARTE_SUBSCRIBE_DMA_TX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;
  __IOM uint32_t  STOP;
} NRF_UARTE_SUBSCRIBE_DMA_TX_Type;

/* UARTE_SUBSCRIBE_DMA_TX_START: Subscribe configuration for task START */
  #define UARTE_SUBSCRIBE_DMA_TX_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_TX_START_EN_Pos)
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Enabled (0x1UL)


/* UARTE_SUBSCRIBE_DMA_TX_STOP: Subscribe configuration for task STOP */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Pos)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Pos)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Enabled (0x1UL)



/* =============================================== Struct UARTE_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [UARTE_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IOM NRF_UARTE_SUBSCRIBE_DMA_RX_Type RX;
  __IOM NRF_UARTE_SUBSCRIBE_DMA_TX_Type TX;
} NRF_UARTE_SUBSCRIBE_DMA_Type;


/* =============================================== Struct UARTE_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [UARTE_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_UARTE_EVENTS_DMA_RX_Type;

/* UARTE_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define UARTE_EVENTS_DMA_RX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define UARTE_EVENTS_DMA_RX_END_END_Pos (0UL)
  #define UARTE_EVENTS_DMA_RX_END_END_Msk (0x1UL << UARTE_EVENTS_DMA_RX_END_END_Pos)
  #define UARTE_EVENTS_DMA_RX_END_END_Min (0x0UL)
  #define UARTE_EVENTS_DMA_RX_END_END_Max (0x1UL)
  #define UARTE_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_RX_END_END_Generated (0x1UL)


/* UARTE_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                               to be written to prepare for the next sequence. */

  #define UARTE_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define UARTE_EVENTS_DMA_RX_READY_READY_Pos (0UL)
  #define UARTE_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << UARTE_EVENTS_DMA_RX_READY_READY_Pos)
  #define UARTE_EVENTS_DMA_RX_READY_READY_Min (0x0UL)
  #define UARTE_EVENTS_DMA_RX_READY_READY_Max (0x1UL)
  #define UARTE_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_RX_READY_READY_Generated (0x1UL)


/* UARTE_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define UARTE_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL)
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of
                                                                            BUSERROR field.*/
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL)
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL)
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL)


/* UARTE_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define UARTE_EVENTS_DMA_RX_MATCH_MaxCount (4UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_MinIndex (0UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << UARTE_EVENTS_DMA_RX_MATCH_MATCH_Pos)
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL)



/* =============================================== Struct UARTE_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [UARTE_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;
} NRF_UARTE_EVENTS_DMA_TX_Type;

/* UARTE_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define UARTE_EVENTS_DMA_TX_END_ResetValue (0x00000000UL)

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define UARTE_EVENTS_DMA_TX_END_END_Pos (0UL)
  #define UARTE_EVENTS_DMA_TX_END_END_Msk (0x1UL << UARTE_EVENTS_DMA_TX_END_END_Pos)
  #define UARTE_EVENTS_DMA_TX_END_END_Min (0x0UL)
  #define UARTE_EVENTS_DMA_TX_END_END_Max (0x1UL)
  #define UARTE_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_TX_END_END_Generated (0x1UL)


/* UARTE_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                               to be written to prepare for the next sequence. */

  #define UARTE_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL)

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define UARTE_EVENTS_DMA_TX_READY_READY_Pos (0UL)
  #define UARTE_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << UARTE_EVENTS_DMA_TX_READY_READY_Pos)
  #define UARTE_EVENTS_DMA_TX_READY_READY_Min (0x0UL)
  #define UARTE_EVENTS_DMA_TX_READY_READY_Max (0x1UL)
  #define UARTE_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_TX_READY_READY_Generated (0x1UL)


/* UARTE_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define UARTE_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL)
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of
                                                                            BUSERROR field.*/
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL)
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL)
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL)
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL)



/* ================================================= Struct UARTE_EVENTS_DMA ================================================= */
/**
  * @brief EVENTS_DMA [UARTE_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_UARTE_EVENTS_DMA_RX_Type RX;
  __IOM NRF_UARTE_EVENTS_DMA_TX_Type TX;
} NRF_UARTE_EVENTS_DMA_Type;


/* =============================================== Struct UARTE_PUBLISH_DMA_RX =============================================== */
/**
  * @brief RX [UARTE_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
  __IOM uint32_t  MATCH[4];
} NRF_UARTE_PUBLISH_DMA_RX_Type;

/* UARTE_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define UARTE_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define UARTE_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_RX_END_CHIDX_Pos)
  #define UARTE_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_RX_END_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_RX_END_EN_Pos)
  #define UARTE_PUBLISH_DMA_RX_END_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_END_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define UARTE_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define UARTE_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_RX_READY_CHIDX_Pos)
  #define UARTE_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_RX_READY_EN_Pos)
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Pos)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define UARTE_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Pos)
  #define UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_RX_MATCH_EN_Pos)
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL)



/* =============================================== Struct UARTE_PUBLISH_DMA_TX =============================================== */
/**
  * @brief TX [UARTE_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;
  __IOM uint32_t  READY;
  __IOM uint32_t  BUSERROR;
} NRF_UARTE_PUBLISH_DMA_TX_Type;

/* UARTE_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define UARTE_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define UARTE_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_TX_END_CHIDX_Pos)
  #define UARTE_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_TX_END_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_TX_END_EN_Pos)
  #define UARTE_PUBLISH_DMA_TX_END_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_TX_END_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define UARTE_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define UARTE_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_TX_READY_CHIDX_Pos)
  #define UARTE_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_TX_READY_EN_Pos)
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Pos)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL)



/* ================================================ Struct UARTE_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [UARTE_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_UARTE_PUBLISH_DMA_RX_Type RX;
  __IOM NRF_UARTE_PUBLISH_DMA_TX_Type TX;
} NRF_UARTE_PUBLISH_DMA_Type;


/* ==================================================== Struct UARTE_PSEL ==================================================== */
/**
  * @brief PSEL [UARTE_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  TXD;
  __IOM uint32_t  CTS;
  __IOM uint32_t  RXD;
  __IOM uint32_t  RTS;
} NRF_UARTE_PSEL_Type;

/* UARTE_PSEL_TXD: Pin select for TXD signal */
  #define UARTE_PSEL_TXD_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define UARTE_PSEL_TXD_PIN_Pos (0UL)
  #define UARTE_PSEL_TXD_PIN_Msk (0x1FUL << UARTE_PSEL_TXD_PIN_Pos)
  #define UARTE_PSEL_TXD_PIN_Min (0x00UL)
  #define UARTE_PSEL_TXD_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define UARTE_PSEL_TXD_PORT_Pos (5UL)
  #define UARTE_PSEL_TXD_PORT_Msk (0x7UL << UARTE_PSEL_TXD_PORT_Pos)
  #define UARTE_PSEL_TXD_PORT_Min (0x0UL)
  #define UARTE_PSEL_TXD_PORT_Max (0x2UL)

/* CONNECT @Bit 31 : Connection */
  #define UARTE_PSEL_TXD_CONNECT_Pos (31UL)
  #define UARTE_PSEL_TXD_CONNECT_Msk (0x1UL << UARTE_PSEL_TXD_CONNECT_Pos)
  #define UARTE_PSEL_TXD_CONNECT_Min (0x0UL)
  #define UARTE_PSEL_TXD_CONNECT_Max (0x1UL)
  #define UARTE_PSEL_TXD_CONNECT_Disconnected (0x1UL)
  #define UARTE_PSEL_TXD_CONNECT_Connected (0x0UL)


/* UARTE_PSEL_CTS: Pin select for CTS signal */
  #define UARTE_PSEL_CTS_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define UARTE_PSEL_CTS_PIN_Pos (0UL)
  #define UARTE_PSEL_CTS_PIN_Msk (0x1FUL << UARTE_PSEL_CTS_PIN_Pos)
  #define UARTE_PSEL_CTS_PIN_Min (0x00UL)
  #define UARTE_PSEL_CTS_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define UARTE_PSEL_CTS_PORT_Pos (5UL)
  #define UARTE_PSEL_CTS_PORT_Msk (0x7UL << UARTE_PSEL_CTS_PORT_Pos)
  #define UARTE_PSEL_CTS_PORT_Min (0x0UL)
  #define UARTE_PSEL_CTS_PORT_Max (0x2UL)

/* CONNECT @Bit 31 : Connection */
  #define UARTE_PSEL_CTS_CONNECT_Pos (31UL)
  #define UARTE_PSEL_CTS_CONNECT_Msk (0x1UL << UARTE_PSEL_CTS_CONNECT_Pos)
  #define UARTE_PSEL_CTS_CONNECT_Min (0x0UL)
  #define UARTE_PSEL_CTS_CONNECT_Max (0x1UL)
  #define UARTE_PSEL_CTS_CONNECT_Disconnected (0x1UL)
  #define UARTE_PSEL_CTS_CONNECT_Connected (0x0UL)


/* UARTE_PSEL_RXD: Pin select for RXD signal */
  #define UARTE_PSEL_RXD_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define UARTE_PSEL_RXD_PIN_Pos (0UL)
  #define UARTE_PSEL_RXD_PIN_Msk (0x1FUL << UARTE_PSEL_RXD_PIN_Pos)
  #define UARTE_PSEL_RXD_PIN_Min (0x00UL)
  #define UARTE_PSEL_RXD_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define UARTE_PSEL_RXD_PORT_Pos (5UL)
  #define UARTE_PSEL_RXD_PORT_Msk (0x7UL << UARTE_PSEL_RXD_PORT_Pos)
  #define UARTE_PSEL_RXD_PORT_Min (0x0UL)
  #define UARTE_PSEL_RXD_PORT_Max (0x2UL)

/* CONNECT @Bit 31 : Connection */
  #define UARTE_PSEL_RXD_CONNECT_Pos (31UL)
  #define UARTE_PSEL_RXD_CONNECT_Msk (0x1UL << UARTE_PSEL_RXD_CONNECT_Pos)
  #define UARTE_PSEL_RXD_CONNECT_Min (0x0UL)
  #define UARTE_PSEL_RXD_CONNECT_Max (0x1UL)
  #define UARTE_PSEL_RXD_CONNECT_Disconnected (0x1UL)
  #define UARTE_PSEL_RXD_CONNECT_Connected (0x0UL)


/* UARTE_PSEL_RTS: Pin select for RTS signal */
  #define UARTE_PSEL_RTS_ResetValue (0xFFFFFFFFUL)

/* PIN @Bits 0..4 : Pin number */
  #define UARTE_PSEL_RTS_PIN_Pos (0UL)
  #define UARTE_PSEL_RTS_PIN_Msk (0x1FUL << UARTE_PSEL_RTS_PIN_Pos)
  #define UARTE_PSEL_RTS_PIN_Min (0x00UL)
  #define UARTE_PSEL_RTS_PIN_Max (0x1FUL)

/* PORT @Bits 5..7 : Port number */
  #define UARTE_PSEL_RTS_PORT_Pos (5UL)
  #define UARTE_PSEL_RTS_PORT_Msk (0x7UL << UARTE_PSEL_RTS_PORT_Pos)
  #define UARTE_PSEL_RTS_PORT_Min (0x0UL)
  #define UARTE_PSEL_RTS_PORT_Max (0x2UL)

/* CONNECT @Bit 31 : Connection */
  #define UARTE_PSEL_RTS_CONNECT_Pos (31UL)
  #define UARTE_PSEL_RTS_CONNECT_Msk (0x1UL << UARTE_PSEL_RTS_CONNECT_Pos)
  #define UARTE_PSEL_RTS_CONNECT_Min (0x0UL)
  #define UARTE_PSEL_RTS_CONNECT_Max (0x1UL)
  #define UARTE_PSEL_RTS_CONNECT_Disconnected (0x1UL)
  #define UARTE_PSEL_RTS_CONNECT_Connected (0x0UL)



/* ================================================ Struct UARTE_DMA_RX_MATCH ================================================ */
/**
  * @brief MATCH [UARTE_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_UARTE_DMA_RX_MATCH_Type;

/* UARTE_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define UARTE_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL)

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Pos) /*!< Bit mask of ENABLE0
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL)

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Pos) /*!< Bit mask of ENABLE1
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL)

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Pos) /*!< Bit mask of ENABLE2
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL)

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Pos) /*!< Bit mask of ENABLE3
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL)

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or sticky */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL)

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or sticky */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL)

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or sticky */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL)

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or sticky */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL)
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL)


/* UARTE_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define UARTE_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL)
  #define UARTE_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL)
  #define UARTE_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL)
  #define UARTE_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data to look for */
  #define UARTE_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL)
  #define UARTE_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFFFFFFFUL << UARTE_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/



/* =================================================== Struct UARTE_DMA_RX =================================================== */
/**
  * @brief RX [UARTE_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_UARTE_DMA_RX_MATCH_Type MATCH;           /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_UARTE_DMA_RX_Type;

/* UARTE_DMA_RX_PTR: RAM buffer start address */
  #define UARTE_DMA_RX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define UARTE_DMA_RX_PTR_PTR_Pos (0UL)
  #define UARTE_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << UARTE_DMA_RX_PTR_PTR_Pos)


/* UARTE_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define UARTE_DMA_RX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define UARTE_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)
  #define UARTE_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << UARTE_DMA_RX_MAXCNT_MAXCNT_Pos)
  #define UARTE_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define UARTE_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* UARTE_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after
                         each MATCH event. */

  #define UARTE_DMA_RX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define UARTE_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)
  #define UARTE_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << UARTE_DMA_RX_AMOUNT_AMOUNT_Pos)
  #define UARTE_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define UARTE_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* UARTE_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* UARTE_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define UARTE_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define UARTE_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define UARTE_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << UARTE_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct UARTE_DMA_TX =================================================== */
/**
  * @brief TX [UARTE_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;
  __IOM uint32_t  MAXCNT;
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_UARTE_DMA_TX_Type;

/* UARTE_DMA_TX_PTR: RAM buffer start address */
  #define UARTE_DMA_TX_PTR_ResetValue (0x20000000UL)

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define UARTE_DMA_TX_PTR_PTR_Pos (0UL)
  #define UARTE_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << UARTE_DMA_TX_PTR_PTR_Pos)


/* UARTE_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define UARTE_DMA_TX_MAXCNT_ResetValue (0x00000000UL)

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define UARTE_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)
  #define UARTE_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << UARTE_DMA_TX_MAXCNT_MAXCNT_Pos)
  #define UARTE_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)
  #define UARTE_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)


/* UARTE_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after
                         each MATCH event. */

  #define UARTE_DMA_TX_AMOUNT_ResetValue (0x00000000UL)

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define UARTE_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)
  #define UARTE_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << UARTE_DMA_TX_AMOUNT_AMOUNT_Pos)
  #define UARTE_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)
  #define UARTE_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)


/* UARTE_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : (unspecified) */
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL)
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL)
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL)
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL)
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL)


/* UARTE_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define UARTE_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define UARTE_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL)
  #define UARTE_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << UARTE_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ==================================================== Struct UARTE_DMA ===================================================== */
/**
  * @brief DMA [UARTE_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_UARTE_DMA_RX_Type RX;
  __IOM NRF_UARTE_DMA_TX_Type TX;
} NRF_UARTE_DMA_Type;

/* ====================================================== Struct UARTE ======================================================= */
/**
  * @brief UART with EasyDMA
  */
  typedef struct {
    __IM uint32_t RESERVED[7];
    __OM uint32_t TASKS_FLUSHRX;
    __IM uint32_t RESERVED1[2];
    __OM NRF_UARTE_TASKS_DMA_Type TASKS_DMA;
    __IM uint32_t RESERVED2[17];
    __IOM uint32_t SUBSCRIBE_FLUSHRX;
    __IM uint32_t RESERVED3[2];
    __IOM NRF_UARTE_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA;
    __IM uint32_t RESERVED4[10];
    __IOM uint32_t EVENTS_CTS;
    __IOM uint32_t EVENTS_NCTS;
    __IM uint32_t RESERVED5;
    __IOM uint32_t EVENTS_TXDRDY;
    __IOM uint32_t EVENTS_RXDRDY;                    /*!< (@ 0x00000110) Data received in RXD (but potentially not yet
                                                                         transferred to Data RAM)*/
    __IOM uint32_t EVENTS_ERROR;
    __IM uint32_t RESERVED6[3];
    __IOM uint32_t EVENTS_RXTO;
    __IM uint32_t RESERVED7[2];
    __IOM uint32_t EVENTS_TXSTOPPED;
    __IM uint32_t RESERVED8[6];
    __IOM NRF_UARTE_EVENTS_DMA_Type EVENTS_DMA;
    __IOM uint32_t EVENTS_FRAMETIMEOUT;
    __IM uint32_t RESERVED9[2];
    __IOM uint32_t PUBLISH_CTS;
    __IOM uint32_t PUBLISH_NCTS;
    __IM uint32_t RESERVED10;
    __IOM uint32_t PUBLISH_TXDRDY;
    __IOM uint32_t PUBLISH_RXDRDY;
    __IOM uint32_t PUBLISH_ERROR;
    __IM uint32_t RESERVED11[3];
    __IOM uint32_t PUBLISH_RXTO;
    __IM uint32_t RESERVED12[2];
    __IOM uint32_t PUBLISH_TXSTOPPED;
    __IM uint32_t RESERVED13[6];
    __IOM NRF_UARTE_PUBLISH_DMA_Type PUBLISH_DMA;
    __IOM uint32_t PUBLISH_FRAMETIMEOUT;
    __IM uint32_t RESERVED14[2];
    __IOM uint32_t SHORTS;
    __IM uint32_t RESERVED15[63];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED16[93];
    __IOM uint32_t ERRORSRC;
    __IM uint32_t RESERVED17[31];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED18[8];
    __IOM uint32_t BAUDRATE;                         /*!< (@ 0x00000524) Baud rate. Accuracy depends on the HFCLK source
                                                                         selected.*/
    __IM uint32_t RESERVED19[17];
    __IOM uint32_t CONFIG;                           /*!< (@ 0x0000056C) Configuration of parity, hardware flow control,
                                                                         framesize, and packet timeout.*/
    __IM uint32_t RESERVED20;
    __IOM uint32_t ADDRESS;                          /*!< (@ 0x00000574) Set the address of the UARTE for RX when used in 9 bit
                                                                         data frame mode.*/
    __IOM uint32_t FRAMETIMEOUT;                     /*!< (@ 0x00000578) Set the number of UARTE bits to count before triggering
                                                                         packet timeout.*/
    __IM uint32_t RESERVED21[34];
    __IOM NRF_UARTE_PSEL_Type PSEL;
    __IM uint32_t RESERVED22[59];
    __IOM NRF_UARTE_DMA_Type DMA;
  } NRF_UARTE_Type;

/* UARTE_TASKS_FLUSHRX: Flush RX FIFO into RX buffer */
  #define UARTE_TASKS_FLUSHRX_ResetValue (0x00000000UL)

/* TASKS_FLUSHRX @Bit 0 : Flush RX FIFO into RX buffer */
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Pos (0UL)
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Msk (0x1UL << UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Pos) /*!< Bit mask of TASKS_FLUSHRX
                                                                            field.*/
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Min (0x1UL)
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Max (0x1UL)
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Trigger (0x1UL)


/* UARTE_SUBSCRIBE_FLUSHRX: Subscribe configuration for task FLUSHRX */
  #define UARTE_SUBSCRIBE_FLUSHRX_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task FLUSHRX will subscribe to */
  #define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Pos (0UL)
  #define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Pos)
  #define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Min (0x00UL)
  #define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Pos (31UL)
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Msk (0x1UL << UARTE_SUBSCRIBE_FLUSHRX_EN_Pos)
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Min (0x0UL)
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Max (0x1UL)
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Disabled (0x0UL)
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Enabled (0x1UL)


/* UARTE_EVENTS_CTS: CTS is activated (set low). Clear To Send. */
  #define UARTE_EVENTS_CTS_ResetValue (0x00000000UL)

/* EVENTS_CTS @Bit 0 : CTS is activated (set low). Clear To Send. */
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Pos (0UL)
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Msk (0x1UL << UARTE_EVENTS_CTS_EVENTS_CTS_Pos)
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Min (0x0UL)
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Max (0x1UL)
  #define UARTE_EVENTS_CTS_EVENTS_CTS_NotGenerated (0x0UL)
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Generated (0x1UL)


/* UARTE_EVENTS_NCTS: CTS is deactivated (set high). Not Clear To Send. */
  #define UARTE_EVENTS_NCTS_ResetValue (0x00000000UL)

/* EVENTS_NCTS @Bit 0 : CTS is deactivated (set high). Not Clear To Send. */
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Pos (0UL)
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Msk (0x1UL << UARTE_EVENTS_NCTS_EVENTS_NCTS_Pos)
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Min (0x0UL)
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Max (0x1UL)
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_NotGenerated (0x0UL)
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Generated (0x1UL)


/* UARTE_EVENTS_TXDRDY: Data sent from TXD */
  #define UARTE_EVENTS_TXDRDY_ResetValue (0x00000000UL)

/* EVENTS_TXDRDY @Bit 0 : Data sent from TXD */
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos (0UL)
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Msk (0x1UL << UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos) /*!< Bit mask of EVENTS_TXDRDY
                                                                            field.*/
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Min (0x0UL)
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Max (0x1UL)
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_NotGenerated (0x0UL)
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Generated (0x1UL)


/* UARTE_EVENTS_RXDRDY: Data received in RXD (but potentially not yet transferred to Data RAM) */
  #define UARTE_EVENTS_RXDRDY_ResetValue (0x00000000UL)

/* EVENTS_RXDRDY @Bit 0 : Data received in RXD (but potentially not yet transferred to Data RAM) */
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos (0UL)
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Msk (0x1UL << UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos) /*!< Bit mask of EVENTS_RXDRDY
                                                                            field.*/
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Min (0x0UL)
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Max (0x1UL)
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_NotGenerated (0x0UL)
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Generated (0x1UL)


/* UARTE_EVENTS_ERROR: Error detected */
  #define UARTE_EVENTS_ERROR_ResetValue (0x00000000UL)

/* EVENTS_ERROR @Bit 0 : Error detected */
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << UARTE_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR
                                                                            field.*/
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL)
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL)


/* UARTE_EVENTS_RXTO: Receiver timeout */
  #define UARTE_EVENTS_RXTO_ResetValue (0x00000000UL)

/* EVENTS_RXTO @Bit 0 : Receiver timeout */
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Pos (0UL)
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Msk (0x1UL << UARTE_EVENTS_RXTO_EVENTS_RXTO_Pos)
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Min (0x0UL)
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Max (0x1UL)
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_NotGenerated (0x0UL)
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Generated (0x1UL)


/* UARTE_EVENTS_TXSTOPPED: Transmitter stopped */
  #define UARTE_EVENTS_TXSTOPPED_ResetValue (0x00000000UL)

/* EVENTS_TXSTOPPED @Bit 0 : Transmitter stopped */
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Pos (0UL)
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Msk (0x1UL << UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_TXSTOPPED field.*/
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Min (0x0UL)
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Max (0x1UL)
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_NotGenerated (0x0UL)
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Generated (0x1UL)


/* UARTE_EVENTS_FRAMETIMEOUT: Timed out due to bus being idle while receiving data. */
  #define UARTE_EVENTS_FRAMETIMEOUT_ResetValue (0x00000000UL)

/* EVENTS_FRAMETIMEOUT @Bit 0 : Timed out due to bus being idle while receiving data. */
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Pos (0UL)
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Msk (0x1UL << UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Pos) /*!<
                                                                            Bit mask of EVENTS_FRAMETIMEOUT field.*/
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Min (0x0UL)
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Max (0x1UL)
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_NotGenerated (0x0UL)
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Generated (0x1UL)


/* UARTE_PUBLISH_CTS: Publish configuration for event CTS */
  #define UARTE_PUBLISH_CTS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event CTS will publish to */
  #define UARTE_PUBLISH_CTS_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_CTS_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_CTS_CHIDX_Pos)
  #define UARTE_PUBLISH_CTS_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_CTS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_CTS_EN_Pos (31UL)
  #define UARTE_PUBLISH_CTS_EN_Msk (0x1UL << UARTE_PUBLISH_CTS_EN_Pos)
  #define UARTE_PUBLISH_CTS_EN_Min (0x0UL)
  #define UARTE_PUBLISH_CTS_EN_Max (0x1UL)
  #define UARTE_PUBLISH_CTS_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_CTS_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_NCTS: Publish configuration for event NCTS */
  #define UARTE_PUBLISH_NCTS_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event NCTS will publish to */
  #define UARTE_PUBLISH_NCTS_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_NCTS_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_NCTS_CHIDX_Pos)
  #define UARTE_PUBLISH_NCTS_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_NCTS_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_NCTS_EN_Pos (31UL)
  #define UARTE_PUBLISH_NCTS_EN_Msk (0x1UL << UARTE_PUBLISH_NCTS_EN_Pos)
  #define UARTE_PUBLISH_NCTS_EN_Min (0x0UL)
  #define UARTE_PUBLISH_NCTS_EN_Max (0x1UL)
  #define UARTE_PUBLISH_NCTS_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_NCTS_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_TXDRDY: Publish configuration for event TXDRDY */
  #define UARTE_PUBLISH_TXDRDY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event TXDRDY will publish to */
  #define UARTE_PUBLISH_TXDRDY_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_TXDRDY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_TXDRDY_CHIDX_Pos)
  #define UARTE_PUBLISH_TXDRDY_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_TXDRDY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_TXDRDY_EN_Pos (31UL)
  #define UARTE_PUBLISH_TXDRDY_EN_Msk (0x1UL << UARTE_PUBLISH_TXDRDY_EN_Pos)
  #define UARTE_PUBLISH_TXDRDY_EN_Min (0x0UL)
  #define UARTE_PUBLISH_TXDRDY_EN_Max (0x1UL)
  #define UARTE_PUBLISH_TXDRDY_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_TXDRDY_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_RXDRDY: Publish configuration for event RXDRDY */
  #define UARTE_PUBLISH_RXDRDY_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RXDRDY will publish to */
  #define UARTE_PUBLISH_RXDRDY_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_RXDRDY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_RXDRDY_CHIDX_Pos)
  #define UARTE_PUBLISH_RXDRDY_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_RXDRDY_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_RXDRDY_EN_Pos (31UL)
  #define UARTE_PUBLISH_RXDRDY_EN_Msk (0x1UL << UARTE_PUBLISH_RXDRDY_EN_Pos)
  #define UARTE_PUBLISH_RXDRDY_EN_Min (0x0UL)
  #define UARTE_PUBLISH_RXDRDY_EN_Max (0x1UL)
  #define UARTE_PUBLISH_RXDRDY_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_RXDRDY_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define UARTE_PUBLISH_ERROR_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define UARTE_PUBLISH_ERROR_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_ERROR_CHIDX_Pos)
  #define UARTE_PUBLISH_ERROR_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_ERROR_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_ERROR_EN_Pos (31UL)
  #define UARTE_PUBLISH_ERROR_EN_Msk (0x1UL << UARTE_PUBLISH_ERROR_EN_Pos)
  #define UARTE_PUBLISH_ERROR_EN_Min (0x0UL)
  #define UARTE_PUBLISH_ERROR_EN_Max (0x1UL)
  #define UARTE_PUBLISH_ERROR_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_ERROR_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_RXTO: Publish configuration for event RXTO */
  #define UARTE_PUBLISH_RXTO_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event RXTO will publish to */
  #define UARTE_PUBLISH_RXTO_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_RXTO_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_RXTO_CHIDX_Pos)
  #define UARTE_PUBLISH_RXTO_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_RXTO_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_RXTO_EN_Pos (31UL)
  #define UARTE_PUBLISH_RXTO_EN_Msk (0x1UL << UARTE_PUBLISH_RXTO_EN_Pos)
  #define UARTE_PUBLISH_RXTO_EN_Min (0x0UL)
  #define UARTE_PUBLISH_RXTO_EN_Max (0x1UL)
  #define UARTE_PUBLISH_RXTO_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_RXTO_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_TXSTOPPED: Publish configuration for event TXSTOPPED */
  #define UARTE_PUBLISH_TXSTOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event TXSTOPPED will publish to */
  #define UARTE_PUBLISH_TXSTOPPED_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_TXSTOPPED_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_TXSTOPPED_CHIDX_Pos)
  #define UARTE_PUBLISH_TXSTOPPED_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_TXSTOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_TXSTOPPED_EN_Pos (31UL)
  #define UARTE_PUBLISH_TXSTOPPED_EN_Msk (0x1UL << UARTE_PUBLISH_TXSTOPPED_EN_Pos)
  #define UARTE_PUBLISH_TXSTOPPED_EN_Min (0x0UL)
  #define UARTE_PUBLISH_TXSTOPPED_EN_Max (0x1UL)
  #define UARTE_PUBLISH_TXSTOPPED_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_TXSTOPPED_EN_Enabled (0x1UL)


/* UARTE_PUBLISH_FRAMETIMEOUT: Publish configuration for event FRAMETIMEOUT */
  #define UARTE_PUBLISH_FRAMETIMEOUT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event FRAMETIMEOUT will publish to */
  #define UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Pos (0UL)
  #define UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Pos)
  #define UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Min (0x00UL)
  #define UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Pos (31UL)
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Msk (0x1UL << UARTE_PUBLISH_FRAMETIMEOUT_EN_Pos)
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Min (0x0UL)
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Max (0x1UL)
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Disabled (0x0UL)
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Enabled (0x1UL)


/* UARTE_SHORTS: Shortcuts between local events and tasks */
  #define UARTE_SHORTS_ResetValue (0x00000000UL)

/* DMA_RX_END_DMA_RX_START @Bit 5 : Shortcut between event DMA.RX.END and task DMA.RX.START */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Pos (5UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Msk (0x1UL << UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Pos) /*!< Bit mask of
                                                                            DMA_RX_END_DMA_RX_START field.*/
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Min (0x0UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Max (0x1UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Enabled (0x1UL)

/* DMA_RX_END_DMA_RX_STOP @Bit 6 : Shortcut between event DMA.RX.END and task DMA.RX.STOP */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Pos (6UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Msk (0x1UL << UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Pos) /*!< Bit mask of
                                                                            DMA_RX_END_DMA_RX_STOP field.*/
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Min (0x0UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Max (0x1UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Enabled (0x1UL)

/* DMA_TX_END_DMA_TX_STOP @Bit 18 : Shortcut between event DMA.TX.END and task DMA.TX.STOP */
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Pos (18UL)
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Msk (0x1UL << UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Pos) /*!< Bit mask of
                                                                            DMA_TX_END_DMA_TX_STOP field.*/
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Min (0x0UL)
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Max (0x1UL)
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL)
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL)
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL)
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL)
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL)
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos)
                                                                            /*!< Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                           DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                           DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL)

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL)
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos)
                                                                            /*!< Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                           DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                           DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL)

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL)
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos)
                                                                            /*!< Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                           DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                           DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL)

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL)
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos)
                                                                            /*!< Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                           DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                           DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL)
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL)

/* FRAMETIMEOUT_DMA_RX_STOP @Bit 29 : Shortcut between event FRAMETIMEOUT and task DMA.RX.STOP */
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Pos (29UL)
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Msk (0x1UL << UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Pos) /*!< Bit mask of
                                                                            FRAMETIMEOUT_DMA_RX_STOP field.*/
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Min (0x0UL)
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Max (0x1UL)
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Disabled (0x0UL)
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Enabled (0x1UL)


/* UARTE_INTEN: Enable or disable interrupt */
  #define UARTE_INTEN_ResetValue (0x00000000UL)

/* CTS @Bit 0 : Enable or disable interrupt for event CTS */
  #define UARTE_INTEN_CTS_Pos (0UL)
  #define UARTE_INTEN_CTS_Msk (0x1UL << UARTE_INTEN_CTS_Pos)
  #define UARTE_INTEN_CTS_Min (0x0UL)
  #define UARTE_INTEN_CTS_Max (0x1UL)
  #define UARTE_INTEN_CTS_Disabled (0x0UL)
  #define UARTE_INTEN_CTS_Enabled (0x1UL)

/* NCTS @Bit 1 : Enable or disable interrupt for event NCTS */
  #define UARTE_INTEN_NCTS_Pos (1UL)
  #define UARTE_INTEN_NCTS_Msk (0x1UL << UARTE_INTEN_NCTS_Pos)
  #define UARTE_INTEN_NCTS_Min (0x0UL)
  #define UARTE_INTEN_NCTS_Max (0x1UL)
  #define UARTE_INTEN_NCTS_Disabled (0x0UL)
  #define UARTE_INTEN_NCTS_Enabled (0x1UL)

/* TXDRDY @Bit 3 : Enable or disable interrupt for event TXDRDY */
  #define UARTE_INTEN_TXDRDY_Pos (3UL)
  #define UARTE_INTEN_TXDRDY_Msk (0x1UL << UARTE_INTEN_TXDRDY_Pos)
  #define UARTE_INTEN_TXDRDY_Min (0x0UL)
  #define UARTE_INTEN_TXDRDY_Max (0x1UL)
  #define UARTE_INTEN_TXDRDY_Disabled (0x0UL)
  #define UARTE_INTEN_TXDRDY_Enabled (0x1UL)

/* RXDRDY @Bit 4 : Enable or disable interrupt for event RXDRDY */
  #define UARTE_INTEN_RXDRDY_Pos (4UL)
  #define UARTE_INTEN_RXDRDY_Msk (0x1UL << UARTE_INTEN_RXDRDY_Pos)
  #define UARTE_INTEN_RXDRDY_Min (0x0UL)
  #define UARTE_INTEN_RXDRDY_Max (0x1UL)
  #define UARTE_INTEN_RXDRDY_Disabled (0x0UL)
  #define UARTE_INTEN_RXDRDY_Enabled (0x1UL)

/* ERROR @Bit 5 : Enable or disable interrupt for event ERROR */
  #define UARTE_INTEN_ERROR_Pos (5UL)
  #define UARTE_INTEN_ERROR_Msk (0x1UL << UARTE_INTEN_ERROR_Pos)
  #define UARTE_INTEN_ERROR_Min (0x0UL)
  #define UARTE_INTEN_ERROR_Max (0x1UL)
  #define UARTE_INTEN_ERROR_Disabled (0x0UL)
  #define UARTE_INTEN_ERROR_Enabled (0x1UL)

/* RXTO @Bit 9 : Enable or disable interrupt for event RXTO */
  #define UARTE_INTEN_RXTO_Pos (9UL)
  #define UARTE_INTEN_RXTO_Msk (0x1UL << UARTE_INTEN_RXTO_Pos)
  #define UARTE_INTEN_RXTO_Min (0x0UL)
  #define UARTE_INTEN_RXTO_Max (0x1UL)
  #define UARTE_INTEN_RXTO_Disabled (0x0UL)
  #define UARTE_INTEN_RXTO_Enabled (0x1UL)

/* TXSTOPPED @Bit 12 : Enable or disable interrupt for event TXSTOPPED */
  #define UARTE_INTEN_TXSTOPPED_Pos (12UL)
  #define UARTE_INTEN_TXSTOPPED_Msk (0x1UL << UARTE_INTEN_TXSTOPPED_Pos)
  #define UARTE_INTEN_TXSTOPPED_Min (0x0UL)
  #define UARTE_INTEN_TXSTOPPED_Max (0x1UL)
  #define UARTE_INTEN_TXSTOPPED_Disabled (0x0UL)
  #define UARTE_INTEN_TXSTOPPED_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Enable or disable interrupt for event DMARXEND */
  #define UARTE_INTEN_DMARXEND_Pos (19UL)
  #define UARTE_INTEN_DMARXEND_Msk (0x1UL << UARTE_INTEN_DMARXEND_Pos)
  #define UARTE_INTEN_DMARXEND_Min (0x0UL)
  #define UARTE_INTEN_DMARXEND_Max (0x1UL)
  #define UARTE_INTEN_DMARXEND_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Enable or disable interrupt for event DMARXREADY */
  #define UARTE_INTEN_DMARXREADY_Pos (20UL)
  #define UARTE_INTEN_DMARXREADY_Msk (0x1UL << UARTE_INTEN_DMARXREADY_Pos)
  #define UARTE_INTEN_DMARXREADY_Min (0x0UL)
  #define UARTE_INTEN_DMARXREADY_Max (0x1UL)
  #define UARTE_INTEN_DMARXREADY_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Enable or disable interrupt for event DMARXBUSERROR */
  #define UARTE_INTEN_DMARXBUSERROR_Pos (21UL)
  #define UARTE_INTEN_DMARXBUSERROR_Msk (0x1UL << UARTE_INTEN_DMARXBUSERROR_Pos)
  #define UARTE_INTEN_DMARXBUSERROR_Min (0x0UL)
  #define UARTE_INTEN_DMARXBUSERROR_Max (0x1UL)
  #define UARTE_INTEN_DMARXBUSERROR_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Enable or disable interrupt for event DMARXMATCH[0] */
  #define UARTE_INTEN_DMARXMATCH0_Pos (22UL)
  #define UARTE_INTEN_DMARXMATCH0_Msk (0x1UL << UARTE_INTEN_DMARXMATCH0_Pos)
  #define UARTE_INTEN_DMARXMATCH0_Min (0x0UL)
  #define UARTE_INTEN_DMARXMATCH0_Max (0x1UL)
  #define UARTE_INTEN_DMARXMATCH0_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Enable or disable interrupt for event DMARXMATCH[1] */
  #define UARTE_INTEN_DMARXMATCH1_Pos (23UL)
  #define UARTE_INTEN_DMARXMATCH1_Msk (0x1UL << UARTE_INTEN_DMARXMATCH1_Pos)
  #define UARTE_INTEN_DMARXMATCH1_Min (0x0UL)
  #define UARTE_INTEN_DMARXMATCH1_Max (0x1UL)
  #define UARTE_INTEN_DMARXMATCH1_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Enable or disable interrupt for event DMARXMATCH[2] */
  #define UARTE_INTEN_DMARXMATCH2_Pos (24UL)
  #define UARTE_INTEN_DMARXMATCH2_Msk (0x1UL << UARTE_INTEN_DMARXMATCH2_Pos)
  #define UARTE_INTEN_DMARXMATCH2_Min (0x0UL)
  #define UARTE_INTEN_DMARXMATCH2_Max (0x1UL)
  #define UARTE_INTEN_DMARXMATCH2_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Enable or disable interrupt for event DMARXMATCH[3] */
  #define UARTE_INTEN_DMARXMATCH3_Pos (25UL)
  #define UARTE_INTEN_DMARXMATCH3_Msk (0x1UL << UARTE_INTEN_DMARXMATCH3_Pos)
  #define UARTE_INTEN_DMARXMATCH3_Min (0x0UL)
  #define UARTE_INTEN_DMARXMATCH3_Max (0x1UL)
  #define UARTE_INTEN_DMARXMATCH3_Disabled (0x0UL)
  #define UARTE_INTEN_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Enable or disable interrupt for event DMATXEND */
  #define UARTE_INTEN_DMATXEND_Pos (26UL)
  #define UARTE_INTEN_DMATXEND_Msk (0x1UL << UARTE_INTEN_DMATXEND_Pos)
  #define UARTE_INTEN_DMATXEND_Min (0x0UL)
  #define UARTE_INTEN_DMATXEND_Max (0x1UL)
  #define UARTE_INTEN_DMATXEND_Disabled (0x0UL)
  #define UARTE_INTEN_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Enable or disable interrupt for event DMATXREADY */
  #define UARTE_INTEN_DMATXREADY_Pos (27UL)
  #define UARTE_INTEN_DMATXREADY_Msk (0x1UL << UARTE_INTEN_DMATXREADY_Pos)
  #define UARTE_INTEN_DMATXREADY_Min (0x0UL)
  #define UARTE_INTEN_DMATXREADY_Max (0x1UL)
  #define UARTE_INTEN_DMATXREADY_Disabled (0x0UL)
  #define UARTE_INTEN_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Enable or disable interrupt for event DMATXBUSERROR */
  #define UARTE_INTEN_DMATXBUSERROR_Pos (28UL)
  #define UARTE_INTEN_DMATXBUSERROR_Msk (0x1UL << UARTE_INTEN_DMATXBUSERROR_Pos)
  #define UARTE_INTEN_DMATXBUSERROR_Min (0x0UL)
  #define UARTE_INTEN_DMATXBUSERROR_Max (0x1UL)
  #define UARTE_INTEN_DMATXBUSERROR_Disabled (0x0UL)
  #define UARTE_INTEN_DMATXBUSERROR_Enabled (0x1UL)

/* FRAMETIMEOUT @Bit 29 : Enable or disable interrupt for event FRAMETIMEOUT */
  #define UARTE_INTEN_FRAMETIMEOUT_Pos (29UL)
  #define UARTE_INTEN_FRAMETIMEOUT_Msk (0x1UL << UARTE_INTEN_FRAMETIMEOUT_Pos)
  #define UARTE_INTEN_FRAMETIMEOUT_Min (0x0UL)
  #define UARTE_INTEN_FRAMETIMEOUT_Max (0x1UL)
  #define UARTE_INTEN_FRAMETIMEOUT_Disabled (0x0UL)
  #define UARTE_INTEN_FRAMETIMEOUT_Enabled (0x1UL)


/* UARTE_INTENSET: Enable interrupt */
  #define UARTE_INTENSET_ResetValue (0x00000000UL)

/* CTS @Bit 0 : Write '1' to enable interrupt for event CTS */
  #define UARTE_INTENSET_CTS_Pos (0UL)
  #define UARTE_INTENSET_CTS_Msk (0x1UL << UARTE_INTENSET_CTS_Pos)
  #define UARTE_INTENSET_CTS_Min (0x0UL)
  #define UARTE_INTENSET_CTS_Max (0x1UL)
  #define UARTE_INTENSET_CTS_Set (0x1UL)
  #define UARTE_INTENSET_CTS_Disabled (0x0UL)
  #define UARTE_INTENSET_CTS_Enabled (0x1UL)

/* NCTS @Bit 1 : Write '1' to enable interrupt for event NCTS */
  #define UARTE_INTENSET_NCTS_Pos (1UL)
  #define UARTE_INTENSET_NCTS_Msk (0x1UL << UARTE_INTENSET_NCTS_Pos)
  #define UARTE_INTENSET_NCTS_Min (0x0UL)
  #define UARTE_INTENSET_NCTS_Max (0x1UL)
  #define UARTE_INTENSET_NCTS_Set (0x1UL)
  #define UARTE_INTENSET_NCTS_Disabled (0x0UL)
  #define UARTE_INTENSET_NCTS_Enabled (0x1UL)

/* TXDRDY @Bit 3 : Write '1' to enable interrupt for event TXDRDY */
  #define UARTE_INTENSET_TXDRDY_Pos (3UL)
  #define UARTE_INTENSET_TXDRDY_Msk (0x1UL << UARTE_INTENSET_TXDRDY_Pos)
  #define UARTE_INTENSET_TXDRDY_Min (0x0UL)
  #define UARTE_INTENSET_TXDRDY_Max (0x1UL)
  #define UARTE_INTENSET_TXDRDY_Set (0x1UL)
  #define UARTE_INTENSET_TXDRDY_Disabled (0x0UL)
  #define UARTE_INTENSET_TXDRDY_Enabled (0x1UL)

/* RXDRDY @Bit 4 : Write '1' to enable interrupt for event RXDRDY */
  #define UARTE_INTENSET_RXDRDY_Pos (4UL)
  #define UARTE_INTENSET_RXDRDY_Msk (0x1UL << UARTE_INTENSET_RXDRDY_Pos)
  #define UARTE_INTENSET_RXDRDY_Min (0x0UL)
  #define UARTE_INTENSET_RXDRDY_Max (0x1UL)
  #define UARTE_INTENSET_RXDRDY_Set (0x1UL)
  #define UARTE_INTENSET_RXDRDY_Disabled (0x0UL)
  #define UARTE_INTENSET_RXDRDY_Enabled (0x1UL)

/* ERROR @Bit 5 : Write '1' to enable interrupt for event ERROR */
  #define UARTE_INTENSET_ERROR_Pos (5UL)
  #define UARTE_INTENSET_ERROR_Msk (0x1UL << UARTE_INTENSET_ERROR_Pos)
  #define UARTE_INTENSET_ERROR_Min (0x0UL)
  #define UARTE_INTENSET_ERROR_Max (0x1UL)
  #define UARTE_INTENSET_ERROR_Set (0x1UL)
  #define UARTE_INTENSET_ERROR_Disabled (0x0UL)
  #define UARTE_INTENSET_ERROR_Enabled (0x1UL)

/* RXTO @Bit 9 : Write '1' to enable interrupt for event RXTO */
  #define UARTE_INTENSET_RXTO_Pos (9UL)
  #define UARTE_INTENSET_RXTO_Msk (0x1UL << UARTE_INTENSET_RXTO_Pos)
  #define UARTE_INTENSET_RXTO_Min (0x0UL)
  #define UARTE_INTENSET_RXTO_Max (0x1UL)
  #define UARTE_INTENSET_RXTO_Set (0x1UL)
  #define UARTE_INTENSET_RXTO_Disabled (0x0UL)
  #define UARTE_INTENSET_RXTO_Enabled (0x1UL)

/* TXSTOPPED @Bit 12 : Write '1' to enable interrupt for event TXSTOPPED */
  #define UARTE_INTENSET_TXSTOPPED_Pos (12UL)
  #define UARTE_INTENSET_TXSTOPPED_Msk (0x1UL << UARTE_INTENSET_TXSTOPPED_Pos)
  #define UARTE_INTENSET_TXSTOPPED_Min (0x0UL)
  #define UARTE_INTENSET_TXSTOPPED_Max (0x1UL)
  #define UARTE_INTENSET_TXSTOPPED_Set (0x1UL)
  #define UARTE_INTENSET_TXSTOPPED_Disabled (0x0UL)
  #define UARTE_INTENSET_TXSTOPPED_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define UARTE_INTENSET_DMARXEND_Pos (19UL)
  #define UARTE_INTENSET_DMARXEND_Msk (0x1UL << UARTE_INTENSET_DMARXEND_Pos)
  #define UARTE_INTENSET_DMARXEND_Min (0x0UL)
  #define UARTE_INTENSET_DMARXEND_Max (0x1UL)
  #define UARTE_INTENSET_DMARXEND_Set (0x1UL)
  #define UARTE_INTENSET_DMARXEND_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define UARTE_INTENSET_DMARXREADY_Pos (20UL)
  #define UARTE_INTENSET_DMARXREADY_Msk (0x1UL << UARTE_INTENSET_DMARXREADY_Pos)
  #define UARTE_INTENSET_DMARXREADY_Min (0x0UL)
  #define UARTE_INTENSET_DMARXREADY_Max (0x1UL)
  #define UARTE_INTENSET_DMARXREADY_Set (0x1UL)
  #define UARTE_INTENSET_DMARXREADY_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define UARTE_INTENSET_DMARXBUSERROR_Pos (21UL)
  #define UARTE_INTENSET_DMARXBUSERROR_Msk (0x1UL << UARTE_INTENSET_DMARXBUSERROR_Pos)
  #define UARTE_INTENSET_DMARXBUSERROR_Min (0x0UL)
  #define UARTE_INTENSET_DMARXBUSERROR_Max (0x1UL)
  #define UARTE_INTENSET_DMARXBUSERROR_Set (0x1UL)
  #define UARTE_INTENSET_DMARXBUSERROR_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define UARTE_INTENSET_DMARXMATCH0_Pos (22UL)
  #define UARTE_INTENSET_DMARXMATCH0_Msk (0x1UL << UARTE_INTENSET_DMARXMATCH0_Pos)
  #define UARTE_INTENSET_DMARXMATCH0_Min (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH0_Max (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH0_Set (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH0_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define UARTE_INTENSET_DMARXMATCH1_Pos (23UL)
  #define UARTE_INTENSET_DMARXMATCH1_Msk (0x1UL << UARTE_INTENSET_DMARXMATCH1_Pos)
  #define UARTE_INTENSET_DMARXMATCH1_Min (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH1_Max (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH1_Set (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH1_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define UARTE_INTENSET_DMARXMATCH2_Pos (24UL)
  #define UARTE_INTENSET_DMARXMATCH2_Msk (0x1UL << UARTE_INTENSET_DMARXMATCH2_Pos)
  #define UARTE_INTENSET_DMARXMATCH2_Min (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH2_Max (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH2_Set (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH2_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define UARTE_INTENSET_DMARXMATCH3_Pos (25UL)
  #define UARTE_INTENSET_DMARXMATCH3_Msk (0x1UL << UARTE_INTENSET_DMARXMATCH3_Pos)
  #define UARTE_INTENSET_DMARXMATCH3_Min (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH3_Max (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH3_Set (0x1UL)
  #define UARTE_INTENSET_DMARXMATCH3_Disabled (0x0UL)
  #define UARTE_INTENSET_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define UARTE_INTENSET_DMATXEND_Pos (26UL)
  #define UARTE_INTENSET_DMATXEND_Msk (0x1UL << UARTE_INTENSET_DMATXEND_Pos)
  #define UARTE_INTENSET_DMATXEND_Min (0x0UL)
  #define UARTE_INTENSET_DMATXEND_Max (0x1UL)
  #define UARTE_INTENSET_DMATXEND_Set (0x1UL)
  #define UARTE_INTENSET_DMATXEND_Disabled (0x0UL)
  #define UARTE_INTENSET_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define UARTE_INTENSET_DMATXREADY_Pos (27UL)
  #define UARTE_INTENSET_DMATXREADY_Msk (0x1UL << UARTE_INTENSET_DMATXREADY_Pos)
  #define UARTE_INTENSET_DMATXREADY_Min (0x0UL)
  #define UARTE_INTENSET_DMATXREADY_Max (0x1UL)
  #define UARTE_INTENSET_DMATXREADY_Set (0x1UL)
  #define UARTE_INTENSET_DMATXREADY_Disabled (0x0UL)
  #define UARTE_INTENSET_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define UARTE_INTENSET_DMATXBUSERROR_Pos (28UL)
  #define UARTE_INTENSET_DMATXBUSERROR_Msk (0x1UL << UARTE_INTENSET_DMATXBUSERROR_Pos)
  #define UARTE_INTENSET_DMATXBUSERROR_Min (0x0UL)
  #define UARTE_INTENSET_DMATXBUSERROR_Max (0x1UL)
  #define UARTE_INTENSET_DMATXBUSERROR_Set (0x1UL)
  #define UARTE_INTENSET_DMATXBUSERROR_Disabled (0x0UL)
  #define UARTE_INTENSET_DMATXBUSERROR_Enabled (0x1UL)

/* FRAMETIMEOUT @Bit 29 : Write '1' to enable interrupt for event FRAMETIMEOUT */
  #define UARTE_INTENSET_FRAMETIMEOUT_Pos (29UL)
  #define UARTE_INTENSET_FRAMETIMEOUT_Msk (0x1UL << UARTE_INTENSET_FRAMETIMEOUT_Pos)
  #define UARTE_INTENSET_FRAMETIMEOUT_Min (0x0UL)
  #define UARTE_INTENSET_FRAMETIMEOUT_Max (0x1UL)
  #define UARTE_INTENSET_FRAMETIMEOUT_Set (0x1UL)
  #define UARTE_INTENSET_FRAMETIMEOUT_Disabled (0x0UL)
  #define UARTE_INTENSET_FRAMETIMEOUT_Enabled (0x1UL)


/* UARTE_INTENCLR: Disable interrupt */
  #define UARTE_INTENCLR_ResetValue (0x00000000UL)

/* CTS @Bit 0 : Write '1' to disable interrupt for event CTS */
  #define UARTE_INTENCLR_CTS_Pos (0UL)
  #define UARTE_INTENCLR_CTS_Msk (0x1UL << UARTE_INTENCLR_CTS_Pos)
  #define UARTE_INTENCLR_CTS_Min (0x0UL)
  #define UARTE_INTENCLR_CTS_Max (0x1UL)
  #define UARTE_INTENCLR_CTS_Clear (0x1UL)
  #define UARTE_INTENCLR_CTS_Disabled (0x0UL)
  #define UARTE_INTENCLR_CTS_Enabled (0x1UL)

/* NCTS @Bit 1 : Write '1' to disable interrupt for event NCTS */
  #define UARTE_INTENCLR_NCTS_Pos (1UL)
  #define UARTE_INTENCLR_NCTS_Msk (0x1UL << UARTE_INTENCLR_NCTS_Pos)
  #define UARTE_INTENCLR_NCTS_Min (0x0UL)
  #define UARTE_INTENCLR_NCTS_Max (0x1UL)
  #define UARTE_INTENCLR_NCTS_Clear (0x1UL)
  #define UARTE_INTENCLR_NCTS_Disabled (0x0UL)
  #define UARTE_INTENCLR_NCTS_Enabled (0x1UL)

/* TXDRDY @Bit 3 : Write '1' to disable interrupt for event TXDRDY */
  #define UARTE_INTENCLR_TXDRDY_Pos (3UL)
  #define UARTE_INTENCLR_TXDRDY_Msk (0x1UL << UARTE_INTENCLR_TXDRDY_Pos)
  #define UARTE_INTENCLR_TXDRDY_Min (0x0UL)
  #define UARTE_INTENCLR_TXDRDY_Max (0x1UL)
  #define UARTE_INTENCLR_TXDRDY_Clear (0x1UL)
  #define UARTE_INTENCLR_TXDRDY_Disabled (0x0UL)
  #define UARTE_INTENCLR_TXDRDY_Enabled (0x1UL)

/* RXDRDY @Bit 4 : Write '1' to disable interrupt for event RXDRDY */
  #define UARTE_INTENCLR_RXDRDY_Pos (4UL)
  #define UARTE_INTENCLR_RXDRDY_Msk (0x1UL << UARTE_INTENCLR_RXDRDY_Pos)
  #define UARTE_INTENCLR_RXDRDY_Min (0x0UL)
  #define UARTE_INTENCLR_RXDRDY_Max (0x1UL)
  #define UARTE_INTENCLR_RXDRDY_Clear (0x1UL)
  #define UARTE_INTENCLR_RXDRDY_Disabled (0x0UL)
  #define UARTE_INTENCLR_RXDRDY_Enabled (0x1UL)

/* ERROR @Bit 5 : Write '1' to disable interrupt for event ERROR */
  #define UARTE_INTENCLR_ERROR_Pos (5UL)
  #define UARTE_INTENCLR_ERROR_Msk (0x1UL << UARTE_INTENCLR_ERROR_Pos)
  #define UARTE_INTENCLR_ERROR_Min (0x0UL)
  #define UARTE_INTENCLR_ERROR_Max (0x1UL)
  #define UARTE_INTENCLR_ERROR_Clear (0x1UL)
  #define UARTE_INTENCLR_ERROR_Disabled (0x0UL)
  #define UARTE_INTENCLR_ERROR_Enabled (0x1UL)

/* RXTO @Bit 9 : Write '1' to disable interrupt for event RXTO */
  #define UARTE_INTENCLR_RXTO_Pos (9UL)
  #define UARTE_INTENCLR_RXTO_Msk (0x1UL << UARTE_INTENCLR_RXTO_Pos)
  #define UARTE_INTENCLR_RXTO_Min (0x0UL)
  #define UARTE_INTENCLR_RXTO_Max (0x1UL)
  #define UARTE_INTENCLR_RXTO_Clear (0x1UL)
  #define UARTE_INTENCLR_RXTO_Disabled (0x0UL)
  #define UARTE_INTENCLR_RXTO_Enabled (0x1UL)

/* TXSTOPPED @Bit 12 : Write '1' to disable interrupt for event TXSTOPPED */
  #define UARTE_INTENCLR_TXSTOPPED_Pos (12UL)
  #define UARTE_INTENCLR_TXSTOPPED_Msk (0x1UL << UARTE_INTENCLR_TXSTOPPED_Pos)
  #define UARTE_INTENCLR_TXSTOPPED_Min (0x0UL)
  #define UARTE_INTENCLR_TXSTOPPED_Max (0x1UL)
  #define UARTE_INTENCLR_TXSTOPPED_Clear (0x1UL)
  #define UARTE_INTENCLR_TXSTOPPED_Disabled (0x0UL)
  #define UARTE_INTENCLR_TXSTOPPED_Enabled (0x1UL)

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define UARTE_INTENCLR_DMARXEND_Pos (19UL)
  #define UARTE_INTENCLR_DMARXEND_Msk (0x1UL << UARTE_INTENCLR_DMARXEND_Pos)
  #define UARTE_INTENCLR_DMARXEND_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXEND_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXEND_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXEND_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXEND_Enabled (0x1UL)

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define UARTE_INTENCLR_DMARXREADY_Pos (20UL)
  #define UARTE_INTENCLR_DMARXREADY_Msk (0x1UL << UARTE_INTENCLR_DMARXREADY_Pos)
  #define UARTE_INTENCLR_DMARXREADY_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXREADY_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXREADY_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXREADY_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXREADY_Enabled (0x1UL)

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define UARTE_INTENCLR_DMARXBUSERROR_Pos (21UL)
  #define UARTE_INTENCLR_DMARXBUSERROR_Msk (0x1UL << UARTE_INTENCLR_DMARXBUSERROR_Pos)
  #define UARTE_INTENCLR_DMARXBUSERROR_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXBUSERROR_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXBUSERROR_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXBUSERROR_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXBUSERROR_Enabled (0x1UL)

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define UARTE_INTENCLR_DMARXMATCH0_Pos (22UL)
  #define UARTE_INTENCLR_DMARXMATCH0_Msk (0x1UL << UARTE_INTENCLR_DMARXMATCH0_Pos)
  #define UARTE_INTENCLR_DMARXMATCH0_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH0_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH0_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH0_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH0_Enabled (0x1UL)

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define UARTE_INTENCLR_DMARXMATCH1_Pos (23UL)
  #define UARTE_INTENCLR_DMARXMATCH1_Msk (0x1UL << UARTE_INTENCLR_DMARXMATCH1_Pos)
  #define UARTE_INTENCLR_DMARXMATCH1_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH1_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH1_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH1_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH1_Enabled (0x1UL)

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define UARTE_INTENCLR_DMARXMATCH2_Pos (24UL)
  #define UARTE_INTENCLR_DMARXMATCH2_Msk (0x1UL << UARTE_INTENCLR_DMARXMATCH2_Pos)
  #define UARTE_INTENCLR_DMARXMATCH2_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH2_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH2_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH2_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH2_Enabled (0x1UL)

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define UARTE_INTENCLR_DMARXMATCH3_Pos (25UL)
  #define UARTE_INTENCLR_DMARXMATCH3_Msk (0x1UL << UARTE_INTENCLR_DMARXMATCH3_Pos)
  #define UARTE_INTENCLR_DMARXMATCH3_Min (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH3_Max (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH3_Clear (0x1UL)
  #define UARTE_INTENCLR_DMARXMATCH3_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMARXMATCH3_Enabled (0x1UL)

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define UARTE_INTENCLR_DMATXEND_Pos (26UL)
  #define UARTE_INTENCLR_DMATXEND_Msk (0x1UL << UARTE_INTENCLR_DMATXEND_Pos)
  #define UARTE_INTENCLR_DMATXEND_Min (0x0UL)
  #define UARTE_INTENCLR_DMATXEND_Max (0x1UL)
  #define UARTE_INTENCLR_DMATXEND_Clear (0x1UL)
  #define UARTE_INTENCLR_DMATXEND_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMATXEND_Enabled (0x1UL)

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define UARTE_INTENCLR_DMATXREADY_Pos (27UL)
  #define UARTE_INTENCLR_DMATXREADY_Msk (0x1UL << UARTE_INTENCLR_DMATXREADY_Pos)
  #define UARTE_INTENCLR_DMATXREADY_Min (0x0UL)
  #define UARTE_INTENCLR_DMATXREADY_Max (0x1UL)
  #define UARTE_INTENCLR_DMATXREADY_Clear (0x1UL)
  #define UARTE_INTENCLR_DMATXREADY_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMATXREADY_Enabled (0x1UL)

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define UARTE_INTENCLR_DMATXBUSERROR_Pos (28UL)
  #define UARTE_INTENCLR_DMATXBUSERROR_Msk (0x1UL << UARTE_INTENCLR_DMATXBUSERROR_Pos)
  #define UARTE_INTENCLR_DMATXBUSERROR_Min (0x0UL)
  #define UARTE_INTENCLR_DMATXBUSERROR_Max (0x1UL)
  #define UARTE_INTENCLR_DMATXBUSERROR_Clear (0x1UL)
  #define UARTE_INTENCLR_DMATXBUSERROR_Disabled (0x0UL)
  #define UARTE_INTENCLR_DMATXBUSERROR_Enabled (0x1UL)

/* FRAMETIMEOUT @Bit 29 : Write '1' to disable interrupt for event FRAMETIMEOUT */
  #define UARTE_INTENCLR_FRAMETIMEOUT_Pos (29UL)
  #define UARTE_INTENCLR_FRAMETIMEOUT_Msk (0x1UL << UARTE_INTENCLR_FRAMETIMEOUT_Pos)
  #define UARTE_INTENCLR_FRAMETIMEOUT_Min (0x0UL)
  #define UARTE_INTENCLR_FRAMETIMEOUT_Max (0x1UL)
  #define UARTE_INTENCLR_FRAMETIMEOUT_Clear (0x1UL)
  #define UARTE_INTENCLR_FRAMETIMEOUT_Disabled (0x0UL)
  #define UARTE_INTENCLR_FRAMETIMEOUT_Enabled (0x1UL)


/* UARTE_ERRORSRC: Error source */
  #define UARTE_ERRORSRC_ResetValue (0x00000000UL)

/* OVERRUN @Bit 0 : Overrun error */
  #define UARTE_ERRORSRC_OVERRUN_Pos (0UL)
  #define UARTE_ERRORSRC_OVERRUN_Msk (0x1UL << UARTE_ERRORSRC_OVERRUN_Pos)
  #define UARTE_ERRORSRC_OVERRUN_Min (0x0UL)
  #define UARTE_ERRORSRC_OVERRUN_Max (0x1UL)
  #define UARTE_ERRORSRC_OVERRUN_NotPresent (0x0UL)
  #define UARTE_ERRORSRC_OVERRUN_Present (0x1UL)

/* PARITY @Bit 1 : Parity error */
  #define UARTE_ERRORSRC_PARITY_Pos (1UL)
  #define UARTE_ERRORSRC_PARITY_Msk (0x1UL << UARTE_ERRORSRC_PARITY_Pos)
  #define UARTE_ERRORSRC_PARITY_Min (0x0UL)
  #define UARTE_ERRORSRC_PARITY_Max (0x1UL)
  #define UARTE_ERRORSRC_PARITY_NotPresent (0x0UL)
  #define UARTE_ERRORSRC_PARITY_Present (0x1UL)

/* FRAMING @Bit 2 : Framing error occurred */
  #define UARTE_ERRORSRC_FRAMING_Pos (2UL)
  #define UARTE_ERRORSRC_FRAMING_Msk (0x1UL << UARTE_ERRORSRC_FRAMING_Pos)
  #define UARTE_ERRORSRC_FRAMING_Min (0x0UL)
  #define UARTE_ERRORSRC_FRAMING_Max (0x1UL)
  #define UARTE_ERRORSRC_FRAMING_NotPresent (0x0UL)
  #define UARTE_ERRORSRC_FRAMING_Present (0x1UL)

/* BREAK @Bit 3 : Break condition */
  #define UARTE_ERRORSRC_BREAK_Pos (3UL)
  #define UARTE_ERRORSRC_BREAK_Msk (0x1UL << UARTE_ERRORSRC_BREAK_Pos)
  #define UARTE_ERRORSRC_BREAK_Min (0x0UL)
  #define UARTE_ERRORSRC_BREAK_Max (0x1UL)
  #define UARTE_ERRORSRC_BREAK_NotPresent (0x0UL)
  #define UARTE_ERRORSRC_BREAK_Present (0x1UL)


/* UARTE_ENABLE: Enable UART */
  #define UARTE_ENABLE_ResetValue (0x00000000UL)

/* ENABLE @Bits 0..3 : Enable or disable UARTE */
  #define UARTE_ENABLE_ENABLE_Pos (0UL)
  #define UARTE_ENABLE_ENABLE_Msk (0xFUL << UARTE_ENABLE_ENABLE_Pos)
  #define UARTE_ENABLE_ENABLE_Min (0x0UL)
  #define UARTE_ENABLE_ENABLE_Max (0x8UL)
  #define UARTE_ENABLE_ENABLE_Disabled (0x0UL)
  #define UARTE_ENABLE_ENABLE_Enabled (0x8UL)


/* UARTE_BAUDRATE: Baud rate. Accuracy depends on the HFCLK source selected. */
  #define UARTE_BAUDRATE_ResetValue (0x04000000UL)

/* BAUDRATE @Bits 0..31 : Baud rate */
  #define UARTE_BAUDRATE_BAUDRATE_Pos (0UL)
  #define UARTE_BAUDRATE_BAUDRATE_Msk (0xFFFFFFFFUL << UARTE_BAUDRATE_BAUDRATE_Pos)
  #define UARTE_BAUDRATE_BAUDRATE_Min (0x4F000UL)
  #define UARTE_BAUDRATE_BAUDRATE_Max (0x10000000UL)
  #define UARTE_BAUDRATE_BAUDRATE_Baud1200 (0x0004F000UL) /*!< 1200 baud (actual rate: 1205) when UARTE has 16 MHz peripheral
                                                               clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud2400 (0x0009D000UL) /*!< 2400 baud (actual rate: 2396) when UARTE has 16 MHz peripheral
                                                               clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud4800 (0x0013B000UL) /*!< 4800 baud (actual rate: 4808) when UARTE has 16 MHz peripheral
                                                               clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud9600 (0x00275000UL) /*!< 9600 baud (actual rate: 9598) when UARTE has 16 MHz peripheral
                                                               clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud14400 (0x003AF000UL) /*!< 14400 baud (actual rate: 14401) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud19200 (0x004EA000UL) /*!< 19200 baud (actual rate: 19208) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud28800 (0x0075C000UL) /*!< 28800 baud (actual rate: 28777) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud31250 (0x00800000UL)
  #define UARTE_BAUDRATE_BAUDRATE_Baud38400 (0x009D0000UL) /*!< 38400 baud (actual rate: 38369) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud56000 (0x00E50000UL) /*!< 56000 baud (actual rate: 55944) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud57600 (0x00EB0000UL) /*!< 57600 baud (actual rate: 57554) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud76800 (0x013A9000UL) /*!< 76800 baud (actual rate: 76923) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud115200 (0x01D60000UL) /*!< 115200 baud (actual rate: 115108) when UARTE has 16 MHz
                                                                 peripheral clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud230400 (0x03B00000UL) /*!< 230400 baud (actual rate: 231884) when UARTE has 16 MHz
                                                                 peripheral clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud250000 (0x04000000UL)
  #define UARTE_BAUDRATE_BAUDRATE_Baud460800 (0x07400000UL) /*!< 460800 baud (actual rate: 457143) when UARTE has 16 MHz
                                                                 peripheral clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud921600 (0x0F000000UL) /*!< 921600 baud (actual rate: 941176) when UARTE has 16 MHz
                                                                 peripheral clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud1M (0x10000000UL)


/* UARTE_CONFIG: Configuration of parity, hardware flow control, framesize, and packet timeout. */
  #define UARTE_CONFIG_ResetValue (0x00001000UL)

/* HWFC @Bit 0 : Hardware flow control */
  #define UARTE_CONFIG_HWFC_Pos (0UL)
  #define UARTE_CONFIG_HWFC_Msk (0x1UL << UARTE_CONFIG_HWFC_Pos)
  #define UARTE_CONFIG_HWFC_Min (0x0UL)
  #define UARTE_CONFIG_HWFC_Max (0x1UL)
  #define UARTE_CONFIG_HWFC_Disabled (0x0UL)
  #define UARTE_CONFIG_HWFC_Enabled (0x1UL)

/* PARITY @Bits 1..3 : Parity */
  #define UARTE_CONFIG_PARITY_Pos (1UL)
  #define UARTE_CONFIG_PARITY_Msk (0x7UL << UARTE_CONFIG_PARITY_Pos)
  #define UARTE_CONFIG_PARITY_Min (0x0UL)
  #define UARTE_CONFIG_PARITY_Max (0x7UL)
  #define UARTE_CONFIG_PARITY_Excluded (0x0UL)
  #define UARTE_CONFIG_PARITY_Included (0x7UL)

/* STOP @Bit 4 : Stop bits */
  #define UARTE_CONFIG_STOP_Pos (4UL)
  #define UARTE_CONFIG_STOP_Msk (0x1UL << UARTE_CONFIG_STOP_Pos)
  #define UARTE_CONFIG_STOP_Min (0x0UL)
  #define UARTE_CONFIG_STOP_Max (0x1UL)
  #define UARTE_CONFIG_STOP_One (0x0UL)
  #define UARTE_CONFIG_STOP_Two (0x1UL)

/* PARITYTYPE @Bit 8 : Even or odd parity type */
  #define UARTE_CONFIG_PARITYTYPE_Pos (8UL)
  #define UARTE_CONFIG_PARITYTYPE_Msk (0x1UL << UARTE_CONFIG_PARITYTYPE_Pos)
  #define UARTE_CONFIG_PARITYTYPE_Min (0x0UL)
  #define UARTE_CONFIG_PARITYTYPE_Max (0x1UL)
  #define UARTE_CONFIG_PARITYTYPE_Even (0x0UL)
  #define UARTE_CONFIG_PARITYTYPE_Odd (0x1UL)

/* FRAMESIZE @Bits 9..12 : Set the data frame size */
  #define UARTE_CONFIG_FRAMESIZE_Pos (9UL)
  #define UARTE_CONFIG_FRAMESIZE_Msk (0xFUL << UARTE_CONFIG_FRAMESIZE_Pos)
  #define UARTE_CONFIG_FRAMESIZE_Min (0x4UL)
  #define UARTE_CONFIG_FRAMESIZE_Max (0x9UL)
  #define UARTE_CONFIG_FRAMESIZE_9bit (0x9UL)
  #define UARTE_CONFIG_FRAMESIZE_8bit (0x8UL)
  #define UARTE_CONFIG_FRAMESIZE_7bit (0x7UL)
  #define UARTE_CONFIG_FRAMESIZE_6bit (0x6UL)
  #define UARTE_CONFIG_FRAMESIZE_5bit (0x5UL)
  #define UARTE_CONFIG_FRAMESIZE_4bit (0x4UL)

/* ENDIAN @Bit 13 : Select if data is trimmed from MSB or LSB end when the data frame size is less than 8. */
  #define UARTE_CONFIG_ENDIAN_Pos (13UL)
  #define UARTE_CONFIG_ENDIAN_Msk (0x1UL << UARTE_CONFIG_ENDIAN_Pos)
  #define UARTE_CONFIG_ENDIAN_Min (0x0UL)
  #define UARTE_CONFIG_ENDIAN_Max (0x1UL)
  #define UARTE_CONFIG_ENDIAN_MSB (0x0UL)
  #define UARTE_CONFIG_ENDIAN_LSB (0x1UL)

/* FRAMETIMEOUT @Bit 14 : Enable packet timeout. */
  #define UARTE_CONFIG_FRAMETIMEOUT_Pos (14UL)
  #define UARTE_CONFIG_FRAMETIMEOUT_Msk (0x1UL << UARTE_CONFIG_FRAMETIMEOUT_Pos)
  #define UARTE_CONFIG_FRAMETIMEOUT_Min (0x0UL)
  #define UARTE_CONFIG_FRAMETIMEOUT_Max (0x1UL)
  #define UARTE_CONFIG_FRAMETIMEOUT_DISABLED (0x0UL)
  #define UARTE_CONFIG_FRAMETIMEOUT_ENABLED (0x1UL)


/* UARTE_ADDRESS: Set the address of the UARTE for RX when used in 9 bit data frame mode. */
  #define UARTE_ADDRESS_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..7 : Set address */
  #define UARTE_ADDRESS_ADDRESS_Pos (0UL)
  #define UARTE_ADDRESS_ADDRESS_Msk (0xFFUL << UARTE_ADDRESS_ADDRESS_Pos)


/* UARTE_FRAMETIMEOUT: Set the number of UARTE bits to count before triggering packet timeout. */
  #define UARTE_FRAMETIMEOUT_ResetValue (0x00000010UL)

/* COUNTERTOP @Bits 0..9 : Number of UARTE bits before timeout. */
  #define UARTE_FRAMETIMEOUT_COUNTERTOP_Pos (0UL)
  #define UARTE_FRAMETIMEOUT_COUNTERTOP_Msk (0x3FFUL << UARTE_FRAMETIMEOUT_COUNTERTOP_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           UICR                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct UICR_APPROTECT ================================================== */
/**
  * @brief APPROTECT [UICR_APPROTECT] Access Port Protection Registers
  */
typedef struct {
  __IOM uint32_t  PROTECT0;
  __IM  uint32_t  RESERVED[6];
  __IOM uint32_t  PROTECT1;
} NRF_UICR_APPROTECT_Type;
  #define UICR_APPROTECT_MaxCount (1UL)
  #define UICR_APPROTECT_MaxIndex (0UL)
  #define UICR_APPROTECT_MinIndex (0UL)

/* UICR_APPROTECT_PROTECT0: Access port protection */
  #define UICR_APPROTECT_PROTECT0_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_APPROTECT_PROTECT0_PALL_Pos (0UL)
  #define UICR_APPROTECT_PROTECT0_PALL_Msk (0xFFFFFFFFUL << UICR_APPROTECT_PROTECT0_PALL_Pos)
  #define UICR_APPROTECT_PROTECT0_PALL_Min (0xFFFFFFFFUL)
  #define UICR_APPROTECT_PROTECT0_PALL_Max (0xFFFFFFFFUL)
  #define UICR_APPROTECT_PROTECT0_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.DOMAIN DBGEN and NIDEN signal
                                                                       protectors unlocked and under CPU control.*/


/* UICR_APPROTECT_PROTECT1: Access port protection */
  #define UICR_APPROTECT_PROTECT1_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_APPROTECT_PROTECT1_PALL_Pos (0UL)
  #define UICR_APPROTECT_PROTECT1_PALL_Msk (0xFFFFFFFFUL << UICR_APPROTECT_PROTECT1_PALL_Pos)
  #define UICR_APPROTECT_PROTECT1_PALL_Min (0xFFFFFFFFUL)
  #define UICR_APPROTECT_PROTECT1_PALL_Max (0xFFFFFFFFUL)
  #define UICR_APPROTECT_PROTECT1_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.DOMAIN DBGEN and NIDEN signal
                                                                       protectors unlocked and under CPU control.*/



/* =============================================== Struct UICR_SECUREAPPROTECT =============================================== */
/**
  * @brief SECUREAPPROTECT [UICR_SECUREAPPROTECT] Access Port Protection Registers
  */
typedef struct {
  __IOM uint32_t  PROTECT0;
  __IM  uint32_t  RESERVED[6];
  __IOM uint32_t  PROTECT1;
} NRF_UICR_SECUREAPPROTECT_Type;
  #define UICR_SECUREAPPROTECT_MaxCount (1UL)
  #define UICR_SECUREAPPROTECT_MaxIndex (0UL)
  #define UICR_SECUREAPPROTECT_MinIndex (0UL)

/* UICR_SECUREAPPROTECT_PROTECT0: Access port protection */
  #define UICR_SECUREAPPROTECT_PROTECT0_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_SECUREAPPROTECT_PROTECT0_PALL_Pos (0UL)
  #define UICR_SECUREAPPROTECT_PROTECT0_PALL_Msk (0xFFFFFFFFUL << UICR_SECUREAPPROTECT_PROTECT0_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_SECUREAPPROTECT_PROTECT0_PALL_Min (0xFFFFFFFFUL)
  #define UICR_SECUREAPPROTECT_PROTECT0_PALL_Max (0xFFFFFFFFUL)
  #define UICR_SECUREAPPROTECT_PROTECT0_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.DOMAIN SPIDEN and SPNIDEN
                                                                            signal protectors unlocked and under CPU control.*/


/* UICR_SECUREAPPROTECT_PROTECT1: Access port protection register */
  #define UICR_SECUREAPPROTECT_PROTECT1_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_SECUREAPPROTECT_PROTECT1_PALL_Pos (0UL)
  #define UICR_SECUREAPPROTECT_PROTECT1_PALL_Msk (0xFFFFFFFFUL << UICR_SECUREAPPROTECT_PROTECT1_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_SECUREAPPROTECT_PROTECT1_PALL_Min (0xFFFFFFFFUL)
  #define UICR_SECUREAPPROTECT_PROTECT1_PALL_Max (0xFFFFFFFFUL)
  #define UICR_SECUREAPPROTECT_PROTECT1_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.DOMAIN SPIDEN and SPNIDEN
                                                                            signal protectors unlocked and under CPU control.*/



/* ================================================ Struct UICR_AUXAPPROTECT ================================================= */
/**
  * @brief AUXAPPROTECT [UICR_AUXAPPROTECT] Access Port Protection Registers
  */
typedef struct {
  __IOM uint32_t  PROTECT0;
  __IM  uint32_t  RESERVED[6];
  __IOM uint32_t  PROTECT1;
} NRF_UICR_AUXAPPROTECT_Type;
  #define UICR_AUXAPPROTECT_MaxCount (1UL)
  #define UICR_AUXAPPROTECT_MaxIndex (0UL)
  #define UICR_AUXAPPROTECT_MinIndex (0UL)

/* UICR_AUXAPPROTECT_PROTECT0: Access port protection */
  #define UICR_AUXAPPROTECT_PROTECT0_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_AUXAPPROTECT_PROTECT0_PALL_Pos (0UL)
  #define UICR_AUXAPPROTECT_PROTECT0_PALL_Msk (0xFFFFFFFFUL << UICR_AUXAPPROTECT_PROTECT0_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_AUXAPPROTECT_PROTECT0_PALL_Min (0xFFFFFFFFUL)
  #define UICR_AUXAPPROTECT_PROTECT0_PALL_Max (0xFFFFFFFFUL)
  #define UICR_AUXAPPROTECT_PROTECT0_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.AP DBGEN signal protector
                                                                          unlocked and under CPU control.*/


/* UICR_AUXAPPROTECT_PROTECT1: Access port protection register */
  #define UICR_AUXAPPROTECT_PROTECT1_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_AUXAPPROTECT_PROTECT1_PALL_Pos (0UL)
  #define UICR_AUXAPPROTECT_PROTECT1_PALL_Msk (0xFFFFFFFFUL << UICR_AUXAPPROTECT_PROTECT1_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_AUXAPPROTECT_PROTECT1_PALL_Min (0xFFFFFFFFUL)
  #define UICR_AUXAPPROTECT_PROTECT1_PALL_Max (0xFFFFFFFFUL)
  #define UICR_AUXAPPROTECT_PROTECT1_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.AP DBGEN signal protector
                                                                          unlocked and under CPU control.*/



/* ================================================ Struct UICR_ERASEPROTECT ================================================= */
/**
  * @brief ERASEPROTECT [UICR_ERASEPROTECT] Erase Protection Registers
  */
typedef struct {
  __IOM uint32_t  PROTECT0;
  __IM  uint32_t  RESERVED[6];
  __IOM uint32_t  PROTECT1;
} NRF_UICR_ERASEPROTECT_Type;
  #define UICR_ERASEPROTECT_MaxCount (1UL)
  #define UICR_ERASEPROTECT_MaxIndex (0UL)
  #define UICR_ERASEPROTECT_MinIndex (0UL)

/* UICR_ERASEPROTECT_PROTECT0: Erase protection */
  #define UICR_ERASEPROTECT_PROTECT0_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Pos (0UL)
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Msk (0xFFFFFFFFUL << UICR_ERASEPROTECT_PROTECT0_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Min (0x50FA50FAUL)
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Max (0x50FA50FAUL)
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Protected (0x50FA50FAUL) /*!< The device can be erased using the CTRL-AP Erase all
                                                                        function and TAMPC PROTECT.ERASEPROTECT signal protector
                                                                        is unlocked.*/


/* UICR_ERASEPROTECT_PROTECT1: Erase protection */
  #define UICR_ERASEPROTECT_PROTECT1_ResetValue (0xFFFFFFFFUL)

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Pos (0UL)
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Msk (0xFFFFFFFFUL << UICR_ERASEPROTECT_PROTECT1_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Min (0x50FA50FAUL)
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Max (0x50FA50FAUL)
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Protected (0x50FA50FAUL) /*!< The device can be erased using the CTRL-AP Erase all
                                                                        function and TAMPC PROTECT.ERASEPROTECT signal protector
                                                                        is unlocked.*/



/* =============================================== Struct UICR_USER_ROT_PUBKEY =============================================== */
/**
  * @brief PUBKEY [UICR_USER_ROT_PUBKEY] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DIGEST[8];                         /*!< (@ 0x00000000) First 256 bits of SHA2-512 digest over RoT public key
                                                                         generation [n].*/
  __IOM uint32_t  REVOKE[3];
} NRF_UICR_USER_ROT_PUBKEY_Type;
  #define UICR_USER_ROT_PUBKEY_MaxCount (4UL)
  #define UICR_USER_ROT_PUBKEY_MaxIndex (3UL)
  #define UICR_USER_ROT_PUBKEY_MinIndex (0UL)

/* UICR_USER_ROT_PUBKEY_DIGEST: First 256 bits of SHA2-512 digest over RoT public key generation [n]. */
  #define UICR_USER_ROT_PUBKEY_DIGEST_MaxCount (8UL)
  #define UICR_USER_ROT_PUBKEY_DIGEST_MaxIndex (7UL)
  #define UICR_USER_ROT_PUBKEY_DIGEST_MinIndex (0UL)
  #define UICR_USER_ROT_PUBKEY_DIGEST_ResetValue (0xFFFFFFFFUL)

/* VALUE @Bits 0..31 : Value for word [o] in the key digest [n]. */
  #define UICR_USER_ROT_PUBKEY_DIGEST_VALUE_Pos (0UL)
  #define UICR_USER_ROT_PUBKEY_DIGEST_VALUE_Msk (0xFFFFFFFFUL << UICR_USER_ROT_PUBKEY_DIGEST_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/


/* UICR_USER_ROT_PUBKEY_REVOKE: Revocation status for RoT public key generation [n]. */
  #define UICR_USER_ROT_PUBKEY_REVOKE_MaxCount (3UL)
  #define UICR_USER_ROT_PUBKEY_REVOKE_MaxIndex (2UL)
  #define UICR_USER_ROT_PUBKEY_REVOKE_MinIndex (0UL)
  #define UICR_USER_ROT_PUBKEY_REVOKE_ResetValue (0xFFFFFFFFUL)

/* STATUS @Bits 0..31 : Revocation status. */
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Pos (0UL)
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Msk (0xFFFFFFFFUL << UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Pos) /*!< Bit mask of
                                                                            STATUS field.*/
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Min (0xFFFFFFFFUL)
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Max (0xFFFFFFFFUL)
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_NotRevoked (0xFFFFFFFFUL)



/* ============================================= Struct UICR_USER_ROT_AUTHOPKEY ============================================== */
/**
  * @brief AUTHOPKEY [UICR_USER_ROT_AUTHOPKEY] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DIGEST[8];                         /*!< (@ 0x00000000) First 256 bits of SHA2-512 digest over RoT
                                                                         authenticated operation public key generation [n].*/
  __IOM uint32_t  REVOKE[3];                         /*!< (@ 0x00000020) Revocation status for RoT authenticated operation
                                                                         public key generation [n].*/
} NRF_UICR_USER_ROT_AUTHOPKEY_Type;
  #define UICR_USER_ROT_AUTHOPKEY_MaxCount (4UL)
  #define UICR_USER_ROT_AUTHOPKEY_MaxIndex (3UL)
  #define UICR_USER_ROT_AUTHOPKEY_MinIndex (0UL)

/* UICR_USER_ROT_AUTHOPKEY_DIGEST: First 256 bits of SHA2-512 digest over RoT authenticated operation public key generation [n].
                                    */

  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_MaxCount (8UL)
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_MaxIndex (7UL)
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_MinIndex (0UL)
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_ResetValue (0xFFFFFFFFUL)

/* VALUE @Bits 0..31 : Value for word [o] in the key digest [n]. */
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_VALUE_Pos (0UL)
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_VALUE_Msk (0xFFFFFFFFUL << UICR_USER_ROT_AUTHOPKEY_DIGEST_VALUE_Pos) /*!< Bit mask of
                                                                            VALUE field.*/


/* UICR_USER_ROT_AUTHOPKEY_REVOKE: Revocation status for RoT authenticated operation public key generation [n]. */
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_MaxCount (3UL)
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_MaxIndex (2UL)
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_MinIndex (0UL)
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_ResetValue (0xFFFFFFFFUL)

/* STATUS @Bits 0..31 : Revocation status. */
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Pos (0UL)
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Msk (0xFFFFFFFFUL << UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Pos) /*!< Bit mask of
                                                                            STATUS field.*/
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Min (0xFFFFFFFFUL)
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Max (0xFFFFFFFFUL)
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_NotRevoked (0xFFFFFFFFUL)



/* ================================================== Struct UICR_USER_ROT =================================================== */
/**
  * @brief ROT [UICR_USER_ROT] Assets installed to establish initial Root of Trust in the device.
  */
typedef struct {
  __IOM NRF_UICR_USER_ROT_PUBKEY_Type PUBKEY[4];
  __IOM NRF_UICR_USER_ROT_AUTHOPKEY_Type AUTHOPKEY[4];
} NRF_UICR_USER_ROT_Type;


/* ==================================================== Struct UICR_USER ===================================================== */
/**
  * @brief USER [UICR_USER] (unspecified)
  */
typedef struct {
  __IOM NRF_UICR_USER_ROT_Type ROT;                  /*!< (@ 0x00000000) Assets installed to establish initial Root of Trust in
                                                                         the device.*/
} NRF_UICR_USER_Type;

/* ======================================================= Struct UICR ======================================================= */
/**
  * @brief User Information Configuration Registers
  */
  typedef struct {
    __IOM NRF_UICR_APPROTECT_Type APPROTECT[1];
    __IOM NRF_UICR_SECUREAPPROTECT_Type SECUREAPPROTECT[1];
    __IOM NRF_UICR_AUXAPPROTECT_Type AUXAPPROTECT[1];
    __IOM NRF_UICR_ERASEPROTECT_Type ERASEPROTECT[1];
    __IOM uint32_t BOOTCONF;
    __IM uint32_t RESERVED[95];
    __IOM NRF_UICR_USER_Type USER;
    __IM uint32_t RESERVED1[104];
    __IOM uint32_t OTP[320];
  } NRF_UICR_Type;

/* UICR_BOOTCONF: Immutable boot region configuration. */
  #define UICR_BOOTCONF_ResetValue (0xFFFFFFFFUL)

/* READ @Bit 0 : Read access */
  #define UICR_BOOTCONF_READ_Pos (0UL)
  #define UICR_BOOTCONF_READ_Msk (0x1UL << UICR_BOOTCONF_READ_Pos)
  #define UICR_BOOTCONF_READ_Min (0x0UL)
  #define UICR_BOOTCONF_READ_Max (0x1UL)
  #define UICR_BOOTCONF_READ_NotAllowed (0x0UL)
  #define UICR_BOOTCONF_READ_Allowed (0x1UL)

/* WRITE @Bit 1 : Write access */
  #define UICR_BOOTCONF_WRITE_Pos (1UL)
  #define UICR_BOOTCONF_WRITE_Msk (0x1UL << UICR_BOOTCONF_WRITE_Pos)
  #define UICR_BOOTCONF_WRITE_Min (0x0UL)
  #define UICR_BOOTCONF_WRITE_Max (0x1UL)
  #define UICR_BOOTCONF_WRITE_NotAllowed (0x0UL)
  #define UICR_BOOTCONF_WRITE_Allowed (0x1UL)

/* EXECUTE @Bit 2 : Execute access */
  #define UICR_BOOTCONF_EXECUTE_Pos (2UL)
  #define UICR_BOOTCONF_EXECUTE_Msk (0x1UL << UICR_BOOTCONF_EXECUTE_Pos)
  #define UICR_BOOTCONF_EXECUTE_Min (0x0UL)
  #define UICR_BOOTCONF_EXECUTE_Max (0x1UL)
  #define UICR_BOOTCONF_EXECUTE_NotAllowed (0x0UL)
  #define UICR_BOOTCONF_EXECUTE_Allowed (0x1UL)

/* SECURE @Bit 3 : Secure access */
  #define UICR_BOOTCONF_SECURE_Pos (3UL)
  #define UICR_BOOTCONF_SECURE_Msk (0x1UL << UICR_BOOTCONF_SECURE_Pos)
  #define UICR_BOOTCONF_SECURE_Min (0x0UL)
  #define UICR_BOOTCONF_SECURE_Max (0x1UL)
  #define UICR_BOOTCONF_SECURE_NonSecure (0x0UL)
  #define UICR_BOOTCONF_SECURE_Secure (0x1UL)

/* WRITEONCE @Bit 12 : Write-once */
  #define UICR_BOOTCONF_WRITEONCE_Pos (12UL)
  #define UICR_BOOTCONF_WRITEONCE_Msk (0x1UL << UICR_BOOTCONF_WRITEONCE_Pos)
  #define UICR_BOOTCONF_WRITEONCE_Min (0x0UL)
  #define UICR_BOOTCONF_WRITEONCE_Max (0x1UL)
  #define UICR_BOOTCONF_WRITEONCE_Disabled (0x0UL)
  #define UICR_BOOTCONF_WRITEONCE_Enabled (0x1UL)

/* LOCK @Bit 13 : Enable lock of configuration register */
  #define UICR_BOOTCONF_LOCK_Pos (13UL)
  #define UICR_BOOTCONF_LOCK_Msk (0x1UL << UICR_BOOTCONF_LOCK_Pos)
  #define UICR_BOOTCONF_LOCK_Min (0x0UL)
  #define UICR_BOOTCONF_LOCK_Max (0x1UL)
  #define UICR_BOOTCONF_LOCK_Disabled (0x0UL)        /*!< Lock is disabled, and the MRAMC region configuration registers for the
                                                          immutable boot region are writable.*/
  #define UICR_BOOTCONF_LOCK_Enabled (0x1UL)         /*!< Lock is enabled, and the MRAMC configuration registers for the
                                                          immutable boot region are read-only.*/

/* SIZE @Bits 16..20 : Immutable boot region size */
  #define UICR_BOOTCONF_SIZE_Pos (16UL)
  #define UICR_BOOTCONF_SIZE_Msk (0x1FUL << UICR_BOOTCONF_SIZE_Pos)


/* UICR_OTP: One time programmable memory */
  #define UICR_OTP_MaxCount (320UL)
  #define UICR_OTP_MaxIndex (319UL)
  #define UICR_OTP_MinIndex (0UL)
  #define UICR_OTP_ResetValue (0xFFFFFFFFUL)

/* OTP @Bits 0..31 : OTP word */
  #define UICR_OTP_OTP_Pos (0UL)
  #define UICR_OTP_OTP_Msk (0xFFFFFFFFUL << UICR_OTP_OTP_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           USBHS                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ==================================================== Struct USBHS_PHY ===================================================== */
/**
  * @brief PHY [USBHS_PHY] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CONFIG;
  __IOM uint32_t  CLOCK;
  __IM  uint32_t  RESERVED[4];
  __IOM uint32_t  INPUTOVERRIDE;                     /*!< (@ 0x00000018) Enables overriding of individual signals to the PHY,
                                                                         the override values are set in PHY.OVERRIDEVALUES*/
  __IOM uint32_t  OVERRIDEVALUES;                    /*!< (@ 0x0000001C) Values that are used to override the input signals to
                                                                         the PHY.*/
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  RTUNE;                             /*!< (@ 0x00000024) The RTUNE mode is an alternative method for calibrating
                                                                         the DP and DM 45-Ohm source impedance.*/
} NRF_USBHS_PHY_Type;

/* USBHS_PHY_CONFIG: USB PHY parameter overrides */
  #define USBHS_PHY_CONFIG_ResetValue (0x5533D6F0UL)

/* PLLITUNE @Bits 0..1 : PLL Integral Path Tune */
  #define USBHS_PHY_CONFIG_PLLITUNE_Pos (0UL)
  #define USBHS_PHY_CONFIG_PLLITUNE_Msk (0x3UL << USBHS_PHY_CONFIG_PLLITUNE_Pos)
  #define USBHS_PHY_CONFIG_PLLITUNE_Min (0x0UL)
  #define USBHS_PHY_CONFIG_PLLITUNE_Max (0x3UL)

/* PLLPTUNE @Bits 2..5 : PLL Proportional Path Tune */
  #define USBHS_PHY_CONFIG_PLLPTUNE_Pos (2UL)
  #define USBHS_PHY_CONFIG_PLLPTUNE_Msk (0xFUL << USBHS_PHY_CONFIG_PLLPTUNE_Pos)
  #define USBHS_PHY_CONFIG_PLLPTUNE_Min (0x0UL)
  #define USBHS_PHY_CONFIG_PLLPTUNE_Max (0xFUL)

/* COMPDISTUNE0 @Bits 6..8 : Disconnect Threshold Adjustment */
  #define USBHS_PHY_CONFIG_COMPDISTUNE0_Pos (6UL)
  #define USBHS_PHY_CONFIG_COMPDISTUNE0_Msk (0x7UL << USBHS_PHY_CONFIG_COMPDISTUNE0_Pos)
  #define USBHS_PHY_CONFIG_COMPDISTUNE0_Min (0x0UL)
  #define USBHS_PHY_CONFIG_COMPDISTUNE0_Max (0x7UL)

/* SQRXTUNE0 @Bits 9..11 : Squelch Threshold Adjustment */
  #define USBHS_PHY_CONFIG_SQRXTUNE0_Pos (9UL)
  #define USBHS_PHY_CONFIG_SQRXTUNE0_Msk (0x7UL << USBHS_PHY_CONFIG_SQRXTUNE0_Pos)
  #define USBHS_PHY_CONFIG_SQRXTUNE0_Min (0x0UL)
  #define USBHS_PHY_CONFIG_SQRXTUNE0_Max (0x3UL)

/* VDATREFTUNE0 @Bits 12..13 : Data Detect Voltage Adjustment */
  #define USBHS_PHY_CONFIG_VDATREFTUNE0_Pos (12UL)
  #define USBHS_PHY_CONFIG_VDATREFTUNE0_Msk (0x3UL << USBHS_PHY_CONFIG_VDATREFTUNE0_Pos)
  #define USBHS_PHY_CONFIG_VDATREFTUNE0_Min (0x0UL)
  #define USBHS_PHY_CONFIG_VDATREFTUNE0_Max (0x3UL)

/* TXHSXVTUNE0 @Bits 14..15 : Transmitter High-Speed Crossover Adjustment */
  #define USBHS_PHY_CONFIG_TXHSXVTUNE0_Pos (14UL)
  #define USBHS_PHY_CONFIG_TXHSXVTUNE0_Msk (0x3UL << USBHS_PHY_CONFIG_TXHSXVTUNE0_Pos)
  #define USBHS_PHY_CONFIG_TXHSXVTUNE0_Min (0x0UL)
  #define USBHS_PHY_CONFIG_TXHSXVTUNE0_Max (0x2UL)

/* TXFSLSTUNE0 @Bits 16..19 : FS/LS Source Impedance Adjustment */
  #define USBHS_PHY_CONFIG_TXFSLSTUNE0_Pos (16UL)
  #define USBHS_PHY_CONFIG_TXFSLSTUNE0_Msk (0xFUL << USBHS_PHY_CONFIG_TXFSLSTUNE0_Pos)
  #define USBHS_PHY_CONFIG_TXFSLSTUNE0_Min (0x0UL)
  #define USBHS_PHY_CONFIG_TXFSLSTUNE0_Max (0x7UL)

/* TXVREFTUNE0 @Bits 20..23 : HS DC Voltage Level Adjustment */
  #define USBHS_PHY_CONFIG_TXVREFTUNE0_Pos (20UL)
  #define USBHS_PHY_CONFIG_TXVREFTUNE0_Msk (0xFUL << USBHS_PHY_CONFIG_TXVREFTUNE0_Pos)
  #define USBHS_PHY_CONFIG_TXVREFTUNE0_Min (0x0UL)
  #define USBHS_PHY_CONFIG_TXVREFTUNE0_Max (0x7UL)

/* TXRISETUNE0 @Bits 24..25 : HS Transmitter Rise/Fall Time Adjustment */
  #define USBHS_PHY_CONFIG_TXRISETUNE0_Pos (24UL)
  #define USBHS_PHY_CONFIG_TXRISETUNE0_Msk (0x3UL << USBHS_PHY_CONFIG_TXRISETUNE0_Pos)
  #define USBHS_PHY_CONFIG_TXRISETUNE0_Min (0x0UL)
  #define USBHS_PHY_CONFIG_TXRISETUNE0_Max (0x2UL)

/* TXRESTUNE0 @Bits 26..27 : USB Source Impedance Adjustment */
  #define USBHS_PHY_CONFIG_TXRESTUNE0_Pos (26UL)
  #define USBHS_PHY_CONFIG_TXRESTUNE0_Msk (0x3UL << USBHS_PHY_CONFIG_TXRESTUNE0_Pos)
  #define USBHS_PHY_CONFIG_TXRESTUNE0_Min (0x0UL)
  #define USBHS_PHY_CONFIG_TXRESTUNE0_Max (0x2UL)

/* TXPREEMPAMPTUNE0 @Bits 28..29 : HS Transmitter Pre-Emphasis Current Control */
  #define USBHS_PHY_CONFIG_TXPREEMPAMPTUNE0_Pos (28UL)
  #define USBHS_PHY_CONFIG_TXPREEMPAMPTUNE0_Msk (0x3UL << USBHS_PHY_CONFIG_TXPREEMPAMPTUNE0_Pos) /*!< Bit mask of
                                                                            TXPREEMPAMPTUNE0 field.*/
  #define USBHS_PHY_CONFIG_TXPREEMPAMPTUNE0_Min (0x0UL)
  #define USBHS_PHY_CONFIG_TXPREEMPAMPTUNE0_Max (0x2UL)

/* TXPREEMPPULSETUNE0 @Bit 30 : HS Transmitter Pre-Emphasis Duration Control */
  #define USBHS_PHY_CONFIG_TXPREEMPPULSETUNE0_Pos (30UL)
  #define USBHS_PHY_CONFIG_TXPREEMPPULSETUNE0_Msk (0x1UL << USBHS_PHY_CONFIG_TXPREEMPPULSETUNE0_Pos) /*!< Bit mask of
                                                                            TXPREEMPPULSETUNE0 field.*/
  #define USBHS_PHY_CONFIG_TXPREEMPPULSETUNE0_Min (0x0UL)
  #define USBHS_PHY_CONFIG_TXPREEMPPULSETUNE0_Max (0x1UL)


/* USBHS_PHY_CLOCK: USB PHY clock configurations */
  #define USBHS_PHY_CLOCK_ResetValue (0x0000001AUL)

/* FSEL @Bits 0..2 : Select reference clock frequency */
  #define USBHS_PHY_CLOCK_FSEL_Pos (0UL)
  #define USBHS_PHY_CLOCK_FSEL_Msk (0x7UL << USBHS_PHY_CLOCK_FSEL_Pos)
  #define USBHS_PHY_CLOCK_FSEL_Min (0x0UL)
  #define USBHS_PHY_CLOCK_FSEL_Max (0x7UL)
  #define USBHS_PHY_CLOCK_FSEL_Clock19200KHz (0x0UL)
  #define USBHS_PHY_CLOCK_FSEL_Clock20000KHz (0x1UL)
  #define USBHS_PHY_CLOCK_FSEL_Clock24000KHz (0x2UL)
  #define USBHS_PHY_CLOCK_FSEL_Clock50000KHz (0x7UL)

/* PLLBTUNE @Bit 3 : PLL bandwidth adjustment */
  #define USBHS_PHY_CLOCK_PLLBTUNE_Pos (3UL)
  #define USBHS_PHY_CLOCK_PLLBTUNE_Msk (0x1UL << USBHS_PHY_CLOCK_PLLBTUNE_Pos)
  #define USBHS_PHY_CLOCK_PLLBTUNE_Min (0x0UL)
  #define USBHS_PHY_CLOCK_PLLBTUNE_Max (0x1UL)
  #define USBHS_PHY_CLOCK_PLLBTUNE_Disabled (0x0UL)
  #define USBHS_PHY_CLOCK_PLLBTUNE_Enabled (0x1UL)

/* COMMONONN @Bit 4 : Common block power down control */
  #define USBHS_PHY_CLOCK_COMMONONN_Pos (4UL)
  #define USBHS_PHY_CLOCK_COMMONONN_Msk (0x1UL << USBHS_PHY_CLOCK_COMMONONN_Pos)
  #define USBHS_PHY_CLOCK_COMMONONN_Min (0x0UL)
  #define USBHS_PHY_CLOCK_COMMONONN_Max (0x1UL)
  #define USBHS_PHY_CLOCK_COMMONONN_POWERED (0x0UL)  /*!< The REFCLOCK_LOGIC,bias and PLL blocks are powered in sleep or suspend
                                                          mode.*/
  #define USBHS_PHY_CLOCK_COMMONONN_SUSPEND (0x1UL)  /*!< The REFCLOCK_LOGIC, bias and PLL blocks are powered down in suspend
                                                          mode and bias and PLL blocks are powered down in sleep mode.*/


/* USBHS_PHY_INPUTOVERRIDE: Enables overriding of individual signals to the PHY, the override values are set in
                             PHY.OVERRIDEVALUES */

  #define USBHS_PHY_INPUTOVERRIDE_ResetValue (0x00000000UL)

/* DPPULLDOWN @Bit 23 : (unspecified) */
  #define USBHS_PHY_INPUTOVERRIDE_DPPULLDOWN_Pos (23UL)
  #define USBHS_PHY_INPUTOVERRIDE_DPPULLDOWN_Msk (0x1UL << USBHS_PHY_INPUTOVERRIDE_DPPULLDOWN_Pos) /*!< Bit mask of DPPULLDOWN
                                                                            field.*/

/* DMPULLDOWN @Bit 24 : (unspecified) */
  #define USBHS_PHY_INPUTOVERRIDE_DMPULLDOWN_Pos (24UL)
  #define USBHS_PHY_INPUTOVERRIDE_DMPULLDOWN_Msk (0x1UL << USBHS_PHY_INPUTOVERRIDE_DMPULLDOWN_Pos) /*!< Bit mask of DMPULLDOWN
                                                                            field.*/

/* VBUSVALID @Bit 30 : (unspecified) */
  #define USBHS_PHY_INPUTOVERRIDE_VBUSVALID_Pos (30UL)
  #define USBHS_PHY_INPUTOVERRIDE_VBUSVALID_Msk (0x1UL << USBHS_PHY_INPUTOVERRIDE_VBUSVALID_Pos) /*!< Bit mask of VBUSVALID
                                                                            field.*/


/* USBHS_PHY_OVERRIDEVALUES: Values that are used to override the input signals to the PHY. */
  #define USBHS_PHY_OVERRIDEVALUES_ResetValue (0x04000000UL)

/* DPPULLDOWN @Bit 23 : This field controls the pull-down resistor on D+ */
  #define USBHS_PHY_OVERRIDEVALUES_DPPULLDOWN_Pos (23UL)
  #define USBHS_PHY_OVERRIDEVALUES_DPPULLDOWN_Msk (0x1UL << USBHS_PHY_OVERRIDEVALUES_DPPULLDOWN_Pos) /*!< Bit mask of DPPULLDOWN
                                                                            field.*/
  #define USBHS_PHY_OVERRIDEVALUES_DPPULLDOWN_Min (0x0UL)
  #define USBHS_PHY_OVERRIDEVALUES_DPPULLDOWN_Max (0x1UL)
  #define USBHS_PHY_OVERRIDEVALUES_DPPULLDOWN_Enable (0x1UL)
  #define USBHS_PHY_OVERRIDEVALUES_DPPULLDOWN_Disable (0x0UL)

/* DMPULLDOWN @Bit 24 : This field controls the pull-down resistor on D- */
  #define USBHS_PHY_OVERRIDEVALUES_DMPULLDOWN_Pos (24UL)
  #define USBHS_PHY_OVERRIDEVALUES_DMPULLDOWN_Msk (0x1UL << USBHS_PHY_OVERRIDEVALUES_DMPULLDOWN_Pos) /*!< Bit mask of DMPULLDOWN
                                                                            field.*/
  #define USBHS_PHY_OVERRIDEVALUES_DMPULLDOWN_Min (0x0UL)
  #define USBHS_PHY_OVERRIDEVALUES_DMPULLDOWN_Max (0x1UL)
  #define USBHS_PHY_OVERRIDEVALUES_DMPULLDOWN_Enable (0x1UL)
  #define USBHS_PHY_OVERRIDEVALUES_DMPULLDOWN_Disable (0x0UL)

/* SLEEPM0 @Bit 26 : (unspecified) */
  #define USBHS_PHY_OVERRIDEVALUES_SLEEPM0_Pos (26UL)
  #define USBHS_PHY_OVERRIDEVALUES_SLEEPM0_Msk (0x1UL << USBHS_PHY_OVERRIDEVALUES_SLEEPM0_Pos)

/* VBUSVALID @Bit 30 : Signals to the PHY that VBUS is valid, and enables the pull-up resistor on D+ */
  #define USBHS_PHY_OVERRIDEVALUES_VBUSVALID_Pos (30UL)
  #define USBHS_PHY_OVERRIDEVALUES_VBUSVALID_Msk (0x1UL << USBHS_PHY_OVERRIDEVALUES_VBUSVALID_Pos) /*!< Bit mask of VBUSVALID
                                                                            field.*/
  #define USBHS_PHY_OVERRIDEVALUES_VBUSVALID_Min (0x0UL)
  #define USBHS_PHY_OVERRIDEVALUES_VBUSVALID_Max (0x1UL)
  #define USBHS_PHY_OVERRIDEVALUES_VBUSVALID_Valid (0x1UL)
  #define USBHS_PHY_OVERRIDEVALUES_VBUSVALID_NotValid (0x0UL) /*!< VBUS is not valid, and the pull up resistor on D+ is
                                                                   disabled.*/


/* USBHS_PHY_RTUNE: The RTUNE mode is an alternative method for calibrating the DP and DM 45-Ohm source impedance. */
  #define USBHS_PHY_RTUNE_ResetValue (0x0000000FUL)

/* RTUNESEL @Bit 0 : This signal selects the tuning method for the high-speed DP and DM source impedance of the USBHS. */
  #define USBHS_PHY_RTUNE_RTUNESEL_Pos (0UL)
  #define USBHS_PHY_RTUNE_RTUNESEL_Msk (0x1UL << USBHS_PHY_RTUNE_RTUNESEL_Pos)
  #define USBHS_PHY_RTUNE_RTUNESEL_Min (0x0UL)
  #define USBHS_PHY_RTUNE_RTUNESEL_Max (0x1UL)
  #define USBHS_PHY_RTUNE_RTUNESEL_TXRTUNE (0x1UL)   /*!< The TXRTUNE pin, external resistor REXT, and resulting internal
                                                          digital calibration code are used for tuning the high-speed source
                                                          impedance.*/
  #define USBHS_PHY_RTUNE_RTUNESEL_RTUNE (0x0UL)     /*!< The RCALCODE value is used for tuning the high-speed source
                                                          impedance.*/

/* RCALCODE @Bits 1..4 : This signal is used to tune the internal 200 ohm resistor or the USBHS DP and DM high-speed source
                         impedance. */

  #define USBHS_PHY_RTUNE_RCALCODE_Pos (1UL)
  #define USBHS_PHY_RTUNE_RCALCODE_Msk (0xFUL << USBHS_PHY_RTUNE_RCALCODE_Pos)


/* ====================================================== Struct USBHS ======================================================= */
/**
  * @brief USBHS
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_SOF;
    __IM uint32_t RESERVED2[31];
    __IOM uint32_t PUBLISH_SOF;
    __IM uint32_t RESERVED3[96];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED4[61];
    __IOM uint32_t ENABLE;
    __IM uint32_t RESERVED5[15];
    __IOM NRF_USBHS_PHY_Type PHY;
  } NRF_USBHS_Type;

/* USBHS_TASKS_START: Start the USB peripheral. */
  #define USBHS_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start the USB peripheral. */
  #define USBHS_TASKS_START_TASKS_START_Pos (0UL)
  #define USBHS_TASKS_START_TASKS_START_Msk (0x1UL << USBHS_TASKS_START_TASKS_START_Pos)
  #define USBHS_TASKS_START_TASKS_START_Min (0x1UL)
  #define USBHS_TASKS_START_TASKS_START_Max (0x1UL)
  #define USBHS_TASKS_START_TASKS_START_Trigger (0x1UL)


/* USBHS_TASKS_STOP: Stop the USB peripheral */
  #define USBHS_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop the USB peripheral */
  #define USBHS_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define USBHS_TASKS_STOP_TASKS_STOP_Msk (0x1UL << USBHS_TASKS_STOP_TASKS_STOP_Pos)
  #define USBHS_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define USBHS_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define USBHS_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* USBHS_SUBSCRIBE_START: Subscribe configuration for task START */
  #define USBHS_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define USBHS_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define USBHS_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << USBHS_SUBSCRIBE_START_CHIDX_Pos)
  #define USBHS_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define USBHS_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define USBHS_SUBSCRIBE_START_EN_Pos (31UL)
  #define USBHS_SUBSCRIBE_START_EN_Msk (0x1UL << USBHS_SUBSCRIBE_START_EN_Pos)
  #define USBHS_SUBSCRIBE_START_EN_Min (0x0UL)
  #define USBHS_SUBSCRIBE_START_EN_Max (0x1UL)
  #define USBHS_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define USBHS_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* USBHS_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define USBHS_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define USBHS_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define USBHS_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << USBHS_SUBSCRIBE_STOP_CHIDX_Pos)
  #define USBHS_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define USBHS_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define USBHS_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define USBHS_SUBSCRIBE_STOP_EN_Msk (0x1UL << USBHS_SUBSCRIBE_STOP_EN_Pos)
  #define USBHS_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define USBHS_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define USBHS_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define USBHS_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* USBHS_EVENTS_SOF: Start of Frame. */
  #define USBHS_EVENTS_SOF_ResetValue (0x00000000UL)

/* EVENTS_SOF @Bit 0 : Start of Frame. */
  #define USBHS_EVENTS_SOF_EVENTS_SOF_Pos (0UL)
  #define USBHS_EVENTS_SOF_EVENTS_SOF_Msk (0x1UL << USBHS_EVENTS_SOF_EVENTS_SOF_Pos)
  #define USBHS_EVENTS_SOF_EVENTS_SOF_Min (0x0UL)
  #define USBHS_EVENTS_SOF_EVENTS_SOF_Max (0x1UL)
  #define USBHS_EVENTS_SOF_EVENTS_SOF_NotGenerated (0x0UL)
  #define USBHS_EVENTS_SOF_EVENTS_SOF_Generated (0x1UL)


/* USBHS_PUBLISH_SOF: Publish configuration for event SOF */
  #define USBHS_PUBLISH_SOF_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event SOF will publish to */
  #define USBHS_PUBLISH_SOF_CHIDX_Pos (0UL)
  #define USBHS_PUBLISH_SOF_CHIDX_Msk (0xFFUL << USBHS_PUBLISH_SOF_CHIDX_Pos)
  #define USBHS_PUBLISH_SOF_CHIDX_Min (0x00UL)
  #define USBHS_PUBLISH_SOF_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define USBHS_PUBLISH_SOF_EN_Pos (31UL)
  #define USBHS_PUBLISH_SOF_EN_Msk (0x1UL << USBHS_PUBLISH_SOF_EN_Pos)
  #define USBHS_PUBLISH_SOF_EN_Min (0x0UL)
  #define USBHS_PUBLISH_SOF_EN_Max (0x1UL)
  #define USBHS_PUBLISH_SOF_EN_Disabled (0x0UL)
  #define USBHS_PUBLISH_SOF_EN_Enabled (0x1UL)


/* USBHS_INTENSET: Enable interrupt */
  #define USBHS_INTENSET_ResetValue (0x00000000UL)

/* SOF @Bit 0 : Write '1' to enable interrupt for event SOF */
  #define USBHS_INTENSET_SOF_Pos (0UL)
  #define USBHS_INTENSET_SOF_Msk (0x1UL << USBHS_INTENSET_SOF_Pos)
  #define USBHS_INTENSET_SOF_Min (0x0UL)
  #define USBHS_INTENSET_SOF_Max (0x1UL)
  #define USBHS_INTENSET_SOF_Set (0x1UL)
  #define USBHS_INTENSET_SOF_Disabled (0x0UL)
  #define USBHS_INTENSET_SOF_Enabled (0x1UL)


/* USBHS_INTENCLR: Disable interrupt */
  #define USBHS_INTENCLR_ResetValue (0x00000000UL)

/* SOF @Bit 0 : Write '1' to disable interrupt for event SOF */
  #define USBHS_INTENCLR_SOF_Pos (0UL)
  #define USBHS_INTENCLR_SOF_Msk (0x1UL << USBHS_INTENCLR_SOF_Pos)
  #define USBHS_INTENCLR_SOF_Min (0x0UL)
  #define USBHS_INTENCLR_SOF_Max (0x1UL)
  #define USBHS_INTENCLR_SOF_Clear (0x1UL)
  #define USBHS_INTENCLR_SOF_Disabled (0x0UL)
  #define USBHS_INTENCLR_SOF_Enabled (0x1UL)


/* USBHS_ENABLE: Enable USB peripheral. */
  #define USBHS_ENABLE_ResetValue (0x00000000UL)

/* CORE @Bit 0 : Enable USB Controller */
  #define USBHS_ENABLE_CORE_Pos (0UL)
  #define USBHS_ENABLE_CORE_Msk (0x1UL << USBHS_ENABLE_CORE_Pos)
  #define USBHS_ENABLE_CORE_Min (0x0UL)
  #define USBHS_ENABLE_CORE_Max (0x1UL)
  #define USBHS_ENABLE_CORE_Disabled (0x0UL)
  #define USBHS_ENABLE_CORE_Enabled (0x1UL)

/* PHY @Bit 1 : Enable USB PHY */
  #define USBHS_ENABLE_PHY_Pos (1UL)
  #define USBHS_ENABLE_PHY_Msk (0x1UL << USBHS_ENABLE_PHY_Pos)
  #define USBHS_ENABLE_PHY_Min (0x0UL)
  #define USBHS_ENABLE_PHY_Max (0x1UL)
  #define USBHS_ENABLE_PHY_Disabled (0x0UL)
  #define USBHS_ENABLE_PHY_Enabled (0x1UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                         USBHSCORE                                         ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* =================================================== Struct USBHSCORE_HC =================================================== */
/**
  * @brief HC [USBHSCORE_HC] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CHAR;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  INT;
  __IOM uint32_t  INTMSK;
  __IOM uint32_t  TSIZ;
  __IOM uint32_t  DMA;
} NRF_USBHSCORE_HC_Type;
  #define USBHSCORE_HC_MaxCount (16UL)
  #define USBHSCORE_HC_MaxIndex (15UL)
  #define USBHSCORE_HC_MinIndex (0UL)

/* USBHSCORE_HC_CHAR: Host Channel Characteristics Register */
  #define USBHSCORE_HC_CHAR_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_HC_CHAR_MPS_Pos (0UL)
  #define USBHSCORE_HC_CHAR_MPS_Msk (0x7FFUL << USBHSCORE_HC_CHAR_MPS_Pos)

/* EPNUM @Bits 11..14 : Endpoint Number (EPNum) */
  #define USBHSCORE_HC_CHAR_EPNUM_Pos (11UL)
  #define USBHSCORE_HC_CHAR_EPNUM_Msk (0xFUL << USBHSCORE_HC_CHAR_EPNUM_Pos)
  #define USBHSCORE_HC_CHAR_EPNUM_Min (0x0UL)
  #define USBHSCORE_HC_CHAR_EPNUM_Max (0xFUL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT0 (0x0UL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT1 (0x1UL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT2 (0x2UL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT3 (0x3UL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT4 (0x4UL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT5 (0x5UL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT6 (0x6UL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT7 (0x7UL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT8 (0x8UL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT9 (0x9UL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT10 (0xAUL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT11 (0xBUL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT12 (0xCUL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT13 (0xDUL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT14 (0xEUL)
  #define USBHSCORE_HC_CHAR_EPNUM_ENDPT15 (0xFUL)

/* EPDIR @Bit 15 : Endpoint Direction (EPDir) */
  #define USBHSCORE_HC_CHAR_EPDIR_Pos (15UL)
  #define USBHSCORE_HC_CHAR_EPDIR_Msk (0x1UL << USBHSCORE_HC_CHAR_EPDIR_Pos)
  #define USBHSCORE_HC_CHAR_EPDIR_Min (0x0UL)
  #define USBHSCORE_HC_CHAR_EPDIR_Max (0x1UL)
  #define USBHSCORE_HC_CHAR_EPDIR_OUT (0x0UL)
  #define USBHSCORE_HC_CHAR_EPDIR_IN (0x1UL)

/* LSPDDEV @Bit 17 : Low-Speed Device (LSpdDev) */
  #define USBHSCORE_HC_CHAR_LSPDDEV_Pos (17UL)
  #define USBHSCORE_HC_CHAR_LSPDDEV_Msk (0x1UL << USBHSCORE_HC_CHAR_LSPDDEV_Pos)
  #define USBHSCORE_HC_CHAR_LSPDDEV_Min (0x0UL)
  #define USBHSCORE_HC_CHAR_LSPDDEV_Max (0x1UL)
  #define USBHSCORE_HC_CHAR_LSPDDEV_DISABLED (0x0UL)
  #define USBHSCORE_HC_CHAR_LSPDDEV_ENABLED (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_HC_CHAR_EPTYPE_Pos (18UL)
  #define USBHSCORE_HC_CHAR_EPTYPE_Msk (0x3UL << USBHSCORE_HC_CHAR_EPTYPE_Pos)
  #define USBHSCORE_HC_CHAR_EPTYPE_Min (0x0UL)
  #define USBHSCORE_HC_CHAR_EPTYPE_Max (0x3UL)
  #define USBHSCORE_HC_CHAR_EPTYPE_CTRL (0x0UL)
  #define USBHSCORE_HC_CHAR_EPTYPE_ISOC (0x1UL)
  #define USBHSCORE_HC_CHAR_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_HC_CHAR_EPTYPE_INTERR (0x3UL)

/* EC @Bits 20..21 : Multi Count (MC) / Error Count (EC) */
  #define USBHSCORE_HC_CHAR_EC_Pos (20UL)
  #define USBHSCORE_HC_CHAR_EC_Msk (0x3UL << USBHSCORE_HC_CHAR_EC_Pos)
  #define USBHSCORE_HC_CHAR_EC_Min (0x1UL)
  #define USBHSCORE_HC_CHAR_EC_Max (0x3UL)
  #define USBHSCORE_HC_CHAR_EC_TRANSONE (0x1UL)
  #define USBHSCORE_HC_CHAR_EC_TRANSTWO (0x2UL)
  #define USBHSCORE_HC_CHAR_EC_TRANSTHREE (0x3UL)

/* DEVADDR @Bits 22..28 : Device Address (DevAddr) */
  #define USBHSCORE_HC_CHAR_DEVADDR_Pos (22UL)
  #define USBHSCORE_HC_CHAR_DEVADDR_Msk (0x7FUL << USBHSCORE_HC_CHAR_DEVADDR_Pos)

/* ODDFRM @Bit 29 : Odd Frame (OddFrm) */
  #define USBHSCORE_HC_CHAR_ODDFRM_Pos (29UL)
  #define USBHSCORE_HC_CHAR_ODDFRM_Msk (0x1UL << USBHSCORE_HC_CHAR_ODDFRM_Pos)
  #define USBHSCORE_HC_CHAR_ODDFRM_Min (0x0UL)
  #define USBHSCORE_HC_CHAR_ODDFRM_Max (0x1UL)
  #define USBHSCORE_HC_CHAR_ODDFRM_EFRAME (0x0UL)
  #define USBHSCORE_HC_CHAR_ODDFRM_OFRAME (0x1UL)

/* CHDIS @Bit 30 : Channel Disable (ChDis) */
  #define USBHSCORE_HC_CHAR_CHDIS_Pos (30UL)
  #define USBHSCORE_HC_CHAR_CHDIS_Msk (0x1UL << USBHSCORE_HC_CHAR_CHDIS_Pos)
  #define USBHSCORE_HC_CHAR_CHDIS_Min (0x0UL)
  #define USBHSCORE_HC_CHAR_CHDIS_Max (0x1UL)
  #define USBHSCORE_HC_CHAR_CHDIS_INACTIVE (0x0UL)
  #define USBHSCORE_HC_CHAR_CHDIS_ACTIVE (0x1UL)

/* CHENA @Bit 31 : Channel Enable (ChEna) */
  #define USBHSCORE_HC_CHAR_CHENA_Pos (31UL)
  #define USBHSCORE_HC_CHAR_CHENA_Msk (0x1UL << USBHSCORE_HC_CHAR_CHENA_Pos)
  #define USBHSCORE_HC_CHAR_CHENA_Min (0x0UL)
  #define USBHSCORE_HC_CHAR_CHENA_Max (0x1UL)
  #define USBHSCORE_HC_CHAR_CHENA_DISABLED (0x0UL)   /*!< If Scatter/Gather mode is enabled, indicates that the descriptor
                                                          structure is not yet ready. If Scatter/Gather mode is disabled,
                                                          indicates that the channel is disabled.*/
  #define USBHSCORE_HC_CHAR_CHENA_ENABLED (0x1UL)    /*!< If Scatter/Gather mode is enabled, indicates that the descriptor
                                                          structure and data buffer with data is set up and this channel can
                                                          access the descriptor. If Scatter/Gather mode is disabled, indicates
                                                          that the channel is enabled.*/


/* USBHSCORE_HC_INT: Host Channel Interrupt Register */
  #define USBHSCORE_HC_INT_ResetValue (0x00000000UL)

/* XFERCOMPL @Bit 0 : Transfer Completed (XferCompl) */
  #define USBHSCORE_HC_INT_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_HC_INT_XFERCOMPL_Msk (0x1UL << USBHSCORE_HC_INT_XFERCOMPL_Pos)
  #define USBHSCORE_HC_INT_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_HC_INT_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_HC_INT_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_HC_INT_XFERCOMPL_ACTIVE (0x1UL)

/* CHHLTD @Bit 1 : Channel Halted (ChHltd) */
  #define USBHSCORE_HC_INT_CHHLTD_Pos (1UL)
  #define USBHSCORE_HC_INT_CHHLTD_Msk (0x1UL << USBHSCORE_HC_INT_CHHLTD_Pos)
  #define USBHSCORE_HC_INT_CHHLTD_Min (0x0UL)
  #define USBHSCORE_HC_INT_CHHLTD_Max (0x1UL)
  #define USBHSCORE_HC_INT_CHHLTD_INACTIVE (0x0UL)
  #define USBHSCORE_HC_INT_CHHLTD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_HC_INT_AHBERR_Pos (2UL)
  #define USBHSCORE_HC_INT_AHBERR_Msk (0x1UL << USBHSCORE_HC_INT_AHBERR_Pos)
  #define USBHSCORE_HC_INT_AHBERR_Min (0x0UL)
  #define USBHSCORE_HC_INT_AHBERR_Max (0x1UL)
  #define USBHSCORE_HC_INT_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_HC_INT_AHBERR_ACTIVE (0x1UL)

/* STALL @Bit 3 : STALL Response Received Interrupt (STALL) */
  #define USBHSCORE_HC_INT_STALL_Pos (3UL)
  #define USBHSCORE_HC_INT_STALL_Msk (0x1UL << USBHSCORE_HC_INT_STALL_Pos)
  #define USBHSCORE_HC_INT_STALL_Min (0x0UL)
  #define USBHSCORE_HC_INT_STALL_Max (0x1UL)
  #define USBHSCORE_HC_INT_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_HC_INT_STALL_ACTIVE (0x1UL)

/* NAK @Bit 4 : NAK Response Received Interrupt (NAK) */
  #define USBHSCORE_HC_INT_NAK_Pos (4UL)
  #define USBHSCORE_HC_INT_NAK_Msk (0x1UL << USBHSCORE_HC_INT_NAK_Pos)
  #define USBHSCORE_HC_INT_NAK_Min (0x0UL)
  #define USBHSCORE_HC_INT_NAK_Max (0x1UL)
  #define USBHSCORE_HC_INT_NAK_INACTIVE (0x0UL)
  #define USBHSCORE_HC_INT_NAK_ACTIVE (0x1UL)

/* ACK @Bit 5 : ACK Response Received/Transmitted Interrupt (ACK) */
  #define USBHSCORE_HC_INT_ACK_Pos (5UL)
  #define USBHSCORE_HC_INT_ACK_Msk (0x1UL << USBHSCORE_HC_INT_ACK_Pos)
  #define USBHSCORE_HC_INT_ACK_Min (0x0UL)
  #define USBHSCORE_HC_INT_ACK_Max (0x1UL)
  #define USBHSCORE_HC_INT_ACK_INACTIVE (0x0UL)
  #define USBHSCORE_HC_INT_ACK_ACTIVE (0x1UL)

/* NYET @Bit 6 : NYET Response Received Interrupt (NYET) */
  #define USBHSCORE_HC_INT_NYET_Pos (6UL)
  #define USBHSCORE_HC_INT_NYET_Msk (0x1UL << USBHSCORE_HC_INT_NYET_Pos)
  #define USBHSCORE_HC_INT_NYET_Min (0x0UL)
  #define USBHSCORE_HC_INT_NYET_Max (0x1UL)
  #define USBHSCORE_HC_INT_NYET_INACTIVE (0x0UL)
  #define USBHSCORE_HC_INT_NYET_ACTIVE (0x1UL)

/* XACTERR @Bit 7 : Transaction Error (XactErr) */
  #define USBHSCORE_HC_INT_XACTERR_Pos (7UL)
  #define USBHSCORE_HC_INT_XACTERR_Msk (0x1UL << USBHSCORE_HC_INT_XACTERR_Pos)
  #define USBHSCORE_HC_INT_XACTERR_Min (0x0UL)
  #define USBHSCORE_HC_INT_XACTERR_Max (0x1UL)
  #define USBHSCORE_HC_INT_XACTERR_INACTIVE (0x0UL)
  #define USBHSCORE_HC_INT_XACTERR_ACTIVE (0x1UL)

/* BBLERR @Bit 8 : Babble Error (BblErr) */
  #define USBHSCORE_HC_INT_BBLERR_Pos (8UL)
  #define USBHSCORE_HC_INT_BBLERR_Msk (0x1UL << USBHSCORE_HC_INT_BBLERR_Pos)
  #define USBHSCORE_HC_INT_BBLERR_Min (0x0UL)
  #define USBHSCORE_HC_INT_BBLERR_Max (0x1UL)
  #define USBHSCORE_HC_INT_BBLERR_INACTIVE (0x0UL)
  #define USBHSCORE_HC_INT_BBLERR_ACTIVE (0x1UL)

/* FRMOVRUN @Bit 9 : Frame Overrun (FrmOvrun). */
  #define USBHSCORE_HC_INT_FRMOVRUN_Pos (9UL)
  #define USBHSCORE_HC_INT_FRMOVRUN_Msk (0x1UL << USBHSCORE_HC_INT_FRMOVRUN_Pos)
  #define USBHSCORE_HC_INT_FRMOVRUN_Min (0x0UL)
  #define USBHSCORE_HC_INT_FRMOVRUN_Max (0x1UL)
  #define USBHSCORE_HC_INT_FRMOVRUN_INACTIVE (0x0UL)
  #define USBHSCORE_HC_INT_FRMOVRUN_ACTIVE (0x1UL)

/* DATATGLERR @Bit 10 : (unspecified) */
  #define USBHSCORE_HC_INT_DATATGLERR_Pos (10UL)
  #define USBHSCORE_HC_INT_DATATGLERR_Msk (0x1UL << USBHSCORE_HC_INT_DATATGLERR_Pos)
  #define USBHSCORE_HC_INT_DATATGLERR_Min (0x0UL)
  #define USBHSCORE_HC_INT_DATATGLERR_Max (0x1UL)
  #define USBHSCORE_HC_INT_DATATGLERR_INACTIVE (0x0UL)
  #define USBHSCORE_HC_INT_DATATGLERR_ACTIVE (0x1UL)


/* USBHSCORE_HC_INTMSK: Host Channel Interrupt Mask Register */
  #define USBHSCORE_HC_INTMSK_ResetValue (0x00000000UL)

/* XFERCOMPLMSK @Bit 0 : (unspecified) */
  #define USBHSCORE_HC_INTMSK_XFERCOMPLMSK_Pos (0UL)
  #define USBHSCORE_HC_INTMSK_XFERCOMPLMSK_Msk (0x1UL << USBHSCORE_HC_INTMSK_XFERCOMPLMSK_Pos) /*!< Bit mask of XFERCOMPLMSK
                                                                            field.*/
  #define USBHSCORE_HC_INTMSK_XFERCOMPLMSK_Min (0x0UL)
  #define USBHSCORE_HC_INTMSK_XFERCOMPLMSK_Max (0x1UL)
  #define USBHSCORE_HC_INTMSK_XFERCOMPLMSK_MASK (0x0UL)
  #define USBHSCORE_HC_INTMSK_XFERCOMPLMSK_NOMASK (0x1UL)

/* CHHLTDMSK @Bit 1 : (unspecified) */
  #define USBHSCORE_HC_INTMSK_CHHLTDMSK_Pos (1UL)
  #define USBHSCORE_HC_INTMSK_CHHLTDMSK_Msk (0x1UL << USBHSCORE_HC_INTMSK_CHHLTDMSK_Pos)
  #define USBHSCORE_HC_INTMSK_CHHLTDMSK_Min (0x0UL)
  #define USBHSCORE_HC_INTMSK_CHHLTDMSK_Max (0x1UL)
  #define USBHSCORE_HC_INTMSK_CHHLTDMSK_MASK (0x0UL)
  #define USBHSCORE_HC_INTMSK_CHHLTDMSK_NOMASK (0x1UL)

/* AHBERRMSK @Bit 2 : (unspecified) */
  #define USBHSCORE_HC_INTMSK_AHBERRMSK_Pos (2UL)
  #define USBHSCORE_HC_INTMSK_AHBERRMSK_Msk (0x1UL << USBHSCORE_HC_INTMSK_AHBERRMSK_Pos)
  #define USBHSCORE_HC_INTMSK_AHBERRMSK_Min (0x0UL)
  #define USBHSCORE_HC_INTMSK_AHBERRMSK_Max (0x1UL)
  #define USBHSCORE_HC_INTMSK_AHBERRMSK_MASK (0x0UL)
  #define USBHSCORE_HC_INTMSK_AHBERRMSK_NOMASK (0x1UL)

/* STALLMSK @Bit 3 : (unspecified) */
  #define USBHSCORE_HC_INTMSK_STALLMSK_Pos (3UL)
  #define USBHSCORE_HC_INTMSK_STALLMSK_Msk (0x1UL << USBHSCORE_HC_INTMSK_STALLMSK_Pos)
  #define USBHSCORE_HC_INTMSK_STALLMSK_Min (0x0UL)
  #define USBHSCORE_HC_INTMSK_STALLMSK_Max (0x1UL)
  #define USBHSCORE_HC_INTMSK_STALLMSK_MASK (0x0UL)
  #define USBHSCORE_HC_INTMSK_STALLMSK_NOMASK (0x1UL)

/* NAKMSK @Bit 4 : (unspecified) */
  #define USBHSCORE_HC_INTMSK_NAKMSK_Pos (4UL)
  #define USBHSCORE_HC_INTMSK_NAKMSK_Msk (0x1UL << USBHSCORE_HC_INTMSK_NAKMSK_Pos)
  #define USBHSCORE_HC_INTMSK_NAKMSK_Min (0x0UL)
  #define USBHSCORE_HC_INTMSK_NAKMSK_Max (0x1UL)
  #define USBHSCORE_HC_INTMSK_NAKMSK_MASK (0x0UL)
  #define USBHSCORE_HC_INTMSK_NAKMSK_NOMASK (0x1UL)

/* ACKMSK @Bit 5 : (unspecified) */
  #define USBHSCORE_HC_INTMSK_ACKMSK_Pos (5UL)
  #define USBHSCORE_HC_INTMSK_ACKMSK_Msk (0x1UL << USBHSCORE_HC_INTMSK_ACKMSK_Pos)
  #define USBHSCORE_HC_INTMSK_ACKMSK_Min (0x0UL)
  #define USBHSCORE_HC_INTMSK_ACKMSK_Max (0x1UL)
  #define USBHSCORE_HC_INTMSK_ACKMSK_MASK (0x0UL)
  #define USBHSCORE_HC_INTMSK_ACKMSK_NOMASK (0x1UL)

/* NYETMSK @Bit 6 : (unspecified) */
  #define USBHSCORE_HC_INTMSK_NYETMSK_Pos (6UL)
  #define USBHSCORE_HC_INTMSK_NYETMSK_Msk (0x1UL << USBHSCORE_HC_INTMSK_NYETMSK_Pos)
  #define USBHSCORE_HC_INTMSK_NYETMSK_Min (0x0UL)
  #define USBHSCORE_HC_INTMSK_NYETMSK_Max (0x1UL)
  #define USBHSCORE_HC_INTMSK_NYETMSK_MASK (0x0UL)
  #define USBHSCORE_HC_INTMSK_NYETMSK_NOMASK (0x1UL)

/* XACTERRMSK @Bit 7 : (unspecified) */
  #define USBHSCORE_HC_INTMSK_XACTERRMSK_Pos (7UL)
  #define USBHSCORE_HC_INTMSK_XACTERRMSK_Msk (0x1UL << USBHSCORE_HC_INTMSK_XACTERRMSK_Pos)
  #define USBHSCORE_HC_INTMSK_XACTERRMSK_Min (0x0UL)
  #define USBHSCORE_HC_INTMSK_XACTERRMSK_Max (0x1UL)
  #define USBHSCORE_HC_INTMSK_XACTERRMSK_MASK (0x0UL)
  #define USBHSCORE_HC_INTMSK_XACTERRMSK_NOMASK (0x1UL)

/* BBLERRMSK @Bit 8 : (unspecified) */
  #define USBHSCORE_HC_INTMSK_BBLERRMSK_Pos (8UL)
  #define USBHSCORE_HC_INTMSK_BBLERRMSK_Msk (0x1UL << USBHSCORE_HC_INTMSK_BBLERRMSK_Pos)
  #define USBHSCORE_HC_INTMSK_BBLERRMSK_Min (0x0UL)
  #define USBHSCORE_HC_INTMSK_BBLERRMSK_Max (0x1UL)
  #define USBHSCORE_HC_INTMSK_BBLERRMSK_MASK (0x0UL)
  #define USBHSCORE_HC_INTMSK_BBLERRMSK_NOMASK (0x1UL)

/* FRMOVRUNMSK @Bit 9 : (unspecified) */
  #define USBHSCORE_HC_INTMSK_FRMOVRUNMSK_Pos (9UL)
  #define USBHSCORE_HC_INTMSK_FRMOVRUNMSK_Msk (0x1UL << USBHSCORE_HC_INTMSK_FRMOVRUNMSK_Pos) /*!< Bit mask of FRMOVRUNMSK
                                                                            field.*/
  #define USBHSCORE_HC_INTMSK_FRMOVRUNMSK_Min (0x0UL)
  #define USBHSCORE_HC_INTMSK_FRMOVRUNMSK_Max (0x1UL)
  #define USBHSCORE_HC_INTMSK_FRMOVRUNMSK_MASK (0x0UL)
  #define USBHSCORE_HC_INTMSK_FRMOVRUNMSK_NOMASK (0x1UL)

/* DATATGLERRMSK @Bit 10 : (unspecified) */
  #define USBHSCORE_HC_INTMSK_DATATGLERRMSK_Pos (10UL)
  #define USBHSCORE_HC_INTMSK_DATATGLERRMSK_Msk (0x1UL << USBHSCORE_HC_INTMSK_DATATGLERRMSK_Pos) /*!< Bit mask of DATATGLERRMSK
                                                                            field.*/
  #define USBHSCORE_HC_INTMSK_DATATGLERRMSK_Min (0x0UL)
  #define USBHSCORE_HC_INTMSK_DATATGLERRMSK_Max (0x1UL)
  #define USBHSCORE_HC_INTMSK_DATATGLERRMSK_MASK (0x0UL)
  #define USBHSCORE_HC_INTMSK_DATATGLERRMSK_NOMASK (0x1UL)


/* USBHSCORE_HC_TSIZ: Host Channel Transfer Size Register */
  #define USBHSCORE_HC_TSIZ_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Non-Scatter/Gather DMA Mode: */
  #define USBHSCORE_HC_TSIZ_XFERSIZE_Pos (0UL)
  #define USBHSCORE_HC_TSIZ_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_HC_TSIZ_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Non-Scatter/Gather DMA Mode: */
  #define USBHSCORE_HC_TSIZ_PKTCNT_Pos (19UL)
  #define USBHSCORE_HC_TSIZ_PKTCNT_Msk (0x3FFUL << USBHSCORE_HC_TSIZ_PKTCNT_Pos)

/* PID @Bits 29..30 : PID (Pid) */
  #define USBHSCORE_HC_TSIZ_PID_Pos (29UL)
  #define USBHSCORE_HC_TSIZ_PID_Msk (0x3UL << USBHSCORE_HC_TSIZ_PID_Pos)
  #define USBHSCORE_HC_TSIZ_PID_Min (0x0UL)
  #define USBHSCORE_HC_TSIZ_PID_Max (0x3UL)
  #define USBHSCORE_HC_TSIZ_PID_DATA0 (0x0UL)
  #define USBHSCORE_HC_TSIZ_PID_DATA2 (0x1UL)
  #define USBHSCORE_HC_TSIZ_PID_DATA1 (0x2UL)
  #define USBHSCORE_HC_TSIZ_PID_MDATA (0x3UL)

/* DOPNG @Bit 31 : Do Ping (DoPng) */
  #define USBHSCORE_HC_TSIZ_DOPNG_Pos (31UL)
  #define USBHSCORE_HC_TSIZ_DOPNG_Msk (0x1UL << USBHSCORE_HC_TSIZ_DOPNG_Pos)
  #define USBHSCORE_HC_TSIZ_DOPNG_Min (0x0UL)
  #define USBHSCORE_HC_TSIZ_DOPNG_Max (0x1UL)
  #define USBHSCORE_HC_TSIZ_DOPNG_NOPING (0x0UL)
  #define USBHSCORE_HC_TSIZ_DOPNG_PING (0x1UL)


/* USBHSCORE_HC_DMA: Host Channel DMA Address Register */
  #define USBHSCORE_HC_DMA_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : In Buffer DMA Mode: */
  #define USBHSCORE_HC_DMA_DMAADDR_Pos (0UL)
  #define USBHSCORE_HC_DMA_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_HC_DMA_DMAADDR_Pos)



/* ============================================== Struct USBHSCORE_DWCOTGDFIFO =============================================== */
/**
  * @brief DWCOTGDFIFO [USBHSCORE_DWCOTGDFIFO] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DATA[1024];
} NRF_USBHSCORE_DWCOTGDFIFO_Type;
  #define USBHSCORE_DWCOTGDFIFO_MaxCount (16UL)
  #define USBHSCORE_DWCOTGDFIFO_MaxIndex (15UL)
  #define USBHSCORE_DWCOTGDFIFO_MinIndex (0UL)


/* ======================================== Struct USBHSCORE_DWCOTGDFIFODIRECTACCESS ========================================= */
/**
  * @brief DWCOTGDFIFODIRECTACCESS [USBHSCORE_DWCOTGDFIFODIRECTACCESS] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DATA[32768];
} NRF_USBHSCORE_DWCOTGDFIFODIRECTACCESS_Type;

/* ==================================================== Struct USBHSCORE ===================================================== */
/**
  * @brief USBHSCORE
  */
  typedef struct {
    __IOM uint32_t GOTGCTL;
    __IOM uint32_t GOTGINT;
    __IOM uint32_t GAHBCFG;
    __IOM uint32_t GUSBCFG;
    __IOM uint32_t GRSTCTL;
    __IOM uint32_t GINTSTS;
    __IOM uint32_t GINTMSK;
    __IOM uint32_t GRXSTSR;
    __IOM uint32_t GRXSTSP;
    __IOM uint32_t GRXFSIZ;
    __IOM uint32_t GNPTXFSIZ;
    __IOM uint32_t GNPTXSTS;
    __IM uint32_t RESERVED[2];
    __IOM uint32_t GGPIO;
    __IOM uint32_t GUID;
    __IOM uint32_t GSNPSID;
    __IOM uint32_t GHWCFG1;
    __IOM uint32_t GHWCFG2;
    __IOM uint32_t GHWCFG3;
    __IOM uint32_t GHWCFG4;
    __IOM uint32_t GLPMCFG;
    __IOM uint32_t GPWRDN;
    __IOM uint32_t GDFIFOCFG;
    __IM uint32_t RESERVED1[2];
    __IOM uint32_t GINTMSK2;
    __IOM uint32_t GINTSTS2;
    __IM uint32_t RESERVED2[36];
    __IOM uint32_t HPTXFSIZ;
    __IOM uint32_t DIEPTXF[8];
    __IM uint32_t RESERVED3[183];
    __IOM uint32_t HCFG;
    __IOM uint32_t HFIR;
    __IOM uint32_t HFNUM;
    __IM uint32_t RESERVED4[2];
    __IOM uint32_t HAINT;
    __IOM uint32_t HAINTMSK;
    __IM uint32_t RESERVED5[9];
    __IOM uint32_t HPRT;
    __IM uint32_t RESERVED6[47];
    __IOM NRF_USBHSCORE_HC_Type HC[16];
    __IM uint32_t RESERVED7[96];
    __IOM uint32_t DCFG;
    __IOM uint32_t DCTL;
    __IOM uint32_t DSTS;
    __IM uint32_t RESERVED8;
    __IOM uint32_t DIEPMSK;
    __IOM uint32_t DOEPMSK;
    __IOM uint32_t DAINT;
    __IOM uint32_t DAINTMSK;
    __IM uint32_t RESERVED9[2];
    __IOM uint32_t DVBUSDIS;
    __IOM uint32_t DVBUSPULSE;
    __IOM uint32_t DTHRCTL;
    __IOM uint32_t DIEPEMPMSK;
    __IM uint32_t RESERVED10[50];
    __IOM uint32_t DIEPCTL0;
    __IM uint32_t RESERVED11;
    __IOM uint32_t DIEPINT0;
    __IM uint32_t RESERVED12;
    __IOM uint32_t DIEPTSIZ0;
    __IOM uint32_t DIEPDMA0;
    __IOM uint32_t DTXFSTS0;
    __IM uint32_t RESERVED13;
    __IOM uint32_t DIEPCTL1;
    __IM uint32_t RESERVED14;
    __IOM uint32_t DIEPINT1;
    __IM uint32_t RESERVED15;
    __IOM uint32_t DIEPTSIZ1;
    __IOM uint32_t DIEPDMA1;
    __IOM uint32_t DTXFSTS1;
    __IM uint32_t RESERVED16;
    __IOM uint32_t DIEPCTL2;
    __IM uint32_t RESERVED17;
    __IOM uint32_t DIEPINT2;
    __IM uint32_t RESERVED18;
    __IOM uint32_t DIEPTSIZ2;
    __IOM uint32_t DIEPDMA2;
    __IOM uint32_t DTXFSTS2;
    __IM uint32_t RESERVED19;
    __IOM uint32_t DIEPCTL3;
    __IM uint32_t RESERVED20;
    __IOM uint32_t DIEPINT3;
    __IM uint32_t RESERVED21;
    __IOM uint32_t DIEPTSIZ3;
    __IOM uint32_t DIEPDMA3;
    __IOM uint32_t DTXFSTS3;
    __IM uint32_t RESERVED22;
    __IOM uint32_t DIEPCTL4;
    __IM uint32_t RESERVED23;
    __IOM uint32_t DIEPINT4;
    __IM uint32_t RESERVED24;
    __IOM uint32_t DIEPTSIZ4;
    __IOM uint32_t DIEPDMA4;
    __IOM uint32_t DTXFSTS4;
    __IM uint32_t RESERVED25;
    __IOM uint32_t DIEPCTL5;
    __IM uint32_t RESERVED26;
    __IOM uint32_t DIEPINT5;
    __IM uint32_t RESERVED27;
    __IOM uint32_t DIEPTSIZ5;
    __IOM uint32_t DIEPDMA5;
    __IOM uint32_t DTXFSTS5;
    __IM uint32_t RESERVED28;
    __IOM uint32_t DIEPCTL6;
    __IM uint32_t RESERVED29;
    __IOM uint32_t DIEPINT6;
    __IM uint32_t RESERVED30;
    __IOM uint32_t DIEPTSIZ6;
    __IOM uint32_t DIEPDMA6;
    __IOM uint32_t DTXFSTS6;
    __IM uint32_t RESERVED31;
    __IOM uint32_t DIEPCTL7;
    __IM uint32_t RESERVED32;
    __IOM uint32_t DIEPINT7;
    __IM uint32_t RESERVED33;
    __IOM uint32_t DIEPTSIZ7;
    __IOM uint32_t DIEPDMA7;
    __IOM uint32_t DTXFSTS7;
    __IM uint32_t RESERVED34;
    __IOM uint32_t DIEPCTL8;
    __IM uint32_t RESERVED35;
    __IOM uint32_t DIEPINT8;
    __IM uint32_t RESERVED36;
    __IOM uint32_t DIEPTSIZ8;
    __IOM uint32_t DIEPDMA8;
    __IOM uint32_t DTXFSTS8;
    __IM uint32_t RESERVED37;
    __IOM uint32_t DIEPCTL9;
    __IM uint32_t RESERVED38;
    __IOM uint32_t DIEPINT9;
    __IM uint32_t RESERVED39;
    __IOM uint32_t DIEPTSIZ9;
    __IOM uint32_t DIEPDMA9;
    __IOM uint32_t DTXFSTS9;
    __IM uint32_t RESERVED40;
    __IOM uint32_t DIEPCTL10;
    __IM uint32_t RESERVED41;
    __IOM uint32_t DIEPINT10;
    __IM uint32_t RESERVED42;
    __IOM uint32_t DIEPTSIZ10;
    __IOM uint32_t DIEPDMA10;
    __IOM uint32_t DTXFSTS10;
    __IM uint32_t RESERVED43;
    __IOM uint32_t DIEPCTL11;
    __IM uint32_t RESERVED44;
    __IOM uint32_t DIEPINT11;
    __IM uint32_t RESERVED45;
    __IOM uint32_t DIEPTSIZ11;
    __IOM uint32_t DIEPDMA11;
    __IOM uint32_t DTXFSTS11;
    __IM uint32_t RESERVED46[33];
    __IOM uint32_t DOEPCTL0;
    __IM uint32_t RESERVED47;
    __IOM uint32_t DOEPINT0;
    __IM uint32_t RESERVED48;
    __IOM uint32_t DOEPTSIZ0;
    __IOM uint32_t DOEPDMA0;
    __IM uint32_t RESERVED49[2];
    __IOM uint32_t DOEPCTL1;
    __IM uint32_t RESERVED50;
    __IOM uint32_t DOEPINT1;
    __IM uint32_t RESERVED51;
    __IOM uint32_t DOEPTSIZ1;
    __IOM uint32_t DOEPDMA1;
    __IM uint32_t RESERVED52[2];
    __IOM uint32_t DOEPCTL2;
    __IM uint32_t RESERVED53;
    __IOM uint32_t DOEPINT2;
    __IM uint32_t RESERVED54;
    __IOM uint32_t DOEPTSIZ2;
    __IOM uint32_t DOEPDMA2;
    __IM uint32_t RESERVED55[2];
    __IOM uint32_t DOEPCTL3;
    __IM uint32_t RESERVED56;
    __IOM uint32_t DOEPINT3;
    __IM uint32_t RESERVED57;
    __IOM uint32_t DOEPTSIZ3;
    __IOM uint32_t DOEPDMA3;
    __IM uint32_t RESERVED58[2];
    __IOM uint32_t DOEPCTL4;
    __IM uint32_t RESERVED59;
    __IOM uint32_t DOEPINT4;
    __IM uint32_t RESERVED60;
    __IOM uint32_t DOEPTSIZ4;
    __IOM uint32_t DOEPDMA4;
    __IM uint32_t RESERVED61[2];
    __IOM uint32_t DOEPCTL5;
    __IM uint32_t RESERVED62;
    __IOM uint32_t DOEPINT5;
    __IM uint32_t RESERVED63;
    __IOM uint32_t DOEPTSIZ5;
    __IOM uint32_t DOEPDMA5;
    __IM uint32_t RESERVED64[50];
    __IOM uint32_t DOEPCTL12;
    __IM uint32_t RESERVED65;
    __IOM uint32_t DOEPINT12;
    __IM uint32_t RESERVED66;
    __IOM uint32_t DOEPTSIZ12;
    __IOM uint32_t DOEPDMA12;
    __IM uint32_t RESERVED67[2];
    __IOM uint32_t DOEPCTL13;
    __IM uint32_t RESERVED68;
    __IOM uint32_t DOEPINT13;
    __IM uint32_t RESERVED69;
    __IOM uint32_t DOEPTSIZ13;
    __IOM uint32_t DOEPDMA13;
    __IM uint32_t RESERVED70[2];
    __IOM uint32_t DOEPCTL14;
    __IM uint32_t RESERVED71;
    __IOM uint32_t DOEPINT14;
    __IM uint32_t RESERVED72;
    __IOM uint32_t DOEPTSIZ14;
    __IOM uint32_t DOEPDMA14;
    __IM uint32_t RESERVED73[2];
    __IOM uint32_t DOEPCTL15;
    __IM uint32_t RESERVED74;
    __IOM uint32_t DOEPINT15;
    __IM uint32_t RESERVED75;
    __IOM uint32_t DOEPTSIZ15;
    __IOM uint32_t DOEPDMA15;
    __IM uint32_t RESERVED76[66];
    __IOM uint32_t PCGCCTL;
    __IM uint32_t RESERVED77[63];
    __IOM uint32_t GSTARFXDIS;
    __IM uint32_t RESERVED78[63];
    __IOM NRF_USBHSCORE_DWCOTGDFIFO_Type DWCOTGDFIFO[16];
    __IM uint32_t RESERVED79[15360];
    __IOM NRF_USBHSCORE_DWCOTGDFIFODIRECTACCESS_Type DWCOTGDFIFODIRECTACCESS;
  } NRF_USBHSCORE_Type;

/* USBHSCORE_GOTGCTL: Control and Status Register */
  #define USBHSCORE_GOTGCTL_ResetValue (0x000D0000UL)

/* VBVALIDOVEN @Bit 2 : Mode: Host only. VBUS Valid Override Enable (VbvalidOvEn) */
  #define USBHSCORE_GOTGCTL_VBVALIDOVEN_Pos (2UL)
  #define USBHSCORE_GOTGCTL_VBVALIDOVEN_Msk (0x1UL << USBHSCORE_GOTGCTL_VBVALIDOVEN_Pos)
  #define USBHSCORE_GOTGCTL_VBVALIDOVEN_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_VBVALIDOVEN_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_VBVALIDOVEN_DISABLED (0x0UL) /*!< Override is disabled and bvalid signal from the respective PHY
                                                              selected is used internally by the controller*/
  #define USBHSCORE_GOTGCTL_VBVALIDOVEN_ENABLED (0x1UL) /*!< The vbus-valid signal received from the PHY is overridden with
                                                             GOTGCTL.VbvalidOvVal*/

/* VBVALIDOVVAL @Bit 3 : Mode: Host only. VBUS Valid OverrideValue (VbvalidOvVal) */
  #define USBHSCORE_GOTGCTL_VBVALIDOVVAL_Pos (3UL)
  #define USBHSCORE_GOTGCTL_VBVALIDOVVAL_Msk (0x1UL << USBHSCORE_GOTGCTL_VBVALIDOVVAL_Pos)
  #define USBHSCORE_GOTGCTL_VBVALIDOVVAL_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_VBVALIDOVVAL_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_VBVALIDOVVAL_SET0 (0x0UL)
  #define USBHSCORE_GOTGCTL_VBVALIDOVVAL_SET1 (0x1UL)

/* AVALIDOVEN @Bit 4 : Mode: Host only. A-Peripheral Session Valid Override Enable (AvalidOvEn) */
  #define USBHSCORE_GOTGCTL_AVALIDOVEN_Pos (4UL)
  #define USBHSCORE_GOTGCTL_AVALIDOVEN_Msk (0x1UL << USBHSCORE_GOTGCTL_AVALIDOVEN_Pos)
  #define USBHSCORE_GOTGCTL_AVALIDOVEN_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_AVALIDOVEN_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_AVALIDOVEN_DISABLED (0x0UL)
  #define USBHSCORE_GOTGCTL_AVALIDOVEN_ENABLED (0x1UL)

/* AVALIDOVVAL @Bit 5 : Mode: Host only. A-Peripheral Session Valid OverrideValue (AvalidOvVal) */
  #define USBHSCORE_GOTGCTL_AVALIDOVVAL_Pos (5UL)
  #define USBHSCORE_GOTGCTL_AVALIDOVVAL_Msk (0x1UL << USBHSCORE_GOTGCTL_AVALIDOVVAL_Pos)
  #define USBHSCORE_GOTGCTL_AVALIDOVVAL_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_AVALIDOVVAL_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_AVALIDOVVAL_VALUE0 (0x0UL)
  #define USBHSCORE_GOTGCTL_AVALIDOVVAL_VALUE1 (0x1UL)

/* BVALIDOVEN @Bit 6 : Mode: Device only. B-Peripheral Session Valid Override Value (BvalidOvEn) */
  #define USBHSCORE_GOTGCTL_BVALIDOVEN_Pos (6UL)
  #define USBHSCORE_GOTGCTL_BVALIDOVEN_Msk (0x1UL << USBHSCORE_GOTGCTL_BVALIDOVEN_Pos)
  #define USBHSCORE_GOTGCTL_BVALIDOVEN_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_BVALIDOVEN_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_BVALIDOVEN_DISABLED (0x0UL) /*!< Override is disabled and bvalid signal from the respective PHY
                                                             selected is used internally by the core*/
  #define USBHSCORE_GOTGCTL_BVALIDOVEN_ENABLED (0x1UL) /*!< Internally Bvalid received from the PHY is overridden with
                                                            GOTGCTL.BvalidOvVal*/

/* BVALIDOVVAL @Bit 7 : Mode: Device only. B-Peripheral Session Valid OverrideValue (BvalidOvVal) */
  #define USBHSCORE_GOTGCTL_BVALIDOVVAL_Pos (7UL)
  #define USBHSCORE_GOTGCTL_BVALIDOVVAL_Msk (0x1UL << USBHSCORE_GOTGCTL_BVALIDOVVAL_Pos)
  #define USBHSCORE_GOTGCTL_BVALIDOVVAL_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_BVALIDOVVAL_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_BVALIDOVVAL_VALUE0 (0x0UL)
  #define USBHSCORE_GOTGCTL_BVALIDOVVAL_VALUE1 (0x1UL)

/* DBNCEFLTRBYPASS @Bit 15 : Mode: Host and Device. Debounce Filter Bypass */
  #define USBHSCORE_GOTGCTL_DBNCEFLTRBYPASS_Pos (15UL)
  #define USBHSCORE_GOTGCTL_DBNCEFLTRBYPASS_Msk (0x1UL << USBHSCORE_GOTGCTL_DBNCEFLTRBYPASS_Pos) /*!< Bit mask of
                                                                            DBNCEFLTRBYPASS field.*/
  #define USBHSCORE_GOTGCTL_DBNCEFLTRBYPASS_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_DBNCEFLTRBYPASS_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_DBNCEFLTRBYPASS_DISABLED (0x0UL)
  #define USBHSCORE_GOTGCTL_DBNCEFLTRBYPASS_ENABLED (0x1UL)

/* CONIDSTS @Bit 16 : Mode: Host and Device. Connector ID Status (ConIDSts) */
  #define USBHSCORE_GOTGCTL_CONIDSTS_Pos (16UL)
  #define USBHSCORE_GOTGCTL_CONIDSTS_Msk (0x1UL << USBHSCORE_GOTGCTL_CONIDSTS_Pos)
  #define USBHSCORE_GOTGCTL_CONIDSTS_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_CONIDSTS_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_CONIDSTS_MODEA (0x0UL)
  #define USBHSCORE_GOTGCTL_CONIDSTS_MODEB (0x1UL)

/* DBNCTIME @Bit 17 : Mode: Host only. Long/Short Debounce Time (DbncTime) */
  #define USBHSCORE_GOTGCTL_DBNCTIME_Pos (17UL)
  #define USBHSCORE_GOTGCTL_DBNCTIME_Msk (0x1UL << USBHSCORE_GOTGCTL_DBNCTIME_Pos)
  #define USBHSCORE_GOTGCTL_DBNCTIME_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_DBNCTIME_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_DBNCTIME_LONG (0x0UL)    /*!< Long debounce time, used for physical connections (100 ms + 2.5
                                                          micro-sec)*/
  #define USBHSCORE_GOTGCTL_DBNCTIME_SHORT (0x1UL)

/* ASESVLD @Bit 18 : Mode: Host only. A-Session Valid (ASesVld) */
  #define USBHSCORE_GOTGCTL_ASESVLD_Pos (18UL)
  #define USBHSCORE_GOTGCTL_ASESVLD_Msk (0x1UL << USBHSCORE_GOTGCTL_ASESVLD_Pos)
  #define USBHSCORE_GOTGCTL_ASESVLD_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_ASESVLD_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_ASESVLD_NOTVALID (0x0UL)
  #define USBHSCORE_GOTGCTL_ASESVLD_VALID (0x1UL)

/* BSESVLD @Bit 19 : Mode: Device only. B-Session Valid (BSesVld) */
  #define USBHSCORE_GOTGCTL_BSESVLD_Pos (19UL)
  #define USBHSCORE_GOTGCTL_BSESVLD_Msk (0x1UL << USBHSCORE_GOTGCTL_BSESVLD_Pos)
  #define USBHSCORE_GOTGCTL_BSESVLD_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_BSESVLD_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_BSESVLD_NOTVALID (0x0UL)
  #define USBHSCORE_GOTGCTL_BSESVLD_VALID (0x1UL)

/* OTGVER @Bit 20 : OTG Version (OTGVer) */
  #define USBHSCORE_GOTGCTL_OTGVER_Pos (20UL)
  #define USBHSCORE_GOTGCTL_OTGVER_Msk (0x1UL << USBHSCORE_GOTGCTL_OTGVER_Pos)
  #define USBHSCORE_GOTGCTL_OTGVER_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_OTGVER_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_OTGVER_VER13 (0x0UL)
  #define USBHSCORE_GOTGCTL_OTGVER_VER20 (0x1UL)

/* CURMOD @Bit 21 : Current Mode of Operation (CurMod) */
  #define USBHSCORE_GOTGCTL_CURMOD_Pos (21UL)
  #define USBHSCORE_GOTGCTL_CURMOD_Msk (0x1UL << USBHSCORE_GOTGCTL_CURMOD_Pos)
  #define USBHSCORE_GOTGCTL_CURMOD_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_CURMOD_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_CURMOD_DEVICEMODE (0x0UL)
  #define USBHSCORE_GOTGCTL_CURMOD_HOSTMODE (0x1UL)

/* MULTVALIDBC @Bits 22..26 : Mode: Host and Device. Multi Valued ID pin (MultValIdBC) */
  #define USBHSCORE_GOTGCTL_MULTVALIDBC_Pos (22UL)
  #define USBHSCORE_GOTGCTL_MULTVALIDBC_Msk (0x1FUL << USBHSCORE_GOTGCTL_MULTVALIDBC_Pos)
  #define USBHSCORE_GOTGCTL_MULTVALIDBC_Min (0x1UL)
  #define USBHSCORE_GOTGCTL_MULTVALIDBC_Max (0x10UL)
  #define USBHSCORE_GOTGCTL_MULTVALIDBC_RID_C (0x01UL)
  #define USBHSCORE_GOTGCTL_MULTVALIDBC_RID_B (0x02UL)
  #define USBHSCORE_GOTGCTL_MULTVALIDBC_RID_A (0x04UL)
  #define USBHSCORE_GOTGCTL_MULTVALIDBC_RID_GND (0x08UL)
  #define USBHSCORE_GOTGCTL_MULTVALIDBC_RID_FLOAT (0x10UL)

/* CHIRPEN @Bit 27 : Mode: Device Only. This bit when programmed to 1'b1 results in the core asserting chirp_on before sending
                     an actual Chirp 'K' signal on USB. This bit is present only if OTG_BC_SUPPORT = 1.If OTG_BC_SUPPORT!=1,
                     this bit is a reserved bit. Do not set this bit when core is operating in HSIC mode because HSIC always
                     operates at High Speed and High speed chirp is not used */

  #define USBHSCORE_GOTGCTL_CHIRPEN_Pos (27UL)
  #define USBHSCORE_GOTGCTL_CHIRPEN_Msk (0x1UL << USBHSCORE_GOTGCTL_CHIRPEN_Pos)
  #define USBHSCORE_GOTGCTL_CHIRPEN_Min (0x0UL)
  #define USBHSCORE_GOTGCTL_CHIRPEN_Max (0x1UL)
  #define USBHSCORE_GOTGCTL_CHIRPEN_CHIRP_DISABLE (0x0UL) /*!< The controller does not assert chirp_on before sending an actual
                                                               Chirp 'K' signal on USB.*/
  #define USBHSCORE_GOTGCTL_CHIRPEN_CHIRP_ENABLE (0x1UL) /*!< The controller asserts chirp_on before sending an actual Chirp 'K'
                                                              signal on USB.*/


/* USBHSCORE_GOTGINT: Interrupt Register */
  #define USBHSCORE_GOTGINT_ResetValue (0x00000000UL)

/* SESENDDET @Bit 2 : Mode: Host and Device. Session End Detected (SesEndDet) */
  #define USBHSCORE_GOTGINT_SESENDDET_Pos (2UL)
  #define USBHSCORE_GOTGINT_SESENDDET_Msk (0x1UL << USBHSCORE_GOTGINT_SESENDDET_Pos)
  #define USBHSCORE_GOTGINT_SESENDDET_Min (0x0UL)
  #define USBHSCORE_GOTGINT_SESENDDET_Max (0x1UL)
  #define USBHSCORE_GOTGINT_SESENDDET_INACTIVE (0x0UL)
  #define USBHSCORE_GOTGINT_SESENDDET_ACTIVE (0x1UL)

/* SESREQSUCSTSCHNG @Bit 8 : Mode: Host and Device. Session Request Success Status Change (SesReqSucStsChng) */
  #define USBHSCORE_GOTGINT_SESREQSUCSTSCHNG_Pos (8UL)
  #define USBHSCORE_GOTGINT_SESREQSUCSTSCHNG_Msk (0x1UL << USBHSCORE_GOTGINT_SESREQSUCSTSCHNG_Pos) /*!< Bit mask of
                                                                            SESREQSUCSTSCHNG field.*/
  #define USBHSCORE_GOTGINT_SESREQSUCSTSCHNG_Min (0x0UL)
  #define USBHSCORE_GOTGINT_SESREQSUCSTSCHNG_Max (0x1UL)
  #define USBHSCORE_GOTGINT_SESREQSUCSTSCHNG_INACTIVE (0x0UL)
  #define USBHSCORE_GOTGINT_SESREQSUCSTSCHNG_ACTIVE (0x1UL)

/* HSTNEGSUCSTSCHNG @Bit 9 : Mode: Host and Device. Host Negotiation Success Status Change (HstNegSucStsChng) */
  #define USBHSCORE_GOTGINT_HSTNEGSUCSTSCHNG_Pos (9UL)
  #define USBHSCORE_GOTGINT_HSTNEGSUCSTSCHNG_Msk (0x1UL << USBHSCORE_GOTGINT_HSTNEGSUCSTSCHNG_Pos) /*!< Bit mask of
                                                                            HSTNEGSUCSTSCHNG field.*/
  #define USBHSCORE_GOTGINT_HSTNEGSUCSTSCHNG_Min (0x0UL)
  #define USBHSCORE_GOTGINT_HSTNEGSUCSTSCHNG_Max (0x1UL)
  #define USBHSCORE_GOTGINT_HSTNEGSUCSTSCHNG_INACTIVE (0x0UL)
  #define USBHSCORE_GOTGINT_HSTNEGSUCSTSCHNG_ACTIVE (0x1UL)

/* HSTNEGDET @Bit 17 : Mode:Host and Device. Host Negotiation Detected (HstNegDet) */
  #define USBHSCORE_GOTGINT_HSTNEGDET_Pos (17UL)
  #define USBHSCORE_GOTGINT_HSTNEGDET_Msk (0x1UL << USBHSCORE_GOTGINT_HSTNEGDET_Pos)
  #define USBHSCORE_GOTGINT_HSTNEGDET_Min (0x0UL)
  #define USBHSCORE_GOTGINT_HSTNEGDET_Max (0x1UL)
  #define USBHSCORE_GOTGINT_HSTNEGDET_INACTIVE (0x0UL)
  #define USBHSCORE_GOTGINT_HSTNEGDET_ACTIVE (0x1UL)

/* ADEVTOUTCHG @Bit 18 : Mode: Host and Device. A-Device Timeout Change (ADevTOUTChg) */
  #define USBHSCORE_GOTGINT_ADEVTOUTCHG_Pos (18UL)
  #define USBHSCORE_GOTGINT_ADEVTOUTCHG_Msk (0x1UL << USBHSCORE_GOTGINT_ADEVTOUTCHG_Pos)
  #define USBHSCORE_GOTGINT_ADEVTOUTCHG_Min (0x0UL)
  #define USBHSCORE_GOTGINT_ADEVTOUTCHG_Max (0x1UL)
  #define USBHSCORE_GOTGINT_ADEVTOUTCHG_INACTIVE (0x0UL)
  #define USBHSCORE_GOTGINT_ADEVTOUTCHG_ACTIVE (0x1UL)

/* DBNCEDONE @Bit 19 : Mode: Host only. Debounce Done (DbnceDone) */
  #define USBHSCORE_GOTGINT_DBNCEDONE_Pos (19UL)
  #define USBHSCORE_GOTGINT_DBNCEDONE_Msk (0x1UL << USBHSCORE_GOTGINT_DBNCEDONE_Pos)
  #define USBHSCORE_GOTGINT_DBNCEDONE_Min (0x0UL)
  #define USBHSCORE_GOTGINT_DBNCEDONE_Max (0x1UL)
  #define USBHSCORE_GOTGINT_DBNCEDONE_INACTIVE (0x0UL)
  #define USBHSCORE_GOTGINT_DBNCEDONE_ACTIVE (0x1UL)

/* MULTVALIPCHNG @Bit 20 : This bit when set indicates that there is a change in the value of at least one ACA pin value. */
  #define USBHSCORE_GOTGINT_MULTVALIPCHNG_Pos (20UL)
  #define USBHSCORE_GOTGINT_MULTVALIPCHNG_Msk (0x1UL << USBHSCORE_GOTGINT_MULTVALIPCHNG_Pos) /*!< Bit mask of MULTVALIPCHNG
                                                                            field.*/
  #define USBHSCORE_GOTGINT_MULTVALIPCHNG_Min (0x0UL)
  #define USBHSCORE_GOTGINT_MULTVALIPCHNG_Max (0x1UL)
  #define USBHSCORE_GOTGINT_MULTVALIPCHNG_NO_ACA_PIN_CHANGE (0x0UL)
  #define USBHSCORE_GOTGINT_MULTVALIPCHNG_ACA_PIN_CHANGE (0x1UL)


/* USBHSCORE_GAHBCFG: AHB Configuration Register */
  #define USBHSCORE_GAHBCFG_ResetValue (0x00000000UL)

/* GLBLINTRMSK @Bit 0 : Mode: Host and device. Global Interrupt Mask (GlblIntrMsk) */
  #define USBHSCORE_GAHBCFG_GLBLINTRMSK_Pos (0UL)
  #define USBHSCORE_GAHBCFG_GLBLINTRMSK_Msk (0x1UL << USBHSCORE_GAHBCFG_GLBLINTRMSK_Pos)
  #define USBHSCORE_GAHBCFG_GLBLINTRMSK_Min (0x0UL)
  #define USBHSCORE_GAHBCFG_GLBLINTRMSK_Max (0x1UL)
  #define USBHSCORE_GAHBCFG_GLBLINTRMSK_MASK (0x0UL)
  #define USBHSCORE_GAHBCFG_GLBLINTRMSK_NOMASK (0x1UL)

/* HBSTLEN @Bits 1..4 : Mode: Host and device. Burst Length/Type (HBstLen) */
  #define USBHSCORE_GAHBCFG_HBSTLEN_Pos (1UL)
  #define USBHSCORE_GAHBCFG_HBSTLEN_Msk (0xFUL << USBHSCORE_GAHBCFG_HBSTLEN_Pos)
  #define USBHSCORE_GAHBCFG_HBSTLEN_Min (0x0UL)
  #define USBHSCORE_GAHBCFG_HBSTLEN_Max (0x8UL)
  #define USBHSCORE_GAHBCFG_HBSTLEN_WORD1ORSINGLE (0x0UL)
  #define USBHSCORE_GAHBCFG_HBSTLEN_WORD4ORINCR (0x1UL)
  #define USBHSCORE_GAHBCFG_HBSTLEN_WORD8 (0x2UL)
  #define USBHSCORE_GAHBCFG_HBSTLEN_WORD16ORINCR4 (0x3UL)
  #define USBHSCORE_GAHBCFG_HBSTLEN_WORD32 (0x4UL)
  #define USBHSCORE_GAHBCFG_HBSTLEN_WORD64ORINCR8 (0x5UL)
  #define USBHSCORE_GAHBCFG_HBSTLEN_WORD128 (0x6UL)
  #define USBHSCORE_GAHBCFG_HBSTLEN_WORD256ORINCR16 (0x7UL)
  #define USBHSCORE_GAHBCFG_HBSTLEN_WORDX (0x8UL)

/* DMAEN @Bit 5 : Mode: Host and device. DMA Enable (DMAEn) */
  #define USBHSCORE_GAHBCFG_DMAEN_Pos (5UL)
  #define USBHSCORE_GAHBCFG_DMAEN_Msk (0x1UL << USBHSCORE_GAHBCFG_DMAEN_Pos)
  #define USBHSCORE_GAHBCFG_DMAEN_Min (0x0UL)
  #define USBHSCORE_GAHBCFG_DMAEN_Max (0x1UL)
  #define USBHSCORE_GAHBCFG_DMAEN_SLAVEMODE (0x0UL)
  #define USBHSCORE_GAHBCFG_DMAEN_DMAMODE (0x1UL)

/* NPTXFEMPLVL @Bit 7 : Mode: Host and device. Non-Periodic TxFIFO Empty Level (NPTxFEmpLvl) */
  #define USBHSCORE_GAHBCFG_NPTXFEMPLVL_Pos (7UL)
  #define USBHSCORE_GAHBCFG_NPTXFEMPLVL_Msk (0x1UL << USBHSCORE_GAHBCFG_NPTXFEMPLVL_Pos)
  #define USBHSCORE_GAHBCFG_NPTXFEMPLVL_Min (0x0UL)
  #define USBHSCORE_GAHBCFG_NPTXFEMPLVL_Max (0x1UL)
  #define USBHSCORE_GAHBCFG_NPTXFEMPLVL_HALFEMPTY (0x0UL) /*!< DIEPINTn.TxFEmp interrupt indicates that the Non-Periodic TxFIFO
                                                               is half empty or that the IN Endpoint TxFIFO is half empty.*/
  #define USBHSCORE_GAHBCFG_NPTXFEMPLVL_EMPTY (0x1UL) /*!< GINTSTS.NPTxFEmp interrupt indicates that the Non-Periodic TxFIFO is
                                                           completely empty or that the IN Endpoint TxFIFO is completely empty.*/

/* REMMEMSUPP @Bit 21 : Mode: Host and Device. Remote Memory Support (RemMemSupp) */
  #define USBHSCORE_GAHBCFG_REMMEMSUPP_Pos (21UL)
  #define USBHSCORE_GAHBCFG_REMMEMSUPP_Msk (0x1UL << USBHSCORE_GAHBCFG_REMMEMSUPP_Pos)
  #define USBHSCORE_GAHBCFG_REMMEMSUPP_Min (0x0UL)
  #define USBHSCORE_GAHBCFG_REMMEMSUPP_Max (0x1UL)
  #define USBHSCORE_GAHBCFG_REMMEMSUPP_DISABLED (0x0UL)
  #define USBHSCORE_GAHBCFG_REMMEMSUPP_ENABLED (0x1UL)

/* NOTIALLDMAWRIT @Bit 22 : Mode: Host and Device. Notify All DMA Write Transactions (NotiAllDmaWrit) */
  #define USBHSCORE_GAHBCFG_NOTIALLDMAWRIT_Pos (22UL)
  #define USBHSCORE_GAHBCFG_NOTIALLDMAWRIT_Msk (0x1UL << USBHSCORE_GAHBCFG_NOTIALLDMAWRIT_Pos) /*!< Bit mask of NOTIALLDMAWRIT
                                                                            field.*/
  #define USBHSCORE_GAHBCFG_NOTIALLDMAWRIT_Min (0x0UL)
  #define USBHSCORE_GAHBCFG_NOTIALLDMAWRIT_Max (0x1UL)
  #define USBHSCORE_GAHBCFG_NOTIALLDMAWRIT_LASTTRANS (0x0UL)
  #define USBHSCORE_GAHBCFG_NOTIALLDMAWRIT_ALLTRANS (0x1UL) /*!< The core asserts int_dma_req for all the DMA write transactions
                                                                 on the AHB interface along with int_dma_done,
                                                                 chep_last_transact and chep_number signal informations. The
                                                                 core waits for sys_dma_done signal for all the DMA write
                                                                 transactions in order to complete the transfer of a particular
                                                                 Channel/Endpoint*/

/* AHBSINGLE @Bit 23 : Mode: Host and Device. AHB Single Support (AHBSingle) */
  #define USBHSCORE_GAHBCFG_AHBSINGLE_Pos (23UL)
  #define USBHSCORE_GAHBCFG_AHBSINGLE_Msk (0x1UL << USBHSCORE_GAHBCFG_AHBSINGLE_Pos)
  #define USBHSCORE_GAHBCFG_AHBSINGLE_Min (0x0UL)
  #define USBHSCORE_GAHBCFG_AHBSINGLE_Max (0x1UL)
  #define USBHSCORE_GAHBCFG_AHBSINGLE_INCRBURST (0x0UL)
  #define USBHSCORE_GAHBCFG_AHBSINGLE_SINGLEBURST (0x1UL) /*!< The remaining data in the transfer is sent using Single burst
                                                               size*/


/* USBHSCORE_GUSBCFG: USB Configuration Register */
  #define USBHSCORE_GUSBCFG_ResetValue (0x10001400UL)

/* TOUTCAL @Bits 0..2 : Mode: Host and Device. HS/FS Timeout Calibration (TOutCal) */
  #define USBHSCORE_GUSBCFG_TOUTCAL_Pos (0UL)
  #define USBHSCORE_GUSBCFG_TOUTCAL_Msk (0x7UL << USBHSCORE_GUSBCFG_TOUTCAL_Pos)
  #define USBHSCORE_GUSBCFG_TOUTCAL_Min (0x0UL)
  #define USBHSCORE_GUSBCFG_TOUTCAL_Max (0x7UL)
  #define USBHSCORE_GUSBCFG_TOUTCAL_ZERO (0x0UL)
  #define USBHSCORE_GUSBCFG_TOUTCAL_ONE (0x1UL)
  #define USBHSCORE_GUSBCFG_TOUTCAL_TWO (0x2UL)
  #define USBHSCORE_GUSBCFG_TOUTCAL_THREE (0x3UL)
  #define USBHSCORE_GUSBCFG_TOUTCAL_FOUR (0x4UL)
  #define USBHSCORE_GUSBCFG_TOUTCAL_FIVE (0x5UL)
  #define USBHSCORE_GUSBCFG_TOUTCAL_SIX (0x6UL)
  #define USBHSCORE_GUSBCFG_TOUTCAL_SEVEN (0x7UL)

/* PHYIF @Bit 3 : Mode: Host and Device. PHY Interface (PHYIf) */
  #define USBHSCORE_GUSBCFG_PHYIF_Pos (3UL)
  #define USBHSCORE_GUSBCFG_PHYIF_Msk (0x1UL << USBHSCORE_GUSBCFG_PHYIF_Pos)
  #define USBHSCORE_GUSBCFG_PHYIF_Min (0x0UL)
  #define USBHSCORE_GUSBCFG_PHYIF_Max (0x1UL)
  #define USBHSCORE_GUSBCFG_PHYIF_BITS8 (0x0UL)
  #define USBHSCORE_GUSBCFG_PHYIF_BITS16 (0x1UL)

/* ULPIUTMISEL @Bit 4 : Mode: Host and Device. ULPI or UTMI+ Select (ULPI_UTMI_Sel) */
  #define USBHSCORE_GUSBCFG_ULPIUTMISEL_Pos (4UL)
  #define USBHSCORE_GUSBCFG_ULPIUTMISEL_Msk (0x1UL << USBHSCORE_GUSBCFG_ULPIUTMISEL_Pos)
  #define USBHSCORE_GUSBCFG_ULPIUTMISEL_Min (0x0UL)
  #define USBHSCORE_GUSBCFG_ULPIUTMISEL_Max (0x1UL)
  #define USBHSCORE_GUSBCFG_ULPIUTMISEL_UTMI (0x0UL)
  #define USBHSCORE_GUSBCFG_ULPIUTMISEL_ULPI (0x1UL)

/* FSINTF @Bit 5 : Mode: Host and Device. Full-Speed Serial Interface Select (FSIntf) */
  #define USBHSCORE_GUSBCFG_FSINTF_Pos (5UL)
  #define USBHSCORE_GUSBCFG_FSINTF_Msk (0x1UL << USBHSCORE_GUSBCFG_FSINTF_Pos)
  #define USBHSCORE_GUSBCFG_FSINTF_Min (0x0UL)
  #define USBHSCORE_GUSBCFG_FSINTF_Max (0x1UL)
  #define USBHSCORE_GUSBCFG_FSINTF_FS6PIN (0x0UL)
  #define USBHSCORE_GUSBCFG_FSINTF_FS3PIN (0x1UL)

/* PHYSEL @Bit 6 : PHYSel */
  #define USBHSCORE_GUSBCFG_PHYSEL_Pos (6UL)
  #define USBHSCORE_GUSBCFG_PHYSEL_Msk (0x1UL << USBHSCORE_GUSBCFG_PHYSEL_Pos)
  #define USBHSCORE_GUSBCFG_PHYSEL_Min (0x0UL)
  #define USBHSCORE_GUSBCFG_PHYSEL_Max (0x1UL)
  #define USBHSCORE_GUSBCFG_PHYSEL_USB20 (0x0UL)
  #define USBHSCORE_GUSBCFG_PHYSEL_USB11 (0x1UL)

/* USBTRDTIM @Bits 10..13 : Mode: Device only. USB Turnaround Time (USBTrdTim) */
  #define USBHSCORE_GUSBCFG_USBTRDTIM_Pos (10UL)
  #define USBHSCORE_GUSBCFG_USBTRDTIM_Msk (0xFUL << USBHSCORE_GUSBCFG_USBTRDTIM_Pos)
  #define USBHSCORE_GUSBCFG_USBTRDTIM_Min (0x5UL)
  #define USBHSCORE_GUSBCFG_USBTRDTIM_Max (0x9UL)
  #define USBHSCORE_GUSBCFG_USBTRDTIM_TURNTIME16BIT (0x5UL)
  #define USBHSCORE_GUSBCFG_USBTRDTIM_TURNTIME8BIT (0x9UL)

/* PHYLPWRCLKSEL @Bit 15 : PHY Low-Power Clock Select (PhyLPwrClkSel) */
  #define USBHSCORE_GUSBCFG_PHYLPWRCLKSEL_Pos (15UL)
  #define USBHSCORE_GUSBCFG_PHYLPWRCLKSEL_Msk (0x1UL << USBHSCORE_GUSBCFG_PHYLPWRCLKSEL_Pos) /*!< Bit mask of PHYLPWRCLKSEL
                                                                            field.*/
  #define USBHSCORE_GUSBCFG_PHYLPWRCLKSEL_Min (0x0UL)
  #define USBHSCORE_GUSBCFG_PHYLPWRCLKSEL_Max (0x1UL)
  #define USBHSCORE_GUSBCFG_PHYLPWRCLKSEL_INTPLLCLK (0x0UL)
  #define USBHSCORE_GUSBCFG_PHYLPWRCLKSEL_EXTCLK (0x1UL)

/* TERMSELDLPULSE @Bit 22 : Mode: Device only. TermSel DLine Pulsing Selection (TermSelDLPulse) */
  #define USBHSCORE_GUSBCFG_TERMSELDLPULSE_Pos (22UL)
  #define USBHSCORE_GUSBCFG_TERMSELDLPULSE_Msk (0x1UL << USBHSCORE_GUSBCFG_TERMSELDLPULSE_Pos) /*!< Bit mask of TERMSELDLPULSE
                                                                            field.*/
  #define USBHSCORE_GUSBCFG_TERMSELDLPULSE_Min (0x0UL)
  #define USBHSCORE_GUSBCFG_TERMSELDLPULSE_Max (0x1UL)
  #define USBHSCORE_GUSBCFG_TERMSELDLPULSE_TXVALID (0x0UL)
  #define USBHSCORE_GUSBCFG_TERMSELDLPULSE_TERMSEL (0x1UL)

/* ICUSBCAP @Bit 26 : Mode: Host and Device. IC_USB-Capable (IC_USBCap) */
  #define USBHSCORE_GUSBCFG_ICUSBCAP_Pos (26UL)
  #define USBHSCORE_GUSBCFG_ICUSBCAP_Msk (0x1UL << USBHSCORE_GUSBCFG_ICUSBCAP_Pos)
  #define USBHSCORE_GUSBCFG_ICUSBCAP_Min (0x0UL)
  #define USBHSCORE_GUSBCFG_ICUSBCAP_Max (0x1UL)
  #define USBHSCORE_GUSBCFG_ICUSBCAP_NOTSELECTED (0x0UL)
  #define USBHSCORE_GUSBCFG_ICUSBCAP_SELECTED (0x1UL)

/* TXENDDELAY @Bit 28 : Mode: Device only. Tx End Delay (TxEndDelay) */
  #define USBHSCORE_GUSBCFG_TXENDDELAY_Pos (28UL)
  #define USBHSCORE_GUSBCFG_TXENDDELAY_Msk (0x1UL << USBHSCORE_GUSBCFG_TXENDDELAY_Pos)
  #define USBHSCORE_GUSBCFG_TXENDDELAY_Min (0x0UL)
  #define USBHSCORE_GUSBCFG_TXENDDELAY_Max (0x1UL)
  #define USBHSCORE_GUSBCFG_TXENDDELAY_DISABLED (0x0UL)
  #define USBHSCORE_GUSBCFG_TXENDDELAY_ENABLED (0x1UL)

/* FORCEHSTMODE @Bit 29 : Mode: Host and device. Force Host Mode (ForceHstMode) */
  #define USBHSCORE_GUSBCFG_FORCEHSTMODE_Pos (29UL)
  #define USBHSCORE_GUSBCFG_FORCEHSTMODE_Msk (0x1UL << USBHSCORE_GUSBCFG_FORCEHSTMODE_Pos)
  #define USBHSCORE_GUSBCFG_FORCEHSTMODE_Min (0x0UL)
  #define USBHSCORE_GUSBCFG_FORCEHSTMODE_Max (0x1UL)
  #define USBHSCORE_GUSBCFG_FORCEHSTMODE_DISABLED (0x0UL)
  #define USBHSCORE_GUSBCFG_FORCEHSTMODE_ENABLED (0x1UL)

/* FORCEDEVMODE @Bit 30 : Mode:Host and device. Force Device Mode (ForceDevMode) */
  #define USBHSCORE_GUSBCFG_FORCEDEVMODE_Pos (30UL)
  #define USBHSCORE_GUSBCFG_FORCEDEVMODE_Msk (0x1UL << USBHSCORE_GUSBCFG_FORCEDEVMODE_Pos)
  #define USBHSCORE_GUSBCFG_FORCEDEVMODE_Min (0x0UL)
  #define USBHSCORE_GUSBCFG_FORCEDEVMODE_Max (0x1UL)
  #define USBHSCORE_GUSBCFG_FORCEDEVMODE_DISABLED (0x0UL)
  #define USBHSCORE_GUSBCFG_FORCEDEVMODE_ENABLED (0x1UL)

/* CORRUPTTXPKT @Bit 31 : Mode: Host and device. Corrupt Tx packet (CorruptTxPkt) */
  #define USBHSCORE_GUSBCFG_CORRUPTTXPKT_Pos (31UL)
  #define USBHSCORE_GUSBCFG_CORRUPTTXPKT_Msk (0x1UL << USBHSCORE_GUSBCFG_CORRUPTTXPKT_Pos)
  #define USBHSCORE_GUSBCFG_CORRUPTTXPKT_Min (0x0UL)
  #define USBHSCORE_GUSBCFG_CORRUPTTXPKT_Max (0x1UL)
  #define USBHSCORE_GUSBCFG_CORRUPTTXPKT_Disabled (0x0UL)
  #define USBHSCORE_GUSBCFG_CORRUPTTXPKT_Enabled (0x1UL)


/* USBHSCORE_GRSTCTL: Reset Register */
  #define USBHSCORE_GRSTCTL_ResetValue (0x80000000UL)

/* CSFTRST @Bit 0 : Mode: Host and Device. Core Soft Reset (CSftRst) */
  #define USBHSCORE_GRSTCTL_CSFTRST_Pos (0UL)
  #define USBHSCORE_GRSTCTL_CSFTRST_Msk (0x1UL << USBHSCORE_GRSTCTL_CSFTRST_Pos)
  #define USBHSCORE_GRSTCTL_CSFTRST_Min (0x0UL)
  #define USBHSCORE_GRSTCTL_CSFTRST_Max (0x1UL)
  #define USBHSCORE_GRSTCTL_CSFTRST_NOTACTIVE (0x0UL)
  #define USBHSCORE_GRSTCTL_CSFTRST_ACTIVE (0x1UL)

/* PIUFSSFTRST @Bit 1 : Mode: Host and Device. PIU FS Dedicated Controller Soft Reset (PIUFSSftRst) */
  #define USBHSCORE_GRSTCTL_PIUFSSFTRST_Pos (1UL)
  #define USBHSCORE_GRSTCTL_PIUFSSFTRST_Msk (0x1UL << USBHSCORE_GRSTCTL_PIUFSSFTRST_Pos)
  #define USBHSCORE_GRSTCTL_PIUFSSFTRST_Min (0x0UL)
  #define USBHSCORE_GRSTCTL_PIUFSSFTRST_Max (0x1UL)
  #define USBHSCORE_GRSTCTL_PIUFSSFTRST_RESET_INACTIVE (0x0UL)
  #define USBHSCORE_GRSTCTL_PIUFSSFTRST_RESET_ACTIVE (0x1UL)

/* FRMCNTRRST @Bit 2 : Mode: Host only. Host Frame Counter Reset (FrmCntrRst) */
  #define USBHSCORE_GRSTCTL_FRMCNTRRST_Pos (2UL)
  #define USBHSCORE_GRSTCTL_FRMCNTRRST_Msk (0x1UL << USBHSCORE_GRSTCTL_FRMCNTRRST_Pos)
  #define USBHSCORE_GRSTCTL_FRMCNTRRST_Min (0x0UL)
  #define USBHSCORE_GRSTCTL_FRMCNTRRST_Max (0x1UL)
  #define USBHSCORE_GRSTCTL_FRMCNTRRST_NOTACTIVE (0x0UL)
  #define USBHSCORE_GRSTCTL_FRMCNTRRST_ACTIVE (0x1UL)

/* RXFFLSH @Bit 4 : Mode: Host and Device. RxFIFO Flush (RxFFlsh) */
  #define USBHSCORE_GRSTCTL_RXFFLSH_Pos (4UL)
  #define USBHSCORE_GRSTCTL_RXFFLSH_Msk (0x1UL << USBHSCORE_GRSTCTL_RXFFLSH_Pos)
  #define USBHSCORE_GRSTCTL_RXFFLSH_Min (0x0UL)
  #define USBHSCORE_GRSTCTL_RXFFLSH_Max (0x1UL)
  #define USBHSCORE_GRSTCTL_RXFFLSH_INACTIVE (0x0UL)
  #define USBHSCORE_GRSTCTL_RXFFLSH_ACTIVE (0x1UL)

/* TXFFLSH @Bit 5 : Mode: Host and Device. TxFIFO Flush (TxFFlsh) */
  #define USBHSCORE_GRSTCTL_TXFFLSH_Pos (5UL)
  #define USBHSCORE_GRSTCTL_TXFFLSH_Msk (0x1UL << USBHSCORE_GRSTCTL_TXFFLSH_Pos)
  #define USBHSCORE_GRSTCTL_TXFFLSH_Min (0x0UL)
  #define USBHSCORE_GRSTCTL_TXFFLSH_Max (0x1UL)
  #define USBHSCORE_GRSTCTL_TXFFLSH_INACTIVE (0x0UL)
  #define USBHSCORE_GRSTCTL_TXFFLSH_ACTIVE (0x1UL)

/* TXFNUM @Bits 6..10 : Mode: Host and Device. TxFIFO Number (TxFNum) */
  #define USBHSCORE_GRSTCTL_TXFNUM_Pos (6UL)
  #define USBHSCORE_GRSTCTL_TXFNUM_Msk (0x1FUL << USBHSCORE_GRSTCTL_TXFNUM_Pos)
  #define USBHSCORE_GRSTCTL_TXFNUM_Min (0x0UL)
  #define USBHSCORE_GRSTCTL_TXFNUM_Max (0x10UL)
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF0 (0x00UL)     /*!< -Periodic TxFIFO flush in host mode -Periodic TxFIFO 0 flush in device
                                                          mode when in shared FIFO operation -TXFIFO 0 flush in device mode when
                                                          in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF1 (0x01UL)     /*!< -Periodic TxFIFO flush in host mode -Periodic TxFIFO 1 flush in device
                                                          mode when in shared FIFO operation -TXFIFO 1 flush in device mode when
                                                          in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF2 (0x02UL)     /*!< -Periodic TxFIFO 2 flush in device mode when in shared FIFO operation
                                                          -TXFIFO 2 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF3 (0x03UL)     /*!< -Periodic TxFIFO 3 flush in device mode when in shared FIFO operation
                                                          -TXFIFO 3 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF4 (0x04UL)     /*!< -Periodic TxFIFO 4 flush in device mode when in shared FIFO operation
                                                          -TXFIFO 4 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF5 (0x05UL)     /*!< -Periodic TxFIFO 5 flush in device mode when in shared FIFO operation
                                                          -TXFIFO 5 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF6 (0x06UL)     /*!< -Periodic TxFIFO 6 flush in device mode when in shared FIFO operation
                                                          -TXFIFO 6 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF7 (0x07UL)     /*!< -Periodic TxFIFO 7 flush in device mode when in shared FIFO operation
                                                          -TXFIFO 7 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF8 (0x08UL)     /*!< -Periodic TxFIFO 8 flush in device mode when in shared FIFO operation
                                                          -TXFIFO 8 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF9 (0x09UL)     /*!< -Periodic TxFIFO 9 flush in device mode when in shared FIFO operation
                                                          -TXFIFO 9 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF10 (0x0AUL)    /*!< -Periodic TxFIFO 10 flush in device mode when in shared FIFO operation
                                                          -TXFIFO 10 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF11 (0x0BUL)    /*!< -Periodic TxFIFO 11 flush in device mode when in shared FIFO operation
                                                          -TXFIFO 11 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF12 (0x0CUL)    /*!< -Periodic TxFIFO 12 flush in device mode when in shared FIFO operation
                                                          -TXFIFO 12 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF13 (0x0DUL)    /*!< -Periodic TxFIFO 13 flush in Device mode when in shared FIFO operation
                                                          -TXFIFO 13 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF14 (0x0EUL)    /*!< -Periodic TxFIFO 14 flush in Device mode when in shared FIFO operation
                                                          -TXFIFO 14 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF15 (0x0FUL)    /*!< -Periodic TxFIFO 15 flush in Device mode when in shared FIFO operation
                                                          - TXFIFO 15 flush in device mode when in dedicated FIFO mode*/
  #define USBHSCORE_GRSTCTL_TXFNUM_TXF16 (0x10UL)

/* CSFTRSTDONE @Bit 29 : Mode: Host and Device. Core Soft Reset Done (CSftRstDone) */
  #define USBHSCORE_GRSTCTL_CSFTRSTDONE_Pos (29UL)
  #define USBHSCORE_GRSTCTL_CSFTRSTDONE_Msk (0x1UL << USBHSCORE_GRSTCTL_CSFTRSTDONE_Pos)
  #define USBHSCORE_GRSTCTL_CSFTRSTDONE_Min (0x0UL)
  #define USBHSCORE_GRSTCTL_CSFTRSTDONE_Max (0x1UL)
  #define USBHSCORE_GRSTCTL_CSFTRSTDONE_INACTIVE (0x0UL)
  #define USBHSCORE_GRSTCTL_CSFTRSTDONE_ACTIVE (0x1UL)

/* DMAREQ @Bit 30 : Mode: Host and Device. DMA Request Signal (DMAReq) */
  #define USBHSCORE_GRSTCTL_DMAREQ_Pos (30UL)
  #define USBHSCORE_GRSTCTL_DMAREQ_Msk (0x1UL << USBHSCORE_GRSTCTL_DMAREQ_Pos)
  #define USBHSCORE_GRSTCTL_DMAREQ_Min (0x0UL)
  #define USBHSCORE_GRSTCTL_DMAREQ_Max (0x1UL)
  #define USBHSCORE_GRSTCTL_DMAREQ_INACTIVE (0x0UL)
  #define USBHSCORE_GRSTCTL_DMAREQ_ACTIVE (0x1UL)

/* AHBIDLE @Bit 31 : Mode: Host and Device. AHB Master Idle (AHBIdle) */
  #define USBHSCORE_GRSTCTL_AHBIDLE_Pos (31UL)
  #define USBHSCORE_GRSTCTL_AHBIDLE_Msk (0x1UL << USBHSCORE_GRSTCTL_AHBIDLE_Pos)
  #define USBHSCORE_GRSTCTL_AHBIDLE_Min (0x0UL)
  #define USBHSCORE_GRSTCTL_AHBIDLE_Max (0x1UL)
  #define USBHSCORE_GRSTCTL_AHBIDLE_INACTIVE (0x0UL)
  #define USBHSCORE_GRSTCTL_AHBIDLE_ACTIVE (0x1UL)


/* USBHSCORE_GINTSTS: Interrupt Register */
  #define USBHSCORE_GINTSTS_ResetValue (0x00000020UL)

/* CURMOD @Bit 0 : Mode: Host and Device. Current Mode of Operation (CurMod) */
  #define USBHSCORE_GINTSTS_CURMOD_Pos (0UL)
  #define USBHSCORE_GINTSTS_CURMOD_Msk (0x1UL << USBHSCORE_GINTSTS_CURMOD_Pos)
  #define USBHSCORE_GINTSTS_CURMOD_Min (0x0UL)
  #define USBHSCORE_GINTSTS_CURMOD_Max (0x1UL)
  #define USBHSCORE_GINTSTS_CURMOD_DEVICE (0x0UL)
  #define USBHSCORE_GINTSTS_CURMOD_HOST (0x1UL)

/* MODEMIS @Bit 1 : Mode: Host and Device. Mode Mismatch Interrupt (ModeMis) */
  #define USBHSCORE_GINTSTS_MODEMIS_Pos (1UL)
  #define USBHSCORE_GINTSTS_MODEMIS_Msk (0x1UL << USBHSCORE_GINTSTS_MODEMIS_Pos)
  #define USBHSCORE_GINTSTS_MODEMIS_Min (0x0UL)
  #define USBHSCORE_GINTSTS_MODEMIS_Max (0x1UL)
  #define USBHSCORE_GINTSTS_MODEMIS_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_MODEMIS_ACTIVE (0x1UL)

/* OTGINT @Bit 2 : Mode: Host and Device. OTG Interrupt (OTGInt) */
  #define USBHSCORE_GINTSTS_OTGINT_Pos (2UL)
  #define USBHSCORE_GINTSTS_OTGINT_Msk (0x1UL << USBHSCORE_GINTSTS_OTGINT_Pos)
  #define USBHSCORE_GINTSTS_OTGINT_Min (0x0UL)
  #define USBHSCORE_GINTSTS_OTGINT_Max (0x1UL)
  #define USBHSCORE_GINTSTS_OTGINT_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_OTGINT_ACTIVE (0x1UL)

/* SOF @Bit 3 : Mode: Host and Device. Start of (micro)Frame (Sof) */
  #define USBHSCORE_GINTSTS_SOF_Pos (3UL)
  #define USBHSCORE_GINTSTS_SOF_Msk (0x1UL << USBHSCORE_GINTSTS_SOF_Pos)
  #define USBHSCORE_GINTSTS_SOF_Min (0x0UL)
  #define USBHSCORE_GINTSTS_SOF_Max (0x1UL)
  #define USBHSCORE_GINTSTS_SOF_INTACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_SOF_ACTIVE (0x1UL)

/* RXFLVL @Bit 4 : Mode: Host and Device. RxFIFO Non-Empty (RxFLvl) */
  #define USBHSCORE_GINTSTS_RXFLVL_Pos (4UL)
  #define USBHSCORE_GINTSTS_RXFLVL_Msk (0x1UL << USBHSCORE_GINTSTS_RXFLVL_Pos)
  #define USBHSCORE_GINTSTS_RXFLVL_Min (0x0UL)
  #define USBHSCORE_GINTSTS_RXFLVL_Max (0x1UL)
  #define USBHSCORE_GINTSTS_RXFLVL_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_RXFLVL_ACTIVE (0x1UL)

/* NPTXFEMP @Bit 5 : Mode: Host and Device. Non-periodic TxFIFO Empty (NPTxFEmp) */
  #define USBHSCORE_GINTSTS_NPTXFEMP_Pos (5UL)
  #define USBHSCORE_GINTSTS_NPTXFEMP_Msk (0x1UL << USBHSCORE_GINTSTS_NPTXFEMP_Pos)
  #define USBHSCORE_GINTSTS_NPTXFEMP_Min (0x0UL)
  #define USBHSCORE_GINTSTS_NPTXFEMP_Max (0x1UL)
  #define USBHSCORE_GINTSTS_NPTXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_NPTXFEMP_ACTIVE (0x1UL)

/* GINNAKEFF @Bit 6 : Mode: Device only. Global IN Non-periodic NAK Effective (GINNakEff) */
  #define USBHSCORE_GINTSTS_GINNAKEFF_Pos (6UL)
  #define USBHSCORE_GINTSTS_GINNAKEFF_Msk (0x1UL << USBHSCORE_GINTSTS_GINNAKEFF_Pos)
  #define USBHSCORE_GINTSTS_GINNAKEFF_Min (0x0UL)
  #define USBHSCORE_GINTSTS_GINNAKEFF_Max (0x1UL)
  #define USBHSCORE_GINTSTS_GINNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_GINNAKEFF_ACTIVE (0x1UL)

/* GOUTNAKEFF @Bit 7 : Mode: Device only. Global OUT NAK Effective (GOUTNakEff) */
  #define USBHSCORE_GINTSTS_GOUTNAKEFF_Pos (7UL)
  #define USBHSCORE_GINTSTS_GOUTNAKEFF_Msk (0x1UL << USBHSCORE_GINTSTS_GOUTNAKEFF_Pos)
  #define USBHSCORE_GINTSTS_GOUTNAKEFF_Min (0x0UL)
  #define USBHSCORE_GINTSTS_GOUTNAKEFF_Max (0x1UL)
  #define USBHSCORE_GINTSTS_GOUTNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_GOUTNAKEFF_ACTIVE (0x1UL)

/* ERLYSUSP @Bit 10 : Mode: Device only. Early Suspend (ErlySusp) */
  #define USBHSCORE_GINTSTS_ERLYSUSP_Pos (10UL)
  #define USBHSCORE_GINTSTS_ERLYSUSP_Msk (0x1UL << USBHSCORE_GINTSTS_ERLYSUSP_Pos)
  #define USBHSCORE_GINTSTS_ERLYSUSP_Min (0x0UL)
  #define USBHSCORE_GINTSTS_ERLYSUSP_Max (0x1UL)
  #define USBHSCORE_GINTSTS_ERLYSUSP_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_ERLYSUSP_ACTIVE (0x1UL)

/* USBSUSP @Bit 11 : Mode: Device only. USB Suspend (USBSusp) */
  #define USBHSCORE_GINTSTS_USBSUSP_Pos (11UL)
  #define USBHSCORE_GINTSTS_USBSUSP_Msk (0x1UL << USBHSCORE_GINTSTS_USBSUSP_Pos)
  #define USBHSCORE_GINTSTS_USBSUSP_Min (0x0UL)
  #define USBHSCORE_GINTSTS_USBSUSP_Max (0x1UL)
  #define USBHSCORE_GINTSTS_USBSUSP_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_USBSUSP_ACTIVE (0x1UL)

/* USBRST @Bit 12 : Mode: Device only. USB Reset (USBRst) */
  #define USBHSCORE_GINTSTS_USBRST_Pos (12UL)
  #define USBHSCORE_GINTSTS_USBRST_Msk (0x1UL << USBHSCORE_GINTSTS_USBRST_Pos)
  #define USBHSCORE_GINTSTS_USBRST_Min (0x0UL)
  #define USBHSCORE_GINTSTS_USBRST_Max (0x1UL)
  #define USBHSCORE_GINTSTS_USBRST_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_USBRST_ACTIVE (0x1UL)

/* ENUMDONE @Bit 13 : Mode: Device only. Enumeration Done (EnumDone) */
  #define USBHSCORE_GINTSTS_ENUMDONE_Pos (13UL)
  #define USBHSCORE_GINTSTS_ENUMDONE_Msk (0x1UL << USBHSCORE_GINTSTS_ENUMDONE_Pos)
  #define USBHSCORE_GINTSTS_ENUMDONE_Min (0x0UL)
  #define USBHSCORE_GINTSTS_ENUMDONE_Max (0x1UL)
  #define USBHSCORE_GINTSTS_ENUMDONE_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_ENUMDONE_ACTIVE (0x1UL)

/* ISOOUTDROP @Bit 14 : Mode: Device only. Isochronous OUT Packet Dropped Interrupt (ISOOutDrop) */
  #define USBHSCORE_GINTSTS_ISOOUTDROP_Pos (14UL)
  #define USBHSCORE_GINTSTS_ISOOUTDROP_Msk (0x1UL << USBHSCORE_GINTSTS_ISOOUTDROP_Pos)
  #define USBHSCORE_GINTSTS_ISOOUTDROP_Min (0x0UL)
  #define USBHSCORE_GINTSTS_ISOOUTDROP_Max (0x1UL)
  #define USBHSCORE_GINTSTS_ISOOUTDROP_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_ISOOUTDROP_ACTIVE (0x1UL)

/* EOPF @Bit 15 : Mode: Device only. End of Periodic Frame Interrupt (EOPF) */
  #define USBHSCORE_GINTSTS_EOPF_Pos (15UL)
  #define USBHSCORE_GINTSTS_EOPF_Msk (0x1UL << USBHSCORE_GINTSTS_EOPF_Pos)
  #define USBHSCORE_GINTSTS_EOPF_Min (0x0UL)
  #define USBHSCORE_GINTSTS_EOPF_Max (0x1UL)
  #define USBHSCORE_GINTSTS_EOPF_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_EOPF_ACTIVE (0x1UL)

/* RSTRDONEINT @Bit 16 : Mode: Device only. Restore Done Interrupt (RstrDoneInt) */
  #define USBHSCORE_GINTSTS_RSTRDONEINT_Pos (16UL)
  #define USBHSCORE_GINTSTS_RSTRDONEINT_Msk (0x1UL << USBHSCORE_GINTSTS_RSTRDONEINT_Pos)
  #define USBHSCORE_GINTSTS_RSTRDONEINT_Min (0x0UL)
  #define USBHSCORE_GINTSTS_RSTRDONEINT_Max (0x1UL)
  #define USBHSCORE_GINTSTS_RSTRDONEINT_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_RSTRDONEINT_ACTIVE (0x1UL)

/* EPMIS @Bit 17 : Mode: Device only. Endpoint Mismatch Interrupt (EPMis) */
  #define USBHSCORE_GINTSTS_EPMIS_Pos (17UL)
  #define USBHSCORE_GINTSTS_EPMIS_Msk (0x1UL << USBHSCORE_GINTSTS_EPMIS_Pos)
  #define USBHSCORE_GINTSTS_EPMIS_Min (0x0UL)
  #define USBHSCORE_GINTSTS_EPMIS_Max (0x1UL)
  #define USBHSCORE_GINTSTS_EPMIS_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_EPMIS_ACTIVE (0x1UL)

/* IEPINT @Bit 18 : Mode: Device only. IN Endpoints Interrupt (IEPInt) */
  #define USBHSCORE_GINTSTS_IEPINT_Pos (18UL)
  #define USBHSCORE_GINTSTS_IEPINT_Msk (0x1UL << USBHSCORE_GINTSTS_IEPINT_Pos)
  #define USBHSCORE_GINTSTS_IEPINT_Min (0x0UL)
  #define USBHSCORE_GINTSTS_IEPINT_Max (0x1UL)
  #define USBHSCORE_GINTSTS_IEPINT_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_IEPINT_ACTIVE (0x1UL)

/* OEPINT @Bit 19 : Mode: Device only. OUT Endpoints Interrupt (OEPInt) */
  #define USBHSCORE_GINTSTS_OEPINT_Pos (19UL)
  #define USBHSCORE_GINTSTS_OEPINT_Msk (0x1UL << USBHSCORE_GINTSTS_OEPINT_Pos)
  #define USBHSCORE_GINTSTS_OEPINT_Min (0x0UL)
  #define USBHSCORE_GINTSTS_OEPINT_Max (0x1UL)
  #define USBHSCORE_GINTSTS_OEPINT_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_OEPINT_ACTIVE (0x1UL)

/* INCOMPISOIN @Bit 20 : Mode: Device only. Incomplete Isochronous IN Transfer (incompISOIN) */
  #define USBHSCORE_GINTSTS_INCOMPISOIN_Pos (20UL)
  #define USBHSCORE_GINTSTS_INCOMPISOIN_Msk (0x1UL << USBHSCORE_GINTSTS_INCOMPISOIN_Pos)
  #define USBHSCORE_GINTSTS_INCOMPISOIN_Min (0x0UL)
  #define USBHSCORE_GINTSTS_INCOMPISOIN_Max (0x1UL)
  #define USBHSCORE_GINTSTS_INCOMPISOIN_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_INCOMPISOIN_ACTIVE (0x1UL)

/* INCOMPLP @Bit 21 : Incomplete Periodic Transfer (incomplP) */
  #define USBHSCORE_GINTSTS_INCOMPLP_Pos (21UL)
  #define USBHSCORE_GINTSTS_INCOMPLP_Msk (0x1UL << USBHSCORE_GINTSTS_INCOMPLP_Pos)
  #define USBHSCORE_GINTSTS_INCOMPLP_Min (0x0UL)
  #define USBHSCORE_GINTSTS_INCOMPLP_Max (0x1UL)
  #define USBHSCORE_GINTSTS_INCOMPLP_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_INCOMPLP_ACTIVE (0x1UL)

/* FETSUSP @Bit 22 : Mode: Device only. Data Fetch Suspended (FetSusp) */
  #define USBHSCORE_GINTSTS_FETSUSP_Pos (22UL)
  #define USBHSCORE_GINTSTS_FETSUSP_Msk (0x1UL << USBHSCORE_GINTSTS_FETSUSP_Pos)
  #define USBHSCORE_GINTSTS_FETSUSP_Min (0x0UL)
  #define USBHSCORE_GINTSTS_FETSUSP_Max (0x1UL)
  #define USBHSCORE_GINTSTS_FETSUSP_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_FETSUSP_ACTIVE (0x1UL)

/* RESETDET @Bit 23 : Mode: Device only. Reset detected Interrupt (ResetDet) */
  #define USBHSCORE_GINTSTS_RESETDET_Pos (23UL)
  #define USBHSCORE_GINTSTS_RESETDET_Msk (0x1UL << USBHSCORE_GINTSTS_RESETDET_Pos)
  #define USBHSCORE_GINTSTS_RESETDET_Min (0x0UL)
  #define USBHSCORE_GINTSTS_RESETDET_Max (0x1UL)
  #define USBHSCORE_GINTSTS_RESETDET_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_RESETDET_ACTIVE (0x1UL)

/* PRTINT @Bit 24 : Mode: Host only. Host Port Interrupt (PrtInt) */
  #define USBHSCORE_GINTSTS_PRTINT_Pos (24UL)
  #define USBHSCORE_GINTSTS_PRTINT_Msk (0x1UL << USBHSCORE_GINTSTS_PRTINT_Pos)
  #define USBHSCORE_GINTSTS_PRTINT_Min (0x0UL)
  #define USBHSCORE_GINTSTS_PRTINT_Max (0x1UL)
  #define USBHSCORE_GINTSTS_PRTINT_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_PRTINT_ACTIVE (0x1UL)

/* HCHINT @Bit 25 : Mode: Host only. Host Channels Interrupt (HChInt) */
  #define USBHSCORE_GINTSTS_HCHINT_Pos (25UL)
  #define USBHSCORE_GINTSTS_HCHINT_Msk (0x1UL << USBHSCORE_GINTSTS_HCHINT_Pos)
  #define USBHSCORE_GINTSTS_HCHINT_Min (0x0UL)
  #define USBHSCORE_GINTSTS_HCHINT_Max (0x1UL)
  #define USBHSCORE_GINTSTS_HCHINT_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_HCHINT_ACTIVE (0x1UL)

/* LPMINT @Bit 27 : Mode: Host and Device. LPM Transaction Received Interrupt (LPM_Int). */
  #define USBHSCORE_GINTSTS_LPMINT_Pos (27UL)
  #define USBHSCORE_GINTSTS_LPMINT_Msk (0x1UL << USBHSCORE_GINTSTS_LPMINT_Pos)
  #define USBHSCORE_GINTSTS_LPMINT_Min (0x0UL)
  #define USBHSCORE_GINTSTS_LPMINT_Max (0x1UL)
  #define USBHSCORE_GINTSTS_LPMINT_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_LPMINT_ACTIVE (0x1UL)

/* CONIDSTSCHNG @Bit 28 : Mode: Host and Device. Connector ID Status Change (ConIDStsChng) */
  #define USBHSCORE_GINTSTS_CONIDSTSCHNG_Pos (28UL)
  #define USBHSCORE_GINTSTS_CONIDSTSCHNG_Msk (0x1UL << USBHSCORE_GINTSTS_CONIDSTSCHNG_Pos)
  #define USBHSCORE_GINTSTS_CONIDSTSCHNG_Min (0x0UL)
  #define USBHSCORE_GINTSTS_CONIDSTSCHNG_Max (0x1UL)
  #define USBHSCORE_GINTSTS_CONIDSTSCHNG_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_CONIDSTSCHNG_ACTIVE (0x1UL)

/* DISCONNINT @Bit 29 : Mode: Host only. Disconnect Detected Interrupt (DisconnInt) */
  #define USBHSCORE_GINTSTS_DISCONNINT_Pos (29UL)
  #define USBHSCORE_GINTSTS_DISCONNINT_Msk (0x1UL << USBHSCORE_GINTSTS_DISCONNINT_Pos)
  #define USBHSCORE_GINTSTS_DISCONNINT_Min (0x0UL)
  #define USBHSCORE_GINTSTS_DISCONNINT_Max (0x1UL)
  #define USBHSCORE_GINTSTS_DISCONNINT_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_DISCONNINT_ACTIVE (0x1UL)

/* SESSREQINT @Bit 30 : Mode: Host and Device. Session Request/New Session Detected Interrupt (SessReqInt) */
  #define USBHSCORE_GINTSTS_SESSREQINT_Pos (30UL)
  #define USBHSCORE_GINTSTS_SESSREQINT_Msk (0x1UL << USBHSCORE_GINTSTS_SESSREQINT_Pos)
  #define USBHSCORE_GINTSTS_SESSREQINT_Min (0x0UL)
  #define USBHSCORE_GINTSTS_SESSREQINT_Max (0x1UL)
  #define USBHSCORE_GINTSTS_SESSREQINT_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_SESSREQINT_ACTIVE (0x1UL)

/* WKUPINT @Bit 31 : Mode: Host and Device. Resume/Remote Wakeup Detected Interrupt (WkUpInt) */
  #define USBHSCORE_GINTSTS_WKUPINT_Pos (31UL)
  #define USBHSCORE_GINTSTS_WKUPINT_Msk (0x1UL << USBHSCORE_GINTSTS_WKUPINT_Pos)
  #define USBHSCORE_GINTSTS_WKUPINT_Min (0x0UL)
  #define USBHSCORE_GINTSTS_WKUPINT_Max (0x1UL)
  #define USBHSCORE_GINTSTS_WKUPINT_INACTIVE (0x0UL)
  #define USBHSCORE_GINTSTS_WKUPINT_ACTIVE (0x1UL)


/* USBHSCORE_GINTMSK: Interrupt Mask Register */
  #define USBHSCORE_GINTMSK_ResetValue (0x00000000UL)

/* MODEMISMSK @Bit 1 : Mode: Host and Device. Mode Mismatch Interrupt Mask (ModeMisMsk) */
  #define USBHSCORE_GINTMSK_MODEMISMSK_Pos (1UL)
  #define USBHSCORE_GINTMSK_MODEMISMSK_Msk (0x1UL << USBHSCORE_GINTMSK_MODEMISMSK_Pos)
  #define USBHSCORE_GINTMSK_MODEMISMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_MODEMISMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_MODEMISMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_MODEMISMSK_NOMASK (0x1UL)

/* OTGINTMSK @Bit 2 : Mode: Host and Device. OTG Interrupt Mask (OTGIntMsk) */
  #define USBHSCORE_GINTMSK_OTGINTMSK_Pos (2UL)
  #define USBHSCORE_GINTMSK_OTGINTMSK_Msk (0x1UL << USBHSCORE_GINTMSK_OTGINTMSK_Pos)
  #define USBHSCORE_GINTMSK_OTGINTMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_OTGINTMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_OTGINTMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_OTGINTMSK_NOMASK (0x1UL)

/* SOFMSK @Bit 3 : Mode: Host and Device. Start of (micro)Frame Mask (SofMsk) */
  #define USBHSCORE_GINTMSK_SOFMSK_Pos (3UL)
  #define USBHSCORE_GINTMSK_SOFMSK_Msk (0x1UL << USBHSCORE_GINTMSK_SOFMSK_Pos)
  #define USBHSCORE_GINTMSK_SOFMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_SOFMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_SOFMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_SOFMSK_NOMASK (0x1UL)

/* RXFLVLMSK @Bit 4 : Mode: Host and Device. Receive FIFO Non-Empty Mask (RxFLvlMsk) */
  #define USBHSCORE_GINTMSK_RXFLVLMSK_Pos (4UL)
  #define USBHSCORE_GINTMSK_RXFLVLMSK_Msk (0x1UL << USBHSCORE_GINTMSK_RXFLVLMSK_Pos)
  #define USBHSCORE_GINTMSK_RXFLVLMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_RXFLVLMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_RXFLVLMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_RXFLVLMSK_NOMASK (0x1UL)

/* NPTXFEMPMSK @Bit 5 : Mode: Host and Device. Non-periodic TxFIFO Empty Mask (NPTxFEmpMsk) */
  #define USBHSCORE_GINTMSK_NPTXFEMPMSK_Pos (5UL)
  #define USBHSCORE_GINTMSK_NPTXFEMPMSK_Msk (0x1UL << USBHSCORE_GINTMSK_NPTXFEMPMSK_Pos)
  #define USBHSCORE_GINTMSK_NPTXFEMPMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_NPTXFEMPMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_NPTXFEMPMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_NPTXFEMPMSK_NOMASK (0x1UL)

/* GINNAKEFFMSK @Bit 6 : Mode: Device only,. Global Non-periodic IN NAK Effective Mask (GINNakEffMsk) */
  #define USBHSCORE_GINTMSK_GINNAKEFFMSK_Pos (6UL)
  #define USBHSCORE_GINTMSK_GINNAKEFFMSK_Msk (0x1UL << USBHSCORE_GINTMSK_GINNAKEFFMSK_Pos)
  #define USBHSCORE_GINTMSK_GINNAKEFFMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_GINNAKEFFMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_GINNAKEFFMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_GINNAKEFFMSK_NOMASK (0x1UL)

/* GOUTNAKEFFMSK @Bit 7 : Mode: Device only. Global OUT NAK Effective Mask (GOUTNakEffMsk) */
  #define USBHSCORE_GINTMSK_GOUTNAKEFFMSK_Pos (7UL)
  #define USBHSCORE_GINTMSK_GOUTNAKEFFMSK_Msk (0x1UL << USBHSCORE_GINTMSK_GOUTNAKEFFMSK_Pos) /*!< Bit mask of GOUTNAKEFFMSK
                                                                            field.*/
  #define USBHSCORE_GINTMSK_GOUTNAKEFFMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_GOUTNAKEFFMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_GOUTNAKEFFMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_GOUTNAKEFFMSK_NOMASK (0x1UL)

/* ERLYSUSPMSK @Bit 10 : Mode: Device only. Early Suspend Mask (ErlySuspMsk) */
  #define USBHSCORE_GINTMSK_ERLYSUSPMSK_Pos (10UL)
  #define USBHSCORE_GINTMSK_ERLYSUSPMSK_Msk (0x1UL << USBHSCORE_GINTMSK_ERLYSUSPMSK_Pos)
  #define USBHSCORE_GINTMSK_ERLYSUSPMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_ERLYSUSPMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_ERLYSUSPMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_ERLYSUSPMSK_NOMASK (0x1UL)

/* USBSUSPMSK @Bit 11 : Mode: Device only. USB Suspend Mask (USBSuspMsk) */
  #define USBHSCORE_GINTMSK_USBSUSPMSK_Pos (11UL)
  #define USBHSCORE_GINTMSK_USBSUSPMSK_Msk (0x1UL << USBHSCORE_GINTMSK_USBSUSPMSK_Pos)
  #define USBHSCORE_GINTMSK_USBSUSPMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_USBSUSPMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_USBSUSPMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_USBSUSPMSK_NOMASK (0x1UL)

/* USBRSTMSK @Bit 12 : Mode: Device only. USB Reset Mask (USBRstMsk) */
  #define USBHSCORE_GINTMSK_USBRSTMSK_Pos (12UL)
  #define USBHSCORE_GINTMSK_USBRSTMSK_Msk (0x1UL << USBHSCORE_GINTMSK_USBRSTMSK_Pos)
  #define USBHSCORE_GINTMSK_USBRSTMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_USBRSTMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_USBRSTMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_USBRSTMSK_NOMASK (0x1UL)

/* ENUMDONEMSK @Bit 13 : Mode: Device only. Enumeration Done Mask (EnumDoneMsk) */
  #define USBHSCORE_GINTMSK_ENUMDONEMSK_Pos (13UL)
  #define USBHSCORE_GINTMSK_ENUMDONEMSK_Msk (0x1UL << USBHSCORE_GINTMSK_ENUMDONEMSK_Pos)
  #define USBHSCORE_GINTMSK_ENUMDONEMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_ENUMDONEMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_ENUMDONEMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_ENUMDONEMSK_NOMASK (0x1UL)

/* ISOOUTDROPMSK @Bit 14 : Mode: Device only. Isochronous OUT Packet Dropped Interrupt Mask (ISOOutDropMsk) */
  #define USBHSCORE_GINTMSK_ISOOUTDROPMSK_Pos (14UL)
  #define USBHSCORE_GINTMSK_ISOOUTDROPMSK_Msk (0x1UL << USBHSCORE_GINTMSK_ISOOUTDROPMSK_Pos) /*!< Bit mask of ISOOUTDROPMSK
                                                                            field.*/
  #define USBHSCORE_GINTMSK_ISOOUTDROPMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_ISOOUTDROPMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_ISOOUTDROPMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_ISOOUTDROPMSK_NOMASK (0x1UL)

/* EOPFMSK @Bit 15 : Mode: Device only. End of Periodic Frame Interrupt Mask (EOPFMsk) */
  #define USBHSCORE_GINTMSK_EOPFMSK_Pos (15UL)
  #define USBHSCORE_GINTMSK_EOPFMSK_Msk (0x1UL << USBHSCORE_GINTMSK_EOPFMSK_Pos)
  #define USBHSCORE_GINTMSK_EOPFMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_EOPFMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_EOPFMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_EOPFMSK_NOMASK (0x1UL)

/* RSTRDONEINTMSK @Bit 16 : Mode: Host and Device. Restore Done Interrupt Mask (RstrDoneIntMsk) */
  #define USBHSCORE_GINTMSK_RSTRDONEINTMSK_Pos (16UL)
  #define USBHSCORE_GINTMSK_RSTRDONEINTMSK_Msk (0x1UL << USBHSCORE_GINTMSK_RSTRDONEINTMSK_Pos) /*!< Bit mask of RSTRDONEINTMSK
                                                                            field.*/
  #define USBHSCORE_GINTMSK_RSTRDONEINTMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_RSTRDONEINTMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_RSTRDONEINTMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_RSTRDONEINTMSK_NOMASK (0x1UL)

/* EPMISMSK @Bit 17 : Mode: Device only. Endpoint Mismatch Interrupt Mask (EPMisMsk) */
  #define USBHSCORE_GINTMSK_EPMISMSK_Pos (17UL)
  #define USBHSCORE_GINTMSK_EPMISMSK_Msk (0x1UL << USBHSCORE_GINTMSK_EPMISMSK_Pos)
  #define USBHSCORE_GINTMSK_EPMISMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_EPMISMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_EPMISMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_EPMISMSK_NOMASK (0x1UL)

/* IEPINTMSK @Bit 18 : Mode: Device only. IN Endpoints Interrupt Mask (IEPIntMsk) */
  #define USBHSCORE_GINTMSK_IEPINTMSK_Pos (18UL)
  #define USBHSCORE_GINTMSK_IEPINTMSK_Msk (0x1UL << USBHSCORE_GINTMSK_IEPINTMSK_Pos)
  #define USBHSCORE_GINTMSK_IEPINTMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_IEPINTMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_IEPINTMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_IEPINTMSK_NOMASK (0x1UL)

/* OEPINTMSK @Bit 19 : Mode: Device only. OUT Endpoints Interrupt Mask (OEPIntMsk) */
  #define USBHSCORE_GINTMSK_OEPINTMSK_Pos (19UL)
  #define USBHSCORE_GINTMSK_OEPINTMSK_Msk (0x1UL << USBHSCORE_GINTMSK_OEPINTMSK_Pos)
  #define USBHSCORE_GINTMSK_OEPINTMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_OEPINTMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_OEPINTMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_OEPINTMSK_NOMASK (0x1UL)

/* INCOMPLPMSK @Bit 21 : Incomplete Periodic Transfer Mask (incomplPMsk) */
  #define USBHSCORE_GINTMSK_INCOMPLPMSK_Pos (21UL)
  #define USBHSCORE_GINTMSK_INCOMPLPMSK_Msk (0x1UL << USBHSCORE_GINTMSK_INCOMPLPMSK_Pos)
  #define USBHSCORE_GINTMSK_INCOMPLPMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_INCOMPLPMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_INCOMPLPMSK_MASK (0x0UL) /*!< Host mode: Incomplete Periodic Transfer MaskDevice mode: Incomplete
                                                          Isochronous OUT Transfer Mask*/
  #define USBHSCORE_GINTMSK_INCOMPLPMSK_NOMASK (0x1UL) /*!< Host mode: No Incomplete Periodic Transfer MaskDevice mode: No
                                                            Incomplete Isochronous OUT Transfer Mask*/

/* FETSUSPMSK @Bit 22 : Mode: Device only. Data Fetch Suspended Mask (FetSuspMsk) */
  #define USBHSCORE_GINTMSK_FETSUSPMSK_Pos (22UL)
  #define USBHSCORE_GINTMSK_FETSUSPMSK_Msk (0x1UL << USBHSCORE_GINTMSK_FETSUSPMSK_Pos)
  #define USBHSCORE_GINTMSK_FETSUSPMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_FETSUSPMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_FETSUSPMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_FETSUSPMSK_NOMASK (0x1UL)

/* RESETDETMSK @Bit 23 : Mode: Device only. Reset detected Interrupt Mask (ResetDetMsk) */
  #define USBHSCORE_GINTMSK_RESETDETMSK_Pos (23UL)
  #define USBHSCORE_GINTMSK_RESETDETMSK_Msk (0x1UL << USBHSCORE_GINTMSK_RESETDETMSK_Pos)
  #define USBHSCORE_GINTMSK_RESETDETMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_RESETDETMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_RESETDETMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_RESETDETMSK_NOMASK (0x1UL)

/* PRTINTMSK @Bit 24 : Mode: Host only. Host Port Interrupt Mask (PrtIntMsk) */
  #define USBHSCORE_GINTMSK_PRTINTMSK_Pos (24UL)
  #define USBHSCORE_GINTMSK_PRTINTMSK_Msk (0x1UL << USBHSCORE_GINTMSK_PRTINTMSK_Pos)
  #define USBHSCORE_GINTMSK_PRTINTMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_PRTINTMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_PRTINTMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_PRTINTMSK_NOMASK (0x1UL)

/* HCHINTMSK @Bit 25 : Mode: Host only. Host Channels Interrupt Mask (HChIntMsk) */
  #define USBHSCORE_GINTMSK_HCHINTMSK_Pos (25UL)
  #define USBHSCORE_GINTMSK_HCHINTMSK_Msk (0x1UL << USBHSCORE_GINTMSK_HCHINTMSK_Pos)
  #define USBHSCORE_GINTMSK_HCHINTMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_HCHINTMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_HCHINTMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_HCHINTMSK_NOMASK (0x1UL)

/* LPMINTMSK @Bit 27 : Mode: Host and Device. LPM Transaction Received Interrupt (LPM_Int) */
  #define USBHSCORE_GINTMSK_LPMINTMSK_Pos (27UL)
  #define USBHSCORE_GINTMSK_LPMINTMSK_Msk (0x1UL << USBHSCORE_GINTMSK_LPMINTMSK_Pos)
  #define USBHSCORE_GINTMSK_LPMINTMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_LPMINTMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_LPMINTMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_LPMINTMSK_NOMASK (0x1UL)

/* CONIDSTSCHNGMSK @Bit 28 : Mode: Host and Device. Connector ID Status Change Mask (ConIDStsChngMsk) */
  #define USBHSCORE_GINTMSK_CONIDSTSCHNGMSK_Pos (28UL)
  #define USBHSCORE_GINTMSK_CONIDSTSCHNGMSK_Msk (0x1UL << USBHSCORE_GINTMSK_CONIDSTSCHNGMSK_Pos) /*!< Bit mask of
                                                                            CONIDSTSCHNGMSK field.*/
  #define USBHSCORE_GINTMSK_CONIDSTSCHNGMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_CONIDSTSCHNGMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_CONIDSTSCHNGMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_CONIDSTSCHNGMSK_NOMASK (0x1UL)

/* DISCONNINTMSK @Bit 29 : Mode: Host and Device. Disconnect Detected Interrupt Mask (DisconnIntMsk) */
  #define USBHSCORE_GINTMSK_DISCONNINTMSK_Pos (29UL)
  #define USBHSCORE_GINTMSK_DISCONNINTMSK_Msk (0x1UL << USBHSCORE_GINTMSK_DISCONNINTMSK_Pos) /*!< Bit mask of DISCONNINTMSK
                                                                            field.*/
  #define USBHSCORE_GINTMSK_DISCONNINTMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_DISCONNINTMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_DISCONNINTMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_DISCONNINTMSK_NOMASK (0x1UL)

/* SESSREQINTMSK @Bit 30 : Mode: Host and Device. Session Request/New Session Detected Interrupt Mask (SessReqIntMsk) */
  #define USBHSCORE_GINTMSK_SESSREQINTMSK_Pos (30UL)
  #define USBHSCORE_GINTMSK_SESSREQINTMSK_Msk (0x1UL << USBHSCORE_GINTMSK_SESSREQINTMSK_Pos) /*!< Bit mask of SESSREQINTMSK
                                                                            field.*/
  #define USBHSCORE_GINTMSK_SESSREQINTMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_SESSREQINTMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_SESSREQINTMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_SESSREQINTMSK_NOMASK (0x1UL)

/* WKUPINTMSK @Bit 31 : Mode: Host and Device. Resume/Remote Wakeup Detected Interrupt Mask (WkUpIntMsk) */
  #define USBHSCORE_GINTMSK_WKUPINTMSK_Pos (31UL)
  #define USBHSCORE_GINTMSK_WKUPINTMSK_Msk (0x1UL << USBHSCORE_GINTMSK_WKUPINTMSK_Pos)
  #define USBHSCORE_GINTMSK_WKUPINTMSK_Min (0x0UL)
  #define USBHSCORE_GINTMSK_WKUPINTMSK_Max (0x1UL)
  #define USBHSCORE_GINTMSK_WKUPINTMSK_MASK (0x0UL)
  #define USBHSCORE_GINTMSK_WKUPINTMSK_NOMASK (0x1UL)


/* USBHSCORE_GRXSTSR: Receive Status Debug Read Register */
  #define USBHSCORE_GRXSTSR_ResetValue (0x00000000UL)

/* CHNUM @Bits 0..3 : Channel Number (ChNum) */
  #define USBHSCORE_GRXSTSR_CHNUM_Pos (0UL)
  #define USBHSCORE_GRXSTSR_CHNUM_Msk (0xFUL << USBHSCORE_GRXSTSR_CHNUM_Pos)
  #define USBHSCORE_GRXSTSR_CHNUM_Min (0x0UL)
  #define USBHSCORE_GRXSTSR_CHNUM_Max (0xFUL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP0 (0x0UL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP1 (0x1UL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP2 (0x2UL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP3 (0x3UL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP4 (0x4UL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP5 (0x5UL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP6 (0x6UL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP7 (0x7UL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP8 (0x8UL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP9 (0x9UL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP10 (0xAUL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP11 (0xBUL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP12 (0xCUL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP13 (0xDUL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP14 (0xEUL)
  #define USBHSCORE_GRXSTSR_CHNUM_CHEP15 (0xFUL)

/* BCNT @Bits 4..14 : Byte Count (BCnt) */
  #define USBHSCORE_GRXSTSR_BCNT_Pos (4UL)
  #define USBHSCORE_GRXSTSR_BCNT_Msk (0x7FFUL << USBHSCORE_GRXSTSR_BCNT_Pos)

/* DPID @Bits 15..16 : Data PID (DPID) */
  #define USBHSCORE_GRXSTSR_DPID_Pos (15UL)
  #define USBHSCORE_GRXSTSR_DPID_Msk (0x3UL << USBHSCORE_GRXSTSR_DPID_Pos)
  #define USBHSCORE_GRXSTSR_DPID_Min (0x0UL)
  #define USBHSCORE_GRXSTSR_DPID_Max (0x3UL)
  #define USBHSCORE_GRXSTSR_DPID_DATA0 (0x0UL)
  #define USBHSCORE_GRXSTSR_DPID_DATA2 (0x1UL)
  #define USBHSCORE_GRXSTSR_DPID_DATA1 (0x2UL)
  #define USBHSCORE_GRXSTSR_DPID_MDATA (0x3UL)

/* PKTSTS @Bits 17..20 : Packet Status (PktSts) indicates the status of the received packet. */
  #define USBHSCORE_GRXSTSR_PKTSTS_Pos (17UL)
  #define USBHSCORE_GRXSTSR_PKTSTS_Msk (0xFUL << USBHSCORE_GRXSTSR_PKTSTS_Pos)
  #define USBHSCORE_GRXSTSR_PKTSTS_Min (0x1UL)
  #define USBHSCORE_GRXSTSR_PKTSTS_Max (0x7UL)
  #define USBHSCORE_GRXSTSR_PKTSTS_OUTNAK (0x1UL)
  #define USBHSCORE_GRXSTSR_PKTSTS_INOUTDPRX (0x2UL) /*!< IN data packet received in host mode and OUT data packet received in
                                                          device mode*/
  #define USBHSCORE_GRXSTSR_PKTSTS_INOUTTRCOM (0x3UL) /*!< IN or OUT transfer completed in both host and device mode (triggers
                                                           an interrupt)*/
  #define USBHSCORE_GRXSTSR_PKTSTS_DSETUPCOM (0x4UL)
  #define USBHSCORE_GRXSTSR_PKTSTS_DTTOG (0x5UL)
  #define USBHSCORE_GRXSTSR_PKTSTS_DSETUPRX (0x6UL)
  #define USBHSCORE_GRXSTSR_PKTSTS_CHHALT (0x7UL)

/* FN @Bits 21..24 : Mode: Device only. Frame Number (FN) */
  #define USBHSCORE_GRXSTSR_FN_Pos (21UL)
  #define USBHSCORE_GRXSTSR_FN_Msk (0xFUL << USBHSCORE_GRXSTSR_FN_Pos)


/* USBHSCORE_GRXSTSP: Receive Status Read/Pop Register */
  #define USBHSCORE_GRXSTSP_ResetValue (0x00000000UL)

/* CHNUM @Bits 0..3 : Channel Number (ChNum) */
  #define USBHSCORE_GRXSTSP_CHNUM_Pos (0UL)
  #define USBHSCORE_GRXSTSP_CHNUM_Msk (0xFUL << USBHSCORE_GRXSTSP_CHNUM_Pos)
  #define USBHSCORE_GRXSTSP_CHNUM_Min (0x0UL)
  #define USBHSCORE_GRXSTSP_CHNUM_Max (0xFUL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP0 (0x0UL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP1 (0x1UL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP2 (0x2UL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP3 (0x3UL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP4 (0x4UL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP5 (0x5UL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP6 (0x6UL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP7 (0x7UL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP8 (0x8UL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP9 (0x9UL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP10 (0xAUL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP11 (0xBUL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP12 (0xCUL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP13 (0xDUL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP14 (0xEUL)
  #define USBHSCORE_GRXSTSP_CHNUM_CHEP15 (0xFUL)

/* BCNT @Bits 4..14 : Byte Count (BCnt) */
  #define USBHSCORE_GRXSTSP_BCNT_Pos (4UL)
  #define USBHSCORE_GRXSTSP_BCNT_Msk (0x7FFUL << USBHSCORE_GRXSTSP_BCNT_Pos)

/* DPID @Bits 15..16 : Data PID (DPID) */
  #define USBHSCORE_GRXSTSP_DPID_Pos (15UL)
  #define USBHSCORE_GRXSTSP_DPID_Msk (0x3UL << USBHSCORE_GRXSTSP_DPID_Pos)
  #define USBHSCORE_GRXSTSP_DPID_Min (0x0UL)
  #define USBHSCORE_GRXSTSP_DPID_Max (0x3UL)
  #define USBHSCORE_GRXSTSP_DPID_DATA0 (0x0UL)
  #define USBHSCORE_GRXSTSP_DPID_DATA2 (0x1UL)
  #define USBHSCORE_GRXSTSP_DPID_DATA1 (0x2UL)
  #define USBHSCORE_GRXSTSP_DPID_MDATA (0x3UL)

/* PKTSTS @Bits 17..20 : Packet Status (PktSts) indicates the status of the received packet. */
  #define USBHSCORE_GRXSTSP_PKTSTS_Pos (17UL)
  #define USBHSCORE_GRXSTSP_PKTSTS_Msk (0xFUL << USBHSCORE_GRXSTSP_PKTSTS_Pos)
  #define USBHSCORE_GRXSTSP_PKTSTS_Min (0x1UL)
  #define USBHSCORE_GRXSTSP_PKTSTS_Max (0x5UL)
  #define USBHSCORE_GRXSTSP_PKTSTS_OUTNAK (0x1UL)
  #define USBHSCORE_GRXSTSP_PKTSTS_INOUTDPRX (0x2UL) /*!< IN data packet received in host mode and OUT data packet received in
                                                          device mode*/
  #define USBHSCORE_GRXSTSP_PKTSTS_INOUTTRCOM (0x3UL) /*!< IN or OUT transfer completed in both host and device mode (triggers
                                                           an interrupt)*/
  #define USBHSCORE_GRXSTSP_PKTSTS_DSETUPCOM (0x4UL)
  #define USBHSCORE_GRXSTSP_PKTSTS_DTTOG (0x5UL)

/* FN @Bits 21..24 : Mode: Device only. Frame Number (FN) */
  #define USBHSCORE_GRXSTSP_FN_Pos (21UL)
  #define USBHSCORE_GRXSTSP_FN_Msk (0xFUL << USBHSCORE_GRXSTSP_FN_Pos)


/* USBHSCORE_GRXFSIZ: Receive FIFO Size Register */
  #define USBHSCORE_GRXFSIZ_ResetValue (0x00000224UL)

/* RXFDEP @Bits 0..9 : Mode: Host and Device. RxFIFO Depth (RxFDep) */
  #define USBHSCORE_GRXFSIZ_RXFDEP_Pos (0UL)
  #define USBHSCORE_GRXFSIZ_RXFDEP_Msk (0x3FFUL << USBHSCORE_GRXFSIZ_RXFDEP_Pos)


/* USBHSCORE_GNPTXFSIZ: Non-periodic Transmit FIFO Size Register */
  #define USBHSCORE_GNPTXFSIZ_ResetValue (0x02000224UL)

/* NPTXFSTADDR @Bits 0..9 : Non-periodic Transmit RAM Start Address (NPTxFStAddr) */
  #define USBHSCORE_GNPTXFSIZ_NPTXFSTADDR_Pos (0UL)
  #define USBHSCORE_GNPTXFSIZ_NPTXFSTADDR_Msk (0x3FFUL << USBHSCORE_GNPTXFSIZ_NPTXFSTADDR_Pos) /*!< Bit mask of NPTXFSTADDR
                                                                            field.*/

/* NPTXFDEP @Bits 16..25 : Mode: Host only. Non-periodic TxFIFO Depth (NPTxFDep) */
  #define USBHSCORE_GNPTXFSIZ_NPTXFDEP_Pos (16UL)
  #define USBHSCORE_GNPTXFSIZ_NPTXFDEP_Msk (0x3FFUL << USBHSCORE_GNPTXFSIZ_NPTXFDEP_Pos)


/* USBHSCORE_GNPTXSTS: Non-periodic Transmit FIFO/Queue Status Register */
  #define USBHSCORE_GNPTXSTS_ResetValue (0x00080200UL)

/* NPTXFSPCAVAIL @Bits 0..15 : Non-periodic TxFIFO Space Avail (NPTxFSpcAvail) */
  #define USBHSCORE_GNPTXSTS_NPTXFSPCAVAIL_Pos (0UL)
  #define USBHSCORE_GNPTXSTS_NPTXFSPCAVAIL_Msk (0xFFFFUL << USBHSCORE_GNPTXSTS_NPTXFSPCAVAIL_Pos) /*!< Bit mask of NPTXFSPCAVAIL
                                                                            field.*/

/* NPTXQSPCAVAIL @Bits 16..23 : Non-periodic Transmit Request Queue Space Available (NPTxQSpcAvail) */
  #define USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_Pos (16UL)
  #define USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_Msk (0xFFUL << USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_Pos) /*!< Bit mask of NPTXQSPCAVAIL
                                                                            field.*/
  #define USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_Min (0x0UL)
  #define USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_Max (0x8UL)
  #define USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_FULL (0x00UL)
  #define USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_QUE1 (0x01UL)
  #define USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_QUE2 (0x02UL)
  #define USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_QUE3 (0x03UL)
  #define USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_QUE4 (0x04UL)
  #define USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_QUE5 (0x05UL)
  #define USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_QUE6 (0x06UL)
  #define USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_QUE7 (0x07UL)
  #define USBHSCORE_GNPTXSTS_NPTXQSPCAVAIL_QUE8 (0x08UL)

/* NPTXQTOP @Bits 24..30 : Top of the Non-periodic Transmit Request Queue (NPTxQTop) */
  #define USBHSCORE_GNPTXSTS_NPTXQTOP_Pos (24UL)
  #define USBHSCORE_GNPTXSTS_NPTXQTOP_Msk (0x7FUL << USBHSCORE_GNPTXSTS_NPTXQTOP_Pos)
  #define USBHSCORE_GNPTXSTS_NPTXQTOP_Min (0x0UL)
  #define USBHSCORE_GNPTXSTS_NPTXQTOP_Max (0x3UL)
  #define USBHSCORE_GNPTXSTS_NPTXQTOP_INOUTTK (0x00UL)
  #define USBHSCORE_GNPTXSTS_NPTXQTOP_ZEROTX (0x01UL)
  #define USBHSCORE_GNPTXSTS_NPTXQTOP_PINGCSPLIT (0x02UL)
  #define USBHSCORE_GNPTXSTS_NPTXQTOP_CHNHALT (0x03UL)


/* USBHSCORE_GGPIO: General Purpose Input/Output Register */
  #define USBHSCORE_GGPIO_ResetValue (0x00000000UL)

/* GPI @Bits 0..15 : (unspecified) */
  #define USBHSCORE_GGPIO_GPI_Pos (0UL)
  #define USBHSCORE_GGPIO_GPI_Msk (0xFFFFUL << USBHSCORE_GGPIO_GPI_Pos)

/* GPO @Bits 16..31 : (unspecified) */
  #define USBHSCORE_GGPIO_GPO_Pos (16UL)
  #define USBHSCORE_GGPIO_GPO_Msk (0xFFFFUL << USBHSCORE_GGPIO_GPO_Pos)


/* USBHSCORE_GUID: User ID Register */
  #define USBHSCORE_GUID_ResetValue (0x00000000UL)

/* GUID @Bits 0..31 : User ID (UserID) Application-programmable ID field. */
  #define USBHSCORE_GUID_GUID_Pos (0UL)
  #define USBHSCORE_GUID_GUID_Msk (0xFFFFFFFFUL << USBHSCORE_GUID_GUID_Pos)


/* USBHSCORE_GSNPSID: Synopsys ID Register */
  #define USBHSCORE_GSNPSID_ResetValue (0x4F54430AUL)

/* SYNOPSYSID @Bits 0..31 : Release number of the controller being used currently. */
  #define USBHSCORE_GSNPSID_SYNOPSYSID_Pos (0UL)
  #define USBHSCORE_GSNPSID_SYNOPSYSID_Msk (0xFFFFFFFFUL << USBHSCORE_GSNPSID_SYNOPSYSID_Pos) /*!< Bit mask of SYNOPSYSID
                                                                            field.*/


/* USBHSCORE_GHWCFG1: User Hardware Configuration 1 Register */
  #define USBHSCORE_GHWCFG1_ResetValue (0xAA555000UL)

/* EPDIR @Bits 0..31 : This 32-bit field uses two bits per */
  #define USBHSCORE_GHWCFG1_EPDIR_Pos (0UL)
  #define USBHSCORE_GHWCFG1_EPDIR_Msk (0xFFFFFFFFUL << USBHSCORE_GHWCFG1_EPDIR_Pos)


/* USBHSCORE_GHWCFG2: User Hardware Configuration 2 Register */
  #define USBHSCORE_GHWCFG2_ResetValue (0x228BFC72UL)

/* OTGMODE @Bits 0..2 : Mode of Operation (OtgMode) */
  #define USBHSCORE_GHWCFG2_OTGMODE_Pos (0UL)
  #define USBHSCORE_GHWCFG2_OTGMODE_Msk (0x7UL << USBHSCORE_GHWCFG2_OTGMODE_Pos)
  #define USBHSCORE_GHWCFG2_OTGMODE_Min (0x0UL)
  #define USBHSCORE_GHWCFG2_OTGMODE_Max (0x6UL)
  #define USBHSCORE_GHWCFG2_OTGMODE_HNPSRP (0x0UL)
  #define USBHSCORE_GHWCFG2_OTGMODE_SRPOTG (0x1UL)
  #define USBHSCORE_GHWCFG2_OTGMODE_NHNPNSRP (0x2UL)
  #define USBHSCORE_GHWCFG2_OTGMODE_SRPCAPD (0x3UL)
  #define USBHSCORE_GHWCFG2_OTGMODE_NONOTGD (0x4UL)
  #define USBHSCORE_GHWCFG2_OTGMODE_SRPCAPH (0x5UL)
  #define USBHSCORE_GHWCFG2_OTGMODE_NONOTGH (0x6UL)

/* OTGARCH @Bits 3..4 : Architecture (OtgArch) */
  #define USBHSCORE_GHWCFG2_OTGARCH_Pos (3UL)
  #define USBHSCORE_GHWCFG2_OTGARCH_Msk (0x3UL << USBHSCORE_GHWCFG2_OTGARCH_Pos)
  #define USBHSCORE_GHWCFG2_OTGARCH_Min (0x0UL)
  #define USBHSCORE_GHWCFG2_OTGARCH_Max (0x2UL)
  #define USBHSCORE_GHWCFG2_OTGARCH_SLAVEMODE (0x0UL)
  #define USBHSCORE_GHWCFG2_OTGARCH_EXTERNALDMA (0x1UL)
  #define USBHSCORE_GHWCFG2_OTGARCH_INTERNALDMA (0x2UL)

/* SINGPNT @Bit 5 : Point-to-Point (SingPnt) */
  #define USBHSCORE_GHWCFG2_SINGPNT_Pos (5UL)
  #define USBHSCORE_GHWCFG2_SINGPNT_Msk (0x1UL << USBHSCORE_GHWCFG2_SINGPNT_Pos)
  #define USBHSCORE_GHWCFG2_SINGPNT_Min (0x0UL)
  #define USBHSCORE_GHWCFG2_SINGPNT_Max (0x1UL)
  #define USBHSCORE_GHWCFG2_SINGPNT_MULTIPOINT (0x0UL)
  #define USBHSCORE_GHWCFG2_SINGPNT_SINGLEPOINT (0x1UL)

/* HSPHYTYPE @Bits 6..7 : High-Speed PHY Interface Type (HSPhyType) */
  #define USBHSCORE_GHWCFG2_HSPHYTYPE_Pos (6UL)
  #define USBHSCORE_GHWCFG2_HSPHYTYPE_Msk (0x3UL << USBHSCORE_GHWCFG2_HSPHYTYPE_Pos)
  #define USBHSCORE_GHWCFG2_HSPHYTYPE_Min (0x0UL)
  #define USBHSCORE_GHWCFG2_HSPHYTYPE_Max (0x3UL)
  #define USBHSCORE_GHWCFG2_HSPHYTYPE_NOHS (0x0UL)
  #define USBHSCORE_GHWCFG2_HSPHYTYPE_UTMIPLUS (0x1UL)
  #define USBHSCORE_GHWCFG2_HSPHYTYPE_ULPI (0x2UL)
  #define USBHSCORE_GHWCFG2_HSPHYTYPE_UTMIPUSULPI (0x3UL)

/* FSPHYTYPE @Bits 8..9 : Full-Speed PHY Interface Type (FSPhyType) */
  #define USBHSCORE_GHWCFG2_FSPHYTYPE_Pos (8UL)
  #define USBHSCORE_GHWCFG2_FSPHYTYPE_Msk (0x3UL << USBHSCORE_GHWCFG2_FSPHYTYPE_Pos)
  #define USBHSCORE_GHWCFG2_FSPHYTYPE_Min (0x0UL)
  #define USBHSCORE_GHWCFG2_FSPHYTYPE_Max (0x3UL)
  #define USBHSCORE_GHWCFG2_FSPHYTYPE_NO_FS (0x0UL)
  #define USBHSCORE_GHWCFG2_FSPHYTYPE_FS (0x1UL)
  #define USBHSCORE_GHWCFG2_FSPHYTYPE_FSPLUSUTMI (0x2UL)
  #define USBHSCORE_GHWCFG2_FSPHYTYPE_FSPLUSULPI (0x3UL)

/* NUMDEVEPS @Bits 10..13 : Number of Device Endpoints (NumDevEps) */
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_Pos (10UL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_Msk (0xFUL << USBHSCORE_GHWCFG2_NUMDEVEPS_Pos)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_Min (0x0UL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_Max (0xFUL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT0 (0x0UL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT1 (0x1UL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT2 (0x2UL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT3 (0x3UL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT4 (0x4UL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT5 (0x5UL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT6 (0x6UL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT7 (0x7UL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT8 (0x8UL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT9 (0x9UL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT10 (0xAUL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT11 (0xBUL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT12 (0xCUL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT13 (0xDUL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT14 (0xEUL)
  #define USBHSCORE_GHWCFG2_NUMDEVEPS_ENDPT15 (0xFUL)

/* NUMHSTCHNL @Bits 14..17 : Number of Host Channels (NumHstChnl) */
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_Pos (14UL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_Msk (0xFUL << USBHSCORE_GHWCFG2_NUMHSTCHNL_Pos)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_Min (0x0UL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_Max (0xFUL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH0 (0x0UL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH1 (0x1UL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH2 (0x2UL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH3 (0x3UL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH4 (0x4UL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH5 (0x5UL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH6 (0x6UL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH7 (0x7UL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH8 (0x8UL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH9 (0x9UL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH10 (0xAUL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH11 (0xBUL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH12 (0xCUL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH13 (0xDUL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH14 (0xEUL)
  #define USBHSCORE_GHWCFG2_NUMHSTCHNL_HOSTCH15 (0xFUL)

/* PERIOSUPPORT @Bit 18 : Periodic OUT Channels Supported in Host Mode (PerioSupport) */
  #define USBHSCORE_GHWCFG2_PERIOSUPPORT_Pos (18UL)
  #define USBHSCORE_GHWCFG2_PERIOSUPPORT_Msk (0x1UL << USBHSCORE_GHWCFG2_PERIOSUPPORT_Pos)
  #define USBHSCORE_GHWCFG2_PERIOSUPPORT_Min (0x0UL)
  #define USBHSCORE_GHWCFG2_PERIOSUPPORT_Max (0x1UL)
  #define USBHSCORE_GHWCFG2_PERIOSUPPORT_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG2_PERIOSUPPORT_ENABLED (0x1UL)

/* DYNFIFOSIZING @Bit 19 : Dynamic FIFO Sizing Enabled (DynFifoSizing) */
  #define USBHSCORE_GHWCFG2_DYNFIFOSIZING_Pos (19UL)
  #define USBHSCORE_GHWCFG2_DYNFIFOSIZING_Msk (0x1UL << USBHSCORE_GHWCFG2_DYNFIFOSIZING_Pos) /*!< Bit mask of DYNFIFOSIZING
                                                                            field.*/
  #define USBHSCORE_GHWCFG2_DYNFIFOSIZING_Min (0x0UL)
  #define USBHSCORE_GHWCFG2_DYNFIFOSIZING_Max (0x1UL)
  #define USBHSCORE_GHWCFG2_DYNFIFOSIZING_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG2_DYNFIFOSIZING_ENABLED (0x1UL)

/* MULTIPROCINTRPT @Bit 20 : Multi Processor Interrupt Enabled (MultiProcIntrpt) */
  #define USBHSCORE_GHWCFG2_MULTIPROCINTRPT_Pos (20UL)
  #define USBHSCORE_GHWCFG2_MULTIPROCINTRPT_Msk (0x1UL << USBHSCORE_GHWCFG2_MULTIPROCINTRPT_Pos) /*!< Bit mask of
                                                                            MULTIPROCINTRPT field.*/
  #define USBHSCORE_GHWCFG2_MULTIPROCINTRPT_Min (0x0UL)
  #define USBHSCORE_GHWCFG2_MULTIPROCINTRPT_Max (0x1UL)
  #define USBHSCORE_GHWCFG2_MULTIPROCINTRPT_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG2_MULTIPROCINTRPT_ENABLED (0x1UL)

/* NPTXQDEPTH @Bits 22..23 : Non-periodic Request Queue Depth (NPTxQDepth) */
  #define USBHSCORE_GHWCFG2_NPTXQDEPTH_Pos (22UL)
  #define USBHSCORE_GHWCFG2_NPTXQDEPTH_Msk (0x3UL << USBHSCORE_GHWCFG2_NPTXQDEPTH_Pos)
  #define USBHSCORE_GHWCFG2_NPTXQDEPTH_Min (0x0UL)
  #define USBHSCORE_GHWCFG2_NPTXQDEPTH_Max (0x2UL)
  #define USBHSCORE_GHWCFG2_NPTXQDEPTH_TWO (0x0UL)
  #define USBHSCORE_GHWCFG2_NPTXQDEPTH_FOUR (0x1UL)
  #define USBHSCORE_GHWCFG2_NPTXQDEPTH_EIGHT (0x2UL)

/* PTXQDEPTH @Bits 24..25 : Host Mode Periodic Request Queue Depth (PTxQDepth) */
  #define USBHSCORE_GHWCFG2_PTXQDEPTH_Pos (24UL)
  #define USBHSCORE_GHWCFG2_PTXQDEPTH_Msk (0x3UL << USBHSCORE_GHWCFG2_PTXQDEPTH_Pos)
  #define USBHSCORE_GHWCFG2_PTXQDEPTH_Min (0x0UL)
  #define USBHSCORE_GHWCFG2_PTXQDEPTH_Max (0x3UL)
  #define USBHSCORE_GHWCFG2_PTXQDEPTH_QUE2 (0x0UL)
  #define USBHSCORE_GHWCFG2_PTXQDEPTH_QUE4 (0x1UL)
  #define USBHSCORE_GHWCFG2_PTXQDEPTH_QUE8 (0x2UL)
  #define USBHSCORE_GHWCFG2_PTXQDEPTH_QUE16 (0x3UL)

/* TKNQDEPTH @Bits 26..30 : Device Mode IN Token Sequence Learning Queue Depth (TknQDepth) */
  #define USBHSCORE_GHWCFG2_TKNQDEPTH_Pos (26UL)
  #define USBHSCORE_GHWCFG2_TKNQDEPTH_Msk (0x1FUL << USBHSCORE_GHWCFG2_TKNQDEPTH_Pos)


/* USBHSCORE_GHWCFG3: User Hardware Configuration 3 Register */
  #define USBHSCORE_GHWCFG3_ResetValue (0x0BEAC0E8UL)

/* XFERSIZEWIDTH @Bits 0..3 : Width of Transfer Size Counters (XferSizeWidth) */
  #define USBHSCORE_GHWCFG3_XFERSIZEWIDTH_Pos (0UL)
  #define USBHSCORE_GHWCFG3_XFERSIZEWIDTH_Msk (0xFUL << USBHSCORE_GHWCFG3_XFERSIZEWIDTH_Pos) /*!< Bit mask of XFERSIZEWIDTH
                                                                            field.*/
  #define USBHSCORE_GHWCFG3_XFERSIZEWIDTH_Min (0x0UL)
  #define USBHSCORE_GHWCFG3_XFERSIZEWIDTH_Max (0x8UL)
  #define USBHSCORE_GHWCFG3_XFERSIZEWIDTH_WIDTH11 (0x0UL)
  #define USBHSCORE_GHWCFG3_XFERSIZEWIDTH_WIDTH12 (0x1UL)
  #define USBHSCORE_GHWCFG3_XFERSIZEWIDTH_WIDTH13 (0x2UL)
  #define USBHSCORE_GHWCFG3_XFERSIZEWIDTH_WIDTH14 (0x3UL)
  #define USBHSCORE_GHWCFG3_XFERSIZEWIDTH_WIDTH15 (0x4UL)
  #define USBHSCORE_GHWCFG3_XFERSIZEWIDTH_WIDTH16 (0x5UL)
  #define USBHSCORE_GHWCFG3_XFERSIZEWIDTH_WIDTH17 (0x6UL)
  #define USBHSCORE_GHWCFG3_XFERSIZEWIDTH_WIDTH18 (0x7UL)
  #define USBHSCORE_GHWCFG3_XFERSIZEWIDTH_WIDTH19 (0x8UL)

/* PKTSIZEWIDTH @Bits 4..6 : Width of Packet Size Counters (PktSizeWidth) */
  #define USBHSCORE_GHWCFG3_PKTSIZEWIDTH_Pos (4UL)
  #define USBHSCORE_GHWCFG3_PKTSIZEWIDTH_Msk (0x7UL << USBHSCORE_GHWCFG3_PKTSIZEWIDTH_Pos)
  #define USBHSCORE_GHWCFG3_PKTSIZEWIDTH_Min (0x0UL)
  #define USBHSCORE_GHWCFG3_PKTSIZEWIDTH_Max (0x6UL)
  #define USBHSCORE_GHWCFG3_PKTSIZEWIDTH_BITS4 (0x0UL)
  #define USBHSCORE_GHWCFG3_PKTSIZEWIDTH_BITS5 (0x1UL)
  #define USBHSCORE_GHWCFG3_PKTSIZEWIDTH_BITS6 (0x2UL)
  #define USBHSCORE_GHWCFG3_PKTSIZEWIDTH_BITS7 (0x3UL)
  #define USBHSCORE_GHWCFG3_PKTSIZEWIDTH_BITS8 (0x4UL)
  #define USBHSCORE_GHWCFG3_PKTSIZEWIDTH_BITS9 (0x5UL)
  #define USBHSCORE_GHWCFG3_PKTSIZEWIDTH_BITS10 (0x6UL)

/* OTGEN @Bit 7 : OTG Function Enabled (OtgEn) */
  #define USBHSCORE_GHWCFG3_OTGEN_Pos (7UL)
  #define USBHSCORE_GHWCFG3_OTGEN_Msk (0x1UL << USBHSCORE_GHWCFG3_OTGEN_Pos)
  #define USBHSCORE_GHWCFG3_OTGEN_Min (0x0UL)
  #define USBHSCORE_GHWCFG3_OTGEN_Max (0x1UL)
  #define USBHSCORE_GHWCFG3_OTGEN_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG3_OTGEN_ENABLED (0x1UL)

/* I2CINTSEL @Bit 8 : I2C Selection (I2CIntSel) */
  #define USBHSCORE_GHWCFG3_I2CINTSEL_Pos (8UL)
  #define USBHSCORE_GHWCFG3_I2CINTSEL_Msk (0x1UL << USBHSCORE_GHWCFG3_I2CINTSEL_Pos)
  #define USBHSCORE_GHWCFG3_I2CINTSEL_Min (0x0UL)
  #define USBHSCORE_GHWCFG3_I2CINTSEL_Max (0x1UL)
  #define USBHSCORE_GHWCFG3_I2CINTSEL_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG3_I2CINTSEL_ENABLED (0x1UL)

/* VNDCTLSUPT @Bit 9 : Vendor Control Interface Support (VndctlSupt) */
  #define USBHSCORE_GHWCFG3_VNDCTLSUPT_Pos (9UL)
  #define USBHSCORE_GHWCFG3_VNDCTLSUPT_Msk (0x1UL << USBHSCORE_GHWCFG3_VNDCTLSUPT_Pos)
  #define USBHSCORE_GHWCFG3_VNDCTLSUPT_Min (0x0UL)
  #define USBHSCORE_GHWCFG3_VNDCTLSUPT_Max (0x1UL)
  #define USBHSCORE_GHWCFG3_VNDCTLSUPT_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG3_VNDCTLSUPT_ENABLED (0x1UL)

/* OPTFEATURE @Bit 10 : Optional Features Removed (OptFeature) */
  #define USBHSCORE_GHWCFG3_OPTFEATURE_Pos (10UL)
  #define USBHSCORE_GHWCFG3_OPTFEATURE_Msk (0x1UL << USBHSCORE_GHWCFG3_OPTFEATURE_Pos)
  #define USBHSCORE_GHWCFG3_OPTFEATURE_Min (0x0UL)
  #define USBHSCORE_GHWCFG3_OPTFEATURE_Max (0x1UL)
  #define USBHSCORE_GHWCFG3_OPTFEATURE_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG3_OPTFEATURE_ENABLED (0x1UL)

/* RSTTYPE @Bit 11 : Reset Style for Clocked always Blocks in RTL (RstType) */
  #define USBHSCORE_GHWCFG3_RSTTYPE_Pos (11UL)
  #define USBHSCORE_GHWCFG3_RSTTYPE_Msk (0x1UL << USBHSCORE_GHWCFG3_RSTTYPE_Pos)
  #define USBHSCORE_GHWCFG3_RSTTYPE_Min (0x0UL)
  #define USBHSCORE_GHWCFG3_RSTTYPE_Max (0x1UL)
  #define USBHSCORE_GHWCFG3_RSTTYPE_ASYNCRST (0x0UL)
  #define USBHSCORE_GHWCFG3_RSTTYPE_SYNCRST (0x1UL)

/* ADPSUPPORT @Bit 12 : This bit indicates whether ADP logic is present within or external to the controller */
  #define USBHSCORE_GHWCFG3_ADPSUPPORT_Pos (12UL)
  #define USBHSCORE_GHWCFG3_ADPSUPPORT_Msk (0x1UL << USBHSCORE_GHWCFG3_ADPSUPPORT_Pos)
  #define USBHSCORE_GHWCFG3_ADPSUPPORT_Min (0x0UL)
  #define USBHSCORE_GHWCFG3_ADPSUPPORT_Max (0x1UL)
  #define USBHSCORE_GHWCFG3_ADPSUPPORT_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG3_ADPSUPPORT_ENABLED (0x1UL)

/* HSICMODE @Bit 13 : HSIC mode specified for Mode of Operation */
  #define USBHSCORE_GHWCFG3_HSICMODE_Pos (13UL)
  #define USBHSCORE_GHWCFG3_HSICMODE_Msk (0x1UL << USBHSCORE_GHWCFG3_HSICMODE_Pos)
  #define USBHSCORE_GHWCFG3_HSICMODE_Min (0x0UL)
  #define USBHSCORE_GHWCFG3_HSICMODE_Max (0x1UL)
  #define USBHSCORE_GHWCFG3_HSICMODE_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG3_HSICMODE_ENABLED (0x1UL)

/* BCSUPPORT @Bit 14 : This bit indicates the controller support for Battery Charger. */
  #define USBHSCORE_GHWCFG3_BCSUPPORT_Pos (14UL)
  #define USBHSCORE_GHWCFG3_BCSUPPORT_Msk (0x1UL << USBHSCORE_GHWCFG3_BCSUPPORT_Pos)
  #define USBHSCORE_GHWCFG3_BCSUPPORT_Min (0x0UL)
  #define USBHSCORE_GHWCFG3_BCSUPPORT_Max (0x1UL)
  #define USBHSCORE_GHWCFG3_BCSUPPORT_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG3_BCSUPPORT_ENABLED (0x1UL)

/* LPMMODE @Bit 15 : LPM mode specified for Mode of Operation. */
  #define USBHSCORE_GHWCFG3_LPMMODE_Pos (15UL)
  #define USBHSCORE_GHWCFG3_LPMMODE_Msk (0x1UL << USBHSCORE_GHWCFG3_LPMMODE_Pos)
  #define USBHSCORE_GHWCFG3_LPMMODE_Min (0x0UL)
  #define USBHSCORE_GHWCFG3_LPMMODE_Max (0x1UL)
  #define USBHSCORE_GHWCFG3_LPMMODE_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG3_LPMMODE_ENABLED (0x1UL)

/* DFIFODEPTH @Bits 16..31 : DFIFO Depth (DfifoDepth - EP_LOC_CNT) */
  #define USBHSCORE_GHWCFG3_DFIFODEPTH_Pos (16UL)
  #define USBHSCORE_GHWCFG3_DFIFODEPTH_Msk (0xFFFFUL << USBHSCORE_GHWCFG3_DFIFODEPTH_Pos)


/* USBHSCORE_GHWCFG4: User Hardware Configuration 4 Register */
  #define USBHSCORE_GHWCFG4_ResetValue (0x1E10AA60UL)

/* NUMDEVPERIOEPS @Bits 0..3 : Number of Device Mode Periodic IN Endpoints (NumDevPerioEps) */
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Pos (0UL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Msk (0xFUL << USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Pos) /*!< Bit mask of NUMDEVPERIOEPS
                                                                            field.*/
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Max (0xFUL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value0 (0x0UL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value1 (0x1UL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value2 (0x2UL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value3 (0x3UL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value4 (0x4UL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value5 (0x5UL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value6 (0x6UL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value7 (0x7UL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value8 (0x8UL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value9 (0x9UL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value10 (0xAUL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value11 (0xBUL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value12 (0xCUL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value13 (0xDUL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value14 (0xEUL)
  #define USBHSCORE_GHWCFG4_NUMDEVPERIOEPS_Value15 (0xFUL)

/* PARTIALPWRDN @Bit 4 : Enable Partial Power Down (PartialPwrDn) */
  #define USBHSCORE_GHWCFG4_PARTIALPWRDN_Pos (4UL)
  #define USBHSCORE_GHWCFG4_PARTIALPWRDN_Msk (0x1UL << USBHSCORE_GHWCFG4_PARTIALPWRDN_Pos)
  #define USBHSCORE_GHWCFG4_PARTIALPWRDN_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_PARTIALPWRDN_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_PARTIALPWRDN_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG4_PARTIALPWRDN_ENABLED (0x1UL)

/* AHBFREQ @Bit 5 : Minimum AHB Frequency Less Than 60 MHz (AhbFreq) */
  #define USBHSCORE_GHWCFG4_AHBFREQ_Pos (5UL)
  #define USBHSCORE_GHWCFG4_AHBFREQ_Msk (0x1UL << USBHSCORE_GHWCFG4_AHBFREQ_Pos)
  #define USBHSCORE_GHWCFG4_AHBFREQ_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_AHBFREQ_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_AHBFREQ_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG4_AHBFREQ_ENABLED (0x1UL)

/* HIBERNATION @Bit 6 : Enable Hibernation (Hibernation) */
  #define USBHSCORE_GHWCFG4_HIBERNATION_Pos (6UL)
  #define USBHSCORE_GHWCFG4_HIBERNATION_Msk (0x1UL << USBHSCORE_GHWCFG4_HIBERNATION_Pos)
  #define USBHSCORE_GHWCFG4_HIBERNATION_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_HIBERNATION_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_HIBERNATION_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG4_HIBERNATION_ENABLED (0x1UL)

/* EXTENDEDHIBERNATION @Bit 7 : Enable Hibernation */
  #define USBHSCORE_GHWCFG4_EXTENDEDHIBERNATION_Pos (7UL)
  #define USBHSCORE_GHWCFG4_EXTENDEDHIBERNATION_Msk (0x1UL << USBHSCORE_GHWCFG4_EXTENDEDHIBERNATION_Pos) /*!< Bit mask of
                                                                            EXTENDEDHIBERNATION field.*/
  #define USBHSCORE_GHWCFG4_EXTENDEDHIBERNATION_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_EXTENDEDHIBERNATION_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_EXTENDEDHIBERNATION_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG4_EXTENDEDHIBERNATION_ENABLED (0x1UL)

/* ENHANCEDLPMSUPT1 @Bit 9 : Enhanced LPM Support1 (EnhancedLPMSupt1) */
  #define USBHSCORE_GHWCFG4_ENHANCEDLPMSUPT1_Pos (9UL)
  #define USBHSCORE_GHWCFG4_ENHANCEDLPMSUPT1_Msk (0x1UL << USBHSCORE_GHWCFG4_ENHANCEDLPMSUPT1_Pos) /*!< Bit mask of
                                                                            ENHANCEDLPMSUPT1 field.*/
  #define USBHSCORE_GHWCFG4_ENHANCEDLPMSUPT1_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_ENHANCEDLPMSUPT1_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_ENHANCEDLPMSUPT1_DISABLED (0x0UL) /*!< Reject L1 Request even if Non-Periodic (Bulk/Interrupt)
                                                                   TxFIFO is not empty.*/
  #define USBHSCORE_GHWCFG4_ENHANCEDLPMSUPT1_ENABLED (0x1UL) /*!< Accept L1 Request even if Non-Periodic (Bulk/Interrupt) TxFIFO
                                                                  is not empty*/

/* SERVINTFLOW @Bit 10 : Service Interval Flow */
  #define USBHSCORE_GHWCFG4_SERVINTFLOW_Pos (10UL)
  #define USBHSCORE_GHWCFG4_SERVINTFLOW_Msk (0x1UL << USBHSCORE_GHWCFG4_SERVINTFLOW_Pos)
  #define USBHSCORE_GHWCFG4_SERVINTFLOW_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_SERVINTFLOW_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_SERVINTFLOW_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG4_SERVINTFLOW_ENABLED (0x1UL)

/* IPGISOCSUPT @Bit 11 : Interpacket Gap ISOC OUT Worst-case Support (ipgisocSupt) */
  #define USBHSCORE_GHWCFG4_IPGISOCSUPT_Pos (11UL)
  #define USBHSCORE_GHWCFG4_IPGISOCSUPT_Msk (0x1UL << USBHSCORE_GHWCFG4_IPGISOCSUPT_Pos)
  #define USBHSCORE_GHWCFG4_IPGISOCSUPT_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_IPGISOCSUPT_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_IPGISOCSUPT_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG4_IPGISOCSUPT_ENABLED (0x1UL)

/* ACGSUPT @Bit 12 : Active Clock Gating Support */
  #define USBHSCORE_GHWCFG4_ACGSUPT_Pos (12UL)
  #define USBHSCORE_GHWCFG4_ACGSUPT_Msk (0x1UL << USBHSCORE_GHWCFG4_ACGSUPT_Pos)
  #define USBHSCORE_GHWCFG4_ACGSUPT_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_ACGSUPT_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_ACGSUPT_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG4_ACGSUPT_ENABLED (0x1UL)

/* ENHANCEDLPMSUPT @Bit 13 : Enhanced LPM Support (EnhancedLPMSupt) */
  #define USBHSCORE_GHWCFG4_ENHANCEDLPMSUPT_Pos (13UL)
  #define USBHSCORE_GHWCFG4_ENHANCEDLPMSUPT_Msk (0x1UL << USBHSCORE_GHWCFG4_ENHANCEDLPMSUPT_Pos) /*!< Bit mask of
                                                                            ENHANCEDLPMSUPT field.*/
  #define USBHSCORE_GHWCFG4_ENHANCEDLPMSUPT_Min (0x1UL)
  #define USBHSCORE_GHWCFG4_ENHANCEDLPMSUPT_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_ENHANCEDLPMSUPT_ENABLED (0x1UL)

/* PHYDATAWIDTH @Bits 14..15 : UTMI+ PHY/ULPI-to-Internal UTMI+ Wrapper Data Width */
  #define USBHSCORE_GHWCFG4_PHYDATAWIDTH_Pos (14UL)
  #define USBHSCORE_GHWCFG4_PHYDATAWIDTH_Msk (0x3UL << USBHSCORE_GHWCFG4_PHYDATAWIDTH_Pos)
  #define USBHSCORE_GHWCFG4_PHYDATAWIDTH_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_PHYDATAWIDTH_Max (0x2UL)
  #define USBHSCORE_GHWCFG4_PHYDATAWIDTH_WIDTH1 (0x0UL)
  #define USBHSCORE_GHWCFG4_PHYDATAWIDTH_WIDTH2 (0x1UL)
  #define USBHSCORE_GHWCFG4_PHYDATAWIDTH_WIDTH3 (0x2UL)

/* NUMCTLEPS @Bits 16..19 : Number of Device Mode Control Endpoints in Addition to */
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_Pos (16UL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_Msk (0xFUL << USBHSCORE_GHWCFG4_NUMCTLEPS_Pos)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_Max (0xFUL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT0 (0x0UL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT1 (0x1UL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT2 (0x2UL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT3 (0x3UL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT4 (0x4UL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT5 (0x5UL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT6 (0x6UL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT7 (0x7UL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT8 (0x8UL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT9 (0x9UL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT10 (0xAUL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT11 (0xBUL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT12 (0xCUL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT13 (0xDUL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT14 (0xEUL)
  #define USBHSCORE_GHWCFG4_NUMCTLEPS_ENDPT15 (0xFUL)

/* IDDGFLTR @Bit 20 : IDDIG Filter Enable (IddgFltr) */
  #define USBHSCORE_GHWCFG4_IDDGFLTR_Pos (20UL)
  #define USBHSCORE_GHWCFG4_IDDGFLTR_Msk (0x1UL << USBHSCORE_GHWCFG4_IDDGFLTR_Pos)
  #define USBHSCORE_GHWCFG4_IDDGFLTR_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_IDDGFLTR_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_IDDGFLTR_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG4_IDDGFLTR_ENABLED (0x1UL)

/* VBUSVALIDFLTR @Bit 21 : VBUS Valid Filter Enabled (VBusValidFltr) */
  #define USBHSCORE_GHWCFG4_VBUSVALIDFLTR_Pos (21UL)
  #define USBHSCORE_GHWCFG4_VBUSVALIDFLTR_Msk (0x1UL << USBHSCORE_GHWCFG4_VBUSVALIDFLTR_Pos) /*!< Bit mask of VBUSVALIDFLTR
                                                                            field.*/
  #define USBHSCORE_GHWCFG4_VBUSVALIDFLTR_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_VBUSVALIDFLTR_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_VBUSVALIDFLTR_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG4_VBUSVALIDFLTR_ENABLED (0x1UL)

/* AVALIDFLTR @Bit 22 : a_valid Filter Enabled (AValidFltr) */
  #define USBHSCORE_GHWCFG4_AVALIDFLTR_Pos (22UL)
  #define USBHSCORE_GHWCFG4_AVALIDFLTR_Msk (0x1UL << USBHSCORE_GHWCFG4_AVALIDFLTR_Pos)
  #define USBHSCORE_GHWCFG4_AVALIDFLTR_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_AVALIDFLTR_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_AVALIDFLTR_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG4_AVALIDFLTR_ENABLED (0x1UL)

/* BVALIDFLTR @Bit 23 : b_valid Filter Enabled (BValidFltr) */
  #define USBHSCORE_GHWCFG4_BVALIDFLTR_Pos (23UL)
  #define USBHSCORE_GHWCFG4_BVALIDFLTR_Msk (0x1UL << USBHSCORE_GHWCFG4_BVALIDFLTR_Pos)
  #define USBHSCORE_GHWCFG4_BVALIDFLTR_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_BVALIDFLTR_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_BVALIDFLTR_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG4_BVALIDFLTR_ENABLED (0x1UL)

/* SESSENDFLTR @Bit 24 : session_end Filter Enabled (SessEndFltr) */
  #define USBHSCORE_GHWCFG4_SESSENDFLTR_Pos (24UL)
  #define USBHSCORE_GHWCFG4_SESSENDFLTR_Msk (0x1UL << USBHSCORE_GHWCFG4_SESSENDFLTR_Pos)
  #define USBHSCORE_GHWCFG4_SESSENDFLTR_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_SESSENDFLTR_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_SESSENDFLTR_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG4_SESSENDFLTR_ENABLED (0x1UL)

/* DEDFIFOMODE @Bit 25 : Enable Dedicated Transmit FIFO for device IN Endpoints */
  #define USBHSCORE_GHWCFG4_DEDFIFOMODE_Pos (25UL)
  #define USBHSCORE_GHWCFG4_DEDFIFOMODE_Msk (0x1UL << USBHSCORE_GHWCFG4_DEDFIFOMODE_Pos)
  #define USBHSCORE_GHWCFG4_DEDFIFOMODE_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_DEDFIFOMODE_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_DEDFIFOMODE_DISABLED (0x0UL)
  #define USBHSCORE_GHWCFG4_DEDFIFOMODE_ENABLED (0x1UL)

/* INEPS @Bits 26..29 : Number of Device Mode IN Endpoints Including Control Endpoints (INEps) */
  #define USBHSCORE_GHWCFG4_INEPS_Pos (26UL)
  #define USBHSCORE_GHWCFG4_INEPS_Msk (0xFUL << USBHSCORE_GHWCFG4_INEPS_Pos)
  #define USBHSCORE_GHWCFG4_INEPS_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_INEPS_Max (0xFUL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT1 (0x0UL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT2 (0x1UL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT3 (0x2UL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT4 (0x3UL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT5 (0x4UL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT6 (0x5UL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT7 (0x6UL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT8 (0x7UL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT9 (0x8UL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT10 (0x9UL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT11 (0xAUL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT12 (0xBUL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT13 (0xCUL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT14 (0xDUL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT15 (0xEUL)
  #define USBHSCORE_GHWCFG4_INEPS_ENDPT16 (0xFUL)

/* DESCDMAENABLED @Bit 30 : Scatter/Gather DMA configuration */
  #define USBHSCORE_GHWCFG4_DESCDMAENABLED_Pos (30UL)
  #define USBHSCORE_GHWCFG4_DESCDMAENABLED_Msk (0x1UL << USBHSCORE_GHWCFG4_DESCDMAENABLED_Pos) /*!< Bit mask of DESCDMAENABLED
                                                                            field.*/
  #define USBHSCORE_GHWCFG4_DESCDMAENABLED_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_DESCDMAENABLED_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_DESCDMAENABLED_DISABLE (0x0UL)
  #define USBHSCORE_GHWCFG4_DESCDMAENABLED_ENABLE (0x1UL)

/* DESCDMA @Bit 31 : Scatter/Gather DMA configuration */
  #define USBHSCORE_GHWCFG4_DESCDMA_Pos (31UL)
  #define USBHSCORE_GHWCFG4_DESCDMA_Msk (0x1UL << USBHSCORE_GHWCFG4_DESCDMA_Pos)
  #define USBHSCORE_GHWCFG4_DESCDMA_Min (0x0UL)
  #define USBHSCORE_GHWCFG4_DESCDMA_Max (0x1UL)
  #define USBHSCORE_GHWCFG4_DESCDMA_CONFIG1 (0x0UL)
  #define USBHSCORE_GHWCFG4_DESCDMA_CONFIG2 (0x1UL)


/* USBHSCORE_GLPMCFG: LPM Config Register */
  #define USBHSCORE_GLPMCFG_ResetValue (0x00000000UL)

/* LPMCAP @Bit 0 : LPM-Capable (LPMCap) */
  #define USBHSCORE_GLPMCFG_LPMCAP_Pos (0UL)
  #define USBHSCORE_GLPMCFG_LPMCAP_Msk (0x1UL << USBHSCORE_GLPMCFG_LPMCAP_Pos)
  #define USBHSCORE_GLPMCFG_LPMCAP_Min (0x0UL)
  #define USBHSCORE_GLPMCFG_LPMCAP_Max (0x1UL)
  #define USBHSCORE_GLPMCFG_LPMCAP_DISABLED (0x0UL)
  #define USBHSCORE_GLPMCFG_LPMCAP_ENABLED (0x1UL)

/* APPL1RES @Bit 1 : Mode: Device only. LPM response programmed by application (AppL1Res) */
  #define USBHSCORE_GLPMCFG_APPL1RES_Pos (1UL)
  #define USBHSCORE_GLPMCFG_APPL1RES_Msk (0x1UL << USBHSCORE_GLPMCFG_APPL1RES_Pos)
  #define USBHSCORE_GLPMCFG_APPL1RES_Min (0x0UL)
  #define USBHSCORE_GLPMCFG_APPL1RES_Max (0x1UL)
  #define USBHSCORE_GLPMCFG_APPL1RES_NYET_RESP (0x0UL) /*!< The core responds with a NYET when an error is detected in either of
                                                            the LPM token packets due to corruption*/
  #define USBHSCORE_GLPMCFG_APPL1RES_ACK_RESP (0x1UL)

/* HIRD @Bits 2..5 : Host-Initiated Resume Duration (HIRD) */
  #define USBHSCORE_GLPMCFG_HIRD_Pos (2UL)
  #define USBHSCORE_GLPMCFG_HIRD_Msk (0xFUL << USBHSCORE_GLPMCFG_HIRD_Pos)

/* BREMOTEWAKE @Bit 6 : RemoteWakeEnable (bRemoteWake) */
  #define USBHSCORE_GLPMCFG_BREMOTEWAKE_Pos (6UL)
  #define USBHSCORE_GLPMCFG_BREMOTEWAKE_Msk (0x1UL << USBHSCORE_GLPMCFG_BREMOTEWAKE_Pos)
  #define USBHSCORE_GLPMCFG_BREMOTEWAKE_Min (0x0UL)
  #define USBHSCORE_GLPMCFG_BREMOTEWAKE_Max (0x1UL)
  #define USBHSCORE_GLPMCFG_BREMOTEWAKE_DISABLED (0x0UL)
  #define USBHSCORE_GLPMCFG_BREMOTEWAKE_ENABLED (0x1UL) /*!< In Host or device mode, this field takes the value of remote wake
                                                             up*/

/* ENBLSLPM @Bit 7 : Enable utmi_sleep_n (EnblSlpM) */
  #define USBHSCORE_GLPMCFG_ENBLSLPM_Pos (7UL)
  #define USBHSCORE_GLPMCFG_ENBLSLPM_Msk (0x1UL << USBHSCORE_GLPMCFG_ENBLSLPM_Pos)
  #define USBHSCORE_GLPMCFG_ENBLSLPM_Min (0x0UL)
  #define USBHSCORE_GLPMCFG_ENBLSLPM_Max (0x1UL)
  #define USBHSCORE_GLPMCFG_ENBLSLPM_DISABLED (0x0UL) /*!< utmi_sleep_n assertion from the core is not transferred to the
                                                           external PHY*/
  #define USBHSCORE_GLPMCFG_ENBLSLPM_ENABLED (0x1UL) /*!< utmi_sleep_n assertion from the core is transferred to the external
                                                          PHY when utmi_l1_suspend_n cannot be asserted*/

/* HIRDTHRES @Bits 8..12 : BESL/HIRD Threshold (HIRD_Thres) */
  #define USBHSCORE_GLPMCFG_HIRDTHRES_Pos (8UL)
  #define USBHSCORE_GLPMCFG_HIRDTHRES_Msk (0x1FUL << USBHSCORE_GLPMCFG_HIRDTHRES_Pos)

/* COREL1RES @Bits 13..14 : LPM Response (CoreL1Res) */
  #define USBHSCORE_GLPMCFG_COREL1RES_Pos (13UL)
  #define USBHSCORE_GLPMCFG_COREL1RES_Msk (0x3UL << USBHSCORE_GLPMCFG_COREL1RES_Pos)
  #define USBHSCORE_GLPMCFG_COREL1RES_Min (0x0UL)
  #define USBHSCORE_GLPMCFG_COREL1RES_Max (0x3UL)
  #define USBHSCORE_GLPMCFG_COREL1RES_LPMRESP1 (0x0UL)
  #define USBHSCORE_GLPMCFG_COREL1RES_LPMRESP2 (0x1UL)
  #define USBHSCORE_GLPMCFG_COREL1RES_LPMRESP3 (0x2UL)
  #define USBHSCORE_GLPMCFG_COREL1RES_LPMRESP4 (0x3UL)

/* SLPSTS @Bit 15 : Port Sleep Status (SlpSts) */
  #define USBHSCORE_GLPMCFG_SLPSTS_Pos (15UL)
  #define USBHSCORE_GLPMCFG_SLPSTS_Msk (0x1UL << USBHSCORE_GLPMCFG_SLPSTS_Pos)
  #define USBHSCORE_GLPMCFG_SLPSTS_Min (0x0UL)
  #define USBHSCORE_GLPMCFG_SLPSTS_Max (0x1UL)
  #define USBHSCORE_GLPMCFG_SLPSTS_CORE_NOT_IN_L1 (0x0UL)
  #define USBHSCORE_GLPMCFG_SLPSTS_CORE_IN_L1 (0x1UL) /*!< In Host mode, this bit indicates the core transitions to Sleep state
                                                           as a successful LPM transaction. In Device mode, the core enters the
                                                           Sleep state when an ACK response is sent to an LPM transaction*/

/* L1RESUMEOK @Bit 16 : Sleep State Resume OK (L1ResumeOK) */
  #define USBHSCORE_GLPMCFG_L1RESUMEOK_Pos (16UL)
  #define USBHSCORE_GLPMCFG_L1RESUMEOK_Msk (0x1UL << USBHSCORE_GLPMCFG_L1RESUMEOK_Pos)
  #define USBHSCORE_GLPMCFG_L1RESUMEOK_Min (0x0UL)
  #define USBHSCORE_GLPMCFG_L1RESUMEOK_Max (0x1UL)
  #define USBHSCORE_GLPMCFG_L1RESUMEOK_NOTOK (0x0UL)
  #define USBHSCORE_GLPMCFG_L1RESUMEOK_OK (0x1UL)

/* LPMCHNLINDX @Bits 17..20 : LPM Channel Index */
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_Pos (17UL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_Msk (0xFUL << USBHSCORE_GLPMCFG_LPMCHNLINDX_Pos)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_Min (0x0UL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_Max (0xFUL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH0 (0x0UL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH1 (0x1UL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH2 (0x2UL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH3 (0x3UL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH4 (0x4UL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH5 (0x5UL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH6 (0x6UL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH7 (0x7UL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH8 (0x8UL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH9 (0x9UL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH10 (0xAUL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH11 (0xBUL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH12 (0xCUL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH13 (0xDUL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH14 (0xEUL)
  #define USBHSCORE_GLPMCFG_LPMCHNLINDX_CH15 (0xFUL)

/* LPMRETRYCNT @Bits 21..23 : LPM Retry Count (LPM_Retry_Cnt) */
  #define USBHSCORE_GLPMCFG_LPMRETRYCNT_Pos (21UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNT_Msk (0x7UL << USBHSCORE_GLPMCFG_LPMRETRYCNT_Pos)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNT_Min (0x0UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNT_Max (0x7UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNT_RETRY0 (0x0UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNT_RETRY1 (0x1UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNT_RETRY2 (0x2UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNT_RETRY3 (0x3UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNT_RETRY4 (0x4UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNT_RETRY5 (0x5UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNT_RETRY6 (0x6UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNT_RETRY7 (0x7UL)

/* SNDLPM @Bit 24 : Send LPM Transaction (SndLPM) */
  #define USBHSCORE_GLPMCFG_SNDLPM_Pos (24UL)
  #define USBHSCORE_GLPMCFG_SNDLPM_Msk (0x1UL << USBHSCORE_GLPMCFG_SNDLPM_Pos)
  #define USBHSCORE_GLPMCFG_SNDLPM_Min (0x0UL)
  #define USBHSCORE_GLPMCFG_SNDLPM_Max (0x1UL)
  #define USBHSCORE_GLPMCFG_SNDLPM_DISABLED (0x0UL)  /*!< In host-only mode: Received the response from the device for the LPM
                                                          transaction*/
  #define USBHSCORE_GLPMCFG_SNDLPM_ENABLED (0x1UL)   /*!< In host-only mode: Sending LPM transaction containing EXT and LPM
                                                          tokens*/

/* LPMRETRYCNTSTS @Bits 25..27 : LPM Retry Count Status (LPM_RetryCnt_Sts) */
  #define USBHSCORE_GLPMCFG_LPMRETRYCNTSTS_Pos (25UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNTSTS_Msk (0x7UL << USBHSCORE_GLPMCFG_LPMRETRYCNTSTS_Pos) /*!< Bit mask of LPMRETRYCNTSTS
                                                                            field.*/
  #define USBHSCORE_GLPMCFG_LPMRETRYCNTSTS_Min (0x0UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNTSTS_Max (0x7UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNTSTS_RETRY_REM0 (0x0UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNTSTS_RETRY_REM1 (0x1UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNTSTS_RETRY_REM2 (0x2UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNTSTS_RETRY_REM3 (0x3UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNTSTS_RETRY_REM4 (0x4UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNTSTS_RETRY_REM5 (0x5UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNTSTS_RETRY_REM6 (0x6UL)
  #define USBHSCORE_GLPMCFG_LPMRETRYCNTSTS_RETRY_REM7 (0x7UL)

/* LPMENBESL @Bit 28 : LPM Enable BESL (LPM_EnBESL) */
  #define USBHSCORE_GLPMCFG_LPMENBESL_Pos (28UL)
  #define USBHSCORE_GLPMCFG_LPMENBESL_Msk (0x1UL << USBHSCORE_GLPMCFG_LPMENBESL_Pos)
  #define USBHSCORE_GLPMCFG_LPMENBESL_Min (0x0UL)
  #define USBHSCORE_GLPMCFG_LPMENBESL_Max (0x1UL)
  #define USBHSCORE_GLPMCFG_LPMENBESL_DISABLED (0x0UL)
  #define USBHSCORE_GLPMCFG_LPMENBESL_ENABLED (0x1UL)

/* LPMRESTORESLPSTS @Bit 29 : LPM Restore Sleep Status (LPM_RestoreSlpSts) */
  #define USBHSCORE_GLPMCFG_LPMRESTORESLPSTS_Pos (29UL)
  #define USBHSCORE_GLPMCFG_LPMRESTORESLPSTS_Msk (0x1UL << USBHSCORE_GLPMCFG_LPMRESTORESLPSTS_Pos) /*!< Bit mask of
                                                                            LPMRESTORESLPSTS field.*/
  #define USBHSCORE_GLPMCFG_LPMRESTORESLPSTS_Min (0x0UL)
  #define USBHSCORE_GLPMCFG_LPMRESTORESLPSTS_Max (0x1UL)
  #define USBHSCORE_GLPMCFG_LPMRESTORESLPSTS_DISABLED (0x0UL) /*!< Puts the core in Shallow Sleep mode based on the BESL value
                                                                   from the Host*/
  #define USBHSCORE_GLPMCFG_LPMRESTORESLPSTS_ENABLED (0x1UL) /*!< Puts the core in Deep Sleep mode based on the BESL value from
                                                                  the Host*/


/* USBHSCORE_GPWRDN: Global Power Down Register */
  #define USBHSCORE_GPWRDN_ResetValue (0x00000010UL)

/* PMUINTSEL @Bit 0 : PMU Interrupt Select (PMUIntSel) */
  #define USBHSCORE_GPWRDN_PMUINTSEL_Pos (0UL)
  #define USBHSCORE_GPWRDN_PMUINTSEL_Msk (0x1UL << USBHSCORE_GPWRDN_PMUINTSEL_Pos)
  #define USBHSCORE_GPWRDN_PMUINTSEL_Min (0x0UL)
  #define USBHSCORE_GPWRDN_PMUINTSEL_Max (0x1UL)
  #define USBHSCORE_GPWRDN_PMUINTSEL_DISABLE (0x0UL)
  #define USBHSCORE_GPWRDN_PMUINTSEL_ENABLE (0x1UL)

/* PMUACTV @Bit 1 : PMU Active (PMUActv) */
  #define USBHSCORE_GPWRDN_PMUACTV_Pos (1UL)
  #define USBHSCORE_GPWRDN_PMUACTV_Msk (0x1UL << USBHSCORE_GPWRDN_PMUACTV_Pos)
  #define USBHSCORE_GPWRDN_PMUACTV_Min (0x0UL)
  #define USBHSCORE_GPWRDN_PMUACTV_Max (0x1UL)
  #define USBHSCORE_GPWRDN_PMUACTV_DISABLE (0x0UL)
  #define USBHSCORE_GPWRDN_PMUACTV_ENABLE (0x1UL)

/* RESTORE @Bit 2 : Restore */
  #define USBHSCORE_GPWRDN_RESTORE_Pos (2UL)
  #define USBHSCORE_GPWRDN_RESTORE_Msk (0x1UL << USBHSCORE_GPWRDN_RESTORE_Pos)
  #define USBHSCORE_GPWRDN_RESTORE_Min (0x0UL)
  #define USBHSCORE_GPWRDN_RESTORE_Max (0x1UL)
  #define USBHSCORE_GPWRDN_RESTORE_DISABLE (0x0UL)
  #define USBHSCORE_GPWRDN_RESTORE_ENABLE (0x1UL)

/* PWRDNCLMP @Bit 3 : Power Down Clamp (PwrDnClmp) */
  #define USBHSCORE_GPWRDN_PWRDNCLMP_Pos (3UL)
  #define USBHSCORE_GPWRDN_PWRDNCLMP_Msk (0x1UL << USBHSCORE_GPWRDN_PWRDNCLMP_Pos)
  #define USBHSCORE_GPWRDN_PWRDNCLMP_Min (0x0UL)
  #define USBHSCORE_GPWRDN_PWRDNCLMP_Max (0x1UL)
  #define USBHSCORE_GPWRDN_PWRDNCLMP_DISABLE (0x0UL)
  #define USBHSCORE_GPWRDN_PWRDNCLMP_ENABLE (0x1UL)

/* PWRDNRSTN @Bit 4 : Power Down ResetN (PwrDnRst_n) */
  #define USBHSCORE_GPWRDN_PWRDNRSTN_Pos (4UL)
  #define USBHSCORE_GPWRDN_PWRDNRSTN_Msk (0x1UL << USBHSCORE_GPWRDN_PWRDNRSTN_Pos)
  #define USBHSCORE_GPWRDN_PWRDNRSTN_Min (0x0UL)
  #define USBHSCORE_GPWRDN_PWRDNRSTN_Max (0x1UL)
  #define USBHSCORE_GPWRDN_PWRDNRSTN_DISABLE (0x0UL)
  #define USBHSCORE_GPWRDN_PWRDNRSTN_ENABLE (0x1UL)

/* PWRDNSWTCH @Bit 5 : Power Down Switch (PwrDnSwtch) */
  #define USBHSCORE_GPWRDN_PWRDNSWTCH_Pos (5UL)
  #define USBHSCORE_GPWRDN_PWRDNSWTCH_Msk (0x1UL << USBHSCORE_GPWRDN_PWRDNSWTCH_Pos)
  #define USBHSCORE_GPWRDN_PWRDNSWTCH_Min (0x0UL)
  #define USBHSCORE_GPWRDN_PWRDNSWTCH_Max (0x1UL)
  #define USBHSCORE_GPWRDN_PWRDNSWTCH_ON (0x0UL)
  #define USBHSCORE_GPWRDN_PWRDNSWTCH_OFF (0x1UL)

/* DISABLEVBUS @Bit 6 : DisableVBUS */
  #define USBHSCORE_GPWRDN_DISABLEVBUS_Pos (6UL)
  #define USBHSCORE_GPWRDN_DISABLEVBUS_Msk (0x1UL << USBHSCORE_GPWRDN_DISABLEVBUS_Pos)
  #define USBHSCORE_GPWRDN_DISABLEVBUS_Min (0x0UL)
  #define USBHSCORE_GPWRDN_DISABLEVBUS_Max (0x1UL)
  #define USBHSCORE_GPWRDN_DISABLEVBUS_DISABLED (0x0UL) /*!< Host mode:HPRT0.PrtPwr was not programmed to 0, and in Device
                                                             mode:Session Valid*/
  #define USBHSCORE_GPWRDN_DISABLEVBUS_ENABLED (0x1UL) /*!< Host mode:HPRT0.PrtPwr was programmed to 0 and in Device
                                                            mode:Session End*/

/* LNSTSCHNG @Bit 7 : Line State Change (LnStsChng) */
  #define USBHSCORE_GPWRDN_LNSTSCHNG_Pos (7UL)
  #define USBHSCORE_GPWRDN_LNSTSCHNG_Msk (0x1UL << USBHSCORE_GPWRDN_LNSTSCHNG_Pos)
  #define USBHSCORE_GPWRDN_LNSTSCHNG_Min (0x0UL)
  #define USBHSCORE_GPWRDN_LNSTSCHNG_Max (0x1UL)
  #define USBHSCORE_GPWRDN_LNSTSCHNG_DISABLED (0x0UL)
  #define USBHSCORE_GPWRDN_LNSTSCHNG_ENABLED (0x1UL)

/* LINESTAGECHANGEMSK @Bit 8 : LineStageChangeMsk */
  #define USBHSCORE_GPWRDN_LINESTAGECHANGEMSK_Pos (8UL)
  #define USBHSCORE_GPWRDN_LINESTAGECHANGEMSK_Msk (0x1UL << USBHSCORE_GPWRDN_LINESTAGECHANGEMSK_Pos) /*!< Bit mask of
                                                                            LINESTAGECHANGEMSK field.*/
  #define USBHSCORE_GPWRDN_LINESTAGECHANGEMSK_Min (0x0UL)
  #define USBHSCORE_GPWRDN_LINESTAGECHANGEMSK_Max (0x1UL)
  #define USBHSCORE_GPWRDN_LINESTAGECHANGEMSK_NOMASK (0x0UL)
  #define USBHSCORE_GPWRDN_LINESTAGECHANGEMSK_MASK (0x1UL)

/* RESETDETECTED @Bit 9 : ResetDetected */
  #define USBHSCORE_GPWRDN_RESETDETECTED_Pos (9UL)
  #define USBHSCORE_GPWRDN_RESETDETECTED_Msk (0x1UL << USBHSCORE_GPWRDN_RESETDETECTED_Pos) /*!< Bit mask of RESETDETECTED
                                                                            field.*/
  #define USBHSCORE_GPWRDN_RESETDETECTED_Min (0x0UL)
  #define USBHSCORE_GPWRDN_RESETDETECTED_Max (0x1UL)
  #define USBHSCORE_GPWRDN_RESETDETECTED_DISABLED (0x0UL)
  #define USBHSCORE_GPWRDN_RESETDETECTED_ENABLED (0x1UL)

/* RESETDETMSK @Bit 10 : ResetDetMsk */
  #define USBHSCORE_GPWRDN_RESETDETMSK_Pos (10UL)
  #define USBHSCORE_GPWRDN_RESETDETMSK_Msk (0x1UL << USBHSCORE_GPWRDN_RESETDETMSK_Pos)
  #define USBHSCORE_GPWRDN_RESETDETMSK_Min (0x0UL)
  #define USBHSCORE_GPWRDN_RESETDETMSK_Max (0x1UL)
  #define USBHSCORE_GPWRDN_RESETDETMSK_NOMASK (0x0UL)
  #define USBHSCORE_GPWRDN_RESETDETMSK_MASK (0x1UL)

/* DISCONNECTDETECT @Bit 11 : DisconnectDetect */
  #define USBHSCORE_GPWRDN_DISCONNECTDETECT_Pos (11UL)
  #define USBHSCORE_GPWRDN_DISCONNECTDETECT_Msk (0x1UL << USBHSCORE_GPWRDN_DISCONNECTDETECT_Pos) /*!< Bit mask of
                                                                            DISCONNECTDETECT field.*/
  #define USBHSCORE_GPWRDN_DISCONNECTDETECT_Min (0x0UL)
  #define USBHSCORE_GPWRDN_DISCONNECTDETECT_Max (0x1UL)
  #define USBHSCORE_GPWRDN_DISCONNECTDETECT_DISABLED (0x0UL)
  #define USBHSCORE_GPWRDN_DISCONNECTDETECT_ENABLED (0x1UL)

/* DISCONNECTDETECTMSK @Bit 12 : DisconnectDetectMsk */
  #define USBHSCORE_GPWRDN_DISCONNECTDETECTMSK_Pos (12UL)
  #define USBHSCORE_GPWRDN_DISCONNECTDETECTMSK_Msk (0x1UL << USBHSCORE_GPWRDN_DISCONNECTDETECTMSK_Pos) /*!< Bit mask of
                                                                            DISCONNECTDETECTMSK field.*/
  #define USBHSCORE_GPWRDN_DISCONNECTDETECTMSK_Min (0x0UL)
  #define USBHSCORE_GPWRDN_DISCONNECTDETECTMSK_Max (0x1UL)
  #define USBHSCORE_GPWRDN_DISCONNECTDETECTMSK_NOMASK (0x0UL)
  #define USBHSCORE_GPWRDN_DISCONNECTDETECTMSK_MASK (0x1UL)

/* CONNECTDET @Bit 13 : ConnectDet */
  #define USBHSCORE_GPWRDN_CONNECTDET_Pos (13UL)
  #define USBHSCORE_GPWRDN_CONNECTDET_Msk (0x1UL << USBHSCORE_GPWRDN_CONNECTDET_Pos)
  #define USBHSCORE_GPWRDN_CONNECTDET_Min (0x0UL)
  #define USBHSCORE_GPWRDN_CONNECTDET_Max (0x1UL)
  #define USBHSCORE_GPWRDN_CONNECTDET_DISABLED (0x0UL)
  #define USBHSCORE_GPWRDN_CONNECTDET_ENABLED (0x1UL)

/* CONNDETMSK @Bit 14 : ConnDetMsk */
  #define USBHSCORE_GPWRDN_CONNDETMSK_Pos (14UL)
  #define USBHSCORE_GPWRDN_CONNDETMSK_Msk (0x1UL << USBHSCORE_GPWRDN_CONNDETMSK_Pos)
  #define USBHSCORE_GPWRDN_CONNDETMSK_Min (0x0UL)
  #define USBHSCORE_GPWRDN_CONNDETMSK_Max (0x1UL)
  #define USBHSCORE_GPWRDN_CONNDETMSK_NOMASK (0x0UL)
  #define USBHSCORE_GPWRDN_CONNDETMSK_MASK (0x1UL)

/* SRPDETECT @Bit 15 : SRPDetect */
  #define USBHSCORE_GPWRDN_SRPDETECT_Pos (15UL)
  #define USBHSCORE_GPWRDN_SRPDETECT_Msk (0x1UL << USBHSCORE_GPWRDN_SRPDETECT_Pos)
  #define USBHSCORE_GPWRDN_SRPDETECT_Min (0x0UL)
  #define USBHSCORE_GPWRDN_SRPDETECT_Max (0x1UL)
  #define USBHSCORE_GPWRDN_SRPDETECT_DISABLED (0x0UL)
  #define USBHSCORE_GPWRDN_SRPDETECT_ENABLED (0x1UL)

/* SRPDETECTMSK @Bit 16 : SRPDetectMsk */
  #define USBHSCORE_GPWRDN_SRPDETECTMSK_Pos (16UL)
  #define USBHSCORE_GPWRDN_SRPDETECTMSK_Msk (0x1UL << USBHSCORE_GPWRDN_SRPDETECTMSK_Pos)
  #define USBHSCORE_GPWRDN_SRPDETECTMSK_Min (0x0UL)
  #define USBHSCORE_GPWRDN_SRPDETECTMSK_Max (0x1UL)
  #define USBHSCORE_GPWRDN_SRPDETECTMSK_NOMASK (0x0UL)
  #define USBHSCORE_GPWRDN_SRPDETECTMSK_MASK (0x1UL)

/* STSCHNGINT @Bit 17 : Status Change Interrupt (StsChngInt) */
  #define USBHSCORE_GPWRDN_STSCHNGINT_Pos (17UL)
  #define USBHSCORE_GPWRDN_STSCHNGINT_Msk (0x1UL << USBHSCORE_GPWRDN_STSCHNGINT_Pos)
  #define USBHSCORE_GPWRDN_STSCHNGINT_Min (0x0UL)
  #define USBHSCORE_GPWRDN_STSCHNGINT_Max (0x1UL)
  #define USBHSCORE_GPWRDN_STSCHNGINT_DISABLED (0x0UL)
  #define USBHSCORE_GPWRDN_STSCHNGINT_ENABLED (0x1UL)

/* STSCHNGINTMSK @Bit 18 : StsChngIntMsk */
  #define USBHSCORE_GPWRDN_STSCHNGINTMSK_Pos (18UL)
  #define USBHSCORE_GPWRDN_STSCHNGINTMSK_Msk (0x1UL << USBHSCORE_GPWRDN_STSCHNGINTMSK_Pos) /*!< Bit mask of STSCHNGINTMSK
                                                                            field.*/
  #define USBHSCORE_GPWRDN_STSCHNGINTMSK_Min (0x0UL)
  #define USBHSCORE_GPWRDN_STSCHNGINTMSK_Max (0x1UL)
  #define USBHSCORE_GPWRDN_STSCHNGINTMSK_NOMASK (0x0UL)
  #define USBHSCORE_GPWRDN_STSCHNGINTMSK_MASK (0x1UL)

/* LINESTATE @Bits 19..20 : LineState */
  #define USBHSCORE_GPWRDN_LINESTATE_Pos (19UL)
  #define USBHSCORE_GPWRDN_LINESTATE_Msk (0x3UL << USBHSCORE_GPWRDN_LINESTATE_Pos)
  #define USBHSCORE_GPWRDN_LINESTATE_Min (0x0UL)
  #define USBHSCORE_GPWRDN_LINESTATE_Max (0x3UL)
  #define USBHSCORE_GPWRDN_LINESTATE_LS1 (0x0UL)
  #define USBHSCORE_GPWRDN_LINESTATE_LS2 (0x1UL)
  #define USBHSCORE_GPWRDN_LINESTATE_LS3 (0x2UL)
  #define USBHSCORE_GPWRDN_LINESTATE_LS4 (0x3UL)

/* IDDIG @Bit 21 : This bit indicates the status of the signal IDDIG. The application must read this bit after receiving
                   GPWRDN.StsChngInt and decode based on the previous value stored by the application. */

  #define USBHSCORE_GPWRDN_IDDIG_Pos (21UL)
  #define USBHSCORE_GPWRDN_IDDIG_Msk (0x1UL << USBHSCORE_GPWRDN_IDDIG_Pos)
  #define USBHSCORE_GPWRDN_IDDIG_Min (0x0UL)
  #define USBHSCORE_GPWRDN_IDDIG_Max (0x1UL)
  #define USBHSCORE_GPWRDN_IDDIG_DISABLED (0x0UL)
  #define USBHSCORE_GPWRDN_IDDIG_ENABLED (0x1UL)

/* BSESSVLD @Bit 22 : B Session Valid (BSessVld) */
  #define USBHSCORE_GPWRDN_BSESSVLD_Pos (22UL)
  #define USBHSCORE_GPWRDN_BSESSVLD_Msk (0x1UL << USBHSCORE_GPWRDN_BSESSVLD_Pos)
  #define USBHSCORE_GPWRDN_BSESSVLD_Min (0x0UL)
  #define USBHSCORE_GPWRDN_BSESSVLD_Max (0x1UL)
  #define USBHSCORE_GPWRDN_BSESSVLD_NOTVALID (0x0UL)
  #define USBHSCORE_GPWRDN_BSESSVLD_VALID (0x1UL)

/* MULTVALIDBC @Bits 24..28 : MultValIdBC */
  #define USBHSCORE_GPWRDN_MULTVALIDBC_Pos (24UL)
  #define USBHSCORE_GPWRDN_MULTVALIDBC_Msk (0x1FUL << USBHSCORE_GPWRDN_MULTVALIDBC_Pos)
  #define USBHSCORE_GPWRDN_MULTVALIDBC_Min (0x0UL)
  #define USBHSCORE_GPWRDN_MULTVALIDBC_Max (0x1FUL)
  #define USBHSCORE_GPWRDN_MULTVALIDBC_RID_0 (0x00UL)
  #define USBHSCORE_GPWRDN_MULTVALIDBC_RID_C (0x01UL)
  #define USBHSCORE_GPWRDN_MULTVALIDBC_RID_B (0x02UL)
  #define USBHSCORE_GPWRDN_MULTVALIDBC_RID_A (0x04UL)
  #define USBHSCORE_GPWRDN_MULTVALIDBC_RID_GND (0x08UL)
  #define USBHSCORE_GPWRDN_MULTVALIDBC_RID_A_RID_GND (0x0CUL)
  #define USBHSCORE_GPWRDN_MULTVALIDBC_RID_FLOAT (0x10UL)
  #define USBHSCORE_GPWRDN_MULTVALIDBC_RID_C_RID_FLOAT (0x11UL) /*!< OTG device as B-device, can connect, RID_C=1 and
                                                                     RID_FLOAT=1*/
  #define USBHSCORE_GPWRDN_MULTVALIDBC_RID_B_RID_FLOAT (0x12UL) /*!< OTG device as B-device, cannot connect, RID_B=1 and
                                                                     RID_FLOAT=1*/
  #define USBHSCORE_GPWRDN_MULTVALIDBC_RID_1 (0x1FUL)


/* USBHSCORE_GDFIFOCFG: Global DFIFO Configuration Register */
  #define USBHSCORE_GDFIFOCFG_ResetValue (0x0BEA0C00UL)

/* GDFIFOCFG @Bits 0..15 : GDFIFOCfg */
  #define USBHSCORE_GDFIFOCFG_GDFIFOCFG_Pos (0UL)
  #define USBHSCORE_GDFIFOCFG_GDFIFOCFG_Msk (0xFFFFUL << USBHSCORE_GDFIFOCFG_GDFIFOCFG_Pos)

/* EPINFOBASEADDR @Bits 16..31 : This field provides the start address of the EP info controller. */
  #define USBHSCORE_GDFIFOCFG_EPINFOBASEADDR_Pos (16UL)
  #define USBHSCORE_GDFIFOCFG_EPINFOBASEADDR_Msk (0xFFFFUL << USBHSCORE_GDFIFOCFG_EPINFOBASEADDR_Pos) /*!< Bit mask of
                                                                            EPINFOBASEADDR field.*/


/* USBHSCORE_GINTMSK2: Interrupt Mask Register 2 */
  #define USBHSCORE_GINTMSK2_ResetValue (0x00000000UL)

/* GINTMSK2 @Bits 0..31 : (unspecified) */
  #define USBHSCORE_GINTMSK2_GINTMSK2_Pos (0UL)
  #define USBHSCORE_GINTMSK2_GINTMSK2_Msk (0xFFFFFFFFUL << USBHSCORE_GINTMSK2_GINTMSK2_Pos)


/* USBHSCORE_GINTSTS2: Interrupt Register 2 */
  #define USBHSCORE_GINTSTS2_ResetValue (0x00000000UL)

/* GINTSTS2 @Bits 0..31 : (unspecified) */
  #define USBHSCORE_GINTSTS2_GINTSTS2_Pos (0UL)
  #define USBHSCORE_GINTSTS2_GINTSTS2_Msk (0xFFFFFFFFUL << USBHSCORE_GINTSTS2_GINTSTS2_Pos)


/* USBHSCORE_HPTXFSIZ: Host Periodic Transmit FIFO Size Register */
  #define USBHSCORE_HPTXFSIZ_ResetValue (0x04000424UL)

/* PTXFSTADDR @Bits 0..10 : Host Periodic TxFIFO Start Address (PTxFStAddr) */
  #define USBHSCORE_HPTXFSIZ_PTXFSTADDR_Pos (0UL)
  #define USBHSCORE_HPTXFSIZ_PTXFSTADDR_Msk (0x7FFUL << USBHSCORE_HPTXFSIZ_PTXFSTADDR_Pos)

/* PTXFSIZE @Bits 16..26 : Host Periodic TxFIFO Depth (PTxFSize) */
  #define USBHSCORE_HPTXFSIZ_PTXFSIZE_Pos (16UL)
  #define USBHSCORE_HPTXFSIZ_PTXFSIZE_Msk (0x7FFUL << USBHSCORE_HPTXFSIZ_PTXFSIZE_Pos)


/* USBHSCORE_DIEPTXF: Device IN Endpoint Transmit FIFO Size Register */
  #define USBHSCORE_DIEPTXF_MaxCount (7UL)
  #define USBHSCORE_DIEPTXF_MaxIndex (7UL)
  #define USBHSCORE_DIEPTXF_MinIndex (1UL)
  #define USBHSCORE_DIEPTXF_ResetValue (0x02000424UL)

/* INEPNTXFSTADDR @Bits 0..10 : IN Endpoint FIFOn Transmit RAM Start Address (INEPnTxFStAddr) */
  #define USBHSCORE_DIEPTXF_INEPNTXFSTADDR_Pos (0UL)
  #define USBHSCORE_DIEPTXF_INEPNTXFSTADDR_Msk (0x7FFUL << USBHSCORE_DIEPTXF_INEPNTXFSTADDR_Pos) /*!< Bit mask of INEPNTXFSTADDR
                                                                            field.*/

/* INEPNTXFDEP @Bits 16..25 : IN Endpoint TxFIFO Depth (INEPnTxFDep) */
  #define USBHSCORE_DIEPTXF_INEPNTXFDEP_Pos (16UL)
  #define USBHSCORE_DIEPTXF_INEPNTXFDEP_Msk (0x3FFUL << USBHSCORE_DIEPTXF_INEPNTXFDEP_Pos)


/* USBHSCORE_HCFG: Host Configuration Register */
  #define USBHSCORE_HCFG_ResetValue (0x00000200UL)

/* FSLSPCLKSEL @Bits 0..1 : FS/LS PHY Clock Select (FSLSPclkSel) */
  #define USBHSCORE_HCFG_FSLSPCLKSEL_Pos (0UL)
  #define USBHSCORE_HCFG_FSLSPCLKSEL_Msk (0x3UL << USBHSCORE_HCFG_FSLSPCLKSEL_Pos)
  #define USBHSCORE_HCFG_FSLSPCLKSEL_Min (0x0UL)
  #define USBHSCORE_HCFG_FSLSPCLKSEL_Max (0x2UL)
  #define USBHSCORE_HCFG_FSLSPCLKSEL_CLK3060 (0x0UL)
  #define USBHSCORE_HCFG_FSLSPCLKSEL_CLK48 (0x1UL)
  #define USBHSCORE_HCFG_FSLSPCLKSEL_CLK6 (0x2UL)

/* FSLSSUPP @Bit 2 : FS- and LS-Only Support (FSLSSupp) */
  #define USBHSCORE_HCFG_FSLSSUPP_Pos (2UL)
  #define USBHSCORE_HCFG_FSLSSUPP_Msk (0x1UL << USBHSCORE_HCFG_FSLSSUPP_Pos)
  #define USBHSCORE_HCFG_FSLSSUPP_Min (0x0UL)
  #define USBHSCORE_HCFG_FSLSSUPP_Max (0x1UL)
  #define USBHSCORE_HCFG_FSLSSUPP_HSFSLS (0x0UL)     /*!< HS/FS/LS, based on the maximum speed supported by the connected
                                                          device*/
  #define USBHSCORE_HCFG_FSLSSUPP_FSLS (0x1UL)

/* ENA32KHZS @Bit 7 : Enable 32 KHz Suspend mode (Ena32KHzS) */
  #define USBHSCORE_HCFG_ENA32KHZS_Pos (7UL)
  #define USBHSCORE_HCFG_ENA32KHZS_Msk (0x1UL << USBHSCORE_HCFG_ENA32KHZS_Pos)
  #define USBHSCORE_HCFG_ENA32KHZS_Min (0x0UL)
  #define USBHSCORE_HCFG_ENA32KHZS_Max (0x1UL)
  #define USBHSCORE_HCFG_ENA32KHZS_DISABLED (0x0UL)
  #define USBHSCORE_HCFG_ENA32KHZS_ENABLED (0x1UL)

/* RESVALID @Bits 8..15 : Resume Validation Period (ResValid) */
  #define USBHSCORE_HCFG_RESVALID_Pos (8UL)
  #define USBHSCORE_HCFG_RESVALID_Msk (0xFFUL << USBHSCORE_HCFG_RESVALID_Pos)

/* MODECHTIMEN @Bit 31 : Mode Change Ready Timer Enable (ModeChTimEn) */
  #define USBHSCORE_HCFG_MODECHTIMEN_Pos (31UL)
  #define USBHSCORE_HCFG_MODECHTIMEN_Msk (0x1UL << USBHSCORE_HCFG_MODECHTIMEN_Pos)
  #define USBHSCORE_HCFG_MODECHTIMEN_Min (0x0UL)
  #define USBHSCORE_HCFG_MODECHTIMEN_Max (0x1UL)
  #define USBHSCORE_HCFG_MODECHTIMEN_ENABLED (0x0UL) /*!< The Host core waits for either 200 PHY clock cycles or a linestate of
                                                          SE0 at the end of resume to change the opmode from 0x2 to 0x0*/
  #define USBHSCORE_HCFG_MODECHTIMEN_DISABLED (0x1UL) /*!< The Host core waits only for a linestate of SE0 at the end of resume
                                                           to change the opmode from 0x2 to 0x0*/


/* USBHSCORE_HFIR: Host Frame Interval Register */
  #define USBHSCORE_HFIR_ResetValue (0x0000EA60UL)

/* FRINT @Bits 0..15 : Frame Interval (FrInt) */
  #define USBHSCORE_HFIR_FRINT_Pos (0UL)
  #define USBHSCORE_HFIR_FRINT_Msk (0xFFFFUL << USBHSCORE_HFIR_FRINT_Pos)

/* HFIRRLDCTRL @Bit 16 : Reload Control (HFIRRldCtrl) */
  #define USBHSCORE_HFIR_HFIRRLDCTRL_Pos (16UL)
  #define USBHSCORE_HFIR_HFIRRLDCTRL_Msk (0x1UL << USBHSCORE_HFIR_HFIRRLDCTRL_Pos)
  #define USBHSCORE_HFIR_HFIRRLDCTRL_Min (0x0UL)
  #define USBHSCORE_HFIR_HFIRRLDCTRL_Max (0x1UL)
  #define USBHSCORE_HFIR_HFIRRLDCTRL_DISABLED (0x0UL)
  #define USBHSCORE_HFIR_HFIRRLDCTRL_ENABLED (0x1UL)


/* USBHSCORE_HFNUM: Host Frame Number/Frame Time Remaining Register */
  #define USBHSCORE_HFNUM_ResetValue (0x00003FFFUL)

/* FRNUM @Bits 0..15 : Frame Number (FrNum) */
  #define USBHSCORE_HFNUM_FRNUM_Pos (0UL)
  #define USBHSCORE_HFNUM_FRNUM_Msk (0xFFFFUL << USBHSCORE_HFNUM_FRNUM_Pos)
  #define USBHSCORE_HFNUM_FRNUM_Min (0x0UL)
  #define USBHSCORE_HFNUM_FRNUM_Max (0x1UL)
  #define USBHSCORE_HFNUM_FRNUM_INACTIVE (0x0000UL)
  #define USBHSCORE_HFNUM_FRNUM_ACTIVE (0x0001UL)

/* FRREM @Bits 16..31 : Frame Time Remaining (FrRem) */
  #define USBHSCORE_HFNUM_FRREM_Pos (16UL)
  #define USBHSCORE_HFNUM_FRREM_Msk (0xFFFFUL << USBHSCORE_HFNUM_FRREM_Pos)


/* USBHSCORE_HAINT: Host All Channels Interrupt Register */
  #define USBHSCORE_HAINT_ResetValue (0x00000000UL)

/* HAINT @Bits 0..15 : (unspecified) */
  #define USBHSCORE_HAINT_HAINT_Pos (0UL)
  #define USBHSCORE_HAINT_HAINT_Msk (0xFFFFUL << USBHSCORE_HAINT_HAINT_Pos)
  #define USBHSCORE_HAINT_HAINT_Min (0x0UL)
  #define USBHSCORE_HAINT_HAINT_Max (0x1UL)
  #define USBHSCORE_HAINT_HAINT_INACTIVE (0x0000UL)
  #define USBHSCORE_HAINT_HAINT_ACTIVE (0x0001UL)


/* USBHSCORE_HAINTMSK: Host All Channels Interrupt Mask Register */
  #define USBHSCORE_HAINTMSK_ResetValue (0x00000000UL)

/* HAINTMSK @Bits 0..15 : Channel Interrupt Mask (HAINTMsk) */
  #define USBHSCORE_HAINTMSK_HAINTMSK_Pos (0UL)
  #define USBHSCORE_HAINTMSK_HAINTMSK_Msk (0xFFFFUL << USBHSCORE_HAINTMSK_HAINTMSK_Pos)
  #define USBHSCORE_HAINTMSK_HAINTMSK_Min (0x0UL)
  #define USBHSCORE_HAINTMSK_HAINTMSK_Max (0x1UL)
  #define USBHSCORE_HAINTMSK_HAINTMSK_UNMASK (0x0000UL)
  #define USBHSCORE_HAINTMSK_HAINTMSK_MASK (0x0001UL)


/* USBHSCORE_HPRT: Host Port Control and Status Register */
  #define USBHSCORE_HPRT_ResetValue (0x00000000UL)

/* PRTCONNSTS @Bit 0 : Port Connect Status (PrtConnSts) */
  #define USBHSCORE_HPRT_PRTCONNSTS_Pos (0UL)
  #define USBHSCORE_HPRT_PRTCONNSTS_Msk (0x1UL << USBHSCORE_HPRT_PRTCONNSTS_Pos)
  #define USBHSCORE_HPRT_PRTCONNSTS_Min (0x0UL)
  #define USBHSCORE_HPRT_PRTCONNSTS_Max (0x1UL)
  #define USBHSCORE_HPRT_PRTCONNSTS_NOTATTACHED (0x0UL)
  #define USBHSCORE_HPRT_PRTCONNSTS_ATTACHED (0x1UL)

/* PRTCONNDET @Bit 1 : Port Connect Detected (PrtConnDet) */
  #define USBHSCORE_HPRT_PRTCONNDET_Pos (1UL)
  #define USBHSCORE_HPRT_PRTCONNDET_Msk (0x1UL << USBHSCORE_HPRT_PRTCONNDET_Pos)
  #define USBHSCORE_HPRT_PRTCONNDET_Min (0x0UL)
  #define USBHSCORE_HPRT_PRTCONNDET_Max (0x1UL)
  #define USBHSCORE_HPRT_PRTCONNDET_INACTIVE (0x0UL)
  #define USBHSCORE_HPRT_PRTCONNDET_ACTIVE (0x1UL)

/* PRTENA @Bit 2 : Port Enable (PrtEna) */
  #define USBHSCORE_HPRT_PRTENA_Pos (2UL)
  #define USBHSCORE_HPRT_PRTENA_Msk (0x1UL << USBHSCORE_HPRT_PRTENA_Pos)
  #define USBHSCORE_HPRT_PRTENA_Min (0x0UL)
  #define USBHSCORE_HPRT_PRTENA_Max (0x1UL)
  #define USBHSCORE_HPRT_PRTENA_DISABLED (0x0UL)
  #define USBHSCORE_HPRT_PRTENA_ENABLED (0x1UL)

/* PRTENCHNG @Bit 3 : Port Enable/Disable Change (PrtEnChng) */
  #define USBHSCORE_HPRT_PRTENCHNG_Pos (3UL)
  #define USBHSCORE_HPRT_PRTENCHNG_Msk (0x1UL << USBHSCORE_HPRT_PRTENCHNG_Pos)
  #define USBHSCORE_HPRT_PRTENCHNG_Min (0x0UL)
  #define USBHSCORE_HPRT_PRTENCHNG_Max (0x1UL)
  #define USBHSCORE_HPRT_PRTENCHNG_INACTIVE (0x0UL)
  #define USBHSCORE_HPRT_PRTENCHNG_ACTIVE (0x1UL)

/* PRTOVRCURRACT @Bit 4 : Port Overcurrent Active (PrtOvrCurrAct) */
  #define USBHSCORE_HPRT_PRTOVRCURRACT_Pos (4UL)
  #define USBHSCORE_HPRT_PRTOVRCURRACT_Msk (0x1UL << USBHSCORE_HPRT_PRTOVRCURRACT_Pos)
  #define USBHSCORE_HPRT_PRTOVRCURRACT_Min (0x0UL)
  #define USBHSCORE_HPRT_PRTOVRCURRACT_Max (0x1UL)
  #define USBHSCORE_HPRT_PRTOVRCURRACT_INACTIVE (0x0UL)
  #define USBHSCORE_HPRT_PRTOVRCURRACT_ACTIVE (0x1UL)

/* PRTOVRCURRCHNG @Bit 5 : Port Overcurrent Change (PrtOvrCurrChng) */
  #define USBHSCORE_HPRT_PRTOVRCURRCHNG_Pos (5UL)
  #define USBHSCORE_HPRT_PRTOVRCURRCHNG_Msk (0x1UL << USBHSCORE_HPRT_PRTOVRCURRCHNG_Pos)
  #define USBHSCORE_HPRT_PRTOVRCURRCHNG_Min (0x0UL)
  #define USBHSCORE_HPRT_PRTOVRCURRCHNG_Max (0x1UL)
  #define USBHSCORE_HPRT_PRTOVRCURRCHNG_INACTIVE (0x0UL)
  #define USBHSCORE_HPRT_PRTOVRCURRCHNG_ACTIVE (0x1UL)

/* PRTRES @Bit 6 : Port Resume (PrtRes) */
  #define USBHSCORE_HPRT_PRTRES_Pos (6UL)
  #define USBHSCORE_HPRT_PRTRES_Msk (0x1UL << USBHSCORE_HPRT_PRTRES_Pos)
  #define USBHSCORE_HPRT_PRTRES_Min (0x0UL)
  #define USBHSCORE_HPRT_PRTRES_Max (0x1UL)
  #define USBHSCORE_HPRT_PRTRES_NORESUME (0x0UL)
  #define USBHSCORE_HPRT_PRTRES_RESUME (0x1UL)

/* PRTSUSP @Bit 7 : Port Suspend (PrtSusp) */
  #define USBHSCORE_HPRT_PRTSUSP_Pos (7UL)
  #define USBHSCORE_HPRT_PRTSUSP_Msk (0x1UL << USBHSCORE_HPRT_PRTSUSP_Pos)
  #define USBHSCORE_HPRT_PRTSUSP_Min (0x0UL)
  #define USBHSCORE_HPRT_PRTSUSP_Max (0x1UL)
  #define USBHSCORE_HPRT_PRTSUSP_INACTIVE (0x0UL)
  #define USBHSCORE_HPRT_PRTSUSP_ACTIVE (0x1UL)

/* PRTRST @Bit 8 : Port Reset (PrtRst) */
  #define USBHSCORE_HPRT_PRTRST_Pos (8UL)
  #define USBHSCORE_HPRT_PRTRST_Msk (0x1UL << USBHSCORE_HPRT_PRTRST_Pos)
  #define USBHSCORE_HPRT_PRTRST_Min (0x0UL)
  #define USBHSCORE_HPRT_PRTRST_Max (0x1UL)
  #define USBHSCORE_HPRT_PRTRST_DISABLED (0x0UL)
  #define USBHSCORE_HPRT_PRTRST_ENABLED (0x1UL)

/* PRTLNSTS @Bits 10..11 : Port Line Status (PrtLnSts) */
  #define USBHSCORE_HPRT_PRTLNSTS_Pos (10UL)
  #define USBHSCORE_HPRT_PRTLNSTS_Msk (0x3UL << USBHSCORE_HPRT_PRTLNSTS_Pos)
  #define USBHSCORE_HPRT_PRTLNSTS_Min (0x1UL)
  #define USBHSCORE_HPRT_PRTLNSTS_Max (0x2UL)
  #define USBHSCORE_HPRT_PRTLNSTS_PLUSD (0x1UL)
  #define USBHSCORE_HPRT_PRTLNSTS_MINUSD (0x2UL)

/* PRTPWR @Bit 12 : Port Power (PrtPwr) */
  #define USBHSCORE_HPRT_PRTPWR_Pos (12UL)
  #define USBHSCORE_HPRT_PRTPWR_Msk (0x1UL << USBHSCORE_HPRT_PRTPWR_Pos)
  #define USBHSCORE_HPRT_PRTPWR_Min (0x0UL)
  #define USBHSCORE_HPRT_PRTPWR_Max (0x1UL)
  #define USBHSCORE_HPRT_PRTPWR_OFF (0x0UL)
  #define USBHSCORE_HPRT_PRTPWR_ON (0x1UL)

/* PRTTSTCTL @Bits 13..16 : Port Test Control (PrtTstCtl) */
  #define USBHSCORE_HPRT_PRTTSTCTL_Pos (13UL)
  #define USBHSCORE_HPRT_PRTTSTCTL_Msk (0xFUL << USBHSCORE_HPRT_PRTTSTCTL_Pos)
  #define USBHSCORE_HPRT_PRTTSTCTL_Min (0x0UL)
  #define USBHSCORE_HPRT_PRTTSTCTL_Max (0x5UL)
  #define USBHSCORE_HPRT_PRTTSTCTL_DISABLED (0x0UL)
  #define USBHSCORE_HPRT_PRTTSTCTL_TESTJ (0x1UL)
  #define USBHSCORE_HPRT_PRTTSTCTL_TESTK (0x2UL)
  #define USBHSCORE_HPRT_PRTTSTCTL_TESTSN (0x3UL)
  #define USBHSCORE_HPRT_PRTTSTCTL_TESTPM (0x4UL)
  #define USBHSCORE_HPRT_PRTTSTCTL_TESTFENB (0x5UL)

/* PRTSPD @Bits 17..18 : Port Speed (PrtSpd) */
  #define USBHSCORE_HPRT_PRTSPD_Pos (17UL)
  #define USBHSCORE_HPRT_PRTSPD_Msk (0x3UL << USBHSCORE_HPRT_PRTSPD_Pos)
  #define USBHSCORE_HPRT_PRTSPD_Min (0x0UL)
  #define USBHSCORE_HPRT_PRTSPD_Max (0x2UL)
  #define USBHSCORE_HPRT_PRTSPD_HIGHSPD (0x0UL)
  #define USBHSCORE_HPRT_PRTSPD_FULLSPD (0x1UL)
  #define USBHSCORE_HPRT_PRTSPD_LOWSPD (0x2UL)


/* USBHSCORE_DCFG: Device Configuration Register */
  #define USBHSCORE_DCFG_ResetValue (0x08020000UL)

/* DEVSPD @Bits 0..1 : Device Speed (DevSpd) */
  #define USBHSCORE_DCFG_DEVSPD_Pos (0UL)
  #define USBHSCORE_DCFG_DEVSPD_Msk (0x3UL << USBHSCORE_DCFG_DEVSPD_Pos)
  #define USBHSCORE_DCFG_DEVSPD_Min (0x0UL)
  #define USBHSCORE_DCFG_DEVSPD_Max (0x3UL)
  #define USBHSCORE_DCFG_DEVSPD_USBHS20 (0x0UL)
  #define USBHSCORE_DCFG_DEVSPD_USBFS20 (0x1UL)
  #define USBHSCORE_DCFG_DEVSPD_USBLS116 (0x2UL)
  #define USBHSCORE_DCFG_DEVSPD_USBFS1148 (0x3UL)

/* NZSTSOUTHSHK @Bit 2 : Non-Zero-Length Status OUT Handshake (NZStsOUTHShk) */
  #define USBHSCORE_DCFG_NZSTSOUTHSHK_Pos (2UL)
  #define USBHSCORE_DCFG_NZSTSOUTHSHK_Msk (0x1UL << USBHSCORE_DCFG_NZSTSOUTHSHK_Pos)
  #define USBHSCORE_DCFG_NZSTSOUTHSHK_Min (0x0UL)
  #define USBHSCORE_DCFG_NZSTSOUTHSHK_Max (0x1UL)
  #define USBHSCORE_DCFG_NZSTSOUTHSHK_SENDOUT (0x0UL) /*!< Send the received OUT packet to the application (zero-length or
                                                           non-zero length) and send a handshake based on NAK and STALL bits for
                                                           the endpoint in the Devce Endpoint Control Register*/
  #define USBHSCORE_DCFG_NZSTSOUTHSHK_SENDSTALL (0x1UL) /*!< Send a STALL handshake on a nonzero-length status OUT transaction
                                                             and do not send the received OUT packet to the application*/

/* ENA32KHZSUSP @Bit 3 : Enable 32 KHz Suspend mode (Ena32KHzSusp) */
  #define USBHSCORE_DCFG_ENA32KHZSUSP_Pos (3UL)
  #define USBHSCORE_DCFG_ENA32KHZSUSP_Msk (0x1UL << USBHSCORE_DCFG_ENA32KHZSUSP_Pos)
  #define USBHSCORE_DCFG_ENA32KHZSUSP_Min (0x0UL)
  #define USBHSCORE_DCFG_ENA32KHZSUSP_Max (0x1UL)
  #define USBHSCORE_DCFG_ENA32KHZSUSP_DISABLED (0x0UL)
  #define USBHSCORE_DCFG_ENA32KHZSUSP_ENABLED (0x1UL)

/* DEVADDR @Bits 4..10 : Device Address (DevAddr) */
  #define USBHSCORE_DCFG_DEVADDR_Pos (4UL)
  #define USBHSCORE_DCFG_DEVADDR_Msk (0x7FUL << USBHSCORE_DCFG_DEVADDR_Pos)

/* PERFRINT @Bits 11..12 : Periodic Frame Interval (PerFrInt) */
  #define USBHSCORE_DCFG_PERFRINT_Pos (11UL)
  #define USBHSCORE_DCFG_PERFRINT_Msk (0x3UL << USBHSCORE_DCFG_PERFRINT_Pos)
  #define USBHSCORE_DCFG_PERFRINT_Min (0x0UL)
  #define USBHSCORE_DCFG_PERFRINT_Max (0x3UL)
  #define USBHSCORE_DCFG_PERFRINT_EOPF80 (0x0UL)
  #define USBHSCORE_DCFG_PERFRINT_EOPF85 (0x1UL)
  #define USBHSCORE_DCFG_PERFRINT_EOPF90 (0x2UL)
  #define USBHSCORE_DCFG_PERFRINT_EOPF95 (0x3UL)

/* XCVRDLY @Bit 14 : XCVRDLY */
  #define USBHSCORE_DCFG_XCVRDLY_Pos (14UL)
  #define USBHSCORE_DCFG_XCVRDLY_Msk (0x1UL << USBHSCORE_DCFG_XCVRDLY_Pos)
  #define USBHSCORE_DCFG_XCVRDLY_Min (0x0UL)
  #define USBHSCORE_DCFG_XCVRDLY_Max (0x1UL)
  #define USBHSCORE_DCFG_XCVRDLY_DISABLE (0x0UL)
  #define USBHSCORE_DCFG_XCVRDLY_ENABLE (0x1UL)

/* ERRATICINTMSK @Bit 15 : Erratic Error Interrupt Mask */
  #define USBHSCORE_DCFG_ERRATICINTMSK_Pos (15UL)
  #define USBHSCORE_DCFG_ERRATICINTMSK_Msk (0x1UL << USBHSCORE_DCFG_ERRATICINTMSK_Pos)
  #define USBHSCORE_DCFG_ERRATICINTMSK_Min (0x0UL)
  #define USBHSCORE_DCFG_ERRATICINTMSK_Max (0x1UL)
  #define USBHSCORE_DCFG_ERRATICINTMSK_NOMASK (0x0UL)
  #define USBHSCORE_DCFG_ERRATICINTMSK_MASK (0x1UL)

/* IPGISOCSUPT @Bit 17 : Worst-Case Inter-Packet Gap ISOC OUT Support (ipgisocSupt) */
  #define USBHSCORE_DCFG_IPGISOCSUPT_Pos (17UL)
  #define USBHSCORE_DCFG_IPGISOCSUPT_Msk (0x1UL << USBHSCORE_DCFG_IPGISOCSUPT_Pos)
  #define USBHSCORE_DCFG_IPGISOCSUPT_Min (0x0UL)
  #define USBHSCORE_DCFG_IPGISOCSUPT_Max (0x1UL)
  #define USBHSCORE_DCFG_IPGISOCSUPT_DISABLED (0x0UL)
  #define USBHSCORE_DCFG_IPGISOCSUPT_ENABLED (0x1UL)

/* PERSCHINTVL @Bits 24..25 : Periodic Scheduling Interval (PerSchIntvl) */
  #define USBHSCORE_DCFG_PERSCHINTVL_Pos (24UL)
  #define USBHSCORE_DCFG_PERSCHINTVL_Msk (0x3UL << USBHSCORE_DCFG_PERSCHINTVL_Pos)
  #define USBHSCORE_DCFG_PERSCHINTVL_Min (0x0UL)
  #define USBHSCORE_DCFG_PERSCHINTVL_Max (0x2UL)
  #define USBHSCORE_DCFG_PERSCHINTVL_MF25 (0x0UL)
  #define USBHSCORE_DCFG_PERSCHINTVL_MF50 (0x1UL)
  #define USBHSCORE_DCFG_PERSCHINTVL_MF75 (0x2UL)

/* RESVALID @Bits 26..31 : Resume Validation Period (ResValid) */
  #define USBHSCORE_DCFG_RESVALID_Pos (26UL)
  #define USBHSCORE_DCFG_RESVALID_Msk (0x3FUL << USBHSCORE_DCFG_RESVALID_Pos)


/* USBHSCORE_DCTL: Device Control Register */
  #define USBHSCORE_DCTL_ResetValue (0x00000002UL)

/* RMTWKUPSIG @Bit 0 : Remote Wakeup Signaling (RmtWkUpSig) */
  #define USBHSCORE_DCTL_RMTWKUPSIG_Pos (0UL)
  #define USBHSCORE_DCTL_RMTWKUPSIG_Msk (0x1UL << USBHSCORE_DCTL_RMTWKUPSIG_Pos)
  #define USBHSCORE_DCTL_RMTWKUPSIG_Min (0x0UL)
  #define USBHSCORE_DCTL_RMTWKUPSIG_Max (0x1UL)
  #define USBHSCORE_DCTL_RMTWKUPSIG_DISABLEDRMWKUP (0x0UL)
  #define USBHSCORE_DCTL_RMTWKUPSIG_ENABLERMWKUP (0x1UL)

/* SFTDISCON @Bit 1 : Soft Disconnect (SftDiscon) */
  #define USBHSCORE_DCTL_SFTDISCON_Pos (1UL)
  #define USBHSCORE_DCTL_SFTDISCON_Msk (0x1UL << USBHSCORE_DCTL_SFTDISCON_Pos)
  #define USBHSCORE_DCTL_SFTDISCON_Min (0x0UL)
  #define USBHSCORE_DCTL_SFTDISCON_Max (0x1UL)
  #define USBHSCORE_DCTL_SFTDISCON_NODISCONNECT (0x0UL) /*!< The core drives the phy_opmode_o signal on the UTMI+ to 2'b00,
                                                             which generates a device connect event to the USB host*/
  #define USBHSCORE_DCTL_SFTDISCON_DISCONNECT (0x1UL) /*!< The core drives the phy_opmode_o signal on the UTMI+ to 2'b01, which
                                                           generates a device disconnect event to the USB host*/

/* GNPINNAKSTS @Bit 2 : Global Non-periodic IN NAK Status (GNPINNakSts) */
  #define USBHSCORE_DCTL_GNPINNAKSTS_Pos (2UL)
  #define USBHSCORE_DCTL_GNPINNAKSTS_Msk (0x1UL << USBHSCORE_DCTL_GNPINNAKSTS_Pos)
  #define USBHSCORE_DCTL_GNPINNAKSTS_Min (0x0UL)
  #define USBHSCORE_DCTL_GNPINNAKSTS_Max (0x1UL)
  #define USBHSCORE_DCTL_GNPINNAKSTS_INACTIVE (0x0UL) /*!< A handshake is sent out based on the data availability in the
                                                           transmit FIFO*/
  #define USBHSCORE_DCTL_GNPINNAKSTS_ACTIVE (0x1UL)  /*!< A NAK handshake is sent out on all non-periodic IN endpoints,
                                                          irrespective of the data availability in the transmit FIFO.*/

/* GOUTNAKSTS @Bit 3 : Global OUT NAK Status (GOUTNakSts) */
  #define USBHSCORE_DCTL_GOUTNAKSTS_Pos (3UL)
  #define USBHSCORE_DCTL_GOUTNAKSTS_Msk (0x1UL << USBHSCORE_DCTL_GOUTNAKSTS_Pos)
  #define USBHSCORE_DCTL_GOUTNAKSTS_Min (0x0UL)
  #define USBHSCORE_DCTL_GOUTNAKSTS_Max (0x1UL)
  #define USBHSCORE_DCTL_GOUTNAKSTS_INACTIVE (0x0UL) /*!< A handshake is sent based on the FIFO Status and the NAK and STALL bit
                                                          settings.*/
  #define USBHSCORE_DCTL_GOUTNAKSTS_ACTIVE (0x1UL)   /*!< No data is written to the RxFIFO, irrespective of space availability.
                                                          Sends a NAK handshake on all packets, except on SETUP transactions.
                                                          All isochronous OUT packets are dropped.*/

/* TSTCTL @Bits 4..6 : Test Control (TstCtl) */
  #define USBHSCORE_DCTL_TSTCTL_Pos (4UL)
  #define USBHSCORE_DCTL_TSTCTL_Msk (0x7UL << USBHSCORE_DCTL_TSTCTL_Pos)
  #define USBHSCORE_DCTL_TSTCTL_Min (0x0UL)
  #define USBHSCORE_DCTL_TSTCTL_Max (0x5UL)
  #define USBHSCORE_DCTL_TSTCTL_DISABLED (0x0UL)
  #define USBHSCORE_DCTL_TSTCTL_TESTJ (0x1UL)
  #define USBHSCORE_DCTL_TSTCTL_TESTK (0x2UL)
  #define USBHSCORE_DCTL_TSTCTL_TESTSN (0x3UL)
  #define USBHSCORE_DCTL_TSTCTL_TESTPM (0x4UL)
  #define USBHSCORE_DCTL_TSTCTL_TESTFE (0x5UL)

/* SGNPINNAK @Bit 7 : Set Global Non-periodic IN NAK (SGNPInNak) */
  #define USBHSCORE_DCTL_SGNPINNAK_Pos (7UL)
  #define USBHSCORE_DCTL_SGNPINNAK_Msk (0x1UL << USBHSCORE_DCTL_SGNPINNAK_Pos)
  #define USBHSCORE_DCTL_SGNPINNAK_Min (0x0UL)
  #define USBHSCORE_DCTL_SGNPINNAK_Max (0x1UL)
  #define USBHSCORE_DCTL_SGNPINNAK_DISABLE (0x0UL)
  #define USBHSCORE_DCTL_SGNPINNAK_ENABLE (0x1UL)

/* CGNPINNAK @Bit 8 : Clear Global Non-periodic IN NAK (CGNPInNak) */
  #define USBHSCORE_DCTL_CGNPINNAK_Pos (8UL)
  #define USBHSCORE_DCTL_CGNPINNAK_Msk (0x1UL << USBHSCORE_DCTL_CGNPINNAK_Pos)
  #define USBHSCORE_DCTL_CGNPINNAK_Min (0x0UL)
  #define USBHSCORE_DCTL_CGNPINNAK_Max (0x1UL)
  #define USBHSCORE_DCTL_CGNPINNAK_DISABLE (0x0UL)
  #define USBHSCORE_DCTL_CGNPINNAK_ENABLE (0x1UL)

/* SGOUTNAK @Bit 9 : Set Global OUT NAK (SGOUTNak) */
  #define USBHSCORE_DCTL_SGOUTNAK_Pos (9UL)
  #define USBHSCORE_DCTL_SGOUTNAK_Msk (0x1UL << USBHSCORE_DCTL_SGOUTNAK_Pos)
  #define USBHSCORE_DCTL_SGOUTNAK_Min (0x0UL)
  #define USBHSCORE_DCTL_SGOUTNAK_Max (0x1UL)
  #define USBHSCORE_DCTL_SGOUTNAK_DISABLED (0x0UL)
  #define USBHSCORE_DCTL_SGOUTNAK_ENABLED (0x1UL)

/* CGOUTNAK @Bit 10 : Clear Global OUT NAK (CGOUTNak) */
  #define USBHSCORE_DCTL_CGOUTNAK_Pos (10UL)
  #define USBHSCORE_DCTL_CGOUTNAK_Msk (0x1UL << USBHSCORE_DCTL_CGOUTNAK_Pos)
  #define USBHSCORE_DCTL_CGOUTNAK_Min (0x0UL)
  #define USBHSCORE_DCTL_CGOUTNAK_Max (0x1UL)
  #define USBHSCORE_DCTL_CGOUTNAK_DISABLED (0x0UL)
  #define USBHSCORE_DCTL_CGOUTNAK_ENABLED (0x1UL)

/* PWRONPRGDONE @Bit 11 : Power-On Programming Done (PWROnPrgDone) */
  #define USBHSCORE_DCTL_PWRONPRGDONE_Pos (11UL)
  #define USBHSCORE_DCTL_PWRONPRGDONE_Msk (0x1UL << USBHSCORE_DCTL_PWRONPRGDONE_Pos)
  #define USBHSCORE_DCTL_PWRONPRGDONE_Min (0x0UL)
  #define USBHSCORE_DCTL_PWRONPRGDONE_Max (0x1UL)
  #define USBHSCORE_DCTL_PWRONPRGDONE_NOTDONE (0x0UL)
  #define USBHSCORE_DCTL_PWRONPRGDONE_DONE (0x1UL)

/* IGNRFRMNUM @Bit 15 : Ignore Frame Number Feature for Isochronous Endpoints (IgnrFrmNum) */
  #define USBHSCORE_DCTL_IGNRFRMNUM_Pos (15UL)
  #define USBHSCORE_DCTL_IGNRFRMNUM_Msk (0x1UL << USBHSCORE_DCTL_IGNRFRMNUM_Pos)
  #define USBHSCORE_DCTL_IGNRFRMNUM_Min (0x0UL)
  #define USBHSCORE_DCTL_IGNRFRMNUM_Max (0x1UL)
  #define USBHSCORE_DCTL_IGNRFRMNUM_DISABLED (0x0UL) /*!< Scatter/Gather DMA Mode: The core transmits the packets only in the
                                                          frame number in which they are intended to be
                                                          transmitted.Non-Scatter/Gather DMA Mode: Periodic Transfer Interrupt
                                                          feature is disabled.*/
  #define USBHSCORE_DCTL_IGNRFRMNUM_ENABLED (0x1UL)  /*!< Scatter/Gather DMA Mode: The core ignores the frame number, sending
                                                          packets immediately as the packets are ready.Non-Scatter/Gather DMA
                                                          Mode: Periodic Transfer Interrupt feature is enabled.*/

/* NAKONBBLE @Bit 16 : NAK on Babble Error (NakOnBble) */
  #define USBHSCORE_DCTL_NAKONBBLE_Pos (16UL)
  #define USBHSCORE_DCTL_NAKONBBLE_Msk (0x1UL << USBHSCORE_DCTL_NAKONBBLE_Pos)
  #define USBHSCORE_DCTL_NAKONBBLE_Min (0x0UL)
  #define USBHSCORE_DCTL_NAKONBBLE_Max (0x1UL)
  #define USBHSCORE_DCTL_NAKONBBLE_DISABLED (0x0UL)
  #define USBHSCORE_DCTL_NAKONBBLE_ENABLED (0x1UL)

/* DEEPSLEEPBESLREJECT @Bit 18 : DeepSleepBESLReject */
  #define USBHSCORE_DCTL_DEEPSLEEPBESLREJECT_Pos (18UL)
  #define USBHSCORE_DCTL_DEEPSLEEPBESLREJECT_Msk (0x1UL << USBHSCORE_DCTL_DEEPSLEEPBESLREJECT_Pos) /*!< Bit mask of
                                                                            DEEPSLEEPBESLREJECT field.*/
  #define USBHSCORE_DCTL_DEEPSLEEPBESLREJECT_Min (0x0UL)
  #define USBHSCORE_DCTL_DEEPSLEEPBESLREJECT_Max (0x1UL)
  #define USBHSCORE_DCTL_DEEPSLEEPBESLREJECT_DISABLED (0x0UL)
  #define USBHSCORE_DCTL_DEEPSLEEPBESLREJECT_ENABLED (0x1UL)

/* SERVINT @Bit 19 : Service Interval based scheduling for Isochronous IN Endpoints */
  #define USBHSCORE_DCTL_SERVINT_Pos (19UL)
  #define USBHSCORE_DCTL_SERVINT_Msk (0x1UL << USBHSCORE_DCTL_SERVINT_Pos)
  #define USBHSCORE_DCTL_SERVINT_Min (0x0UL)
  #define USBHSCORE_DCTL_SERVINT_Max (0x1UL)
  #define USBHSCORE_DCTL_SERVINT_DISABLED (0x0UL)
  #define USBHSCORE_DCTL_SERVINT_ENABLED (0x1UL)     /*!< Scatter/Gather DMA Mode: The controller can transmit the packets in
                                                          any frame of the service interval.*/

/* UTMITXVLDCORRDIS @Bit 30 : Disable the correction to OpMode/XcvrSel/TermSel on UTMI Interface. */
  #define USBHSCORE_DCTL_UTMITXVLDCORRDIS_Pos (30UL)
  #define USBHSCORE_DCTL_UTMITXVLDCORRDIS_Msk (0x1UL << USBHSCORE_DCTL_UTMITXVLDCORRDIS_Pos) /*!< Bit mask of UTMITXVLDCORRDIS
                                                                            field.*/
  #define USBHSCORE_DCTL_UTMITXVLDCORRDIS_Min (0x0UL)
  #define USBHSCORE_DCTL_UTMITXVLDCORRDIS_Max (0x1UL)
  #define USBHSCORE_DCTL_UTMITXVLDCORRDIS_DISABLED (0x0UL) /*!< Opmode, XcvrSel, TermSel are changed by the Device Controller
                                                                after TxValid goes LOW (1'b0)on soft disconnect.*/
  #define USBHSCORE_DCTL_UTMITXVLDCORRDIS_ENABLED (0x1UL) /*!< Opmode, XcvrSel, TermSel are changed by the Device Controller
                                                               immediately on soft disconnect.*/

/* UTMITERMSELCORRDIS @Bit 31 : Disable the correction of TermSel on UTMI Interface. */
  #define USBHSCORE_DCTL_UTMITERMSELCORRDIS_Pos (31UL)
  #define USBHSCORE_DCTL_UTMITERMSELCORRDIS_Msk (0x1UL << USBHSCORE_DCTL_UTMITERMSELCORRDIS_Pos) /*!< Bit mask of
                                                                            UTMITERMSELCORRDIS field.*/
  #define USBHSCORE_DCTL_UTMITERMSELCORRDIS_Min (0x0UL)
  #define USBHSCORE_DCTL_UTMITERMSELCORRDIS_Max (0x1UL)
  #define USBHSCORE_DCTL_UTMITERMSELCORRDIS_DISABLED (0x0UL) /*!< Valid Combination of XcvrSel and TermSel is driven by the
                                                                  Device Controller.*/
  #define USBHSCORE_DCTL_UTMITERMSELCORRDIS_ENABLED (0x1UL) /*!< Invalid Combination of XcvrSel and TermSel is driven by the
                                                                 Device Controller.*/


/* USBHSCORE_DSTS: Device Status Register */
  #define USBHSCORE_DSTS_ResetValue (0x00000002UL)

/* SUSPSTS @Bit 0 : Suspend Status (SuspSts) */
  #define USBHSCORE_DSTS_SUSPSTS_Pos (0UL)
  #define USBHSCORE_DSTS_SUSPSTS_Msk (0x1UL << USBHSCORE_DSTS_SUSPSTS_Pos)
  #define USBHSCORE_DSTS_SUSPSTS_Min (0x0UL)
  #define USBHSCORE_DSTS_SUSPSTS_Max (0x1UL)
  #define USBHSCORE_DSTS_SUSPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DSTS_SUSPSTS_ACTIVE (0x1UL)

/* ENUMSPD @Bits 1..2 : Enumerated Speed (EnumSpd) */
  #define USBHSCORE_DSTS_ENUMSPD_Pos (1UL)
  #define USBHSCORE_DSTS_ENUMSPD_Msk (0x3UL << USBHSCORE_DSTS_ENUMSPD_Pos)
  #define USBHSCORE_DSTS_ENUMSPD_Min (0x0UL)
  #define USBHSCORE_DSTS_ENUMSPD_Max (0x3UL)
  #define USBHSCORE_DSTS_ENUMSPD_HS3060 (0x0UL)
  #define USBHSCORE_DSTS_ENUMSPD_FS3060 (0x1UL)
  #define USBHSCORE_DSTS_ENUMSPD_LS6 (0x2UL)
  #define USBHSCORE_DSTS_ENUMSPD_FS48 (0x3UL)

/* ERRTICERR @Bit 3 : Erratic Error (ErrticErr) */
  #define USBHSCORE_DSTS_ERRTICERR_Pos (3UL)
  #define USBHSCORE_DSTS_ERRTICERR_Msk (0x1UL << USBHSCORE_DSTS_ERRTICERR_Pos)
  #define USBHSCORE_DSTS_ERRTICERR_Min (0x0UL)
  #define USBHSCORE_DSTS_ERRTICERR_Max (0x1UL)
  #define USBHSCORE_DSTS_ERRTICERR_INACTIVE (0x0UL)
  #define USBHSCORE_DSTS_ERRTICERR_ACTIVE (0x1UL)

/* SOFFN @Bits 8..21 : Frame or Microframe Number of the Received SOF (SOFFN) */
  #define USBHSCORE_DSTS_SOFFN_Pos (8UL)
  #define USBHSCORE_DSTS_SOFFN_Msk (0x3FFFUL << USBHSCORE_DSTS_SOFFN_Pos)

/* DEVLNSTS @Bits 22..23 : Device Line Status (DevLnSts) */
  #define USBHSCORE_DSTS_DEVLNSTS_Pos (22UL)
  #define USBHSCORE_DSTS_DEVLNSTS_Msk (0x3UL << USBHSCORE_DSTS_DEVLNSTS_Pos)


/* USBHSCORE_DIEPMSK: Device IN Endpoint Common Interrupt Mask Register */
  #define USBHSCORE_DIEPMSK_ResetValue (0x00000000UL)

/* XFERCOMPLMSK @Bit 0 : Transfer Completed Interrupt Mask (XferComplMsk) */
  #define USBHSCORE_DIEPMSK_XFERCOMPLMSK_Pos (0UL)
  #define USBHSCORE_DIEPMSK_XFERCOMPLMSK_Msk (0x1UL << USBHSCORE_DIEPMSK_XFERCOMPLMSK_Pos)
  #define USBHSCORE_DIEPMSK_XFERCOMPLMSK_Min (0x0UL)
  #define USBHSCORE_DIEPMSK_XFERCOMPLMSK_Max (0x1UL)
  #define USBHSCORE_DIEPMSK_XFERCOMPLMSK_MASK (0x0UL)
  #define USBHSCORE_DIEPMSK_XFERCOMPLMSK_NOMASK (0x1UL)

/* EPDISBLDMSK @Bit 1 : Endpoint Disabled Interrupt Mask (EPDisbldMsk) */
  #define USBHSCORE_DIEPMSK_EPDISBLDMSK_Pos (1UL)
  #define USBHSCORE_DIEPMSK_EPDISBLDMSK_Msk (0x1UL << USBHSCORE_DIEPMSK_EPDISBLDMSK_Pos)
  #define USBHSCORE_DIEPMSK_EPDISBLDMSK_Min (0x0UL)
  #define USBHSCORE_DIEPMSK_EPDISBLDMSK_Max (0x1UL)
  #define USBHSCORE_DIEPMSK_EPDISBLDMSK_MASK (0x0UL)
  #define USBHSCORE_DIEPMSK_EPDISBLDMSK_NOMASK (0x1UL)

/* AHBERRMSK @Bit 2 : AHB Error Mask (AHBErrMsk) */
  #define USBHSCORE_DIEPMSK_AHBERRMSK_Pos (2UL)
  #define USBHSCORE_DIEPMSK_AHBERRMSK_Msk (0x1UL << USBHSCORE_DIEPMSK_AHBERRMSK_Pos)
  #define USBHSCORE_DIEPMSK_AHBERRMSK_Min (0x0UL)
  #define USBHSCORE_DIEPMSK_AHBERRMSK_Max (0x1UL)
  #define USBHSCORE_DIEPMSK_AHBERRMSK_MASK (0x0UL)
  #define USBHSCORE_DIEPMSK_AHBERRMSK_NOMASK (0x1UL)

/* TIMEOUTMSK @Bit 3 : Timeout Condition Mask (TimeOUTMsk) (Non-isochronous endpoints) */
  #define USBHSCORE_DIEPMSK_TIMEOUTMSK_Pos (3UL)
  #define USBHSCORE_DIEPMSK_TIMEOUTMSK_Msk (0x1UL << USBHSCORE_DIEPMSK_TIMEOUTMSK_Pos)
  #define USBHSCORE_DIEPMSK_TIMEOUTMSK_Min (0x0UL)
  #define USBHSCORE_DIEPMSK_TIMEOUTMSK_Max (0x1UL)
  #define USBHSCORE_DIEPMSK_TIMEOUTMSK_MASK (0x0UL)
  #define USBHSCORE_DIEPMSK_TIMEOUTMSK_NOMASK (0x1UL)

/* INTKNTXFEMPMSK @Bit 4 : IN Token Received When TxFIFO Empty Mask (INTknTXFEmpMsk) */
  #define USBHSCORE_DIEPMSK_INTKNTXFEMPMSK_Pos (4UL)
  #define USBHSCORE_DIEPMSK_INTKNTXFEMPMSK_Msk (0x1UL << USBHSCORE_DIEPMSK_INTKNTXFEMPMSK_Pos) /*!< Bit mask of INTKNTXFEMPMSK
                                                                            field.*/
  #define USBHSCORE_DIEPMSK_INTKNTXFEMPMSK_Min (0x0UL)
  #define USBHSCORE_DIEPMSK_INTKNTXFEMPMSK_Max (0x1UL)
  #define USBHSCORE_DIEPMSK_INTKNTXFEMPMSK_MASK (0x0UL)
  #define USBHSCORE_DIEPMSK_INTKNTXFEMPMSK_NOMASK (0x1UL)

/* INTKNEPMISMSK @Bit 5 : IN Token received with EP Mismatch Mask (INTknEPMisMsk) */
  #define USBHSCORE_DIEPMSK_INTKNEPMISMSK_Pos (5UL)
  #define USBHSCORE_DIEPMSK_INTKNEPMISMSK_Msk (0x1UL << USBHSCORE_DIEPMSK_INTKNEPMISMSK_Pos) /*!< Bit mask of INTKNEPMISMSK
                                                                            field.*/
  #define USBHSCORE_DIEPMSK_INTKNEPMISMSK_Min (0x0UL)
  #define USBHSCORE_DIEPMSK_INTKNEPMISMSK_Max (0x1UL)
  #define USBHSCORE_DIEPMSK_INTKNEPMISMSK_MASK (0x0UL)
  #define USBHSCORE_DIEPMSK_INTKNEPMISMSK_NOMASK (0x1UL)

/* INEPNAKEFFMSK @Bit 6 : IN Endpoint NAK Effective Mask (INEPNakEffMsk) */
  #define USBHSCORE_DIEPMSK_INEPNAKEFFMSK_Pos (6UL)
  #define USBHSCORE_DIEPMSK_INEPNAKEFFMSK_Msk (0x1UL << USBHSCORE_DIEPMSK_INEPNAKEFFMSK_Pos) /*!< Bit mask of INEPNAKEFFMSK
                                                                            field.*/
  #define USBHSCORE_DIEPMSK_INEPNAKEFFMSK_Min (0x0UL)
  #define USBHSCORE_DIEPMSK_INEPNAKEFFMSK_Max (0x1UL)
  #define USBHSCORE_DIEPMSK_INEPNAKEFFMSK_MASK (0x0UL)
  #define USBHSCORE_DIEPMSK_INEPNAKEFFMSK_NOMASK (0x1UL)

/* TXFIFOUNDRNMSK @Bit 8 : Fifo Underrun Mask (TxfifoUndrnMsk) */
  #define USBHSCORE_DIEPMSK_TXFIFOUNDRNMSK_Pos (8UL)
  #define USBHSCORE_DIEPMSK_TXFIFOUNDRNMSK_Msk (0x1UL << USBHSCORE_DIEPMSK_TXFIFOUNDRNMSK_Pos) /*!< Bit mask of TXFIFOUNDRNMSK
                                                                            field.*/
  #define USBHSCORE_DIEPMSK_TXFIFOUNDRNMSK_Min (0x0UL)
  #define USBHSCORE_DIEPMSK_TXFIFOUNDRNMSK_Max (0x1UL)
  #define USBHSCORE_DIEPMSK_TXFIFOUNDRNMSK_MASK (0x0UL)
  #define USBHSCORE_DIEPMSK_TXFIFOUNDRNMSK_NOMASK (0x1UL)

/* NAKMSK @Bit 13 : NAK interrupt Mask (NAKMsk) */
  #define USBHSCORE_DIEPMSK_NAKMSK_Pos (13UL)
  #define USBHSCORE_DIEPMSK_NAKMSK_Msk (0x1UL << USBHSCORE_DIEPMSK_NAKMSK_Pos)
  #define USBHSCORE_DIEPMSK_NAKMSK_Min (0x0UL)
  #define USBHSCORE_DIEPMSK_NAKMSK_Max (0x1UL)
  #define USBHSCORE_DIEPMSK_NAKMSK_MASK (0x0UL)
  #define USBHSCORE_DIEPMSK_NAKMSK_NOMASK (0x1UL)


/* USBHSCORE_DOEPMSK: Device OUT Endpoint Common Interrupt Mask Register */
  #define USBHSCORE_DOEPMSK_ResetValue (0x00000000UL)

/* XFERCOMPLMSK @Bit 0 : Transfer Completed Interrupt Mask (XferComplMsk) */
  #define USBHSCORE_DOEPMSK_XFERCOMPLMSK_Pos (0UL)
  #define USBHSCORE_DOEPMSK_XFERCOMPLMSK_Msk (0x1UL << USBHSCORE_DOEPMSK_XFERCOMPLMSK_Pos)
  #define USBHSCORE_DOEPMSK_XFERCOMPLMSK_Min (0x0UL)
  #define USBHSCORE_DOEPMSK_XFERCOMPLMSK_Max (0x1UL)
  #define USBHSCORE_DOEPMSK_XFERCOMPLMSK_MASK (0x0UL)
  #define USBHSCORE_DOEPMSK_XFERCOMPLMSK_NOMASK (0x1UL)

/* EPDISBLDMSK @Bit 1 : Endpoint Disabled Interrupt Mask (EPDisbldMsk) */
  #define USBHSCORE_DOEPMSK_EPDISBLDMSK_Pos (1UL)
  #define USBHSCORE_DOEPMSK_EPDISBLDMSK_Msk (0x1UL << USBHSCORE_DOEPMSK_EPDISBLDMSK_Pos)
  #define USBHSCORE_DOEPMSK_EPDISBLDMSK_Min (0x0UL)
  #define USBHSCORE_DOEPMSK_EPDISBLDMSK_Max (0x1UL)
  #define USBHSCORE_DOEPMSK_EPDISBLDMSK_MASK (0x0UL)
  #define USBHSCORE_DOEPMSK_EPDISBLDMSK_NOMASK (0x1UL)

/* AHBERRMSK @Bit 2 : AHB Error (AHBErrMsk) */
  #define USBHSCORE_DOEPMSK_AHBERRMSK_Pos (2UL)
  #define USBHSCORE_DOEPMSK_AHBERRMSK_Msk (0x1UL << USBHSCORE_DOEPMSK_AHBERRMSK_Pos)
  #define USBHSCORE_DOEPMSK_AHBERRMSK_Min (0x0UL)
  #define USBHSCORE_DOEPMSK_AHBERRMSK_Max (0x1UL)
  #define USBHSCORE_DOEPMSK_AHBERRMSK_MASK (0x0UL)
  #define USBHSCORE_DOEPMSK_AHBERRMSK_NOMASK (0x1UL)

/* SETUPMSK @Bit 3 : SETUP Phase Done Mask (SetUPMsk) */
  #define USBHSCORE_DOEPMSK_SETUPMSK_Pos (3UL)
  #define USBHSCORE_DOEPMSK_SETUPMSK_Msk (0x1UL << USBHSCORE_DOEPMSK_SETUPMSK_Pos)
  #define USBHSCORE_DOEPMSK_SETUPMSK_Min (0x0UL)
  #define USBHSCORE_DOEPMSK_SETUPMSK_Max (0x1UL)
  #define USBHSCORE_DOEPMSK_SETUPMSK_MASK (0x0UL)
  #define USBHSCORE_DOEPMSK_SETUPMSK_NOMASK (0x1UL)

/* OUTTKNEPDISMSK @Bit 4 : OUT Token Received when Endpoint Disabled Mask (OUTTknEPdisMsk) */
  #define USBHSCORE_DOEPMSK_OUTTKNEPDISMSK_Pos (4UL)
  #define USBHSCORE_DOEPMSK_OUTTKNEPDISMSK_Msk (0x1UL << USBHSCORE_DOEPMSK_OUTTKNEPDISMSK_Pos) /*!< Bit mask of OUTTKNEPDISMSK
                                                                            field.*/
  #define USBHSCORE_DOEPMSK_OUTTKNEPDISMSK_Min (0x0UL)
  #define USBHSCORE_DOEPMSK_OUTTKNEPDISMSK_Max (0x1UL)
  #define USBHSCORE_DOEPMSK_OUTTKNEPDISMSK_MASK (0x0UL)
  #define USBHSCORE_DOEPMSK_OUTTKNEPDISMSK_NOMASK (0x1UL)

/* STSPHSERCVDMSK @Bit 5 : Status Phase Received Mask (StsPhseRcvdMsk) */
  #define USBHSCORE_DOEPMSK_STSPHSERCVDMSK_Pos (5UL)
  #define USBHSCORE_DOEPMSK_STSPHSERCVDMSK_Msk (0x1UL << USBHSCORE_DOEPMSK_STSPHSERCVDMSK_Pos) /*!< Bit mask of STSPHSERCVDMSK
                                                                            field.*/
  #define USBHSCORE_DOEPMSK_STSPHSERCVDMSK_Min (0x0UL)
  #define USBHSCORE_DOEPMSK_STSPHSERCVDMSK_Max (0x1UL)
  #define USBHSCORE_DOEPMSK_STSPHSERCVDMSK_MASK (0x0UL)
  #define USBHSCORE_DOEPMSK_STSPHSERCVDMSK_NOMASK (0x1UL)

/* BACK2BACKSETUP @Bit 6 : Back-to-Back SETUP Packets Received Mask (Back2BackSETup) */
  #define USBHSCORE_DOEPMSK_BACK2BACKSETUP_Pos (6UL)
  #define USBHSCORE_DOEPMSK_BACK2BACKSETUP_Msk (0x1UL << USBHSCORE_DOEPMSK_BACK2BACKSETUP_Pos) /*!< Bit mask of BACK2BACKSETUP
                                                                            field.*/
  #define USBHSCORE_DOEPMSK_BACK2BACKSETUP_Min (0x0UL)
  #define USBHSCORE_DOEPMSK_BACK2BACKSETUP_Max (0x1UL)
  #define USBHSCORE_DOEPMSK_BACK2BACKSETUP_MASK (0x0UL)
  #define USBHSCORE_DOEPMSK_BACK2BACKSETUP_NOMASK (0x1UL)

/* OUTPKTERRMSK @Bit 8 : OUT Packet Error Mask (OutPktErrMsk) */
  #define USBHSCORE_DOEPMSK_OUTPKTERRMSK_Pos (8UL)
  #define USBHSCORE_DOEPMSK_OUTPKTERRMSK_Msk (0x1UL << USBHSCORE_DOEPMSK_OUTPKTERRMSK_Pos)
  #define USBHSCORE_DOEPMSK_OUTPKTERRMSK_Min (0x0UL)
  #define USBHSCORE_DOEPMSK_OUTPKTERRMSK_Max (0x1UL)
  #define USBHSCORE_DOEPMSK_OUTPKTERRMSK_MASK (0x0UL)
  #define USBHSCORE_DOEPMSK_OUTPKTERRMSK_NOMASK (0x1UL)

/* BBLEERRMSK @Bit 12 : Babble Error interrupt Mask (BbleErrMsk) */
  #define USBHSCORE_DOEPMSK_BBLEERRMSK_Pos (12UL)
  #define USBHSCORE_DOEPMSK_BBLEERRMSK_Msk (0x1UL << USBHSCORE_DOEPMSK_BBLEERRMSK_Pos)
  #define USBHSCORE_DOEPMSK_BBLEERRMSK_Min (0x0UL)
  #define USBHSCORE_DOEPMSK_BBLEERRMSK_Max (0x1UL)
  #define USBHSCORE_DOEPMSK_BBLEERRMSK_MASK (0x0UL)
  #define USBHSCORE_DOEPMSK_BBLEERRMSK_NOMASK (0x1UL)

/* NAKMSK @Bit 13 : NAK interrupt Mask (NAKMsk) */
  #define USBHSCORE_DOEPMSK_NAKMSK_Pos (13UL)
  #define USBHSCORE_DOEPMSK_NAKMSK_Msk (0x1UL << USBHSCORE_DOEPMSK_NAKMSK_Pos)
  #define USBHSCORE_DOEPMSK_NAKMSK_Min (0x0UL)
  #define USBHSCORE_DOEPMSK_NAKMSK_Max (0x1UL)
  #define USBHSCORE_DOEPMSK_NAKMSK_MASK (0x0UL)
  #define USBHSCORE_DOEPMSK_NAKMSK_NOMASK (0x1UL)

/* NYETMSK @Bit 14 : NYET interrupt Mask (NYETMsk) */
  #define USBHSCORE_DOEPMSK_NYETMSK_Pos (14UL)
  #define USBHSCORE_DOEPMSK_NYETMSK_Msk (0x1UL << USBHSCORE_DOEPMSK_NYETMSK_Pos)
  #define USBHSCORE_DOEPMSK_NYETMSK_Min (0x0UL)
  #define USBHSCORE_DOEPMSK_NYETMSK_Max (0x1UL)
  #define USBHSCORE_DOEPMSK_NYETMSK_MASK (0x0UL)
  #define USBHSCORE_DOEPMSK_NYETMSK_NOMASK (0x1UL)


/* USBHSCORE_DAINT: Device All Endpoints Interrupt Register */
  #define USBHSCORE_DAINT_ResetValue (0x00000000UL)

/* INEPINT0 @Bit 0 : IN Endpoint 0 Interrupt Bit */
  #define USBHSCORE_DAINT_INEPINT0_Pos (0UL)
  #define USBHSCORE_DAINT_INEPINT0_Msk (0x1UL << USBHSCORE_DAINT_INEPINT0_Pos)
  #define USBHSCORE_DAINT_INEPINT0_Min (0x0UL)
  #define USBHSCORE_DAINT_INEPINT0_Max (0x1UL)
  #define USBHSCORE_DAINT_INEPINT0_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_INEPINT0_ACTIVE (0x1UL)

/* INEPINT1 @Bit 1 : IN Endpoint 1 Interrupt Bit */
  #define USBHSCORE_DAINT_INEPINT1_Pos (1UL)
  #define USBHSCORE_DAINT_INEPINT1_Msk (0x1UL << USBHSCORE_DAINT_INEPINT1_Pos)
  #define USBHSCORE_DAINT_INEPINT1_Min (0x0UL)
  #define USBHSCORE_DAINT_INEPINT1_Max (0x1UL)
  #define USBHSCORE_DAINT_INEPINT1_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_INEPINT1_ACTIVE (0x1UL)

/* INEPINT2 @Bit 2 : IN Endpoint 2 Interrupt Bit */
  #define USBHSCORE_DAINT_INEPINT2_Pos (2UL)
  #define USBHSCORE_DAINT_INEPINT2_Msk (0x1UL << USBHSCORE_DAINT_INEPINT2_Pos)
  #define USBHSCORE_DAINT_INEPINT2_Min (0x0UL)
  #define USBHSCORE_DAINT_INEPINT2_Max (0x1UL)
  #define USBHSCORE_DAINT_INEPINT2_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_INEPINT2_ACTIVE (0x1UL)

/* INEPINT3 @Bit 3 : IN Endpoint 3 Interrupt Bit */
  #define USBHSCORE_DAINT_INEPINT3_Pos (3UL)
  #define USBHSCORE_DAINT_INEPINT3_Msk (0x1UL << USBHSCORE_DAINT_INEPINT3_Pos)
  #define USBHSCORE_DAINT_INEPINT3_Min (0x0UL)
  #define USBHSCORE_DAINT_INEPINT3_Max (0x1UL)
  #define USBHSCORE_DAINT_INEPINT3_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_INEPINT3_ACTIVE (0x1UL)

/* INEPINT4 @Bit 4 : IN Endpoint 4 Interrupt Bit */
  #define USBHSCORE_DAINT_INEPINT4_Pos (4UL)
  #define USBHSCORE_DAINT_INEPINT4_Msk (0x1UL << USBHSCORE_DAINT_INEPINT4_Pos)
  #define USBHSCORE_DAINT_INEPINT4_Min (0x0UL)
  #define USBHSCORE_DAINT_INEPINT4_Max (0x1UL)
  #define USBHSCORE_DAINT_INEPINT4_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_INEPINT4_ACTIVE (0x1UL)

/* INEPINT5 @Bit 5 : IN Endpoint 5 Interrupt Bit */
  #define USBHSCORE_DAINT_INEPINT5_Pos (5UL)
  #define USBHSCORE_DAINT_INEPINT5_Msk (0x1UL << USBHSCORE_DAINT_INEPINT5_Pos)
  #define USBHSCORE_DAINT_INEPINT5_Min (0x0UL)
  #define USBHSCORE_DAINT_INEPINT5_Max (0x1UL)
  #define USBHSCORE_DAINT_INEPINT5_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_INEPINT5_ACTIVE (0x1UL)

/* INEPINT6 @Bit 6 : IN Endpoint 6 Interrupt Bit */
  #define USBHSCORE_DAINT_INEPINT6_Pos (6UL)
  #define USBHSCORE_DAINT_INEPINT6_Msk (0x1UL << USBHSCORE_DAINT_INEPINT6_Pos)
  #define USBHSCORE_DAINT_INEPINT6_Min (0x0UL)
  #define USBHSCORE_DAINT_INEPINT6_Max (0x1UL)
  #define USBHSCORE_DAINT_INEPINT6_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_INEPINT6_ACTIVE (0x1UL)

/* INEPINT7 @Bit 7 : IN Endpoint 7 Interrupt Bit */
  #define USBHSCORE_DAINT_INEPINT7_Pos (7UL)
  #define USBHSCORE_DAINT_INEPINT7_Msk (0x1UL << USBHSCORE_DAINT_INEPINT7_Pos)
  #define USBHSCORE_DAINT_INEPINT7_Min (0x0UL)
  #define USBHSCORE_DAINT_INEPINT7_Max (0x1UL)
  #define USBHSCORE_DAINT_INEPINT7_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_INEPINT7_ACTIVE (0x1UL)

/* INEPINT8 @Bit 8 : IN Endpoint 8 Interrupt Bit */
  #define USBHSCORE_DAINT_INEPINT8_Pos (8UL)
  #define USBHSCORE_DAINT_INEPINT8_Msk (0x1UL << USBHSCORE_DAINT_INEPINT8_Pos)
  #define USBHSCORE_DAINT_INEPINT8_Min (0x0UL)
  #define USBHSCORE_DAINT_INEPINT8_Max (0x1UL)
  #define USBHSCORE_DAINT_INEPINT8_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_INEPINT8_ACTIVE (0x1UL)

/* INEPINT9 @Bit 9 : IN Endpoint 9 Interrupt Bit */
  #define USBHSCORE_DAINT_INEPINT9_Pos (9UL)
  #define USBHSCORE_DAINT_INEPINT9_Msk (0x1UL << USBHSCORE_DAINT_INEPINT9_Pos)
  #define USBHSCORE_DAINT_INEPINT9_Min (0x0UL)
  #define USBHSCORE_DAINT_INEPINT9_Max (0x1UL)
  #define USBHSCORE_DAINT_INEPINT9_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_INEPINT9_ACTIVE (0x1UL)

/* INEPINT10 @Bit 10 : IN Endpoint 10 Interrupt Bit */
  #define USBHSCORE_DAINT_INEPINT10_Pos (10UL)
  #define USBHSCORE_DAINT_INEPINT10_Msk (0x1UL << USBHSCORE_DAINT_INEPINT10_Pos)
  #define USBHSCORE_DAINT_INEPINT10_Min (0x0UL)
  #define USBHSCORE_DAINT_INEPINT10_Max (0x1UL)
  #define USBHSCORE_DAINT_INEPINT10_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_INEPINT10_ACTIVE (0x1UL)

/* INEPINT11 @Bit 11 : IN Endpoint 11 Interrupt Bit */
  #define USBHSCORE_DAINT_INEPINT11_Pos (11UL)
  #define USBHSCORE_DAINT_INEPINT11_Msk (0x1UL << USBHSCORE_DAINT_INEPINT11_Pos)
  #define USBHSCORE_DAINT_INEPINT11_Min (0x0UL)
  #define USBHSCORE_DAINT_INEPINT11_Max (0x1UL)
  #define USBHSCORE_DAINT_INEPINT11_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_INEPINT11_ACTIVE (0x1UL)

/* OUTEPINT0 @Bit 16 : OUT Endpoint 0 Interrupt Bit */
  #define USBHSCORE_DAINT_OUTEPINT0_Pos (16UL)
  #define USBHSCORE_DAINT_OUTEPINT0_Msk (0x1UL << USBHSCORE_DAINT_OUTEPINT0_Pos)
  #define USBHSCORE_DAINT_OUTEPINT0_Min (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT0_Max (0x1UL)
  #define USBHSCORE_DAINT_OUTEPINT0_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT0_ACTIVE (0x1UL)

/* OUTEPINT1 @Bit 17 : OUT Endpoint 1 Interrupt Bit */
  #define USBHSCORE_DAINT_OUTEPINT1_Pos (17UL)
  #define USBHSCORE_DAINT_OUTEPINT1_Msk (0x1UL << USBHSCORE_DAINT_OUTEPINT1_Pos)
  #define USBHSCORE_DAINT_OUTEPINT1_Min (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT1_Max (0x1UL)
  #define USBHSCORE_DAINT_OUTEPINT1_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT1_ACTIVE (0x1UL)

/* OUTEPINT2 @Bit 18 : OUT Endpoint 2 Interrupt Bit */
  #define USBHSCORE_DAINT_OUTEPINT2_Pos (18UL)
  #define USBHSCORE_DAINT_OUTEPINT2_Msk (0x1UL << USBHSCORE_DAINT_OUTEPINT2_Pos)
  #define USBHSCORE_DAINT_OUTEPINT2_Min (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT2_Max (0x1UL)
  #define USBHSCORE_DAINT_OUTEPINT2_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT2_ACTIVE (0x1UL)

/* OUTEPINT3 @Bit 19 : OUT Endpoint 3 Interrupt Bit */
  #define USBHSCORE_DAINT_OUTEPINT3_Pos (19UL)
  #define USBHSCORE_DAINT_OUTEPINT3_Msk (0x1UL << USBHSCORE_DAINT_OUTEPINT3_Pos)
  #define USBHSCORE_DAINT_OUTEPINT3_Min (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT3_Max (0x1UL)
  #define USBHSCORE_DAINT_OUTEPINT3_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT3_ACTIVE (0x1UL)

/* OUTEPINT4 @Bit 20 : OUT Endpoint 4 Interrupt Bit */
  #define USBHSCORE_DAINT_OUTEPINT4_Pos (20UL)
  #define USBHSCORE_DAINT_OUTEPINT4_Msk (0x1UL << USBHSCORE_DAINT_OUTEPINT4_Pos)
  #define USBHSCORE_DAINT_OUTEPINT4_Min (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT4_Max (0x1UL)
  #define USBHSCORE_DAINT_OUTEPINT4_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT4_ACTIVE (0x1UL)

/* OUTEPINT5 @Bit 21 : OUT Endpoint 5 Interrupt Bit */
  #define USBHSCORE_DAINT_OUTEPINT5_Pos (21UL)
  #define USBHSCORE_DAINT_OUTEPINT5_Msk (0x1UL << USBHSCORE_DAINT_OUTEPINT5_Pos)
  #define USBHSCORE_DAINT_OUTEPINT5_Min (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT5_Max (0x1UL)
  #define USBHSCORE_DAINT_OUTEPINT5_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT5_ACTIVE (0x1UL)

/* OUTEPINT12 @Bit 28 : OUT Endpoint 12 Interrupt Bit */
  #define USBHSCORE_DAINT_OUTEPINT12_Pos (28UL)
  #define USBHSCORE_DAINT_OUTEPINT12_Msk (0x1UL << USBHSCORE_DAINT_OUTEPINT12_Pos)
  #define USBHSCORE_DAINT_OUTEPINT12_Min (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT12_Max (0x1UL)
  #define USBHSCORE_DAINT_OUTEPINT12_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT12_ACTIVE (0x1UL)

/* OUTEPINT13 @Bit 29 : OUT Endpoint 13 Interrupt Bit */
  #define USBHSCORE_DAINT_OUTEPINT13_Pos (29UL)
  #define USBHSCORE_DAINT_OUTEPINT13_Msk (0x1UL << USBHSCORE_DAINT_OUTEPINT13_Pos)
  #define USBHSCORE_DAINT_OUTEPINT13_Min (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT13_Max (0x1UL)
  #define USBHSCORE_DAINT_OUTEPINT13_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT13_ACTIVE (0x1UL)

/* OUTEPINT14 @Bit 30 : OUT Endpoint 14 Interrupt Bit */
  #define USBHSCORE_DAINT_OUTEPINT14_Pos (30UL)
  #define USBHSCORE_DAINT_OUTEPINT14_Msk (0x1UL << USBHSCORE_DAINT_OUTEPINT14_Pos)
  #define USBHSCORE_DAINT_OUTEPINT14_Min (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT14_Max (0x1UL)
  #define USBHSCORE_DAINT_OUTEPINT14_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT14_ACTIVE (0x1UL)

/* OUTEPINT15 @Bit 31 : OUT Endpoint 15 Interrupt Bit */
  #define USBHSCORE_DAINT_OUTEPINT15_Pos (31UL)
  #define USBHSCORE_DAINT_OUTEPINT15_Msk (0x1UL << USBHSCORE_DAINT_OUTEPINT15_Pos)
  #define USBHSCORE_DAINT_OUTEPINT15_Min (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT15_Max (0x1UL)
  #define USBHSCORE_DAINT_OUTEPINT15_INACTIVE (0x0UL)
  #define USBHSCORE_DAINT_OUTEPINT15_ACTIVE (0x1UL)


/* USBHSCORE_DAINTMSK: Device All Endpoints Interrupt Mask Register */
  #define USBHSCORE_DAINTMSK_ResetValue (0x00000000UL)

/* INEPMSK0 @Bit 0 : IN Endpoint 0 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_INEPMSK0_Pos (0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK0_Msk (0x1UL << USBHSCORE_DAINTMSK_INEPMSK0_Pos)
  #define USBHSCORE_DAINTMSK_INEPMSK0_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK0_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_INEPMSK0_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK0_NOMASK (0x1UL)

/* INEPMSK1 @Bit 1 : IN Endpoint 1 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_INEPMSK1_Pos (1UL)
  #define USBHSCORE_DAINTMSK_INEPMSK1_Msk (0x1UL << USBHSCORE_DAINTMSK_INEPMSK1_Pos)
  #define USBHSCORE_DAINTMSK_INEPMSK1_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK1_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_INEPMSK1_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK1_NOMASK (0x1UL)

/* INEPMSK2 @Bit 2 : IN Endpoint 2 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_INEPMSK2_Pos (2UL)
  #define USBHSCORE_DAINTMSK_INEPMSK2_Msk (0x1UL << USBHSCORE_DAINTMSK_INEPMSK2_Pos)
  #define USBHSCORE_DAINTMSK_INEPMSK2_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK2_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_INEPMSK2_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK2_NOMASK (0x1UL)

/* INEPMSK3 @Bit 3 : IN Endpoint 3 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_INEPMSK3_Pos (3UL)
  #define USBHSCORE_DAINTMSK_INEPMSK3_Msk (0x1UL << USBHSCORE_DAINTMSK_INEPMSK3_Pos)
  #define USBHSCORE_DAINTMSK_INEPMSK3_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK3_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_INEPMSK3_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK3_NOMASK (0x1UL)

/* INEPMSK4 @Bit 4 : IN Endpoint 4 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_INEPMSK4_Pos (4UL)
  #define USBHSCORE_DAINTMSK_INEPMSK4_Msk (0x1UL << USBHSCORE_DAINTMSK_INEPMSK4_Pos)
  #define USBHSCORE_DAINTMSK_INEPMSK4_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK4_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_INEPMSK4_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK4_NOMASK (0x1UL)

/* INEPMSK5 @Bit 5 : IN Endpoint 5 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_INEPMSK5_Pos (5UL)
  #define USBHSCORE_DAINTMSK_INEPMSK5_Msk (0x1UL << USBHSCORE_DAINTMSK_INEPMSK5_Pos)
  #define USBHSCORE_DAINTMSK_INEPMSK5_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK5_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_INEPMSK5_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK5_NOMASK (0x1UL)

/* INEPMSK6 @Bit 6 : IN Endpoint 6 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_INEPMSK6_Pos (6UL)
  #define USBHSCORE_DAINTMSK_INEPMSK6_Msk (0x1UL << USBHSCORE_DAINTMSK_INEPMSK6_Pos)
  #define USBHSCORE_DAINTMSK_INEPMSK6_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK6_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_INEPMSK6_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK6_NOMASK (0x1UL)

/* INEPMSK7 @Bit 7 : IN Endpoint 7 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_INEPMSK7_Pos (7UL)
  #define USBHSCORE_DAINTMSK_INEPMSK7_Msk (0x1UL << USBHSCORE_DAINTMSK_INEPMSK7_Pos)
  #define USBHSCORE_DAINTMSK_INEPMSK7_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK7_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_INEPMSK7_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK7_NOMASK (0x1UL)

/* INEPMSK8 @Bit 8 : IN Endpoint 8 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_INEPMSK8_Pos (8UL)
  #define USBHSCORE_DAINTMSK_INEPMSK8_Msk (0x1UL << USBHSCORE_DAINTMSK_INEPMSK8_Pos)
  #define USBHSCORE_DAINTMSK_INEPMSK8_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK8_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_INEPMSK8_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK8_NOMASK (0x1UL)

/* INEPMSK9 @Bit 9 : IN Endpoint 9 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_INEPMSK9_Pos (9UL)
  #define USBHSCORE_DAINTMSK_INEPMSK9_Msk (0x1UL << USBHSCORE_DAINTMSK_INEPMSK9_Pos)
  #define USBHSCORE_DAINTMSK_INEPMSK9_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK9_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_INEPMSK9_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK9_NOMASK (0x1UL)

/* INEPMSK10 @Bit 10 : IN Endpoint 10 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_INEPMSK10_Pos (10UL)
  #define USBHSCORE_DAINTMSK_INEPMSK10_Msk (0x1UL << USBHSCORE_DAINTMSK_INEPMSK10_Pos)
  #define USBHSCORE_DAINTMSK_INEPMSK10_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK10_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_INEPMSK10_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK10_NOMASK (0x1UL)

/* INEPMSK11 @Bit 11 : IN Endpoint 11 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_INEPMSK11_Pos (11UL)
  #define USBHSCORE_DAINTMSK_INEPMSK11_Msk (0x1UL << USBHSCORE_DAINTMSK_INEPMSK11_Pos)
  #define USBHSCORE_DAINTMSK_INEPMSK11_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK11_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_INEPMSK11_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_INEPMSK11_NOMASK (0x1UL)

/* OUTEPMSK0 @Bit 16 : OUT Endpoint 0 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_OUTEPMSK0_Pos (16UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK0_Msk (0x1UL << USBHSCORE_DAINTMSK_OUTEPMSK0_Pos)
  #define USBHSCORE_DAINTMSK_OUTEPMSK0_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK0_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK0_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK0_NOMASK (0x1UL)

/* OUTEPMSK1 @Bit 17 : OUT Endpoint 1 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_OUTEPMSK1_Pos (17UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK1_Msk (0x1UL << USBHSCORE_DAINTMSK_OUTEPMSK1_Pos)
  #define USBHSCORE_DAINTMSK_OUTEPMSK1_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK1_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK1_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK1_NOMASK (0x1UL)

/* OUTEPMSK2 @Bit 18 : OUT Endpoint 2 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_OUTEPMSK2_Pos (18UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK2_Msk (0x1UL << USBHSCORE_DAINTMSK_OUTEPMSK2_Pos)
  #define USBHSCORE_DAINTMSK_OUTEPMSK2_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK2_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK2_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK2_NOMASK (0x1UL)

/* OUTEPMSK3 @Bit 19 : OUT Endpoint 3 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_OUTEPMSK3_Pos (19UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK3_Msk (0x1UL << USBHSCORE_DAINTMSK_OUTEPMSK3_Pos)
  #define USBHSCORE_DAINTMSK_OUTEPMSK3_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK3_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK3_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK3_NOMASK (0x1UL)

/* OUTEPMSK4 @Bit 20 : OUT Endpoint 4 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_OUTEPMSK4_Pos (20UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK4_Msk (0x1UL << USBHSCORE_DAINTMSK_OUTEPMSK4_Pos)
  #define USBHSCORE_DAINTMSK_OUTEPMSK4_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK4_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK4_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK4_NOMASK (0x1UL)

/* OUTEPMSK5 @Bit 21 : OUT Endpoint 5 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_OUTEPMSK5_Pos (21UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK5_Msk (0x1UL << USBHSCORE_DAINTMSK_OUTEPMSK5_Pos)
  #define USBHSCORE_DAINTMSK_OUTEPMSK5_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK5_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK5_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK5_NOMASK (0x1UL)

/* OUTEPMSK12 @Bit 28 : OUT Endpoint 12 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_OUTEPMSK12_Pos (28UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK12_Msk (0x1UL << USBHSCORE_DAINTMSK_OUTEPMSK12_Pos)
  #define USBHSCORE_DAINTMSK_OUTEPMSK12_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK12_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK12_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK12_NOMASK (0x1UL)

/* OUTEPMSK13 @Bit 29 : OUT Endpoint 13 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_OUTEPMSK13_Pos (29UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK13_Msk (0x1UL << USBHSCORE_DAINTMSK_OUTEPMSK13_Pos)
  #define USBHSCORE_DAINTMSK_OUTEPMSK13_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK13_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK13_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK13_NOMASK (0x1UL)

/* OUTEPMSK14 @Bit 30 : OUT Endpoint 14 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_OUTEPMSK14_Pos (30UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK14_Msk (0x1UL << USBHSCORE_DAINTMSK_OUTEPMSK14_Pos)
  #define USBHSCORE_DAINTMSK_OUTEPMSK14_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK14_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK14_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK14_NOMASK (0x1UL)

/* OUTEPMSK15 @Bit 31 : OUT Endpoint 15 Interrupt mask Bit */
  #define USBHSCORE_DAINTMSK_OUTEPMSK15_Pos (31UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK15_Msk (0x1UL << USBHSCORE_DAINTMSK_OUTEPMSK15_Pos)
  #define USBHSCORE_DAINTMSK_OUTEPMSK15_Min (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK15_Max (0x1UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK15_MASK (0x0UL)
  #define USBHSCORE_DAINTMSK_OUTEPMSK15_NOMASK (0x1UL)


/* USBHSCORE_DVBUSDIS: Device VBUS Discharge Time Register */
  #define USBHSCORE_DVBUSDIS_ResetValue (0x000017D7UL)

/* DVBUSDIS @Bits 0..15 : Device VBUS Discharge Time (DVBUSDis) */
  #define USBHSCORE_DVBUSDIS_DVBUSDIS_Pos (0UL)
  #define USBHSCORE_DVBUSDIS_DVBUSDIS_Msk (0xFFFFUL << USBHSCORE_DVBUSDIS_DVBUSDIS_Pos)


/* USBHSCORE_DVBUSPULSE: Device VBUS Pulsing Time Register */
  #define USBHSCORE_DVBUSPULSE_ResetValue (0x000005B8UL)

/* DVBUSPULSE @Bits 0..11 : Device VBUS Pulsing Time (DVBUSPulse) */
  #define USBHSCORE_DVBUSPULSE_DVBUSPULSE_Pos (0UL)
  #define USBHSCORE_DVBUSPULSE_DVBUSPULSE_Msk (0xFFFUL << USBHSCORE_DVBUSPULSE_DVBUSPULSE_Pos) /*!< Bit mask of DVBUSPULSE
                                                                            field.*/


/* USBHSCORE_DTHRCTL: Device Threshold Control Register */
  #define USBHSCORE_DTHRCTL_ResetValue (0x08100020UL)

/* NONISOTHREN @Bit 0 : Non-ISO IN Endpoints Threshold Enable. (NonISOThrEn) */
  #define USBHSCORE_DTHRCTL_NONISOTHREN_Pos (0UL)
  #define USBHSCORE_DTHRCTL_NONISOTHREN_Msk (0x1UL << USBHSCORE_DTHRCTL_NONISOTHREN_Pos)
  #define USBHSCORE_DTHRCTL_NONISOTHREN_Min (0x0UL)
  #define USBHSCORE_DTHRCTL_NONISOTHREN_Max (0x1UL)
  #define USBHSCORE_DTHRCTL_NONISOTHREN_DISABLED (0x0UL)
  #define USBHSCORE_DTHRCTL_NONISOTHREN_ENABLED (0x1UL)

/* ISOTHREN @Bit 1 : (unspecified) */
  #define USBHSCORE_DTHRCTL_ISOTHREN_Pos (1UL)
  #define USBHSCORE_DTHRCTL_ISOTHREN_Msk (0x1UL << USBHSCORE_DTHRCTL_ISOTHREN_Pos)
  #define USBHSCORE_DTHRCTL_ISOTHREN_Min (0x0UL)
  #define USBHSCORE_DTHRCTL_ISOTHREN_Max (0x1UL)
  #define USBHSCORE_DTHRCTL_ISOTHREN_DISABLED (0x0UL)
  #define USBHSCORE_DTHRCTL_ISOTHREN_ENABLED (0x1UL)

/* TXTHRLEN @Bits 2..10 : Transmit Threshold Length (TxThrLen) */
  #define USBHSCORE_DTHRCTL_TXTHRLEN_Pos (2UL)
  #define USBHSCORE_DTHRCTL_TXTHRLEN_Msk (0x1FFUL << USBHSCORE_DTHRCTL_TXTHRLEN_Pos)

/* AHBTHRRATIO @Bits 11..12 : AHB Threshold Ratio (AHBThrRatio) */
  #define USBHSCORE_DTHRCTL_AHBTHRRATIO_Pos (11UL)
  #define USBHSCORE_DTHRCTL_AHBTHRRATIO_Msk (0x3UL << USBHSCORE_DTHRCTL_AHBTHRRATIO_Pos)
  #define USBHSCORE_DTHRCTL_AHBTHRRATIO_Min (0x0UL)
  #define USBHSCORE_DTHRCTL_AHBTHRRATIO_Max (0x3UL)
  #define USBHSCORE_DTHRCTL_AHBTHRRATIO_THRESZERO (0x0UL)
  #define USBHSCORE_DTHRCTL_AHBTHRRATIO_THRESONE (0x1UL)
  #define USBHSCORE_DTHRCTL_AHBTHRRATIO_THRESTWO (0x2UL)
  #define USBHSCORE_DTHRCTL_AHBTHRRATIO_THRESTHREE (0x3UL)

/* RXTHREN @Bit 16 : Receive Threshold Enable (RxThrEn) */
  #define USBHSCORE_DTHRCTL_RXTHREN_Pos (16UL)
  #define USBHSCORE_DTHRCTL_RXTHREN_Msk (0x1UL << USBHSCORE_DTHRCTL_RXTHREN_Pos)
  #define USBHSCORE_DTHRCTL_RXTHREN_Min (0x0UL)
  #define USBHSCORE_DTHRCTL_RXTHREN_Max (0x1UL)
  #define USBHSCORE_DTHRCTL_RXTHREN_DISABLED (0x0UL)
  #define USBHSCORE_DTHRCTL_RXTHREN_ENABLED (0x1UL)

/* RXTHRLEN @Bits 17..25 : Receive Threshold Length (RxThrLen) */
  #define USBHSCORE_DTHRCTL_RXTHRLEN_Pos (17UL)
  #define USBHSCORE_DTHRCTL_RXTHRLEN_Msk (0x1FFUL << USBHSCORE_DTHRCTL_RXTHRLEN_Pos)

/* ARBPRKEN @Bit 27 : Arbiter Parking Enable (ArbPrkEn) */
  #define USBHSCORE_DTHRCTL_ARBPRKEN_Pos (27UL)
  #define USBHSCORE_DTHRCTL_ARBPRKEN_Msk (0x1UL << USBHSCORE_DTHRCTL_ARBPRKEN_Pos)
  #define USBHSCORE_DTHRCTL_ARBPRKEN_Min (0x0UL)
  #define USBHSCORE_DTHRCTL_ARBPRKEN_Max (0x1UL)
  #define USBHSCORE_DTHRCTL_ARBPRKEN_DISABLED (0x0UL)
  #define USBHSCORE_DTHRCTL_ARBPRKEN_ENABLED (0x1UL)


/* USBHSCORE_DIEPEMPMSK: Device IN Endpoint FIFO Empty Interrupt Mask Register */
  #define USBHSCORE_DIEPEMPMSK_ResetValue (0x00000000UL)

/* INEPTXFEMPMSK @Bits 0..15 : IN EP Tx FIFO Empty Interrupt Mask Bits (InEpTxfEmpMsk) */
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_Pos (0UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_Msk (0xFFFFUL << USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_Pos) /*!< Bit mask of
                                                                            INEPTXFEMPMSK field.*/
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_Min (0x1UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_Max (0x8000UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP0_MASK (0x0001UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP1_MASK (0x0002UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP2_MASK (0x0004UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP3_MASK (0x0008UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP4_MASK (0x0010UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP5_MASK (0x0020UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP6_MASK (0x0040UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP7_MASK (0x0080UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP8_MASK (0x0100UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP9_MASK (0x0200UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP10_MASK (0x0400UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP11_MASK (0x0800UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP12_MASK (0x1000UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP13_MASK (0x2000UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP14_MASK (0x4000UL)
  #define USBHSCORE_DIEPEMPMSK_INEPTXFEMPMSK_EP15_MASK (0x8000UL)


/* USBHSCORE_DIEPCTL0: Device Control IN Endpoint 0 Control Register */
  #define USBHSCORE_DIEPCTL0_ResetValue (0x00008000UL)

/* MPS @Bits 0..1 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DIEPCTL0_MPS_Pos (0UL)
  #define USBHSCORE_DIEPCTL0_MPS_Msk (0x3UL << USBHSCORE_DIEPCTL0_MPS_Pos)
  #define USBHSCORE_DIEPCTL0_MPS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL0_MPS_Max (0x3UL)
  #define USBHSCORE_DIEPCTL0_MPS_BYTES64 (0x0UL)
  #define USBHSCORE_DIEPCTL0_MPS_BYTES32 (0x1UL)
  #define USBHSCORE_DIEPCTL0_MPS_BYTES16 (0x2UL)
  #define USBHSCORE_DIEPCTL0_MPS_BYTES8 (0x3UL)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DIEPCTL0_USBACTEP_Pos (15UL)
  #define USBHSCORE_DIEPCTL0_USBACTEP_Msk (0x1UL << USBHSCORE_DIEPCTL0_USBACTEP_Pos)
  #define USBHSCORE_DIEPCTL0_USBACTEP_Min (0x1UL)
  #define USBHSCORE_DIEPCTL0_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DIEPCTL0_USBACTEP_ACTIVE0 (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DIEPCTL0_NAKSTS_Pos (17UL)
  #define USBHSCORE_DIEPCTL0_NAKSTS_Msk (0x1UL << USBHSCORE_DIEPCTL0_NAKSTS_Pos)
  #define USBHSCORE_DIEPCTL0_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL0_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL0_NAKSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL0_NAKSTS_ACTIVE (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DIEPCTL0_EPTYPE_Pos (18UL)
  #define USBHSCORE_DIEPCTL0_EPTYPE_Msk (0x3UL << USBHSCORE_DIEPCTL0_EPTYPE_Pos)
  #define USBHSCORE_DIEPCTL0_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DIEPCTL0_EPTYPE_Max (0x0UL)
  #define USBHSCORE_DIEPCTL0_EPTYPE_ACTIVE (0x0UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DIEPCTL0_STALL_Pos (21UL)
  #define USBHSCORE_DIEPCTL0_STALL_Msk (0x1UL << USBHSCORE_DIEPCTL0_STALL_Pos)
  #define USBHSCORE_DIEPCTL0_STALL_Min (0x0UL)
  #define USBHSCORE_DIEPCTL0_STALL_Max (0x1UL)
  #define USBHSCORE_DIEPCTL0_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL0_STALL_ACTIVE (0x1UL)

/* TXFNUM @Bits 22..25 : TxFIFO Number (TxFNum) */
  #define USBHSCORE_DIEPCTL0_TXFNUM_Pos (22UL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_Msk (0xFUL << USBHSCORE_DIEPCTL0_TXFNUM_Pos)
  #define USBHSCORE_DIEPCTL0_TXFNUM_Min (0x0UL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_Max (0xFUL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO0 (0x0UL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO1 (0x1UL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO2 (0x2UL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO3 (0x3UL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO4 (0x4UL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO5 (0x5UL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO6 (0x6UL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO7 (0x7UL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO8 (0x8UL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO9 (0x9UL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO10 (0xAUL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO11 (0xBUL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO12 (0xCUL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO13 (0xDUL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO14 (0xEUL)
  #define USBHSCORE_DIEPCTL0_TXFNUM_TXFIFO15 (0xFUL)

/* CNAK @Bit 26 : (unspecified) */
  #define USBHSCORE_DIEPCTL0_CNAK_Pos (26UL)
  #define USBHSCORE_DIEPCTL0_CNAK_Msk (0x1UL << USBHSCORE_DIEPCTL0_CNAK_Pos)
  #define USBHSCORE_DIEPCTL0_CNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL0_CNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL0_CNAK_NOCLEAR (0x0UL)
  #define USBHSCORE_DIEPCTL0_CNAK_CLEAR (0x1UL)

/* SNAK @Bit 27 : (unspecified) */
  #define USBHSCORE_DIEPCTL0_SNAK_Pos (27UL)
  #define USBHSCORE_DIEPCTL0_SNAK_Msk (0x1UL << USBHSCORE_DIEPCTL0_SNAK_Pos)
  #define USBHSCORE_DIEPCTL0_SNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL0_SNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL0_SNAK_NOSET (0x0UL)
  #define USBHSCORE_DIEPCTL0_SNAK_SET (0x1UL)

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DIEPCTL0_EPDIS_Pos (30UL)
  #define USBHSCORE_DIEPCTL0_EPDIS_Msk (0x1UL << USBHSCORE_DIEPCTL0_EPDIS_Pos)
  #define USBHSCORE_DIEPCTL0_EPDIS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL0_EPDIS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL0_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL0_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DIEPCTL0_EPENA_Pos (31UL)
  #define USBHSCORE_DIEPCTL0_EPENA_Msk (0x1UL << USBHSCORE_DIEPCTL0_EPENA_Pos)
  #define USBHSCORE_DIEPCTL0_EPENA_Min (0x0UL)
  #define USBHSCORE_DIEPCTL0_EPENA_Max (0x1UL)
  #define USBHSCORE_DIEPCTL0_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL0_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DIEPINT0: Device IN Endpoint 0 Interrupt Register */
  #define USBHSCORE_DIEPINT0_ResetValue (0x00000080UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DIEPINT0_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DIEPINT0_XFERCOMPL_Msk (0x1UL << USBHSCORE_DIEPINT0_XFERCOMPL_Pos)
  #define USBHSCORE_DIEPINT0_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DIEPINT0_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DIEPINT0_EPDISBLD_Msk (0x1UL << USBHSCORE_DIEPINT0_EPDISBLD_Pos)
  #define USBHSCORE_DIEPINT0_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DIEPINT0_AHBERR_Pos (2UL)
  #define USBHSCORE_DIEPINT0_AHBERR_Msk (0x1UL << USBHSCORE_DIEPINT0_AHBERR_Pos)
  #define USBHSCORE_DIEPINT0_AHBERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_AHBERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_AHBERR_ACTIVE (0x1UL)

/* TIMEOUT @Bit 3 : Timeout Condition (TimeOUT) */
  #define USBHSCORE_DIEPINT0_TIMEOUT_Pos (3UL)
  #define USBHSCORE_DIEPINT0_TIMEOUT_Msk (0x1UL << USBHSCORE_DIEPINT0_TIMEOUT_Pos)
  #define USBHSCORE_DIEPINT0_TIMEOUT_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_TIMEOUT_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_TIMEOUT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_TIMEOUT_ACTIVE (0x1UL)

/* INTKNTXFEMP @Bit 4 : IN Token Received When TxFIFO is Empty (INTknTXFEmp) */
  #define USBHSCORE_DIEPINT0_INTKNTXFEMP_Pos (4UL)
  #define USBHSCORE_DIEPINT0_INTKNTXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT0_INTKNTXFEMP_Pos)
  #define USBHSCORE_DIEPINT0_INTKNTXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_INTKNTXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_INTKNTXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_INTKNTXFEMP_ACTIVE (0x1UL)

/* INTKNEPMIS @Bit 5 : IN Token Received with EP Mismatch (INTknEPMis) */
  #define USBHSCORE_DIEPINT0_INTKNEPMIS_Pos (5UL)
  #define USBHSCORE_DIEPINT0_INTKNEPMIS_Msk (0x1UL << USBHSCORE_DIEPINT0_INTKNEPMIS_Pos)
  #define USBHSCORE_DIEPINT0_INTKNEPMIS_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_INTKNEPMIS_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_INTKNEPMIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_INTKNEPMIS_ACTIVE (0x1UL)

/* INEPNAKEFF @Bit 6 : IN Endpoint NAK Effective (INEPNakEff) */
  #define USBHSCORE_DIEPINT0_INEPNAKEFF_Pos (6UL)
  #define USBHSCORE_DIEPINT0_INEPNAKEFF_Msk (0x1UL << USBHSCORE_DIEPINT0_INEPNAKEFF_Pos)
  #define USBHSCORE_DIEPINT0_INEPNAKEFF_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_INEPNAKEFF_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_INEPNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_INEPNAKEFF_ACTIVE (0x1UL)

/* TXFEMP @Bit 7 : Transmit FIFO Empty (TxFEmp) */
  #define USBHSCORE_DIEPINT0_TXFEMP_Pos (7UL)
  #define USBHSCORE_DIEPINT0_TXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT0_TXFEMP_Pos)
  #define USBHSCORE_DIEPINT0_TXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_TXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_TXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_TXFEMP_ACTIVE (0x1UL)

/* TXFIFOUNDRN @Bit 8 : Fifo Underrun (TxfifoUndrn) */
  #define USBHSCORE_DIEPINT0_TXFIFOUNDRN_Pos (8UL)
  #define USBHSCORE_DIEPINT0_TXFIFOUNDRN_Msk (0x1UL << USBHSCORE_DIEPINT0_TXFIFOUNDRN_Pos)
  #define USBHSCORE_DIEPINT0_TXFIFOUNDRN_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_TXFIFOUNDRN_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_TXFIFOUNDRN_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_TXFIFOUNDRN_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DIEPINT0_BNAINTR_Pos (9UL)
  #define USBHSCORE_DIEPINT0_BNAINTR_Msk (0x1UL << USBHSCORE_DIEPINT0_BNAINTR_Pos)
  #define USBHSCORE_DIEPINT0_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DIEPINT0_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DIEPINT0_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DIEPINT0_PKTDRPSTS_Pos)
  #define USBHSCORE_DIEPINT0_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DIEPINT0_BBLEERR_Pos (12UL)
  #define USBHSCORE_DIEPINT0_BBLEERR_Msk (0x1UL << USBHSCORE_DIEPINT0_BBLEERR_Pos)
  #define USBHSCORE_DIEPINT0_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DIEPINT0_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DIEPINT0_NAKINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT0_NAKINTRPT_Pos)
  #define USBHSCORE_DIEPINT0_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DIEPINT0_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DIEPINT0_NYETINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT0_NYETINTRPT_Pos)
  #define USBHSCORE_DIEPINT0_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT0_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT0_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT0_NYETINTRPT_ACTIVE (0x1UL)


/* USBHSCORE_DIEPTSIZ0: Device IN Endpoint 0 Transfer Size Register */
  #define USBHSCORE_DIEPTSIZ0_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..6 : Transfer Size (XferSize) */
  #define USBHSCORE_DIEPTSIZ0_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DIEPTSIZ0_XFERSIZE_Msk (0x7FUL << USBHSCORE_DIEPTSIZ0_XFERSIZE_Pos)

/* PKTCNT @Bits 19..20 : Packet Count (PktCnt) */
  #define USBHSCORE_DIEPTSIZ0_PKTCNT_Pos (19UL)
  #define USBHSCORE_DIEPTSIZ0_PKTCNT_Msk (0x3UL << USBHSCORE_DIEPTSIZ0_PKTCNT_Pos)


/* USBHSCORE_DIEPDMA0: Device IN Endpoint 0 DMA Address Register */
  #define USBHSCORE_DIEPDMA0_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : DMAAddr */
  #define USBHSCORE_DIEPDMA0_DMAADDR_Pos (0UL)
  #define USBHSCORE_DIEPDMA0_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DIEPDMA0_DMAADDR_Pos)


/* USBHSCORE_DTXFSTS0: Device IN Endpoint Transmit FIFO Status Register 0 */
  #define USBHSCORE_DTXFSTS0_ResetValue (0x00000200UL)

/* INEPTXFSPCAVAIL @Bits 0..15 : IN Endpoint TxFIFO Space Avail (INEPTxFSpcAvail) */
  #define USBHSCORE_DTXFSTS0_INEPTXFSPCAVAIL_Pos (0UL)
  #define USBHSCORE_DTXFSTS0_INEPTXFSPCAVAIL_Msk (0xFFFFUL << USBHSCORE_DTXFSTS0_INEPTXFSPCAVAIL_Pos) /*!< Bit mask of
                                                                            INEPTXFSPCAVAIL field.*/


/* USBHSCORE_DIEPCTL1: Device Control IN Endpoint Control Register */
  #define USBHSCORE_DIEPCTL1_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DIEPCTL1_MPS_Pos (0UL)
  #define USBHSCORE_DIEPCTL1_MPS_Msk (0x7FFUL << USBHSCORE_DIEPCTL1_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DIEPCTL1_USBACTEP_Pos (15UL)
  #define USBHSCORE_DIEPCTL1_USBACTEP_Msk (0x1UL << USBHSCORE_DIEPCTL1_USBACTEP_Pos)
  #define USBHSCORE_DIEPCTL1_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DIEPCTL1_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DIEPCTL1_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL1_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : (unspecified) */
  #define USBHSCORE_DIEPCTL1_DPID_Pos (16UL)
  #define USBHSCORE_DIEPCTL1_DPID_Msk (0x1UL << USBHSCORE_DIEPCTL1_DPID_Pos)
  #define USBHSCORE_DIEPCTL1_DPID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL1_DPID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL1_DPID_DATA0EVENFRM (0x0UL)
  #define USBHSCORE_DIEPCTL1_DPID_DATA1ODDFRM (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DIEPCTL1_NAKSTS_Pos (17UL)
  #define USBHSCORE_DIEPCTL1_NAKSTS_Msk (0x1UL << USBHSCORE_DIEPCTL1_NAKSTS_Pos)
  #define USBHSCORE_DIEPCTL1_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL1_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL1_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DIEPCTL1_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DIEPCTL1_EPTYPE_Pos (18UL)
  #define USBHSCORE_DIEPCTL1_EPTYPE_Msk (0x3UL << USBHSCORE_DIEPCTL1_EPTYPE_Pos)
  #define USBHSCORE_DIEPCTL1_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DIEPCTL1_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DIEPCTL1_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DIEPCTL1_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DIEPCTL1_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DIEPCTL1_EPTYPE_INTERRUP (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DIEPCTL1_STALL_Pos (21UL)
  #define USBHSCORE_DIEPCTL1_STALL_Msk (0x1UL << USBHSCORE_DIEPCTL1_STALL_Pos)
  #define USBHSCORE_DIEPCTL1_STALL_Min (0x0UL)
  #define USBHSCORE_DIEPCTL1_STALL_Max (0x1UL)
  #define USBHSCORE_DIEPCTL1_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL1_STALL_ACTIVE (0x1UL)

/* TXFNUM @Bits 22..25 : TxFIFO Number (TxFNum) */
  #define USBHSCORE_DIEPCTL1_TXFNUM_Pos (22UL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_Msk (0xFUL << USBHSCORE_DIEPCTL1_TXFNUM_Pos)
  #define USBHSCORE_DIEPCTL1_TXFNUM_Min (0x0UL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_Max (0xFUL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO0 (0x0UL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO1 (0x1UL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO2 (0x2UL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO3 (0x3UL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO4 (0x4UL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO5 (0x5UL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO6 (0x6UL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO7 (0x7UL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO8 (0x8UL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO9 (0x9UL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO10 (0xAUL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO11 (0xBUL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO12 (0xCUL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO13 (0xDUL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO14 (0xEUL)
  #define USBHSCORE_DIEPCTL1_TXFNUM_TXFIFO15 (0xFUL)

/* CNAK @Bit 26 : Clear NAK (CNAK) */
  #define USBHSCORE_DIEPCTL1_CNAK_Pos (26UL)
  #define USBHSCORE_DIEPCTL1_CNAK_Msk (0x1UL << USBHSCORE_DIEPCTL1_CNAK_Pos)
  #define USBHSCORE_DIEPCTL1_CNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL1_CNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL1_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL1_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DIEPCTL1_SNAK_Pos (27UL)
  #define USBHSCORE_DIEPCTL1_SNAK_Msk (0x1UL << USBHSCORE_DIEPCTL1_SNAK_Pos)
  #define USBHSCORE_DIEPCTL1_SNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL1_SNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL1_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL1_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DIEPCTL1_SETD0PID_Pos (28UL)
  #define USBHSCORE_DIEPCTL1_SETD0PID_Msk (0x1UL << USBHSCORE_DIEPCTL1_SETD0PID_Pos)
  #define USBHSCORE_DIEPCTL1_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL1_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL1_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL1_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to Even
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DIEPCTL1_SETD1PID_Pos (29UL)
  #define USBHSCORE_DIEPCTL1_SETD1PID_Msk (0x1UL << USBHSCORE_DIEPCTL1_SETD1PID_Pos)
  #define USBHSCORE_DIEPCTL1_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL1_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL1_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL1_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to Odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DIEPCTL1_EPDIS_Pos (30UL)
  #define USBHSCORE_DIEPCTL1_EPDIS_Msk (0x1UL << USBHSCORE_DIEPCTL1_EPDIS_Pos)
  #define USBHSCORE_DIEPCTL1_EPDIS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL1_EPDIS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL1_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL1_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DIEPCTL1_EPENA_Pos (31UL)
  #define USBHSCORE_DIEPCTL1_EPENA_Msk (0x1UL << USBHSCORE_DIEPCTL1_EPENA_Pos)
  #define USBHSCORE_DIEPCTL1_EPENA_Min (0x0UL)
  #define USBHSCORE_DIEPCTL1_EPENA_Max (0x1UL)
  #define USBHSCORE_DIEPCTL1_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL1_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DIEPINT1: Device IN Endpoint Interrupt Register */
  #define USBHSCORE_DIEPINT1_ResetValue (0x00000080UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DIEPINT1_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DIEPINT1_XFERCOMPL_Msk (0x1UL << USBHSCORE_DIEPINT1_XFERCOMPL_Pos)
  #define USBHSCORE_DIEPINT1_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DIEPINT1_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DIEPINT1_EPDISBLD_Msk (0x1UL << USBHSCORE_DIEPINT1_EPDISBLD_Pos)
  #define USBHSCORE_DIEPINT1_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DIEPINT1_AHBERR_Pos (2UL)
  #define USBHSCORE_DIEPINT1_AHBERR_Msk (0x1UL << USBHSCORE_DIEPINT1_AHBERR_Pos)
  #define USBHSCORE_DIEPINT1_AHBERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_AHBERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_AHBERR_ACTIVE (0x1UL)

/* TIMEOUT @Bit 3 : Timeout Condition (TimeOUT) */
  #define USBHSCORE_DIEPINT1_TIMEOUT_Pos (3UL)
  #define USBHSCORE_DIEPINT1_TIMEOUT_Msk (0x1UL << USBHSCORE_DIEPINT1_TIMEOUT_Pos)
  #define USBHSCORE_DIEPINT1_TIMEOUT_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_TIMEOUT_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_TIMEOUT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_TIMEOUT_ACTIVE (0x1UL)

/* INTKNTXFEMP @Bit 4 : IN Token Received When TxFIFO is Empty (INTknTXFEmp) */
  #define USBHSCORE_DIEPINT1_INTKNTXFEMP_Pos (4UL)
  #define USBHSCORE_DIEPINT1_INTKNTXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT1_INTKNTXFEMP_Pos)
  #define USBHSCORE_DIEPINT1_INTKNTXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_INTKNTXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_INTKNTXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_INTKNTXFEMP_ACTIVE (0x1UL)

/* INTKNEPMIS @Bit 5 : IN Token Received with EP Mismatch (INTknEPMis) */
  #define USBHSCORE_DIEPINT1_INTKNEPMIS_Pos (5UL)
  #define USBHSCORE_DIEPINT1_INTKNEPMIS_Msk (0x1UL << USBHSCORE_DIEPINT1_INTKNEPMIS_Pos)
  #define USBHSCORE_DIEPINT1_INTKNEPMIS_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_INTKNEPMIS_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_INTKNEPMIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_INTKNEPMIS_ACTIVE (0x1UL)

/* INEPNAKEFF @Bit 6 : IN Endpoint NAK Effective (INEPNakEff) */
  #define USBHSCORE_DIEPINT1_INEPNAKEFF_Pos (6UL)
  #define USBHSCORE_DIEPINT1_INEPNAKEFF_Msk (0x1UL << USBHSCORE_DIEPINT1_INEPNAKEFF_Pos)
  #define USBHSCORE_DIEPINT1_INEPNAKEFF_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_INEPNAKEFF_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_INEPNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_INEPNAKEFF_ACTIVE (0x1UL)

/* TXFEMP @Bit 7 : Transmit FIFO Empty (TxFEmp) */
  #define USBHSCORE_DIEPINT1_TXFEMP_Pos (7UL)
  #define USBHSCORE_DIEPINT1_TXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT1_TXFEMP_Pos)
  #define USBHSCORE_DIEPINT1_TXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_TXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_TXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_TXFEMP_ACTIVE (0x1UL)

/* TXFIFOUNDRN @Bit 8 : Fifo Underrun (TxfifoUndrn) */
  #define USBHSCORE_DIEPINT1_TXFIFOUNDRN_Pos (8UL)
  #define USBHSCORE_DIEPINT1_TXFIFOUNDRN_Msk (0x1UL << USBHSCORE_DIEPINT1_TXFIFOUNDRN_Pos)
  #define USBHSCORE_DIEPINT1_TXFIFOUNDRN_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_TXFIFOUNDRN_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_TXFIFOUNDRN_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_TXFIFOUNDRN_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DIEPINT1_BNAINTR_Pos (9UL)
  #define USBHSCORE_DIEPINT1_BNAINTR_Msk (0x1UL << USBHSCORE_DIEPINT1_BNAINTR_Pos)
  #define USBHSCORE_DIEPINT1_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DIEPINT1_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DIEPINT1_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DIEPINT1_PKTDRPSTS_Pos)
  #define USBHSCORE_DIEPINT1_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DIEPINT1_BBLEERR_Pos (12UL)
  #define USBHSCORE_DIEPINT1_BBLEERR_Msk (0x1UL << USBHSCORE_DIEPINT1_BBLEERR_Pos)
  #define USBHSCORE_DIEPINT1_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DIEPINT1_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DIEPINT1_NAKINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT1_NAKINTRPT_Pos)
  #define USBHSCORE_DIEPINT1_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DIEPINT1_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DIEPINT1_NYETINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT1_NYETINTRPT_Pos)
  #define USBHSCORE_DIEPINT1_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT1_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT1_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT1_NYETINTRPT_ACTIVE (0x1UL)


/* USBHSCORE_DIEPTSIZ1: Device IN Endpoint Transfer Size Register */
  #define USBHSCORE_DIEPTSIZ1_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DIEPTSIZ1_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DIEPTSIZ1_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DIEPTSIZ1_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DIEPTSIZ1_PKTCNT_Pos (19UL)
  #define USBHSCORE_DIEPTSIZ1_PKTCNT_Msk (0x3FFUL << USBHSCORE_DIEPTSIZ1_PKTCNT_Pos)

/* MC @Bits 29..30 : MC */
  #define USBHSCORE_DIEPTSIZ1_MC_Pos (29UL)
  #define USBHSCORE_DIEPTSIZ1_MC_Msk (0x3UL << USBHSCORE_DIEPTSIZ1_MC_Pos)
  #define USBHSCORE_DIEPTSIZ1_MC_Min (0x1UL)
  #define USBHSCORE_DIEPTSIZ1_MC_Max (0x3UL)
  #define USBHSCORE_DIEPTSIZ1_MC_PACKETONE (0x1UL)
  #define USBHSCORE_DIEPTSIZ1_MC_PACKETTWO (0x2UL)
  #define USBHSCORE_DIEPTSIZ1_MC_PACKETTHREE (0x3UL)


/* USBHSCORE_DIEPDMA1: Device IN Endpoint DMA Address Register */
  #define USBHSCORE_DIEPDMA1_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DIEPDMA1_DMAADDR_Pos (0UL)
  #define USBHSCORE_DIEPDMA1_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DIEPDMA1_DMAADDR_Pos)


/* USBHSCORE_DTXFSTS1: Device IN Endpoint Transmit FIFO Status Register */
  #define USBHSCORE_DTXFSTS1_ResetValue (0x00000200UL)

/* INEPTXFSPCAVAIL @Bits 0..15 : IN Endpoint TxFIFO Space Avail (INEPTxFSpcAvail) */
  #define USBHSCORE_DTXFSTS1_INEPTXFSPCAVAIL_Pos (0UL)
  #define USBHSCORE_DTXFSTS1_INEPTXFSPCAVAIL_Msk (0xFFFFUL << USBHSCORE_DTXFSTS1_INEPTXFSPCAVAIL_Pos) /*!< Bit mask of
                                                                            INEPTXFSPCAVAIL field.*/


/* USBHSCORE_DIEPCTL2: Device Control IN Endpoint Control Register */
  #define USBHSCORE_DIEPCTL2_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DIEPCTL2_MPS_Pos (0UL)
  #define USBHSCORE_DIEPCTL2_MPS_Msk (0x7FFUL << USBHSCORE_DIEPCTL2_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DIEPCTL2_USBACTEP_Pos (15UL)
  #define USBHSCORE_DIEPCTL2_USBACTEP_Msk (0x1UL << USBHSCORE_DIEPCTL2_USBACTEP_Pos)
  #define USBHSCORE_DIEPCTL2_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DIEPCTL2_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DIEPCTL2_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL2_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : (unspecified) */
  #define USBHSCORE_DIEPCTL2_DPID_Pos (16UL)
  #define USBHSCORE_DIEPCTL2_DPID_Msk (0x1UL << USBHSCORE_DIEPCTL2_DPID_Pos)
  #define USBHSCORE_DIEPCTL2_DPID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL2_DPID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL2_DPID_DATA0EVENFRM (0x0UL)
  #define USBHSCORE_DIEPCTL2_DPID_DATA1ODDFRM (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DIEPCTL2_NAKSTS_Pos (17UL)
  #define USBHSCORE_DIEPCTL2_NAKSTS_Msk (0x1UL << USBHSCORE_DIEPCTL2_NAKSTS_Pos)
  #define USBHSCORE_DIEPCTL2_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL2_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL2_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DIEPCTL2_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DIEPCTL2_EPTYPE_Pos (18UL)
  #define USBHSCORE_DIEPCTL2_EPTYPE_Msk (0x3UL << USBHSCORE_DIEPCTL2_EPTYPE_Pos)
  #define USBHSCORE_DIEPCTL2_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DIEPCTL2_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DIEPCTL2_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DIEPCTL2_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DIEPCTL2_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DIEPCTL2_EPTYPE_INTERRUP (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DIEPCTL2_STALL_Pos (21UL)
  #define USBHSCORE_DIEPCTL2_STALL_Msk (0x1UL << USBHSCORE_DIEPCTL2_STALL_Pos)
  #define USBHSCORE_DIEPCTL2_STALL_Min (0x0UL)
  #define USBHSCORE_DIEPCTL2_STALL_Max (0x1UL)
  #define USBHSCORE_DIEPCTL2_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL2_STALL_ACTIVE (0x1UL)

/* TXFNUM @Bits 22..25 : TxFIFO Number (TxFNum) */
  #define USBHSCORE_DIEPCTL2_TXFNUM_Pos (22UL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_Msk (0xFUL << USBHSCORE_DIEPCTL2_TXFNUM_Pos)
  #define USBHSCORE_DIEPCTL2_TXFNUM_Min (0x0UL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_Max (0xFUL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO0 (0x0UL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO1 (0x1UL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO2 (0x2UL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO3 (0x3UL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO4 (0x4UL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO5 (0x5UL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO6 (0x6UL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO7 (0x7UL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO8 (0x8UL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO9 (0x9UL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO10 (0xAUL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO11 (0xBUL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO12 (0xCUL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO13 (0xDUL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO14 (0xEUL)
  #define USBHSCORE_DIEPCTL2_TXFNUM_TXFIFO15 (0xFUL)

/* CNAK @Bit 26 : Clear NAK (CNAK) */
  #define USBHSCORE_DIEPCTL2_CNAK_Pos (26UL)
  #define USBHSCORE_DIEPCTL2_CNAK_Msk (0x1UL << USBHSCORE_DIEPCTL2_CNAK_Pos)
  #define USBHSCORE_DIEPCTL2_CNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL2_CNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL2_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL2_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DIEPCTL2_SNAK_Pos (27UL)
  #define USBHSCORE_DIEPCTL2_SNAK_Msk (0x1UL << USBHSCORE_DIEPCTL2_SNAK_Pos)
  #define USBHSCORE_DIEPCTL2_SNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL2_SNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL2_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL2_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DIEPCTL2_SETD0PID_Pos (28UL)
  #define USBHSCORE_DIEPCTL2_SETD0PID_Msk (0x1UL << USBHSCORE_DIEPCTL2_SETD0PID_Pos)
  #define USBHSCORE_DIEPCTL2_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL2_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL2_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL2_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to Even
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DIEPCTL2_SETD1PID_Pos (29UL)
  #define USBHSCORE_DIEPCTL2_SETD1PID_Msk (0x1UL << USBHSCORE_DIEPCTL2_SETD1PID_Pos)
  #define USBHSCORE_DIEPCTL2_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL2_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL2_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL2_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to Odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DIEPCTL2_EPDIS_Pos (30UL)
  #define USBHSCORE_DIEPCTL2_EPDIS_Msk (0x1UL << USBHSCORE_DIEPCTL2_EPDIS_Pos)
  #define USBHSCORE_DIEPCTL2_EPDIS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL2_EPDIS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL2_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL2_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DIEPCTL2_EPENA_Pos (31UL)
  #define USBHSCORE_DIEPCTL2_EPENA_Msk (0x1UL << USBHSCORE_DIEPCTL2_EPENA_Pos)
  #define USBHSCORE_DIEPCTL2_EPENA_Min (0x0UL)
  #define USBHSCORE_DIEPCTL2_EPENA_Max (0x1UL)
  #define USBHSCORE_DIEPCTL2_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL2_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DIEPINT2: Device IN Endpoint Interrupt Register */
  #define USBHSCORE_DIEPINT2_ResetValue (0x00000080UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DIEPINT2_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DIEPINT2_XFERCOMPL_Msk (0x1UL << USBHSCORE_DIEPINT2_XFERCOMPL_Pos)
  #define USBHSCORE_DIEPINT2_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DIEPINT2_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DIEPINT2_EPDISBLD_Msk (0x1UL << USBHSCORE_DIEPINT2_EPDISBLD_Pos)
  #define USBHSCORE_DIEPINT2_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DIEPINT2_AHBERR_Pos (2UL)
  #define USBHSCORE_DIEPINT2_AHBERR_Msk (0x1UL << USBHSCORE_DIEPINT2_AHBERR_Pos)
  #define USBHSCORE_DIEPINT2_AHBERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_AHBERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_AHBERR_ACTIVE (0x1UL)

/* TIMEOUT @Bit 3 : Timeout Condition (TimeOUT) */
  #define USBHSCORE_DIEPINT2_TIMEOUT_Pos (3UL)
  #define USBHSCORE_DIEPINT2_TIMEOUT_Msk (0x1UL << USBHSCORE_DIEPINT2_TIMEOUT_Pos)
  #define USBHSCORE_DIEPINT2_TIMEOUT_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_TIMEOUT_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_TIMEOUT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_TIMEOUT_ACTIVE (0x1UL)

/* INTKNTXFEMP @Bit 4 : IN Token Received When TxFIFO is Empty (INTknTXFEmp) */
  #define USBHSCORE_DIEPINT2_INTKNTXFEMP_Pos (4UL)
  #define USBHSCORE_DIEPINT2_INTKNTXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT2_INTKNTXFEMP_Pos)
  #define USBHSCORE_DIEPINT2_INTKNTXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_INTKNTXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_INTKNTXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_INTKNTXFEMP_ACTIVE (0x1UL)

/* INTKNEPMIS @Bit 5 : IN Token Received with EP Mismatch (INTknEPMis) */
  #define USBHSCORE_DIEPINT2_INTKNEPMIS_Pos (5UL)
  #define USBHSCORE_DIEPINT2_INTKNEPMIS_Msk (0x1UL << USBHSCORE_DIEPINT2_INTKNEPMIS_Pos)
  #define USBHSCORE_DIEPINT2_INTKNEPMIS_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_INTKNEPMIS_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_INTKNEPMIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_INTKNEPMIS_ACTIVE (0x1UL)

/* INEPNAKEFF @Bit 6 : IN Endpoint NAK Effective (INEPNakEff) */
  #define USBHSCORE_DIEPINT2_INEPNAKEFF_Pos (6UL)
  #define USBHSCORE_DIEPINT2_INEPNAKEFF_Msk (0x1UL << USBHSCORE_DIEPINT2_INEPNAKEFF_Pos)
  #define USBHSCORE_DIEPINT2_INEPNAKEFF_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_INEPNAKEFF_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_INEPNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_INEPNAKEFF_ACTIVE (0x1UL)

/* TXFEMP @Bit 7 : Transmit FIFO Empty (TxFEmp) */
  #define USBHSCORE_DIEPINT2_TXFEMP_Pos (7UL)
  #define USBHSCORE_DIEPINT2_TXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT2_TXFEMP_Pos)
  #define USBHSCORE_DIEPINT2_TXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_TXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_TXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_TXFEMP_ACTIVE (0x1UL)

/* TXFIFOUNDRN @Bit 8 : Fifo Underrun (TxfifoUndrn) */
  #define USBHSCORE_DIEPINT2_TXFIFOUNDRN_Pos (8UL)
  #define USBHSCORE_DIEPINT2_TXFIFOUNDRN_Msk (0x1UL << USBHSCORE_DIEPINT2_TXFIFOUNDRN_Pos)
  #define USBHSCORE_DIEPINT2_TXFIFOUNDRN_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_TXFIFOUNDRN_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_TXFIFOUNDRN_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_TXFIFOUNDRN_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DIEPINT2_BNAINTR_Pos (9UL)
  #define USBHSCORE_DIEPINT2_BNAINTR_Msk (0x1UL << USBHSCORE_DIEPINT2_BNAINTR_Pos)
  #define USBHSCORE_DIEPINT2_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DIEPINT2_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DIEPINT2_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DIEPINT2_PKTDRPSTS_Pos)
  #define USBHSCORE_DIEPINT2_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DIEPINT2_BBLEERR_Pos (12UL)
  #define USBHSCORE_DIEPINT2_BBLEERR_Msk (0x1UL << USBHSCORE_DIEPINT2_BBLEERR_Pos)
  #define USBHSCORE_DIEPINT2_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DIEPINT2_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DIEPINT2_NAKINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT2_NAKINTRPT_Pos)
  #define USBHSCORE_DIEPINT2_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DIEPINT2_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DIEPINT2_NYETINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT2_NYETINTRPT_Pos)
  #define USBHSCORE_DIEPINT2_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT2_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT2_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT2_NYETINTRPT_ACTIVE (0x1UL)


/* USBHSCORE_DIEPTSIZ2: Device IN Endpoint Transfer Size Register */
  #define USBHSCORE_DIEPTSIZ2_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DIEPTSIZ2_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DIEPTSIZ2_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DIEPTSIZ2_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DIEPTSIZ2_PKTCNT_Pos (19UL)
  #define USBHSCORE_DIEPTSIZ2_PKTCNT_Msk (0x3FFUL << USBHSCORE_DIEPTSIZ2_PKTCNT_Pos)

/* MC @Bits 29..30 : MC */
  #define USBHSCORE_DIEPTSIZ2_MC_Pos (29UL)
  #define USBHSCORE_DIEPTSIZ2_MC_Msk (0x3UL << USBHSCORE_DIEPTSIZ2_MC_Pos)
  #define USBHSCORE_DIEPTSIZ2_MC_Min (0x1UL)
  #define USBHSCORE_DIEPTSIZ2_MC_Max (0x3UL)
  #define USBHSCORE_DIEPTSIZ2_MC_PACKETONE (0x1UL)
  #define USBHSCORE_DIEPTSIZ2_MC_PACKETTWO (0x2UL)
  #define USBHSCORE_DIEPTSIZ2_MC_PACKETTHREE (0x3UL)


/* USBHSCORE_DIEPDMA2: Device IN Endpoint DMA Address Register */
  #define USBHSCORE_DIEPDMA2_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DIEPDMA2_DMAADDR_Pos (0UL)
  #define USBHSCORE_DIEPDMA2_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DIEPDMA2_DMAADDR_Pos)


/* USBHSCORE_DTXFSTS2: Device IN Endpoint Transmit FIFO Status Register */
  #define USBHSCORE_DTXFSTS2_ResetValue (0x00000200UL)

/* INEPTXFSPCAVAIL @Bits 0..15 : IN Endpoint TxFIFO Space Avail (INEPTxFSpcAvail) */
  #define USBHSCORE_DTXFSTS2_INEPTXFSPCAVAIL_Pos (0UL)
  #define USBHSCORE_DTXFSTS2_INEPTXFSPCAVAIL_Msk (0xFFFFUL << USBHSCORE_DTXFSTS2_INEPTXFSPCAVAIL_Pos) /*!< Bit mask of
                                                                            INEPTXFSPCAVAIL field.*/


/* USBHSCORE_DIEPCTL3: Device Control IN Endpoint Control Register */
  #define USBHSCORE_DIEPCTL3_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DIEPCTL3_MPS_Pos (0UL)
  #define USBHSCORE_DIEPCTL3_MPS_Msk (0x7FFUL << USBHSCORE_DIEPCTL3_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DIEPCTL3_USBACTEP_Pos (15UL)
  #define USBHSCORE_DIEPCTL3_USBACTEP_Msk (0x1UL << USBHSCORE_DIEPCTL3_USBACTEP_Pos)
  #define USBHSCORE_DIEPCTL3_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DIEPCTL3_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DIEPCTL3_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL3_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : (unspecified) */
  #define USBHSCORE_DIEPCTL3_DPID_Pos (16UL)
  #define USBHSCORE_DIEPCTL3_DPID_Msk (0x1UL << USBHSCORE_DIEPCTL3_DPID_Pos)
  #define USBHSCORE_DIEPCTL3_DPID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL3_DPID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL3_DPID_DATA0EVENFRM (0x0UL)
  #define USBHSCORE_DIEPCTL3_DPID_DATA1ODDFRM (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DIEPCTL3_NAKSTS_Pos (17UL)
  #define USBHSCORE_DIEPCTL3_NAKSTS_Msk (0x1UL << USBHSCORE_DIEPCTL3_NAKSTS_Pos)
  #define USBHSCORE_DIEPCTL3_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL3_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL3_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DIEPCTL3_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DIEPCTL3_EPTYPE_Pos (18UL)
  #define USBHSCORE_DIEPCTL3_EPTYPE_Msk (0x3UL << USBHSCORE_DIEPCTL3_EPTYPE_Pos)
  #define USBHSCORE_DIEPCTL3_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DIEPCTL3_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DIEPCTL3_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DIEPCTL3_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DIEPCTL3_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DIEPCTL3_EPTYPE_INTERRUP (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DIEPCTL3_STALL_Pos (21UL)
  #define USBHSCORE_DIEPCTL3_STALL_Msk (0x1UL << USBHSCORE_DIEPCTL3_STALL_Pos)
  #define USBHSCORE_DIEPCTL3_STALL_Min (0x0UL)
  #define USBHSCORE_DIEPCTL3_STALL_Max (0x1UL)
  #define USBHSCORE_DIEPCTL3_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL3_STALL_ACTIVE (0x1UL)

/* TXFNUM @Bits 22..25 : TxFIFO Number (TxFNum) */
  #define USBHSCORE_DIEPCTL3_TXFNUM_Pos (22UL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_Msk (0xFUL << USBHSCORE_DIEPCTL3_TXFNUM_Pos)
  #define USBHSCORE_DIEPCTL3_TXFNUM_Min (0x0UL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_Max (0xFUL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO0 (0x0UL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO1 (0x1UL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO2 (0x2UL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO3 (0x3UL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO4 (0x4UL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO5 (0x5UL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO6 (0x6UL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO7 (0x7UL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO8 (0x8UL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO9 (0x9UL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO10 (0xAUL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO11 (0xBUL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO12 (0xCUL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO13 (0xDUL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO14 (0xEUL)
  #define USBHSCORE_DIEPCTL3_TXFNUM_TXFIFO15 (0xFUL)

/* CNAK @Bit 26 : Clear NAK (CNAK) */
  #define USBHSCORE_DIEPCTL3_CNAK_Pos (26UL)
  #define USBHSCORE_DIEPCTL3_CNAK_Msk (0x1UL << USBHSCORE_DIEPCTL3_CNAK_Pos)
  #define USBHSCORE_DIEPCTL3_CNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL3_CNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL3_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL3_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DIEPCTL3_SNAK_Pos (27UL)
  #define USBHSCORE_DIEPCTL3_SNAK_Msk (0x1UL << USBHSCORE_DIEPCTL3_SNAK_Pos)
  #define USBHSCORE_DIEPCTL3_SNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL3_SNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL3_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL3_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DIEPCTL3_SETD0PID_Pos (28UL)
  #define USBHSCORE_DIEPCTL3_SETD0PID_Msk (0x1UL << USBHSCORE_DIEPCTL3_SETD0PID_Pos)
  #define USBHSCORE_DIEPCTL3_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL3_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL3_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL3_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to Even
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DIEPCTL3_SETD1PID_Pos (29UL)
  #define USBHSCORE_DIEPCTL3_SETD1PID_Msk (0x1UL << USBHSCORE_DIEPCTL3_SETD1PID_Pos)
  #define USBHSCORE_DIEPCTL3_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL3_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL3_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL3_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to Odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DIEPCTL3_EPDIS_Pos (30UL)
  #define USBHSCORE_DIEPCTL3_EPDIS_Msk (0x1UL << USBHSCORE_DIEPCTL3_EPDIS_Pos)
  #define USBHSCORE_DIEPCTL3_EPDIS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL3_EPDIS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL3_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL3_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DIEPCTL3_EPENA_Pos (31UL)
  #define USBHSCORE_DIEPCTL3_EPENA_Msk (0x1UL << USBHSCORE_DIEPCTL3_EPENA_Pos)
  #define USBHSCORE_DIEPCTL3_EPENA_Min (0x0UL)
  #define USBHSCORE_DIEPCTL3_EPENA_Max (0x1UL)
  #define USBHSCORE_DIEPCTL3_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL3_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DIEPINT3: Device IN Endpoint Interrupt Register */
  #define USBHSCORE_DIEPINT3_ResetValue (0x00000080UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DIEPINT3_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DIEPINT3_XFERCOMPL_Msk (0x1UL << USBHSCORE_DIEPINT3_XFERCOMPL_Pos)
  #define USBHSCORE_DIEPINT3_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DIEPINT3_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DIEPINT3_EPDISBLD_Msk (0x1UL << USBHSCORE_DIEPINT3_EPDISBLD_Pos)
  #define USBHSCORE_DIEPINT3_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DIEPINT3_AHBERR_Pos (2UL)
  #define USBHSCORE_DIEPINT3_AHBERR_Msk (0x1UL << USBHSCORE_DIEPINT3_AHBERR_Pos)
  #define USBHSCORE_DIEPINT3_AHBERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_AHBERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_AHBERR_ACTIVE (0x1UL)

/* TIMEOUT @Bit 3 : Timeout Condition (TimeOUT) */
  #define USBHSCORE_DIEPINT3_TIMEOUT_Pos (3UL)
  #define USBHSCORE_DIEPINT3_TIMEOUT_Msk (0x1UL << USBHSCORE_DIEPINT3_TIMEOUT_Pos)
  #define USBHSCORE_DIEPINT3_TIMEOUT_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_TIMEOUT_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_TIMEOUT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_TIMEOUT_ACTIVE (0x1UL)

/* INTKNTXFEMP @Bit 4 : IN Token Received When TxFIFO is Empty (INTknTXFEmp) */
  #define USBHSCORE_DIEPINT3_INTKNTXFEMP_Pos (4UL)
  #define USBHSCORE_DIEPINT3_INTKNTXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT3_INTKNTXFEMP_Pos)
  #define USBHSCORE_DIEPINT3_INTKNTXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_INTKNTXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_INTKNTXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_INTKNTXFEMP_ACTIVE (0x1UL)

/* INTKNEPMIS @Bit 5 : IN Token Received with EP Mismatch (INTknEPMis) */
  #define USBHSCORE_DIEPINT3_INTKNEPMIS_Pos (5UL)
  #define USBHSCORE_DIEPINT3_INTKNEPMIS_Msk (0x1UL << USBHSCORE_DIEPINT3_INTKNEPMIS_Pos)
  #define USBHSCORE_DIEPINT3_INTKNEPMIS_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_INTKNEPMIS_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_INTKNEPMIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_INTKNEPMIS_ACTIVE (0x1UL)

/* INEPNAKEFF @Bit 6 : IN Endpoint NAK Effective (INEPNakEff) */
  #define USBHSCORE_DIEPINT3_INEPNAKEFF_Pos (6UL)
  #define USBHSCORE_DIEPINT3_INEPNAKEFF_Msk (0x1UL << USBHSCORE_DIEPINT3_INEPNAKEFF_Pos)
  #define USBHSCORE_DIEPINT3_INEPNAKEFF_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_INEPNAKEFF_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_INEPNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_INEPNAKEFF_ACTIVE (0x1UL)

/* TXFEMP @Bit 7 : Transmit FIFO Empty (TxFEmp) */
  #define USBHSCORE_DIEPINT3_TXFEMP_Pos (7UL)
  #define USBHSCORE_DIEPINT3_TXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT3_TXFEMP_Pos)
  #define USBHSCORE_DIEPINT3_TXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_TXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_TXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_TXFEMP_ACTIVE (0x1UL)

/* TXFIFOUNDRN @Bit 8 : Fifo Underrun (TxfifoUndrn) */
  #define USBHSCORE_DIEPINT3_TXFIFOUNDRN_Pos (8UL)
  #define USBHSCORE_DIEPINT3_TXFIFOUNDRN_Msk (0x1UL << USBHSCORE_DIEPINT3_TXFIFOUNDRN_Pos)
  #define USBHSCORE_DIEPINT3_TXFIFOUNDRN_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_TXFIFOUNDRN_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_TXFIFOUNDRN_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_TXFIFOUNDRN_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DIEPINT3_BNAINTR_Pos (9UL)
  #define USBHSCORE_DIEPINT3_BNAINTR_Msk (0x1UL << USBHSCORE_DIEPINT3_BNAINTR_Pos)
  #define USBHSCORE_DIEPINT3_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DIEPINT3_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DIEPINT3_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DIEPINT3_PKTDRPSTS_Pos)
  #define USBHSCORE_DIEPINT3_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DIEPINT3_BBLEERR_Pos (12UL)
  #define USBHSCORE_DIEPINT3_BBLEERR_Msk (0x1UL << USBHSCORE_DIEPINT3_BBLEERR_Pos)
  #define USBHSCORE_DIEPINT3_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DIEPINT3_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DIEPINT3_NAKINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT3_NAKINTRPT_Pos)
  #define USBHSCORE_DIEPINT3_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DIEPINT3_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DIEPINT3_NYETINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT3_NYETINTRPT_Pos)
  #define USBHSCORE_DIEPINT3_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT3_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT3_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT3_NYETINTRPT_ACTIVE (0x1UL)


/* USBHSCORE_DIEPTSIZ3: Device IN Endpoint Transfer Size Register */
  #define USBHSCORE_DIEPTSIZ3_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DIEPTSIZ3_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DIEPTSIZ3_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DIEPTSIZ3_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DIEPTSIZ3_PKTCNT_Pos (19UL)
  #define USBHSCORE_DIEPTSIZ3_PKTCNT_Msk (0x3FFUL << USBHSCORE_DIEPTSIZ3_PKTCNT_Pos)

/* MC @Bits 29..30 : MC */
  #define USBHSCORE_DIEPTSIZ3_MC_Pos (29UL)
  #define USBHSCORE_DIEPTSIZ3_MC_Msk (0x3UL << USBHSCORE_DIEPTSIZ3_MC_Pos)
  #define USBHSCORE_DIEPTSIZ3_MC_Min (0x1UL)
  #define USBHSCORE_DIEPTSIZ3_MC_Max (0x3UL)
  #define USBHSCORE_DIEPTSIZ3_MC_PACKETONE (0x1UL)
  #define USBHSCORE_DIEPTSIZ3_MC_PACKETTWO (0x2UL)
  #define USBHSCORE_DIEPTSIZ3_MC_PACKETTHREE (0x3UL)


/* USBHSCORE_DIEPDMA3: Device IN Endpoint DMA Address Register */
  #define USBHSCORE_DIEPDMA3_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DIEPDMA3_DMAADDR_Pos (0UL)
  #define USBHSCORE_DIEPDMA3_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DIEPDMA3_DMAADDR_Pos)


/* USBHSCORE_DTXFSTS3: Device IN Endpoint Transmit FIFO Status Register */
  #define USBHSCORE_DTXFSTS3_ResetValue (0x00000200UL)

/* INEPTXFSPCAVAIL @Bits 0..15 : IN Endpoint TxFIFO Space Avail (INEPTxFSpcAvail) */
  #define USBHSCORE_DTXFSTS3_INEPTXFSPCAVAIL_Pos (0UL)
  #define USBHSCORE_DTXFSTS3_INEPTXFSPCAVAIL_Msk (0xFFFFUL << USBHSCORE_DTXFSTS3_INEPTXFSPCAVAIL_Pos) /*!< Bit mask of
                                                                            INEPTXFSPCAVAIL field.*/


/* USBHSCORE_DIEPCTL4: Device Control IN Endpoint Control Register */
  #define USBHSCORE_DIEPCTL4_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DIEPCTL4_MPS_Pos (0UL)
  #define USBHSCORE_DIEPCTL4_MPS_Msk (0x7FFUL << USBHSCORE_DIEPCTL4_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DIEPCTL4_USBACTEP_Pos (15UL)
  #define USBHSCORE_DIEPCTL4_USBACTEP_Msk (0x1UL << USBHSCORE_DIEPCTL4_USBACTEP_Pos)
  #define USBHSCORE_DIEPCTL4_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DIEPCTL4_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DIEPCTL4_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL4_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : (unspecified) */
  #define USBHSCORE_DIEPCTL4_DPID_Pos (16UL)
  #define USBHSCORE_DIEPCTL4_DPID_Msk (0x1UL << USBHSCORE_DIEPCTL4_DPID_Pos)
  #define USBHSCORE_DIEPCTL4_DPID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL4_DPID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL4_DPID_DATA0EVENFRM (0x0UL)
  #define USBHSCORE_DIEPCTL4_DPID_DATA1ODDFRM (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DIEPCTL4_NAKSTS_Pos (17UL)
  #define USBHSCORE_DIEPCTL4_NAKSTS_Msk (0x1UL << USBHSCORE_DIEPCTL4_NAKSTS_Pos)
  #define USBHSCORE_DIEPCTL4_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL4_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL4_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DIEPCTL4_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DIEPCTL4_EPTYPE_Pos (18UL)
  #define USBHSCORE_DIEPCTL4_EPTYPE_Msk (0x3UL << USBHSCORE_DIEPCTL4_EPTYPE_Pos)
  #define USBHSCORE_DIEPCTL4_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DIEPCTL4_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DIEPCTL4_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DIEPCTL4_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DIEPCTL4_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DIEPCTL4_EPTYPE_INTERRUP (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DIEPCTL4_STALL_Pos (21UL)
  #define USBHSCORE_DIEPCTL4_STALL_Msk (0x1UL << USBHSCORE_DIEPCTL4_STALL_Pos)
  #define USBHSCORE_DIEPCTL4_STALL_Min (0x0UL)
  #define USBHSCORE_DIEPCTL4_STALL_Max (0x1UL)
  #define USBHSCORE_DIEPCTL4_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL4_STALL_ACTIVE (0x1UL)

/* TXFNUM @Bits 22..25 : TxFIFO Number (TxFNum) */
  #define USBHSCORE_DIEPCTL4_TXFNUM_Pos (22UL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_Msk (0xFUL << USBHSCORE_DIEPCTL4_TXFNUM_Pos)
  #define USBHSCORE_DIEPCTL4_TXFNUM_Min (0x0UL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_Max (0xFUL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO0 (0x0UL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO1 (0x1UL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO2 (0x2UL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO3 (0x3UL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO4 (0x4UL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO5 (0x5UL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO6 (0x6UL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO7 (0x7UL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO8 (0x8UL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO9 (0x9UL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO10 (0xAUL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO11 (0xBUL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO12 (0xCUL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO13 (0xDUL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO14 (0xEUL)
  #define USBHSCORE_DIEPCTL4_TXFNUM_TXFIFO15 (0xFUL)

/* CNAK @Bit 26 : Clear NAK (CNAK) */
  #define USBHSCORE_DIEPCTL4_CNAK_Pos (26UL)
  #define USBHSCORE_DIEPCTL4_CNAK_Msk (0x1UL << USBHSCORE_DIEPCTL4_CNAK_Pos)
  #define USBHSCORE_DIEPCTL4_CNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL4_CNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL4_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL4_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DIEPCTL4_SNAK_Pos (27UL)
  #define USBHSCORE_DIEPCTL4_SNAK_Msk (0x1UL << USBHSCORE_DIEPCTL4_SNAK_Pos)
  #define USBHSCORE_DIEPCTL4_SNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL4_SNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL4_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL4_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DIEPCTL4_SETD0PID_Pos (28UL)
  #define USBHSCORE_DIEPCTL4_SETD0PID_Msk (0x1UL << USBHSCORE_DIEPCTL4_SETD0PID_Pos)
  #define USBHSCORE_DIEPCTL4_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL4_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL4_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL4_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to Even
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DIEPCTL4_SETD1PID_Pos (29UL)
  #define USBHSCORE_DIEPCTL4_SETD1PID_Msk (0x1UL << USBHSCORE_DIEPCTL4_SETD1PID_Pos)
  #define USBHSCORE_DIEPCTL4_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL4_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL4_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL4_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to Odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DIEPCTL4_EPDIS_Pos (30UL)
  #define USBHSCORE_DIEPCTL4_EPDIS_Msk (0x1UL << USBHSCORE_DIEPCTL4_EPDIS_Pos)
  #define USBHSCORE_DIEPCTL4_EPDIS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL4_EPDIS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL4_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL4_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DIEPCTL4_EPENA_Pos (31UL)
  #define USBHSCORE_DIEPCTL4_EPENA_Msk (0x1UL << USBHSCORE_DIEPCTL4_EPENA_Pos)
  #define USBHSCORE_DIEPCTL4_EPENA_Min (0x0UL)
  #define USBHSCORE_DIEPCTL4_EPENA_Max (0x1UL)
  #define USBHSCORE_DIEPCTL4_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL4_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DIEPINT4: Device IN Endpoint Interrupt Register */
  #define USBHSCORE_DIEPINT4_ResetValue (0x00000080UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DIEPINT4_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DIEPINT4_XFERCOMPL_Msk (0x1UL << USBHSCORE_DIEPINT4_XFERCOMPL_Pos)
  #define USBHSCORE_DIEPINT4_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DIEPINT4_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DIEPINT4_EPDISBLD_Msk (0x1UL << USBHSCORE_DIEPINT4_EPDISBLD_Pos)
  #define USBHSCORE_DIEPINT4_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DIEPINT4_AHBERR_Pos (2UL)
  #define USBHSCORE_DIEPINT4_AHBERR_Msk (0x1UL << USBHSCORE_DIEPINT4_AHBERR_Pos)
  #define USBHSCORE_DIEPINT4_AHBERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_AHBERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_AHBERR_ACTIVE (0x1UL)

/* TIMEOUT @Bit 3 : Timeout Condition (TimeOUT) */
  #define USBHSCORE_DIEPINT4_TIMEOUT_Pos (3UL)
  #define USBHSCORE_DIEPINT4_TIMEOUT_Msk (0x1UL << USBHSCORE_DIEPINT4_TIMEOUT_Pos)
  #define USBHSCORE_DIEPINT4_TIMEOUT_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_TIMEOUT_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_TIMEOUT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_TIMEOUT_ACTIVE (0x1UL)

/* INTKNTXFEMP @Bit 4 : IN Token Received When TxFIFO is Empty (INTknTXFEmp) */
  #define USBHSCORE_DIEPINT4_INTKNTXFEMP_Pos (4UL)
  #define USBHSCORE_DIEPINT4_INTKNTXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT4_INTKNTXFEMP_Pos)
  #define USBHSCORE_DIEPINT4_INTKNTXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_INTKNTXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_INTKNTXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_INTKNTXFEMP_ACTIVE (0x1UL)

/* INTKNEPMIS @Bit 5 : IN Token Received with EP Mismatch (INTknEPMis) */
  #define USBHSCORE_DIEPINT4_INTKNEPMIS_Pos (5UL)
  #define USBHSCORE_DIEPINT4_INTKNEPMIS_Msk (0x1UL << USBHSCORE_DIEPINT4_INTKNEPMIS_Pos)
  #define USBHSCORE_DIEPINT4_INTKNEPMIS_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_INTKNEPMIS_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_INTKNEPMIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_INTKNEPMIS_ACTIVE (0x1UL)

/* INEPNAKEFF @Bit 6 : IN Endpoint NAK Effective (INEPNakEff) */
  #define USBHSCORE_DIEPINT4_INEPNAKEFF_Pos (6UL)
  #define USBHSCORE_DIEPINT4_INEPNAKEFF_Msk (0x1UL << USBHSCORE_DIEPINT4_INEPNAKEFF_Pos)
  #define USBHSCORE_DIEPINT4_INEPNAKEFF_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_INEPNAKEFF_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_INEPNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_INEPNAKEFF_ACTIVE (0x1UL)

/* TXFEMP @Bit 7 : Transmit FIFO Empty (TxFEmp) */
  #define USBHSCORE_DIEPINT4_TXFEMP_Pos (7UL)
  #define USBHSCORE_DIEPINT4_TXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT4_TXFEMP_Pos)
  #define USBHSCORE_DIEPINT4_TXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_TXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_TXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_TXFEMP_ACTIVE (0x1UL)

/* TXFIFOUNDRN @Bit 8 : Fifo Underrun (TxfifoUndrn) */
  #define USBHSCORE_DIEPINT4_TXFIFOUNDRN_Pos (8UL)
  #define USBHSCORE_DIEPINT4_TXFIFOUNDRN_Msk (0x1UL << USBHSCORE_DIEPINT4_TXFIFOUNDRN_Pos)
  #define USBHSCORE_DIEPINT4_TXFIFOUNDRN_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_TXFIFOUNDRN_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_TXFIFOUNDRN_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_TXFIFOUNDRN_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DIEPINT4_BNAINTR_Pos (9UL)
  #define USBHSCORE_DIEPINT4_BNAINTR_Msk (0x1UL << USBHSCORE_DIEPINT4_BNAINTR_Pos)
  #define USBHSCORE_DIEPINT4_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DIEPINT4_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DIEPINT4_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DIEPINT4_PKTDRPSTS_Pos)
  #define USBHSCORE_DIEPINT4_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DIEPINT4_BBLEERR_Pos (12UL)
  #define USBHSCORE_DIEPINT4_BBLEERR_Msk (0x1UL << USBHSCORE_DIEPINT4_BBLEERR_Pos)
  #define USBHSCORE_DIEPINT4_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DIEPINT4_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DIEPINT4_NAKINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT4_NAKINTRPT_Pos)
  #define USBHSCORE_DIEPINT4_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DIEPINT4_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DIEPINT4_NYETINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT4_NYETINTRPT_Pos)
  #define USBHSCORE_DIEPINT4_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT4_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT4_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT4_NYETINTRPT_ACTIVE (0x1UL)


/* USBHSCORE_DIEPTSIZ4: Device IN Endpoint Transfer Size Register */
  #define USBHSCORE_DIEPTSIZ4_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DIEPTSIZ4_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DIEPTSIZ4_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DIEPTSIZ4_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DIEPTSIZ4_PKTCNT_Pos (19UL)
  #define USBHSCORE_DIEPTSIZ4_PKTCNT_Msk (0x3FFUL << USBHSCORE_DIEPTSIZ4_PKTCNT_Pos)

/* MC @Bits 29..30 : MC */
  #define USBHSCORE_DIEPTSIZ4_MC_Pos (29UL)
  #define USBHSCORE_DIEPTSIZ4_MC_Msk (0x3UL << USBHSCORE_DIEPTSIZ4_MC_Pos)
  #define USBHSCORE_DIEPTSIZ4_MC_Min (0x1UL)
  #define USBHSCORE_DIEPTSIZ4_MC_Max (0x3UL)
  #define USBHSCORE_DIEPTSIZ4_MC_PACKETONE (0x1UL)
  #define USBHSCORE_DIEPTSIZ4_MC_PACKETTWO (0x2UL)
  #define USBHSCORE_DIEPTSIZ4_MC_PACKETTHREE (0x3UL)


/* USBHSCORE_DIEPDMA4: Device IN Endpoint DMA Address Register */
  #define USBHSCORE_DIEPDMA4_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DIEPDMA4_DMAADDR_Pos (0UL)
  #define USBHSCORE_DIEPDMA4_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DIEPDMA4_DMAADDR_Pos)


/* USBHSCORE_DTXFSTS4: Device IN Endpoint Transmit FIFO Status Register */
  #define USBHSCORE_DTXFSTS4_ResetValue (0x00000200UL)

/* INEPTXFSPCAVAIL @Bits 0..15 : IN Endpoint TxFIFO Space Avail (INEPTxFSpcAvail) */
  #define USBHSCORE_DTXFSTS4_INEPTXFSPCAVAIL_Pos (0UL)
  #define USBHSCORE_DTXFSTS4_INEPTXFSPCAVAIL_Msk (0xFFFFUL << USBHSCORE_DTXFSTS4_INEPTXFSPCAVAIL_Pos) /*!< Bit mask of
                                                                            INEPTXFSPCAVAIL field.*/


/* USBHSCORE_DIEPCTL5: Device Control IN Endpoint Control Register */
  #define USBHSCORE_DIEPCTL5_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DIEPCTL5_MPS_Pos (0UL)
  #define USBHSCORE_DIEPCTL5_MPS_Msk (0x7FFUL << USBHSCORE_DIEPCTL5_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DIEPCTL5_USBACTEP_Pos (15UL)
  #define USBHSCORE_DIEPCTL5_USBACTEP_Msk (0x1UL << USBHSCORE_DIEPCTL5_USBACTEP_Pos)
  #define USBHSCORE_DIEPCTL5_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DIEPCTL5_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DIEPCTL5_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL5_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : (unspecified) */
  #define USBHSCORE_DIEPCTL5_DPID_Pos (16UL)
  #define USBHSCORE_DIEPCTL5_DPID_Msk (0x1UL << USBHSCORE_DIEPCTL5_DPID_Pos)
  #define USBHSCORE_DIEPCTL5_DPID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL5_DPID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL5_DPID_DATA0EVENFRM (0x0UL)
  #define USBHSCORE_DIEPCTL5_DPID_DATA1ODDFRM (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DIEPCTL5_NAKSTS_Pos (17UL)
  #define USBHSCORE_DIEPCTL5_NAKSTS_Msk (0x1UL << USBHSCORE_DIEPCTL5_NAKSTS_Pos)
  #define USBHSCORE_DIEPCTL5_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL5_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL5_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DIEPCTL5_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DIEPCTL5_EPTYPE_Pos (18UL)
  #define USBHSCORE_DIEPCTL5_EPTYPE_Msk (0x3UL << USBHSCORE_DIEPCTL5_EPTYPE_Pos)
  #define USBHSCORE_DIEPCTL5_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DIEPCTL5_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DIEPCTL5_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DIEPCTL5_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DIEPCTL5_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DIEPCTL5_EPTYPE_INTERRUP (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DIEPCTL5_STALL_Pos (21UL)
  #define USBHSCORE_DIEPCTL5_STALL_Msk (0x1UL << USBHSCORE_DIEPCTL5_STALL_Pos)
  #define USBHSCORE_DIEPCTL5_STALL_Min (0x0UL)
  #define USBHSCORE_DIEPCTL5_STALL_Max (0x1UL)
  #define USBHSCORE_DIEPCTL5_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL5_STALL_ACTIVE (0x1UL)

/* TXFNUM @Bits 22..25 : TxFIFO Number (TxFNum) */
  #define USBHSCORE_DIEPCTL5_TXFNUM_Pos (22UL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_Msk (0xFUL << USBHSCORE_DIEPCTL5_TXFNUM_Pos)
  #define USBHSCORE_DIEPCTL5_TXFNUM_Min (0x0UL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_Max (0xFUL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO0 (0x0UL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO1 (0x1UL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO2 (0x2UL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO3 (0x3UL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO4 (0x4UL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO5 (0x5UL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO6 (0x6UL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO7 (0x7UL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO8 (0x8UL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO9 (0x9UL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO10 (0xAUL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO11 (0xBUL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO12 (0xCUL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO13 (0xDUL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO14 (0xEUL)
  #define USBHSCORE_DIEPCTL5_TXFNUM_TXFIFO15 (0xFUL)

/* CNAK @Bit 26 : Clear NAK (CNAK) */
  #define USBHSCORE_DIEPCTL5_CNAK_Pos (26UL)
  #define USBHSCORE_DIEPCTL5_CNAK_Msk (0x1UL << USBHSCORE_DIEPCTL5_CNAK_Pos)
  #define USBHSCORE_DIEPCTL5_CNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL5_CNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL5_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL5_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DIEPCTL5_SNAK_Pos (27UL)
  #define USBHSCORE_DIEPCTL5_SNAK_Msk (0x1UL << USBHSCORE_DIEPCTL5_SNAK_Pos)
  #define USBHSCORE_DIEPCTL5_SNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL5_SNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL5_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL5_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DIEPCTL5_SETD0PID_Pos (28UL)
  #define USBHSCORE_DIEPCTL5_SETD0PID_Msk (0x1UL << USBHSCORE_DIEPCTL5_SETD0PID_Pos)
  #define USBHSCORE_DIEPCTL5_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL5_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL5_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL5_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to Even
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DIEPCTL5_SETD1PID_Pos (29UL)
  #define USBHSCORE_DIEPCTL5_SETD1PID_Msk (0x1UL << USBHSCORE_DIEPCTL5_SETD1PID_Pos)
  #define USBHSCORE_DIEPCTL5_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL5_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL5_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL5_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to Odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DIEPCTL5_EPDIS_Pos (30UL)
  #define USBHSCORE_DIEPCTL5_EPDIS_Msk (0x1UL << USBHSCORE_DIEPCTL5_EPDIS_Pos)
  #define USBHSCORE_DIEPCTL5_EPDIS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL5_EPDIS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL5_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL5_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DIEPCTL5_EPENA_Pos (31UL)
  #define USBHSCORE_DIEPCTL5_EPENA_Msk (0x1UL << USBHSCORE_DIEPCTL5_EPENA_Pos)
  #define USBHSCORE_DIEPCTL5_EPENA_Min (0x0UL)
  #define USBHSCORE_DIEPCTL5_EPENA_Max (0x1UL)
  #define USBHSCORE_DIEPCTL5_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL5_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DIEPINT5: Device IN Endpoint Interrupt Register */
  #define USBHSCORE_DIEPINT5_ResetValue (0x00000080UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DIEPINT5_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DIEPINT5_XFERCOMPL_Msk (0x1UL << USBHSCORE_DIEPINT5_XFERCOMPL_Pos)
  #define USBHSCORE_DIEPINT5_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DIEPINT5_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DIEPINT5_EPDISBLD_Msk (0x1UL << USBHSCORE_DIEPINT5_EPDISBLD_Pos)
  #define USBHSCORE_DIEPINT5_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DIEPINT5_AHBERR_Pos (2UL)
  #define USBHSCORE_DIEPINT5_AHBERR_Msk (0x1UL << USBHSCORE_DIEPINT5_AHBERR_Pos)
  #define USBHSCORE_DIEPINT5_AHBERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_AHBERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_AHBERR_ACTIVE (0x1UL)

/* TIMEOUT @Bit 3 : Timeout Condition (TimeOUT) */
  #define USBHSCORE_DIEPINT5_TIMEOUT_Pos (3UL)
  #define USBHSCORE_DIEPINT5_TIMEOUT_Msk (0x1UL << USBHSCORE_DIEPINT5_TIMEOUT_Pos)
  #define USBHSCORE_DIEPINT5_TIMEOUT_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_TIMEOUT_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_TIMEOUT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_TIMEOUT_ACTIVE (0x1UL)

/* INTKNTXFEMP @Bit 4 : IN Token Received When TxFIFO is Empty (INTknTXFEmp) */
  #define USBHSCORE_DIEPINT5_INTKNTXFEMP_Pos (4UL)
  #define USBHSCORE_DIEPINT5_INTKNTXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT5_INTKNTXFEMP_Pos)
  #define USBHSCORE_DIEPINT5_INTKNTXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_INTKNTXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_INTKNTXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_INTKNTXFEMP_ACTIVE (0x1UL)

/* INTKNEPMIS @Bit 5 : IN Token Received with EP Mismatch (INTknEPMis) */
  #define USBHSCORE_DIEPINT5_INTKNEPMIS_Pos (5UL)
  #define USBHSCORE_DIEPINT5_INTKNEPMIS_Msk (0x1UL << USBHSCORE_DIEPINT5_INTKNEPMIS_Pos)
  #define USBHSCORE_DIEPINT5_INTKNEPMIS_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_INTKNEPMIS_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_INTKNEPMIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_INTKNEPMIS_ACTIVE (0x1UL)

/* INEPNAKEFF @Bit 6 : IN Endpoint NAK Effective (INEPNakEff) */
  #define USBHSCORE_DIEPINT5_INEPNAKEFF_Pos (6UL)
  #define USBHSCORE_DIEPINT5_INEPNAKEFF_Msk (0x1UL << USBHSCORE_DIEPINT5_INEPNAKEFF_Pos)
  #define USBHSCORE_DIEPINT5_INEPNAKEFF_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_INEPNAKEFF_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_INEPNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_INEPNAKEFF_ACTIVE (0x1UL)

/* TXFEMP @Bit 7 : Transmit FIFO Empty (TxFEmp) */
  #define USBHSCORE_DIEPINT5_TXFEMP_Pos (7UL)
  #define USBHSCORE_DIEPINT5_TXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT5_TXFEMP_Pos)
  #define USBHSCORE_DIEPINT5_TXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_TXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_TXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_TXFEMP_ACTIVE (0x1UL)

/* TXFIFOUNDRN @Bit 8 : Fifo Underrun (TxfifoUndrn) */
  #define USBHSCORE_DIEPINT5_TXFIFOUNDRN_Pos (8UL)
  #define USBHSCORE_DIEPINT5_TXFIFOUNDRN_Msk (0x1UL << USBHSCORE_DIEPINT5_TXFIFOUNDRN_Pos)
  #define USBHSCORE_DIEPINT5_TXFIFOUNDRN_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_TXFIFOUNDRN_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_TXFIFOUNDRN_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_TXFIFOUNDRN_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DIEPINT5_BNAINTR_Pos (9UL)
  #define USBHSCORE_DIEPINT5_BNAINTR_Msk (0x1UL << USBHSCORE_DIEPINT5_BNAINTR_Pos)
  #define USBHSCORE_DIEPINT5_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DIEPINT5_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DIEPINT5_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DIEPINT5_PKTDRPSTS_Pos)
  #define USBHSCORE_DIEPINT5_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DIEPINT5_BBLEERR_Pos (12UL)
  #define USBHSCORE_DIEPINT5_BBLEERR_Msk (0x1UL << USBHSCORE_DIEPINT5_BBLEERR_Pos)
  #define USBHSCORE_DIEPINT5_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DIEPINT5_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DIEPINT5_NAKINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT5_NAKINTRPT_Pos)
  #define USBHSCORE_DIEPINT5_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DIEPINT5_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DIEPINT5_NYETINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT5_NYETINTRPT_Pos)
  #define USBHSCORE_DIEPINT5_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT5_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT5_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT5_NYETINTRPT_ACTIVE (0x1UL)


/* USBHSCORE_DIEPTSIZ5: Device IN Endpoint Transfer Size Register */
  #define USBHSCORE_DIEPTSIZ5_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DIEPTSIZ5_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DIEPTSIZ5_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DIEPTSIZ5_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DIEPTSIZ5_PKTCNT_Pos (19UL)
  #define USBHSCORE_DIEPTSIZ5_PKTCNT_Msk (0x3FFUL << USBHSCORE_DIEPTSIZ5_PKTCNT_Pos)

/* MC @Bits 29..30 : MC */
  #define USBHSCORE_DIEPTSIZ5_MC_Pos (29UL)
  #define USBHSCORE_DIEPTSIZ5_MC_Msk (0x3UL << USBHSCORE_DIEPTSIZ5_MC_Pos)
  #define USBHSCORE_DIEPTSIZ5_MC_Min (0x1UL)
  #define USBHSCORE_DIEPTSIZ5_MC_Max (0x3UL)
  #define USBHSCORE_DIEPTSIZ5_MC_PACKETONE (0x1UL)
  #define USBHSCORE_DIEPTSIZ5_MC_PACKETTWO (0x2UL)
  #define USBHSCORE_DIEPTSIZ5_MC_PACKETTHREE (0x3UL)


/* USBHSCORE_DIEPDMA5: Device IN Endpoint DMA Address Register */
  #define USBHSCORE_DIEPDMA5_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DIEPDMA5_DMAADDR_Pos (0UL)
  #define USBHSCORE_DIEPDMA5_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DIEPDMA5_DMAADDR_Pos)


/* USBHSCORE_DTXFSTS5: Device IN Endpoint Transmit FIFO Status Register */
  #define USBHSCORE_DTXFSTS5_ResetValue (0x00000200UL)

/* INEPTXFSPCAVAIL @Bits 0..15 : IN Endpoint TxFIFO Space Avail (INEPTxFSpcAvail) */
  #define USBHSCORE_DTXFSTS5_INEPTXFSPCAVAIL_Pos (0UL)
  #define USBHSCORE_DTXFSTS5_INEPTXFSPCAVAIL_Msk (0xFFFFUL << USBHSCORE_DTXFSTS5_INEPTXFSPCAVAIL_Pos) /*!< Bit mask of
                                                                            INEPTXFSPCAVAIL field.*/


/* USBHSCORE_DIEPCTL6: Device Control IN Endpoint Control Register */
  #define USBHSCORE_DIEPCTL6_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DIEPCTL6_MPS_Pos (0UL)
  #define USBHSCORE_DIEPCTL6_MPS_Msk (0x7FFUL << USBHSCORE_DIEPCTL6_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DIEPCTL6_USBACTEP_Pos (15UL)
  #define USBHSCORE_DIEPCTL6_USBACTEP_Msk (0x1UL << USBHSCORE_DIEPCTL6_USBACTEP_Pos)
  #define USBHSCORE_DIEPCTL6_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DIEPCTL6_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DIEPCTL6_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL6_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : (unspecified) */
  #define USBHSCORE_DIEPCTL6_DPID_Pos (16UL)
  #define USBHSCORE_DIEPCTL6_DPID_Msk (0x1UL << USBHSCORE_DIEPCTL6_DPID_Pos)
  #define USBHSCORE_DIEPCTL6_DPID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL6_DPID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL6_DPID_DATA0EVENFRM (0x0UL)
  #define USBHSCORE_DIEPCTL6_DPID_DATA1ODDFRM (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DIEPCTL6_NAKSTS_Pos (17UL)
  #define USBHSCORE_DIEPCTL6_NAKSTS_Msk (0x1UL << USBHSCORE_DIEPCTL6_NAKSTS_Pos)
  #define USBHSCORE_DIEPCTL6_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL6_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL6_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DIEPCTL6_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DIEPCTL6_EPTYPE_Pos (18UL)
  #define USBHSCORE_DIEPCTL6_EPTYPE_Msk (0x3UL << USBHSCORE_DIEPCTL6_EPTYPE_Pos)
  #define USBHSCORE_DIEPCTL6_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DIEPCTL6_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DIEPCTL6_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DIEPCTL6_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DIEPCTL6_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DIEPCTL6_EPTYPE_INTERRUP (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DIEPCTL6_STALL_Pos (21UL)
  #define USBHSCORE_DIEPCTL6_STALL_Msk (0x1UL << USBHSCORE_DIEPCTL6_STALL_Pos)
  #define USBHSCORE_DIEPCTL6_STALL_Min (0x0UL)
  #define USBHSCORE_DIEPCTL6_STALL_Max (0x1UL)
  #define USBHSCORE_DIEPCTL6_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL6_STALL_ACTIVE (0x1UL)

/* TXFNUM @Bits 22..25 : TxFIFO Number (TxFNum) */
  #define USBHSCORE_DIEPCTL6_TXFNUM_Pos (22UL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_Msk (0xFUL << USBHSCORE_DIEPCTL6_TXFNUM_Pos)
  #define USBHSCORE_DIEPCTL6_TXFNUM_Min (0x0UL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_Max (0xFUL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO0 (0x0UL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO1 (0x1UL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO2 (0x2UL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO3 (0x3UL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO4 (0x4UL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO5 (0x5UL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO6 (0x6UL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO7 (0x7UL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO8 (0x8UL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO9 (0x9UL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO10 (0xAUL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO11 (0xBUL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO12 (0xCUL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO13 (0xDUL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO14 (0xEUL)
  #define USBHSCORE_DIEPCTL6_TXFNUM_TXFIFO15 (0xFUL)

/* CNAK @Bit 26 : Clear NAK (CNAK) */
  #define USBHSCORE_DIEPCTL6_CNAK_Pos (26UL)
  #define USBHSCORE_DIEPCTL6_CNAK_Msk (0x1UL << USBHSCORE_DIEPCTL6_CNAK_Pos)
  #define USBHSCORE_DIEPCTL6_CNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL6_CNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL6_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL6_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DIEPCTL6_SNAK_Pos (27UL)
  #define USBHSCORE_DIEPCTL6_SNAK_Msk (0x1UL << USBHSCORE_DIEPCTL6_SNAK_Pos)
  #define USBHSCORE_DIEPCTL6_SNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL6_SNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL6_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL6_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DIEPCTL6_SETD0PID_Pos (28UL)
  #define USBHSCORE_DIEPCTL6_SETD0PID_Msk (0x1UL << USBHSCORE_DIEPCTL6_SETD0PID_Pos)
  #define USBHSCORE_DIEPCTL6_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL6_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL6_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL6_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to Even
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DIEPCTL6_SETD1PID_Pos (29UL)
  #define USBHSCORE_DIEPCTL6_SETD1PID_Msk (0x1UL << USBHSCORE_DIEPCTL6_SETD1PID_Pos)
  #define USBHSCORE_DIEPCTL6_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL6_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL6_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL6_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to Odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DIEPCTL6_EPDIS_Pos (30UL)
  #define USBHSCORE_DIEPCTL6_EPDIS_Msk (0x1UL << USBHSCORE_DIEPCTL6_EPDIS_Pos)
  #define USBHSCORE_DIEPCTL6_EPDIS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL6_EPDIS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL6_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL6_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DIEPCTL6_EPENA_Pos (31UL)
  #define USBHSCORE_DIEPCTL6_EPENA_Msk (0x1UL << USBHSCORE_DIEPCTL6_EPENA_Pos)
  #define USBHSCORE_DIEPCTL6_EPENA_Min (0x0UL)
  #define USBHSCORE_DIEPCTL6_EPENA_Max (0x1UL)
  #define USBHSCORE_DIEPCTL6_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL6_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DIEPINT6: Device IN Endpoint Interrupt Register */
  #define USBHSCORE_DIEPINT6_ResetValue (0x00000080UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DIEPINT6_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DIEPINT6_XFERCOMPL_Msk (0x1UL << USBHSCORE_DIEPINT6_XFERCOMPL_Pos)
  #define USBHSCORE_DIEPINT6_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DIEPINT6_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DIEPINT6_EPDISBLD_Msk (0x1UL << USBHSCORE_DIEPINT6_EPDISBLD_Pos)
  #define USBHSCORE_DIEPINT6_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DIEPINT6_AHBERR_Pos (2UL)
  #define USBHSCORE_DIEPINT6_AHBERR_Msk (0x1UL << USBHSCORE_DIEPINT6_AHBERR_Pos)
  #define USBHSCORE_DIEPINT6_AHBERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_AHBERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_AHBERR_ACTIVE (0x1UL)

/* TIMEOUT @Bit 3 : Timeout Condition (TimeOUT) */
  #define USBHSCORE_DIEPINT6_TIMEOUT_Pos (3UL)
  #define USBHSCORE_DIEPINT6_TIMEOUT_Msk (0x1UL << USBHSCORE_DIEPINT6_TIMEOUT_Pos)
  #define USBHSCORE_DIEPINT6_TIMEOUT_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_TIMEOUT_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_TIMEOUT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_TIMEOUT_ACTIVE (0x1UL)

/* INTKNTXFEMP @Bit 4 : IN Token Received When TxFIFO is Empty (INTknTXFEmp) */
  #define USBHSCORE_DIEPINT6_INTKNTXFEMP_Pos (4UL)
  #define USBHSCORE_DIEPINT6_INTKNTXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT6_INTKNTXFEMP_Pos)
  #define USBHSCORE_DIEPINT6_INTKNTXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_INTKNTXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_INTKNTXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_INTKNTXFEMP_ACTIVE (0x1UL)

/* INTKNEPMIS @Bit 5 : IN Token Received with EP Mismatch (INTknEPMis) */
  #define USBHSCORE_DIEPINT6_INTKNEPMIS_Pos (5UL)
  #define USBHSCORE_DIEPINT6_INTKNEPMIS_Msk (0x1UL << USBHSCORE_DIEPINT6_INTKNEPMIS_Pos)
  #define USBHSCORE_DIEPINT6_INTKNEPMIS_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_INTKNEPMIS_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_INTKNEPMIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_INTKNEPMIS_ACTIVE (0x1UL)

/* INEPNAKEFF @Bit 6 : IN Endpoint NAK Effective (INEPNakEff) */
  #define USBHSCORE_DIEPINT6_INEPNAKEFF_Pos (6UL)
  #define USBHSCORE_DIEPINT6_INEPNAKEFF_Msk (0x1UL << USBHSCORE_DIEPINT6_INEPNAKEFF_Pos)
  #define USBHSCORE_DIEPINT6_INEPNAKEFF_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_INEPNAKEFF_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_INEPNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_INEPNAKEFF_ACTIVE (0x1UL)

/* TXFEMP @Bit 7 : Transmit FIFO Empty (TxFEmp) */
  #define USBHSCORE_DIEPINT6_TXFEMP_Pos (7UL)
  #define USBHSCORE_DIEPINT6_TXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT6_TXFEMP_Pos)
  #define USBHSCORE_DIEPINT6_TXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_TXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_TXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_TXFEMP_ACTIVE (0x1UL)

/* TXFIFOUNDRN @Bit 8 : Fifo Underrun (TxfifoUndrn) */
  #define USBHSCORE_DIEPINT6_TXFIFOUNDRN_Pos (8UL)
  #define USBHSCORE_DIEPINT6_TXFIFOUNDRN_Msk (0x1UL << USBHSCORE_DIEPINT6_TXFIFOUNDRN_Pos)
  #define USBHSCORE_DIEPINT6_TXFIFOUNDRN_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_TXFIFOUNDRN_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_TXFIFOUNDRN_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_TXFIFOUNDRN_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DIEPINT6_BNAINTR_Pos (9UL)
  #define USBHSCORE_DIEPINT6_BNAINTR_Msk (0x1UL << USBHSCORE_DIEPINT6_BNAINTR_Pos)
  #define USBHSCORE_DIEPINT6_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DIEPINT6_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DIEPINT6_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DIEPINT6_PKTDRPSTS_Pos)
  #define USBHSCORE_DIEPINT6_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DIEPINT6_BBLEERR_Pos (12UL)
  #define USBHSCORE_DIEPINT6_BBLEERR_Msk (0x1UL << USBHSCORE_DIEPINT6_BBLEERR_Pos)
  #define USBHSCORE_DIEPINT6_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DIEPINT6_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DIEPINT6_NAKINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT6_NAKINTRPT_Pos)
  #define USBHSCORE_DIEPINT6_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DIEPINT6_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DIEPINT6_NYETINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT6_NYETINTRPT_Pos)
  #define USBHSCORE_DIEPINT6_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT6_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT6_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT6_NYETINTRPT_ACTIVE (0x1UL)


/* USBHSCORE_DIEPTSIZ6: Device IN Endpoint Transfer Size Register */
  #define USBHSCORE_DIEPTSIZ6_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DIEPTSIZ6_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DIEPTSIZ6_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DIEPTSIZ6_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DIEPTSIZ6_PKTCNT_Pos (19UL)
  #define USBHSCORE_DIEPTSIZ6_PKTCNT_Msk (0x3FFUL << USBHSCORE_DIEPTSIZ6_PKTCNT_Pos)

/* MC @Bits 29..30 : MC */
  #define USBHSCORE_DIEPTSIZ6_MC_Pos (29UL)
  #define USBHSCORE_DIEPTSIZ6_MC_Msk (0x3UL << USBHSCORE_DIEPTSIZ6_MC_Pos)
  #define USBHSCORE_DIEPTSIZ6_MC_Min (0x1UL)
  #define USBHSCORE_DIEPTSIZ6_MC_Max (0x3UL)
  #define USBHSCORE_DIEPTSIZ6_MC_PACKETONE (0x1UL)
  #define USBHSCORE_DIEPTSIZ6_MC_PACKETTWO (0x2UL)
  #define USBHSCORE_DIEPTSIZ6_MC_PACKETTHREE (0x3UL)


/* USBHSCORE_DIEPDMA6: Device IN Endpoint DMA Address Register */
  #define USBHSCORE_DIEPDMA6_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DIEPDMA6_DMAADDR_Pos (0UL)
  #define USBHSCORE_DIEPDMA6_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DIEPDMA6_DMAADDR_Pos)


/* USBHSCORE_DTXFSTS6: Device IN Endpoint Transmit FIFO Status Register */
  #define USBHSCORE_DTXFSTS6_ResetValue (0x00000200UL)

/* INEPTXFSPCAVAIL @Bits 0..15 : IN Endpoint TxFIFO Space Avail (INEPTxFSpcAvail) */
  #define USBHSCORE_DTXFSTS6_INEPTXFSPCAVAIL_Pos (0UL)
  #define USBHSCORE_DTXFSTS6_INEPTXFSPCAVAIL_Msk (0xFFFFUL << USBHSCORE_DTXFSTS6_INEPTXFSPCAVAIL_Pos) /*!< Bit mask of
                                                                            INEPTXFSPCAVAIL field.*/


/* USBHSCORE_DIEPCTL7: Device Control IN Endpoint Control Register */
  #define USBHSCORE_DIEPCTL7_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DIEPCTL7_MPS_Pos (0UL)
  #define USBHSCORE_DIEPCTL7_MPS_Msk (0x7FFUL << USBHSCORE_DIEPCTL7_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DIEPCTL7_USBACTEP_Pos (15UL)
  #define USBHSCORE_DIEPCTL7_USBACTEP_Msk (0x1UL << USBHSCORE_DIEPCTL7_USBACTEP_Pos)
  #define USBHSCORE_DIEPCTL7_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DIEPCTL7_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DIEPCTL7_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL7_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : (unspecified) */
  #define USBHSCORE_DIEPCTL7_DPID_Pos (16UL)
  #define USBHSCORE_DIEPCTL7_DPID_Msk (0x1UL << USBHSCORE_DIEPCTL7_DPID_Pos)
  #define USBHSCORE_DIEPCTL7_DPID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL7_DPID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL7_DPID_DATA0EVENFRM (0x0UL)
  #define USBHSCORE_DIEPCTL7_DPID_DATA1ODDFRM (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DIEPCTL7_NAKSTS_Pos (17UL)
  #define USBHSCORE_DIEPCTL7_NAKSTS_Msk (0x1UL << USBHSCORE_DIEPCTL7_NAKSTS_Pos)
  #define USBHSCORE_DIEPCTL7_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL7_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL7_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DIEPCTL7_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DIEPCTL7_EPTYPE_Pos (18UL)
  #define USBHSCORE_DIEPCTL7_EPTYPE_Msk (0x3UL << USBHSCORE_DIEPCTL7_EPTYPE_Pos)
  #define USBHSCORE_DIEPCTL7_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DIEPCTL7_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DIEPCTL7_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DIEPCTL7_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DIEPCTL7_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DIEPCTL7_EPTYPE_INTERRUP (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DIEPCTL7_STALL_Pos (21UL)
  #define USBHSCORE_DIEPCTL7_STALL_Msk (0x1UL << USBHSCORE_DIEPCTL7_STALL_Pos)
  #define USBHSCORE_DIEPCTL7_STALL_Min (0x0UL)
  #define USBHSCORE_DIEPCTL7_STALL_Max (0x1UL)
  #define USBHSCORE_DIEPCTL7_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL7_STALL_ACTIVE (0x1UL)

/* TXFNUM @Bits 22..25 : TxFIFO Number (TxFNum) */
  #define USBHSCORE_DIEPCTL7_TXFNUM_Pos (22UL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_Msk (0xFUL << USBHSCORE_DIEPCTL7_TXFNUM_Pos)
  #define USBHSCORE_DIEPCTL7_TXFNUM_Min (0x0UL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_Max (0xFUL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO0 (0x0UL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO1 (0x1UL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO2 (0x2UL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO3 (0x3UL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO4 (0x4UL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO5 (0x5UL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO6 (0x6UL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO7 (0x7UL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO8 (0x8UL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO9 (0x9UL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO10 (0xAUL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO11 (0xBUL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO12 (0xCUL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO13 (0xDUL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO14 (0xEUL)
  #define USBHSCORE_DIEPCTL7_TXFNUM_TXFIFO15 (0xFUL)

/* CNAK @Bit 26 : Clear NAK (CNAK) */
  #define USBHSCORE_DIEPCTL7_CNAK_Pos (26UL)
  #define USBHSCORE_DIEPCTL7_CNAK_Msk (0x1UL << USBHSCORE_DIEPCTL7_CNAK_Pos)
  #define USBHSCORE_DIEPCTL7_CNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL7_CNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL7_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL7_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DIEPCTL7_SNAK_Pos (27UL)
  #define USBHSCORE_DIEPCTL7_SNAK_Msk (0x1UL << USBHSCORE_DIEPCTL7_SNAK_Pos)
  #define USBHSCORE_DIEPCTL7_SNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL7_SNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL7_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL7_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DIEPCTL7_SETD0PID_Pos (28UL)
  #define USBHSCORE_DIEPCTL7_SETD0PID_Msk (0x1UL << USBHSCORE_DIEPCTL7_SETD0PID_Pos)
  #define USBHSCORE_DIEPCTL7_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL7_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL7_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL7_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to Even
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DIEPCTL7_SETD1PID_Pos (29UL)
  #define USBHSCORE_DIEPCTL7_SETD1PID_Msk (0x1UL << USBHSCORE_DIEPCTL7_SETD1PID_Pos)
  #define USBHSCORE_DIEPCTL7_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL7_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL7_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL7_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to Odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DIEPCTL7_EPDIS_Pos (30UL)
  #define USBHSCORE_DIEPCTL7_EPDIS_Msk (0x1UL << USBHSCORE_DIEPCTL7_EPDIS_Pos)
  #define USBHSCORE_DIEPCTL7_EPDIS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL7_EPDIS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL7_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL7_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DIEPCTL7_EPENA_Pos (31UL)
  #define USBHSCORE_DIEPCTL7_EPENA_Msk (0x1UL << USBHSCORE_DIEPCTL7_EPENA_Pos)
  #define USBHSCORE_DIEPCTL7_EPENA_Min (0x0UL)
  #define USBHSCORE_DIEPCTL7_EPENA_Max (0x1UL)
  #define USBHSCORE_DIEPCTL7_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL7_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DIEPINT7: Device IN Endpoint Interrupt Register */
  #define USBHSCORE_DIEPINT7_ResetValue (0x00000080UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DIEPINT7_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DIEPINT7_XFERCOMPL_Msk (0x1UL << USBHSCORE_DIEPINT7_XFERCOMPL_Pos)
  #define USBHSCORE_DIEPINT7_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DIEPINT7_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DIEPINT7_EPDISBLD_Msk (0x1UL << USBHSCORE_DIEPINT7_EPDISBLD_Pos)
  #define USBHSCORE_DIEPINT7_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DIEPINT7_AHBERR_Pos (2UL)
  #define USBHSCORE_DIEPINT7_AHBERR_Msk (0x1UL << USBHSCORE_DIEPINT7_AHBERR_Pos)
  #define USBHSCORE_DIEPINT7_AHBERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_AHBERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_AHBERR_ACTIVE (0x1UL)

/* TIMEOUT @Bit 3 : Timeout Condition (TimeOUT) */
  #define USBHSCORE_DIEPINT7_TIMEOUT_Pos (3UL)
  #define USBHSCORE_DIEPINT7_TIMEOUT_Msk (0x1UL << USBHSCORE_DIEPINT7_TIMEOUT_Pos)
  #define USBHSCORE_DIEPINT7_TIMEOUT_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_TIMEOUT_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_TIMEOUT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_TIMEOUT_ACTIVE (0x1UL)

/* INTKNTXFEMP @Bit 4 : IN Token Received When TxFIFO is Empty (INTknTXFEmp) */
  #define USBHSCORE_DIEPINT7_INTKNTXFEMP_Pos (4UL)
  #define USBHSCORE_DIEPINT7_INTKNTXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT7_INTKNTXFEMP_Pos)
  #define USBHSCORE_DIEPINT7_INTKNTXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_INTKNTXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_INTKNTXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_INTKNTXFEMP_ACTIVE (0x1UL)

/* INTKNEPMIS @Bit 5 : IN Token Received with EP Mismatch (INTknEPMis) */
  #define USBHSCORE_DIEPINT7_INTKNEPMIS_Pos (5UL)
  #define USBHSCORE_DIEPINT7_INTKNEPMIS_Msk (0x1UL << USBHSCORE_DIEPINT7_INTKNEPMIS_Pos)
  #define USBHSCORE_DIEPINT7_INTKNEPMIS_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_INTKNEPMIS_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_INTKNEPMIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_INTKNEPMIS_ACTIVE (0x1UL)

/* INEPNAKEFF @Bit 6 : IN Endpoint NAK Effective (INEPNakEff) */
  #define USBHSCORE_DIEPINT7_INEPNAKEFF_Pos (6UL)
  #define USBHSCORE_DIEPINT7_INEPNAKEFF_Msk (0x1UL << USBHSCORE_DIEPINT7_INEPNAKEFF_Pos)
  #define USBHSCORE_DIEPINT7_INEPNAKEFF_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_INEPNAKEFF_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_INEPNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_INEPNAKEFF_ACTIVE (0x1UL)

/* TXFEMP @Bit 7 : Transmit FIFO Empty (TxFEmp) */
  #define USBHSCORE_DIEPINT7_TXFEMP_Pos (7UL)
  #define USBHSCORE_DIEPINT7_TXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT7_TXFEMP_Pos)
  #define USBHSCORE_DIEPINT7_TXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_TXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_TXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_TXFEMP_ACTIVE (0x1UL)

/* TXFIFOUNDRN @Bit 8 : Fifo Underrun (TxfifoUndrn) */
  #define USBHSCORE_DIEPINT7_TXFIFOUNDRN_Pos (8UL)
  #define USBHSCORE_DIEPINT7_TXFIFOUNDRN_Msk (0x1UL << USBHSCORE_DIEPINT7_TXFIFOUNDRN_Pos)
  #define USBHSCORE_DIEPINT7_TXFIFOUNDRN_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_TXFIFOUNDRN_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_TXFIFOUNDRN_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_TXFIFOUNDRN_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DIEPINT7_BNAINTR_Pos (9UL)
  #define USBHSCORE_DIEPINT7_BNAINTR_Msk (0x1UL << USBHSCORE_DIEPINT7_BNAINTR_Pos)
  #define USBHSCORE_DIEPINT7_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DIEPINT7_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DIEPINT7_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DIEPINT7_PKTDRPSTS_Pos)
  #define USBHSCORE_DIEPINT7_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DIEPINT7_BBLEERR_Pos (12UL)
  #define USBHSCORE_DIEPINT7_BBLEERR_Msk (0x1UL << USBHSCORE_DIEPINT7_BBLEERR_Pos)
  #define USBHSCORE_DIEPINT7_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DIEPINT7_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DIEPINT7_NAKINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT7_NAKINTRPT_Pos)
  #define USBHSCORE_DIEPINT7_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DIEPINT7_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DIEPINT7_NYETINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT7_NYETINTRPT_Pos)
  #define USBHSCORE_DIEPINT7_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT7_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT7_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT7_NYETINTRPT_ACTIVE (0x1UL)


/* USBHSCORE_DIEPTSIZ7: Device IN Endpoint Transfer Size Register */
  #define USBHSCORE_DIEPTSIZ7_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DIEPTSIZ7_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DIEPTSIZ7_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DIEPTSIZ7_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DIEPTSIZ7_PKTCNT_Pos (19UL)
  #define USBHSCORE_DIEPTSIZ7_PKTCNT_Msk (0x3FFUL << USBHSCORE_DIEPTSIZ7_PKTCNT_Pos)

/* MC @Bits 29..30 : MC */
  #define USBHSCORE_DIEPTSIZ7_MC_Pos (29UL)
  #define USBHSCORE_DIEPTSIZ7_MC_Msk (0x3UL << USBHSCORE_DIEPTSIZ7_MC_Pos)
  #define USBHSCORE_DIEPTSIZ7_MC_Min (0x1UL)
  #define USBHSCORE_DIEPTSIZ7_MC_Max (0x3UL)
  #define USBHSCORE_DIEPTSIZ7_MC_PACKETONE (0x1UL)
  #define USBHSCORE_DIEPTSIZ7_MC_PACKETTWO (0x2UL)
  #define USBHSCORE_DIEPTSIZ7_MC_PACKETTHREE (0x3UL)


/* USBHSCORE_DIEPDMA7: Device IN Endpoint DMA Address Register */
  #define USBHSCORE_DIEPDMA7_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DIEPDMA7_DMAADDR_Pos (0UL)
  #define USBHSCORE_DIEPDMA7_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DIEPDMA7_DMAADDR_Pos)


/* USBHSCORE_DTXFSTS7: Device IN Endpoint Transmit FIFO Status Register */
  #define USBHSCORE_DTXFSTS7_ResetValue (0x00000200UL)

/* INEPTXFSPCAVAIL @Bits 0..15 : IN Endpoint TxFIFO Space Avail (INEPTxFSpcAvail) */
  #define USBHSCORE_DTXFSTS7_INEPTXFSPCAVAIL_Pos (0UL)
  #define USBHSCORE_DTXFSTS7_INEPTXFSPCAVAIL_Msk (0xFFFFUL << USBHSCORE_DTXFSTS7_INEPTXFSPCAVAIL_Pos) /*!< Bit mask of
                                                                            INEPTXFSPCAVAIL field.*/


/* USBHSCORE_DIEPCTL8: Device Control IN Endpoint Control Register */
  #define USBHSCORE_DIEPCTL8_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DIEPCTL8_MPS_Pos (0UL)
  #define USBHSCORE_DIEPCTL8_MPS_Msk (0x7FFUL << USBHSCORE_DIEPCTL8_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DIEPCTL8_USBACTEP_Pos (15UL)
  #define USBHSCORE_DIEPCTL8_USBACTEP_Msk (0x1UL << USBHSCORE_DIEPCTL8_USBACTEP_Pos)
  #define USBHSCORE_DIEPCTL8_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DIEPCTL8_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DIEPCTL8_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL8_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : (unspecified) */
  #define USBHSCORE_DIEPCTL8_DPID_Pos (16UL)
  #define USBHSCORE_DIEPCTL8_DPID_Msk (0x1UL << USBHSCORE_DIEPCTL8_DPID_Pos)
  #define USBHSCORE_DIEPCTL8_DPID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL8_DPID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL8_DPID_DATA0EVENFRM (0x0UL)
  #define USBHSCORE_DIEPCTL8_DPID_DATA1ODDFRM (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DIEPCTL8_NAKSTS_Pos (17UL)
  #define USBHSCORE_DIEPCTL8_NAKSTS_Msk (0x1UL << USBHSCORE_DIEPCTL8_NAKSTS_Pos)
  #define USBHSCORE_DIEPCTL8_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL8_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL8_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DIEPCTL8_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DIEPCTL8_EPTYPE_Pos (18UL)
  #define USBHSCORE_DIEPCTL8_EPTYPE_Msk (0x3UL << USBHSCORE_DIEPCTL8_EPTYPE_Pos)
  #define USBHSCORE_DIEPCTL8_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DIEPCTL8_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DIEPCTL8_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DIEPCTL8_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DIEPCTL8_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DIEPCTL8_EPTYPE_INTERRUP (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DIEPCTL8_STALL_Pos (21UL)
  #define USBHSCORE_DIEPCTL8_STALL_Msk (0x1UL << USBHSCORE_DIEPCTL8_STALL_Pos)
  #define USBHSCORE_DIEPCTL8_STALL_Min (0x0UL)
  #define USBHSCORE_DIEPCTL8_STALL_Max (0x1UL)
  #define USBHSCORE_DIEPCTL8_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL8_STALL_ACTIVE (0x1UL)

/* TXFNUM @Bits 22..25 : TxFIFO Number (TxFNum) */
  #define USBHSCORE_DIEPCTL8_TXFNUM_Pos (22UL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_Msk (0xFUL << USBHSCORE_DIEPCTL8_TXFNUM_Pos)
  #define USBHSCORE_DIEPCTL8_TXFNUM_Min (0x0UL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_Max (0xFUL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO0 (0x0UL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO1 (0x1UL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO2 (0x2UL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO3 (0x3UL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO4 (0x4UL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO5 (0x5UL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO6 (0x6UL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO7 (0x7UL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO8 (0x8UL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO9 (0x9UL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO10 (0xAUL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO11 (0xBUL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO12 (0xCUL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO13 (0xDUL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO14 (0xEUL)
  #define USBHSCORE_DIEPCTL8_TXFNUM_TXFIFO15 (0xFUL)

/* CNAK @Bit 26 : Clear NAK (CNAK) */
  #define USBHSCORE_DIEPCTL8_CNAK_Pos (26UL)
  #define USBHSCORE_DIEPCTL8_CNAK_Msk (0x1UL << USBHSCORE_DIEPCTL8_CNAK_Pos)
  #define USBHSCORE_DIEPCTL8_CNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL8_CNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL8_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL8_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DIEPCTL8_SNAK_Pos (27UL)
  #define USBHSCORE_DIEPCTL8_SNAK_Msk (0x1UL << USBHSCORE_DIEPCTL8_SNAK_Pos)
  #define USBHSCORE_DIEPCTL8_SNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL8_SNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL8_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL8_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DIEPCTL8_SETD0PID_Pos (28UL)
  #define USBHSCORE_DIEPCTL8_SETD0PID_Msk (0x1UL << USBHSCORE_DIEPCTL8_SETD0PID_Pos)
  #define USBHSCORE_DIEPCTL8_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL8_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL8_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL8_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to Even
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DIEPCTL8_SETD1PID_Pos (29UL)
  #define USBHSCORE_DIEPCTL8_SETD1PID_Msk (0x1UL << USBHSCORE_DIEPCTL8_SETD1PID_Pos)
  #define USBHSCORE_DIEPCTL8_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL8_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL8_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL8_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to Odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DIEPCTL8_EPDIS_Pos (30UL)
  #define USBHSCORE_DIEPCTL8_EPDIS_Msk (0x1UL << USBHSCORE_DIEPCTL8_EPDIS_Pos)
  #define USBHSCORE_DIEPCTL8_EPDIS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL8_EPDIS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL8_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL8_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DIEPCTL8_EPENA_Pos (31UL)
  #define USBHSCORE_DIEPCTL8_EPENA_Msk (0x1UL << USBHSCORE_DIEPCTL8_EPENA_Pos)
  #define USBHSCORE_DIEPCTL8_EPENA_Min (0x0UL)
  #define USBHSCORE_DIEPCTL8_EPENA_Max (0x1UL)
  #define USBHSCORE_DIEPCTL8_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL8_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DIEPINT8: Device IN Endpoint Interrupt Register */
  #define USBHSCORE_DIEPINT8_ResetValue (0x00000080UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DIEPINT8_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DIEPINT8_XFERCOMPL_Msk (0x1UL << USBHSCORE_DIEPINT8_XFERCOMPL_Pos)
  #define USBHSCORE_DIEPINT8_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DIEPINT8_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DIEPINT8_EPDISBLD_Msk (0x1UL << USBHSCORE_DIEPINT8_EPDISBLD_Pos)
  #define USBHSCORE_DIEPINT8_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DIEPINT8_AHBERR_Pos (2UL)
  #define USBHSCORE_DIEPINT8_AHBERR_Msk (0x1UL << USBHSCORE_DIEPINT8_AHBERR_Pos)
  #define USBHSCORE_DIEPINT8_AHBERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_AHBERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_AHBERR_ACTIVE (0x1UL)

/* TIMEOUT @Bit 3 : Timeout Condition (TimeOUT) */
  #define USBHSCORE_DIEPINT8_TIMEOUT_Pos (3UL)
  #define USBHSCORE_DIEPINT8_TIMEOUT_Msk (0x1UL << USBHSCORE_DIEPINT8_TIMEOUT_Pos)
  #define USBHSCORE_DIEPINT8_TIMEOUT_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_TIMEOUT_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_TIMEOUT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_TIMEOUT_ACTIVE (0x1UL)

/* INTKNTXFEMP @Bit 4 : IN Token Received When TxFIFO is Empty (INTknTXFEmp) */
  #define USBHSCORE_DIEPINT8_INTKNTXFEMP_Pos (4UL)
  #define USBHSCORE_DIEPINT8_INTKNTXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT8_INTKNTXFEMP_Pos)
  #define USBHSCORE_DIEPINT8_INTKNTXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_INTKNTXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_INTKNTXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_INTKNTXFEMP_ACTIVE (0x1UL)

/* INTKNEPMIS @Bit 5 : IN Token Received with EP Mismatch (INTknEPMis) */
  #define USBHSCORE_DIEPINT8_INTKNEPMIS_Pos (5UL)
  #define USBHSCORE_DIEPINT8_INTKNEPMIS_Msk (0x1UL << USBHSCORE_DIEPINT8_INTKNEPMIS_Pos)
  #define USBHSCORE_DIEPINT8_INTKNEPMIS_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_INTKNEPMIS_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_INTKNEPMIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_INTKNEPMIS_ACTIVE (0x1UL)

/* INEPNAKEFF @Bit 6 : IN Endpoint NAK Effective (INEPNakEff) */
  #define USBHSCORE_DIEPINT8_INEPNAKEFF_Pos (6UL)
  #define USBHSCORE_DIEPINT8_INEPNAKEFF_Msk (0x1UL << USBHSCORE_DIEPINT8_INEPNAKEFF_Pos)
  #define USBHSCORE_DIEPINT8_INEPNAKEFF_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_INEPNAKEFF_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_INEPNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_INEPNAKEFF_ACTIVE (0x1UL)

/* TXFEMP @Bit 7 : Transmit FIFO Empty (TxFEmp) */
  #define USBHSCORE_DIEPINT8_TXFEMP_Pos (7UL)
  #define USBHSCORE_DIEPINT8_TXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT8_TXFEMP_Pos)
  #define USBHSCORE_DIEPINT8_TXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_TXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_TXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_TXFEMP_ACTIVE (0x1UL)

/* TXFIFOUNDRN @Bit 8 : Fifo Underrun (TxfifoUndrn) */
  #define USBHSCORE_DIEPINT8_TXFIFOUNDRN_Pos (8UL)
  #define USBHSCORE_DIEPINT8_TXFIFOUNDRN_Msk (0x1UL << USBHSCORE_DIEPINT8_TXFIFOUNDRN_Pos)
  #define USBHSCORE_DIEPINT8_TXFIFOUNDRN_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_TXFIFOUNDRN_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_TXFIFOUNDRN_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_TXFIFOUNDRN_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DIEPINT8_BNAINTR_Pos (9UL)
  #define USBHSCORE_DIEPINT8_BNAINTR_Msk (0x1UL << USBHSCORE_DIEPINT8_BNAINTR_Pos)
  #define USBHSCORE_DIEPINT8_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DIEPINT8_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DIEPINT8_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DIEPINT8_PKTDRPSTS_Pos)
  #define USBHSCORE_DIEPINT8_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DIEPINT8_BBLEERR_Pos (12UL)
  #define USBHSCORE_DIEPINT8_BBLEERR_Msk (0x1UL << USBHSCORE_DIEPINT8_BBLEERR_Pos)
  #define USBHSCORE_DIEPINT8_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DIEPINT8_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DIEPINT8_NAKINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT8_NAKINTRPT_Pos)
  #define USBHSCORE_DIEPINT8_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DIEPINT8_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DIEPINT8_NYETINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT8_NYETINTRPT_Pos)
  #define USBHSCORE_DIEPINT8_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT8_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT8_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT8_NYETINTRPT_ACTIVE (0x1UL)


/* USBHSCORE_DIEPTSIZ8: Device IN Endpoint Transfer Size Register */
  #define USBHSCORE_DIEPTSIZ8_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DIEPTSIZ8_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DIEPTSIZ8_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DIEPTSIZ8_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DIEPTSIZ8_PKTCNT_Pos (19UL)
  #define USBHSCORE_DIEPTSIZ8_PKTCNT_Msk (0x3FFUL << USBHSCORE_DIEPTSIZ8_PKTCNT_Pos)

/* MC @Bits 29..30 : MC */
  #define USBHSCORE_DIEPTSIZ8_MC_Pos (29UL)
  #define USBHSCORE_DIEPTSIZ8_MC_Msk (0x3UL << USBHSCORE_DIEPTSIZ8_MC_Pos)
  #define USBHSCORE_DIEPTSIZ8_MC_Min (0x1UL)
  #define USBHSCORE_DIEPTSIZ8_MC_Max (0x3UL)
  #define USBHSCORE_DIEPTSIZ8_MC_PACKETONE (0x1UL)
  #define USBHSCORE_DIEPTSIZ8_MC_PACKETTWO (0x2UL)
  #define USBHSCORE_DIEPTSIZ8_MC_PACKETTHREE (0x3UL)


/* USBHSCORE_DIEPDMA8: Device IN Endpoint DMA Address Register */
  #define USBHSCORE_DIEPDMA8_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DIEPDMA8_DMAADDR_Pos (0UL)
  #define USBHSCORE_DIEPDMA8_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DIEPDMA8_DMAADDR_Pos)


/* USBHSCORE_DTXFSTS8: Device IN Endpoint Transmit FIFO Status Register */
  #define USBHSCORE_DTXFSTS8_ResetValue (0x00000200UL)

/* INEPTXFSPCAVAIL @Bits 0..15 : IN Endpoint TxFIFO Space Avail (INEPTxFSpcAvail) */
  #define USBHSCORE_DTXFSTS8_INEPTXFSPCAVAIL_Pos (0UL)
  #define USBHSCORE_DTXFSTS8_INEPTXFSPCAVAIL_Msk (0xFFFFUL << USBHSCORE_DTXFSTS8_INEPTXFSPCAVAIL_Pos) /*!< Bit mask of
                                                                            INEPTXFSPCAVAIL field.*/


/* USBHSCORE_DIEPCTL9: Device Control IN Endpoint Control Register */
  #define USBHSCORE_DIEPCTL9_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DIEPCTL9_MPS_Pos (0UL)
  #define USBHSCORE_DIEPCTL9_MPS_Msk (0x7FFUL << USBHSCORE_DIEPCTL9_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DIEPCTL9_USBACTEP_Pos (15UL)
  #define USBHSCORE_DIEPCTL9_USBACTEP_Msk (0x1UL << USBHSCORE_DIEPCTL9_USBACTEP_Pos)
  #define USBHSCORE_DIEPCTL9_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DIEPCTL9_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DIEPCTL9_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL9_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : (unspecified) */
  #define USBHSCORE_DIEPCTL9_DPID_Pos (16UL)
  #define USBHSCORE_DIEPCTL9_DPID_Msk (0x1UL << USBHSCORE_DIEPCTL9_DPID_Pos)
  #define USBHSCORE_DIEPCTL9_DPID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL9_DPID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL9_DPID_DATA0EVENFRM (0x0UL)
  #define USBHSCORE_DIEPCTL9_DPID_DATA1ODDFRM (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DIEPCTL9_NAKSTS_Pos (17UL)
  #define USBHSCORE_DIEPCTL9_NAKSTS_Msk (0x1UL << USBHSCORE_DIEPCTL9_NAKSTS_Pos)
  #define USBHSCORE_DIEPCTL9_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL9_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL9_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DIEPCTL9_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DIEPCTL9_EPTYPE_Pos (18UL)
  #define USBHSCORE_DIEPCTL9_EPTYPE_Msk (0x3UL << USBHSCORE_DIEPCTL9_EPTYPE_Pos)
  #define USBHSCORE_DIEPCTL9_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DIEPCTL9_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DIEPCTL9_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DIEPCTL9_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DIEPCTL9_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DIEPCTL9_EPTYPE_INTERRUP (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DIEPCTL9_STALL_Pos (21UL)
  #define USBHSCORE_DIEPCTL9_STALL_Msk (0x1UL << USBHSCORE_DIEPCTL9_STALL_Pos)
  #define USBHSCORE_DIEPCTL9_STALL_Min (0x0UL)
  #define USBHSCORE_DIEPCTL9_STALL_Max (0x1UL)
  #define USBHSCORE_DIEPCTL9_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL9_STALL_ACTIVE (0x1UL)

/* TXFNUM @Bits 22..25 : TxFIFO Number (TxFNum) */
  #define USBHSCORE_DIEPCTL9_TXFNUM_Pos (22UL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_Msk (0xFUL << USBHSCORE_DIEPCTL9_TXFNUM_Pos)
  #define USBHSCORE_DIEPCTL9_TXFNUM_Min (0x0UL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_Max (0xFUL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO0 (0x0UL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO1 (0x1UL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO2 (0x2UL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO3 (0x3UL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO4 (0x4UL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO5 (0x5UL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO6 (0x6UL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO7 (0x7UL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO8 (0x8UL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO9 (0x9UL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO10 (0xAUL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO11 (0xBUL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO12 (0xCUL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO13 (0xDUL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO14 (0xEUL)
  #define USBHSCORE_DIEPCTL9_TXFNUM_TXFIFO15 (0xFUL)

/* CNAK @Bit 26 : Clear NAK (CNAK) */
  #define USBHSCORE_DIEPCTL9_CNAK_Pos (26UL)
  #define USBHSCORE_DIEPCTL9_CNAK_Msk (0x1UL << USBHSCORE_DIEPCTL9_CNAK_Pos)
  #define USBHSCORE_DIEPCTL9_CNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL9_CNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL9_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL9_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DIEPCTL9_SNAK_Pos (27UL)
  #define USBHSCORE_DIEPCTL9_SNAK_Msk (0x1UL << USBHSCORE_DIEPCTL9_SNAK_Pos)
  #define USBHSCORE_DIEPCTL9_SNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL9_SNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL9_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL9_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DIEPCTL9_SETD0PID_Pos (28UL)
  #define USBHSCORE_DIEPCTL9_SETD0PID_Msk (0x1UL << USBHSCORE_DIEPCTL9_SETD0PID_Pos)
  #define USBHSCORE_DIEPCTL9_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL9_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL9_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL9_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to Even
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DIEPCTL9_SETD1PID_Pos (29UL)
  #define USBHSCORE_DIEPCTL9_SETD1PID_Msk (0x1UL << USBHSCORE_DIEPCTL9_SETD1PID_Pos)
  #define USBHSCORE_DIEPCTL9_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL9_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL9_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL9_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to Odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DIEPCTL9_EPDIS_Pos (30UL)
  #define USBHSCORE_DIEPCTL9_EPDIS_Msk (0x1UL << USBHSCORE_DIEPCTL9_EPDIS_Pos)
  #define USBHSCORE_DIEPCTL9_EPDIS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL9_EPDIS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL9_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL9_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DIEPCTL9_EPENA_Pos (31UL)
  #define USBHSCORE_DIEPCTL9_EPENA_Msk (0x1UL << USBHSCORE_DIEPCTL9_EPENA_Pos)
  #define USBHSCORE_DIEPCTL9_EPENA_Min (0x0UL)
  #define USBHSCORE_DIEPCTL9_EPENA_Max (0x1UL)
  #define USBHSCORE_DIEPCTL9_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL9_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DIEPINT9: Device IN Endpoint Interrupt Register */
  #define USBHSCORE_DIEPINT9_ResetValue (0x00000080UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DIEPINT9_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DIEPINT9_XFERCOMPL_Msk (0x1UL << USBHSCORE_DIEPINT9_XFERCOMPL_Pos)
  #define USBHSCORE_DIEPINT9_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DIEPINT9_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DIEPINT9_EPDISBLD_Msk (0x1UL << USBHSCORE_DIEPINT9_EPDISBLD_Pos)
  #define USBHSCORE_DIEPINT9_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DIEPINT9_AHBERR_Pos (2UL)
  #define USBHSCORE_DIEPINT9_AHBERR_Msk (0x1UL << USBHSCORE_DIEPINT9_AHBERR_Pos)
  #define USBHSCORE_DIEPINT9_AHBERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_AHBERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_AHBERR_ACTIVE (0x1UL)

/* TIMEOUT @Bit 3 : Timeout Condition (TimeOUT) */
  #define USBHSCORE_DIEPINT9_TIMEOUT_Pos (3UL)
  #define USBHSCORE_DIEPINT9_TIMEOUT_Msk (0x1UL << USBHSCORE_DIEPINT9_TIMEOUT_Pos)
  #define USBHSCORE_DIEPINT9_TIMEOUT_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_TIMEOUT_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_TIMEOUT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_TIMEOUT_ACTIVE (0x1UL)

/* INTKNTXFEMP @Bit 4 : IN Token Received When TxFIFO is Empty (INTknTXFEmp) */
  #define USBHSCORE_DIEPINT9_INTKNTXFEMP_Pos (4UL)
  #define USBHSCORE_DIEPINT9_INTKNTXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT9_INTKNTXFEMP_Pos)
  #define USBHSCORE_DIEPINT9_INTKNTXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_INTKNTXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_INTKNTXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_INTKNTXFEMP_ACTIVE (0x1UL)

/* INTKNEPMIS @Bit 5 : IN Token Received with EP Mismatch (INTknEPMis) */
  #define USBHSCORE_DIEPINT9_INTKNEPMIS_Pos (5UL)
  #define USBHSCORE_DIEPINT9_INTKNEPMIS_Msk (0x1UL << USBHSCORE_DIEPINT9_INTKNEPMIS_Pos)
  #define USBHSCORE_DIEPINT9_INTKNEPMIS_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_INTKNEPMIS_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_INTKNEPMIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_INTKNEPMIS_ACTIVE (0x1UL)

/* INEPNAKEFF @Bit 6 : IN Endpoint NAK Effective (INEPNakEff) */
  #define USBHSCORE_DIEPINT9_INEPNAKEFF_Pos (6UL)
  #define USBHSCORE_DIEPINT9_INEPNAKEFF_Msk (0x1UL << USBHSCORE_DIEPINT9_INEPNAKEFF_Pos)
  #define USBHSCORE_DIEPINT9_INEPNAKEFF_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_INEPNAKEFF_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_INEPNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_INEPNAKEFF_ACTIVE (0x1UL)

/* TXFEMP @Bit 7 : Transmit FIFO Empty (TxFEmp) */
  #define USBHSCORE_DIEPINT9_TXFEMP_Pos (7UL)
  #define USBHSCORE_DIEPINT9_TXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT9_TXFEMP_Pos)
  #define USBHSCORE_DIEPINT9_TXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_TXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_TXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_TXFEMP_ACTIVE (0x1UL)

/* TXFIFOUNDRN @Bit 8 : Fifo Underrun (TxfifoUndrn) */
  #define USBHSCORE_DIEPINT9_TXFIFOUNDRN_Pos (8UL)
  #define USBHSCORE_DIEPINT9_TXFIFOUNDRN_Msk (0x1UL << USBHSCORE_DIEPINT9_TXFIFOUNDRN_Pos)
  #define USBHSCORE_DIEPINT9_TXFIFOUNDRN_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_TXFIFOUNDRN_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_TXFIFOUNDRN_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_TXFIFOUNDRN_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DIEPINT9_BNAINTR_Pos (9UL)
  #define USBHSCORE_DIEPINT9_BNAINTR_Msk (0x1UL << USBHSCORE_DIEPINT9_BNAINTR_Pos)
  #define USBHSCORE_DIEPINT9_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DIEPINT9_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DIEPINT9_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DIEPINT9_PKTDRPSTS_Pos)
  #define USBHSCORE_DIEPINT9_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DIEPINT9_BBLEERR_Pos (12UL)
  #define USBHSCORE_DIEPINT9_BBLEERR_Msk (0x1UL << USBHSCORE_DIEPINT9_BBLEERR_Pos)
  #define USBHSCORE_DIEPINT9_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DIEPINT9_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DIEPINT9_NAKINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT9_NAKINTRPT_Pos)
  #define USBHSCORE_DIEPINT9_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DIEPINT9_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DIEPINT9_NYETINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT9_NYETINTRPT_Pos)
  #define USBHSCORE_DIEPINT9_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT9_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT9_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT9_NYETINTRPT_ACTIVE (0x1UL)


/* USBHSCORE_DIEPTSIZ9: Device IN Endpoint Transfer Size Register */
  #define USBHSCORE_DIEPTSIZ9_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DIEPTSIZ9_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DIEPTSIZ9_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DIEPTSIZ9_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DIEPTSIZ9_PKTCNT_Pos (19UL)
  #define USBHSCORE_DIEPTSIZ9_PKTCNT_Msk (0x3FFUL << USBHSCORE_DIEPTSIZ9_PKTCNT_Pos)

/* MC @Bits 29..30 : MC */
  #define USBHSCORE_DIEPTSIZ9_MC_Pos (29UL)
  #define USBHSCORE_DIEPTSIZ9_MC_Msk (0x3UL << USBHSCORE_DIEPTSIZ9_MC_Pos)
  #define USBHSCORE_DIEPTSIZ9_MC_Min (0x1UL)
  #define USBHSCORE_DIEPTSIZ9_MC_Max (0x3UL)
  #define USBHSCORE_DIEPTSIZ9_MC_PACKETONE (0x1UL)
  #define USBHSCORE_DIEPTSIZ9_MC_PACKETTWO (0x2UL)
  #define USBHSCORE_DIEPTSIZ9_MC_PACKETTHREE (0x3UL)


/* USBHSCORE_DIEPDMA9: Device IN Endpoint DMA Address Register */
  #define USBHSCORE_DIEPDMA9_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DIEPDMA9_DMAADDR_Pos (0UL)
  #define USBHSCORE_DIEPDMA9_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DIEPDMA9_DMAADDR_Pos)


/* USBHSCORE_DTXFSTS9: Device IN Endpoint Transmit FIFO Status Register */
  #define USBHSCORE_DTXFSTS9_ResetValue (0x00000200UL)

/* INEPTXFSPCAVAIL @Bits 0..15 : IN Endpoint TxFIFO Space Avail (INEPTxFSpcAvail) */
  #define USBHSCORE_DTXFSTS9_INEPTXFSPCAVAIL_Pos (0UL)
  #define USBHSCORE_DTXFSTS9_INEPTXFSPCAVAIL_Msk (0xFFFFUL << USBHSCORE_DTXFSTS9_INEPTXFSPCAVAIL_Pos) /*!< Bit mask of
                                                                            INEPTXFSPCAVAIL field.*/


/* USBHSCORE_DIEPCTL10: Device Control IN Endpoint Control Register */
  #define USBHSCORE_DIEPCTL10_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DIEPCTL10_MPS_Pos (0UL)
  #define USBHSCORE_DIEPCTL10_MPS_Msk (0x7FFUL << USBHSCORE_DIEPCTL10_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DIEPCTL10_USBACTEP_Pos (15UL)
  #define USBHSCORE_DIEPCTL10_USBACTEP_Msk (0x1UL << USBHSCORE_DIEPCTL10_USBACTEP_Pos)
  #define USBHSCORE_DIEPCTL10_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DIEPCTL10_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DIEPCTL10_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL10_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : (unspecified) */
  #define USBHSCORE_DIEPCTL10_DPID_Pos (16UL)
  #define USBHSCORE_DIEPCTL10_DPID_Msk (0x1UL << USBHSCORE_DIEPCTL10_DPID_Pos)
  #define USBHSCORE_DIEPCTL10_DPID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL10_DPID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL10_DPID_DATA0EVENFRM (0x0UL)
  #define USBHSCORE_DIEPCTL10_DPID_DATA1ODDFRM (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DIEPCTL10_NAKSTS_Pos (17UL)
  #define USBHSCORE_DIEPCTL10_NAKSTS_Msk (0x1UL << USBHSCORE_DIEPCTL10_NAKSTS_Pos)
  #define USBHSCORE_DIEPCTL10_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL10_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL10_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DIEPCTL10_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DIEPCTL10_EPTYPE_Pos (18UL)
  #define USBHSCORE_DIEPCTL10_EPTYPE_Msk (0x3UL << USBHSCORE_DIEPCTL10_EPTYPE_Pos)
  #define USBHSCORE_DIEPCTL10_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DIEPCTL10_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DIEPCTL10_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DIEPCTL10_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DIEPCTL10_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DIEPCTL10_EPTYPE_INTERRUP (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DIEPCTL10_STALL_Pos (21UL)
  #define USBHSCORE_DIEPCTL10_STALL_Msk (0x1UL << USBHSCORE_DIEPCTL10_STALL_Pos)
  #define USBHSCORE_DIEPCTL10_STALL_Min (0x0UL)
  #define USBHSCORE_DIEPCTL10_STALL_Max (0x1UL)
  #define USBHSCORE_DIEPCTL10_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL10_STALL_ACTIVE (0x1UL)

/* TXFNUM @Bits 22..25 : TxFIFO Number (TxFNum) */
  #define USBHSCORE_DIEPCTL10_TXFNUM_Pos (22UL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_Msk (0xFUL << USBHSCORE_DIEPCTL10_TXFNUM_Pos)
  #define USBHSCORE_DIEPCTL10_TXFNUM_Min (0x0UL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_Max (0xFUL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO0 (0x0UL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO1 (0x1UL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO2 (0x2UL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO3 (0x3UL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO4 (0x4UL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO5 (0x5UL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO6 (0x6UL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO7 (0x7UL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO8 (0x8UL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO9 (0x9UL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO10 (0xAUL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO11 (0xBUL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO12 (0xCUL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO13 (0xDUL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO14 (0xEUL)
  #define USBHSCORE_DIEPCTL10_TXFNUM_TXFIFO15 (0xFUL)

/* CNAK @Bit 26 : Clear NAK (CNAK) */
  #define USBHSCORE_DIEPCTL10_CNAK_Pos (26UL)
  #define USBHSCORE_DIEPCTL10_CNAK_Msk (0x1UL << USBHSCORE_DIEPCTL10_CNAK_Pos)
  #define USBHSCORE_DIEPCTL10_CNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL10_CNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL10_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL10_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DIEPCTL10_SNAK_Pos (27UL)
  #define USBHSCORE_DIEPCTL10_SNAK_Msk (0x1UL << USBHSCORE_DIEPCTL10_SNAK_Pos)
  #define USBHSCORE_DIEPCTL10_SNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL10_SNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL10_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL10_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DIEPCTL10_SETD0PID_Pos (28UL)
  #define USBHSCORE_DIEPCTL10_SETD0PID_Msk (0x1UL << USBHSCORE_DIEPCTL10_SETD0PID_Pos)
  #define USBHSCORE_DIEPCTL10_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL10_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL10_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL10_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to Even
                                                            (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DIEPCTL10_SETD1PID_Pos (29UL)
  #define USBHSCORE_DIEPCTL10_SETD1PID_Msk (0x1UL << USBHSCORE_DIEPCTL10_SETD1PID_Pos)
  #define USBHSCORE_DIEPCTL10_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL10_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL10_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL10_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to Odd
                                                            (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DIEPCTL10_EPDIS_Pos (30UL)
  #define USBHSCORE_DIEPCTL10_EPDIS_Msk (0x1UL << USBHSCORE_DIEPCTL10_EPDIS_Pos)
  #define USBHSCORE_DIEPCTL10_EPDIS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL10_EPDIS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL10_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL10_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DIEPCTL10_EPENA_Pos (31UL)
  #define USBHSCORE_DIEPCTL10_EPENA_Msk (0x1UL << USBHSCORE_DIEPCTL10_EPENA_Pos)
  #define USBHSCORE_DIEPCTL10_EPENA_Min (0x0UL)
  #define USBHSCORE_DIEPCTL10_EPENA_Max (0x1UL)
  #define USBHSCORE_DIEPCTL10_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL10_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DIEPINT10: Device IN Endpoint Interrupt Register */
  #define USBHSCORE_DIEPINT10_ResetValue (0x00000080UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DIEPINT10_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DIEPINT10_XFERCOMPL_Msk (0x1UL << USBHSCORE_DIEPINT10_XFERCOMPL_Pos)
  #define USBHSCORE_DIEPINT10_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DIEPINT10_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DIEPINT10_EPDISBLD_Msk (0x1UL << USBHSCORE_DIEPINT10_EPDISBLD_Pos)
  #define USBHSCORE_DIEPINT10_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DIEPINT10_AHBERR_Pos (2UL)
  #define USBHSCORE_DIEPINT10_AHBERR_Msk (0x1UL << USBHSCORE_DIEPINT10_AHBERR_Pos)
  #define USBHSCORE_DIEPINT10_AHBERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_AHBERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_AHBERR_ACTIVE (0x1UL)

/* TIMEOUT @Bit 3 : Timeout Condition (TimeOUT) */
  #define USBHSCORE_DIEPINT10_TIMEOUT_Pos (3UL)
  #define USBHSCORE_DIEPINT10_TIMEOUT_Msk (0x1UL << USBHSCORE_DIEPINT10_TIMEOUT_Pos)
  #define USBHSCORE_DIEPINT10_TIMEOUT_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_TIMEOUT_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_TIMEOUT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_TIMEOUT_ACTIVE (0x1UL)

/* INTKNTXFEMP @Bit 4 : IN Token Received When TxFIFO is Empty (INTknTXFEmp) */
  #define USBHSCORE_DIEPINT10_INTKNTXFEMP_Pos (4UL)
  #define USBHSCORE_DIEPINT10_INTKNTXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT10_INTKNTXFEMP_Pos) /*!< Bit mask of INTKNTXFEMP
                                                                            field.*/
  #define USBHSCORE_DIEPINT10_INTKNTXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_INTKNTXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_INTKNTXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_INTKNTXFEMP_ACTIVE (0x1UL)

/* INTKNEPMIS @Bit 5 : IN Token Received with EP Mismatch (INTknEPMis) */
  #define USBHSCORE_DIEPINT10_INTKNEPMIS_Pos (5UL)
  #define USBHSCORE_DIEPINT10_INTKNEPMIS_Msk (0x1UL << USBHSCORE_DIEPINT10_INTKNEPMIS_Pos)
  #define USBHSCORE_DIEPINT10_INTKNEPMIS_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_INTKNEPMIS_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_INTKNEPMIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_INTKNEPMIS_ACTIVE (0x1UL)

/* INEPNAKEFF @Bit 6 : IN Endpoint NAK Effective (INEPNakEff) */
  #define USBHSCORE_DIEPINT10_INEPNAKEFF_Pos (6UL)
  #define USBHSCORE_DIEPINT10_INEPNAKEFF_Msk (0x1UL << USBHSCORE_DIEPINT10_INEPNAKEFF_Pos)
  #define USBHSCORE_DIEPINT10_INEPNAKEFF_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_INEPNAKEFF_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_INEPNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_INEPNAKEFF_ACTIVE (0x1UL)

/* TXFEMP @Bit 7 : Transmit FIFO Empty (TxFEmp) */
  #define USBHSCORE_DIEPINT10_TXFEMP_Pos (7UL)
  #define USBHSCORE_DIEPINT10_TXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT10_TXFEMP_Pos)
  #define USBHSCORE_DIEPINT10_TXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_TXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_TXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_TXFEMP_ACTIVE (0x1UL)

/* TXFIFOUNDRN @Bit 8 : Fifo Underrun (TxfifoUndrn) */
  #define USBHSCORE_DIEPINT10_TXFIFOUNDRN_Pos (8UL)
  #define USBHSCORE_DIEPINT10_TXFIFOUNDRN_Msk (0x1UL << USBHSCORE_DIEPINT10_TXFIFOUNDRN_Pos) /*!< Bit mask of TXFIFOUNDRN
                                                                            field.*/
  #define USBHSCORE_DIEPINT10_TXFIFOUNDRN_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_TXFIFOUNDRN_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_TXFIFOUNDRN_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_TXFIFOUNDRN_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DIEPINT10_BNAINTR_Pos (9UL)
  #define USBHSCORE_DIEPINT10_BNAINTR_Msk (0x1UL << USBHSCORE_DIEPINT10_BNAINTR_Pos)
  #define USBHSCORE_DIEPINT10_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DIEPINT10_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DIEPINT10_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DIEPINT10_PKTDRPSTS_Pos)
  #define USBHSCORE_DIEPINT10_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DIEPINT10_BBLEERR_Pos (12UL)
  #define USBHSCORE_DIEPINT10_BBLEERR_Msk (0x1UL << USBHSCORE_DIEPINT10_BBLEERR_Pos)
  #define USBHSCORE_DIEPINT10_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DIEPINT10_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DIEPINT10_NAKINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT10_NAKINTRPT_Pos)
  #define USBHSCORE_DIEPINT10_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DIEPINT10_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DIEPINT10_NYETINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT10_NYETINTRPT_Pos)
  #define USBHSCORE_DIEPINT10_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT10_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT10_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT10_NYETINTRPT_ACTIVE (0x1UL)


/* USBHSCORE_DIEPTSIZ10: Device IN Endpoint Transfer Size Register */
  #define USBHSCORE_DIEPTSIZ10_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DIEPTSIZ10_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DIEPTSIZ10_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DIEPTSIZ10_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DIEPTSIZ10_PKTCNT_Pos (19UL)
  #define USBHSCORE_DIEPTSIZ10_PKTCNT_Msk (0x3FFUL << USBHSCORE_DIEPTSIZ10_PKTCNT_Pos)

/* MC @Bits 29..30 : MC */
  #define USBHSCORE_DIEPTSIZ10_MC_Pos (29UL)
  #define USBHSCORE_DIEPTSIZ10_MC_Msk (0x3UL << USBHSCORE_DIEPTSIZ10_MC_Pos)
  #define USBHSCORE_DIEPTSIZ10_MC_Min (0x1UL)
  #define USBHSCORE_DIEPTSIZ10_MC_Max (0x3UL)
  #define USBHSCORE_DIEPTSIZ10_MC_PACKETONE (0x1UL)
  #define USBHSCORE_DIEPTSIZ10_MC_PACKETTWO (0x2UL)
  #define USBHSCORE_DIEPTSIZ10_MC_PACKETTHREE (0x3UL)


/* USBHSCORE_DIEPDMA10: Device IN Endpoint DMA Address Register */
  #define USBHSCORE_DIEPDMA10_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DIEPDMA10_DMAADDR_Pos (0UL)
  #define USBHSCORE_DIEPDMA10_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DIEPDMA10_DMAADDR_Pos)


/* USBHSCORE_DTXFSTS10: Device IN Endpoint Transmit FIFO Status Register */
  #define USBHSCORE_DTXFSTS10_ResetValue (0x00000200UL)

/* INEPTXFSPCAVAIL @Bits 0..15 : IN Endpoint TxFIFO Space Avail (INEPTxFSpcAvail) */
  #define USBHSCORE_DTXFSTS10_INEPTXFSPCAVAIL_Pos (0UL)
  #define USBHSCORE_DTXFSTS10_INEPTXFSPCAVAIL_Msk (0xFFFFUL << USBHSCORE_DTXFSTS10_INEPTXFSPCAVAIL_Pos) /*!< Bit mask of
                                                                            INEPTXFSPCAVAIL field.*/


/* USBHSCORE_DIEPCTL11: Device Control IN Endpoint Control Register */
  #define USBHSCORE_DIEPCTL11_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DIEPCTL11_MPS_Pos (0UL)
  #define USBHSCORE_DIEPCTL11_MPS_Msk (0x7FFUL << USBHSCORE_DIEPCTL11_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DIEPCTL11_USBACTEP_Pos (15UL)
  #define USBHSCORE_DIEPCTL11_USBACTEP_Msk (0x1UL << USBHSCORE_DIEPCTL11_USBACTEP_Pos)
  #define USBHSCORE_DIEPCTL11_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DIEPCTL11_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DIEPCTL11_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL11_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : (unspecified) */
  #define USBHSCORE_DIEPCTL11_DPID_Pos (16UL)
  #define USBHSCORE_DIEPCTL11_DPID_Msk (0x1UL << USBHSCORE_DIEPCTL11_DPID_Pos)
  #define USBHSCORE_DIEPCTL11_DPID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL11_DPID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL11_DPID_DATA0EVENFRM (0x0UL)
  #define USBHSCORE_DIEPCTL11_DPID_DATA1ODDFRM (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DIEPCTL11_NAKSTS_Pos (17UL)
  #define USBHSCORE_DIEPCTL11_NAKSTS_Msk (0x1UL << USBHSCORE_DIEPCTL11_NAKSTS_Pos)
  #define USBHSCORE_DIEPCTL11_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL11_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL11_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DIEPCTL11_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DIEPCTL11_EPTYPE_Pos (18UL)
  #define USBHSCORE_DIEPCTL11_EPTYPE_Msk (0x3UL << USBHSCORE_DIEPCTL11_EPTYPE_Pos)
  #define USBHSCORE_DIEPCTL11_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DIEPCTL11_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DIEPCTL11_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DIEPCTL11_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DIEPCTL11_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DIEPCTL11_EPTYPE_INTERRUP (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DIEPCTL11_STALL_Pos (21UL)
  #define USBHSCORE_DIEPCTL11_STALL_Msk (0x1UL << USBHSCORE_DIEPCTL11_STALL_Pos)
  #define USBHSCORE_DIEPCTL11_STALL_Min (0x0UL)
  #define USBHSCORE_DIEPCTL11_STALL_Max (0x1UL)
  #define USBHSCORE_DIEPCTL11_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL11_STALL_ACTIVE (0x1UL)

/* TXFNUM @Bits 22..25 : TxFIFO Number (TxFNum) */
  #define USBHSCORE_DIEPCTL11_TXFNUM_Pos (22UL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_Msk (0xFUL << USBHSCORE_DIEPCTL11_TXFNUM_Pos)
  #define USBHSCORE_DIEPCTL11_TXFNUM_Min (0x0UL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_Max (0xFUL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO0 (0x0UL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO1 (0x1UL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO2 (0x2UL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO3 (0x3UL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO4 (0x4UL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO5 (0x5UL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO6 (0x6UL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO7 (0x7UL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO8 (0x8UL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO9 (0x9UL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO10 (0xAUL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO11 (0xBUL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO12 (0xCUL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO13 (0xDUL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO14 (0xEUL)
  #define USBHSCORE_DIEPCTL11_TXFNUM_TXFIFO15 (0xFUL)

/* CNAK @Bit 26 : Clear NAK (CNAK) */
  #define USBHSCORE_DIEPCTL11_CNAK_Pos (26UL)
  #define USBHSCORE_DIEPCTL11_CNAK_Msk (0x1UL << USBHSCORE_DIEPCTL11_CNAK_Pos)
  #define USBHSCORE_DIEPCTL11_CNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL11_CNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL11_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL11_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DIEPCTL11_SNAK_Pos (27UL)
  #define USBHSCORE_DIEPCTL11_SNAK_Msk (0x1UL << USBHSCORE_DIEPCTL11_SNAK_Pos)
  #define USBHSCORE_DIEPCTL11_SNAK_Min (0x0UL)
  #define USBHSCORE_DIEPCTL11_SNAK_Max (0x1UL)
  #define USBHSCORE_DIEPCTL11_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL11_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DIEPCTL11_SETD0PID_Pos (28UL)
  #define USBHSCORE_DIEPCTL11_SETD0PID_Msk (0x1UL << USBHSCORE_DIEPCTL11_SETD0PID_Pos)
  #define USBHSCORE_DIEPCTL11_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL11_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL11_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL11_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to Even
                                                            (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DIEPCTL11_SETD1PID_Pos (29UL)
  #define USBHSCORE_DIEPCTL11_SETD1PID_Msk (0x1UL << USBHSCORE_DIEPCTL11_SETD1PID_Pos)
  #define USBHSCORE_DIEPCTL11_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DIEPCTL11_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DIEPCTL11_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DIEPCTL11_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to Odd
                                                            (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DIEPCTL11_EPDIS_Pos (30UL)
  #define USBHSCORE_DIEPCTL11_EPDIS_Msk (0x1UL << USBHSCORE_DIEPCTL11_EPDIS_Pos)
  #define USBHSCORE_DIEPCTL11_EPDIS_Min (0x0UL)
  #define USBHSCORE_DIEPCTL11_EPDIS_Max (0x1UL)
  #define USBHSCORE_DIEPCTL11_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL11_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DIEPCTL11_EPENA_Pos (31UL)
  #define USBHSCORE_DIEPCTL11_EPENA_Msk (0x1UL << USBHSCORE_DIEPCTL11_EPENA_Pos)
  #define USBHSCORE_DIEPCTL11_EPENA_Min (0x0UL)
  #define USBHSCORE_DIEPCTL11_EPENA_Max (0x1UL)
  #define USBHSCORE_DIEPCTL11_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPCTL11_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DIEPINT11: Device IN Endpoint Interrupt Register */
  #define USBHSCORE_DIEPINT11_ResetValue (0x00000080UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DIEPINT11_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DIEPINT11_XFERCOMPL_Msk (0x1UL << USBHSCORE_DIEPINT11_XFERCOMPL_Pos)
  #define USBHSCORE_DIEPINT11_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DIEPINT11_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DIEPINT11_EPDISBLD_Msk (0x1UL << USBHSCORE_DIEPINT11_EPDISBLD_Pos)
  #define USBHSCORE_DIEPINT11_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DIEPINT11_AHBERR_Pos (2UL)
  #define USBHSCORE_DIEPINT11_AHBERR_Msk (0x1UL << USBHSCORE_DIEPINT11_AHBERR_Pos)
  #define USBHSCORE_DIEPINT11_AHBERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_AHBERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_AHBERR_ACTIVE (0x1UL)

/* TIMEOUT @Bit 3 : Timeout Condition (TimeOUT) */
  #define USBHSCORE_DIEPINT11_TIMEOUT_Pos (3UL)
  #define USBHSCORE_DIEPINT11_TIMEOUT_Msk (0x1UL << USBHSCORE_DIEPINT11_TIMEOUT_Pos)
  #define USBHSCORE_DIEPINT11_TIMEOUT_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_TIMEOUT_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_TIMEOUT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_TIMEOUT_ACTIVE (0x1UL)

/* INTKNTXFEMP @Bit 4 : IN Token Received When TxFIFO is Empty (INTknTXFEmp) */
  #define USBHSCORE_DIEPINT11_INTKNTXFEMP_Pos (4UL)
  #define USBHSCORE_DIEPINT11_INTKNTXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT11_INTKNTXFEMP_Pos) /*!< Bit mask of INTKNTXFEMP
                                                                            field.*/
  #define USBHSCORE_DIEPINT11_INTKNTXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_INTKNTXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_INTKNTXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_INTKNTXFEMP_ACTIVE (0x1UL)

/* INTKNEPMIS @Bit 5 : IN Token Received with EP Mismatch (INTknEPMis) */
  #define USBHSCORE_DIEPINT11_INTKNEPMIS_Pos (5UL)
  #define USBHSCORE_DIEPINT11_INTKNEPMIS_Msk (0x1UL << USBHSCORE_DIEPINT11_INTKNEPMIS_Pos)
  #define USBHSCORE_DIEPINT11_INTKNEPMIS_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_INTKNEPMIS_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_INTKNEPMIS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_INTKNEPMIS_ACTIVE (0x1UL)

/* INEPNAKEFF @Bit 6 : IN Endpoint NAK Effective (INEPNakEff) */
  #define USBHSCORE_DIEPINT11_INEPNAKEFF_Pos (6UL)
  #define USBHSCORE_DIEPINT11_INEPNAKEFF_Msk (0x1UL << USBHSCORE_DIEPINT11_INEPNAKEFF_Pos)
  #define USBHSCORE_DIEPINT11_INEPNAKEFF_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_INEPNAKEFF_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_INEPNAKEFF_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_INEPNAKEFF_ACTIVE (0x1UL)

/* TXFEMP @Bit 7 : Transmit FIFO Empty (TxFEmp) */
  #define USBHSCORE_DIEPINT11_TXFEMP_Pos (7UL)
  #define USBHSCORE_DIEPINT11_TXFEMP_Msk (0x1UL << USBHSCORE_DIEPINT11_TXFEMP_Pos)
  #define USBHSCORE_DIEPINT11_TXFEMP_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_TXFEMP_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_TXFEMP_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_TXFEMP_ACTIVE (0x1UL)

/* TXFIFOUNDRN @Bit 8 : Fifo Underrun (TxfifoUndrn) */
  #define USBHSCORE_DIEPINT11_TXFIFOUNDRN_Pos (8UL)
  #define USBHSCORE_DIEPINT11_TXFIFOUNDRN_Msk (0x1UL << USBHSCORE_DIEPINT11_TXFIFOUNDRN_Pos) /*!< Bit mask of TXFIFOUNDRN
                                                                            field.*/
  #define USBHSCORE_DIEPINT11_TXFIFOUNDRN_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_TXFIFOUNDRN_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_TXFIFOUNDRN_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_TXFIFOUNDRN_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DIEPINT11_BNAINTR_Pos (9UL)
  #define USBHSCORE_DIEPINT11_BNAINTR_Msk (0x1UL << USBHSCORE_DIEPINT11_BNAINTR_Pos)
  #define USBHSCORE_DIEPINT11_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DIEPINT11_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DIEPINT11_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DIEPINT11_PKTDRPSTS_Pos)
  #define USBHSCORE_DIEPINT11_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DIEPINT11_BBLEERR_Pos (12UL)
  #define USBHSCORE_DIEPINT11_BBLEERR_Msk (0x1UL << USBHSCORE_DIEPINT11_BBLEERR_Pos)
  #define USBHSCORE_DIEPINT11_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DIEPINT11_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DIEPINT11_NAKINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT11_NAKINTRPT_Pos)
  #define USBHSCORE_DIEPINT11_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DIEPINT11_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DIEPINT11_NYETINTRPT_Msk (0x1UL << USBHSCORE_DIEPINT11_NYETINTRPT_Pos)
  #define USBHSCORE_DIEPINT11_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DIEPINT11_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DIEPINT11_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DIEPINT11_NYETINTRPT_ACTIVE (0x1UL)


/* USBHSCORE_DIEPTSIZ11: Device IN Endpoint Transfer Size Register */
  #define USBHSCORE_DIEPTSIZ11_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DIEPTSIZ11_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DIEPTSIZ11_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DIEPTSIZ11_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DIEPTSIZ11_PKTCNT_Pos (19UL)
  #define USBHSCORE_DIEPTSIZ11_PKTCNT_Msk (0x3FFUL << USBHSCORE_DIEPTSIZ11_PKTCNT_Pos)

/* MC @Bits 29..30 : MC */
  #define USBHSCORE_DIEPTSIZ11_MC_Pos (29UL)
  #define USBHSCORE_DIEPTSIZ11_MC_Msk (0x3UL << USBHSCORE_DIEPTSIZ11_MC_Pos)
  #define USBHSCORE_DIEPTSIZ11_MC_Min (0x1UL)
  #define USBHSCORE_DIEPTSIZ11_MC_Max (0x3UL)
  #define USBHSCORE_DIEPTSIZ11_MC_PACKETONE (0x1UL)
  #define USBHSCORE_DIEPTSIZ11_MC_PACKETTWO (0x2UL)
  #define USBHSCORE_DIEPTSIZ11_MC_PACKETTHREE (0x3UL)


/* USBHSCORE_DIEPDMA11: Device IN Endpoint DMA Address Register */
  #define USBHSCORE_DIEPDMA11_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DIEPDMA11_DMAADDR_Pos (0UL)
  #define USBHSCORE_DIEPDMA11_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DIEPDMA11_DMAADDR_Pos)


/* USBHSCORE_DTXFSTS11: Device IN Endpoint Transmit FIFO Status Register */
  #define USBHSCORE_DTXFSTS11_ResetValue (0x00000200UL)

/* INEPTXFSPCAVAIL @Bits 0..15 : IN Endpoint TxFIFO Space Avail (INEPTxFSpcAvail) */
  #define USBHSCORE_DTXFSTS11_INEPTXFSPCAVAIL_Pos (0UL)
  #define USBHSCORE_DTXFSTS11_INEPTXFSPCAVAIL_Msk (0xFFFFUL << USBHSCORE_DTXFSTS11_INEPTXFSPCAVAIL_Pos) /*!< Bit mask of
                                                                            INEPTXFSPCAVAIL field.*/


/* USBHSCORE_DOEPCTL0: Device Control OUT Endpoint 0 Control Register */
  #define USBHSCORE_DOEPCTL0_ResetValue (0x00008000UL)

/* MPS @Bits 0..1 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DOEPCTL0_MPS_Pos (0UL)
  #define USBHSCORE_DOEPCTL0_MPS_Msk (0x3UL << USBHSCORE_DOEPCTL0_MPS_Pos)
  #define USBHSCORE_DOEPCTL0_MPS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL0_MPS_Max (0x3UL)
  #define USBHSCORE_DOEPCTL0_MPS_BYTE64 (0x0UL)
  #define USBHSCORE_DOEPCTL0_MPS_BYTE32 (0x1UL)
  #define USBHSCORE_DOEPCTL0_MPS_BYTE16 (0x2UL)
  #define USBHSCORE_DOEPCTL0_MPS_BYTE8 (0x3UL)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DOEPCTL0_USBACTEP_Pos (15UL)
  #define USBHSCORE_DOEPCTL0_USBACTEP_Msk (0x1UL << USBHSCORE_DOEPCTL0_USBACTEP_Pos)
  #define USBHSCORE_DOEPCTL0_USBACTEP_Min (0x1UL)
  #define USBHSCORE_DOEPCTL0_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DOEPCTL0_USBACTEP_ACTIVE (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DOEPCTL0_NAKSTS_Pos (17UL)
  #define USBHSCORE_DOEPCTL0_NAKSTS_Msk (0x1UL << USBHSCORE_DOEPCTL0_NAKSTS_Pos)
  #define USBHSCORE_DOEPCTL0_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL0_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL0_NAKSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL0_NAKSTS_ACTIVE (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DOEPCTL0_EPTYPE_Pos (18UL)
  #define USBHSCORE_DOEPCTL0_EPTYPE_Msk (0x3UL << USBHSCORE_DOEPCTL0_EPTYPE_Pos)
  #define USBHSCORE_DOEPCTL0_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DOEPCTL0_EPTYPE_Max (0x0UL)
  #define USBHSCORE_DOEPCTL0_EPTYPE_ACTIVE (0x0UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DOEPCTL0_STALL_Pos (21UL)
  #define USBHSCORE_DOEPCTL0_STALL_Msk (0x1UL << USBHSCORE_DOEPCTL0_STALL_Pos)
  #define USBHSCORE_DOEPCTL0_STALL_Min (0x0UL)
  #define USBHSCORE_DOEPCTL0_STALL_Max (0x1UL)
  #define USBHSCORE_DOEPCTL0_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL0_STALL_ACTIVE (0x1UL)

/* CNAK @Bit 26 : Clear NAK (CNAK) */
  #define USBHSCORE_DOEPCTL0_CNAK_Pos (26UL)
  #define USBHSCORE_DOEPCTL0_CNAK_Msk (0x1UL << USBHSCORE_DOEPCTL0_CNAK_Pos)
  #define USBHSCORE_DOEPCTL0_CNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL0_CNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL0_CNAK_NOCLEAR (0x0UL)
  #define USBHSCORE_DOEPCTL0_CNAK_CLEAR (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DOEPCTL0_SNAK_Pos (27UL)
  #define USBHSCORE_DOEPCTL0_SNAK_Msk (0x1UL << USBHSCORE_DOEPCTL0_SNAK_Pos)
  #define USBHSCORE_DOEPCTL0_SNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL0_SNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL0_SNAK_NOSET (0x0UL)
  #define USBHSCORE_DOEPCTL0_SNAK_SET (0x1UL)

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DOEPCTL0_EPDIS_Pos (30UL)
  #define USBHSCORE_DOEPCTL0_EPDIS_Msk (0x1UL << USBHSCORE_DOEPCTL0_EPDIS_Pos)
  #define USBHSCORE_DOEPCTL0_EPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL0_EPDIS_Max (0x0UL)
  #define USBHSCORE_DOEPCTL0_EPDIS_INACTIVE (0x0UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DOEPCTL0_EPENA_Pos (31UL)
  #define USBHSCORE_DOEPCTL0_EPENA_Msk (0x1UL << USBHSCORE_DOEPCTL0_EPENA_Pos)
  #define USBHSCORE_DOEPCTL0_EPENA_Min (0x0UL)
  #define USBHSCORE_DOEPCTL0_EPENA_Max (0x1UL)
  #define USBHSCORE_DOEPCTL0_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL0_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DOEPINT0: Device OUT Endpoint 0 Interrupt Register */
  #define USBHSCORE_DOEPINT0_ResetValue (0x00000000UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DOEPINT0_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DOEPINT0_XFERCOMPL_Msk (0x1UL << USBHSCORE_DOEPINT0_XFERCOMPL_Pos)
  #define USBHSCORE_DOEPINT0_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT0_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DOEPINT0_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DOEPINT0_EPDISBLD_Msk (0x1UL << USBHSCORE_DOEPINT0_EPDISBLD_Pos)
  #define USBHSCORE_DOEPINT0_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT0_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DOEPINT0_AHBERR_Pos (2UL)
  #define USBHSCORE_DOEPINT0_AHBERR_Msk (0x1UL << USBHSCORE_DOEPINT0_AHBERR_Pos)
  #define USBHSCORE_DOEPINT0_AHBERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_AHBERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT0_AHBERR_ACTIVE (0x1UL)

/* SETUP @Bit 3 : SETUP Phase Done (SetUp) */
  #define USBHSCORE_DOEPINT0_SETUP_Pos (3UL)
  #define USBHSCORE_DOEPINT0_SETUP_Msk (0x1UL << USBHSCORE_DOEPINT0_SETUP_Pos)
  #define USBHSCORE_DOEPINT0_SETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_SETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_SETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT0_SETUP_ACTIVE (0x1UL)

/* OUTTKNEPDIS @Bit 4 : OUT Token Received When Endpoint Disabled (OUTTknEPdis) */
  #define USBHSCORE_DOEPINT0_OUTTKNEPDIS_Pos (4UL)
  #define USBHSCORE_DOEPINT0_OUTTKNEPDIS_Msk (0x1UL << USBHSCORE_DOEPINT0_OUTTKNEPDIS_Pos)
  #define USBHSCORE_DOEPINT0_OUTTKNEPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_OUTTKNEPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_OUTTKNEPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT0_OUTTKNEPDIS_ACTIVE (0x1UL)

/* STSPHSERCVD @Bit 5 : Status Phase Received for Control Write (StsPhseRcvd) */
  #define USBHSCORE_DOEPINT0_STSPHSERCVD_Pos (5UL)
  #define USBHSCORE_DOEPINT0_STSPHSERCVD_Msk (0x1UL << USBHSCORE_DOEPINT0_STSPHSERCVD_Pos)
  #define USBHSCORE_DOEPINT0_STSPHSERCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_STSPHSERCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_STSPHSERCVD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT0_STSPHSERCVD_ACTIVE (0x1UL)

/* BACK2BACKSETUP @Bit 6 : Back-to-Back SETUP Packets Received (Back2BackSETup) */
  #define USBHSCORE_DOEPINT0_BACK2BACKSETUP_Pos (6UL)
  #define USBHSCORE_DOEPINT0_BACK2BACKSETUP_Msk (0x1UL << USBHSCORE_DOEPINT0_BACK2BACKSETUP_Pos) /*!< Bit mask of BACK2BACKSETUP
                                                                            field.*/
  #define USBHSCORE_DOEPINT0_BACK2BACKSETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_BACK2BACKSETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_BACK2BACKSETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT0_BACK2BACKSETUP_ACTIVE (0x1UL)

/* OUTPKTERR @Bit 8 : OUT Packet Error (OutPktErr) */
  #define USBHSCORE_DOEPINT0_OUTPKTERR_Pos (8UL)
  #define USBHSCORE_DOEPINT0_OUTPKTERR_Msk (0x1UL << USBHSCORE_DOEPINT0_OUTPKTERR_Pos)
  #define USBHSCORE_DOEPINT0_OUTPKTERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_OUTPKTERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_OUTPKTERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT0_OUTPKTERR_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DOEPINT0_BNAINTR_Pos (9UL)
  #define USBHSCORE_DOEPINT0_BNAINTR_Msk (0x1UL << USBHSCORE_DOEPINT0_BNAINTR_Pos)
  #define USBHSCORE_DOEPINT0_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT0_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DOEPINT0_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DOEPINT0_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DOEPINT0_PKTDRPSTS_Pos)
  #define USBHSCORE_DOEPINT0_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT0_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DOEPINT0_BBLEERR_Pos (12UL)
  #define USBHSCORE_DOEPINT0_BBLEERR_Msk (0x1UL << USBHSCORE_DOEPINT0_BBLEERR_Pos)
  #define USBHSCORE_DOEPINT0_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT0_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DOEPINT0_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DOEPINT0_NAKINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT0_NAKINTRPT_Pos)
  #define USBHSCORE_DOEPINT0_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT0_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DOEPINT0_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DOEPINT0_NYETINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT0_NYETINTRPT_Pos)
  #define USBHSCORE_DOEPINT0_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT0_NYETINTRPT_ACTIVE (0x1UL)

/* STUPPKTRCVD @Bit 15 : Setup Packet Received */
  #define USBHSCORE_DOEPINT0_STUPPKTRCVD_Pos (15UL)
  #define USBHSCORE_DOEPINT0_STUPPKTRCVD_Msk (0x1UL << USBHSCORE_DOEPINT0_STUPPKTRCVD_Pos)
  #define USBHSCORE_DOEPINT0_STUPPKTRCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT0_STUPPKTRCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT0_STUPPKTRCVD_NOT_RCVD (0x0UL)
  #define USBHSCORE_DOEPINT0_STUPPKTRCVD_RCVD (0x1UL)


/* USBHSCORE_DOEPTSIZ0: Device OUT Endpoint 0 Transfer Size Register */
  #define USBHSCORE_DOEPTSIZ0_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..6 : Transfer Size (XferSize) */
  #define USBHSCORE_DOEPTSIZ0_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DOEPTSIZ0_XFERSIZE_Msk (0x7FUL << USBHSCORE_DOEPTSIZ0_XFERSIZE_Pos)

/* PKTCNT @Bit 19 : Packet Count (PktCnt) */
  #define USBHSCORE_DOEPTSIZ0_PKTCNT_Pos (19UL)
  #define USBHSCORE_DOEPTSIZ0_PKTCNT_Msk (0x1UL << USBHSCORE_DOEPTSIZ0_PKTCNT_Pos)

/* SUPCNT @Bits 29..30 : SETUP Packet Count (SUPCnt) */
  #define USBHSCORE_DOEPTSIZ0_SUPCNT_Pos (29UL)
  #define USBHSCORE_DOEPTSIZ0_SUPCNT_Msk (0x3UL << USBHSCORE_DOEPTSIZ0_SUPCNT_Pos)
  #define USBHSCORE_DOEPTSIZ0_SUPCNT_Min (0x1UL)
  #define USBHSCORE_DOEPTSIZ0_SUPCNT_Max (0x3UL)
  #define USBHSCORE_DOEPTSIZ0_SUPCNT_ONEPACKET (0x1UL)
  #define USBHSCORE_DOEPTSIZ0_SUPCNT_TWOPACKET (0x2UL)
  #define USBHSCORE_DOEPTSIZ0_SUPCNT_THREEPACKET (0x3UL)


/* USBHSCORE_DOEPDMA0: Device OUT Endpoint 0 DMA Address Register */
  #define USBHSCORE_DOEPDMA0_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DOEPDMA0_DMAADDR_Pos (0UL)
  #define USBHSCORE_DOEPDMA0_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DOEPDMA0_DMAADDR_Pos)


/* USBHSCORE_DOEPCTL1: Device Control OUT Endpoint Control Register */
  #define USBHSCORE_DOEPCTL1_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DOEPCTL1_MPS_Pos (0UL)
  #define USBHSCORE_DOEPCTL1_MPS_Msk (0x7FFUL << USBHSCORE_DOEPCTL1_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DOEPCTL1_USBACTEP_Pos (15UL)
  #define USBHSCORE_DOEPCTL1_USBACTEP_Msk (0x1UL << USBHSCORE_DOEPCTL1_USBACTEP_Pos)
  #define USBHSCORE_DOEPCTL1_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DOEPCTL1_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DOEPCTL1_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL1_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : Endpoint Data PID (DPID) */
  #define USBHSCORE_DOEPCTL1_DPID_Pos (16UL)
  #define USBHSCORE_DOEPCTL1_DPID_Msk (0x1UL << USBHSCORE_DOEPCTL1_DPID_Pos)
  #define USBHSCORE_DOEPCTL1_DPID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL1_DPID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL1_DPID_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL1_DPID_ACTIVE (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DOEPCTL1_NAKSTS_Pos (17UL)
  #define USBHSCORE_DOEPCTL1_NAKSTS_Msk (0x1UL << USBHSCORE_DOEPCTL1_NAKSTS_Pos)
  #define USBHSCORE_DOEPCTL1_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL1_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL1_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DOEPCTL1_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DOEPCTL1_EPTYPE_Pos (18UL)
  #define USBHSCORE_DOEPCTL1_EPTYPE_Msk (0x3UL << USBHSCORE_DOEPCTL1_EPTYPE_Pos)
  #define USBHSCORE_DOEPCTL1_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DOEPCTL1_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DOEPCTL1_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DOEPCTL1_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DOEPCTL1_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DOEPCTL1_EPTYPE_INTERRUPT (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DOEPCTL1_STALL_Pos (21UL)
  #define USBHSCORE_DOEPCTL1_STALL_Msk (0x1UL << USBHSCORE_DOEPCTL1_STALL_Pos)
  #define USBHSCORE_DOEPCTL1_STALL_Min (0x0UL)
  #define USBHSCORE_DOEPCTL1_STALL_Max (0x1UL)
  #define USBHSCORE_DOEPCTL1_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL1_STALL_ACTIVE (0x1UL)

/* CNAK @Bit 26 : (unspecified) */
  #define USBHSCORE_DOEPCTL1_CNAK_Pos (26UL)
  #define USBHSCORE_DOEPCTL1_CNAK_Msk (0x1UL << USBHSCORE_DOEPCTL1_CNAK_Pos)
  #define USBHSCORE_DOEPCTL1_CNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL1_CNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL1_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL1_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DOEPCTL1_SNAK_Pos (27UL)
  #define USBHSCORE_DOEPCTL1_SNAK_Msk (0x1UL << USBHSCORE_DOEPCTL1_SNAK_Pos)
  #define USBHSCORE_DOEPCTL1_SNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL1_SNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL1_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL1_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DOEPCTL1_SETD0PID_Pos (28UL)
  #define USBHSCORE_DOEPCTL1_SETD0PID_Msk (0x1UL << USBHSCORE_DOEPCTL1_SETD0PID_Pos)
  #define USBHSCORE_DOEPCTL1_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL1_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL1_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL1_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to odd
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DOEPCTL1_SETD1PID_Pos (29UL)
  #define USBHSCORE_DOEPCTL1_SETD1PID_Msk (0x1UL << USBHSCORE_DOEPCTL1_SETD1PID_Pos)
  #define USBHSCORE_DOEPCTL1_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL1_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL1_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL1_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DOEPCTL1_EPDIS_Pos (30UL)
  #define USBHSCORE_DOEPCTL1_EPDIS_Msk (0x1UL << USBHSCORE_DOEPCTL1_EPDIS_Pos)
  #define USBHSCORE_DOEPCTL1_EPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL1_EPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL1_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL1_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DOEPCTL1_EPENA_Pos (31UL)
  #define USBHSCORE_DOEPCTL1_EPENA_Msk (0x1UL << USBHSCORE_DOEPCTL1_EPENA_Pos)
  #define USBHSCORE_DOEPCTL1_EPENA_Min (0x0UL)
  #define USBHSCORE_DOEPCTL1_EPENA_Max (0x1UL)
  #define USBHSCORE_DOEPCTL1_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL1_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DOEPINT1: Device OUT Endpoint Interrupt Register */
  #define USBHSCORE_DOEPINT1_ResetValue (0x00000000UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DOEPINT1_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DOEPINT1_XFERCOMPL_Msk (0x1UL << USBHSCORE_DOEPINT1_XFERCOMPL_Pos)
  #define USBHSCORE_DOEPINT1_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT1_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DOEPINT1_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DOEPINT1_EPDISBLD_Msk (0x1UL << USBHSCORE_DOEPINT1_EPDISBLD_Pos)
  #define USBHSCORE_DOEPINT1_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT1_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DOEPINT1_AHBERR_Pos (2UL)
  #define USBHSCORE_DOEPINT1_AHBERR_Msk (0x1UL << USBHSCORE_DOEPINT1_AHBERR_Pos)
  #define USBHSCORE_DOEPINT1_AHBERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_AHBERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT1_AHBERR_ACTIVE (0x1UL)

/* SETUP @Bit 3 : SETUP Phase Done (SetUp) */
  #define USBHSCORE_DOEPINT1_SETUP_Pos (3UL)
  #define USBHSCORE_DOEPINT1_SETUP_Msk (0x1UL << USBHSCORE_DOEPINT1_SETUP_Pos)
  #define USBHSCORE_DOEPINT1_SETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_SETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_SETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT1_SETUP_ACTIVE (0x1UL)

/* OUTTKNEPDIS @Bit 4 : OUT Token Received When Endpoint Disabled (OUTTknEPdis) */
  #define USBHSCORE_DOEPINT1_OUTTKNEPDIS_Pos (4UL)
  #define USBHSCORE_DOEPINT1_OUTTKNEPDIS_Msk (0x1UL << USBHSCORE_DOEPINT1_OUTTKNEPDIS_Pos)
  #define USBHSCORE_DOEPINT1_OUTTKNEPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_OUTTKNEPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_OUTTKNEPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT1_OUTTKNEPDIS_ACTIVE (0x1UL)

/* STSPHSERCVD @Bit 5 : Status Phase Received for Control Write (StsPhseRcvd) */
  #define USBHSCORE_DOEPINT1_STSPHSERCVD_Pos (5UL)
  #define USBHSCORE_DOEPINT1_STSPHSERCVD_Msk (0x1UL << USBHSCORE_DOEPINT1_STSPHSERCVD_Pos)
  #define USBHSCORE_DOEPINT1_STSPHSERCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_STSPHSERCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_STSPHSERCVD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT1_STSPHSERCVD_ACTIVE (0x1UL)

/* BACK2BACKSETUP @Bit 6 : Back-to-Back SETUP Packets Received (Back2BackSETup) */
  #define USBHSCORE_DOEPINT1_BACK2BACKSETUP_Pos (6UL)
  #define USBHSCORE_DOEPINT1_BACK2BACKSETUP_Msk (0x1UL << USBHSCORE_DOEPINT1_BACK2BACKSETUP_Pos) /*!< Bit mask of BACK2BACKSETUP
                                                                            field.*/
  #define USBHSCORE_DOEPINT1_BACK2BACKSETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_BACK2BACKSETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_BACK2BACKSETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT1_BACK2BACKSETUP_ACTIVE (0x1UL)

/* OUTPKTERR @Bit 8 : OUT Packet Error (OutPktErr) */
  #define USBHSCORE_DOEPINT1_OUTPKTERR_Pos (8UL)
  #define USBHSCORE_DOEPINT1_OUTPKTERR_Msk (0x1UL << USBHSCORE_DOEPINT1_OUTPKTERR_Pos)
  #define USBHSCORE_DOEPINT1_OUTPKTERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_OUTPKTERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_OUTPKTERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT1_OUTPKTERR_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DOEPINT1_BNAINTR_Pos (9UL)
  #define USBHSCORE_DOEPINT1_BNAINTR_Msk (0x1UL << USBHSCORE_DOEPINT1_BNAINTR_Pos)
  #define USBHSCORE_DOEPINT1_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT1_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DOEPINT1_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DOEPINT1_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DOEPINT1_PKTDRPSTS_Pos)
  #define USBHSCORE_DOEPINT1_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT1_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DOEPINT1_BBLEERR_Pos (12UL)
  #define USBHSCORE_DOEPINT1_BBLEERR_Msk (0x1UL << USBHSCORE_DOEPINT1_BBLEERR_Pos)
  #define USBHSCORE_DOEPINT1_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT1_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DOEPINT1_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DOEPINT1_NAKINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT1_NAKINTRPT_Pos)
  #define USBHSCORE_DOEPINT1_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT1_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DOEPINT1_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DOEPINT1_NYETINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT1_NYETINTRPT_Pos)
  #define USBHSCORE_DOEPINT1_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT1_NYETINTRPT_ACTIVE (0x1UL)

/* STUPPKTRCVD @Bit 15 : Setup Packet Received */
  #define USBHSCORE_DOEPINT1_STUPPKTRCVD_Pos (15UL)
  #define USBHSCORE_DOEPINT1_STUPPKTRCVD_Msk (0x1UL << USBHSCORE_DOEPINT1_STUPPKTRCVD_Pos)
  #define USBHSCORE_DOEPINT1_STUPPKTRCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT1_STUPPKTRCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT1_STUPPKTRCVD_NOT_RCVD (0x0UL)
  #define USBHSCORE_DOEPINT1_STUPPKTRCVD_RCVD (0x1UL)


/* USBHSCORE_DOEPTSIZ1: Device OUT Endpoint Transfer Size Register */
  #define USBHSCORE_DOEPTSIZ1_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DOEPTSIZ1_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DOEPTSIZ1_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DOEPTSIZ1_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DOEPTSIZ1_PKTCNT_Pos (19UL)
  #define USBHSCORE_DOEPTSIZ1_PKTCNT_Msk (0x3FFUL << USBHSCORE_DOEPTSIZ1_PKTCNT_Pos)

/* RXDPID @Bits 29..30 : RxDPID */
  #define USBHSCORE_DOEPTSIZ1_RXDPID_Pos (29UL)
  #define USBHSCORE_DOEPTSIZ1_RXDPID_Msk (0x3UL << USBHSCORE_DOEPTSIZ1_RXDPID_Pos)
  #define USBHSCORE_DOEPTSIZ1_RXDPID_Min (0x0UL)
  #define USBHSCORE_DOEPTSIZ1_RXDPID_Max (0x3UL)
  #define USBHSCORE_DOEPTSIZ1_RXDPID_DATA0 (0x0UL)
  #define USBHSCORE_DOEPTSIZ1_RXDPID_DATA2PACKET1 (0x1UL)
  #define USBHSCORE_DOEPTSIZ1_RXDPID_DATA1PACKET2 (0x2UL)
  #define USBHSCORE_DOEPTSIZ1_RXDPID_MDATAPACKET3 (0x3UL)


/* USBHSCORE_DOEPDMA1: Device OUT Endpoint DMA Address Register */
  #define USBHSCORE_DOEPDMA1_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DOEPDMA1_DMAADDR_Pos (0UL)
  #define USBHSCORE_DOEPDMA1_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DOEPDMA1_DMAADDR_Pos)


/* USBHSCORE_DOEPCTL2: Device Control OUT Endpoint Control Register */
  #define USBHSCORE_DOEPCTL2_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DOEPCTL2_MPS_Pos (0UL)
  #define USBHSCORE_DOEPCTL2_MPS_Msk (0x7FFUL << USBHSCORE_DOEPCTL2_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DOEPCTL2_USBACTEP_Pos (15UL)
  #define USBHSCORE_DOEPCTL2_USBACTEP_Msk (0x1UL << USBHSCORE_DOEPCTL2_USBACTEP_Pos)
  #define USBHSCORE_DOEPCTL2_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DOEPCTL2_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DOEPCTL2_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL2_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : Endpoint Data PID (DPID) */
  #define USBHSCORE_DOEPCTL2_DPID_Pos (16UL)
  #define USBHSCORE_DOEPCTL2_DPID_Msk (0x1UL << USBHSCORE_DOEPCTL2_DPID_Pos)
  #define USBHSCORE_DOEPCTL2_DPID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL2_DPID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL2_DPID_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL2_DPID_ACTIVE (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DOEPCTL2_NAKSTS_Pos (17UL)
  #define USBHSCORE_DOEPCTL2_NAKSTS_Msk (0x1UL << USBHSCORE_DOEPCTL2_NAKSTS_Pos)
  #define USBHSCORE_DOEPCTL2_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL2_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL2_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DOEPCTL2_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DOEPCTL2_EPTYPE_Pos (18UL)
  #define USBHSCORE_DOEPCTL2_EPTYPE_Msk (0x3UL << USBHSCORE_DOEPCTL2_EPTYPE_Pos)
  #define USBHSCORE_DOEPCTL2_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DOEPCTL2_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DOEPCTL2_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DOEPCTL2_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DOEPCTL2_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DOEPCTL2_EPTYPE_INTERRUPT (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DOEPCTL2_STALL_Pos (21UL)
  #define USBHSCORE_DOEPCTL2_STALL_Msk (0x1UL << USBHSCORE_DOEPCTL2_STALL_Pos)
  #define USBHSCORE_DOEPCTL2_STALL_Min (0x0UL)
  #define USBHSCORE_DOEPCTL2_STALL_Max (0x1UL)
  #define USBHSCORE_DOEPCTL2_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL2_STALL_ACTIVE (0x1UL)

/* CNAK @Bit 26 : (unspecified) */
  #define USBHSCORE_DOEPCTL2_CNAK_Pos (26UL)
  #define USBHSCORE_DOEPCTL2_CNAK_Msk (0x1UL << USBHSCORE_DOEPCTL2_CNAK_Pos)
  #define USBHSCORE_DOEPCTL2_CNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL2_CNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL2_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL2_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DOEPCTL2_SNAK_Pos (27UL)
  #define USBHSCORE_DOEPCTL2_SNAK_Msk (0x1UL << USBHSCORE_DOEPCTL2_SNAK_Pos)
  #define USBHSCORE_DOEPCTL2_SNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL2_SNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL2_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL2_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DOEPCTL2_SETD0PID_Pos (28UL)
  #define USBHSCORE_DOEPCTL2_SETD0PID_Msk (0x1UL << USBHSCORE_DOEPCTL2_SETD0PID_Pos)
  #define USBHSCORE_DOEPCTL2_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL2_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL2_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL2_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to odd
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DOEPCTL2_SETD1PID_Pos (29UL)
  #define USBHSCORE_DOEPCTL2_SETD1PID_Msk (0x1UL << USBHSCORE_DOEPCTL2_SETD1PID_Pos)
  #define USBHSCORE_DOEPCTL2_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL2_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL2_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL2_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DOEPCTL2_EPDIS_Pos (30UL)
  #define USBHSCORE_DOEPCTL2_EPDIS_Msk (0x1UL << USBHSCORE_DOEPCTL2_EPDIS_Pos)
  #define USBHSCORE_DOEPCTL2_EPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL2_EPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL2_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL2_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DOEPCTL2_EPENA_Pos (31UL)
  #define USBHSCORE_DOEPCTL2_EPENA_Msk (0x1UL << USBHSCORE_DOEPCTL2_EPENA_Pos)
  #define USBHSCORE_DOEPCTL2_EPENA_Min (0x0UL)
  #define USBHSCORE_DOEPCTL2_EPENA_Max (0x1UL)
  #define USBHSCORE_DOEPCTL2_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL2_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DOEPINT2: Device OUT Endpoint Interrupt Register */
  #define USBHSCORE_DOEPINT2_ResetValue (0x00000000UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DOEPINT2_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DOEPINT2_XFERCOMPL_Msk (0x1UL << USBHSCORE_DOEPINT2_XFERCOMPL_Pos)
  #define USBHSCORE_DOEPINT2_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT2_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DOEPINT2_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DOEPINT2_EPDISBLD_Msk (0x1UL << USBHSCORE_DOEPINT2_EPDISBLD_Pos)
  #define USBHSCORE_DOEPINT2_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT2_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DOEPINT2_AHBERR_Pos (2UL)
  #define USBHSCORE_DOEPINT2_AHBERR_Msk (0x1UL << USBHSCORE_DOEPINT2_AHBERR_Pos)
  #define USBHSCORE_DOEPINT2_AHBERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_AHBERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT2_AHBERR_ACTIVE (0x1UL)

/* SETUP @Bit 3 : SETUP Phase Done (SetUp) */
  #define USBHSCORE_DOEPINT2_SETUP_Pos (3UL)
  #define USBHSCORE_DOEPINT2_SETUP_Msk (0x1UL << USBHSCORE_DOEPINT2_SETUP_Pos)
  #define USBHSCORE_DOEPINT2_SETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_SETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_SETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT2_SETUP_ACTIVE (0x1UL)

/* OUTTKNEPDIS @Bit 4 : OUT Token Received When Endpoint Disabled (OUTTknEPdis) */
  #define USBHSCORE_DOEPINT2_OUTTKNEPDIS_Pos (4UL)
  #define USBHSCORE_DOEPINT2_OUTTKNEPDIS_Msk (0x1UL << USBHSCORE_DOEPINT2_OUTTKNEPDIS_Pos)
  #define USBHSCORE_DOEPINT2_OUTTKNEPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_OUTTKNEPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_OUTTKNEPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT2_OUTTKNEPDIS_ACTIVE (0x1UL)

/* STSPHSERCVD @Bit 5 : Status Phase Received for Control Write (StsPhseRcvd) */
  #define USBHSCORE_DOEPINT2_STSPHSERCVD_Pos (5UL)
  #define USBHSCORE_DOEPINT2_STSPHSERCVD_Msk (0x1UL << USBHSCORE_DOEPINT2_STSPHSERCVD_Pos)
  #define USBHSCORE_DOEPINT2_STSPHSERCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_STSPHSERCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_STSPHSERCVD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT2_STSPHSERCVD_ACTIVE (0x1UL)

/* BACK2BACKSETUP @Bit 6 : Back-to-Back SETUP Packets Received (Back2BackSETup) */
  #define USBHSCORE_DOEPINT2_BACK2BACKSETUP_Pos (6UL)
  #define USBHSCORE_DOEPINT2_BACK2BACKSETUP_Msk (0x1UL << USBHSCORE_DOEPINT2_BACK2BACKSETUP_Pos) /*!< Bit mask of BACK2BACKSETUP
                                                                            field.*/
  #define USBHSCORE_DOEPINT2_BACK2BACKSETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_BACK2BACKSETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_BACK2BACKSETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT2_BACK2BACKSETUP_ACTIVE (0x1UL)

/* OUTPKTERR @Bit 8 : OUT Packet Error (OutPktErr) */
  #define USBHSCORE_DOEPINT2_OUTPKTERR_Pos (8UL)
  #define USBHSCORE_DOEPINT2_OUTPKTERR_Msk (0x1UL << USBHSCORE_DOEPINT2_OUTPKTERR_Pos)
  #define USBHSCORE_DOEPINT2_OUTPKTERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_OUTPKTERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_OUTPKTERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT2_OUTPKTERR_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DOEPINT2_BNAINTR_Pos (9UL)
  #define USBHSCORE_DOEPINT2_BNAINTR_Msk (0x1UL << USBHSCORE_DOEPINT2_BNAINTR_Pos)
  #define USBHSCORE_DOEPINT2_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT2_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DOEPINT2_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DOEPINT2_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DOEPINT2_PKTDRPSTS_Pos)
  #define USBHSCORE_DOEPINT2_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT2_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DOEPINT2_BBLEERR_Pos (12UL)
  #define USBHSCORE_DOEPINT2_BBLEERR_Msk (0x1UL << USBHSCORE_DOEPINT2_BBLEERR_Pos)
  #define USBHSCORE_DOEPINT2_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT2_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DOEPINT2_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DOEPINT2_NAKINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT2_NAKINTRPT_Pos)
  #define USBHSCORE_DOEPINT2_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT2_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DOEPINT2_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DOEPINT2_NYETINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT2_NYETINTRPT_Pos)
  #define USBHSCORE_DOEPINT2_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT2_NYETINTRPT_ACTIVE (0x1UL)

/* STUPPKTRCVD @Bit 15 : Setup Packet Received */
  #define USBHSCORE_DOEPINT2_STUPPKTRCVD_Pos (15UL)
  #define USBHSCORE_DOEPINT2_STUPPKTRCVD_Msk (0x1UL << USBHSCORE_DOEPINT2_STUPPKTRCVD_Pos)
  #define USBHSCORE_DOEPINT2_STUPPKTRCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT2_STUPPKTRCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT2_STUPPKTRCVD_NOT_RCVD (0x0UL)
  #define USBHSCORE_DOEPINT2_STUPPKTRCVD_RCVD (0x1UL)


/* USBHSCORE_DOEPTSIZ2: Device OUT Endpoint Transfer Size Register */
  #define USBHSCORE_DOEPTSIZ2_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DOEPTSIZ2_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DOEPTSIZ2_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DOEPTSIZ2_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DOEPTSIZ2_PKTCNT_Pos (19UL)
  #define USBHSCORE_DOEPTSIZ2_PKTCNT_Msk (0x3FFUL << USBHSCORE_DOEPTSIZ2_PKTCNT_Pos)

/* RXDPID @Bits 29..30 : RxDPID */
  #define USBHSCORE_DOEPTSIZ2_RXDPID_Pos (29UL)
  #define USBHSCORE_DOEPTSIZ2_RXDPID_Msk (0x3UL << USBHSCORE_DOEPTSIZ2_RXDPID_Pos)
  #define USBHSCORE_DOEPTSIZ2_RXDPID_Min (0x0UL)
  #define USBHSCORE_DOEPTSIZ2_RXDPID_Max (0x3UL)
  #define USBHSCORE_DOEPTSIZ2_RXDPID_DATA0 (0x0UL)
  #define USBHSCORE_DOEPTSIZ2_RXDPID_DATA2PACKET1 (0x1UL)
  #define USBHSCORE_DOEPTSIZ2_RXDPID_DATA1PACKET2 (0x2UL)
  #define USBHSCORE_DOEPTSIZ2_RXDPID_MDATAPACKET3 (0x3UL)


/* USBHSCORE_DOEPDMA2: Device OUT Endpoint DMA Address Register */
  #define USBHSCORE_DOEPDMA2_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DOEPDMA2_DMAADDR_Pos (0UL)
  #define USBHSCORE_DOEPDMA2_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DOEPDMA2_DMAADDR_Pos)


/* USBHSCORE_DOEPCTL3: Device Control OUT Endpoint Control Register */
  #define USBHSCORE_DOEPCTL3_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DOEPCTL3_MPS_Pos (0UL)
  #define USBHSCORE_DOEPCTL3_MPS_Msk (0x7FFUL << USBHSCORE_DOEPCTL3_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DOEPCTL3_USBACTEP_Pos (15UL)
  #define USBHSCORE_DOEPCTL3_USBACTEP_Msk (0x1UL << USBHSCORE_DOEPCTL3_USBACTEP_Pos)
  #define USBHSCORE_DOEPCTL3_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DOEPCTL3_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DOEPCTL3_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL3_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : Endpoint Data PID (DPID) */
  #define USBHSCORE_DOEPCTL3_DPID_Pos (16UL)
  #define USBHSCORE_DOEPCTL3_DPID_Msk (0x1UL << USBHSCORE_DOEPCTL3_DPID_Pos)
  #define USBHSCORE_DOEPCTL3_DPID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL3_DPID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL3_DPID_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL3_DPID_ACTIVE (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DOEPCTL3_NAKSTS_Pos (17UL)
  #define USBHSCORE_DOEPCTL3_NAKSTS_Msk (0x1UL << USBHSCORE_DOEPCTL3_NAKSTS_Pos)
  #define USBHSCORE_DOEPCTL3_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL3_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL3_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DOEPCTL3_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DOEPCTL3_EPTYPE_Pos (18UL)
  #define USBHSCORE_DOEPCTL3_EPTYPE_Msk (0x3UL << USBHSCORE_DOEPCTL3_EPTYPE_Pos)
  #define USBHSCORE_DOEPCTL3_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DOEPCTL3_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DOEPCTL3_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DOEPCTL3_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DOEPCTL3_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DOEPCTL3_EPTYPE_INTERRUPT (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DOEPCTL3_STALL_Pos (21UL)
  #define USBHSCORE_DOEPCTL3_STALL_Msk (0x1UL << USBHSCORE_DOEPCTL3_STALL_Pos)
  #define USBHSCORE_DOEPCTL3_STALL_Min (0x0UL)
  #define USBHSCORE_DOEPCTL3_STALL_Max (0x1UL)
  #define USBHSCORE_DOEPCTL3_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL3_STALL_ACTIVE (0x1UL)

/* CNAK @Bit 26 : (unspecified) */
  #define USBHSCORE_DOEPCTL3_CNAK_Pos (26UL)
  #define USBHSCORE_DOEPCTL3_CNAK_Msk (0x1UL << USBHSCORE_DOEPCTL3_CNAK_Pos)
  #define USBHSCORE_DOEPCTL3_CNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL3_CNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL3_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL3_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DOEPCTL3_SNAK_Pos (27UL)
  #define USBHSCORE_DOEPCTL3_SNAK_Msk (0x1UL << USBHSCORE_DOEPCTL3_SNAK_Pos)
  #define USBHSCORE_DOEPCTL3_SNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL3_SNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL3_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL3_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DOEPCTL3_SETD0PID_Pos (28UL)
  #define USBHSCORE_DOEPCTL3_SETD0PID_Msk (0x1UL << USBHSCORE_DOEPCTL3_SETD0PID_Pos)
  #define USBHSCORE_DOEPCTL3_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL3_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL3_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL3_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to odd
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DOEPCTL3_SETD1PID_Pos (29UL)
  #define USBHSCORE_DOEPCTL3_SETD1PID_Msk (0x1UL << USBHSCORE_DOEPCTL3_SETD1PID_Pos)
  #define USBHSCORE_DOEPCTL3_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL3_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL3_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL3_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DOEPCTL3_EPDIS_Pos (30UL)
  #define USBHSCORE_DOEPCTL3_EPDIS_Msk (0x1UL << USBHSCORE_DOEPCTL3_EPDIS_Pos)
  #define USBHSCORE_DOEPCTL3_EPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL3_EPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL3_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL3_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DOEPCTL3_EPENA_Pos (31UL)
  #define USBHSCORE_DOEPCTL3_EPENA_Msk (0x1UL << USBHSCORE_DOEPCTL3_EPENA_Pos)
  #define USBHSCORE_DOEPCTL3_EPENA_Min (0x0UL)
  #define USBHSCORE_DOEPCTL3_EPENA_Max (0x1UL)
  #define USBHSCORE_DOEPCTL3_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL3_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DOEPINT3: Device OUT Endpoint Interrupt Register */
  #define USBHSCORE_DOEPINT3_ResetValue (0x00000000UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DOEPINT3_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DOEPINT3_XFERCOMPL_Msk (0x1UL << USBHSCORE_DOEPINT3_XFERCOMPL_Pos)
  #define USBHSCORE_DOEPINT3_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT3_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DOEPINT3_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DOEPINT3_EPDISBLD_Msk (0x1UL << USBHSCORE_DOEPINT3_EPDISBLD_Pos)
  #define USBHSCORE_DOEPINT3_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT3_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DOEPINT3_AHBERR_Pos (2UL)
  #define USBHSCORE_DOEPINT3_AHBERR_Msk (0x1UL << USBHSCORE_DOEPINT3_AHBERR_Pos)
  #define USBHSCORE_DOEPINT3_AHBERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_AHBERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT3_AHBERR_ACTIVE (0x1UL)

/* SETUP @Bit 3 : SETUP Phase Done (SetUp) */
  #define USBHSCORE_DOEPINT3_SETUP_Pos (3UL)
  #define USBHSCORE_DOEPINT3_SETUP_Msk (0x1UL << USBHSCORE_DOEPINT3_SETUP_Pos)
  #define USBHSCORE_DOEPINT3_SETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_SETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_SETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT3_SETUP_ACTIVE (0x1UL)

/* OUTTKNEPDIS @Bit 4 : OUT Token Received When Endpoint Disabled (OUTTknEPdis) */
  #define USBHSCORE_DOEPINT3_OUTTKNEPDIS_Pos (4UL)
  #define USBHSCORE_DOEPINT3_OUTTKNEPDIS_Msk (0x1UL << USBHSCORE_DOEPINT3_OUTTKNEPDIS_Pos)
  #define USBHSCORE_DOEPINT3_OUTTKNEPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_OUTTKNEPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_OUTTKNEPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT3_OUTTKNEPDIS_ACTIVE (0x1UL)

/* STSPHSERCVD @Bit 5 : Status Phase Received for Control Write (StsPhseRcvd) */
  #define USBHSCORE_DOEPINT3_STSPHSERCVD_Pos (5UL)
  #define USBHSCORE_DOEPINT3_STSPHSERCVD_Msk (0x1UL << USBHSCORE_DOEPINT3_STSPHSERCVD_Pos)
  #define USBHSCORE_DOEPINT3_STSPHSERCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_STSPHSERCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_STSPHSERCVD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT3_STSPHSERCVD_ACTIVE (0x1UL)

/* BACK2BACKSETUP @Bit 6 : Back-to-Back SETUP Packets Received (Back2BackSETup) */
  #define USBHSCORE_DOEPINT3_BACK2BACKSETUP_Pos (6UL)
  #define USBHSCORE_DOEPINT3_BACK2BACKSETUP_Msk (0x1UL << USBHSCORE_DOEPINT3_BACK2BACKSETUP_Pos) /*!< Bit mask of BACK2BACKSETUP
                                                                            field.*/
  #define USBHSCORE_DOEPINT3_BACK2BACKSETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_BACK2BACKSETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_BACK2BACKSETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT3_BACK2BACKSETUP_ACTIVE (0x1UL)

/* OUTPKTERR @Bit 8 : OUT Packet Error (OutPktErr) */
  #define USBHSCORE_DOEPINT3_OUTPKTERR_Pos (8UL)
  #define USBHSCORE_DOEPINT3_OUTPKTERR_Msk (0x1UL << USBHSCORE_DOEPINT3_OUTPKTERR_Pos)
  #define USBHSCORE_DOEPINT3_OUTPKTERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_OUTPKTERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_OUTPKTERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT3_OUTPKTERR_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DOEPINT3_BNAINTR_Pos (9UL)
  #define USBHSCORE_DOEPINT3_BNAINTR_Msk (0x1UL << USBHSCORE_DOEPINT3_BNAINTR_Pos)
  #define USBHSCORE_DOEPINT3_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT3_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DOEPINT3_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DOEPINT3_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DOEPINT3_PKTDRPSTS_Pos)
  #define USBHSCORE_DOEPINT3_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT3_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DOEPINT3_BBLEERR_Pos (12UL)
  #define USBHSCORE_DOEPINT3_BBLEERR_Msk (0x1UL << USBHSCORE_DOEPINT3_BBLEERR_Pos)
  #define USBHSCORE_DOEPINT3_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT3_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DOEPINT3_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DOEPINT3_NAKINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT3_NAKINTRPT_Pos)
  #define USBHSCORE_DOEPINT3_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT3_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DOEPINT3_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DOEPINT3_NYETINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT3_NYETINTRPT_Pos)
  #define USBHSCORE_DOEPINT3_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT3_NYETINTRPT_ACTIVE (0x1UL)

/* STUPPKTRCVD @Bit 15 : Setup Packet Received */
  #define USBHSCORE_DOEPINT3_STUPPKTRCVD_Pos (15UL)
  #define USBHSCORE_DOEPINT3_STUPPKTRCVD_Msk (0x1UL << USBHSCORE_DOEPINT3_STUPPKTRCVD_Pos)
  #define USBHSCORE_DOEPINT3_STUPPKTRCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT3_STUPPKTRCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT3_STUPPKTRCVD_NOT_RCVD (0x0UL)
  #define USBHSCORE_DOEPINT3_STUPPKTRCVD_RCVD (0x1UL)


/* USBHSCORE_DOEPTSIZ3: Device OUT Endpoint Transfer Size Register */
  #define USBHSCORE_DOEPTSIZ3_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DOEPTSIZ3_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DOEPTSIZ3_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DOEPTSIZ3_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DOEPTSIZ3_PKTCNT_Pos (19UL)
  #define USBHSCORE_DOEPTSIZ3_PKTCNT_Msk (0x3FFUL << USBHSCORE_DOEPTSIZ3_PKTCNT_Pos)

/* RXDPID @Bits 29..30 : RxDPID */
  #define USBHSCORE_DOEPTSIZ3_RXDPID_Pos (29UL)
  #define USBHSCORE_DOEPTSIZ3_RXDPID_Msk (0x3UL << USBHSCORE_DOEPTSIZ3_RXDPID_Pos)
  #define USBHSCORE_DOEPTSIZ3_RXDPID_Min (0x0UL)
  #define USBHSCORE_DOEPTSIZ3_RXDPID_Max (0x3UL)
  #define USBHSCORE_DOEPTSIZ3_RXDPID_DATA0 (0x0UL)
  #define USBHSCORE_DOEPTSIZ3_RXDPID_DATA2PACKET1 (0x1UL)
  #define USBHSCORE_DOEPTSIZ3_RXDPID_DATA1PACKET2 (0x2UL)
  #define USBHSCORE_DOEPTSIZ3_RXDPID_MDATAPACKET3 (0x3UL)


/* USBHSCORE_DOEPDMA3: Device OUT Endpoint DMA Address Register */
  #define USBHSCORE_DOEPDMA3_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DOEPDMA3_DMAADDR_Pos (0UL)
  #define USBHSCORE_DOEPDMA3_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DOEPDMA3_DMAADDR_Pos)


/* USBHSCORE_DOEPCTL4: Device Control OUT Endpoint Control Register */
  #define USBHSCORE_DOEPCTL4_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DOEPCTL4_MPS_Pos (0UL)
  #define USBHSCORE_DOEPCTL4_MPS_Msk (0x7FFUL << USBHSCORE_DOEPCTL4_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DOEPCTL4_USBACTEP_Pos (15UL)
  #define USBHSCORE_DOEPCTL4_USBACTEP_Msk (0x1UL << USBHSCORE_DOEPCTL4_USBACTEP_Pos)
  #define USBHSCORE_DOEPCTL4_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DOEPCTL4_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DOEPCTL4_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL4_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : Endpoint Data PID (DPID) */
  #define USBHSCORE_DOEPCTL4_DPID_Pos (16UL)
  #define USBHSCORE_DOEPCTL4_DPID_Msk (0x1UL << USBHSCORE_DOEPCTL4_DPID_Pos)
  #define USBHSCORE_DOEPCTL4_DPID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL4_DPID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL4_DPID_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL4_DPID_ACTIVE (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DOEPCTL4_NAKSTS_Pos (17UL)
  #define USBHSCORE_DOEPCTL4_NAKSTS_Msk (0x1UL << USBHSCORE_DOEPCTL4_NAKSTS_Pos)
  #define USBHSCORE_DOEPCTL4_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL4_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL4_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DOEPCTL4_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DOEPCTL4_EPTYPE_Pos (18UL)
  #define USBHSCORE_DOEPCTL4_EPTYPE_Msk (0x3UL << USBHSCORE_DOEPCTL4_EPTYPE_Pos)
  #define USBHSCORE_DOEPCTL4_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DOEPCTL4_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DOEPCTL4_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DOEPCTL4_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DOEPCTL4_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DOEPCTL4_EPTYPE_INTERRUPT (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DOEPCTL4_STALL_Pos (21UL)
  #define USBHSCORE_DOEPCTL4_STALL_Msk (0x1UL << USBHSCORE_DOEPCTL4_STALL_Pos)
  #define USBHSCORE_DOEPCTL4_STALL_Min (0x0UL)
  #define USBHSCORE_DOEPCTL4_STALL_Max (0x1UL)
  #define USBHSCORE_DOEPCTL4_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL4_STALL_ACTIVE (0x1UL)

/* CNAK @Bit 26 : (unspecified) */
  #define USBHSCORE_DOEPCTL4_CNAK_Pos (26UL)
  #define USBHSCORE_DOEPCTL4_CNAK_Msk (0x1UL << USBHSCORE_DOEPCTL4_CNAK_Pos)
  #define USBHSCORE_DOEPCTL4_CNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL4_CNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL4_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL4_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DOEPCTL4_SNAK_Pos (27UL)
  #define USBHSCORE_DOEPCTL4_SNAK_Msk (0x1UL << USBHSCORE_DOEPCTL4_SNAK_Pos)
  #define USBHSCORE_DOEPCTL4_SNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL4_SNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL4_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL4_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DOEPCTL4_SETD0PID_Pos (28UL)
  #define USBHSCORE_DOEPCTL4_SETD0PID_Msk (0x1UL << USBHSCORE_DOEPCTL4_SETD0PID_Pos)
  #define USBHSCORE_DOEPCTL4_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL4_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL4_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL4_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to odd
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DOEPCTL4_SETD1PID_Pos (29UL)
  #define USBHSCORE_DOEPCTL4_SETD1PID_Msk (0x1UL << USBHSCORE_DOEPCTL4_SETD1PID_Pos)
  #define USBHSCORE_DOEPCTL4_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL4_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL4_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL4_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DOEPCTL4_EPDIS_Pos (30UL)
  #define USBHSCORE_DOEPCTL4_EPDIS_Msk (0x1UL << USBHSCORE_DOEPCTL4_EPDIS_Pos)
  #define USBHSCORE_DOEPCTL4_EPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL4_EPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL4_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL4_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DOEPCTL4_EPENA_Pos (31UL)
  #define USBHSCORE_DOEPCTL4_EPENA_Msk (0x1UL << USBHSCORE_DOEPCTL4_EPENA_Pos)
  #define USBHSCORE_DOEPCTL4_EPENA_Min (0x0UL)
  #define USBHSCORE_DOEPCTL4_EPENA_Max (0x1UL)
  #define USBHSCORE_DOEPCTL4_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL4_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DOEPINT4: Device OUT Endpoint Interrupt Register */
  #define USBHSCORE_DOEPINT4_ResetValue (0x00000000UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DOEPINT4_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DOEPINT4_XFERCOMPL_Msk (0x1UL << USBHSCORE_DOEPINT4_XFERCOMPL_Pos)
  #define USBHSCORE_DOEPINT4_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT4_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DOEPINT4_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DOEPINT4_EPDISBLD_Msk (0x1UL << USBHSCORE_DOEPINT4_EPDISBLD_Pos)
  #define USBHSCORE_DOEPINT4_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT4_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DOEPINT4_AHBERR_Pos (2UL)
  #define USBHSCORE_DOEPINT4_AHBERR_Msk (0x1UL << USBHSCORE_DOEPINT4_AHBERR_Pos)
  #define USBHSCORE_DOEPINT4_AHBERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_AHBERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT4_AHBERR_ACTIVE (0x1UL)

/* SETUP @Bit 3 : SETUP Phase Done (SetUp) */
  #define USBHSCORE_DOEPINT4_SETUP_Pos (3UL)
  #define USBHSCORE_DOEPINT4_SETUP_Msk (0x1UL << USBHSCORE_DOEPINT4_SETUP_Pos)
  #define USBHSCORE_DOEPINT4_SETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_SETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_SETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT4_SETUP_ACTIVE (0x1UL)

/* OUTTKNEPDIS @Bit 4 : OUT Token Received When Endpoint Disabled (OUTTknEPdis) */
  #define USBHSCORE_DOEPINT4_OUTTKNEPDIS_Pos (4UL)
  #define USBHSCORE_DOEPINT4_OUTTKNEPDIS_Msk (0x1UL << USBHSCORE_DOEPINT4_OUTTKNEPDIS_Pos)
  #define USBHSCORE_DOEPINT4_OUTTKNEPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_OUTTKNEPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_OUTTKNEPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT4_OUTTKNEPDIS_ACTIVE (0x1UL)

/* STSPHSERCVD @Bit 5 : Status Phase Received for Control Write (StsPhseRcvd) */
  #define USBHSCORE_DOEPINT4_STSPHSERCVD_Pos (5UL)
  #define USBHSCORE_DOEPINT4_STSPHSERCVD_Msk (0x1UL << USBHSCORE_DOEPINT4_STSPHSERCVD_Pos)
  #define USBHSCORE_DOEPINT4_STSPHSERCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_STSPHSERCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_STSPHSERCVD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT4_STSPHSERCVD_ACTIVE (0x1UL)

/* BACK2BACKSETUP @Bit 6 : Back-to-Back SETUP Packets Received (Back2BackSETup) */
  #define USBHSCORE_DOEPINT4_BACK2BACKSETUP_Pos (6UL)
  #define USBHSCORE_DOEPINT4_BACK2BACKSETUP_Msk (0x1UL << USBHSCORE_DOEPINT4_BACK2BACKSETUP_Pos) /*!< Bit mask of BACK2BACKSETUP
                                                                            field.*/
  #define USBHSCORE_DOEPINT4_BACK2BACKSETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_BACK2BACKSETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_BACK2BACKSETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT4_BACK2BACKSETUP_ACTIVE (0x1UL)

/* OUTPKTERR @Bit 8 : OUT Packet Error (OutPktErr) */
  #define USBHSCORE_DOEPINT4_OUTPKTERR_Pos (8UL)
  #define USBHSCORE_DOEPINT4_OUTPKTERR_Msk (0x1UL << USBHSCORE_DOEPINT4_OUTPKTERR_Pos)
  #define USBHSCORE_DOEPINT4_OUTPKTERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_OUTPKTERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_OUTPKTERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT4_OUTPKTERR_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DOEPINT4_BNAINTR_Pos (9UL)
  #define USBHSCORE_DOEPINT4_BNAINTR_Msk (0x1UL << USBHSCORE_DOEPINT4_BNAINTR_Pos)
  #define USBHSCORE_DOEPINT4_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT4_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DOEPINT4_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DOEPINT4_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DOEPINT4_PKTDRPSTS_Pos)
  #define USBHSCORE_DOEPINT4_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT4_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DOEPINT4_BBLEERR_Pos (12UL)
  #define USBHSCORE_DOEPINT4_BBLEERR_Msk (0x1UL << USBHSCORE_DOEPINT4_BBLEERR_Pos)
  #define USBHSCORE_DOEPINT4_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT4_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DOEPINT4_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DOEPINT4_NAKINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT4_NAKINTRPT_Pos)
  #define USBHSCORE_DOEPINT4_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT4_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DOEPINT4_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DOEPINT4_NYETINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT4_NYETINTRPT_Pos)
  #define USBHSCORE_DOEPINT4_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT4_NYETINTRPT_ACTIVE (0x1UL)

/* STUPPKTRCVD @Bit 15 : Setup Packet Received */
  #define USBHSCORE_DOEPINT4_STUPPKTRCVD_Pos (15UL)
  #define USBHSCORE_DOEPINT4_STUPPKTRCVD_Msk (0x1UL << USBHSCORE_DOEPINT4_STUPPKTRCVD_Pos)
  #define USBHSCORE_DOEPINT4_STUPPKTRCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT4_STUPPKTRCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT4_STUPPKTRCVD_NOT_RCVD (0x0UL)
  #define USBHSCORE_DOEPINT4_STUPPKTRCVD_RCVD (0x1UL)


/* USBHSCORE_DOEPTSIZ4: Device OUT Endpoint Transfer Size Register */
  #define USBHSCORE_DOEPTSIZ4_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DOEPTSIZ4_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DOEPTSIZ4_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DOEPTSIZ4_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DOEPTSIZ4_PKTCNT_Pos (19UL)
  #define USBHSCORE_DOEPTSIZ4_PKTCNT_Msk (0x3FFUL << USBHSCORE_DOEPTSIZ4_PKTCNT_Pos)

/* RXDPID @Bits 29..30 : RxDPID */
  #define USBHSCORE_DOEPTSIZ4_RXDPID_Pos (29UL)
  #define USBHSCORE_DOEPTSIZ4_RXDPID_Msk (0x3UL << USBHSCORE_DOEPTSIZ4_RXDPID_Pos)
  #define USBHSCORE_DOEPTSIZ4_RXDPID_Min (0x0UL)
  #define USBHSCORE_DOEPTSIZ4_RXDPID_Max (0x3UL)
  #define USBHSCORE_DOEPTSIZ4_RXDPID_DATA0 (0x0UL)
  #define USBHSCORE_DOEPTSIZ4_RXDPID_DATA2PACKET1 (0x1UL)
  #define USBHSCORE_DOEPTSIZ4_RXDPID_DATA1PACKET2 (0x2UL)
  #define USBHSCORE_DOEPTSIZ4_RXDPID_MDATAPACKET3 (0x3UL)


/* USBHSCORE_DOEPDMA4: Device OUT Endpoint DMA Address Register */
  #define USBHSCORE_DOEPDMA4_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DOEPDMA4_DMAADDR_Pos (0UL)
  #define USBHSCORE_DOEPDMA4_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DOEPDMA4_DMAADDR_Pos)


/* USBHSCORE_DOEPCTL5: Device Control OUT Endpoint Control Register */
  #define USBHSCORE_DOEPCTL5_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DOEPCTL5_MPS_Pos (0UL)
  #define USBHSCORE_DOEPCTL5_MPS_Msk (0x7FFUL << USBHSCORE_DOEPCTL5_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DOEPCTL5_USBACTEP_Pos (15UL)
  #define USBHSCORE_DOEPCTL5_USBACTEP_Msk (0x1UL << USBHSCORE_DOEPCTL5_USBACTEP_Pos)
  #define USBHSCORE_DOEPCTL5_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DOEPCTL5_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DOEPCTL5_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL5_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : Endpoint Data PID (DPID) */
  #define USBHSCORE_DOEPCTL5_DPID_Pos (16UL)
  #define USBHSCORE_DOEPCTL5_DPID_Msk (0x1UL << USBHSCORE_DOEPCTL5_DPID_Pos)
  #define USBHSCORE_DOEPCTL5_DPID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL5_DPID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL5_DPID_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL5_DPID_ACTIVE (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DOEPCTL5_NAKSTS_Pos (17UL)
  #define USBHSCORE_DOEPCTL5_NAKSTS_Msk (0x1UL << USBHSCORE_DOEPCTL5_NAKSTS_Pos)
  #define USBHSCORE_DOEPCTL5_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL5_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL5_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DOEPCTL5_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DOEPCTL5_EPTYPE_Pos (18UL)
  #define USBHSCORE_DOEPCTL5_EPTYPE_Msk (0x3UL << USBHSCORE_DOEPCTL5_EPTYPE_Pos)
  #define USBHSCORE_DOEPCTL5_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DOEPCTL5_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DOEPCTL5_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DOEPCTL5_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DOEPCTL5_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DOEPCTL5_EPTYPE_INTERRUPT (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DOEPCTL5_STALL_Pos (21UL)
  #define USBHSCORE_DOEPCTL5_STALL_Msk (0x1UL << USBHSCORE_DOEPCTL5_STALL_Pos)
  #define USBHSCORE_DOEPCTL5_STALL_Min (0x0UL)
  #define USBHSCORE_DOEPCTL5_STALL_Max (0x1UL)
  #define USBHSCORE_DOEPCTL5_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL5_STALL_ACTIVE (0x1UL)

/* CNAK @Bit 26 : (unspecified) */
  #define USBHSCORE_DOEPCTL5_CNAK_Pos (26UL)
  #define USBHSCORE_DOEPCTL5_CNAK_Msk (0x1UL << USBHSCORE_DOEPCTL5_CNAK_Pos)
  #define USBHSCORE_DOEPCTL5_CNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL5_CNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL5_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL5_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DOEPCTL5_SNAK_Pos (27UL)
  #define USBHSCORE_DOEPCTL5_SNAK_Msk (0x1UL << USBHSCORE_DOEPCTL5_SNAK_Pos)
  #define USBHSCORE_DOEPCTL5_SNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL5_SNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL5_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL5_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DOEPCTL5_SETD0PID_Pos (28UL)
  #define USBHSCORE_DOEPCTL5_SETD0PID_Msk (0x1UL << USBHSCORE_DOEPCTL5_SETD0PID_Pos)
  #define USBHSCORE_DOEPCTL5_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL5_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL5_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL5_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to odd
                                                           (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DOEPCTL5_SETD1PID_Pos (29UL)
  #define USBHSCORE_DOEPCTL5_SETD1PID_Msk (0x1UL << USBHSCORE_DOEPCTL5_SETD1PID_Pos)
  #define USBHSCORE_DOEPCTL5_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL5_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL5_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL5_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to odd
                                                           (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DOEPCTL5_EPDIS_Pos (30UL)
  #define USBHSCORE_DOEPCTL5_EPDIS_Msk (0x1UL << USBHSCORE_DOEPCTL5_EPDIS_Pos)
  #define USBHSCORE_DOEPCTL5_EPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL5_EPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL5_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL5_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DOEPCTL5_EPENA_Pos (31UL)
  #define USBHSCORE_DOEPCTL5_EPENA_Msk (0x1UL << USBHSCORE_DOEPCTL5_EPENA_Pos)
  #define USBHSCORE_DOEPCTL5_EPENA_Min (0x0UL)
  #define USBHSCORE_DOEPCTL5_EPENA_Max (0x1UL)
  #define USBHSCORE_DOEPCTL5_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL5_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DOEPINT5: Device OUT Endpoint Interrupt Register */
  #define USBHSCORE_DOEPINT5_ResetValue (0x00000000UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DOEPINT5_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DOEPINT5_XFERCOMPL_Msk (0x1UL << USBHSCORE_DOEPINT5_XFERCOMPL_Pos)
  #define USBHSCORE_DOEPINT5_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT5_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DOEPINT5_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DOEPINT5_EPDISBLD_Msk (0x1UL << USBHSCORE_DOEPINT5_EPDISBLD_Pos)
  #define USBHSCORE_DOEPINT5_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT5_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DOEPINT5_AHBERR_Pos (2UL)
  #define USBHSCORE_DOEPINT5_AHBERR_Msk (0x1UL << USBHSCORE_DOEPINT5_AHBERR_Pos)
  #define USBHSCORE_DOEPINT5_AHBERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_AHBERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT5_AHBERR_ACTIVE (0x1UL)

/* SETUP @Bit 3 : SETUP Phase Done (SetUp) */
  #define USBHSCORE_DOEPINT5_SETUP_Pos (3UL)
  #define USBHSCORE_DOEPINT5_SETUP_Msk (0x1UL << USBHSCORE_DOEPINT5_SETUP_Pos)
  #define USBHSCORE_DOEPINT5_SETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_SETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_SETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT5_SETUP_ACTIVE (0x1UL)

/* OUTTKNEPDIS @Bit 4 : OUT Token Received When Endpoint Disabled (OUTTknEPdis) */
  #define USBHSCORE_DOEPINT5_OUTTKNEPDIS_Pos (4UL)
  #define USBHSCORE_DOEPINT5_OUTTKNEPDIS_Msk (0x1UL << USBHSCORE_DOEPINT5_OUTTKNEPDIS_Pos)
  #define USBHSCORE_DOEPINT5_OUTTKNEPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_OUTTKNEPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_OUTTKNEPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT5_OUTTKNEPDIS_ACTIVE (0x1UL)

/* STSPHSERCVD @Bit 5 : Status Phase Received for Control Write (StsPhseRcvd) */
  #define USBHSCORE_DOEPINT5_STSPHSERCVD_Pos (5UL)
  #define USBHSCORE_DOEPINT5_STSPHSERCVD_Msk (0x1UL << USBHSCORE_DOEPINT5_STSPHSERCVD_Pos)
  #define USBHSCORE_DOEPINT5_STSPHSERCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_STSPHSERCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_STSPHSERCVD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT5_STSPHSERCVD_ACTIVE (0x1UL)

/* BACK2BACKSETUP @Bit 6 : Back-to-Back SETUP Packets Received (Back2BackSETup) */
  #define USBHSCORE_DOEPINT5_BACK2BACKSETUP_Pos (6UL)
  #define USBHSCORE_DOEPINT5_BACK2BACKSETUP_Msk (0x1UL << USBHSCORE_DOEPINT5_BACK2BACKSETUP_Pos) /*!< Bit mask of BACK2BACKSETUP
                                                                            field.*/
  #define USBHSCORE_DOEPINT5_BACK2BACKSETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_BACK2BACKSETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_BACK2BACKSETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT5_BACK2BACKSETUP_ACTIVE (0x1UL)

/* OUTPKTERR @Bit 8 : OUT Packet Error (OutPktErr) */
  #define USBHSCORE_DOEPINT5_OUTPKTERR_Pos (8UL)
  #define USBHSCORE_DOEPINT5_OUTPKTERR_Msk (0x1UL << USBHSCORE_DOEPINT5_OUTPKTERR_Pos)
  #define USBHSCORE_DOEPINT5_OUTPKTERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_OUTPKTERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_OUTPKTERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT5_OUTPKTERR_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DOEPINT5_BNAINTR_Pos (9UL)
  #define USBHSCORE_DOEPINT5_BNAINTR_Msk (0x1UL << USBHSCORE_DOEPINT5_BNAINTR_Pos)
  #define USBHSCORE_DOEPINT5_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT5_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DOEPINT5_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DOEPINT5_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DOEPINT5_PKTDRPSTS_Pos)
  #define USBHSCORE_DOEPINT5_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT5_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DOEPINT5_BBLEERR_Pos (12UL)
  #define USBHSCORE_DOEPINT5_BBLEERR_Msk (0x1UL << USBHSCORE_DOEPINT5_BBLEERR_Pos)
  #define USBHSCORE_DOEPINT5_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT5_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DOEPINT5_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DOEPINT5_NAKINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT5_NAKINTRPT_Pos)
  #define USBHSCORE_DOEPINT5_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT5_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DOEPINT5_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DOEPINT5_NYETINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT5_NYETINTRPT_Pos)
  #define USBHSCORE_DOEPINT5_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT5_NYETINTRPT_ACTIVE (0x1UL)

/* STUPPKTRCVD @Bit 15 : Setup Packet Received */
  #define USBHSCORE_DOEPINT5_STUPPKTRCVD_Pos (15UL)
  #define USBHSCORE_DOEPINT5_STUPPKTRCVD_Msk (0x1UL << USBHSCORE_DOEPINT5_STUPPKTRCVD_Pos)
  #define USBHSCORE_DOEPINT5_STUPPKTRCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT5_STUPPKTRCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT5_STUPPKTRCVD_NOT_RCVD (0x0UL)
  #define USBHSCORE_DOEPINT5_STUPPKTRCVD_RCVD (0x1UL)


/* USBHSCORE_DOEPTSIZ5: Device OUT Endpoint Transfer Size Register */
  #define USBHSCORE_DOEPTSIZ5_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DOEPTSIZ5_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DOEPTSIZ5_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DOEPTSIZ5_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DOEPTSIZ5_PKTCNT_Pos (19UL)
  #define USBHSCORE_DOEPTSIZ5_PKTCNT_Msk (0x3FFUL << USBHSCORE_DOEPTSIZ5_PKTCNT_Pos)

/* RXDPID @Bits 29..30 : RxDPID */
  #define USBHSCORE_DOEPTSIZ5_RXDPID_Pos (29UL)
  #define USBHSCORE_DOEPTSIZ5_RXDPID_Msk (0x3UL << USBHSCORE_DOEPTSIZ5_RXDPID_Pos)
  #define USBHSCORE_DOEPTSIZ5_RXDPID_Min (0x0UL)
  #define USBHSCORE_DOEPTSIZ5_RXDPID_Max (0x3UL)
  #define USBHSCORE_DOEPTSIZ5_RXDPID_DATA0 (0x0UL)
  #define USBHSCORE_DOEPTSIZ5_RXDPID_DATA2PACKET1 (0x1UL)
  #define USBHSCORE_DOEPTSIZ5_RXDPID_DATA1PACKET2 (0x2UL)
  #define USBHSCORE_DOEPTSIZ5_RXDPID_MDATAPACKET3 (0x3UL)


/* USBHSCORE_DOEPDMA5: Device OUT Endpoint DMA Address Register */
  #define USBHSCORE_DOEPDMA5_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DOEPDMA5_DMAADDR_Pos (0UL)
  #define USBHSCORE_DOEPDMA5_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DOEPDMA5_DMAADDR_Pos)


/* USBHSCORE_DOEPCTL12: Device Control OUT Endpoint Control Register */
  #define USBHSCORE_DOEPCTL12_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DOEPCTL12_MPS_Pos (0UL)
  #define USBHSCORE_DOEPCTL12_MPS_Msk (0x7FFUL << USBHSCORE_DOEPCTL12_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DOEPCTL12_USBACTEP_Pos (15UL)
  #define USBHSCORE_DOEPCTL12_USBACTEP_Msk (0x1UL << USBHSCORE_DOEPCTL12_USBACTEP_Pos)
  #define USBHSCORE_DOEPCTL12_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DOEPCTL12_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DOEPCTL12_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL12_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : Endpoint Data PID (DPID) */
  #define USBHSCORE_DOEPCTL12_DPID_Pos (16UL)
  #define USBHSCORE_DOEPCTL12_DPID_Msk (0x1UL << USBHSCORE_DOEPCTL12_DPID_Pos)
  #define USBHSCORE_DOEPCTL12_DPID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL12_DPID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL12_DPID_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL12_DPID_ACTIVE (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DOEPCTL12_NAKSTS_Pos (17UL)
  #define USBHSCORE_DOEPCTL12_NAKSTS_Msk (0x1UL << USBHSCORE_DOEPCTL12_NAKSTS_Pos)
  #define USBHSCORE_DOEPCTL12_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL12_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL12_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DOEPCTL12_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DOEPCTL12_EPTYPE_Pos (18UL)
  #define USBHSCORE_DOEPCTL12_EPTYPE_Msk (0x3UL << USBHSCORE_DOEPCTL12_EPTYPE_Pos)
  #define USBHSCORE_DOEPCTL12_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DOEPCTL12_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DOEPCTL12_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DOEPCTL12_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DOEPCTL12_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DOEPCTL12_EPTYPE_INTERRUPT (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DOEPCTL12_STALL_Pos (21UL)
  #define USBHSCORE_DOEPCTL12_STALL_Msk (0x1UL << USBHSCORE_DOEPCTL12_STALL_Pos)
  #define USBHSCORE_DOEPCTL12_STALL_Min (0x0UL)
  #define USBHSCORE_DOEPCTL12_STALL_Max (0x1UL)
  #define USBHSCORE_DOEPCTL12_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL12_STALL_ACTIVE (0x1UL)

/* CNAK @Bit 26 : (unspecified) */
  #define USBHSCORE_DOEPCTL12_CNAK_Pos (26UL)
  #define USBHSCORE_DOEPCTL12_CNAK_Msk (0x1UL << USBHSCORE_DOEPCTL12_CNAK_Pos)
  #define USBHSCORE_DOEPCTL12_CNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL12_CNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL12_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL12_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DOEPCTL12_SNAK_Pos (27UL)
  #define USBHSCORE_DOEPCTL12_SNAK_Msk (0x1UL << USBHSCORE_DOEPCTL12_SNAK_Pos)
  #define USBHSCORE_DOEPCTL12_SNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL12_SNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL12_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL12_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DOEPCTL12_SETD0PID_Pos (28UL)
  #define USBHSCORE_DOEPCTL12_SETD0PID_Msk (0x1UL << USBHSCORE_DOEPCTL12_SETD0PID_Pos)
  #define USBHSCORE_DOEPCTL12_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL12_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL12_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL12_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to odd
                                                            (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DOEPCTL12_SETD1PID_Pos (29UL)
  #define USBHSCORE_DOEPCTL12_SETD1PID_Msk (0x1UL << USBHSCORE_DOEPCTL12_SETD1PID_Pos)
  #define USBHSCORE_DOEPCTL12_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL12_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL12_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL12_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to odd
                                                            (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DOEPCTL12_EPDIS_Pos (30UL)
  #define USBHSCORE_DOEPCTL12_EPDIS_Msk (0x1UL << USBHSCORE_DOEPCTL12_EPDIS_Pos)
  #define USBHSCORE_DOEPCTL12_EPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL12_EPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL12_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL12_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DOEPCTL12_EPENA_Pos (31UL)
  #define USBHSCORE_DOEPCTL12_EPENA_Msk (0x1UL << USBHSCORE_DOEPCTL12_EPENA_Pos)
  #define USBHSCORE_DOEPCTL12_EPENA_Min (0x0UL)
  #define USBHSCORE_DOEPCTL12_EPENA_Max (0x1UL)
  #define USBHSCORE_DOEPCTL12_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL12_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DOEPINT12: Device OUT Endpoint Interrupt Register */
  #define USBHSCORE_DOEPINT12_ResetValue (0x00000000UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DOEPINT12_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DOEPINT12_XFERCOMPL_Msk (0x1UL << USBHSCORE_DOEPINT12_XFERCOMPL_Pos)
  #define USBHSCORE_DOEPINT12_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT12_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DOEPINT12_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DOEPINT12_EPDISBLD_Msk (0x1UL << USBHSCORE_DOEPINT12_EPDISBLD_Pos)
  #define USBHSCORE_DOEPINT12_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT12_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DOEPINT12_AHBERR_Pos (2UL)
  #define USBHSCORE_DOEPINT12_AHBERR_Msk (0x1UL << USBHSCORE_DOEPINT12_AHBERR_Pos)
  #define USBHSCORE_DOEPINT12_AHBERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_AHBERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT12_AHBERR_ACTIVE (0x1UL)

/* SETUP @Bit 3 : SETUP Phase Done (SetUp) */
  #define USBHSCORE_DOEPINT12_SETUP_Pos (3UL)
  #define USBHSCORE_DOEPINT12_SETUP_Msk (0x1UL << USBHSCORE_DOEPINT12_SETUP_Pos)
  #define USBHSCORE_DOEPINT12_SETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_SETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_SETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT12_SETUP_ACTIVE (0x1UL)

/* OUTTKNEPDIS @Bit 4 : OUT Token Received When Endpoint Disabled (OUTTknEPdis) */
  #define USBHSCORE_DOEPINT12_OUTTKNEPDIS_Pos (4UL)
  #define USBHSCORE_DOEPINT12_OUTTKNEPDIS_Msk (0x1UL << USBHSCORE_DOEPINT12_OUTTKNEPDIS_Pos) /*!< Bit mask of OUTTKNEPDIS
                                                                            field.*/
  #define USBHSCORE_DOEPINT12_OUTTKNEPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_OUTTKNEPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_OUTTKNEPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT12_OUTTKNEPDIS_ACTIVE (0x1UL)

/* STSPHSERCVD @Bit 5 : Status Phase Received for Control Write (StsPhseRcvd) */
  #define USBHSCORE_DOEPINT12_STSPHSERCVD_Pos (5UL)
  #define USBHSCORE_DOEPINT12_STSPHSERCVD_Msk (0x1UL << USBHSCORE_DOEPINT12_STSPHSERCVD_Pos) /*!< Bit mask of STSPHSERCVD
                                                                            field.*/
  #define USBHSCORE_DOEPINT12_STSPHSERCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_STSPHSERCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_STSPHSERCVD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT12_STSPHSERCVD_ACTIVE (0x1UL)

/* BACK2BACKSETUP @Bit 6 : Back-to-Back SETUP Packets Received (Back2BackSETup) */
  #define USBHSCORE_DOEPINT12_BACK2BACKSETUP_Pos (6UL)
  #define USBHSCORE_DOEPINT12_BACK2BACKSETUP_Msk (0x1UL << USBHSCORE_DOEPINT12_BACK2BACKSETUP_Pos) /*!< Bit mask of
                                                                            BACK2BACKSETUP field.*/
  #define USBHSCORE_DOEPINT12_BACK2BACKSETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_BACK2BACKSETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_BACK2BACKSETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT12_BACK2BACKSETUP_ACTIVE (0x1UL)

/* OUTPKTERR @Bit 8 : OUT Packet Error (OutPktErr) */
  #define USBHSCORE_DOEPINT12_OUTPKTERR_Pos (8UL)
  #define USBHSCORE_DOEPINT12_OUTPKTERR_Msk (0x1UL << USBHSCORE_DOEPINT12_OUTPKTERR_Pos)
  #define USBHSCORE_DOEPINT12_OUTPKTERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_OUTPKTERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_OUTPKTERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT12_OUTPKTERR_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DOEPINT12_BNAINTR_Pos (9UL)
  #define USBHSCORE_DOEPINT12_BNAINTR_Msk (0x1UL << USBHSCORE_DOEPINT12_BNAINTR_Pos)
  #define USBHSCORE_DOEPINT12_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT12_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DOEPINT12_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DOEPINT12_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DOEPINT12_PKTDRPSTS_Pos)
  #define USBHSCORE_DOEPINT12_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT12_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DOEPINT12_BBLEERR_Pos (12UL)
  #define USBHSCORE_DOEPINT12_BBLEERR_Msk (0x1UL << USBHSCORE_DOEPINT12_BBLEERR_Pos)
  #define USBHSCORE_DOEPINT12_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT12_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DOEPINT12_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DOEPINT12_NAKINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT12_NAKINTRPT_Pos)
  #define USBHSCORE_DOEPINT12_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT12_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DOEPINT12_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DOEPINT12_NYETINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT12_NYETINTRPT_Pos)
  #define USBHSCORE_DOEPINT12_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT12_NYETINTRPT_ACTIVE (0x1UL)

/* STUPPKTRCVD @Bit 15 : Setup Packet Received */
  #define USBHSCORE_DOEPINT12_STUPPKTRCVD_Pos (15UL)
  #define USBHSCORE_DOEPINT12_STUPPKTRCVD_Msk (0x1UL << USBHSCORE_DOEPINT12_STUPPKTRCVD_Pos) /*!< Bit mask of STUPPKTRCVD
                                                                            field.*/
  #define USBHSCORE_DOEPINT12_STUPPKTRCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT12_STUPPKTRCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT12_STUPPKTRCVD_NOT_RCVD (0x0UL)
  #define USBHSCORE_DOEPINT12_STUPPKTRCVD_RCVD (0x1UL)


/* USBHSCORE_DOEPTSIZ12: Device OUT Endpoint Transfer Size Register */
  #define USBHSCORE_DOEPTSIZ12_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DOEPTSIZ12_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DOEPTSIZ12_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DOEPTSIZ12_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DOEPTSIZ12_PKTCNT_Pos (19UL)
  #define USBHSCORE_DOEPTSIZ12_PKTCNT_Msk (0x3FFUL << USBHSCORE_DOEPTSIZ12_PKTCNT_Pos)

/* RXDPID @Bits 29..30 : RxDPID */
  #define USBHSCORE_DOEPTSIZ12_RXDPID_Pos (29UL)
  #define USBHSCORE_DOEPTSIZ12_RXDPID_Msk (0x3UL << USBHSCORE_DOEPTSIZ12_RXDPID_Pos)
  #define USBHSCORE_DOEPTSIZ12_RXDPID_Min (0x0UL)
  #define USBHSCORE_DOEPTSIZ12_RXDPID_Max (0x3UL)
  #define USBHSCORE_DOEPTSIZ12_RXDPID_DATA0 (0x0UL)
  #define USBHSCORE_DOEPTSIZ12_RXDPID_DATA2PACKET1 (0x1UL)
  #define USBHSCORE_DOEPTSIZ12_RXDPID_DATA1PACKET2 (0x2UL)
  #define USBHSCORE_DOEPTSIZ12_RXDPID_MDATAPACKET3 (0x3UL)


/* USBHSCORE_DOEPDMA12: Device OUT Endpoint DMA Address Register */
  #define USBHSCORE_DOEPDMA12_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DOEPDMA12_DMAADDR_Pos (0UL)
  #define USBHSCORE_DOEPDMA12_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DOEPDMA12_DMAADDR_Pos)


/* USBHSCORE_DOEPCTL13: Device Control OUT Endpoint Control Register */
  #define USBHSCORE_DOEPCTL13_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DOEPCTL13_MPS_Pos (0UL)
  #define USBHSCORE_DOEPCTL13_MPS_Msk (0x7FFUL << USBHSCORE_DOEPCTL13_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DOEPCTL13_USBACTEP_Pos (15UL)
  #define USBHSCORE_DOEPCTL13_USBACTEP_Msk (0x1UL << USBHSCORE_DOEPCTL13_USBACTEP_Pos)
  #define USBHSCORE_DOEPCTL13_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DOEPCTL13_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DOEPCTL13_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL13_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : Endpoint Data PID (DPID) */
  #define USBHSCORE_DOEPCTL13_DPID_Pos (16UL)
  #define USBHSCORE_DOEPCTL13_DPID_Msk (0x1UL << USBHSCORE_DOEPCTL13_DPID_Pos)
  #define USBHSCORE_DOEPCTL13_DPID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL13_DPID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL13_DPID_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL13_DPID_ACTIVE (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DOEPCTL13_NAKSTS_Pos (17UL)
  #define USBHSCORE_DOEPCTL13_NAKSTS_Msk (0x1UL << USBHSCORE_DOEPCTL13_NAKSTS_Pos)
  #define USBHSCORE_DOEPCTL13_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL13_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL13_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DOEPCTL13_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DOEPCTL13_EPTYPE_Pos (18UL)
  #define USBHSCORE_DOEPCTL13_EPTYPE_Msk (0x3UL << USBHSCORE_DOEPCTL13_EPTYPE_Pos)
  #define USBHSCORE_DOEPCTL13_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DOEPCTL13_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DOEPCTL13_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DOEPCTL13_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DOEPCTL13_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DOEPCTL13_EPTYPE_INTERRUPT (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DOEPCTL13_STALL_Pos (21UL)
  #define USBHSCORE_DOEPCTL13_STALL_Msk (0x1UL << USBHSCORE_DOEPCTL13_STALL_Pos)
  #define USBHSCORE_DOEPCTL13_STALL_Min (0x0UL)
  #define USBHSCORE_DOEPCTL13_STALL_Max (0x1UL)
  #define USBHSCORE_DOEPCTL13_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL13_STALL_ACTIVE (0x1UL)

/* CNAK @Bit 26 : (unspecified) */
  #define USBHSCORE_DOEPCTL13_CNAK_Pos (26UL)
  #define USBHSCORE_DOEPCTL13_CNAK_Msk (0x1UL << USBHSCORE_DOEPCTL13_CNAK_Pos)
  #define USBHSCORE_DOEPCTL13_CNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL13_CNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL13_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL13_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DOEPCTL13_SNAK_Pos (27UL)
  #define USBHSCORE_DOEPCTL13_SNAK_Msk (0x1UL << USBHSCORE_DOEPCTL13_SNAK_Pos)
  #define USBHSCORE_DOEPCTL13_SNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL13_SNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL13_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL13_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DOEPCTL13_SETD0PID_Pos (28UL)
  #define USBHSCORE_DOEPCTL13_SETD0PID_Msk (0x1UL << USBHSCORE_DOEPCTL13_SETD0PID_Pos)
  #define USBHSCORE_DOEPCTL13_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL13_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL13_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL13_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to odd
                                                            (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DOEPCTL13_SETD1PID_Pos (29UL)
  #define USBHSCORE_DOEPCTL13_SETD1PID_Msk (0x1UL << USBHSCORE_DOEPCTL13_SETD1PID_Pos)
  #define USBHSCORE_DOEPCTL13_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL13_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL13_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL13_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to odd
                                                            (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DOEPCTL13_EPDIS_Pos (30UL)
  #define USBHSCORE_DOEPCTL13_EPDIS_Msk (0x1UL << USBHSCORE_DOEPCTL13_EPDIS_Pos)
  #define USBHSCORE_DOEPCTL13_EPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL13_EPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL13_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL13_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DOEPCTL13_EPENA_Pos (31UL)
  #define USBHSCORE_DOEPCTL13_EPENA_Msk (0x1UL << USBHSCORE_DOEPCTL13_EPENA_Pos)
  #define USBHSCORE_DOEPCTL13_EPENA_Min (0x0UL)
  #define USBHSCORE_DOEPCTL13_EPENA_Max (0x1UL)
  #define USBHSCORE_DOEPCTL13_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL13_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DOEPINT13: Device OUT Endpoint Interrupt Register */
  #define USBHSCORE_DOEPINT13_ResetValue (0x00000000UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DOEPINT13_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DOEPINT13_XFERCOMPL_Msk (0x1UL << USBHSCORE_DOEPINT13_XFERCOMPL_Pos)
  #define USBHSCORE_DOEPINT13_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT13_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DOEPINT13_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DOEPINT13_EPDISBLD_Msk (0x1UL << USBHSCORE_DOEPINT13_EPDISBLD_Pos)
  #define USBHSCORE_DOEPINT13_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT13_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DOEPINT13_AHBERR_Pos (2UL)
  #define USBHSCORE_DOEPINT13_AHBERR_Msk (0x1UL << USBHSCORE_DOEPINT13_AHBERR_Pos)
  #define USBHSCORE_DOEPINT13_AHBERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_AHBERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT13_AHBERR_ACTIVE (0x1UL)

/* SETUP @Bit 3 : SETUP Phase Done (SetUp) */
  #define USBHSCORE_DOEPINT13_SETUP_Pos (3UL)
  #define USBHSCORE_DOEPINT13_SETUP_Msk (0x1UL << USBHSCORE_DOEPINT13_SETUP_Pos)
  #define USBHSCORE_DOEPINT13_SETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_SETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_SETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT13_SETUP_ACTIVE (0x1UL)

/* OUTTKNEPDIS @Bit 4 : OUT Token Received When Endpoint Disabled (OUTTknEPdis) */
  #define USBHSCORE_DOEPINT13_OUTTKNEPDIS_Pos (4UL)
  #define USBHSCORE_DOEPINT13_OUTTKNEPDIS_Msk (0x1UL << USBHSCORE_DOEPINT13_OUTTKNEPDIS_Pos) /*!< Bit mask of OUTTKNEPDIS
                                                                            field.*/
  #define USBHSCORE_DOEPINT13_OUTTKNEPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_OUTTKNEPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_OUTTKNEPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT13_OUTTKNEPDIS_ACTIVE (0x1UL)

/* STSPHSERCVD @Bit 5 : Status Phase Received for Control Write (StsPhseRcvd) */
  #define USBHSCORE_DOEPINT13_STSPHSERCVD_Pos (5UL)
  #define USBHSCORE_DOEPINT13_STSPHSERCVD_Msk (0x1UL << USBHSCORE_DOEPINT13_STSPHSERCVD_Pos) /*!< Bit mask of STSPHSERCVD
                                                                            field.*/
  #define USBHSCORE_DOEPINT13_STSPHSERCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_STSPHSERCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_STSPHSERCVD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT13_STSPHSERCVD_ACTIVE (0x1UL)

/* BACK2BACKSETUP @Bit 6 : Back-to-Back SETUP Packets Received (Back2BackSETup) */
  #define USBHSCORE_DOEPINT13_BACK2BACKSETUP_Pos (6UL)
  #define USBHSCORE_DOEPINT13_BACK2BACKSETUP_Msk (0x1UL << USBHSCORE_DOEPINT13_BACK2BACKSETUP_Pos) /*!< Bit mask of
                                                                            BACK2BACKSETUP field.*/
  #define USBHSCORE_DOEPINT13_BACK2BACKSETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_BACK2BACKSETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_BACK2BACKSETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT13_BACK2BACKSETUP_ACTIVE (0x1UL)

/* OUTPKTERR @Bit 8 : OUT Packet Error (OutPktErr) */
  #define USBHSCORE_DOEPINT13_OUTPKTERR_Pos (8UL)
  #define USBHSCORE_DOEPINT13_OUTPKTERR_Msk (0x1UL << USBHSCORE_DOEPINT13_OUTPKTERR_Pos)
  #define USBHSCORE_DOEPINT13_OUTPKTERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_OUTPKTERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_OUTPKTERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT13_OUTPKTERR_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DOEPINT13_BNAINTR_Pos (9UL)
  #define USBHSCORE_DOEPINT13_BNAINTR_Msk (0x1UL << USBHSCORE_DOEPINT13_BNAINTR_Pos)
  #define USBHSCORE_DOEPINT13_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT13_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DOEPINT13_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DOEPINT13_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DOEPINT13_PKTDRPSTS_Pos)
  #define USBHSCORE_DOEPINT13_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT13_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DOEPINT13_BBLEERR_Pos (12UL)
  #define USBHSCORE_DOEPINT13_BBLEERR_Msk (0x1UL << USBHSCORE_DOEPINT13_BBLEERR_Pos)
  #define USBHSCORE_DOEPINT13_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT13_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DOEPINT13_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DOEPINT13_NAKINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT13_NAKINTRPT_Pos)
  #define USBHSCORE_DOEPINT13_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT13_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DOEPINT13_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DOEPINT13_NYETINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT13_NYETINTRPT_Pos)
  #define USBHSCORE_DOEPINT13_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT13_NYETINTRPT_ACTIVE (0x1UL)

/* STUPPKTRCVD @Bit 15 : Setup Packet Received */
  #define USBHSCORE_DOEPINT13_STUPPKTRCVD_Pos (15UL)
  #define USBHSCORE_DOEPINT13_STUPPKTRCVD_Msk (0x1UL << USBHSCORE_DOEPINT13_STUPPKTRCVD_Pos) /*!< Bit mask of STUPPKTRCVD
                                                                            field.*/
  #define USBHSCORE_DOEPINT13_STUPPKTRCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT13_STUPPKTRCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT13_STUPPKTRCVD_NOT_RCVD (0x0UL)
  #define USBHSCORE_DOEPINT13_STUPPKTRCVD_RCVD (0x1UL)


/* USBHSCORE_DOEPTSIZ13: Device OUT Endpoint Transfer Size Register */
  #define USBHSCORE_DOEPTSIZ13_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DOEPTSIZ13_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DOEPTSIZ13_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DOEPTSIZ13_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DOEPTSIZ13_PKTCNT_Pos (19UL)
  #define USBHSCORE_DOEPTSIZ13_PKTCNT_Msk (0x3FFUL << USBHSCORE_DOEPTSIZ13_PKTCNT_Pos)

/* RXDPID @Bits 29..30 : RxDPID */
  #define USBHSCORE_DOEPTSIZ13_RXDPID_Pos (29UL)
  #define USBHSCORE_DOEPTSIZ13_RXDPID_Msk (0x3UL << USBHSCORE_DOEPTSIZ13_RXDPID_Pos)
  #define USBHSCORE_DOEPTSIZ13_RXDPID_Min (0x0UL)
  #define USBHSCORE_DOEPTSIZ13_RXDPID_Max (0x3UL)
  #define USBHSCORE_DOEPTSIZ13_RXDPID_DATA0 (0x0UL)
  #define USBHSCORE_DOEPTSIZ13_RXDPID_DATA2PACKET1 (0x1UL)
  #define USBHSCORE_DOEPTSIZ13_RXDPID_DATA1PACKET2 (0x2UL)
  #define USBHSCORE_DOEPTSIZ13_RXDPID_MDATAPACKET3 (0x3UL)


/* USBHSCORE_DOEPDMA13: Device OUT Endpoint DMA Address Register */
  #define USBHSCORE_DOEPDMA13_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DOEPDMA13_DMAADDR_Pos (0UL)
  #define USBHSCORE_DOEPDMA13_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DOEPDMA13_DMAADDR_Pos)


/* USBHSCORE_DOEPCTL14: Device Control OUT Endpoint Control Register */
  #define USBHSCORE_DOEPCTL14_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DOEPCTL14_MPS_Pos (0UL)
  #define USBHSCORE_DOEPCTL14_MPS_Msk (0x7FFUL << USBHSCORE_DOEPCTL14_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DOEPCTL14_USBACTEP_Pos (15UL)
  #define USBHSCORE_DOEPCTL14_USBACTEP_Msk (0x1UL << USBHSCORE_DOEPCTL14_USBACTEP_Pos)
  #define USBHSCORE_DOEPCTL14_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DOEPCTL14_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DOEPCTL14_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL14_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : Endpoint Data PID (DPID) */
  #define USBHSCORE_DOEPCTL14_DPID_Pos (16UL)
  #define USBHSCORE_DOEPCTL14_DPID_Msk (0x1UL << USBHSCORE_DOEPCTL14_DPID_Pos)
  #define USBHSCORE_DOEPCTL14_DPID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL14_DPID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL14_DPID_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL14_DPID_ACTIVE (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DOEPCTL14_NAKSTS_Pos (17UL)
  #define USBHSCORE_DOEPCTL14_NAKSTS_Msk (0x1UL << USBHSCORE_DOEPCTL14_NAKSTS_Pos)
  #define USBHSCORE_DOEPCTL14_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL14_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL14_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DOEPCTL14_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DOEPCTL14_EPTYPE_Pos (18UL)
  #define USBHSCORE_DOEPCTL14_EPTYPE_Msk (0x3UL << USBHSCORE_DOEPCTL14_EPTYPE_Pos)
  #define USBHSCORE_DOEPCTL14_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DOEPCTL14_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DOEPCTL14_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DOEPCTL14_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DOEPCTL14_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DOEPCTL14_EPTYPE_INTERRUPT (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DOEPCTL14_STALL_Pos (21UL)
  #define USBHSCORE_DOEPCTL14_STALL_Msk (0x1UL << USBHSCORE_DOEPCTL14_STALL_Pos)
  #define USBHSCORE_DOEPCTL14_STALL_Min (0x0UL)
  #define USBHSCORE_DOEPCTL14_STALL_Max (0x1UL)
  #define USBHSCORE_DOEPCTL14_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL14_STALL_ACTIVE (0x1UL)

/* CNAK @Bit 26 : (unspecified) */
  #define USBHSCORE_DOEPCTL14_CNAK_Pos (26UL)
  #define USBHSCORE_DOEPCTL14_CNAK_Msk (0x1UL << USBHSCORE_DOEPCTL14_CNAK_Pos)
  #define USBHSCORE_DOEPCTL14_CNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL14_CNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL14_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL14_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DOEPCTL14_SNAK_Pos (27UL)
  #define USBHSCORE_DOEPCTL14_SNAK_Msk (0x1UL << USBHSCORE_DOEPCTL14_SNAK_Pos)
  #define USBHSCORE_DOEPCTL14_SNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL14_SNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL14_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL14_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DOEPCTL14_SETD0PID_Pos (28UL)
  #define USBHSCORE_DOEPCTL14_SETD0PID_Msk (0x1UL << USBHSCORE_DOEPCTL14_SETD0PID_Pos)
  #define USBHSCORE_DOEPCTL14_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL14_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL14_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL14_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to odd
                                                            (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DOEPCTL14_SETD1PID_Pos (29UL)
  #define USBHSCORE_DOEPCTL14_SETD1PID_Msk (0x1UL << USBHSCORE_DOEPCTL14_SETD1PID_Pos)
  #define USBHSCORE_DOEPCTL14_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL14_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL14_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL14_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to odd
                                                            (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DOEPCTL14_EPDIS_Pos (30UL)
  #define USBHSCORE_DOEPCTL14_EPDIS_Msk (0x1UL << USBHSCORE_DOEPCTL14_EPDIS_Pos)
  #define USBHSCORE_DOEPCTL14_EPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL14_EPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL14_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL14_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DOEPCTL14_EPENA_Pos (31UL)
  #define USBHSCORE_DOEPCTL14_EPENA_Msk (0x1UL << USBHSCORE_DOEPCTL14_EPENA_Pos)
  #define USBHSCORE_DOEPCTL14_EPENA_Min (0x0UL)
  #define USBHSCORE_DOEPCTL14_EPENA_Max (0x1UL)
  #define USBHSCORE_DOEPCTL14_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL14_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DOEPINT14: Device OUT Endpoint Interrupt Register */
  #define USBHSCORE_DOEPINT14_ResetValue (0x00000000UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DOEPINT14_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DOEPINT14_XFERCOMPL_Msk (0x1UL << USBHSCORE_DOEPINT14_XFERCOMPL_Pos)
  #define USBHSCORE_DOEPINT14_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT14_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DOEPINT14_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DOEPINT14_EPDISBLD_Msk (0x1UL << USBHSCORE_DOEPINT14_EPDISBLD_Pos)
  #define USBHSCORE_DOEPINT14_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT14_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DOEPINT14_AHBERR_Pos (2UL)
  #define USBHSCORE_DOEPINT14_AHBERR_Msk (0x1UL << USBHSCORE_DOEPINT14_AHBERR_Pos)
  #define USBHSCORE_DOEPINT14_AHBERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_AHBERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT14_AHBERR_ACTIVE (0x1UL)

/* SETUP @Bit 3 : SETUP Phase Done (SetUp) */
  #define USBHSCORE_DOEPINT14_SETUP_Pos (3UL)
  #define USBHSCORE_DOEPINT14_SETUP_Msk (0x1UL << USBHSCORE_DOEPINT14_SETUP_Pos)
  #define USBHSCORE_DOEPINT14_SETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_SETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_SETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT14_SETUP_ACTIVE (0x1UL)

/* OUTTKNEPDIS @Bit 4 : OUT Token Received When Endpoint Disabled (OUTTknEPdis) */
  #define USBHSCORE_DOEPINT14_OUTTKNEPDIS_Pos (4UL)
  #define USBHSCORE_DOEPINT14_OUTTKNEPDIS_Msk (0x1UL << USBHSCORE_DOEPINT14_OUTTKNEPDIS_Pos) /*!< Bit mask of OUTTKNEPDIS
                                                                            field.*/
  #define USBHSCORE_DOEPINT14_OUTTKNEPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_OUTTKNEPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_OUTTKNEPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT14_OUTTKNEPDIS_ACTIVE (0x1UL)

/* STSPHSERCVD @Bit 5 : Status Phase Received for Control Write (StsPhseRcvd) */
  #define USBHSCORE_DOEPINT14_STSPHSERCVD_Pos (5UL)
  #define USBHSCORE_DOEPINT14_STSPHSERCVD_Msk (0x1UL << USBHSCORE_DOEPINT14_STSPHSERCVD_Pos) /*!< Bit mask of STSPHSERCVD
                                                                            field.*/
  #define USBHSCORE_DOEPINT14_STSPHSERCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_STSPHSERCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_STSPHSERCVD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT14_STSPHSERCVD_ACTIVE (0x1UL)

/* BACK2BACKSETUP @Bit 6 : Back-to-Back SETUP Packets Received (Back2BackSETup) */
  #define USBHSCORE_DOEPINT14_BACK2BACKSETUP_Pos (6UL)
  #define USBHSCORE_DOEPINT14_BACK2BACKSETUP_Msk (0x1UL << USBHSCORE_DOEPINT14_BACK2BACKSETUP_Pos) /*!< Bit mask of
                                                                            BACK2BACKSETUP field.*/
  #define USBHSCORE_DOEPINT14_BACK2BACKSETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_BACK2BACKSETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_BACK2BACKSETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT14_BACK2BACKSETUP_ACTIVE (0x1UL)

/* OUTPKTERR @Bit 8 : OUT Packet Error (OutPktErr) */
  #define USBHSCORE_DOEPINT14_OUTPKTERR_Pos (8UL)
  #define USBHSCORE_DOEPINT14_OUTPKTERR_Msk (0x1UL << USBHSCORE_DOEPINT14_OUTPKTERR_Pos)
  #define USBHSCORE_DOEPINT14_OUTPKTERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_OUTPKTERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_OUTPKTERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT14_OUTPKTERR_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DOEPINT14_BNAINTR_Pos (9UL)
  #define USBHSCORE_DOEPINT14_BNAINTR_Msk (0x1UL << USBHSCORE_DOEPINT14_BNAINTR_Pos)
  #define USBHSCORE_DOEPINT14_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT14_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DOEPINT14_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DOEPINT14_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DOEPINT14_PKTDRPSTS_Pos)
  #define USBHSCORE_DOEPINT14_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT14_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DOEPINT14_BBLEERR_Pos (12UL)
  #define USBHSCORE_DOEPINT14_BBLEERR_Msk (0x1UL << USBHSCORE_DOEPINT14_BBLEERR_Pos)
  #define USBHSCORE_DOEPINT14_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT14_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DOEPINT14_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DOEPINT14_NAKINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT14_NAKINTRPT_Pos)
  #define USBHSCORE_DOEPINT14_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT14_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DOEPINT14_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DOEPINT14_NYETINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT14_NYETINTRPT_Pos)
  #define USBHSCORE_DOEPINT14_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT14_NYETINTRPT_ACTIVE (0x1UL)

/* STUPPKTRCVD @Bit 15 : Setup Packet Received */
  #define USBHSCORE_DOEPINT14_STUPPKTRCVD_Pos (15UL)
  #define USBHSCORE_DOEPINT14_STUPPKTRCVD_Msk (0x1UL << USBHSCORE_DOEPINT14_STUPPKTRCVD_Pos) /*!< Bit mask of STUPPKTRCVD
                                                                            field.*/
  #define USBHSCORE_DOEPINT14_STUPPKTRCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT14_STUPPKTRCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT14_STUPPKTRCVD_NOT_RCVD (0x0UL)
  #define USBHSCORE_DOEPINT14_STUPPKTRCVD_RCVD (0x1UL)


/* USBHSCORE_DOEPTSIZ14: Device OUT Endpoint Transfer Size Register */
  #define USBHSCORE_DOEPTSIZ14_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DOEPTSIZ14_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DOEPTSIZ14_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DOEPTSIZ14_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DOEPTSIZ14_PKTCNT_Pos (19UL)
  #define USBHSCORE_DOEPTSIZ14_PKTCNT_Msk (0x3FFUL << USBHSCORE_DOEPTSIZ14_PKTCNT_Pos)

/* RXDPID @Bits 29..30 : RxDPID */
  #define USBHSCORE_DOEPTSIZ14_RXDPID_Pos (29UL)
  #define USBHSCORE_DOEPTSIZ14_RXDPID_Msk (0x3UL << USBHSCORE_DOEPTSIZ14_RXDPID_Pos)
  #define USBHSCORE_DOEPTSIZ14_RXDPID_Min (0x0UL)
  #define USBHSCORE_DOEPTSIZ14_RXDPID_Max (0x3UL)
  #define USBHSCORE_DOEPTSIZ14_RXDPID_DATA0 (0x0UL)
  #define USBHSCORE_DOEPTSIZ14_RXDPID_DATA2PACKET1 (0x1UL)
  #define USBHSCORE_DOEPTSIZ14_RXDPID_DATA1PACKET2 (0x2UL)
  #define USBHSCORE_DOEPTSIZ14_RXDPID_MDATAPACKET3 (0x3UL)


/* USBHSCORE_DOEPDMA14: Device OUT Endpoint DMA Address Register */
  #define USBHSCORE_DOEPDMA14_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DOEPDMA14_DMAADDR_Pos (0UL)
  #define USBHSCORE_DOEPDMA14_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DOEPDMA14_DMAADDR_Pos)


/* USBHSCORE_DOEPCTL15: Device Control OUT Endpoint Control Register */
  #define USBHSCORE_DOEPCTL15_ResetValue (0x00000000UL)

/* MPS @Bits 0..10 : Maximum Packet Size (MPS) */
  #define USBHSCORE_DOEPCTL15_MPS_Pos (0UL)
  #define USBHSCORE_DOEPCTL15_MPS_Msk (0x7FFUL << USBHSCORE_DOEPCTL15_MPS_Pos)

/* USBACTEP @Bit 15 : USB Active Endpoint (USBActEP) */
  #define USBHSCORE_DOEPCTL15_USBACTEP_Pos (15UL)
  #define USBHSCORE_DOEPCTL15_USBACTEP_Msk (0x1UL << USBHSCORE_DOEPCTL15_USBACTEP_Pos)
  #define USBHSCORE_DOEPCTL15_USBACTEP_Min (0x0UL)
  #define USBHSCORE_DOEPCTL15_USBACTEP_Max (0x1UL)
  #define USBHSCORE_DOEPCTL15_USBACTEP_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL15_USBACTEP_ENABLED (0x1UL)

/* DPID @Bit 16 : Endpoint Data PID (DPID) */
  #define USBHSCORE_DOEPCTL15_DPID_Pos (16UL)
  #define USBHSCORE_DOEPCTL15_DPID_Msk (0x1UL << USBHSCORE_DOEPCTL15_DPID_Pos)
  #define USBHSCORE_DOEPCTL15_DPID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL15_DPID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL15_DPID_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL15_DPID_ACTIVE (0x1UL)

/* NAKSTS @Bit 17 : NAK Status (NAKSts) */
  #define USBHSCORE_DOEPCTL15_NAKSTS_Pos (17UL)
  #define USBHSCORE_DOEPCTL15_NAKSTS_Msk (0x1UL << USBHSCORE_DOEPCTL15_NAKSTS_Pos)
  #define USBHSCORE_DOEPCTL15_NAKSTS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL15_NAKSTS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL15_NAKSTS_NONNAK (0x0UL)
  #define USBHSCORE_DOEPCTL15_NAKSTS_NAK (0x1UL)

/* EPTYPE @Bits 18..19 : Endpoint Type (EPType) */
  #define USBHSCORE_DOEPCTL15_EPTYPE_Pos (18UL)
  #define USBHSCORE_DOEPCTL15_EPTYPE_Msk (0x3UL << USBHSCORE_DOEPCTL15_EPTYPE_Pos)
  #define USBHSCORE_DOEPCTL15_EPTYPE_Min (0x0UL)
  #define USBHSCORE_DOEPCTL15_EPTYPE_Max (0x3UL)
  #define USBHSCORE_DOEPCTL15_EPTYPE_CONTROL (0x0UL)
  #define USBHSCORE_DOEPCTL15_EPTYPE_ISOCHRONOUS (0x1UL)
  #define USBHSCORE_DOEPCTL15_EPTYPE_BULK (0x2UL)
  #define USBHSCORE_DOEPCTL15_EPTYPE_INTERRUPT (0x3UL)

/* STALL @Bit 21 : STALL Handshake (Stall) */
  #define USBHSCORE_DOEPCTL15_STALL_Pos (21UL)
  #define USBHSCORE_DOEPCTL15_STALL_Msk (0x1UL << USBHSCORE_DOEPCTL15_STALL_Pos)
  #define USBHSCORE_DOEPCTL15_STALL_Min (0x0UL)
  #define USBHSCORE_DOEPCTL15_STALL_Max (0x1UL)
  #define USBHSCORE_DOEPCTL15_STALL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL15_STALL_ACTIVE (0x1UL)

/* CNAK @Bit 26 : (unspecified) */
  #define USBHSCORE_DOEPCTL15_CNAK_Pos (26UL)
  #define USBHSCORE_DOEPCTL15_CNAK_Msk (0x1UL << USBHSCORE_DOEPCTL15_CNAK_Pos)
  #define USBHSCORE_DOEPCTL15_CNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL15_CNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL15_CNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL15_CNAK_ACTIVE (0x1UL)

/* SNAK @Bit 27 : Set NAK (SNAK) */
  #define USBHSCORE_DOEPCTL15_SNAK_Pos (27UL)
  #define USBHSCORE_DOEPCTL15_SNAK_Msk (0x1UL << USBHSCORE_DOEPCTL15_SNAK_Pos)
  #define USBHSCORE_DOEPCTL15_SNAK_Min (0x0UL)
  #define USBHSCORE_DOEPCTL15_SNAK_Max (0x1UL)
  #define USBHSCORE_DOEPCTL15_SNAK_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL15_SNAK_ACTIVE (0x1UL)

/* SETD0PID @Bit 28 : Set DATA0 PID (SetD0PID) */
  #define USBHSCORE_DOEPCTL15_SETD0PID_Pos (28UL)
  #define USBHSCORE_DOEPCTL15_SETD0PID_Msk (0x1UL << USBHSCORE_DOEPCTL15_SETD0PID_Pos)
  #define USBHSCORE_DOEPCTL15_SETD0PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL15_SETD0PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL15_SETD0PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL15_SETD0PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA0 or Sets EO_FrNum field to odd
                                                            (micro)Frame*/

/* SETD1PID @Bit 29 : Set DATA1 PID (SetD1PID) */
  #define USBHSCORE_DOEPCTL15_SETD1PID_Pos (29UL)
  #define USBHSCORE_DOEPCTL15_SETD1PID_Msk (0x1UL << USBHSCORE_DOEPCTL15_SETD1PID_Pos)
  #define USBHSCORE_DOEPCTL15_SETD1PID_Min (0x0UL)
  #define USBHSCORE_DOEPCTL15_SETD1PID_Max (0x1UL)
  #define USBHSCORE_DOEPCTL15_SETD1PID_DISABLED (0x0UL)
  #define USBHSCORE_DOEPCTL15_SETD1PID_ENABLED (0x1UL) /*!< Set Endpoint Data PID to DATA1 or Sets EO_FrNum field to odd
                                                            (micro)Frame*/

/* EPDIS @Bit 30 : Endpoint Disable (EPDis) */
  #define USBHSCORE_DOEPCTL15_EPDIS_Pos (30UL)
  #define USBHSCORE_DOEPCTL15_EPDIS_Msk (0x1UL << USBHSCORE_DOEPCTL15_EPDIS_Pos)
  #define USBHSCORE_DOEPCTL15_EPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPCTL15_EPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPCTL15_EPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL15_EPDIS_ACTIVE (0x1UL)

/* EPENA @Bit 31 : Endpoint Enable (EPEna) */
  #define USBHSCORE_DOEPCTL15_EPENA_Pos (31UL)
  #define USBHSCORE_DOEPCTL15_EPENA_Msk (0x1UL << USBHSCORE_DOEPCTL15_EPENA_Pos)
  #define USBHSCORE_DOEPCTL15_EPENA_Min (0x0UL)
  #define USBHSCORE_DOEPCTL15_EPENA_Max (0x1UL)
  #define USBHSCORE_DOEPCTL15_EPENA_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPCTL15_EPENA_ACTIVE (0x1UL)


/* USBHSCORE_DOEPINT15: Device OUT Endpoint Interrupt Register */
  #define USBHSCORE_DOEPINT15_ResetValue (0x00000000UL)

/* XFERCOMPL @Bit 0 : Transfer Completed Interrupt (XferCompl) */
  #define USBHSCORE_DOEPINT15_XFERCOMPL_Pos (0UL)
  #define USBHSCORE_DOEPINT15_XFERCOMPL_Msk (0x1UL << USBHSCORE_DOEPINT15_XFERCOMPL_Pos)
  #define USBHSCORE_DOEPINT15_XFERCOMPL_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_XFERCOMPL_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_XFERCOMPL_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT15_XFERCOMPL_ACTIVE (0x1UL)

/* EPDISBLD @Bit 1 : Endpoint Disabled Interrupt (EPDisbld) */
  #define USBHSCORE_DOEPINT15_EPDISBLD_Pos (1UL)
  #define USBHSCORE_DOEPINT15_EPDISBLD_Msk (0x1UL << USBHSCORE_DOEPINT15_EPDISBLD_Pos)
  #define USBHSCORE_DOEPINT15_EPDISBLD_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_EPDISBLD_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_EPDISBLD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT15_EPDISBLD_ACTIVE (0x1UL)

/* AHBERR @Bit 2 : AHB Error (AHBErr) */
  #define USBHSCORE_DOEPINT15_AHBERR_Pos (2UL)
  #define USBHSCORE_DOEPINT15_AHBERR_Msk (0x1UL << USBHSCORE_DOEPINT15_AHBERR_Pos)
  #define USBHSCORE_DOEPINT15_AHBERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_AHBERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_AHBERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT15_AHBERR_ACTIVE (0x1UL)

/* SETUP @Bit 3 : SETUP Phase Done (SetUp) */
  #define USBHSCORE_DOEPINT15_SETUP_Pos (3UL)
  #define USBHSCORE_DOEPINT15_SETUP_Msk (0x1UL << USBHSCORE_DOEPINT15_SETUP_Pos)
  #define USBHSCORE_DOEPINT15_SETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_SETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_SETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT15_SETUP_ACTIVE (0x1UL)

/* OUTTKNEPDIS @Bit 4 : OUT Token Received When Endpoint Disabled (OUTTknEPdis) */
  #define USBHSCORE_DOEPINT15_OUTTKNEPDIS_Pos (4UL)
  #define USBHSCORE_DOEPINT15_OUTTKNEPDIS_Msk (0x1UL << USBHSCORE_DOEPINT15_OUTTKNEPDIS_Pos) /*!< Bit mask of OUTTKNEPDIS
                                                                            field.*/
  #define USBHSCORE_DOEPINT15_OUTTKNEPDIS_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_OUTTKNEPDIS_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_OUTTKNEPDIS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT15_OUTTKNEPDIS_ACTIVE (0x1UL)

/* STSPHSERCVD @Bit 5 : Status Phase Received for Control Write (StsPhseRcvd) */
  #define USBHSCORE_DOEPINT15_STSPHSERCVD_Pos (5UL)
  #define USBHSCORE_DOEPINT15_STSPHSERCVD_Msk (0x1UL << USBHSCORE_DOEPINT15_STSPHSERCVD_Pos) /*!< Bit mask of STSPHSERCVD
                                                                            field.*/
  #define USBHSCORE_DOEPINT15_STSPHSERCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_STSPHSERCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_STSPHSERCVD_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT15_STSPHSERCVD_ACTIVE (0x1UL)

/* BACK2BACKSETUP @Bit 6 : Back-to-Back SETUP Packets Received (Back2BackSETup) */
  #define USBHSCORE_DOEPINT15_BACK2BACKSETUP_Pos (6UL)
  #define USBHSCORE_DOEPINT15_BACK2BACKSETUP_Msk (0x1UL << USBHSCORE_DOEPINT15_BACK2BACKSETUP_Pos) /*!< Bit mask of
                                                                            BACK2BACKSETUP field.*/
  #define USBHSCORE_DOEPINT15_BACK2BACKSETUP_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_BACK2BACKSETUP_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_BACK2BACKSETUP_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT15_BACK2BACKSETUP_ACTIVE (0x1UL)

/* OUTPKTERR @Bit 8 : OUT Packet Error (OutPktErr) */
  #define USBHSCORE_DOEPINT15_OUTPKTERR_Pos (8UL)
  #define USBHSCORE_DOEPINT15_OUTPKTERR_Msk (0x1UL << USBHSCORE_DOEPINT15_OUTPKTERR_Pos)
  #define USBHSCORE_DOEPINT15_OUTPKTERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_OUTPKTERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_OUTPKTERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT15_OUTPKTERR_ACTIVE (0x1UL)

/* BNAINTR @Bit 9 : BNA (Buffer Not Available) Interrupt (BNAIntr) */
  #define USBHSCORE_DOEPINT15_BNAINTR_Pos (9UL)
  #define USBHSCORE_DOEPINT15_BNAINTR_Msk (0x1UL << USBHSCORE_DOEPINT15_BNAINTR_Pos)
  #define USBHSCORE_DOEPINT15_BNAINTR_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_BNAINTR_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_BNAINTR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT15_BNAINTR_ACTIVE (0x1UL)

/* PKTDRPSTS @Bit 11 : Packet Drop Status (PktDrpSts) */
  #define USBHSCORE_DOEPINT15_PKTDRPSTS_Pos (11UL)
  #define USBHSCORE_DOEPINT15_PKTDRPSTS_Msk (0x1UL << USBHSCORE_DOEPINT15_PKTDRPSTS_Pos)
  #define USBHSCORE_DOEPINT15_PKTDRPSTS_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_PKTDRPSTS_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_PKTDRPSTS_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT15_PKTDRPSTS_ACTIVE (0x1UL)

/* BBLEERR @Bit 12 : NAK Interrupt (BbleErr) */
  #define USBHSCORE_DOEPINT15_BBLEERR_Pos (12UL)
  #define USBHSCORE_DOEPINT15_BBLEERR_Msk (0x1UL << USBHSCORE_DOEPINT15_BBLEERR_Pos)
  #define USBHSCORE_DOEPINT15_BBLEERR_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_BBLEERR_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_BBLEERR_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT15_BBLEERR_ACTIVE (0x1UL)

/* NAKINTRPT @Bit 13 : NAK Interrupt (NAKInterrupt) */
  #define USBHSCORE_DOEPINT15_NAKINTRPT_Pos (13UL)
  #define USBHSCORE_DOEPINT15_NAKINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT15_NAKINTRPT_Pos)
  #define USBHSCORE_DOEPINT15_NAKINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_NAKINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_NAKINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT15_NAKINTRPT_ACTIVE (0x1UL)

/* NYETINTRPT @Bit 14 : NYET Interrupt (NYETIntrpt) */
  #define USBHSCORE_DOEPINT15_NYETINTRPT_Pos (14UL)
  #define USBHSCORE_DOEPINT15_NYETINTRPT_Msk (0x1UL << USBHSCORE_DOEPINT15_NYETINTRPT_Pos)
  #define USBHSCORE_DOEPINT15_NYETINTRPT_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_NYETINTRPT_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_NYETINTRPT_INACTIVE (0x0UL)
  #define USBHSCORE_DOEPINT15_NYETINTRPT_ACTIVE (0x1UL)

/* STUPPKTRCVD @Bit 15 : Setup Packet Received */
  #define USBHSCORE_DOEPINT15_STUPPKTRCVD_Pos (15UL)
  #define USBHSCORE_DOEPINT15_STUPPKTRCVD_Msk (0x1UL << USBHSCORE_DOEPINT15_STUPPKTRCVD_Pos) /*!< Bit mask of STUPPKTRCVD
                                                                            field.*/
  #define USBHSCORE_DOEPINT15_STUPPKTRCVD_Min (0x0UL)
  #define USBHSCORE_DOEPINT15_STUPPKTRCVD_Max (0x1UL)
  #define USBHSCORE_DOEPINT15_STUPPKTRCVD_NOT_RCVD (0x0UL)
  #define USBHSCORE_DOEPINT15_STUPPKTRCVD_RCVD (0x1UL)


/* USBHSCORE_DOEPTSIZ15: Device OUT Endpoint Transfer Size Register */
  #define USBHSCORE_DOEPTSIZ15_ResetValue (0x00000000UL)

/* XFERSIZE @Bits 0..18 : Transfer Size (XferSize) */
  #define USBHSCORE_DOEPTSIZ15_XFERSIZE_Pos (0UL)
  #define USBHSCORE_DOEPTSIZ15_XFERSIZE_Msk (0x7FFFFUL << USBHSCORE_DOEPTSIZ15_XFERSIZE_Pos)

/* PKTCNT @Bits 19..28 : Packet Count (PktCnt) */
  #define USBHSCORE_DOEPTSIZ15_PKTCNT_Pos (19UL)
  #define USBHSCORE_DOEPTSIZ15_PKTCNT_Msk (0x3FFUL << USBHSCORE_DOEPTSIZ15_PKTCNT_Pos)

/* RXDPID @Bits 29..30 : RxDPID */
  #define USBHSCORE_DOEPTSIZ15_RXDPID_Pos (29UL)
  #define USBHSCORE_DOEPTSIZ15_RXDPID_Msk (0x3UL << USBHSCORE_DOEPTSIZ15_RXDPID_Pos)
  #define USBHSCORE_DOEPTSIZ15_RXDPID_Min (0x0UL)
  #define USBHSCORE_DOEPTSIZ15_RXDPID_Max (0x3UL)
  #define USBHSCORE_DOEPTSIZ15_RXDPID_DATA0 (0x0UL)
  #define USBHSCORE_DOEPTSIZ15_RXDPID_DATA2PACKET1 (0x1UL)
  #define USBHSCORE_DOEPTSIZ15_RXDPID_DATA1PACKET2 (0x2UL)
  #define USBHSCORE_DOEPTSIZ15_RXDPID_MDATAPACKET3 (0x3UL)


/* USBHSCORE_DOEPDMA15: Device OUT Endpoint DMA Address Register */
  #define USBHSCORE_DOEPDMA15_ResetValue (0x00000000UL)

/* DMAADDR @Bits 0..31 : Holds the start address of the external memory for storing or fetching endpoint */
  #define USBHSCORE_DOEPDMA15_DMAADDR_Pos (0UL)
  #define USBHSCORE_DOEPDMA15_DMAADDR_Msk (0xFFFFFFFFUL << USBHSCORE_DOEPDMA15_DMAADDR_Pos)


/* USBHSCORE_PCGCCTL: Power and Clock Gating Control Register */
  #define USBHSCORE_PCGCCTL_ResetValue (0x880A0000UL)

/* STOPPCLK @Bit 0 : Stop Pclk (StopPclk) */
  #define USBHSCORE_PCGCCTL_STOPPCLK_Pos (0UL)
  #define USBHSCORE_PCGCCTL_STOPPCLK_Msk (0x1UL << USBHSCORE_PCGCCTL_STOPPCLK_Pos)
  #define USBHSCORE_PCGCCTL_STOPPCLK_Min (0x0UL)
  #define USBHSCORE_PCGCCTL_STOPPCLK_Max (0x1UL)
  #define USBHSCORE_PCGCCTL_STOPPCLK_DISABLED (0x0UL)
  #define USBHSCORE_PCGCCTL_STOPPCLK_ENABLED (0x1UL)

/* GATEHCLK @Bit 1 : Gate Hclk (GateHclk) */
  #define USBHSCORE_PCGCCTL_GATEHCLK_Pos (1UL)
  #define USBHSCORE_PCGCCTL_GATEHCLK_Msk (0x1UL << USBHSCORE_PCGCCTL_GATEHCLK_Pos)
  #define USBHSCORE_PCGCCTL_GATEHCLK_Min (0x0UL)
  #define USBHSCORE_PCGCCTL_GATEHCLK_Max (0x1UL)
  #define USBHSCORE_PCGCCTL_GATEHCLK_DISABLED (0x0UL)
  #define USBHSCORE_PCGCCTL_GATEHCLK_ENABLED (0x1UL) /*!< Sets this bit to gate hclk to modules when the USB is suspended or the
                                                          session is not valid*/

/* RSTPDWNMODULE @Bit 3 : Reset Power-Down Modules (RstPdwnModule) */
  #define USBHSCORE_PCGCCTL_RSTPDWNMODULE_Pos (3UL)
  #define USBHSCORE_PCGCCTL_RSTPDWNMODULE_Msk (0x1UL << USBHSCORE_PCGCCTL_RSTPDWNMODULE_Pos) /*!< Bit mask of RSTPDWNMODULE
                                                                            field.*/
  #define USBHSCORE_PCGCCTL_RSTPDWNMODULE_Min (0x0UL)
  #define USBHSCORE_PCGCCTL_RSTPDWNMODULE_Max (0x1UL)
  #define USBHSCORE_PCGCCTL_RSTPDWNMODULE_ON (0x0UL)
  #define USBHSCORE_PCGCCTL_RSTPDWNMODULE_OFF (0x1UL)

/* ENBLL1GATING @Bit 5 : Enable Sleep Clock Gating */
  #define USBHSCORE_PCGCCTL_ENBLL1GATING_Pos (5UL)
  #define USBHSCORE_PCGCCTL_ENBLL1GATING_Msk (0x1UL << USBHSCORE_PCGCCTL_ENBLL1GATING_Pos)
  #define USBHSCORE_PCGCCTL_ENBLL1GATING_Min (0x0UL)
  #define USBHSCORE_PCGCCTL_ENBLL1GATING_Max (0x1UL)
  #define USBHSCORE_PCGCCTL_ENBLL1GATING_DISABLED (0x0UL)
  #define USBHSCORE_PCGCCTL_ENBLL1GATING_ENABLED (0x1UL)

/* PHYSLEEP @Bit 6 : PHY In Sleep */
  #define USBHSCORE_PCGCCTL_PHYSLEEP_Pos (6UL)
  #define USBHSCORE_PCGCCTL_PHYSLEEP_Msk (0x1UL << USBHSCORE_PCGCCTL_PHYSLEEP_Pos)
  #define USBHSCORE_PCGCCTL_PHYSLEEP_Min (0x0UL)
  #define USBHSCORE_PCGCCTL_PHYSLEEP_Max (0x1UL)
  #define USBHSCORE_PCGCCTL_PHYSLEEP_INACTIVE (0x0UL)
  #define USBHSCORE_PCGCCTL_PHYSLEEP_ACTIVE (0x1UL)

/* L1SUSPENDED @Bit 7 : L1 Deep Sleep */
  #define USBHSCORE_PCGCCTL_L1SUSPENDED_Pos (7UL)
  #define USBHSCORE_PCGCCTL_L1SUSPENDED_Msk (0x1UL << USBHSCORE_PCGCCTL_L1SUSPENDED_Pos)
  #define USBHSCORE_PCGCCTL_L1SUSPENDED_Min (0x0UL)
  #define USBHSCORE_PCGCCTL_L1SUSPENDED_Max (0x1UL)
  #define USBHSCORE_PCGCCTL_L1SUSPENDED_INACTIVE (0x0UL)
  #define USBHSCORE_PCGCCTL_L1SUSPENDED_ACTIVE (0x1UL)

/* RESTOREMODE @Bit 9 : Restore Mode (RestoreMode) */
  #define USBHSCORE_PCGCCTL_RESTOREMODE_Pos (9UL)
  #define USBHSCORE_PCGCCTL_RESTOREMODE_Msk (0x1UL << USBHSCORE_PCGCCTL_RESTOREMODE_Pos)
  #define USBHSCORE_PCGCCTL_RESTOREMODE_Min (0x0UL)
  #define USBHSCORE_PCGCCTL_RESTOREMODE_Max (0x1UL)
  #define USBHSCORE_PCGCCTL_RESTOREMODE_DISABLED (0x0UL) /*!< In Host mode,this bit indicates Host-initiated Resume and Reset.
                                                              In Device mode, this bit indicates Device-initiated Remote Wakeup*/
  #define USBHSCORE_PCGCCTL_RESTOREMODE_ENABLED (0x1UL) /*!< In Host mode,this bit indicates Device-initiated Remote Wakeup. In
                                                             Device mode, this bit indicates Host-initiated Resume and Reset*/

/* ESSREGRESTORED @Bit 13 : Essential Register Values Restored (EssRegRestored) */
  #define USBHSCORE_PCGCCTL_ESSREGRESTORED_Pos (13UL)
  #define USBHSCORE_PCGCCTL_ESSREGRESTORED_Msk (0x1UL << USBHSCORE_PCGCCTL_ESSREGRESTORED_Pos) /*!< Bit mask of ESSREGRESTORED
                                                                            field.*/
  #define USBHSCORE_PCGCCTL_ESSREGRESTORED_Min (0x0UL)
  #define USBHSCORE_PCGCCTL_ESSREGRESTORED_Max (0x1UL)
  #define USBHSCORE_PCGCCTL_ESSREGRESTORED_NOT_RESTORED (0x0UL)
  #define USBHSCORE_PCGCCTL_ESSREGRESTORED_RESTORED (0x1UL)

/* RESTOREVALUE @Bits 14..31 : Restore Value (RestoreValue) */
  #define USBHSCORE_PCGCCTL_RESTOREVALUE_Pos (14UL)
  #define USBHSCORE_PCGCCTL_RESTOREVALUE_Msk (0x3FFFFUL << USBHSCORE_PCGCCTL_RESTOREVALUE_Pos) /*!< Bit mask of RESTOREVALUE
                                                                            field.*/


/* USBHSCORE_GSTARFXDIS: Global STAR Fix Disable Register */
  #define USBHSCORE_GSTARFXDIS_ResetValue (0x00002200UL)

/* HOSTIGNORESRMTWKUPDIS @Bit 0 : Disable the STAR fix added for Device controller to go back to low power mode when Host
                                  ignores Remote wakeup */

  #define USBHSCORE_GSTARFXDIS_HOSTIGNORESRMTWKUPDIS_Pos (0UL)
  #define USBHSCORE_GSTARFXDIS_HOSTIGNORESRMTWKUPDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_HOSTIGNORESRMTWKUPDIS_Pos) /*!< Bit mask
                                                                            of HOSTIGNORESRMTWKUPDIS field.*/
  #define USBHSCORE_GSTARFXDIS_HOSTIGNORESRMTWKUPDIS_Min (0x0UL)
  #define USBHSCORE_GSTARFXDIS_HOSTIGNORESRMTWKUPDIS_Max (0x1UL)
  #define USBHSCORE_GSTARFXDIS_HOSTIGNORESRMTWKUPDIS_ENABLE_FIX (0x0UL) /*!< Device controller goes back into SUSPENDED state
                                                                            when host ignores Remote Wakeup*/
  #define USBHSCORE_GSTARFXDIS_HOSTIGNORESRMTWKUPDIS_DISABLE_FIX (0x1UL) /*!< Device controller waits indefinitely without
                                                                            entering SUSPENDED state when host ignores the
                                                                            Remote Wakeup*/

/* RESUMEFRMCHKBUSDIS @Bit 1 : Disable the STAR fix added for Device controller to detect lineK and move to RESUMING state after
                               the 50us pull-up delay ends */

  #define USBHSCORE_GSTARFXDIS_RESUMEFRMCHKBUSDIS_Pos (1UL)
  #define USBHSCORE_GSTARFXDIS_RESUMEFRMCHKBUSDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_RESUMEFRMCHKBUSDIS_Pos) /*!< Bit mask of
                                                                            RESUMEFRMCHKBUSDIS field.*/
  #define USBHSCORE_GSTARFXDIS_RESUMEFRMCHKBUSDIS_Min (0x0UL)
  #define USBHSCORE_GSTARFXDIS_RESUMEFRMCHKBUSDIS_Max (0x1UL)
  #define USBHSCORE_GSTARFXDIS_RESUMEFRMCHKBUSDIS_ENABLE_FIX (0x0UL)
  #define USBHSCORE_GSTARFXDIS_RESUMEFRMCHKBUSDIS_DISABLE_FIX (0x1UL)

/* IGNORECTLOUTDATA0DIS @Bit 2 : Disable the STAR fix added for Device controller to reject DATA0 for the first Control OUT Data
                                 Phase and Control Status OUT Phase */

  #define USBHSCORE_GSTARFXDIS_IGNORECTLOUTDATA0DIS_Pos (2UL)
  #define USBHSCORE_GSTARFXDIS_IGNORECTLOUTDATA0DIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_IGNORECTLOUTDATA0DIS_Pos) /*!< Bit mask
                                                                            of IGNORECTLOUTDATA0DIS field.*/
  #define USBHSCORE_GSTARFXDIS_IGNORECTLOUTDATA0DIS_Min (0x0UL)
  #define USBHSCORE_GSTARFXDIS_IGNORECTLOUTDATA0DIS_Max (0x1UL)
  #define USBHSCORE_GSTARFXDIS_IGNORECTLOUTDATA0DIS_ENABLE_FIX (0x0UL) /*!< Transaction Error reported when host sends DATA0
                                                                            PID*/
  #define USBHSCORE_GSTARFXDIS_IGNORECTLOUTDATA0DIS_DISABLE_FIX (0x1UL) /*!< Transaction Error not reported when host sends
                                                                            DATA0 PID*/

/* SSPLITSTALLNYETERRDIS @Bit 3 : Disable the STAR fix added for Host controller to flag error for SSPLIT STALL/NYET */
  #define USBHSCORE_GSTARFXDIS_SSPLITSTALLNYETERRDIS_Pos (3UL)
  #define USBHSCORE_GSTARFXDIS_SSPLITSTALLNYETERRDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_SSPLITSTALLNYETERRDIS_Pos) /*!< Bit mask
                                                                            of SSPLITSTALLNYETERRDIS field.*/
  #define USBHSCORE_GSTARFXDIS_SSPLITSTALLNYETERRDIS_Min (0x0UL)
  #define USBHSCORE_GSTARFXDIS_SSPLITSTALLNYETERRDIS_Max (0x1UL)
  #define USBHSCORE_GSTARFXDIS_SSPLITSTALLNYETERRDIS_ENABLE_FIX (0x0UL) /*!< Transaction Error reported when device sends
                                                                            STALL/NYET for SSPLIT*/
  #define USBHSCORE_GSTARFXDIS_SSPLITSTALLNYETERRDIS_DISABLE_FIX (0x1UL) /*!< Transaction Error not reported when device sends
                                                                            STALL/NYET for SSPLIT*/

/* ACCEPTISOCSPLITDATA1DIS @Bit 4 : Disable the STAR fix added for Host controller to accept DATA1 PID from device for ISOC
                                    Split transfers */

  #define USBHSCORE_GSTARFXDIS_ACCEPTISOCSPLITDATA1DIS_Pos (4UL)
  #define USBHSCORE_GSTARFXDIS_ACCEPTISOCSPLITDATA1DIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_ACCEPTISOCSPLITDATA1DIS_Pos) /*!< Bit
                                                                            mask of ACCEPTISOCSPLITDATA1DIS field.*/
  #define USBHSCORE_GSTARFXDIS_ACCEPTISOCSPLITDATA1DIS_Min (0x0UL)
  #define USBHSCORE_GSTARFXDIS_ACCEPTISOCSPLITDATA1DIS_Max (0x1UL)
  #define USBHSCORE_GSTARFXDIS_ACCEPTISOCSPLITDATA1DIS_ENABLE_FIX (0x0UL) /*!< Transaction Error not reported when device sends
                                                                            DATA1 PID for ISOC Split*/
  #define USBHSCORE_GSTARFXDIS_ACCEPTISOCSPLITDATA1DIS_DISABLE_FIX (0x1UL) /*!< Transaction Error reported when device sends
                                                                            DATA1 PID for ISOC Split*/

/* HANDLEFAULTYCABLEDIS @Bit 5 : Disable the STAR fix added for Host controller to handle Faulty cable scenarios */
  #define USBHSCORE_GSTARFXDIS_HANDLEFAULTYCABLEDIS_Pos (5UL)
  #define USBHSCORE_GSTARFXDIS_HANDLEFAULTYCABLEDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_HANDLEFAULTYCABLEDIS_Pos) /*!< Bit mask
                                                                            of HANDLEFAULTYCABLEDIS field.*/
  #define USBHSCORE_GSTARFXDIS_HANDLEFAULTYCABLEDIS_Min (0x0UL)
  #define USBHSCORE_GSTARFXDIS_HANDLEFAULTYCABLEDIS_Max (0x1UL)
  #define USBHSCORE_GSTARFXDIS_HANDLEFAULTYCABLEDIS_ENABLE_FIX (0x0UL)
  #define USBHSCORE_GSTARFXDIS_HANDLEFAULTYCABLEDIS_DISABLE_FIX (0x1UL)

/* LSIPGINCRDIS @Bit 6 : Disable the STAR fix added for Host controller LS mode IPG increment from 2 LS bit times to 3 LS bit
                         times */

  #define USBHSCORE_GSTARFXDIS_LSIPGINCRDIS_Pos (6UL)
  #define USBHSCORE_GSTARFXDIS_LSIPGINCRDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_LSIPGINCRDIS_Pos) /*!< Bit mask of LSIPGINCRDIS
                                                                            field.*/
  #define USBHSCORE_GSTARFXDIS_LSIPGINCRDIS_Min (0x0UL)
  #define USBHSCORE_GSTARFXDIS_LSIPGINCRDIS_Max (0x1UL)
  #define USBHSCORE_GSTARFXDIS_LSIPGINCRDIS_ENABLE_FIX (0x0UL)
  #define USBHSCORE_GSTARFXDIS_LSIPGINCRDIS_DISABLE_FIX (0x1UL)

/* FSDISCIDLEDIS @Bit 7 : Disable the STAR fix added for Device controller to transition to IDLE state during FS device
                          disconnect */

  #define USBHSCORE_GSTARFXDIS_FSDISCIDLEDIS_Pos (7UL)
  #define USBHSCORE_GSTARFXDIS_FSDISCIDLEDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_FSDISCIDLEDIS_Pos) /*!< Bit mask of
                                                                            FSDISCIDLEDIS field.*/
  #define USBHSCORE_GSTARFXDIS_FSDISCIDLEDIS_Min (0x0UL)
  #define USBHSCORE_GSTARFXDIS_FSDISCIDLEDIS_Max (0x1UL)
  #define USBHSCORE_GSTARFXDIS_FSDISCIDLEDIS_ENABLE_FIX (0x0UL) /*!< Device controller transitions to IDLE state during FS
                                                                     device disconnect*/
  #define USBHSCORE_GSTARFXDIS_FSDISCIDLEDIS_DISABLE_FIX (0x1UL) /*!< Device controller does not transition to IDLE state during
                                                                      FS device disconnect*/

/* CONCURRENTRMTWKUPUSBRESUMEDIS @Bit 8 : Disable the STAR fix added for Device controller to not start Remote Wakeup signalling
                                          when USB resume has already started */

  #define USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEDIS_Pos (8UL)
  #define USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEDIS_Pos)
                                                                            /*!< Bit mask of CONCURRENTRMTWKUPUSBRESUMEDIS
                                                                            field.*/
  #define USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEDIS_Min (0x0UL) /*!< Min enumerator value of
                                                                            CONCURRENTRMTWKUPUSBRESUMEDIS field.*/
  #define USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEDIS_Max (0x1UL) /*!< Max enumerator value of
                                                                            CONCURRENTRMTWKUPUSBRESUMEDIS field.*/
  #define USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEDIS_ENABLE_FIX (0x0UL) /*!< Device controller does not start remote
                                                                            wakeup signalling when host resume has already
                                                                            started*/
  #define USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEDIS_DISABLE_FIX (0x1UL) /*!< Device controller is allowed to start
                                                                            remote wakeup signalling when host resume has
                                                                            already started*/

/* CONCURRENTRMTWKUPUSBRESUMEHIBDIS @Bit 9 : Disable the STAR fix added for Device controller to not hang when Remote Wakeup
                                             signalling clashes with Host resume */

  #define USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEHIBDIS_Pos (9UL) /*!< Position of CONCURRENTRMTWKUPUSBRESUMEHIBDIS
                                                                            field.*/
  #define USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEHIBDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEHIBDIS_Pos)
                                                                            /*!< Bit mask of CONCURRENTRMTWKUPUSBRESUMEHIBDIS
                                                                            field.*/
  #define USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEHIBDIS_Min (0x0UL) /*!< Min enumerator value of
                                                                            CONCURRENTRMTWKUPUSBRESUMEHIBDIS field.*/
  #define USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEHIBDIS_Max (0x1UL) /*!< Max enumerator value of
                                                                            CONCURRENTRMTWKUPUSBRESUMEHIBDIS field.*/
  #define USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEHIBDIS_ENABLE_FIX (0x0UL) /*!< Device controller does not hang when
                                                                            remote wakeup signalling clashes with host resume
                                                                            during Hibernation exit*/
  #define USBHSCORE_GSTARFXDIS_CONCURRENTRMTWKUPUSBRESUMEHIBDIS_DISABLE_FIX (0x1UL) /*!< Device controller hangs when remote
                                                                            wakeup signalling clashes with host resume during
                                                                            Hibernation exit*/

/* LSIPGCHKAFTERNAKSTALLFORINDIS @Bit 10 : Disable the STAR fix added for Host controller to wait for IPG duration to send next
                                           token after receiving NAK/STALL for previous IN token with FS/LS device */

  #define USBHSCORE_GSTARFXDIS_LSIPGCHKAFTERNAKSTALLFORINDIS_Pos (10UL)
  #define USBHSCORE_GSTARFXDIS_LSIPGCHKAFTERNAKSTALLFORINDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_LSIPGCHKAFTERNAKSTALLFORINDIS_Pos)
                                                                            /*!< Bit mask of LSIPGCHKAFTERNAKSTALLFORINDIS
                                                                            field.*/
  #define USBHSCORE_GSTARFXDIS_LSIPGCHKAFTERNAKSTALLFORINDIS_Min (0x0UL) /*!< Min enumerator value of
                                                                            LSIPGCHKAFTERNAKSTALLFORINDIS field.*/
  #define USBHSCORE_GSTARFXDIS_LSIPGCHKAFTERNAKSTALLFORINDIS_Max (0x1UL) /*!< Max enumerator value of
                                                                            LSIPGCHKAFTERNAKSTALLFORINDIS field.*/
  #define USBHSCORE_GSTARFXDIS_LSIPGCHKAFTERNAKSTALLFORINDIS_ENABLE_FIX (0x0UL) /*!< Host controller checks IPG after NAK/STALL
                                                                            for IN token*/
  #define USBHSCORE_GSTARFXDIS_LSIPGCHKAFTERNAKSTALLFORINDIS_DISABLE_FIX (0x1UL) /*!< Host controller does not check IPG after
                                                                            NAK/STALL for IN token*/

/* PHYIOPXCVRSELTXVLDCORRDIS @Bit 11 : Disable the STAR fix added for Host controller to increase the gap between
                                       utmi_xcvrselect switching and utmi_txvalid assertion in LS/FS mode */

  #define USBHSCORE_GSTARFXDIS_PHYIOPXCVRSELTXVLDCORRDIS_Pos (11UL)
  #define USBHSCORE_GSTARFXDIS_PHYIOPXCVRSELTXVLDCORRDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_PHYIOPXCVRSELTXVLDCORRDIS_Pos) /*!<
                                                                            Bit mask of PHYIOPXCVRSELTXVLDCORRDIS field.*/
  #define USBHSCORE_GSTARFXDIS_PHYIOPXCVRSELTXVLDCORRDIS_Min (0x0UL) /*!< Min enumerator value of PHYIOPXCVRSELTXVLDCORRDIS
                                                                          field.*/
  #define USBHSCORE_GSTARFXDIS_PHYIOPXCVRSELTXVLDCORRDIS_Max (0x1UL) /*!< Max enumerator value of PHYIOPXCVRSELTXVLDCORRDIS
                                                                          field.*/
  #define USBHSCORE_GSTARFXDIS_PHYIOPXCVRSELTXVLDCORRDIS_ENABLE_FIX (0x0UL) /*!< Host controller asserts utmi_txvalid at least 2
                                                                            utmi_clk cycles after utmi_xcvrselect switching*/
  #define USBHSCORE_GSTARFXDIS_PHYIOPXCVRSELTXVLDCORRDIS_DISABLE_FIX (0x1UL) /*!< Host controller can assert utmi_txvalid after
                                                                            1 utmi_clk cycle of utmi_xcvrselect switching*/

/* ULPIXCVRSELSWITCHCORRDIS @Bit 12 : Disable the STAR fix added for Host controller to increase the preamble transceiver select
                                      switch delay to accommodate time taken for ULPI function control write */

  #define USBHSCORE_GSTARFXDIS_ULPIXCVRSELSWITCHCORRDIS_Pos (12UL)
  #define USBHSCORE_GSTARFXDIS_ULPIXCVRSELSWITCHCORRDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_ULPIXCVRSELSWITCHCORRDIS_Pos) /*!<
                                                                            Bit mask of ULPIXCVRSELSWITCHCORRDIS field.*/
  #define USBHSCORE_GSTARFXDIS_ULPIXCVRSELSWITCHCORRDIS_Min (0x0UL) /*!< Min enumerator value of ULPIXCVRSELSWITCHCORRDIS
                                                                         field.*/
  #define USBHSCORE_GSTARFXDIS_ULPIXCVRSELSWITCHCORRDIS_Max (0x1UL) /*!< Max enumerator value of ULPIXCVRSELSWITCHCORRDIS
                                                                         field.*/
  #define USBHSCORE_GSTARFXDIS_ULPIXCVRSELSWITCHCORRDIS_ENABLE_FIX (0x0UL) /*!< Host controller waits for previous functional
                                                                            register update to complete before switching the
                                                                            transceiver select again or asserting txvalid*/
  #define USBHSCORE_GSTARFXDIS_ULPIXCVRSELSWITCHCORRDIS_DISABLE_FIX (0x1UL) /*!< Host controller does not wait for the previous
                                                                            functional register update to complete before
                                                                            switching the transceiver select again or asserting
                                                                            txvalid*/

/* XACTERRDATA0CTRLSTSINDIS @Bit 13 : Disable the STAR fix added for Host controller to report transaction error when DATA0 PID
                                      is received for CTRL STATUS IN transfer in DMA mode */

  #define USBHSCORE_GSTARFXDIS_XACTERRDATA0CTRLSTSINDIS_Pos (13UL)
  #define USBHSCORE_GSTARFXDIS_XACTERRDATA0CTRLSTSINDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_XACTERRDATA0CTRLSTSINDIS_Pos) /*!<
                                                                            Bit mask of XACTERRDATA0CTRLSTSINDIS field.*/
  #define USBHSCORE_GSTARFXDIS_XACTERRDATA0CTRLSTSINDIS_Min (0x0UL) /*!< Min enumerator value of XACTERRDATA0CTRLSTSINDIS
                                                                         field.*/
  #define USBHSCORE_GSTARFXDIS_XACTERRDATA0CTRLSTSINDIS_Max (0x1UL) /*!< Max enumerator value of XACTERRDATA0CTRLSTSINDIS
                                                                         field.*/
  #define USBHSCORE_GSTARFXDIS_XACTERRDATA0CTRLSTSINDIS_ENABLE_FIX (0x0UL) /*!< Host controller reports transaction error when
                                                                            DATA0 PID is received for CTRL STATUS IN transfer in
                                                                            DMA mode*/
  #define USBHSCORE_GSTARFXDIS_XACTERRDATA0CTRLSTSINDIS_DISABLE_FIX (0x1UL) /*!< Host controller retries the transfer when DATA0
                                                                            PID is received for CTRL STATUS IN transfer in DMA
                                                                            mode*/

/* HOSTUTMITXVLDCORRDIS @Bit 16 : Disable the correction to OpMode/XcvrSel/TermSel on UTMI Interface in Host mode. */
  #define USBHSCORE_GSTARFXDIS_HOSTUTMITXVLDCORRDIS_Pos (16UL)
  #define USBHSCORE_GSTARFXDIS_HOSTUTMITXVLDCORRDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_HOSTUTMITXVLDCORRDIS_Pos) /*!< Bit mask
                                                                            of HOSTUTMITXVLDCORRDIS field.*/
  #define USBHSCORE_GSTARFXDIS_HOSTUTMITXVLDCORRDIS_Min (0x0UL)
  #define USBHSCORE_GSTARFXDIS_HOSTUTMITXVLDCORRDIS_Max (0x1UL)
  #define USBHSCORE_GSTARFXDIS_HOSTUTMITXVLDCORRDIS_ENABLE_FIX (0x0UL) /*!< Opmode, XcvrSel, TermSel are changed by the Host
                                                                            Controller after TxValid goes LOW (1'b0)*/
  #define USBHSCORE_GSTARFXDIS_HOSTUTMITXVLDCORRDIS_DISABLE_FIX (0x1UL) /*!< Opmode, XcvrSel, TermSel are changed by the Host
                                                                            Controller without waiting for TxValid to go LOW
                                                                            (1'b0) during SOF transmission*/

/* OPMODEXCVRSELCHIRPENCORRDIS @Bit 17 : Disable the STAR fix added for correcting Opmode and XcvrSel on UTMI Interface when
                                         reset is detected in suspend state. */

  #define USBHSCORE_GSTARFXDIS_OPMODEXCVRSELCHIRPENCORRDIS_Pos (17UL)
  #define USBHSCORE_GSTARFXDIS_OPMODEXCVRSELCHIRPENCORRDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_OPMODEXCVRSELCHIRPENCORRDIS_Pos)
                                                                            /*!< Bit mask of OPMODEXCVRSELCHIRPENCORRDIS field.*/
  #define USBHSCORE_GSTARFXDIS_OPMODEXCVRSELCHIRPENCORRDIS_Min (0x0UL) /*!< Min enumerator value of OPMODEXCVRSELCHIRPENCORRDIS
                                                                            field.*/
  #define USBHSCORE_GSTARFXDIS_OPMODEXCVRSELCHIRPENCORRDIS_Max (0x1UL) /*!< Max enumerator value of OPMODEXCVRSELCHIRPENCORRDIS
                                                                            field.*/
  #define USBHSCORE_GSTARFXDIS_OPMODEXCVRSELCHIRPENCORRDIS_ENABLE_FIX (0x0UL) /*!< Valid Combination of Opmode and XcvrSel is
                                                                            driven when reset is detected in suspend state*/
  #define USBHSCORE_GSTARFXDIS_OPMODEXCVRSELCHIRPENCORRDIS_DISABLE_FIX (0x1UL) /*!< Invalid Combination of Opmode and XcvrSel is
                                                                            driven when reset is detected in suspend state*/

/* TXVALIDDEASSERTIONCORRDIS @Bit 18 : Disable the STAR fix added for correcting Txvalid deassertion on UTMI Interface when soft
                                       disconnect is done. */

  #define USBHSCORE_GSTARFXDIS_TXVALIDDEASSERTIONCORRDIS_Pos (18UL)
  #define USBHSCORE_GSTARFXDIS_TXVALIDDEASSERTIONCORRDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_TXVALIDDEASSERTIONCORRDIS_Pos) /*!<
                                                                            Bit mask of TXVALIDDEASSERTIONCORRDIS field.*/
  #define USBHSCORE_GSTARFXDIS_TXVALIDDEASSERTIONCORRDIS_Min (0x0UL) /*!< Min enumerator value of TXVALIDDEASSERTIONCORRDIS
                                                                          field.*/
  #define USBHSCORE_GSTARFXDIS_TXVALIDDEASSERTIONCORRDIS_Max (0x1UL) /*!< Max enumerator value of TXVALIDDEASSERTIONCORRDIS
                                                                          field.*/
  #define USBHSCORE_GSTARFXDIS_TXVALIDDEASSERTIONCORRDIS_ENABLE_FIX (0x0UL) /*!< Txvalid is deasserted during soft disconnect
                                                                            after receiving Txready from the PHY*/
  #define USBHSCORE_GSTARFXDIS_TXVALIDDEASSERTIONCORRDIS_DISABLE_FIX (0x1UL) /*!< Txvalid is deasserted during soft disconnect
                                                                            without waiting for Txready from the PHY*/

/* HOSTNOXFERAFTERPRTDISFIXDIS @Bit 19 : Disable the STAR fix added for correcting Host behavior when port is disabled. */
  #define USBHSCORE_GSTARFXDIS_HOSTNOXFERAFTERPRTDISFIXDIS_Pos (19UL)
  #define USBHSCORE_GSTARFXDIS_HOSTNOXFERAFTERPRTDISFIXDIS_Msk (0x1UL << USBHSCORE_GSTARFXDIS_HOSTNOXFERAFTERPRTDISFIXDIS_Pos)
                                                                            /*!< Bit mask of HOSTNOXFERAFTERPRTDISFIXDIS field.*/
  #define USBHSCORE_GSTARFXDIS_HOSTNOXFERAFTERPRTDISFIXDIS_Min (0x0UL) /*!< Min enumerator value of HOSTNOXFERAFTERPRTDISFIXDIS
                                                                            field.*/
  #define USBHSCORE_GSTARFXDIS_HOSTNOXFERAFTERPRTDISFIXDIS_Max (0x1UL) /*!< Max enumerator value of HOSTNOXFERAFTERPRTDISFIXDIS
                                                                            field.*/
  #define USBHSCORE_GSTARFXDIS_HOSTNOXFERAFTERPRTDISFIXDIS_ENABLE_FIX (0x0UL) /*!< Txvalid is not asserted when port is
                                                                            disabled*/
  #define USBHSCORE_GSTARFXDIS_HOSTNOXFERAFTERPRTDISFIXDIS_DISABLE_FIX (0x1UL) /*!< Txvalid can be asserted when port is
                                                                            disabled*/


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                         VDETAO0V8                                         ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ==================================================== Struct VDETAO0V8 ===================================================== */
/**
  * @brief VDETAO0V8 peripheral
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_VDETAO0V8_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                         VDETAO1V8                                         ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ==================================================== Struct VDETAO1V8 ===================================================== */
/**
  * @brief VDETAO1V8 peripheral
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_VDETAO1V8_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          VDETIO                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct VDETIO ====================================================== */
/**
  * @brief VDETIO peripheral
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_VDETIO_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                      VDMADESCRIPTOR                                      ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ================================================== Struct VDMADESCRIPTOR ================================================== */
/**
  * @brief Job descriptor for vector-based DMA.
  */
  typedef struct {
    __IOM uint32_t PTR;
    __IOM uint32_t CONFIG;                           /*!< (@ 0x00000004) Job configuration. Configuration of attributes and
                                                                         buffer length.*/
  } NRF_VDMADESCRIPTOR_Type;

/* VDMADESCRIPTOR_PTR: Pointer to data buffer. */
  #define VDMADESCRIPTOR_PTR_ResetValue (0x00000000UL)

/* PTR @Bits 0..31 : Pointer to data buffer. */
  #define VDMADESCRIPTOR_PTR_PTR_Pos (0UL)
  #define VDMADESCRIPTOR_PTR_PTR_Msk (0xFFFFFFFFUL << VDMADESCRIPTOR_PTR_PTR_Pos)


/* VDMADESCRIPTOR_CONFIG: Job configuration. Configuration of attributes and buffer length. */
  #define VDMADESCRIPTOR_CONFIG_ResetValue (0x00000000UL)

/* CNT @Bits 0..23 : Maximum number of bytes in data buffer. */
  #define VDMADESCRIPTOR_CONFIG_CNT_Pos (0UL)
  #define VDMADESCRIPTOR_CONFIG_CNT_Msk (0xFFFFFFUL << VDMADESCRIPTOR_CONFIG_CNT_Pos)

/* ATTRIBUTE @Bits 24..29 : Job attribute. */
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Pos (24UL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Msk (0x3FUL << VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Pos)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Min (0xBUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Max (0xEUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_AarHash (0x0BUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_AarPrand (0x0CUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_AarIrk (0x0DUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_CcmAlen (0x0BUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_CcmMlen (0x0CUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_CcmAdata (0x0DUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_CcmMdata (0x0EUL)
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_EcbData (0x0BUL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            VPR                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* =================================================== Struct VPR_DEBUGIF ==================================================== */
/**
  * @brief DEBUGIF [VPR_DEBUGIF] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[4];
  __IOM uint32_t  DATA0;
  __IOM uint32_t  DATA1;
  __IM  uint32_t  RESERVED1[10];
  __IOM uint32_t  DMCONTROL;
  __IM  uint32_t  DMSTATUS;
  __IOM uint32_t  HARTINFO;
  __IOM uint32_t  HALTSUM1;
  __IOM uint32_t  HAWINDOWSEL;
  __IOM uint32_t  HAWINDOW;
  __IOM uint32_t  ABSTRACTCS;
  __OM  uint32_t  ABSTRACTCMD;
  __IOM uint32_t  ABSTRACTAUTO;
  __IOM uint32_t  CONFSTRPTR[4];
  __IOM uint32_t  NEXTDM;
  __IM  uint32_t  RESERVED2[2];
  __IOM uint32_t  PROGBUF[16];
  __IOM uint32_t  AUTHDATA;
  __IM  uint32_t  RESERVED3[3];
  __IOM uint32_t  HALTSUM2;
  __IOM uint32_t  HALTSUM3;
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  SBADDRESS3;
  __IOM uint32_t  SBCS;
  __IOM uint32_t  SBADDRESS0;
  __IOM uint32_t  SBADDRESS1;
  __IOM uint32_t  SBADDRESS2;
  __IOM uint32_t  SBDATA0;
  __IOM uint32_t  SBDATA1;
  __IOM uint32_t  SBDATA2;
  __IOM uint32_t  SBDATA3;
  __IOM uint32_t  HALTSUM0;
} NRF_VPR_DEBUGIF_Type;

/* VPR_DEBUGIF_DATA0: Abstract Data 0. Read/write data for argument 0 */
  #define VPR_DEBUGIF_DATA0_ResetValue (0x00000000UL)

/* DATA0 @Bits 0..31 : Abstract Data 0 */
  #define VPR_DEBUGIF_DATA0_DATA0_Pos (0UL)
  #define VPR_DEBUGIF_DATA0_DATA0_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_DATA0_DATA0_Pos)


/* VPR_DEBUGIF_DATA1: Abstract Data 1. Read/write data for argument 1 */
  #define VPR_DEBUGIF_DATA1_ResetValue (0x00000000UL)

/* DATA1 @Bits 0..31 : Abstract Data 1 */
  #define VPR_DEBUGIF_DATA1_DATA1_Pos (0UL)
  #define VPR_DEBUGIF_DATA1_DATA1_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_DATA1_DATA1_Pos)


/* VPR_DEBUGIF_DMCONTROL: Debug Module Control */
  #define VPR_DEBUGIF_DMCONTROL_ResetValue (0x00000000UL)

/* DMACTIVE @Bit 0 : Reset signal for the debug module. */
  #define VPR_DEBUGIF_DMCONTROL_DMACTIVE_Pos (0UL)
  #define VPR_DEBUGIF_DMCONTROL_DMACTIVE_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_DMACTIVE_Pos)
  #define VPR_DEBUGIF_DMCONTROL_DMACTIVE_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_DMACTIVE_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_DMACTIVE_Disabled (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_DMACTIVE_Enabled (0x1UL)

/* NDMRESET @Bit 1 : Reset signal output from the debug module to the system. */
  #define VPR_DEBUGIF_DMCONTROL_NDMRESET_Pos (1UL)
  #define VPR_DEBUGIF_DMCONTROL_NDMRESET_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_NDMRESET_Pos)
  #define VPR_DEBUGIF_DMCONTROL_NDMRESET_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_NDMRESET_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_NDMRESET_Inactive (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_NDMRESET_Active (0x1UL)

/* CLRRESETHALTREQ @Bit 2 : Clear the halt on reset request. */
  #define VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_Pos (2UL)
  #define VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_Pos) /*!< Bit mask of
                                                                            CLRRESETHALTREQ field.*/
  #define VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_NoOperation (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_CLRRESETHALTREQ_Clear (0x1UL)

/* SETRESETHALTREQ @Bit 3 : Set the halt on reset request. */
  #define VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_Pos (3UL)
  #define VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_Pos) /*!< Bit mask of
                                                                            SETRESETHALTREQ field.*/
  #define VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_NoOperation (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_SETRESETHALTREQ_Clear (0x1UL)

/* HARTSELHI @Bits 6..15 : The high 10 bits of hartsel. */
  #define VPR_DEBUGIF_DMCONTROL_HARTSELHI_Pos (6UL)
  #define VPR_DEBUGIF_DMCONTROL_HARTSELHI_Msk (0x3FFUL << VPR_DEBUGIF_DMCONTROL_HARTSELHI_Pos) /*!< Bit mask of HARTSELHI
                                                                            field.*/

/* HARTSELLO @Bits 16..25 : The low 10 bits of hartsel. */
  #define VPR_DEBUGIF_DMCONTROL_HARTSELLO_Pos (16UL)
  #define VPR_DEBUGIF_DMCONTROL_HARTSELLO_Msk (0x3FFUL << VPR_DEBUGIF_DMCONTROL_HARTSELLO_Pos) /*!< Bit mask of HARTSELLO
                                                                            field.*/

/* HASEL @Bit 26 : Definition of currently selected harts. */
  #define VPR_DEBUGIF_DMCONTROL_HASEL_Pos (26UL)
  #define VPR_DEBUGIF_DMCONTROL_HASEL_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_HASEL_Pos)
  #define VPR_DEBUGIF_DMCONTROL_HASEL_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_HASEL_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_HASEL_Single (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_HASEL_Multiple (0x1UL)

/* ACKHAVERESET @Bit 28 : Clear the havereset. */
  #define VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_Pos (28UL)
  #define VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_Pos) /*!< Bit mask of ACKHAVERESET
                                                                            field.*/
  #define VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_NoOperation (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_ACKHAVERESET_Clear (0x1UL)

/* HARTRESET @Bit 29 : Reset harts. */
  #define VPR_DEBUGIF_DMCONTROL_HARTRESET_Pos (29UL)
  #define VPR_DEBUGIF_DMCONTROL_HARTRESET_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_HARTRESET_Pos)
  #define VPR_DEBUGIF_DMCONTROL_HARTRESET_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_HARTRESET_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_HARTRESET_Deasserted (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_HARTRESET_Asserted (0x1UL)

/* RESUMEREQ @Bit 30 : Resume currently selected harts. */
  #define VPR_DEBUGIF_DMCONTROL_RESUMEREQ_Pos (30UL)
  #define VPR_DEBUGIF_DMCONTROL_RESUMEREQ_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_RESUMEREQ_Pos)
  #define VPR_DEBUGIF_DMCONTROL_RESUMEREQ_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_RESUMEREQ_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_RESUMEREQ_NoOperation (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_RESUMEREQ_Resumed (0x1UL)

/* HALTREQ @Bit 31 : Halt currently selected harts. */
  #define VPR_DEBUGIF_DMCONTROL_HALTREQ_Pos (31UL)
  #define VPR_DEBUGIF_DMCONTROL_HALTREQ_Msk (0x1UL << VPR_DEBUGIF_DMCONTROL_HALTREQ_Pos)
  #define VPR_DEBUGIF_DMCONTROL_HALTREQ_Min (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_HALTREQ_Max (0x1UL)
  #define VPR_DEBUGIF_DMCONTROL_HALTREQ_Clear (0x0UL)
  #define VPR_DEBUGIF_DMCONTROL_HALTREQ_Halt (0x1UL)


/* VPR_DEBUGIF_DMSTATUS: Debug Module Status */
  #define VPR_DEBUGIF_DMSTATUS_ResetValue (0x00400082UL)

/* VERSION @Bits 0..3 : Version of the debug module. */
  #define VPR_DEBUGIF_DMSTATUS_VERSION_Pos (0UL)
  #define VPR_DEBUGIF_DMSTATUS_VERSION_Msk (0xFUL << VPR_DEBUGIF_DMSTATUS_VERSION_Pos)
  #define VPR_DEBUGIF_DMSTATUS_VERSION_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_VERSION_Max (0xFUL)
  #define VPR_DEBUGIF_DMSTATUS_VERSION_NotPresent (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_VERSION_V011 (0x1UL)  /*!< There is a Debug Module and it conforms to version 0.11 of this
                                                          specifcation.*/
  #define VPR_DEBUGIF_DMSTATUS_VERSION_V013 (0x2UL)  /*!< There is a Debug Module and it conforms to version 0.13 of this
                                                          specifcation.*/
  #define VPR_DEBUGIF_DMSTATUS_VERSION_NonConform (0xFUL) /*!< There is a Debug Module but it does not conform to any available
                                                               version of the spec.*/

/* CONFSTRPTRVALID @Bit 4 : Configuration string. */
  #define VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_Pos (4UL)
  #define VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_Pos) /*!< Bit mask of
                                                                            CONFSTRPTRVALID field.*/
  #define VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_NotRelevant (0x0UL) /*!< The confstrptr0..confstrptr3 holds information which is
                                                                        not relevant to the configuration string.*/
  #define VPR_DEBUGIF_DMSTATUS_CONFSTRPTRVALID_Address (0x1UL) /*!< The confstrptr0..confstrptr3 holds the address of the
                                                                    configuration string.*/

/* HASRESETHALTREQ @Bit 5 : Halt-on-reset support status. */
  #define VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_Pos (5UL)
  #define VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_Pos) /*!< Bit mask of
                                                                            HASRESETHALTREQ field.*/
  #define VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_HASRESETHALTREQ_Yes (0x1UL)

/* AUTHBUSY @Bit 6 : Authentication busy status. */
  #define VPR_DEBUGIF_DMSTATUS_AUTHBUSY_Pos (6UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHBUSY_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_AUTHBUSY_Pos)
  #define VPR_DEBUGIF_DMSTATUS_AUTHBUSY_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHBUSY_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHBUSY_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHBUSY_Yes (0x1UL)

/* AUTHENTICATED @Bit 7 : Authentication status. */
  #define VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_Pos (7UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_Pos) /*!< Bit mask of
                                                                            AUTHENTICATED field.*/
  #define VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_AUTHENTICATED_Yes (0x1UL)

/* ANYHALTED @Bit 8 : Any currently selected harts halted status. */
  #define VPR_DEBUGIF_DMSTATUS_ANYHALTED_Pos (8UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHALTED_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ANYHALTED_Pos)
  #define VPR_DEBUGIF_DMSTATUS_ANYHALTED_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHALTED_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHALTED_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHALTED_Yes (0x1UL)

/* ALLHALTED @Bit 9 : All currently selected harts halted status. */
  #define VPR_DEBUGIF_DMSTATUS_ALLHALTED_Pos (9UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHALTED_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ALLHALTED_Pos)
  #define VPR_DEBUGIF_DMSTATUS_ALLHALTED_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHALTED_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHALTED_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHALTED_Yes (0x1UL)

/* ANYRUNNING @Bit 10 : Any currently selected harts running status. */
  #define VPR_DEBUGIF_DMSTATUS_ANYRUNNING_Pos (10UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRUNNING_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ANYRUNNING_Pos)
  #define VPR_DEBUGIF_DMSTATUS_ANYRUNNING_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRUNNING_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRUNNING_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRUNNING_Yes (0x1UL)

/* ALLRUNNING @Bit 11 : All currently selected harts running status. */
  #define VPR_DEBUGIF_DMSTATUS_ALLRUNNING_Pos (11UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRUNNING_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ALLRUNNING_Pos)
  #define VPR_DEBUGIF_DMSTATUS_ALLRUNNING_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRUNNING_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRUNNING_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRUNNING_Yes (0x1UL)

/* ANYUNAVAIL @Bit 12 : Any currently selected harts unavailable status. */
  #define VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_Pos (12UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_Pos)
  #define VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYUNAVAIL_Yes (0x1UL)

/* ALLUNAVAIL @Bit 13 : All currently selected harts unavailable status. */
  #define VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_Pos (13UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_Pos)
  #define VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLUNAVAIL_Yes (0x1UL)

/* ANYNONEXISTENT @Bit 14 : Any currently selected harts nonexistent status. */
  #define VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_Pos (14UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_Pos) /*!< Bit mask of
                                                                            ANYNONEXISTENT field.*/
  #define VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYNONEXISTENT_Yes (0x1UL)

/* ALLNONEXISTENT @Bit 15 : All currently selected harts nonexistent status. */
  #define VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_Pos (15UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_Pos) /*!< Bit mask of
                                                                            ALLNONEXISTENT field.*/
  #define VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLNONEXISTENT_Yes (0x1UL)

/* ANYRESUMEACK @Bit 16 : Any currently selected harts acknowledged last resume request. */
  #define VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_Pos (16UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_Pos) /*!< Bit mask of ANYRESUMEACK
                                                                            field.*/
  #define VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_No (0x0UL) /*!< None of the currently selected harts acknowledged last resume
                                                            request.*/
  #define VPR_DEBUGIF_DMSTATUS_ANYRESUMEACK_Yes (0x1UL) /*!< Any of the currently selected harts acknowledged last resume
                                                             request.*/

/* ALLRESUMEACK @Bit 17 : All currently selected harts acknowledged last resume */
  #define VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_Pos (17UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_Pos) /*!< Bit mask of ALLRESUMEACK
                                                                            field.*/
  #define VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_No (0x0UL) /*!< Not all of the currently selected harts acknowledged last resume
                                                            request.*/
  #define VPR_DEBUGIF_DMSTATUS_ALLRESUMEACK_Yes (0x1UL) /*!< All of the currently selected harts acknowledged last resume
                                                             request.*/

/* ANYHAVERESET @Bit 18 : Any currently selected harts have been reset and reset is not acknowledged. */
  #define VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_Pos (18UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_Pos) /*!< Bit mask of ANYHAVERESET
                                                                            field.*/
  #define VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_No (0x0UL) /*!< None of the currently selected harts have been reset and reset is
                                                            not acknowledget.*/
  #define VPR_DEBUGIF_DMSTATUS_ANYHAVERESET_Yes (0x1UL) /*!< Any of the currently selected harts have been reset and reset is
                                                             not acknowledge.*/

/* ALLHAVERESET @Bit 19 : All currently selected harts have been reset and reset is not acknowledge */
  #define VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_Pos (19UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_Pos) /*!< Bit mask of ALLHAVERESET
                                                                            field.*/
  #define VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_No (0x0UL) /*!< Not all of the currently selected harts have been reset and reset is
                                                            not acknowledge.*/
  #define VPR_DEBUGIF_DMSTATUS_ALLHAVERESET_Yes (0x1UL) /*!< All of the currently selected harts have been reset and reset is
                                                             not acknowledge.*/

/* IMPEBREAK @Bit 22 : Implicit ebreak instruction at the non-existent word immediately after the Program Buffer. */
  #define VPR_DEBUGIF_DMSTATUS_IMPEBREAK_Pos (22UL)
  #define VPR_DEBUGIF_DMSTATUS_IMPEBREAK_Msk (0x1UL << VPR_DEBUGIF_DMSTATUS_IMPEBREAK_Pos)
  #define VPR_DEBUGIF_DMSTATUS_IMPEBREAK_Min (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_IMPEBREAK_Max (0x1UL)
  #define VPR_DEBUGIF_DMSTATUS_IMPEBREAK_No (0x0UL)
  #define VPR_DEBUGIF_DMSTATUS_IMPEBREAK_Yes (0x1UL)


/* VPR_DEBUGIF_HARTINFO: Hart Information */
  #define VPR_DEBUGIF_HARTINFO_ResetValue (0x00000000UL)

/* DATAADDR @Bits 0..11 : Data Address */
  #define VPR_DEBUGIF_HARTINFO_DATAADDR_Pos (0UL)
  #define VPR_DEBUGIF_HARTINFO_DATAADDR_Msk (0xFFFUL << VPR_DEBUGIF_HARTINFO_DATAADDR_Pos)
  #define VPR_DEBUGIF_HARTINFO_DATAADDR_Min (0x800UL)
  #define VPR_DEBUGIF_HARTINFO_DATAADDR_Max (0x7FFUL)

/* DATASIZE @Bits 12..15 : Data Size */
  #define VPR_DEBUGIF_HARTINFO_DATASIZE_Pos (12UL)
  #define VPR_DEBUGIF_HARTINFO_DATASIZE_Msk (0xFUL << VPR_DEBUGIF_HARTINFO_DATASIZE_Pos)
  #define VPR_DEBUGIF_HARTINFO_DATASIZE_Min (0x0UL)
  #define VPR_DEBUGIF_HARTINFO_DATASIZE_Max (0xCUL)

/* DATAACCESS @Bit 16 : Data Access */
  #define VPR_DEBUGIF_HARTINFO_DATAACCESS_Pos (16UL)
  #define VPR_DEBUGIF_HARTINFO_DATAACCESS_Msk (0x1UL << VPR_DEBUGIF_HARTINFO_DATAACCESS_Pos)
  #define VPR_DEBUGIF_HARTINFO_DATAACCESS_Min (0x0UL)
  #define VPR_DEBUGIF_HARTINFO_DATAACCESS_Max (0x1UL)
  #define VPR_DEBUGIF_HARTINFO_DATAACCESS_No (0x0UL) /*!< The data registers are shadowed in the hart by CSRs. Each CSR is DXLEN
                                                          bits in size, and corresponds to a single argument.*/
  #define VPR_DEBUGIF_HARTINFO_DATAACCESS_Yes (0x1UL) /*!< The data registers are shadowed in the hart's memory map. Each
                                                           register takes up 4 bytes in the memory map.*/

/* NSCRATCH @Bits 20..23 : Number of dscratch registers */
  #define VPR_DEBUGIF_HARTINFO_NSCRATCH_Pos (20UL)
  #define VPR_DEBUGIF_HARTINFO_NSCRATCH_Msk (0xFUL << VPR_DEBUGIF_HARTINFO_NSCRATCH_Pos)


/* VPR_DEBUGIF_HALTSUM1: Halt Summary 1 */
  #define VPR_DEBUGIF_HALTSUM1_ResetValue (0x00000000UL)

/* HALTSUM1 @Bits 0..31 : Halt Summary 1 */
  #define VPR_DEBUGIF_HALTSUM1_HALTSUM1_Pos (0UL)
  #define VPR_DEBUGIF_HALTSUM1_HALTSUM1_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_HALTSUM1_HALTSUM1_Pos) /*!< Bit mask of HALTSUM1
                                                                            field.*/


/* VPR_DEBUGIF_HAWINDOWSEL: Hart Array Window Select */
  #define VPR_DEBUGIF_HAWINDOWSEL_ResetValue (0x00000000UL)

/* HAWINDOWSEL @Bits 0..14 : The high bits of this field may be tied to 0, depending on how large the array mask register is.
                             E.g. on a system with 48 harts only bit 0 of this field may actually be writable. */

  #define VPR_DEBUGIF_HAWINDOWSEL_HAWINDOWSEL_Pos (0UL)
  #define VPR_DEBUGIF_HAWINDOWSEL_HAWINDOWSEL_Msk (0x7FFFUL << VPR_DEBUGIF_HAWINDOWSEL_HAWINDOWSEL_Pos) /*!< Bit mask of
                                                                            HAWINDOWSEL field.*/


/* VPR_DEBUGIF_HAWINDOW: Hart Array Window */
  #define VPR_DEBUGIF_HAWINDOW_ResetValue (0x00000000UL)

/* MASKDATA @Bits 0..31 : Mask data. */
  #define VPR_DEBUGIF_HAWINDOW_MASKDATA_Pos (0UL)
  #define VPR_DEBUGIF_HAWINDOW_MASKDATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_HAWINDOW_MASKDATA_Pos) /*!< Bit mask of MASKDATA
                                                                            field.*/


/* VPR_DEBUGIF_ABSTRACTCS: Abstract Control and Status */
  #define VPR_DEBUGIF_ABSTRACTCS_ResetValue (0x01000002UL)

/* DATACOUNT @Bits 0..3 : Number of data registers that are implemented as part of the abstract command interface. Valid sizes
                          are 1..12. */

  #define VPR_DEBUGIF_ABSTRACTCS_DATACOUNT_Pos (0UL)
  #define VPR_DEBUGIF_ABSTRACTCS_DATACOUNT_Msk (0xFUL << VPR_DEBUGIF_ABSTRACTCS_DATACOUNT_Pos) /*!< Bit mask of DATACOUNT
                                                                            field.*/

/* CMDERR @Bits 8..10 : Command error when the abstract command fails. */
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Pos (8UL)
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Msk (0x7UL << VPR_DEBUGIF_ABSTRACTCS_CMDERR_Pos)
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Min (0x0UL)
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Max (0x7UL)
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_NoError (0x0UL)
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Busy (0x1UL) /*!< An abstract command was executing while command, abstractcs, or
                                                          abstractauto was written, or when one of the data or progbuf registers
                                                          was read or written. This status is only written if cmderr contains 0*/
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_NotSupported (0x2UL) /*!< The requested command is notsupported, regardless of whether
                                                                  the hart is running or not.*/
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Exception (0x3UL) /*!< An exception occurred while executing the command (e.g. while
                                                               executing theProgram Buffer).*/
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_HaltResume (0x4UL) /*!< The abstract command couldn't execute because the hart wasn't in
                                                                the required state (running/halted). or unavailable.*/
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Bus (0x5UL)  /*!< The abstract command failed due to abus error (e.g. alignment, access
                                                          size, or timeout).*/
  #define VPR_DEBUGIF_ABSTRACTCS_CMDERR_Other (0x7UL)

/* BUSY @Bit 12 : Abstract command execution status. */
  #define VPR_DEBUGIF_ABSTRACTCS_BUSY_Pos (12UL)
  #define VPR_DEBUGIF_ABSTRACTCS_BUSY_Msk (0x1UL << VPR_DEBUGIF_ABSTRACTCS_BUSY_Pos)
  #define VPR_DEBUGIF_ABSTRACTCS_BUSY_Min (0x0UL)
  #define VPR_DEBUGIF_ABSTRACTCS_BUSY_Max (0x1UL)
  #define VPR_DEBUGIF_ABSTRACTCS_BUSY_NotBusy (0x0UL)
  #define VPR_DEBUGIF_ABSTRACTCS_BUSY_Busy (0x1UL)   /*!< An abstract command is currently being executed. This bit is set as
                                                          soon as command is written, and is not cleared until that command has
                                                          completed.*/

/* PROGBUFSIZE @Bits 24..28 : Size of the Program Buffer, in 32-bit words. Valid sizes are 0 - 1. */
  #define VPR_DEBUGIF_ABSTRACTCS_PROGBUFSIZE_Pos (24UL)
  #define VPR_DEBUGIF_ABSTRACTCS_PROGBUFSIZE_Msk (0x1FUL << VPR_DEBUGIF_ABSTRACTCS_PROGBUFSIZE_Pos) /*!< Bit mask of PROGBUFSIZE
                                                                            field.*/


/* VPR_DEBUGIF_ABSTRACTCMD: Abstract command */
  #define VPR_DEBUGIF_ABSTRACTCMD_ResetValue (0x00000000UL)

/* CONTROL @Bits 0..23 : This Field is interpreted in a command specific manner, described for each abstract command. */
  #define VPR_DEBUGIF_ABSTRACTCMD_CONTROL_Pos (0UL)
  #define VPR_DEBUGIF_ABSTRACTCMD_CONTROL_Msk (0xFFFFFFUL << VPR_DEBUGIF_ABSTRACTCMD_CONTROL_Pos) /*!< Bit mask of CONTROL
                                                                            field.*/

/* CMDTYPE @Bits 24..31 : The type determines the overall functionality of this abstract command. */
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_Pos (24UL)
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_Msk (0xFFUL << VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_Pos)
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_Min (0x0UL)
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_Max (0x2UL)
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_REGACCESS (0x00UL)
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_QUICKACCESS (0x01UL)
  #define VPR_DEBUGIF_ABSTRACTCMD_CMDTYPE_MEMACCESS (0x02UL)


/* VPR_DEBUGIF_ABSTRACTAUTO: Abstract Command Autoexec */
  #define VPR_DEBUGIF_ABSTRACTAUTO_ResetValue (0x00000000UL)

/* AUTOEXECDATA @Bits 0..11 : When a bit in this field is 1, read or write accesses to the corresponding data word cause the
                              command in command to be executed again. */

  #define VPR_DEBUGIF_ABSTRACTAUTO_AUTOEXECDATA_Pos (0UL)
  #define VPR_DEBUGIF_ABSTRACTAUTO_AUTOEXECDATA_Msk (0xFFFUL << VPR_DEBUGIF_ABSTRACTAUTO_AUTOEXECDATA_Pos) /*!< Bit mask of
                                                                            AUTOEXECDATA field.*/

/* AUTOEXECPROGBUF @Bits 16..31 : When a bit in this field is 1, read or write accesses to the corresponding progbuf word cause
                                  the command in command to be executed again. */

  #define VPR_DEBUGIF_ABSTRACTAUTO_AUTOEXECPROGBUF_Pos (16UL)
  #define VPR_DEBUGIF_ABSTRACTAUTO_AUTOEXECPROGBUF_Msk (0xFFFFUL << VPR_DEBUGIF_ABSTRACTAUTO_AUTOEXECPROGBUF_Pos) /*!< Bit mask
                                                                            of AUTOEXECPROGBUF field.*/


/* VPR_DEBUGIF_CONFSTRPTR: Configuration String Pointer [n] */
  #define VPR_DEBUGIF_CONFSTRPTR_MaxCount (4UL)
  #define VPR_DEBUGIF_CONFSTRPTR_MaxIndex (3UL)
  #define VPR_DEBUGIF_CONFSTRPTR_MinIndex (0UL)
  #define VPR_DEBUGIF_CONFSTRPTR_ResetValue (0x00000000UL)

/* ADDR @Bits 0..31 : Address */
  #define VPR_DEBUGIF_CONFSTRPTR_ADDR_Pos (0UL)
  #define VPR_DEBUGIF_CONFSTRPTR_ADDR_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_CONFSTRPTR_ADDR_Pos)


/* VPR_DEBUGIF_NEXTDM: Next Debug Module */
  #define VPR_DEBUGIF_NEXTDM_ResetValue (0x00000000UL)

/* ADDR @Bits 0..31 : Address */
  #define VPR_DEBUGIF_NEXTDM_ADDR_Pos (0UL)
  #define VPR_DEBUGIF_NEXTDM_ADDR_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_NEXTDM_ADDR_Pos)


/* VPR_DEBUGIF_PROGBUF: Program Buffer [n] */
  #define VPR_DEBUGIF_PROGBUF_MaxCount (16UL)
  #define VPR_DEBUGIF_PROGBUF_MaxIndex (15UL)
  #define VPR_DEBUGIF_PROGBUF_MinIndex (0UL)
  #define VPR_DEBUGIF_PROGBUF_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data */
  #define VPR_DEBUGIF_PROGBUF_DATA_Pos (0UL)
  #define VPR_DEBUGIF_PROGBUF_DATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_PROGBUF_DATA_Pos)


/* VPR_DEBUGIF_AUTHDATA: Authentication Data */
  #define VPR_DEBUGIF_AUTHDATA_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Data */
  #define VPR_DEBUGIF_AUTHDATA_DATA_Pos (0UL)
  #define VPR_DEBUGIF_AUTHDATA_DATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_AUTHDATA_DATA_Pos)


/* VPR_DEBUGIF_HALTSUM2: Halt Summary 2 */
  #define VPR_DEBUGIF_HALTSUM2_ResetValue (0x00000000UL)

/* HALTSUM2 @Bits 0..31 : Halt Summary 2 */
  #define VPR_DEBUGIF_HALTSUM2_HALTSUM2_Pos (0UL)
  #define VPR_DEBUGIF_HALTSUM2_HALTSUM2_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_HALTSUM2_HALTSUM2_Pos) /*!< Bit mask of HALTSUM2
                                                                            field.*/


/* VPR_DEBUGIF_HALTSUM3: Halt Summary 3 */
  #define VPR_DEBUGIF_HALTSUM3_ResetValue (0x00000000UL)

/* HALTSUM3 @Bits 0..31 : Halt Summary 3 */
  #define VPR_DEBUGIF_HALTSUM3_HALTSUM3_Pos (0UL)
  #define VPR_DEBUGIF_HALTSUM3_HALTSUM3_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_HALTSUM3_HALTSUM3_Pos) /*!< Bit mask of HALTSUM3
                                                                            field.*/


/* VPR_DEBUGIF_SBADDRESS3: System Bus Addres 127:96 */
  #define VPR_DEBUGIF_SBADDRESS3_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Accesses bits 127:96 of the physical address in sbaddress (if the system address bus is that wide). */
  #define VPR_DEBUGIF_SBADDRESS3_ADDRESS_Pos (0UL)
  #define VPR_DEBUGIF_SBADDRESS3_ADDRESS_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBADDRESS3_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/


/* VPR_DEBUGIF_SBCS: System Bus Access Control and Status */
  #define VPR_DEBUGIF_SBCS_ResetValue (0x20000000UL)

/* SBACCESS8 @Bit 0 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBACCESS8_Pos (0UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS8_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBACCESS8_Pos)
  #define VPR_DEBUGIF_SBCS_SBACCESS8_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS8_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS8_sbaccess8 (0x1UL)

/* SBACCESS16 @Bit 1 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBACCESS16_Pos (1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS16_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBACCESS16_Pos)
  #define VPR_DEBUGIF_SBCS_SBACCESS16_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS16_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS16_sbaccess16 (0x1UL)

/* SBACCESS32 @Bit 2 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBACCESS32_Pos (2UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS32_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBACCESS32_Pos)
  #define VPR_DEBUGIF_SBCS_SBACCESS32_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS32_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS32_sbaccess32 (0x1UL)

/* SBACCESS64 @Bit 3 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBACCESS64_Pos (3UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS64_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBACCESS64_Pos)
  #define VPR_DEBUGIF_SBCS_SBACCESS64_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS64_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS64_sbaccess64 (0x1UL)

/* SBACCESS128 @Bit 4 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBACCESS128_Pos (4UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS128_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBACCESS128_Pos)
  #define VPR_DEBUGIF_SBCS_SBACCESS128_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS128_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS128_sbaccess128 (0x1UL)

/* SBASIZE @Bits 5..11 : Width of system bus addresses in bits. (0 indicates there is no bus access support.) */
  #define VPR_DEBUGIF_SBCS_SBASIZE_Pos (5UL)
  #define VPR_DEBUGIF_SBCS_SBASIZE_Msk (0x7FUL << VPR_DEBUGIF_SBCS_SBASIZE_Pos)

/* SBERROR @Bits 12..14 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBERROR_Pos (12UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Msk (0x7UL << VPR_DEBUGIF_SBCS_SBERROR_Pos)
  #define VPR_DEBUGIF_SBCS_SBERROR_Min (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Max (0x7UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Normal (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Timeout (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Address (0x2UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Alignment (0x3UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Size (0x4UL)
  #define VPR_DEBUGIF_SBCS_SBERROR_Other (0x7UL)

/* SBREADONDATA @Bit 15 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBREADONDATA_Pos (15UL)
  #define VPR_DEBUGIF_SBCS_SBREADONDATA_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBREADONDATA_Pos)
  #define VPR_DEBUGIF_SBCS_SBREADONDATA_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBREADONDATA_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBREADONDATA_sbreadondata (0x1UL) /*!< Every read from sbdata0 automatically triggers a system bus
                                                                  read at the (possibly autoincremented) address.*/

/* SBAUTOINCREMENT @Bit 16 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBAUTOINCREMENT_Pos (16UL)
  #define VPR_DEBUGIF_SBCS_SBAUTOINCREMENT_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBAUTOINCREMENT_Pos) /*!< Bit mask of SBAUTOINCREMENT
                                                                            field.*/
  #define VPR_DEBUGIF_SBCS_SBAUTOINCREMENT_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBAUTOINCREMENT_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBAUTOINCREMENT_sbautoincrement (0x1UL) /*!< sbaddress is incremented by the access size (in bytes)
                                                                        selected in sbaccess after every system bus access.*/

/* SBACCESS @Bits 17..19 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBACCESS_Pos (17UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_Msk (0x7UL << VPR_DEBUGIF_SBCS_SBACCESS_Pos)
  #define VPR_DEBUGIF_SBCS_SBACCESS_Min (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_Max (0x4UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_size8 (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_size16 (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_size32 (0x2UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_size64 (0x3UL)
  #define VPR_DEBUGIF_SBCS_SBACCESS_size128 (0x4UL)

/* SBREADONADDR @Bit 20 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBREADONADDR_Pos (20UL)
  #define VPR_DEBUGIF_SBCS_SBREADONADDR_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBREADONADDR_Pos)
  #define VPR_DEBUGIF_SBCS_SBREADONADDR_Min (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBREADONADDR_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBREADONADDR_sbreadonaddr (0x1UL) /*!< Every write to sbaddress0 automatically triggers a system bus
                                                                  read at the new address.*/

/* SBBUSY @Bit 21 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBBUSY_Pos (21UL)
  #define VPR_DEBUGIF_SBCS_SBBUSY_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBBUSY_Pos)
  #define VPR_DEBUGIF_SBCS_SBBUSY_Min (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBBUSY_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBBUSY_notbusy (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBBUSY_busy (0x1UL)

/* SBBUSYERROR @Bit 22 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBBUSYERROR_Pos (22UL)
  #define VPR_DEBUGIF_SBCS_SBBUSYERROR_Msk (0x1UL << VPR_DEBUGIF_SBCS_SBBUSYERROR_Pos)
  #define VPR_DEBUGIF_SBCS_SBBUSYERROR_Min (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBBUSYERROR_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBBUSYERROR_noerror (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBBUSYERROR_error (0x1UL)

/* SBVERSION @Bits 29..31 : (unspecified) */
  #define VPR_DEBUGIF_SBCS_SBVERSION_Pos (29UL)
  #define VPR_DEBUGIF_SBCS_SBVERSION_Msk (0x7UL << VPR_DEBUGIF_SBCS_SBVERSION_Pos)
  #define VPR_DEBUGIF_SBCS_SBVERSION_Min (0x0UL)
  #define VPR_DEBUGIF_SBCS_SBVERSION_Max (0x1UL)
  #define VPR_DEBUGIF_SBCS_SBVERSION_version0 (0x0UL) /*!< The System Bus interface conforms to mainline drafts of thia RISC-V
                                                           External Debug Support spec older than 1 January, 2018.*/
  #define VPR_DEBUGIF_SBCS_SBVERSION_version1 (0x1UL) /*!< The System Bus interface conforms to RISC-V External Debug Support
                                                           version 0.14.0-DRAFT. Other values are reserved for future versions.*/


/* VPR_DEBUGIF_SBADDRESS0: System Bus Addres 31:0 */
  #define VPR_DEBUGIF_SBADDRESS0_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Accesses bits 31:0 of the physical address in sbaddress. */
  #define VPR_DEBUGIF_SBADDRESS0_ADDRESS_Pos (0UL)
  #define VPR_DEBUGIF_SBADDRESS0_ADDRESS_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBADDRESS0_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/


/* VPR_DEBUGIF_SBADDRESS1: System Bus Addres 63:32 */
  #define VPR_DEBUGIF_SBADDRESS1_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Accesses bits 63:32 of the physical address in sbaddress (if the system address bus is that wide). */
  #define VPR_DEBUGIF_SBADDRESS1_ADDRESS_Pos (0UL)
  #define VPR_DEBUGIF_SBADDRESS1_ADDRESS_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBADDRESS1_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/


/* VPR_DEBUGIF_SBADDRESS2: System Bus Addres 95:64 */
  #define VPR_DEBUGIF_SBADDRESS2_ResetValue (0x00000000UL)

/* ADDRESS @Bits 0..31 : Accesses bits 95:64 of the physical address in sbaddress (if the system address bus is that wide). */
  #define VPR_DEBUGIF_SBADDRESS2_ADDRESS_Pos (0UL)
  #define VPR_DEBUGIF_SBADDRESS2_ADDRESS_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBADDRESS2_ADDRESS_Pos) /*!< Bit mask of ADDRESS
                                                                            field.*/


/* VPR_DEBUGIF_SBDATA0: System Bus Data 31:0 */
  #define VPR_DEBUGIF_SBDATA0_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Accesses bits 31:0 of sbdata */
  #define VPR_DEBUGIF_SBDATA0_DATA_Pos (0UL)
  #define VPR_DEBUGIF_SBDATA0_DATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBDATA0_DATA_Pos)


/* VPR_DEBUGIF_SBDATA1: System Bus Data 63:32 */
  #define VPR_DEBUGIF_SBDATA1_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Accesses bits 63:32 of sbdata (if the system bus is that wide). */
  #define VPR_DEBUGIF_SBDATA1_DATA_Pos (0UL)
  #define VPR_DEBUGIF_SBDATA1_DATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBDATA1_DATA_Pos)


/* VPR_DEBUGIF_SBDATA2: System Bus Data 95:64 */
  #define VPR_DEBUGIF_SBDATA2_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Accesses bits 95:64 of sbdata (if the system bus is that wide). */
  #define VPR_DEBUGIF_SBDATA2_DATA_Pos (0UL)
  #define VPR_DEBUGIF_SBDATA2_DATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBDATA2_DATA_Pos)


/* VPR_DEBUGIF_SBDATA3: System Bus Data 127:96 */
  #define VPR_DEBUGIF_SBDATA3_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Accesses bits 127:96 of sbdata (if the system bus is that wide). */
  #define VPR_DEBUGIF_SBDATA3_DATA_Pos (0UL)
  #define VPR_DEBUGIF_SBDATA3_DATA_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_SBDATA3_DATA_Pos)


/* VPR_DEBUGIF_HALTSUM0: Halt summary 0 */
  #define VPR_DEBUGIF_HALTSUM0_ResetValue (0x00000000UL)

/* HALTSUM0 @Bits 0..31 : Halt summary 0 */
  #define VPR_DEBUGIF_HALTSUM0_HALTSUM0_Pos (0UL)
  #define VPR_DEBUGIF_HALTSUM0_HALTSUM0_Msk (0xFFFFFFFFUL << VPR_DEBUGIF_HALTSUM0_HALTSUM0_Pos) /*!< Bit mask of HALTSUM0
                                                                            field.*/


/* ======================================================= Struct VPR ======================================================== */
/**
  * @brief VPR peripheral registers
  */
  typedef struct {
    __OM uint32_t TASKS_TRIGGER[32];
    __IOM uint32_t SUBSCRIBE_TRIGGER[32];
    __IOM uint32_t EVENTS_TRIGGERED[32];
    __IOM uint32_t PUBLISH_TRIGGERED[32];
    __IM uint32_t RESERVED[64];
    __IOM uint32_t INTEN;
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t INTPEND;
    __IM uint32_t RESERVED1[60];
    __IOM NRF_VPR_DEBUGIF_Type DEBUGIF;
    __IM uint32_t RESERVED2[191];
    __IOM uint32_t CPURUN;
    __IOM uint32_t VPRSTATUS;
    __IOM uint32_t INITPC;
  } NRF_VPR_Type;

/* VPR_TASKS_TRIGGER: VPR task [n] register */
  #define VPR_TASKS_TRIGGER_MaxCount (32UL)
  #define VPR_TASKS_TRIGGER_MaxIndex (31UL)
  #define VPR_TASKS_TRIGGER_MinIndex (0UL)
  #define VPR_TASKS_TRIGGER_ResetValue (0x00000000UL)

/* TASKS_TRIGGER @Bit 0 : VPR task [n] register */
  #define VPR_TASKS_TRIGGER_TASKS_TRIGGER_Pos (0UL)
  #define VPR_TASKS_TRIGGER_TASKS_TRIGGER_Msk (0x1UL << VPR_TASKS_TRIGGER_TASKS_TRIGGER_Pos) /*!< Bit mask of TASKS_TRIGGER
                                                                            field.*/
  #define VPR_TASKS_TRIGGER_TASKS_TRIGGER_Min (0x1UL)
  #define VPR_TASKS_TRIGGER_TASKS_TRIGGER_Max (0x1UL)
  #define VPR_TASKS_TRIGGER_TASKS_TRIGGER_Trigger (0x1UL)


/* VPR_SUBSCRIBE_TRIGGER: Subscribe configuration for task TASKS_TRIGGER[n] */
  #define VPR_SUBSCRIBE_TRIGGER_MaxCount (32UL)
  #define VPR_SUBSCRIBE_TRIGGER_MaxIndex (31UL)
  #define VPR_SUBSCRIBE_TRIGGER_MinIndex (0UL)
  #define VPR_SUBSCRIBE_TRIGGER_ResetValue (0x00000000UL)

/* EN @Bit 31 : Subscription enable bit */
  #define VPR_SUBSCRIBE_TRIGGER_EN_Pos (31UL)
  #define VPR_SUBSCRIBE_TRIGGER_EN_Msk (0x1UL << VPR_SUBSCRIBE_TRIGGER_EN_Pos)
  #define VPR_SUBSCRIBE_TRIGGER_EN_Min (0x0UL)
  #define VPR_SUBSCRIBE_TRIGGER_EN_Max (0x1UL)
  #define VPR_SUBSCRIBE_TRIGGER_EN_Disabled (0x0UL)
  #define VPR_SUBSCRIBE_TRIGGER_EN_Enabled (0x1UL)


/* VPR_EVENTS_TRIGGERED: VPR event [n] register */
  #define VPR_EVENTS_TRIGGERED_MaxCount (32UL)
  #define VPR_EVENTS_TRIGGERED_MaxIndex (31UL)
  #define VPR_EVENTS_TRIGGERED_MinIndex (0UL)
  #define VPR_EVENTS_TRIGGERED_ResetValue (0x00000000UL)

/* EVENTS_TRIGGERED @Bit 0 : VPR event [n] register */
  #define VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos (0UL)
  #define VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Msk (0x1UL << VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos) /*!< Bit mask of
                                                                            EVENTS_TRIGGERED field.*/
  #define VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Min (0x0UL)
  #define VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Max (0x1UL)
  #define VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_NotGenerated (0x0UL)
  #define VPR_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Generated (0x1UL)


/* VPR_PUBLISH_TRIGGERED: Publish configuration for event EVENTS_TRIGGERED[n] */
  #define VPR_PUBLISH_TRIGGERED_MaxCount (32UL)
  #define VPR_PUBLISH_TRIGGERED_MaxIndex (31UL)
  #define VPR_PUBLISH_TRIGGERED_MinIndex (0UL)
  #define VPR_PUBLISH_TRIGGERED_ResetValue (0x00000000UL)

/* EN @Bit 31 : Publication enable bit */
  #define VPR_PUBLISH_TRIGGERED_EN_Pos (31UL)
  #define VPR_PUBLISH_TRIGGERED_EN_Msk (0x1UL << VPR_PUBLISH_TRIGGERED_EN_Pos)
  #define VPR_PUBLISH_TRIGGERED_EN_Min (0x0UL)
  #define VPR_PUBLISH_TRIGGERED_EN_Max (0x1UL)
  #define VPR_PUBLISH_TRIGGERED_EN_Disabled (0x0UL)
  #define VPR_PUBLISH_TRIGGERED_EN_Enabled (0x1UL)


/* VPR_INTEN: Enable or disable interrupt */
  #define VPR_INTEN_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Enable or disable interrupt for event TRIGGERED[0] */
  #define VPR_INTEN_TRIGGERED0_Pos (0UL)
  #define VPR_INTEN_TRIGGERED0_Msk (0x1UL << VPR_INTEN_TRIGGERED0_Pos)
  #define VPR_INTEN_TRIGGERED0_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED0_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED0_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Enable or disable interrupt for event TRIGGERED[1] */
  #define VPR_INTEN_TRIGGERED1_Pos (1UL)
  #define VPR_INTEN_TRIGGERED1_Msk (0x1UL << VPR_INTEN_TRIGGERED1_Pos)
  #define VPR_INTEN_TRIGGERED1_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED1_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED1_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Enable or disable interrupt for event TRIGGERED[2] */
  #define VPR_INTEN_TRIGGERED2_Pos (2UL)
  #define VPR_INTEN_TRIGGERED2_Msk (0x1UL << VPR_INTEN_TRIGGERED2_Pos)
  #define VPR_INTEN_TRIGGERED2_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED2_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED2_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Enable or disable interrupt for event TRIGGERED[3] */
  #define VPR_INTEN_TRIGGERED3_Pos (3UL)
  #define VPR_INTEN_TRIGGERED3_Msk (0x1UL << VPR_INTEN_TRIGGERED3_Pos)
  #define VPR_INTEN_TRIGGERED3_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED3_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED3_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED3_Enabled (0x1UL)

/* TRIGGERED4 @Bit 4 : Enable or disable interrupt for event TRIGGERED[4] */
  #define VPR_INTEN_TRIGGERED4_Pos (4UL)
  #define VPR_INTEN_TRIGGERED4_Msk (0x1UL << VPR_INTEN_TRIGGERED4_Pos)
  #define VPR_INTEN_TRIGGERED4_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED4_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED4_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED4_Enabled (0x1UL)

/* TRIGGERED5 @Bit 5 : Enable or disable interrupt for event TRIGGERED[5] */
  #define VPR_INTEN_TRIGGERED5_Pos (5UL)
  #define VPR_INTEN_TRIGGERED5_Msk (0x1UL << VPR_INTEN_TRIGGERED5_Pos)
  #define VPR_INTEN_TRIGGERED5_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED5_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED5_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED5_Enabled (0x1UL)

/* TRIGGERED6 @Bit 6 : Enable or disable interrupt for event TRIGGERED[6] */
  #define VPR_INTEN_TRIGGERED6_Pos (6UL)
  #define VPR_INTEN_TRIGGERED6_Msk (0x1UL << VPR_INTEN_TRIGGERED6_Pos)
  #define VPR_INTEN_TRIGGERED6_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED6_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED6_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED6_Enabled (0x1UL)

/* TRIGGERED7 @Bit 7 : Enable or disable interrupt for event TRIGGERED[7] */
  #define VPR_INTEN_TRIGGERED7_Pos (7UL)
  #define VPR_INTEN_TRIGGERED7_Msk (0x1UL << VPR_INTEN_TRIGGERED7_Pos)
  #define VPR_INTEN_TRIGGERED7_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED7_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED7_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED7_Enabled (0x1UL)

/* TRIGGERED8 @Bit 8 : Enable or disable interrupt for event TRIGGERED[8] */
  #define VPR_INTEN_TRIGGERED8_Pos (8UL)
  #define VPR_INTEN_TRIGGERED8_Msk (0x1UL << VPR_INTEN_TRIGGERED8_Pos)
  #define VPR_INTEN_TRIGGERED8_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED8_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED8_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED8_Enabled (0x1UL)

/* TRIGGERED9 @Bit 9 : Enable or disable interrupt for event TRIGGERED[9] */
  #define VPR_INTEN_TRIGGERED9_Pos (9UL)
  #define VPR_INTEN_TRIGGERED9_Msk (0x1UL << VPR_INTEN_TRIGGERED9_Pos)
  #define VPR_INTEN_TRIGGERED9_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED9_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED9_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED9_Enabled (0x1UL)

/* TRIGGERED10 @Bit 10 : Enable or disable interrupt for event TRIGGERED[10] */
  #define VPR_INTEN_TRIGGERED10_Pos (10UL)
  #define VPR_INTEN_TRIGGERED10_Msk (0x1UL << VPR_INTEN_TRIGGERED10_Pos)
  #define VPR_INTEN_TRIGGERED10_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED10_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED10_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED10_Enabled (0x1UL)

/* TRIGGERED11 @Bit 11 : Enable or disable interrupt for event TRIGGERED[11] */
  #define VPR_INTEN_TRIGGERED11_Pos (11UL)
  #define VPR_INTEN_TRIGGERED11_Msk (0x1UL << VPR_INTEN_TRIGGERED11_Pos)
  #define VPR_INTEN_TRIGGERED11_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED11_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED11_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED11_Enabled (0x1UL)

/* TRIGGERED12 @Bit 12 : Enable or disable interrupt for event TRIGGERED[12] */
  #define VPR_INTEN_TRIGGERED12_Pos (12UL)
  #define VPR_INTEN_TRIGGERED12_Msk (0x1UL << VPR_INTEN_TRIGGERED12_Pos)
  #define VPR_INTEN_TRIGGERED12_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED12_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED12_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED12_Enabled (0x1UL)

/* TRIGGERED13 @Bit 13 : Enable or disable interrupt for event TRIGGERED[13] */
  #define VPR_INTEN_TRIGGERED13_Pos (13UL)
  #define VPR_INTEN_TRIGGERED13_Msk (0x1UL << VPR_INTEN_TRIGGERED13_Pos)
  #define VPR_INTEN_TRIGGERED13_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED13_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED13_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED13_Enabled (0x1UL)

/* TRIGGERED14 @Bit 14 : Enable or disable interrupt for event TRIGGERED[14] */
  #define VPR_INTEN_TRIGGERED14_Pos (14UL)
  #define VPR_INTEN_TRIGGERED14_Msk (0x1UL << VPR_INTEN_TRIGGERED14_Pos)
  #define VPR_INTEN_TRIGGERED14_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED14_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED14_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED14_Enabled (0x1UL)

/* TRIGGERED15 @Bit 15 : Enable or disable interrupt for event TRIGGERED[15] */
  #define VPR_INTEN_TRIGGERED15_Pos (15UL)
  #define VPR_INTEN_TRIGGERED15_Msk (0x1UL << VPR_INTEN_TRIGGERED15_Pos)
  #define VPR_INTEN_TRIGGERED15_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED15_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED15_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED15_Enabled (0x1UL)

/* TRIGGERED16 @Bit 16 : Enable or disable interrupt for event TRIGGERED[16] */
  #define VPR_INTEN_TRIGGERED16_Pos (16UL)
  #define VPR_INTEN_TRIGGERED16_Msk (0x1UL << VPR_INTEN_TRIGGERED16_Pos)
  #define VPR_INTEN_TRIGGERED16_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED16_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED16_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED16_Enabled (0x1UL)

/* TRIGGERED17 @Bit 17 : Enable or disable interrupt for event TRIGGERED[17] */
  #define VPR_INTEN_TRIGGERED17_Pos (17UL)
  #define VPR_INTEN_TRIGGERED17_Msk (0x1UL << VPR_INTEN_TRIGGERED17_Pos)
  #define VPR_INTEN_TRIGGERED17_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED17_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED17_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED17_Enabled (0x1UL)

/* TRIGGERED18 @Bit 18 : Enable or disable interrupt for event TRIGGERED[18] */
  #define VPR_INTEN_TRIGGERED18_Pos (18UL)
  #define VPR_INTEN_TRIGGERED18_Msk (0x1UL << VPR_INTEN_TRIGGERED18_Pos)
  #define VPR_INTEN_TRIGGERED18_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED18_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED18_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED18_Enabled (0x1UL)

/* TRIGGERED19 @Bit 19 : Enable or disable interrupt for event TRIGGERED[19] */
  #define VPR_INTEN_TRIGGERED19_Pos (19UL)
  #define VPR_INTEN_TRIGGERED19_Msk (0x1UL << VPR_INTEN_TRIGGERED19_Pos)
  #define VPR_INTEN_TRIGGERED19_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED19_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED19_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED19_Enabled (0x1UL)

/* TRIGGERED20 @Bit 20 : Enable or disable interrupt for event TRIGGERED[20] */
  #define VPR_INTEN_TRIGGERED20_Pos (20UL)
  #define VPR_INTEN_TRIGGERED20_Msk (0x1UL << VPR_INTEN_TRIGGERED20_Pos)
  #define VPR_INTEN_TRIGGERED20_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED20_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED20_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED20_Enabled (0x1UL)

/* TRIGGERED21 @Bit 21 : Enable or disable interrupt for event TRIGGERED[21] */
  #define VPR_INTEN_TRIGGERED21_Pos (21UL)
  #define VPR_INTEN_TRIGGERED21_Msk (0x1UL << VPR_INTEN_TRIGGERED21_Pos)
  #define VPR_INTEN_TRIGGERED21_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED21_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED21_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED21_Enabled (0x1UL)

/* TRIGGERED22 @Bit 22 : Enable or disable interrupt for event TRIGGERED[22] */
  #define VPR_INTEN_TRIGGERED22_Pos (22UL)
  #define VPR_INTEN_TRIGGERED22_Msk (0x1UL << VPR_INTEN_TRIGGERED22_Pos)
  #define VPR_INTEN_TRIGGERED22_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED22_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED22_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED22_Enabled (0x1UL)

/* TRIGGERED23 @Bit 23 : Enable or disable interrupt for event TRIGGERED[23] */
  #define VPR_INTEN_TRIGGERED23_Pos (23UL)
  #define VPR_INTEN_TRIGGERED23_Msk (0x1UL << VPR_INTEN_TRIGGERED23_Pos)
  #define VPR_INTEN_TRIGGERED23_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED23_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED23_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED23_Enabled (0x1UL)

/* TRIGGERED24 @Bit 24 : Enable or disable interrupt for event TRIGGERED[24] */
  #define VPR_INTEN_TRIGGERED24_Pos (24UL)
  #define VPR_INTEN_TRIGGERED24_Msk (0x1UL << VPR_INTEN_TRIGGERED24_Pos)
  #define VPR_INTEN_TRIGGERED24_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED24_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED24_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED24_Enabled (0x1UL)

/* TRIGGERED25 @Bit 25 : Enable or disable interrupt for event TRIGGERED[25] */
  #define VPR_INTEN_TRIGGERED25_Pos (25UL)
  #define VPR_INTEN_TRIGGERED25_Msk (0x1UL << VPR_INTEN_TRIGGERED25_Pos)
  #define VPR_INTEN_TRIGGERED25_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED25_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED25_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED25_Enabled (0x1UL)

/* TRIGGERED26 @Bit 26 : Enable or disable interrupt for event TRIGGERED[26] */
  #define VPR_INTEN_TRIGGERED26_Pos (26UL)
  #define VPR_INTEN_TRIGGERED26_Msk (0x1UL << VPR_INTEN_TRIGGERED26_Pos)
  #define VPR_INTEN_TRIGGERED26_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED26_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED26_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED26_Enabled (0x1UL)

/* TRIGGERED27 @Bit 27 : Enable or disable interrupt for event TRIGGERED[27] */
  #define VPR_INTEN_TRIGGERED27_Pos (27UL)
  #define VPR_INTEN_TRIGGERED27_Msk (0x1UL << VPR_INTEN_TRIGGERED27_Pos)
  #define VPR_INTEN_TRIGGERED27_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED27_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED27_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED27_Enabled (0x1UL)

/* TRIGGERED28 @Bit 28 : Enable or disable interrupt for event TRIGGERED[28] */
  #define VPR_INTEN_TRIGGERED28_Pos (28UL)
  #define VPR_INTEN_TRIGGERED28_Msk (0x1UL << VPR_INTEN_TRIGGERED28_Pos)
  #define VPR_INTEN_TRIGGERED28_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED28_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED28_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED28_Enabled (0x1UL)

/* TRIGGERED29 @Bit 29 : Enable or disable interrupt for event TRIGGERED[29] */
  #define VPR_INTEN_TRIGGERED29_Pos (29UL)
  #define VPR_INTEN_TRIGGERED29_Msk (0x1UL << VPR_INTEN_TRIGGERED29_Pos)
  #define VPR_INTEN_TRIGGERED29_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED29_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED29_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED29_Enabled (0x1UL)

/* TRIGGERED30 @Bit 30 : Enable or disable interrupt for event TRIGGERED[30] */
  #define VPR_INTEN_TRIGGERED30_Pos (30UL)
  #define VPR_INTEN_TRIGGERED30_Msk (0x1UL << VPR_INTEN_TRIGGERED30_Pos)
  #define VPR_INTEN_TRIGGERED30_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED30_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED30_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED30_Enabled (0x1UL)

/* TRIGGERED31 @Bit 31 : Enable or disable interrupt for event TRIGGERED[31] */
  #define VPR_INTEN_TRIGGERED31_Pos (31UL)
  #define VPR_INTEN_TRIGGERED31_Msk (0x1UL << VPR_INTEN_TRIGGERED31_Pos)
  #define VPR_INTEN_TRIGGERED31_Min (0x0UL)
  #define VPR_INTEN_TRIGGERED31_Max (0x1UL)
  #define VPR_INTEN_TRIGGERED31_Disabled (0x0UL)
  #define VPR_INTEN_TRIGGERED31_Enabled (0x1UL)


/* VPR_INTENSET: Enable interrupt */
  #define VPR_INTENSET_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to enable interrupt for event TRIGGERED[0] */
  #define VPR_INTENSET_TRIGGERED0_Pos (0UL)
  #define VPR_INTENSET_TRIGGERED0_Msk (0x1UL << VPR_INTENSET_TRIGGERED0_Pos)
  #define VPR_INTENSET_TRIGGERED0_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED0_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED0_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED0_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to enable interrupt for event TRIGGERED[1] */
  #define VPR_INTENSET_TRIGGERED1_Pos (1UL)
  #define VPR_INTENSET_TRIGGERED1_Msk (0x1UL << VPR_INTENSET_TRIGGERED1_Pos)
  #define VPR_INTENSET_TRIGGERED1_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED1_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED1_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED1_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to enable interrupt for event TRIGGERED[2] */
  #define VPR_INTENSET_TRIGGERED2_Pos (2UL)
  #define VPR_INTENSET_TRIGGERED2_Msk (0x1UL << VPR_INTENSET_TRIGGERED2_Pos)
  #define VPR_INTENSET_TRIGGERED2_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED2_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED2_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED2_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to enable interrupt for event TRIGGERED[3] */
  #define VPR_INTENSET_TRIGGERED3_Pos (3UL)
  #define VPR_INTENSET_TRIGGERED3_Msk (0x1UL << VPR_INTENSET_TRIGGERED3_Pos)
  #define VPR_INTENSET_TRIGGERED3_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED3_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED3_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED3_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED3_Enabled (0x1UL)

/* TRIGGERED4 @Bit 4 : Write '1' to enable interrupt for event TRIGGERED[4] */
  #define VPR_INTENSET_TRIGGERED4_Pos (4UL)
  #define VPR_INTENSET_TRIGGERED4_Msk (0x1UL << VPR_INTENSET_TRIGGERED4_Pos)
  #define VPR_INTENSET_TRIGGERED4_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED4_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED4_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED4_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED4_Enabled (0x1UL)

/* TRIGGERED5 @Bit 5 : Write '1' to enable interrupt for event TRIGGERED[5] */
  #define VPR_INTENSET_TRIGGERED5_Pos (5UL)
  #define VPR_INTENSET_TRIGGERED5_Msk (0x1UL << VPR_INTENSET_TRIGGERED5_Pos)
  #define VPR_INTENSET_TRIGGERED5_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED5_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED5_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED5_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED5_Enabled (0x1UL)

/* TRIGGERED6 @Bit 6 : Write '1' to enable interrupt for event TRIGGERED[6] */
  #define VPR_INTENSET_TRIGGERED6_Pos (6UL)
  #define VPR_INTENSET_TRIGGERED6_Msk (0x1UL << VPR_INTENSET_TRIGGERED6_Pos)
  #define VPR_INTENSET_TRIGGERED6_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED6_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED6_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED6_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED6_Enabled (0x1UL)

/* TRIGGERED7 @Bit 7 : Write '1' to enable interrupt for event TRIGGERED[7] */
  #define VPR_INTENSET_TRIGGERED7_Pos (7UL)
  #define VPR_INTENSET_TRIGGERED7_Msk (0x1UL << VPR_INTENSET_TRIGGERED7_Pos)
  #define VPR_INTENSET_TRIGGERED7_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED7_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED7_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED7_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED7_Enabled (0x1UL)

/* TRIGGERED8 @Bit 8 : Write '1' to enable interrupt for event TRIGGERED[8] */
  #define VPR_INTENSET_TRIGGERED8_Pos (8UL)
  #define VPR_INTENSET_TRIGGERED8_Msk (0x1UL << VPR_INTENSET_TRIGGERED8_Pos)
  #define VPR_INTENSET_TRIGGERED8_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED8_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED8_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED8_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED8_Enabled (0x1UL)

/* TRIGGERED9 @Bit 9 : Write '1' to enable interrupt for event TRIGGERED[9] */
  #define VPR_INTENSET_TRIGGERED9_Pos (9UL)
  #define VPR_INTENSET_TRIGGERED9_Msk (0x1UL << VPR_INTENSET_TRIGGERED9_Pos)
  #define VPR_INTENSET_TRIGGERED9_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED9_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED9_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED9_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED9_Enabled (0x1UL)

/* TRIGGERED10 @Bit 10 : Write '1' to enable interrupt for event TRIGGERED[10] */
  #define VPR_INTENSET_TRIGGERED10_Pos (10UL)
  #define VPR_INTENSET_TRIGGERED10_Msk (0x1UL << VPR_INTENSET_TRIGGERED10_Pos)
  #define VPR_INTENSET_TRIGGERED10_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED10_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED10_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED10_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED10_Enabled (0x1UL)

/* TRIGGERED11 @Bit 11 : Write '1' to enable interrupt for event TRIGGERED[11] */
  #define VPR_INTENSET_TRIGGERED11_Pos (11UL)
  #define VPR_INTENSET_TRIGGERED11_Msk (0x1UL << VPR_INTENSET_TRIGGERED11_Pos)
  #define VPR_INTENSET_TRIGGERED11_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED11_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED11_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED11_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED11_Enabled (0x1UL)

/* TRIGGERED12 @Bit 12 : Write '1' to enable interrupt for event TRIGGERED[12] */
  #define VPR_INTENSET_TRIGGERED12_Pos (12UL)
  #define VPR_INTENSET_TRIGGERED12_Msk (0x1UL << VPR_INTENSET_TRIGGERED12_Pos)
  #define VPR_INTENSET_TRIGGERED12_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED12_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED12_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED12_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED12_Enabled (0x1UL)

/* TRIGGERED13 @Bit 13 : Write '1' to enable interrupt for event TRIGGERED[13] */
  #define VPR_INTENSET_TRIGGERED13_Pos (13UL)
  #define VPR_INTENSET_TRIGGERED13_Msk (0x1UL << VPR_INTENSET_TRIGGERED13_Pos)
  #define VPR_INTENSET_TRIGGERED13_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED13_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED13_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED13_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED13_Enabled (0x1UL)

/* TRIGGERED14 @Bit 14 : Write '1' to enable interrupt for event TRIGGERED[14] */
  #define VPR_INTENSET_TRIGGERED14_Pos (14UL)
  #define VPR_INTENSET_TRIGGERED14_Msk (0x1UL << VPR_INTENSET_TRIGGERED14_Pos)
  #define VPR_INTENSET_TRIGGERED14_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED14_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED14_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED14_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED14_Enabled (0x1UL)

/* TRIGGERED15 @Bit 15 : Write '1' to enable interrupt for event TRIGGERED[15] */
  #define VPR_INTENSET_TRIGGERED15_Pos (15UL)
  #define VPR_INTENSET_TRIGGERED15_Msk (0x1UL << VPR_INTENSET_TRIGGERED15_Pos)
  #define VPR_INTENSET_TRIGGERED15_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED15_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED15_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED15_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED15_Enabled (0x1UL)

/* TRIGGERED16 @Bit 16 : Write '1' to enable interrupt for event TRIGGERED[16] */
  #define VPR_INTENSET_TRIGGERED16_Pos (16UL)
  #define VPR_INTENSET_TRIGGERED16_Msk (0x1UL << VPR_INTENSET_TRIGGERED16_Pos)
  #define VPR_INTENSET_TRIGGERED16_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED16_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED16_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED16_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED16_Enabled (0x1UL)

/* TRIGGERED17 @Bit 17 : Write '1' to enable interrupt for event TRIGGERED[17] */
  #define VPR_INTENSET_TRIGGERED17_Pos (17UL)
  #define VPR_INTENSET_TRIGGERED17_Msk (0x1UL << VPR_INTENSET_TRIGGERED17_Pos)
  #define VPR_INTENSET_TRIGGERED17_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED17_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED17_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED17_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED17_Enabled (0x1UL)

/* TRIGGERED18 @Bit 18 : Write '1' to enable interrupt for event TRIGGERED[18] */
  #define VPR_INTENSET_TRIGGERED18_Pos (18UL)
  #define VPR_INTENSET_TRIGGERED18_Msk (0x1UL << VPR_INTENSET_TRIGGERED18_Pos)
  #define VPR_INTENSET_TRIGGERED18_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED18_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED18_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED18_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED18_Enabled (0x1UL)

/* TRIGGERED19 @Bit 19 : Write '1' to enable interrupt for event TRIGGERED[19] */
  #define VPR_INTENSET_TRIGGERED19_Pos (19UL)
  #define VPR_INTENSET_TRIGGERED19_Msk (0x1UL << VPR_INTENSET_TRIGGERED19_Pos)
  #define VPR_INTENSET_TRIGGERED19_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED19_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED19_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED19_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED19_Enabled (0x1UL)

/* TRIGGERED20 @Bit 20 : Write '1' to enable interrupt for event TRIGGERED[20] */
  #define VPR_INTENSET_TRIGGERED20_Pos (20UL)
  #define VPR_INTENSET_TRIGGERED20_Msk (0x1UL << VPR_INTENSET_TRIGGERED20_Pos)
  #define VPR_INTENSET_TRIGGERED20_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED20_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED20_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED20_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED20_Enabled (0x1UL)

/* TRIGGERED21 @Bit 21 : Write '1' to enable interrupt for event TRIGGERED[21] */
  #define VPR_INTENSET_TRIGGERED21_Pos (21UL)
  #define VPR_INTENSET_TRIGGERED21_Msk (0x1UL << VPR_INTENSET_TRIGGERED21_Pos)
  #define VPR_INTENSET_TRIGGERED21_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED21_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED21_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED21_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED21_Enabled (0x1UL)

/* TRIGGERED22 @Bit 22 : Write '1' to enable interrupt for event TRIGGERED[22] */
  #define VPR_INTENSET_TRIGGERED22_Pos (22UL)
  #define VPR_INTENSET_TRIGGERED22_Msk (0x1UL << VPR_INTENSET_TRIGGERED22_Pos)
  #define VPR_INTENSET_TRIGGERED22_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED22_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED22_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED22_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED22_Enabled (0x1UL)

/* TRIGGERED23 @Bit 23 : Write '1' to enable interrupt for event TRIGGERED[23] */
  #define VPR_INTENSET_TRIGGERED23_Pos (23UL)
  #define VPR_INTENSET_TRIGGERED23_Msk (0x1UL << VPR_INTENSET_TRIGGERED23_Pos)
  #define VPR_INTENSET_TRIGGERED23_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED23_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED23_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED23_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED23_Enabled (0x1UL)

/* TRIGGERED24 @Bit 24 : Write '1' to enable interrupt for event TRIGGERED[24] */
  #define VPR_INTENSET_TRIGGERED24_Pos (24UL)
  #define VPR_INTENSET_TRIGGERED24_Msk (0x1UL << VPR_INTENSET_TRIGGERED24_Pos)
  #define VPR_INTENSET_TRIGGERED24_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED24_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED24_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED24_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED24_Enabled (0x1UL)

/* TRIGGERED25 @Bit 25 : Write '1' to enable interrupt for event TRIGGERED[25] */
  #define VPR_INTENSET_TRIGGERED25_Pos (25UL)
  #define VPR_INTENSET_TRIGGERED25_Msk (0x1UL << VPR_INTENSET_TRIGGERED25_Pos)
  #define VPR_INTENSET_TRIGGERED25_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED25_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED25_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED25_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED25_Enabled (0x1UL)

/* TRIGGERED26 @Bit 26 : Write '1' to enable interrupt for event TRIGGERED[26] */
  #define VPR_INTENSET_TRIGGERED26_Pos (26UL)
  #define VPR_INTENSET_TRIGGERED26_Msk (0x1UL << VPR_INTENSET_TRIGGERED26_Pos)
  #define VPR_INTENSET_TRIGGERED26_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED26_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED26_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED26_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED26_Enabled (0x1UL)

/* TRIGGERED27 @Bit 27 : Write '1' to enable interrupt for event TRIGGERED[27] */
  #define VPR_INTENSET_TRIGGERED27_Pos (27UL)
  #define VPR_INTENSET_TRIGGERED27_Msk (0x1UL << VPR_INTENSET_TRIGGERED27_Pos)
  #define VPR_INTENSET_TRIGGERED27_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED27_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED27_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED27_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED27_Enabled (0x1UL)

/* TRIGGERED28 @Bit 28 : Write '1' to enable interrupt for event TRIGGERED[28] */
  #define VPR_INTENSET_TRIGGERED28_Pos (28UL)
  #define VPR_INTENSET_TRIGGERED28_Msk (0x1UL << VPR_INTENSET_TRIGGERED28_Pos)
  #define VPR_INTENSET_TRIGGERED28_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED28_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED28_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED28_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED28_Enabled (0x1UL)

/* TRIGGERED29 @Bit 29 : Write '1' to enable interrupt for event TRIGGERED[29] */
  #define VPR_INTENSET_TRIGGERED29_Pos (29UL)
  #define VPR_INTENSET_TRIGGERED29_Msk (0x1UL << VPR_INTENSET_TRIGGERED29_Pos)
  #define VPR_INTENSET_TRIGGERED29_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED29_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED29_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED29_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED29_Enabled (0x1UL)

/* TRIGGERED30 @Bit 30 : Write '1' to enable interrupt for event TRIGGERED[30] */
  #define VPR_INTENSET_TRIGGERED30_Pos (30UL)
  #define VPR_INTENSET_TRIGGERED30_Msk (0x1UL << VPR_INTENSET_TRIGGERED30_Pos)
  #define VPR_INTENSET_TRIGGERED30_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED30_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED30_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED30_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED30_Enabled (0x1UL)

/* TRIGGERED31 @Bit 31 : Write '1' to enable interrupt for event TRIGGERED[31] */
  #define VPR_INTENSET_TRIGGERED31_Pos (31UL)
  #define VPR_INTENSET_TRIGGERED31_Msk (0x1UL << VPR_INTENSET_TRIGGERED31_Pos)
  #define VPR_INTENSET_TRIGGERED31_Min (0x0UL)
  #define VPR_INTENSET_TRIGGERED31_Max (0x1UL)
  #define VPR_INTENSET_TRIGGERED31_Set (0x1UL)
  #define VPR_INTENSET_TRIGGERED31_Disabled (0x0UL)
  #define VPR_INTENSET_TRIGGERED31_Enabled (0x1UL)


/* VPR_INTENCLR: Disable interrupt */
  #define VPR_INTENCLR_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Write '1' to disable interrupt for event TRIGGERED[0] */
  #define VPR_INTENCLR_TRIGGERED0_Pos (0UL)
  #define VPR_INTENCLR_TRIGGERED0_Msk (0x1UL << VPR_INTENCLR_TRIGGERED0_Pos)
  #define VPR_INTENCLR_TRIGGERED0_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED0_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED0_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED0_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED0_Enabled (0x1UL)

/* TRIGGERED1 @Bit 1 : Write '1' to disable interrupt for event TRIGGERED[1] */
  #define VPR_INTENCLR_TRIGGERED1_Pos (1UL)
  #define VPR_INTENCLR_TRIGGERED1_Msk (0x1UL << VPR_INTENCLR_TRIGGERED1_Pos)
  #define VPR_INTENCLR_TRIGGERED1_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED1_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED1_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED1_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED1_Enabled (0x1UL)

/* TRIGGERED2 @Bit 2 : Write '1' to disable interrupt for event TRIGGERED[2] */
  #define VPR_INTENCLR_TRIGGERED2_Pos (2UL)
  #define VPR_INTENCLR_TRIGGERED2_Msk (0x1UL << VPR_INTENCLR_TRIGGERED2_Pos)
  #define VPR_INTENCLR_TRIGGERED2_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED2_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED2_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED2_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED2_Enabled (0x1UL)

/* TRIGGERED3 @Bit 3 : Write '1' to disable interrupt for event TRIGGERED[3] */
  #define VPR_INTENCLR_TRIGGERED3_Pos (3UL)
  #define VPR_INTENCLR_TRIGGERED3_Msk (0x1UL << VPR_INTENCLR_TRIGGERED3_Pos)
  #define VPR_INTENCLR_TRIGGERED3_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED3_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED3_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED3_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED3_Enabled (0x1UL)

/* TRIGGERED4 @Bit 4 : Write '1' to disable interrupt for event TRIGGERED[4] */
  #define VPR_INTENCLR_TRIGGERED4_Pos (4UL)
  #define VPR_INTENCLR_TRIGGERED4_Msk (0x1UL << VPR_INTENCLR_TRIGGERED4_Pos)
  #define VPR_INTENCLR_TRIGGERED4_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED4_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED4_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED4_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED4_Enabled (0x1UL)

/* TRIGGERED5 @Bit 5 : Write '1' to disable interrupt for event TRIGGERED[5] */
  #define VPR_INTENCLR_TRIGGERED5_Pos (5UL)
  #define VPR_INTENCLR_TRIGGERED5_Msk (0x1UL << VPR_INTENCLR_TRIGGERED5_Pos)
  #define VPR_INTENCLR_TRIGGERED5_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED5_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED5_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED5_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED5_Enabled (0x1UL)

/* TRIGGERED6 @Bit 6 : Write '1' to disable interrupt for event TRIGGERED[6] */
  #define VPR_INTENCLR_TRIGGERED6_Pos (6UL)
  #define VPR_INTENCLR_TRIGGERED6_Msk (0x1UL << VPR_INTENCLR_TRIGGERED6_Pos)
  #define VPR_INTENCLR_TRIGGERED6_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED6_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED6_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED6_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED6_Enabled (0x1UL)

/* TRIGGERED7 @Bit 7 : Write '1' to disable interrupt for event TRIGGERED[7] */
  #define VPR_INTENCLR_TRIGGERED7_Pos (7UL)
  #define VPR_INTENCLR_TRIGGERED7_Msk (0x1UL << VPR_INTENCLR_TRIGGERED7_Pos)
  #define VPR_INTENCLR_TRIGGERED7_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED7_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED7_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED7_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED7_Enabled (0x1UL)

/* TRIGGERED8 @Bit 8 : Write '1' to disable interrupt for event TRIGGERED[8] */
  #define VPR_INTENCLR_TRIGGERED8_Pos (8UL)
  #define VPR_INTENCLR_TRIGGERED8_Msk (0x1UL << VPR_INTENCLR_TRIGGERED8_Pos)
  #define VPR_INTENCLR_TRIGGERED8_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED8_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED8_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED8_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED8_Enabled (0x1UL)

/* TRIGGERED9 @Bit 9 : Write '1' to disable interrupt for event TRIGGERED[9] */
  #define VPR_INTENCLR_TRIGGERED9_Pos (9UL)
  #define VPR_INTENCLR_TRIGGERED9_Msk (0x1UL << VPR_INTENCLR_TRIGGERED9_Pos)
  #define VPR_INTENCLR_TRIGGERED9_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED9_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED9_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED9_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED9_Enabled (0x1UL)

/* TRIGGERED10 @Bit 10 : Write '1' to disable interrupt for event TRIGGERED[10] */
  #define VPR_INTENCLR_TRIGGERED10_Pos (10UL)
  #define VPR_INTENCLR_TRIGGERED10_Msk (0x1UL << VPR_INTENCLR_TRIGGERED10_Pos)
  #define VPR_INTENCLR_TRIGGERED10_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED10_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED10_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED10_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED10_Enabled (0x1UL)

/* TRIGGERED11 @Bit 11 : Write '1' to disable interrupt for event TRIGGERED[11] */
  #define VPR_INTENCLR_TRIGGERED11_Pos (11UL)
  #define VPR_INTENCLR_TRIGGERED11_Msk (0x1UL << VPR_INTENCLR_TRIGGERED11_Pos)
  #define VPR_INTENCLR_TRIGGERED11_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED11_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED11_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED11_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED11_Enabled (0x1UL)

/* TRIGGERED12 @Bit 12 : Write '1' to disable interrupt for event TRIGGERED[12] */
  #define VPR_INTENCLR_TRIGGERED12_Pos (12UL)
  #define VPR_INTENCLR_TRIGGERED12_Msk (0x1UL << VPR_INTENCLR_TRIGGERED12_Pos)
  #define VPR_INTENCLR_TRIGGERED12_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED12_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED12_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED12_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED12_Enabled (0x1UL)

/* TRIGGERED13 @Bit 13 : Write '1' to disable interrupt for event TRIGGERED[13] */
  #define VPR_INTENCLR_TRIGGERED13_Pos (13UL)
  #define VPR_INTENCLR_TRIGGERED13_Msk (0x1UL << VPR_INTENCLR_TRIGGERED13_Pos)
  #define VPR_INTENCLR_TRIGGERED13_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED13_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED13_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED13_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED13_Enabled (0x1UL)

/* TRIGGERED14 @Bit 14 : Write '1' to disable interrupt for event TRIGGERED[14] */
  #define VPR_INTENCLR_TRIGGERED14_Pos (14UL)
  #define VPR_INTENCLR_TRIGGERED14_Msk (0x1UL << VPR_INTENCLR_TRIGGERED14_Pos)
  #define VPR_INTENCLR_TRIGGERED14_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED14_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED14_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED14_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED14_Enabled (0x1UL)

/* TRIGGERED15 @Bit 15 : Write '1' to disable interrupt for event TRIGGERED[15] */
  #define VPR_INTENCLR_TRIGGERED15_Pos (15UL)
  #define VPR_INTENCLR_TRIGGERED15_Msk (0x1UL << VPR_INTENCLR_TRIGGERED15_Pos)
  #define VPR_INTENCLR_TRIGGERED15_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED15_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED15_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED15_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED15_Enabled (0x1UL)

/* TRIGGERED16 @Bit 16 : Write '1' to disable interrupt for event TRIGGERED[16] */
  #define VPR_INTENCLR_TRIGGERED16_Pos (16UL)
  #define VPR_INTENCLR_TRIGGERED16_Msk (0x1UL << VPR_INTENCLR_TRIGGERED16_Pos)
  #define VPR_INTENCLR_TRIGGERED16_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED16_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED16_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED16_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED16_Enabled (0x1UL)

/* TRIGGERED17 @Bit 17 : Write '1' to disable interrupt for event TRIGGERED[17] */
  #define VPR_INTENCLR_TRIGGERED17_Pos (17UL)
  #define VPR_INTENCLR_TRIGGERED17_Msk (0x1UL << VPR_INTENCLR_TRIGGERED17_Pos)
  #define VPR_INTENCLR_TRIGGERED17_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED17_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED17_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED17_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED17_Enabled (0x1UL)

/* TRIGGERED18 @Bit 18 : Write '1' to disable interrupt for event TRIGGERED[18] */
  #define VPR_INTENCLR_TRIGGERED18_Pos (18UL)
  #define VPR_INTENCLR_TRIGGERED18_Msk (0x1UL << VPR_INTENCLR_TRIGGERED18_Pos)
  #define VPR_INTENCLR_TRIGGERED18_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED18_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED18_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED18_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED18_Enabled (0x1UL)

/* TRIGGERED19 @Bit 19 : Write '1' to disable interrupt for event TRIGGERED[19] */
  #define VPR_INTENCLR_TRIGGERED19_Pos (19UL)
  #define VPR_INTENCLR_TRIGGERED19_Msk (0x1UL << VPR_INTENCLR_TRIGGERED19_Pos)
  #define VPR_INTENCLR_TRIGGERED19_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED19_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED19_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED19_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED19_Enabled (0x1UL)

/* TRIGGERED20 @Bit 20 : Write '1' to disable interrupt for event TRIGGERED[20] */
  #define VPR_INTENCLR_TRIGGERED20_Pos (20UL)
  #define VPR_INTENCLR_TRIGGERED20_Msk (0x1UL << VPR_INTENCLR_TRIGGERED20_Pos)
  #define VPR_INTENCLR_TRIGGERED20_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED20_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED20_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED20_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED20_Enabled (0x1UL)

/* TRIGGERED21 @Bit 21 : Write '1' to disable interrupt for event TRIGGERED[21] */
  #define VPR_INTENCLR_TRIGGERED21_Pos (21UL)
  #define VPR_INTENCLR_TRIGGERED21_Msk (0x1UL << VPR_INTENCLR_TRIGGERED21_Pos)
  #define VPR_INTENCLR_TRIGGERED21_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED21_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED21_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED21_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED21_Enabled (0x1UL)

/* TRIGGERED22 @Bit 22 : Write '1' to disable interrupt for event TRIGGERED[22] */
  #define VPR_INTENCLR_TRIGGERED22_Pos (22UL)
  #define VPR_INTENCLR_TRIGGERED22_Msk (0x1UL << VPR_INTENCLR_TRIGGERED22_Pos)
  #define VPR_INTENCLR_TRIGGERED22_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED22_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED22_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED22_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED22_Enabled (0x1UL)

/* TRIGGERED23 @Bit 23 : Write '1' to disable interrupt for event TRIGGERED[23] */
  #define VPR_INTENCLR_TRIGGERED23_Pos (23UL)
  #define VPR_INTENCLR_TRIGGERED23_Msk (0x1UL << VPR_INTENCLR_TRIGGERED23_Pos)
  #define VPR_INTENCLR_TRIGGERED23_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED23_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED23_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED23_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED23_Enabled (0x1UL)

/* TRIGGERED24 @Bit 24 : Write '1' to disable interrupt for event TRIGGERED[24] */
  #define VPR_INTENCLR_TRIGGERED24_Pos (24UL)
  #define VPR_INTENCLR_TRIGGERED24_Msk (0x1UL << VPR_INTENCLR_TRIGGERED24_Pos)
  #define VPR_INTENCLR_TRIGGERED24_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED24_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED24_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED24_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED24_Enabled (0x1UL)

/* TRIGGERED25 @Bit 25 : Write '1' to disable interrupt for event TRIGGERED[25] */
  #define VPR_INTENCLR_TRIGGERED25_Pos (25UL)
  #define VPR_INTENCLR_TRIGGERED25_Msk (0x1UL << VPR_INTENCLR_TRIGGERED25_Pos)
  #define VPR_INTENCLR_TRIGGERED25_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED25_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED25_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED25_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED25_Enabled (0x1UL)

/* TRIGGERED26 @Bit 26 : Write '1' to disable interrupt for event TRIGGERED[26] */
  #define VPR_INTENCLR_TRIGGERED26_Pos (26UL)
  #define VPR_INTENCLR_TRIGGERED26_Msk (0x1UL << VPR_INTENCLR_TRIGGERED26_Pos)
  #define VPR_INTENCLR_TRIGGERED26_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED26_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED26_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED26_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED26_Enabled (0x1UL)

/* TRIGGERED27 @Bit 27 : Write '1' to disable interrupt for event TRIGGERED[27] */
  #define VPR_INTENCLR_TRIGGERED27_Pos (27UL)
  #define VPR_INTENCLR_TRIGGERED27_Msk (0x1UL << VPR_INTENCLR_TRIGGERED27_Pos)
  #define VPR_INTENCLR_TRIGGERED27_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED27_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED27_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED27_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED27_Enabled (0x1UL)

/* TRIGGERED28 @Bit 28 : Write '1' to disable interrupt for event TRIGGERED[28] */
  #define VPR_INTENCLR_TRIGGERED28_Pos (28UL)
  #define VPR_INTENCLR_TRIGGERED28_Msk (0x1UL << VPR_INTENCLR_TRIGGERED28_Pos)
  #define VPR_INTENCLR_TRIGGERED28_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED28_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED28_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED28_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED28_Enabled (0x1UL)

/* TRIGGERED29 @Bit 29 : Write '1' to disable interrupt for event TRIGGERED[29] */
  #define VPR_INTENCLR_TRIGGERED29_Pos (29UL)
  #define VPR_INTENCLR_TRIGGERED29_Msk (0x1UL << VPR_INTENCLR_TRIGGERED29_Pos)
  #define VPR_INTENCLR_TRIGGERED29_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED29_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED29_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED29_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED29_Enabled (0x1UL)

/* TRIGGERED30 @Bit 30 : Write '1' to disable interrupt for event TRIGGERED[30] */
  #define VPR_INTENCLR_TRIGGERED30_Pos (30UL)
  #define VPR_INTENCLR_TRIGGERED30_Msk (0x1UL << VPR_INTENCLR_TRIGGERED30_Pos)
  #define VPR_INTENCLR_TRIGGERED30_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED30_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED30_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED30_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED30_Enabled (0x1UL)

/* TRIGGERED31 @Bit 31 : Write '1' to disable interrupt for event TRIGGERED[31] */
  #define VPR_INTENCLR_TRIGGERED31_Pos (31UL)
  #define VPR_INTENCLR_TRIGGERED31_Msk (0x1UL << VPR_INTENCLR_TRIGGERED31_Pos)
  #define VPR_INTENCLR_TRIGGERED31_Min (0x0UL)
  #define VPR_INTENCLR_TRIGGERED31_Max (0x1UL)
  #define VPR_INTENCLR_TRIGGERED31_Clear (0x1UL)
  #define VPR_INTENCLR_TRIGGERED31_Disabled (0x0UL)
  #define VPR_INTENCLR_TRIGGERED31_Enabled (0x1UL)


/* VPR_INTPEND: Pending interrupts */
  #define VPR_INTPEND_ResetValue (0x00000000UL)

/* TRIGGERED0 @Bit 0 : Read pending status of interrupt for event TRIGGERED[0] */
  #define VPR_INTPEND_TRIGGERED0_Pos (0UL)
  #define VPR_INTPEND_TRIGGERED0_Msk (0x1UL << VPR_INTPEND_TRIGGERED0_Pos)
  #define VPR_INTPEND_TRIGGERED0_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED0_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED0_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED0_Pending (0x1UL)

/* TRIGGERED1 @Bit 1 : Read pending status of interrupt for event TRIGGERED[1] */
  #define VPR_INTPEND_TRIGGERED1_Pos (1UL)
  #define VPR_INTPEND_TRIGGERED1_Msk (0x1UL << VPR_INTPEND_TRIGGERED1_Pos)
  #define VPR_INTPEND_TRIGGERED1_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED1_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED1_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED1_Pending (0x1UL)

/* TRIGGERED2 @Bit 2 : Read pending status of interrupt for event TRIGGERED[2] */
  #define VPR_INTPEND_TRIGGERED2_Pos (2UL)
  #define VPR_INTPEND_TRIGGERED2_Msk (0x1UL << VPR_INTPEND_TRIGGERED2_Pos)
  #define VPR_INTPEND_TRIGGERED2_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED2_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED2_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED2_Pending (0x1UL)

/* TRIGGERED3 @Bit 3 : Read pending status of interrupt for event TRIGGERED[3] */
  #define VPR_INTPEND_TRIGGERED3_Pos (3UL)
  #define VPR_INTPEND_TRIGGERED3_Msk (0x1UL << VPR_INTPEND_TRIGGERED3_Pos)
  #define VPR_INTPEND_TRIGGERED3_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED3_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED3_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED3_Pending (0x1UL)

/* TRIGGERED4 @Bit 4 : Read pending status of interrupt for event TRIGGERED[4] */
  #define VPR_INTPEND_TRIGGERED4_Pos (4UL)
  #define VPR_INTPEND_TRIGGERED4_Msk (0x1UL << VPR_INTPEND_TRIGGERED4_Pos)
  #define VPR_INTPEND_TRIGGERED4_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED4_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED4_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED4_Pending (0x1UL)

/* TRIGGERED5 @Bit 5 : Read pending status of interrupt for event TRIGGERED[5] */
  #define VPR_INTPEND_TRIGGERED5_Pos (5UL)
  #define VPR_INTPEND_TRIGGERED5_Msk (0x1UL << VPR_INTPEND_TRIGGERED5_Pos)
  #define VPR_INTPEND_TRIGGERED5_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED5_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED5_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED5_Pending (0x1UL)

/* TRIGGERED6 @Bit 6 : Read pending status of interrupt for event TRIGGERED[6] */
  #define VPR_INTPEND_TRIGGERED6_Pos (6UL)
  #define VPR_INTPEND_TRIGGERED6_Msk (0x1UL << VPR_INTPEND_TRIGGERED6_Pos)
  #define VPR_INTPEND_TRIGGERED6_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED6_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED6_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED6_Pending (0x1UL)

/* TRIGGERED7 @Bit 7 : Read pending status of interrupt for event TRIGGERED[7] */
  #define VPR_INTPEND_TRIGGERED7_Pos (7UL)
  #define VPR_INTPEND_TRIGGERED7_Msk (0x1UL << VPR_INTPEND_TRIGGERED7_Pos)
  #define VPR_INTPEND_TRIGGERED7_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED7_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED7_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED7_Pending (0x1UL)

/* TRIGGERED8 @Bit 8 : Read pending status of interrupt for event TRIGGERED[8] */
  #define VPR_INTPEND_TRIGGERED8_Pos (8UL)
  #define VPR_INTPEND_TRIGGERED8_Msk (0x1UL << VPR_INTPEND_TRIGGERED8_Pos)
  #define VPR_INTPEND_TRIGGERED8_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED8_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED8_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED8_Pending (0x1UL)

/* TRIGGERED9 @Bit 9 : Read pending status of interrupt for event TRIGGERED[9] */
  #define VPR_INTPEND_TRIGGERED9_Pos (9UL)
  #define VPR_INTPEND_TRIGGERED9_Msk (0x1UL << VPR_INTPEND_TRIGGERED9_Pos)
  #define VPR_INTPEND_TRIGGERED9_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED9_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED9_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED9_Pending (0x1UL)

/* TRIGGERED10 @Bit 10 : Read pending status of interrupt for event TRIGGERED[10] */
  #define VPR_INTPEND_TRIGGERED10_Pos (10UL)
  #define VPR_INTPEND_TRIGGERED10_Msk (0x1UL << VPR_INTPEND_TRIGGERED10_Pos)
  #define VPR_INTPEND_TRIGGERED10_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED10_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED10_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED10_Pending (0x1UL)

/* TRIGGERED11 @Bit 11 : Read pending status of interrupt for event TRIGGERED[11] */
  #define VPR_INTPEND_TRIGGERED11_Pos (11UL)
  #define VPR_INTPEND_TRIGGERED11_Msk (0x1UL << VPR_INTPEND_TRIGGERED11_Pos)
  #define VPR_INTPEND_TRIGGERED11_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED11_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED11_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED11_Pending (0x1UL)

/* TRIGGERED12 @Bit 12 : Read pending status of interrupt for event TRIGGERED[12] */
  #define VPR_INTPEND_TRIGGERED12_Pos (12UL)
  #define VPR_INTPEND_TRIGGERED12_Msk (0x1UL << VPR_INTPEND_TRIGGERED12_Pos)
  #define VPR_INTPEND_TRIGGERED12_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED12_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED12_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED12_Pending (0x1UL)

/* TRIGGERED13 @Bit 13 : Read pending status of interrupt for event TRIGGERED[13] */
  #define VPR_INTPEND_TRIGGERED13_Pos (13UL)
  #define VPR_INTPEND_TRIGGERED13_Msk (0x1UL << VPR_INTPEND_TRIGGERED13_Pos)
  #define VPR_INTPEND_TRIGGERED13_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED13_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED13_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED13_Pending (0x1UL)

/* TRIGGERED14 @Bit 14 : Read pending status of interrupt for event TRIGGERED[14] */
  #define VPR_INTPEND_TRIGGERED14_Pos (14UL)
  #define VPR_INTPEND_TRIGGERED14_Msk (0x1UL << VPR_INTPEND_TRIGGERED14_Pos)
  #define VPR_INTPEND_TRIGGERED14_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED14_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED14_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED14_Pending (0x1UL)

/* TRIGGERED15 @Bit 15 : Read pending status of interrupt for event TRIGGERED[15] */
  #define VPR_INTPEND_TRIGGERED15_Pos (15UL)
  #define VPR_INTPEND_TRIGGERED15_Msk (0x1UL << VPR_INTPEND_TRIGGERED15_Pos)
  #define VPR_INTPEND_TRIGGERED15_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED15_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED15_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED15_Pending (0x1UL)

/* TRIGGERED16 @Bit 16 : Read pending status of interrupt for event TRIGGERED[16] */
  #define VPR_INTPEND_TRIGGERED16_Pos (16UL)
  #define VPR_INTPEND_TRIGGERED16_Msk (0x1UL << VPR_INTPEND_TRIGGERED16_Pos)
  #define VPR_INTPEND_TRIGGERED16_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED16_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED16_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED16_Pending (0x1UL)

/* TRIGGERED17 @Bit 17 : Read pending status of interrupt for event TRIGGERED[17] */
  #define VPR_INTPEND_TRIGGERED17_Pos (17UL)
  #define VPR_INTPEND_TRIGGERED17_Msk (0x1UL << VPR_INTPEND_TRIGGERED17_Pos)
  #define VPR_INTPEND_TRIGGERED17_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED17_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED17_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED17_Pending (0x1UL)

/* TRIGGERED18 @Bit 18 : Read pending status of interrupt for event TRIGGERED[18] */
  #define VPR_INTPEND_TRIGGERED18_Pos (18UL)
  #define VPR_INTPEND_TRIGGERED18_Msk (0x1UL << VPR_INTPEND_TRIGGERED18_Pos)
  #define VPR_INTPEND_TRIGGERED18_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED18_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED18_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED18_Pending (0x1UL)

/* TRIGGERED19 @Bit 19 : Read pending status of interrupt for event TRIGGERED[19] */
  #define VPR_INTPEND_TRIGGERED19_Pos (19UL)
  #define VPR_INTPEND_TRIGGERED19_Msk (0x1UL << VPR_INTPEND_TRIGGERED19_Pos)
  #define VPR_INTPEND_TRIGGERED19_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED19_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED19_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED19_Pending (0x1UL)

/* TRIGGERED20 @Bit 20 : Read pending status of interrupt for event TRIGGERED[20] */
  #define VPR_INTPEND_TRIGGERED20_Pos (20UL)
  #define VPR_INTPEND_TRIGGERED20_Msk (0x1UL << VPR_INTPEND_TRIGGERED20_Pos)
  #define VPR_INTPEND_TRIGGERED20_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED20_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED20_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED20_Pending (0x1UL)

/* TRIGGERED21 @Bit 21 : Read pending status of interrupt for event TRIGGERED[21] */
  #define VPR_INTPEND_TRIGGERED21_Pos (21UL)
  #define VPR_INTPEND_TRIGGERED21_Msk (0x1UL << VPR_INTPEND_TRIGGERED21_Pos)
  #define VPR_INTPEND_TRIGGERED21_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED21_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED21_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED21_Pending (0x1UL)

/* TRIGGERED22 @Bit 22 : Read pending status of interrupt for event TRIGGERED[22] */
  #define VPR_INTPEND_TRIGGERED22_Pos (22UL)
  #define VPR_INTPEND_TRIGGERED22_Msk (0x1UL << VPR_INTPEND_TRIGGERED22_Pos)
  #define VPR_INTPEND_TRIGGERED22_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED22_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED22_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED22_Pending (0x1UL)

/* TRIGGERED23 @Bit 23 : Read pending status of interrupt for event TRIGGERED[23] */
  #define VPR_INTPEND_TRIGGERED23_Pos (23UL)
  #define VPR_INTPEND_TRIGGERED23_Msk (0x1UL << VPR_INTPEND_TRIGGERED23_Pos)
  #define VPR_INTPEND_TRIGGERED23_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED23_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED23_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED23_Pending (0x1UL)

/* TRIGGERED24 @Bit 24 : Read pending status of interrupt for event TRIGGERED[24] */
  #define VPR_INTPEND_TRIGGERED24_Pos (24UL)
  #define VPR_INTPEND_TRIGGERED24_Msk (0x1UL << VPR_INTPEND_TRIGGERED24_Pos)
  #define VPR_INTPEND_TRIGGERED24_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED24_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED24_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED24_Pending (0x1UL)

/* TRIGGERED25 @Bit 25 : Read pending status of interrupt for event TRIGGERED[25] */
  #define VPR_INTPEND_TRIGGERED25_Pos (25UL)
  #define VPR_INTPEND_TRIGGERED25_Msk (0x1UL << VPR_INTPEND_TRIGGERED25_Pos)
  #define VPR_INTPEND_TRIGGERED25_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED25_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED25_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED25_Pending (0x1UL)

/* TRIGGERED26 @Bit 26 : Read pending status of interrupt for event TRIGGERED[26] */
  #define VPR_INTPEND_TRIGGERED26_Pos (26UL)
  #define VPR_INTPEND_TRIGGERED26_Msk (0x1UL << VPR_INTPEND_TRIGGERED26_Pos)
  #define VPR_INTPEND_TRIGGERED26_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED26_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED26_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED26_Pending (0x1UL)

/* TRIGGERED27 @Bit 27 : Read pending status of interrupt for event TRIGGERED[27] */
  #define VPR_INTPEND_TRIGGERED27_Pos (27UL)
  #define VPR_INTPEND_TRIGGERED27_Msk (0x1UL << VPR_INTPEND_TRIGGERED27_Pos)
  #define VPR_INTPEND_TRIGGERED27_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED27_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED27_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED27_Pending (0x1UL)

/* TRIGGERED28 @Bit 28 : Read pending status of interrupt for event TRIGGERED[28] */
  #define VPR_INTPEND_TRIGGERED28_Pos (28UL)
  #define VPR_INTPEND_TRIGGERED28_Msk (0x1UL << VPR_INTPEND_TRIGGERED28_Pos)
  #define VPR_INTPEND_TRIGGERED28_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED28_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED28_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED28_Pending (0x1UL)

/* TRIGGERED29 @Bit 29 : Read pending status of interrupt for event TRIGGERED[29] */
  #define VPR_INTPEND_TRIGGERED29_Pos (29UL)
  #define VPR_INTPEND_TRIGGERED29_Msk (0x1UL << VPR_INTPEND_TRIGGERED29_Pos)
  #define VPR_INTPEND_TRIGGERED29_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED29_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED29_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED29_Pending (0x1UL)

/* TRIGGERED30 @Bit 30 : Read pending status of interrupt for event TRIGGERED[30] */
  #define VPR_INTPEND_TRIGGERED30_Pos (30UL)
  #define VPR_INTPEND_TRIGGERED30_Msk (0x1UL << VPR_INTPEND_TRIGGERED30_Pos)
  #define VPR_INTPEND_TRIGGERED30_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED30_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED30_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED30_Pending (0x1UL)

/* TRIGGERED31 @Bit 31 : Read pending status of interrupt for event TRIGGERED[31] */
  #define VPR_INTPEND_TRIGGERED31_Pos (31UL)
  #define VPR_INTPEND_TRIGGERED31_Msk (0x1UL << VPR_INTPEND_TRIGGERED31_Pos)
  #define VPR_INTPEND_TRIGGERED31_Min (0x0UL)
  #define VPR_INTPEND_TRIGGERED31_Max (0x1UL)
  #define VPR_INTPEND_TRIGGERED31_NotPending (0x0UL)
  #define VPR_INTPEND_TRIGGERED31_Pending (0x1UL)


/* VPR_CPURUN: State of the CPU after a core reset */
  #define VPR_CPURUN_ResetValue (0x00000000UL)

/* EN @Bit 0 : Controls CPU running state after a core reset. */
  #define VPR_CPURUN_EN_Pos (0UL)
  #define VPR_CPURUN_EN_Msk (0x1UL << VPR_CPURUN_EN_Pos)
  #define VPR_CPURUN_EN_Min (0x0UL)
  #define VPR_CPURUN_EN_Max (0x1UL)
  #define VPR_CPURUN_EN_Stopped (0x0UL)              /*!< CPU stopped. If this is the CPU state after a core reset, setting this
                                                          bit will change the CPU state to CPU running.*/
  #define VPR_CPURUN_EN_Running (0x1UL)              /*!< CPU running. If this is the CPU state after a core reset, clearing
                                                          this bit will change the CPU state to CPU stopped after a core reset.*/


/* VPR_VPRSTATUS: VPR state information. */
  #define VPR_VPRSTATUS_ResetValue (0x00000000UL)

/* CPUSTATUS @Bits 0..3 : (unspecified) */
  #define VPR_VPRSTATUS_CPUSTATUS_Pos (0UL)
  #define VPR_VPRSTATUS_CPUSTATUS_Msk (0xFUL << VPR_VPRSTATUS_CPUSTATUS_Pos)
  #define VPR_VPRSTATUS_CPUSTATUS_Min (0x0UL)
  #define VPR_VPRSTATUS_CPUSTATUS_Max (0xEUL)
  #define VPR_VPRSTATUS_CPUSTATUS_WAITING (0x0UL)
  #define VPR_VPRSTATUS_CPUSTATUS_RUNNING (0x1UL)
  #define VPR_VPRSTATUS_CPUSTATUS_SLEEPING (0x2UL)
  #define VPR_VPRSTATUS_CPUSTATUS_INTERRUPT (0x3UL)
  #define VPR_VPRSTATUS_CPUSTATUS_EXCEPTION_TRAP (0x4UL)
  #define VPR_VPRSTATUS_CPUSTATUS_ONGOING_RESET (0x5UL)
  #define VPR_VPRSTATUS_CPUSTATUS_HALTED (0x6UL)
  #define VPR_VPRSTATUS_CPUSTATUS_ERROR (0xEUL)

/* RTPENABLED @Bit 4 : Mirrors the ENABLERTPERIPH bit in the NORDIC.VPRNORDICCTRL CSR */
  #define VPR_VPRSTATUS_RTPENABLED_Pos (4UL)
  #define VPR_VPRSTATUS_RTPENABLED_Msk (0x1UL << VPR_VPRSTATUS_RTPENABLED_Pos)
  #define VPR_VPRSTATUS_RTPENABLED_Min (0x0UL)
  #define VPR_VPRSTATUS_RTPENABLED_Max (0x1UL)
  #define VPR_VPRSTATUS_RTPENABLED_Disabled (0x0UL)
  #define VPR_VPRSTATUS_RTPENABLED_Enabled (0x1UL)

/* RTPSTALL @Bit 5 : Stalled waiting for real-time peripheral blocking CSR access, for example WAIT, OUTB with dirty status */
  #define VPR_VPRSTATUS_RTPSTALL_Pos (5UL)
  #define VPR_VPRSTATUS_RTPSTALL_Msk (0x1UL << VPR_VPRSTATUS_RTPSTALL_Pos)


/* VPR_INITPC: Initial value of the PC at CPU start. */
  #define VPR_INITPC_ResetValue (0x00000000UL)

/* INITPC @Bits 0..31 : Initial value of the PC at CPU start. */
  #define VPR_INITPC_INITPC_Pos (0UL)
  #define VPR_INITPC_INITPC_Msk (0xFFFFFFFFUL << VPR_INITPC_INITPC_Pos)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          VPRCSR                                          ================ */
/* =========================================================================================================================== */

/**
  * @brief VPR CSR registers
  */
/**
  * @brief  [VPRCSR] (unspecified)
  */

/**
  * @brief  [VPRCSR] (unspecified)
  */

/**
  * @brief MSTATUS [VPRCSR_MSTATUS] Machine Status
  */
  #define VPRCSR_MSTATUS (0x00000300ul)
  #define VPRCSR_MSTATUS_ResetValue (0x00001800UL)

/* MIE @Bit 3 : global interrupt enable for machine privilege mode */
  #define VPRCSR_MSTATUS_MIE_Pos (3UL)
  #define VPRCSR_MSTATUS_MIE_Msk (0x1UL << VPRCSR_MSTATUS_MIE_Pos)
  #define VPRCSR_MSTATUS_MIE_Min (0x0UL)
  #define VPRCSR_MSTATUS_MIE_Max (0x1UL)
  #define VPRCSR_MSTATUS_MIE_Disabled (0x0UL)
  #define VPRCSR_MSTATUS_MIE_Enabled (0x1UL)

/* MPIE @Bit 7 : Exists to support nested traps. Value of the interrupt-enable bit active prior to the trap for machine
                 privilege mode */

  #define VPRCSR_MSTATUS_MPIE_Pos (7UL)
  #define VPRCSR_MSTATUS_MPIE_Msk (0x1UL << VPRCSR_MSTATUS_MPIE_Pos)
  #define VPRCSR_MSTATUS_MPIE_Min (0x0UL)
  #define VPRCSR_MSTATUS_MPIE_Max (0x1UL)
  #define VPRCSR_MSTATUS_MPIE_Disabled (0x0UL)
  #define VPRCSR_MSTATUS_MPIE_Enabled (0x1UL)

/* MPP @Bits 11..12 : Exists to support nested traps. Value of the privlege mode prior to the trap for machine privilege mode */
  #define VPRCSR_MSTATUS_MPP_Pos (11UL)
  #define VPRCSR_MSTATUS_MPP_Msk (0x3UL << VPRCSR_MSTATUS_MPP_Pos)


/**
  * @brief MISA [VPRCSR_MISA] Machine ISA
  */
  #define VPRCSR_MISA (0x00000301ul)
  #define VPRCSR_MISA_ResetValue (0x40001016UL)

/* A @Bit 0 : Atomic extension */
  #define VPRCSR_MISA_A_Pos (0UL)
  #define VPRCSR_MISA_A_Msk (0x1UL << VPRCSR_MISA_A_Pos)
  #define VPRCSR_MISA_A_Min (0x0UL)
  #define VPRCSR_MISA_A_Max (0x1UL)
  #define VPRCSR_MISA_A_Disabled (0x0UL)
  #define VPRCSR_MISA_A_Enabled (0x1UL)

/* B @Bit 1 : Bit-Manipulation extension */
  #define VPRCSR_MISA_B_Pos (1UL)
  #define VPRCSR_MISA_B_Msk (0x1UL << VPRCSR_MISA_B_Pos)
  #define VPRCSR_MISA_B_Min (0x0UL)
  #define VPRCSR_MISA_B_Max (0x1UL)
  #define VPRCSR_MISA_B_Disabled (0x0UL)
  #define VPRCSR_MISA_B_Enabled (0x1UL)

/* C @Bit 2 : Compressed extension */
  #define VPRCSR_MISA_C_Pos (2UL)
  #define VPRCSR_MISA_C_Msk (0x1UL << VPRCSR_MISA_C_Pos)
  #define VPRCSR_MISA_C_Min (0x0UL)
  #define VPRCSR_MISA_C_Max (0x1UL)
  #define VPRCSR_MISA_C_Disabled (0x0UL)
  #define VPRCSR_MISA_C_Enabled (0x1UL)

/* E @Bit 4 : RV32E base ISA */
  #define VPRCSR_MISA_E_Pos (4UL)
  #define VPRCSR_MISA_E_Msk (0x1UL << VPRCSR_MISA_E_Pos)
  #define VPRCSR_MISA_E_Min (0x0UL)
  #define VPRCSR_MISA_E_Max (0x1UL)
  #define VPRCSR_MISA_E_Disabled (0x0UL)
  #define VPRCSR_MISA_E_Enabled (0x1UL)

/* I @Bit 8 : RV32I/64I/128I base ISA */
  #define VPRCSR_MISA_I_Pos (8UL)
  #define VPRCSR_MISA_I_Msk (0x1UL << VPRCSR_MISA_I_Pos)
  #define VPRCSR_MISA_I_Min (0x0UL)
  #define VPRCSR_MISA_I_Max (0x1UL)
  #define VPRCSR_MISA_I_Disabled (0x0UL)
  #define VPRCSR_MISA_I_Enabled (0x1UL)

/* M @Bit 12 : Integer Multiply/Divide extension */
  #define VPRCSR_MISA_M_Pos (12UL)
  #define VPRCSR_MISA_M_Msk (0x1UL << VPRCSR_MISA_M_Pos)
  #define VPRCSR_MISA_M_Min (0x0UL)
  #define VPRCSR_MISA_M_Max (0x1UL)
  #define VPRCSR_MISA_M_Disabled (0x0UL)
  #define VPRCSR_MISA_M_Enabled (0x1UL)

/* N @Bit 13 : User-level interrupts supported */
  #define VPRCSR_MISA_N_Pos (13UL)
  #define VPRCSR_MISA_N_Msk (0x1UL << VPRCSR_MISA_N_Pos)
  #define VPRCSR_MISA_N_Min (0x0UL)
  #define VPRCSR_MISA_N_Max (0x1UL)
  #define VPRCSR_MISA_N_Disabled (0x0UL)
  #define VPRCSR_MISA_N_Enabled (0x1UL)

/* MXL @Bits 30..31 : Machine XLEN */
  #define VPRCSR_MISA_MXL_Pos (30UL)
  #define VPRCSR_MISA_MXL_Msk (0x3UL << VPRCSR_MISA_MXL_Pos)
  #define VPRCSR_MISA_MXL_Min (0x1UL)
  #define VPRCSR_MISA_MXL_Max (0x3UL)
  #define VPRCSR_MISA_MXL_XLEN32 (0x1UL)
  #define VPRCSR_MISA_MXL_XLEN64 (0x2UL)
  #define VPRCSR_MISA_MXL_XLEN128 (0x3UL)


/**
  * @brief MTVEC [VPRCSR_MTVEC] Machine Trap-Vector
  */
  #define VPRCSR_MTVEC (0x00000305ul)
  #define VPRCSR_MTVEC_ResetValue (0x00000003UL)

/* MODE @Bits 0..1 : Mode */
  #define VPRCSR_MTVEC_MODE_Pos (0UL)
  #define VPRCSR_MTVEC_MODE_Msk (0x3UL << VPRCSR_MTVEC_MODE_Pos)
  #define VPRCSR_MTVEC_MODE_Min (0x3UL)
  #define VPRCSR_MTVEC_MODE_Max (0x3UL)
  #define VPRCSR_MTVEC_MODE_CLIC (0x3UL)

/* BASE @Bits 2..31 : Vector base address */
  #define VPRCSR_MTVEC_BASE_Pos (2UL)
  #define VPRCSR_MTVEC_BASE_Msk (0x3FFFFFFFUL << VPRCSR_MTVEC_BASE_Pos)


/**
  * @brief MTVT [VPRCSR_MTVT] Machine Trap Vector Table
  */
  #define VPRCSR_MTVT (0x00000307ul)
  #define VPRCSR_MTVT_ResetValue (0x00000000UL)

/* VAL @Bits 6..31 : Machine Trap Vector Table base address value for CLIC vectored interrupts */
  #define VPRCSR_MTVT_VAL_Pos (6UL)
  #define VPRCSR_MTVT_VAL_Msk (0x3FFFFFFUL << VPRCSR_MTVT_VAL_Pos)


/**
  * @brief MCOUNTINHIBIT [VPRCSR_MCOUNTINHIBIT] Machine Counter-Inhibit
  */
  #define VPRCSR_MCOUNTINHIBIT (0x00000320ul)
  #define VPRCSR_MCOUNTINHIBIT_ResetValue (0x00000005UL)

/* CY @Bit 0 : (unspecified) */
  #define VPRCSR_MCOUNTINHIBIT_CY_Pos (0UL)
  #define VPRCSR_MCOUNTINHIBIT_CY_Msk (0x1UL << VPRCSR_MCOUNTINHIBIT_CY_Pos)
  #define VPRCSR_MCOUNTINHIBIT_CY_Min (0x0UL)
  #define VPRCSR_MCOUNTINHIBIT_CY_Max (0x1UL)
  #define VPRCSR_MCOUNTINHIBIT_CY_INCREMENT (0x0UL)
  #define VPRCSR_MCOUNTINHIBIT_CY_INHIBIT (0x1UL)

/* IR @Bit 2 : (unspecified) */
  #define VPRCSR_MCOUNTINHIBIT_IR_Pos (2UL)
  #define VPRCSR_MCOUNTINHIBIT_IR_Msk (0x1UL << VPRCSR_MCOUNTINHIBIT_IR_Pos)
  #define VPRCSR_MCOUNTINHIBIT_IR_Min (0x0UL)
  #define VPRCSR_MCOUNTINHIBIT_IR_Max (0x1UL)
  #define VPRCSR_MCOUNTINHIBIT_IR_INCREMENT (0x0UL)
  #define VPRCSR_MCOUNTINHIBIT_IR_INHIBIT (0x1UL)


/**
  * @brief MSCRATCH [VPRCSR_MSCRATCH] Machine Scratch
  */
  #define VPRCSR_MSCRATCH (0x00000340ul)
  #define VPRCSR_MSCRATCH_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Scratch value */
  #define VPRCSR_MSCRATCH_VAL_Pos (0UL)
  #define VPRCSR_MSCRATCH_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MSCRATCH_VAL_Pos)


/**
  * @brief MEPC [VPRCSR_MEPC] Machine Exception Program Counter
  */
  #define VPRCSR_MEPC (0x00000341ul)
  #define VPRCSR_MEPC_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Exception Program Counter value */
  #define VPRCSR_MEPC_VAL_Pos (0UL)
  #define VPRCSR_MEPC_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MEPC_VAL_Pos)


/**
  * @brief MCAUSE [VPRCSR_MCAUSE] Machine Cause
  */
  #define VPRCSR_MCAUSE (0x00000342ul)
  #define VPRCSR_MCAUSE_ResetValue (0x30000000UL)

/* EXCEPTIONCODE @Bits 0..11 : Exception code */
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_Pos (0UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_Msk (0xFFFUL << VPRCSR_MCAUSE_EXCEPTIONCODE_Pos)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_Min (0x0UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_Max (0x1FUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_INSTADDRMISALIGN (0x000UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_INSTACCESSFAULT (0x001UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_ILLEGALINST (0x002UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_BKPT (0x003UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_LOADADDRMISALIGN (0x004UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_LOADACCESSFAULT (0x005UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_STOREADDRMISALIGN (0x006UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_STOREACCESSFAULT (0x007UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_ECALLMMODE (0x00BUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_MISALIGNSTACKING (0x018UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_BUSFAULTSTACKING (0x019UL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_INTVECTORFAULT (0x01AUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_MISALIGNUNSTACKING (0x01BUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_BUSFAULTUNSTACKING (0x01CUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_STORETIMEOUTFAULT (0x01DUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_LOADTIMEOUTFAULT (0x01EUL)
  #define VPRCSR_MCAUSE_EXCEPTIONCODE_STACKINGEXCFAULT (0x01FUL)

/* MPIL @Bits 16..23 : Previous interrupt level */
  #define VPRCSR_MCAUSE_MPIL_Pos (16UL)
  #define VPRCSR_MCAUSE_MPIL_Msk (0xFFUL << VPRCSR_MCAUSE_MPIL_Pos)

/* MPIE @Bit 27 : Previous interrupt enable, same as MSTATUS.MPIE */
  #define VPRCSR_MCAUSE_MPIE_Pos (27UL)
  #define VPRCSR_MCAUSE_MPIE_Msk (0x1UL << VPRCSR_MCAUSE_MPIE_Pos)

/* MPP @Bits 28..29 : Previous privilege mode, same as MSTATUS.MPP */
  #define VPRCSR_MCAUSE_MPP_Pos (28UL)
  #define VPRCSR_MCAUSE_MPP_Msk (0x3UL << VPRCSR_MCAUSE_MPP_Pos)

/* MINHV @Bit 30 : In hardware vectoring */
  #define VPRCSR_MCAUSE_MINHV_Pos (30UL)
  #define VPRCSR_MCAUSE_MINHV_Msk (0x1UL << VPRCSR_MCAUSE_MINHV_Pos)

/* INTERRUPT @Bit 31 : Interrupt bit */
  #define VPRCSR_MCAUSE_INTERRUPT_Pos (31UL)
  #define VPRCSR_MCAUSE_INTERRUPT_Msk (0x1UL << VPRCSR_MCAUSE_INTERRUPT_Pos)
  #define VPRCSR_MCAUSE_INTERRUPT_Min (0x0UL)
  #define VPRCSR_MCAUSE_INTERRUPT_Max (0x1UL)
  #define VPRCSR_MCAUSE_INTERRUPT_EXCEPTION (0x0UL)
  #define VPRCSR_MCAUSE_INTERRUPT_INTERRUPT (0x1UL)


/**
  * @brief MTVAL [VPRCSR_MTVAL] Machine Trap Value
  */
  #define VPRCSR_MTVAL (0x00000343ul)
  #define VPRCSR_MTVAL_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Trap Value */
  #define VPRCSR_MTVAL_VAL_Pos (0UL)
  #define VPRCSR_MTVAL_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MTVAL_VAL_Pos)


/**
  * @brief MINTSTATUS [VPRCSR_MINTSTATUS] M-mode Interrupt Status
  */
  #define VPRCSR_MINTSTATUS (0x00000346ul)
  #define VPRCSR_MINTSTATUS_ResetValue (0x00000000UL)

/* MIL @Bits 24..31 : M-Mode interrupt level */
  #define VPRCSR_MINTSTATUS_MIL_Pos (24UL)
  #define VPRCSR_MINTSTATUS_MIL_Msk (0xFFUL << VPRCSR_MINTSTATUS_MIL_Pos)


/**
  * @brief MINTTHRESH [VPRCSR_MINTTHRESH] M-mode Interrupt-level Threshold
  */
  #define VPRCSR_MINTTHRESH (0x00000347ul)
  #define VPRCSR_MINTTHRESH_ResetValue (0x00000000UL)

/* TH @Bits 0..7 : M-Mode Interrupt-level Threshold */
  #define VPRCSR_MINTTHRESH_TH_Pos (0UL)
  #define VPRCSR_MINTTHRESH_TH_Msk (0xFFUL << VPRCSR_MINTTHRESH_TH_Pos)
  #define VPRCSR_MINTTHRESH_TH_Min (0x0UL)
  #define VPRCSR_MINTTHRESH_TH_Max (0xFFUL)
  #define VPRCSR_MINTTHRESH_TH_DISABLED (0x00UL)
  #define VPRCSR_MINTTHRESH_TH_THRESHLEVEL0 (0x3FUL)
  #define VPRCSR_MINTTHRESH_TH_THRESHLEVEL1 (0x7FUL)
  #define VPRCSR_MINTTHRESH_TH_THRESHLEVEL2 (0xBFUL)
  #define VPRCSR_MINTTHRESH_TH_THRESHLEVEL3 (0xFFUL)


/**
  * @brief MCLICBASE [VPRCSR_MCLICBASE] Machine CLIC Base
  */
  #define VPRCSR_MCLICBASE (0x00000350ul)
  #define VPRCSR_MCLICBASE_ResetValue (0xF0000000UL)

/* VAL @Bits 0..31 : CLIC base address value */
  #define VPRCSR_MCLICBASE_VAL_Pos (0UL)
  #define VPRCSR_MCLICBASE_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MCLICBASE_VAL_Pos)


/**
  * @brief TSELECT [VPRCSR_TSELECT] Trigger Select
  */
  #define VPRCSR_TSELECT (0x000007A0ul)
  #define VPRCSR_TSELECT_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Trigger Select value */
  #define VPRCSR_TSELECT_VAL_Pos (0UL)
  #define VPRCSR_TSELECT_VAL_Msk (0xFFFFFFFFUL << VPRCSR_TSELECT_VAL_Pos)


/**
  * @brief TDATA1 [VPRCSR_TDATA1] Trigger Data 1
  */
  #define VPRCSR_TDATA1 (0x000007A1ul)
  #define VPRCSR_TDATA1_ResetValue (0x00000000UL)

/* DATA @Bits 0..26 : Trigger Specific Data */
  #define VPRCSR_TDATA1_DATA_Pos (0UL)
  #define VPRCSR_TDATA1_DATA_Msk (0x7FFFFFFUL << VPRCSR_TDATA1_DATA_Pos)

/* DMODE @Bit 27 : Debug Mode */
  #define VPRCSR_TDATA1_DMODE_Pos (27UL)
  #define VPRCSR_TDATA1_DMODE_Msk (0x1UL << VPRCSR_TDATA1_DMODE_Pos)
  #define VPRCSR_TDATA1_DMODE_Min (0x0UL)
  #define VPRCSR_TDATA1_DMODE_Max (0x1UL)
  #define VPRCSR_TDATA1_DMODE_BOTH (0x0UL)           /*!< Both Debug and M-mode can write the tdata registers at the selected
                                                          tselect.*/
  #define VPRCSR_TDATA1_DMODE_ONLYDEBUG (0x1UL)      /*!< Only Debug Mode can write the tdata registers at the selected tselect.
                                                          Writes from other modes are ignored.*/

/* TYPE @Bits 28..31 : Type */
  #define VPRCSR_TDATA1_TYPE_Pos (28UL)
  #define VPRCSR_TDATA1_TYPE_Msk (0xFUL << VPRCSR_TDATA1_TYPE_Pos)
  #define VPRCSR_TDATA1_TYPE_Min (0x0UL)
  #define VPRCSR_TDATA1_TYPE_Max (0xFUL)
  #define VPRCSR_TDATA1_TYPE_NOTRIGGER (0x0UL)
  #define VPRCSR_TDATA1_TYPE_MATCH (0x2UL)           /*!< The trigger is an address match trigger. The remaining bits in this
                                                          register act as described in mcontrol*/
  #define VPRCSR_TDATA1_TYPE_REMAP (0xFUL)           /*!< This trigger is a remapping trigger. The remaining bits in this
                                                          register behave as described in remapping functionality*/


/**
  * @brief TDATA2 [VPRCSR_TDATA2] Trigger Data 2
  */
  #define VPRCSR_TDATA2 (0x000007A2ul)
  #define VPRCSR_TDATA2_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Trigger Specific Data */
  #define VPRCSR_TDATA2_DATA_Pos (0UL)
  #define VPRCSR_TDATA2_DATA_Msk (0xFFFFFFFFUL << VPRCSR_TDATA2_DATA_Pos)


/**
  * @brief TDATA3 [VPRCSR_TDATA3] Trigger Data 3
  */
  #define VPRCSR_TDATA3 (0x000007A3ul)
  #define VPRCSR_TDATA3_ResetValue (0x00000000UL)

/* DATA @Bits 0..31 : Trigger Specific Data */
  #define VPRCSR_TDATA3_DATA_Pos (0UL)
  #define VPRCSR_TDATA3_DATA_Msk (0xFFFFFFFFUL << VPRCSR_TDATA3_DATA_Pos)


/**
  * @brief TINFO [VPRCSR_TINFO] Trigger Info
  */
  #define VPRCSR_TINFO (0x000007A4ul)
  #define VPRCSR_TINFO_ResetValue (0x00000000UL)

/* INFO @Bits 0..15 : Trigger Info value */
  #define VPRCSR_TINFO_INFO_Pos (0UL)
  #define VPRCSR_TINFO_INFO_Msk (0xFFFFUL << VPRCSR_TINFO_INFO_Pos)


/**
  * @brief TCONTROL [VPRCSR_TCONTROL] Trigger Control
  */
  #define VPRCSR_TCONTROL (0x000007A5ul)
  #define VPRCSR_TCONTROL_ResetValue (0x00000000UL)

/* MTE @Bit 3 : Mode Trigger Enable */
  #define VPRCSR_TCONTROL_MTE_Pos (3UL)
  #define VPRCSR_TCONTROL_MTE_Msk (0x1UL << VPRCSR_TCONTROL_MTE_Pos)
  #define VPRCSR_TCONTROL_MTE_Min (0x0UL)
  #define VPRCSR_TCONTROL_MTE_Max (0x1UL)
  #define VPRCSR_TCONTROL_MTE_DONTMATCH (0x0UL)
  #define VPRCSR_TCONTROL_MTE_MATCH (0x1UL)          /*!< Triggers do match/fire while the hart is in M-mode. When a trap into
                                                          M-mode is taken, mte is set to 0. When mret is executed, mte is set to
                                                          the value of mpte*/

/* MPTE @Bit 7 : Mode Previous Trigger Enable */
  #define VPRCSR_TCONTROL_MPTE_Pos (7UL)
  #define VPRCSR_TCONTROL_MPTE_Msk (0x1UL << VPRCSR_TCONTROL_MPTE_Pos)


/**
  * @brief DCSR [VPRCSR_DCSR] Debug Control and Status
  */
  #define VPRCSR_DCSR (0x000007B0ul)
  #define VPRCSR_DCSR_ResetValue (0x40000003UL)

/* PRV @Bits 0..1 : Privilege level */
  #define VPRCSR_DCSR_PRV_Pos (0UL)
  #define VPRCSR_DCSR_PRV_Msk (0x3UL << VPRCSR_DCSR_PRV_Pos)
  #define VPRCSR_DCSR_PRV_Min (0x3UL)
  #define VPRCSR_DCSR_PRV_Max (0x3UL)
  #define VPRCSR_DCSR_PRV_MACHINE (0x3UL)

/* STEP @Bit 2 : Step */
  #define VPRCSR_DCSR_STEP_Pos (2UL)
  #define VPRCSR_DCSR_STEP_Msk (0x1UL << VPRCSR_DCSR_STEP_Pos)

/* CAUSE @Bits 6..8 : Debug Mode enter cause */
  #define VPRCSR_DCSR_CAUSE_Pos (6UL)
  #define VPRCSR_DCSR_CAUSE_Msk (0x7UL << VPRCSR_DCSR_CAUSE_Pos)
  #define VPRCSR_DCSR_CAUSE_Min (0x1UL)
  #define VPRCSR_DCSR_CAUSE_Max (0x5UL)
  #define VPRCSR_DCSR_CAUSE_EBREAK (0x1UL)
  #define VPRCSR_DCSR_CAUSE_TRIGGER (0x2UL)          /*!< The Trigger Module caused a breakpoint exception. (priority 4,
                                                          highest)*/
  #define VPRCSR_DCSR_CAUSE_HALTREQ (0x3UL)          /*!< The debugger requested entry to Debug Mode using haltreq. (priority
                                                          1)*/
  #define VPRCSR_DCSR_CAUSE_STEP (0x4UL)
  #define VPRCSR_DCSR_CAUSE_RESETHALTREQ (0x5UL)     /*!< The hart halted directly out of reset due to resethaltreq. It is also
                                                          acceptable to report 3 when this happens. (priority 2)*/

/* STEPIE @Bit 11 : Step Interrupt Enable */
  #define VPRCSR_DCSR_STEPIE_Pos (11UL)
  #define VPRCSR_DCSR_STEPIE_Msk (0x1UL << VPRCSR_DCSR_STEPIE_Pos)
  #define VPRCSR_DCSR_STEPIE_Min (0x0UL)
  #define VPRCSR_DCSR_STEPIE_Max (0x1UL)
  #define VPRCSR_DCSR_STEPIE_Disabled (0x0UL)
  #define VPRCSR_DCSR_STEPIE_Enabled (0x1UL)         /*!< Interrupts are enabled during single stepping. Implementations may
                                                          hard wire this bit to 0. In that case interrupt behavior can be
                                                          emulated by the debugger.*/

/* EBREAKM @Bit 15 : M-mode ebreak */
  #define VPRCSR_DCSR_EBREAKM_Pos (15UL)
  #define VPRCSR_DCSR_EBREAKM_Msk (0x1UL << VPRCSR_DCSR_EBREAKM_Pos)
  #define VPRCSR_DCSR_EBREAKM_Min (0x0UL)
  #define VPRCSR_DCSR_EBREAKM_Max (0x1UL)
  #define VPRCSR_DCSR_EBREAKM_SPEC (0x0UL)           /*!< ebreak instructions in M-mode behave as described in the Privileged
                                                          Spe*/
  #define VPRCSR_DCSR_EBREAKM_ENTERDBG (0x1UL)

/* XDEBUGVER @Bits 28..31 : External Debug version */
  #define VPRCSR_DCSR_XDEBUGVER_Pos (28UL)
  #define VPRCSR_DCSR_XDEBUGVER_Msk (0xFUL << VPRCSR_DCSR_XDEBUGVER_Pos)
  #define VPRCSR_DCSR_XDEBUGVER_Min (0x4UL)
  #define VPRCSR_DCSR_XDEBUGVER_Max (0x4UL)
  #define VPRCSR_DCSR_XDEBUGVER_STDDBG (0x4UL)


/**
  * @brief DPC [VPRCSR_DPC] Debug PC
  */
  #define VPRCSR_DPC (0x000007B1ul)
  #define VPRCSR_DPC_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Debug PC value */
  #define VPRCSR_DPC_VAL_Pos (0UL)
  #define VPRCSR_DPC_VAL_Msk (0xFFFFFFFFUL << VPRCSR_DPC_VAL_Pos)


/**
  * @brief MCYCLE [VPRCSR_MCYCLE] Machine Cycle Counter
  */
  #define VPRCSR_MCYCLE (0x00000B00ul)
  #define VPRCSR_MCYCLE_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Cycle Counter value */
  #define VPRCSR_MCYCLE_VAL_Pos (0UL)
  #define VPRCSR_MCYCLE_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MCYCLE_VAL_Pos)


/**
  * @brief MINSTRET [VPRCSR_MINSTRET] Machine Instruction Counter
  */
  #define VPRCSR_MINSTRET (0x00000B02ul)
  #define VPRCSR_MINSTRET_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Instruction Counter value */
  #define VPRCSR_MINSTRET_VAL_Pos (0UL)
  #define VPRCSR_MINSTRET_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MINSTRET_VAL_Pos)


/**
  * @brief MCYCLEH [VPRCSR_MCYCLEH] Machine Cycle Counter (Upper part)
  */
  #define VPRCSR_MCYCLEH (0x00000B80ul)
  #define VPRCSR_MCYCLEH_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Cycle Counter value */
  #define VPRCSR_MCYCLEH_VAL_Pos (0UL)
  #define VPRCSR_MCYCLEH_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MCYCLEH_VAL_Pos)


/**
  * @brief MINSTRETH [VPRCSR_MINSTRETH] Machine Instruction Counter (Upper part)
  */
  #define VPRCSR_MINSTRETH (0x00000B82ul)
  #define VPRCSR_MINSTRETH_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Machine Instruction Counter (Upper part) value */
  #define VPRCSR_MINSTRETH_VAL_Pos (0UL)
  #define VPRCSR_MINSTRETH_VAL_Msk (0xFFFFFFFFUL << VPRCSR_MINSTRETH_VAL_Pos)


/**
  * @brief UCYCLE [VPRCSR_UCYCLE] User Cycle Counter
  */
  #define VPRCSR_UCYCLE (0x00000C00ul)
  #define VPRCSR_UCYCLE_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : User Cycle Counter value */
  #define VPRCSR_UCYCLE_VAL_Pos (0UL)
  #define VPRCSR_UCYCLE_VAL_Msk (0xFFFFFFFFUL << VPRCSR_UCYCLE_VAL_Pos)


/**
  * @brief UINSTRET [VPRCSR_UINSTRET] User Instruction Counter
  */
  #define VPRCSR_UINSTRET (0x00000C02ul)
  #define VPRCSR_UINSTRET_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : User Instruction Counter value */
  #define VPRCSR_UINSTRET_VAL_Pos (0UL)
  #define VPRCSR_UINSTRET_VAL_Msk (0xFFFFFFFFUL << VPRCSR_UINSTRET_VAL_Pos)


/**
  * @brief UCYCLEH [VPRCSR_UCYCLEH] User Cycle Counter (Upper part)
  */
  #define VPRCSR_UCYCLEH (0x00000C80ul)
  #define VPRCSR_UCYCLEH_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : User Cycle Counter value */
  #define VPRCSR_UCYCLEH_VAL_Pos (0UL)
  #define VPRCSR_UCYCLEH_VAL_Msk (0xFFFFFFFFUL << VPRCSR_UCYCLEH_VAL_Pos)


/**
  * @brief UINSTRETH [VPRCSR_UINSTRETH] User Instruction Counter (Upper part)
  */
  #define VPRCSR_UINSTRETH (0x00000C82ul)
  #define VPRCSR_UINSTRETH_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : User Instruction Counter (Upper part) value */
  #define VPRCSR_UINSTRETH_VAL_Pos (0UL)
  #define VPRCSR_UINSTRETH_VAL_Msk (0xFFFFFFFFUL << VPRCSR_UINSTRETH_VAL_Pos)


/**
  * @brief MVENDORID [VPRCSR_MVENDORID] Machine Vendor ID
  */
  #define VPRCSR_MVENDORID (0x00000F11ul)
  #define VPRCSR_MVENDORID_ResetValue (0x00000144UL)

/* OFFSET @Bits 0..6 : MVENDORID encodes the final byte in the Offset field, discarding the parity bit */
  #define VPRCSR_MVENDORID_OFFSET_Pos (0UL)
  #define VPRCSR_MVENDORID_OFFSET_Msk (0x7FUL << VPRCSR_MVENDORID_OFFSET_Pos)

/* BANK @Bits 7..31 : MVENDORID encodes the number of one-byte continuation codes in the Bank field */
  #define VPRCSR_MVENDORID_BANK_Pos (7UL)
  #define VPRCSR_MVENDORID_BANK_Msk (0x1FFFFFFUL << VPRCSR_MVENDORID_BANK_Pos)


/**
  * @brief MARCHID [VPRCSR_MARCHID] Machine Architecture ID
  */
  #define VPRCSR_MARCHID (0x00000F12ul)
  #define VPRCSR_MARCHID_ResetValue (0x800000AEUL)

/* MULDIV @Bits 0..1 : Indicates the MULDIV parameter option */
  #define VPRCSR_MARCHID_MULDIV_Pos (0UL)
  #define VPRCSR_MARCHID_MULDIV_Msk (0x3UL << VPRCSR_MARCHID_MULDIV_Pos)

/* HIBERNATE @Bit 2 : Indicates the POWEROFFSLEEP parameter option */
  #define VPRCSR_MARCHID_HIBERNATE_Pos (2UL)
  #define VPRCSR_MARCHID_HIBERNATE_Msk (0x1UL << VPRCSR_MARCHID_HIBERNATE_Pos)

/* DBG @Bit 3 : Indicates the DBG parameter option */
  #define VPRCSR_MARCHID_DBG_Pos (3UL)
  #define VPRCSR_MARCHID_DBG_Msk (0x1UL << VPRCSR_MARCHID_DBG_Pos)

/* REMAP @Bit 4 : Indicates the REMAP parameter option */
  #define VPRCSR_MARCHID_REMAP_Pos (4UL)
  #define VPRCSR_MARCHID_REMAP_Msk (0x1UL << VPRCSR_MARCHID_REMAP_Pos)

/* BUSWIDTH @Bit 5 : Indicates the BUS_WIDTH parameter option */
  #define VPRCSR_MARCHID_BUSWIDTH_Pos (5UL)
  #define VPRCSR_MARCHID_BUSWIDTH_Msk (0x1UL << VPRCSR_MARCHID_BUSWIDTH_Pos)

/* BKPT @Bits 6..9 : Indicates the BKPT parameter option */
  #define VPRCSR_MARCHID_BKPT_Pos (6UL)
  #define VPRCSR_MARCHID_BKPT_Msk (0xFUL << VPRCSR_MARCHID_BKPT_Pos)

/* CACHE @Bit 10 : Indicates that the CACHE is present */
  #define VPRCSR_MARCHID_CACHE_Pos (10UL)
  #define VPRCSR_MARCHID_CACHE_Msk (0x1UL << VPRCSR_MARCHID_CACHE_Pos)

/* CACHEEXTRATAGBUF @Bits 11..13 : Indicates the number of extra TAG buffers in CACHE */
  #define VPRCSR_MARCHID_CACHEEXTRATAGBUF_Pos (11UL)
  #define VPRCSR_MARCHID_CACHEEXTRATAGBUF_Msk (0x7UL << VPRCSR_MARCHID_CACHEEXTRATAGBUF_Pos) /*!< Bit mask of CACHEEXTRATAGBUF
                                                                            field.*/

/* IMPLEM @Bit 31 : Indicates a non-open implementation */
  #define VPRCSR_MARCHID_IMPLEM_Pos (31UL)
  #define VPRCSR_MARCHID_IMPLEM_Msk (0x1UL << VPRCSR_MARCHID_IMPLEM_Pos)


/**
  * @brief MIMPID [VPRCSR_MIMPID] Machine Implementation ID
  */
  #define VPRCSR_MIMPID (0x00000F13ul)
  #define VPRCSR_MIMPID_ResetValue (0x00010300UL)

/* PATCHREV @Bits 0..7 : Indicates the number of the patch revision */
  #define VPRCSR_MIMPID_PATCHREV_Pos (0UL)
  #define VPRCSR_MIMPID_PATCHREV_Msk (0xFFUL << VPRCSR_MIMPID_PATCHREV_Pos)

/* MINORREV @Bits 8..15 : Indicates the number of the minor revision */
  #define VPRCSR_MIMPID_MINORREV_Pos (8UL)
  #define VPRCSR_MIMPID_MINORREV_Msk (0xFFUL << VPRCSR_MIMPID_MINORREV_Pos)

/* MAJORREV @Bits 16..23 : Indicates the number of the major revison */
  #define VPRCSR_MIMPID_MAJORREV_Pos (16UL)
  #define VPRCSR_MIMPID_MAJORREV_Msk (0xFFUL << VPRCSR_MIMPID_MAJORREV_Pos)


/**
  * @brief MHARTID [VPRCSR_MHARTID] Machine Hart ID
  */
  #define VPRCSR_MHARTID (0x00000F14ul)
  #define VPRCSR_MHARTID_ResetValue (0x00000000UL)

/* HARTNUM @Bits 0..31 : Machine Hart ID value */
  #define VPRCSR_MHARTID_HARTNUM_Pos (0UL)
  #define VPRCSR_MHARTID_HARTNUM_Msk (0xFFFFFFFFUL << VPRCSR_MHARTID_HARTNUM_Pos)


/**
  * @brief NORDIC [VPRCSR_NORDIC] (unspecified)
  */

/**
  * @brief VPRNORDICCTRL [VPRCSR_NORDIC_VPRNORDICCTRL] Nordic Core Control
  */
  #define VPRCSR_NORDIC_VPRNORDICCTRL (0x000007C0ul)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ResetValue (0x00000000UL)

/* ENABLERTPERIPH @Bit 0 : Control bit to enable Real-Time Peripherals */
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Pos (0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Pos) /*!< Bit mask
                                                                            of ENABLERTPERIPH field.*/
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Disabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLERTPERIPH_Enabled (0x1UL)

/* ENABLEREMAP @Bit 3 : Enable remap feature */
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Pos (3UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Pos) /*!< Bit mask of
                                                                            ENABLEREMAP field.*/
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Disabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_ENABLEREMAP_Enabled (0x1UL)

/* CNTIRQENABLE @Bit 6 : Enables the generation of IRQ number COUNTER_IRQ_NUM */
  #define VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Pos (6UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Pos) /*!< Bit mask of
                                                                            CNTIRQENABLE field.*/
  #define VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Disabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_CNTIRQENABLE_Enabled (0x1UL)

/* VPRBUSPRI @Bit 7 : Arbitration priority on bus */
  #define VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_Pos (7UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_Pos) /*!< Bit mask of
                                                                            VPRBUSPRI field.*/
  #define VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_LowPriority (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_VPRBUSPRI_HighPriority (0x1UL)

/* NORDICKEY @Bits 16..31 : Used in order to protect the write to this register */
  #define VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Pos (16UL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Msk (0xFFFFUL << VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Pos) /*!< Bit mask of
                                                                            NORDICKEY field.*/
  #define VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Min (0x507DUL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Max (0x507DUL)
  #define VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Enabled (0x507DUL)


/**
  * @brief VPRNORDICSLEEPCTRL [VPRCSR_NORDIC_VPRNORDICSLEEPCTRL] Nordic Sleep Control
  */
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL (0x000007C1ul)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_ResetValue (0x00000002UL)

/* SLEEPSTATE @Bits 0..3 : Sleep State */
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_Pos (0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_Msk (0xFUL << VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_Pos) /*!< Bit
                                                                            mask of SLEEPSTATE field.*/
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_Max (0xFUL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_WAIT (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_RESET (0x2UL) /*!< Sleep state default reset value. Going to sleep with
                                                                         sleep state = RESET has the same effect as going to
                                                                         sleep with sleep state = WAIT*/
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_SLEEP (0x5UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_DEEPSLEEP (0x7UL) /*!< Sleep is turning the clock off and power is turned
                                                                            off*/
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_HIBERNATE (0xFUL) /*!< sleep is turning the clock off and all the
                                                                            registers are saved automatically, restart by a
                                                                            reset*/

/* RETURNTOSLEEP @Bit 16 : Return to Sleep */
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Pos (16UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Pos) /*!<
                                                                            Bit mask of RETURNTOSLEEP field.*/
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Disabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_RETURNTOSLEEP_Enabled (0x1UL)

/* STACKONSLEEP @Bit 17 : Stack on Sleep */
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Pos (17UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Pos) /*!<
                                                                            Bit mask of STACKONSLEEP field.*/
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Disabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_STACKONSLEEP_Enabled (0x1UL)


/**
  * @brief VPRNORDICFEATURESDISABLE [VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE] (unspecified)
  */
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE (0x000007C2ul)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_ResetValue (0x00000002UL) /*!< Reset value of VPRNORDICFEATURESDISABLE
                                                                            register.*/

/* DISABLECLICROUNDROBIN @Bit 3 : Disable CLIC Round Robin */
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Pos (3UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Pos)
                                                                            /*!< Bit mask of DISABLECLICROUNDROBIN field.*/
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Min (0x0UL) /*!< Min enumerator value of
                                                                            DISABLECLICROUNDROBIN field.*/
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Max (0x1UL) /*!< Max enumerator value of
                                                                            DISABLECLICROUNDROBIN field.*/
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Enabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_DISABLECLICROUNDROBIN_Disabled (0x1UL)

/* UNRECOVRETURN @Bit 4 : Unrecoverable Return */
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Pos (4UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Msk (0x1UL << VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Pos)
                                                                            /*!< Bit mask of UNRECOVRETURN field.*/
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Min (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Max (0x1UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Disabled (0x0UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_UNRECOVRETURN_Enabled (0x1UL)

/* NORDICKEY @Bits 16..31 : Used in order to protect the write to this register */
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_NORDICKEY_Pos (16UL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_NORDICKEY_Msk (0xFFFFUL << VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_NORDICKEY_Pos)
                                                                            /*!< Bit mask of NORDICKEY field.*/
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_NORDICKEY_Min (0x507DUL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_NORDICKEY_Max (0x507DUL)
  #define VPRCSR_NORDIC_VPRNORDICFEATURESDISABLE_NORDICKEY_Enabled (0x507DUL)


/**
  * @brief VIOPINS [VPRCSR_NORDIC_VIOPINS] VPR pins used for Real Time Peripherals VIO
  */
  #define VPRCSR_NORDIC_VIOPINS (0x000007C3ul)
  #define VPRCSR_NORDIC_VIOPINS_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : VPR pins used for Real Time Peripherals VIO */
  #define VPRCSR_NORDIC_VIOPINS_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_VIOPINS_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_VIOPINS_VAL_Pos)


/**
  * @brief EXTPARAMS [VPRCSR_NORDIC_EXTPARAMS] Reads values of external configuration parameters
  */
  #define VPRCSR_NORDIC_EXTPARAMS (0x000007C4ul)
  #define VPRCSR_NORDIC_EXTPARAMS_ResetValue (0x00000016UL)

/* MULDIV @Bits 0..1 : value of MULDIV */
  #define VPRCSR_NORDIC_EXTPARAMS_MULDIV_Pos (0UL)
  #define VPRCSR_NORDIC_EXTPARAMS_MULDIV_Msk (0x3UL << VPRCSR_NORDIC_EXTPARAMS_MULDIV_Pos)

/* DBG @Bit 2 : value of DBG */
  #define VPRCSR_NORDIC_EXTPARAMS_DBG_Pos (2UL)
  #define VPRCSR_NORDIC_EXTPARAMS_DBG_Msk (0x1UL << VPRCSR_NORDIC_EXTPARAMS_DBG_Pos)

/* BKPT @Bits 3..6 : value of BKPT */
  #define VPRCSR_NORDIC_EXTPARAMS_BKPT_Pos (3UL)
  #define VPRCSR_NORDIC_EXTPARAMS_BKPT_Msk (0xFUL << VPRCSR_NORDIC_EXTPARAMS_BKPT_Pos)

/* REMAP @Bit 7 : value of REMAP */
  #define VPRCSR_NORDIC_EXTPARAMS_REMAP_Pos (7UL)
  #define VPRCSR_NORDIC_EXTPARAMS_REMAP_Msk (0x1UL << VPRCSR_NORDIC_EXTPARAMS_REMAP_Pos)


/**
  * @brief CACHE [VPRCSR_NORDIC_CACHE] (unspecified)
  */

/**
  * @brief AXCACHE [VPRCSR_NORDIC_CACHE_AXCACHE] Memory type encoding
  */
  #define VPRCSR_NORDIC_CACHE_AXCACHE (0x000007C5ul)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_ResetValue (0x00000EEEUL)

/* AWCACHE @Bits 0..3 : Memory type for data stores */
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_Pos (0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_Msk (0xFUL << VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_Pos) /*!< Bit mask of AWCACHE
                                                                            field.*/
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_Max (0xFUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_DEVNONBUFF (0x0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_DEVBUFF (0x1UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_NNONCACHENONBUFF (0x2UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_NNONCACHEBUFF (0x3UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITETHNALLOC (0x6UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITETHRALLOC (0x6UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITETHWALLOC (0xEUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITETHRWALLOC (0xEUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITEBACKNALLOC (0x7UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITEBACKRALLOC (0x7UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITEBACKWALLOC (0xFUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_AWCACHE_WRITEBACKRWALLOC (0xFUL)

/* IARCACHE @Bits 4..7 : Memory type for instruction loads */
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_Pos (4UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_Msk (0xFUL << VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_Pos) /*!< Bit mask of IARCACHE
                                                                            field.*/
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_Max (0xFUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_DEVNONBUFF (0x0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_DEVBUFF (0x1UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_NNONCACHENONBUFF (0x2UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_NNONCACHEBUFF (0x3UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITETHNALLOC (0xAUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITETHRALLOC (0xEUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITETHWALLOC (0xAUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITETHRWALLOC (0xEUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITEBACKNALLOC (0xBUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITEBACKRALLOC (0xFUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITEBACKWALLOC (0xBUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_IARCACHE_WRITEBACKRWALLOC (0xFUL)

/* DARCACHE @Bits 8..11 : Memory type for data loads */
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_Pos (8UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_Msk (0xFUL << VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_Pos) /*!< Bit mask of DARCACHE
                                                                            field.*/
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_Max (0xFUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_DEVNONBUFF (0x0UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_DEVBUFF (0x1UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_NNONCACHENONBUFF (0x2UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_NNONCACHEBUFF (0x3UL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITETHNALLOC (0xAUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITETHRALLOC (0xEUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITETHWALLOC (0xAUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITETHRWALLOC (0xEUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITEBACKNALLOC (0xBUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITEBACKRALLOC (0xFUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITEBACKWALLOC (0xBUL)
  #define VPRCSR_NORDIC_CACHE_AXCACHE_DARCACHE_WRITEBACKRWALLOC (0xFUL)


/**
  * @brief CTRL [VPRCSR_NORDIC_CACHE_CTRL] Cache control
  */
  #define VPRCSR_NORDIC_CACHE_CTRL (0x000007C8ul)
  #define VPRCSR_NORDIC_CACHE_CTRL_ResetValue (0x00000000UL)

/* ENABLE @Bit 0 : Enable cache */
  #define VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Pos (0UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Msk (0x1UL << VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Pos)
  #define VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Max (0x1UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Disabled (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_ENABLE_Enabled (0x1UL)

/* CACHECLR @Bit 16 : Cache clear */
  #define VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_Pos (16UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_Msk (0x1UL << VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_Pos) /*!< Bit mask of CACHECLR
                                                                            field.*/
  #define VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_Max (0x1UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_NoOperation (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CTRL_CACHECLR_Clear (0x1UL)


/**
  * @brief CFG [VPRCSR_NORDIC_CACHE_CFG] Cache configuration
  */
  #define VPRCSR_NORDIC_CACHE_CFG (0x000007C9ul)
  #define VPRCSR_NORDIC_CACHE_CFG_ResetValue (0x00000000UL)

/* CACHESIZE @Bits 0..3 : Cache size is 2^CACHESIZE or (1 << CACHESIZE) KB, with a maximum size of 32KB (CACHESIZE = 5) */
  #define VPRCSR_NORDIC_CACHE_CFG_CACHESIZE_Pos (0UL)
  #define VPRCSR_NORDIC_CACHE_CFG_CACHESIZE_Msk (0xFUL << VPRCSR_NORDIC_CACHE_CFG_CACHESIZE_Pos) /*!< Bit mask of CACHESIZE
                                                                            field.*/
  #define VPRCSR_NORDIC_CACHE_CFG_CACHESIZE_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CFG_CACHESIZE_Max (0xFUL)

/* CACHELINESIZE @Bit 8 : Cache line size */
  #define VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_Pos (8UL)
  #define VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_Msk (0x1UL << VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_Pos) /*!< Bit mask of
                                                                            CACHELINESIZE field.*/
  #define VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_Min (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_Max (0x1UL)
  #define VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_CachelineSize32B (0x0UL)
  #define VPRCSR_NORDIC_CACHE_CFG_CACHELINESIZE_CachelineSize64B (0x1UL)


/**
  * @brief DATATAGADDR [VPRCSR_NORDIC_CACHE_DATATAGADDR] Cache tag base address
  */
  #define VPRCSR_NORDIC_CACHE_DATATAGADDR (0x000007CAul)
  #define VPRCSR_NORDIC_CACHE_DATATAGADDR_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Cache tag base address value */
  #define VPRCSR_NORDIC_CACHE_DATATAGADDR_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CACHE_DATATAGADDR_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_CACHE_DATATAGADDR_VAL_Pos) /*!< Bit mask of VAL
                                                                            field.*/
  #define VPRCSR_NORDIC_CACHE_DATATAGADDR_VAL_Min (0x00000000UL)
  #define VPRCSR_NORDIC_CACHE_DATATAGADDR_VAL_Max (0xFFFFFFFCUL)


/**
  * @brief DATABASEADDR [VPRCSR_NORDIC_CACHE_DATABASEADDR] Cache data base address
  */
  #define VPRCSR_NORDIC_CACHE_DATABASEADDR (0x000007CBul)
  #define VPRCSR_NORDIC_CACHE_DATABASEADDR_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Cache data base address value */
  #define VPRCSR_NORDIC_CACHE_DATABASEADDR_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CACHE_DATABASEADDR_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_CACHE_DATABASEADDR_VAL_Pos) /*!< Bit mask of
                                                                            VAL field.*/
  #define VPRCSR_NORDIC_CACHE_DATABASEADDR_VAL_Min (0x00000000UL)
  #define VPRCSR_NORDIC_CACHE_DATABASEADDR_VAL_Max (0xFFFFFFFCUL)


/**
  * @brief RTPERIPHCTRL [VPRCSR_NORDIC_RTPERIPHCTRL] RT peripheral control
  */
  #define VPRCSR_NORDIC_RTPERIPHCTRL (0x000007CCul)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_ResetValue (0x00000000UL)

/* CLOCKPOLARITY @Bit 0 : Clock polarity */
  #define VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_Pos (0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_Msk (0x1UL << VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_Pos) /*!< Bit mask of
                                                                            CLOCKPOLARITY field.*/
  #define VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_Min (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_Max (0x1UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_Low (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_CLOCKPOLARITY_High (0x1UL)

/* STOPCOUNTERS @Bit 4 : Stop counters CNT0 and CNT1 on OUTB under-run, or on INB Overflow if OUTMODE2 and INMODE2 */
  #define VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_Pos (4UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_Msk (0x1UL << VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_Pos) /*!< Bit mask of
                                                                            STOPCOUNTERS field.*/
  #define VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_Min (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_Max (0x1UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_NoStop (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_STOPCOUNTERS_Stop (0x1UL)

/* INSEL @Bit 8 : Input pin selection */
  #define VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_Pos (8UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_Msk (0x1UL << VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_Pos)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_Min (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_Max (0x1UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_SamePin (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_INSEL_SeparatePin (0x1UL)

/* EVPINSEL @Bits 12..15 : Event pin select */
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVPINSEL_Pos (12UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVPINSEL_Msk (0xFUL << VPRCSR_NORDIC_RTPERIPHCTRL_EVPINSEL_Pos) /*!< Bit mask of EVPINSEL
                                                                            field.*/

/* EVEDGE @Bits 16..17 : Event pin edge */
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_Pos (16UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_Msk (0x3UL << VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_Pos)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_Min (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_Max (0x2UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_AnyEdge (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_RisingEdge (0x1UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVEDGE_FallingEdge (0x2UL)

/* EVSAMPLE @Bit 20 : Event pin sampling */
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Pos (20UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Msk (0x1UL << VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Pos) /*!< Bit mask of EVSAMPLE
                                                                            field.*/
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Min (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Max (0x1UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Continuous (0x0UL)
  #define VPRCSR_NORDIC_RTPERIPHCTRL_EVSAMPLE_Event (0x1UL)


/**
  * @brief RTPERIPHSTATUS [VPRCSR_NORDIC_RTPERIPHSTATUS] Real-Time Peripheral Status
  */
  #define VPRCSR_NORDIC_RTPERIPHSTATUS (0x000007CDul)
  #define VPRCSR_NORDIC_RTPERIPHSTATUS_ResetValue (0x00000000UL)

/* OUTBUNDERRUN @Bit 0 : Set if OUTB value is not written in time for the next shift out event, which means OUT data is not
                         valid. Can only be cleared by SW by writing a 1 to the bit. */

  #define VPRCSR_NORDIC_RTPERIPHSTATUS_OUTBUNDERRUN_Pos (0UL)
  #define VPRCSR_NORDIC_RTPERIPHSTATUS_OUTBUNDERRUN_Msk (0x1UL << VPRCSR_NORDIC_RTPERIPHSTATUS_OUTBUNDERRUN_Pos) /*!< Bit mask
                                                                            of OUTBUNDERRUN field.*/

/* INBOVERRUN @Bit 1 : Set if INB value is not read in time for the next shift in event, which means IN data is lost. Can only
                       be cleared by SW by writing a 1 to the bit. */

  #define VPRCSR_NORDIC_RTPERIPHSTATUS_INBOVERRUN_Pos (1UL)
  #define VPRCSR_NORDIC_RTPERIPHSTATUS_INBOVERRUN_Msk (0x1UL << VPRCSR_NORDIC_RTPERIPHSTATUS_INBOVERRUN_Pos) /*!< Bit mask of
                                                                            INBOVERRUN field.*/


/**
  * @brief CNTMODE0 [VPRCSR_NORDIC_CNTMODE0] CNT0 Mode
  */
  #define VPRCSR_NORDIC_CNTMODE0 (0x000007D0ul)
  #define VPRCSR_NORDIC_CNTMODE0_ResetValue (0x00000000UL)

/* CNTMODE0 @Bits 0..2 : CNT0 Mode */
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_Pos (0UL)
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_Msk (0x7UL << VPRCSR_NORDIC_CNTMODE0_CNTMODE0_Pos)
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_Min (0x0UL)
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_Max (0x5UL)
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_STOP (0x0UL)
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_WRAP (0x1UL)
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_RELOAD (0x2UL) /*!< When CNT0 reaches 0 it will continue counting from the value in
                                                              CNTTOP*/
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_TRIGCOMB (0x3UL) /*!< When CNT0 reaches 0 it is reloaded from CNTTOP and stops.
                                                                Counting will restart when a VIO event happens*/
  #define VPRCSR_NORDIC_CNTMODE0_CNTMODE0_TRIGWRAP (0x5UL) /*!< When the counter reaches 0 it wraps to MAX and stops. Counting
                                                                will restart when a VIO event happens*/


/**
  * @brief CNTMODE1 [VPRCSR_NORDIC_CNTMODE1] CNT1 Mode
  */
  #define VPRCSR_NORDIC_CNTMODE1 (0x000007D1ul)
  #define VPRCSR_NORDIC_CNTMODE1_ResetValue (0x00000000UL)

/* CNTMODE1 @Bits 0..2 : CNT1 Mode */
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_Pos (0UL)
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_Msk (0x7UL << VPRCSR_NORDIC_CNTMODE1_CNTMODE1_Pos)
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_Min (0x0UL)
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_Max (0x5UL)
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_STOP (0x0UL)
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_WRAP (0x1UL)
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_RELOAD (0x2UL) /*!< When CNT1 reches 0 it will continue counting from the value in
                                                              CNTTOP*/
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_TRIGCOMB (0x3UL) /*!< In combine mode mode CNT1 acts as an extension of CNT0 (16 most
                                                                significant bits of the 32-bit CNT)*/
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_TRIGRELOAD (0x4UL) /*!< When CNT1 reaches 0 it is reloaded from CNTTOP and stops.
                                                                  Counting will restart when a VIO event happens*/
  #define VPRCSR_NORDIC_CNTMODE1_CNTMODE1_TRIGWRAP (0x5UL) /*!< When CNT1 reaches 0 it wraps to MAX and stops. Counting will
                                                                restart when a VIO event happens*/


/**
  * @brief CNT [VPRCSR_NORDIC_CNT] 32-bit Counter
  */
  #define VPRCSR_NORDIC_CNT (0x000007D2ul)
  #define VPRCSR_NORDIC_CNT_ResetValue (0x00000000UL)

/* CNT0 @Bits 0..15 : 16-bit Counter 0 */
  #define VPRCSR_NORDIC_CNT_CNT0_Pos (0UL)
  #define VPRCSR_NORDIC_CNT_CNT0_Msk (0xFFFFUL << VPRCSR_NORDIC_CNT_CNT0_Pos)

/* CNT1 @Bits 16..31 : 16-bit Counter 1 */
  #define VPRCSR_NORDIC_CNT_CNT1_Pos (16UL)
  #define VPRCSR_NORDIC_CNT_CNT1_Msk (0xFFFFUL << VPRCSR_NORDIC_CNT_CNT1_Pos)


/**
  * @brief CNTTOP [VPRCSR_NORDIC_CNTTOP] Counter Top
  */
  #define VPRCSR_NORDIC_CNTTOP (0x000007D3ul)
  #define VPRCSR_NORDIC_CNTTOP_ResetValue (0x00000000UL)

/* CNT0RELOAD @Bits 0..15 : Reload value for CNT0 */
  #define VPRCSR_NORDIC_CNTTOP_CNT0RELOAD_Pos (0UL)
  #define VPRCSR_NORDIC_CNTTOP_CNT0RELOAD_Msk (0xFFFFUL << VPRCSR_NORDIC_CNTTOP_CNT0RELOAD_Pos) /*!< Bit mask of CNT0RELOAD
                                                                            field.*/

/* CNT1RELOAD @Bits 16..31 : Reload value for CNT1 */
  #define VPRCSR_NORDIC_CNTTOP_CNT1RELOAD_Pos (16UL)
  #define VPRCSR_NORDIC_CNTTOP_CNT1RELOAD_Msk (0xFFFFUL << VPRCSR_NORDIC_CNTTOP_CNT1RELOAD_Pos) /*!< Bit mask of CNT1RELOAD
                                                                            field.*/


/**
  * @brief CNTADD [VPRCSR_NORDIC_CNTADD] CNT Add
  */
  #define VPRCSR_NORDIC_CNTADD (0x000007D4ul)
  #define VPRCSR_NORDIC_CNTADD_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Value added to CNT */
  #define VPRCSR_NORDIC_CNTADD_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CNTADD_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_CNTADD_VAL_Pos)


/**
  * @brief CNT0 [VPRCSR_NORDIC_CNT0] 16 bit Counter 0
  */
  #define VPRCSR_NORDIC_CNT0 (0x000007D5ul)
  #define VPRCSR_NORDIC_CNT0_ResetValue (0x00000000UL)

/* VAL @Bits 0..15 : CNT0 value */
  #define VPRCSR_NORDIC_CNT0_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CNT0_VAL_Msk (0xFFFFUL << VPRCSR_NORDIC_CNT0_VAL_Pos)


/**
  * @brief CNTADD0 [VPRCSR_NORDIC_CNTADD0] CNT0 Add
  */
  #define VPRCSR_NORDIC_CNTADD0 (0x000007D6ul)
  #define VPRCSR_NORDIC_CNTADD0_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Value added to CNT0 */
  #define VPRCSR_NORDIC_CNTADD0_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CNTADD0_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_CNTADD0_VAL_Pos)


/**
  * @brief CNT1 [VPRCSR_NORDIC_CNT1] 16-bit Counter 1
  */
  #define VPRCSR_NORDIC_CNT1 (0x000007D7ul)
  #define VPRCSR_NORDIC_CNT1_ResetValue (0x00000000UL)

/* VAL @Bits 0..15 : CNT1 value */
  #define VPRCSR_NORDIC_CNT1_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CNT1_VAL_Msk (0xFFFFUL << VPRCSR_NORDIC_CNT1_VAL_Pos)


/**
  * @brief CNTADD1 [VPRCSR_NORDIC_CNTADD1] CNT1 Add
  */
  #define VPRCSR_NORDIC_CNTADD1 (0x000007D8ul)
  #define VPRCSR_NORDIC_CNTADD1_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : Value added to CNT1 */
  #define VPRCSR_NORDIC_CNTADD1_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_CNTADD1_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_CNTADD1_VAL_Pos)


/**
  * @brief WAIT0 [VPRCSR_NORDIC_WAIT0] Wait 0
  */
  #define VPRCSR_NORDIC_WAIT0 (0x000007DAul)
  #define VPRCSR_NORDIC_WAIT0_ResetValue (0x00000000UL)

/* DATA @Bits 0..15 : Value to write to CNT0 */
  #define VPRCSR_NORDIC_WAIT0_DATA_Pos (0UL)
  #define VPRCSR_NORDIC_WAIT0_DATA_Msk (0xFFFFUL << VPRCSR_NORDIC_WAIT0_DATA_Pos)

/* WRITEDATA @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_WAIT0_WRITEDATA_Pos (16UL)
  #define VPRCSR_NORDIC_WAIT0_WRITEDATA_Msk (0x1UL << VPRCSR_NORDIC_WAIT0_WRITEDATA_Pos)
  #define VPRCSR_NORDIC_WAIT0_WRITEDATA_Min (0x0UL)
  #define VPRCSR_NORDIC_WAIT0_WRITEDATA_Max (0x1UL)
  #define VPRCSR_NORDIC_WAIT0_WRITEDATA_WAIT (0x0UL)
  #define VPRCSR_NORDIC_WAIT0_WRITEDATA_WRITE (0x1UL)


/**
  * @brief WAIT1 [VPRCSR_NORDIC_WAIT1] Wait 1
  */
  #define VPRCSR_NORDIC_WAIT1 (0x000007DBul)
  #define VPRCSR_NORDIC_WAIT1_ResetValue (0x00000000UL)

/* DATA @Bits 0..15 : Value to write to CNT1 */
  #define VPRCSR_NORDIC_WAIT1_DATA_Pos (0UL)
  #define VPRCSR_NORDIC_WAIT1_DATA_Msk (0xFFFFUL << VPRCSR_NORDIC_WAIT1_DATA_Pos)

/* WRITEDATA @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_WAIT1_WRITEDATA_Pos (16UL)
  #define VPRCSR_NORDIC_WAIT1_WRITEDATA_Msk (0x1UL << VPRCSR_NORDIC_WAIT1_WRITEDATA_Pos)
  #define VPRCSR_NORDIC_WAIT1_WRITEDATA_Min (0x0UL)
  #define VPRCSR_NORDIC_WAIT1_WRITEDATA_Max (0x1UL)
  #define VPRCSR_NORDIC_WAIT1_WRITEDATA_WAIT (0x0UL)
  #define VPRCSR_NORDIC_WAIT1_WRITEDATA_WRITE (0x1UL)


/**
  * @brief WAIT [VPRCSR_NORDIC_WAIT] Wait
  */
  #define VPRCSR_NORDIC_WAIT (0x000007DCul)
  #define VPRCSR_NORDIC_WAIT_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : (unspecified) */
  #define VPRCSR_NORDIC_WAIT_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_WAIT_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_WAIT_VAL_Pos)


/**
  * @brief TASKS [VPRCSR_NORDIC_TASKS] DPPI Tasks
  */
  #define VPRCSR_NORDIC_TASKS (0x000007E0ul)
  #define VPRCSR_NORDIC_TASKS_ResetValue (0x00000000UL)

/* TASKS0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS0_Pos (0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS0_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS0_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS0_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS0_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS0_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS0_Enabled (0x1UL)

/* TASKS1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS1_Pos (1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS1_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS1_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS1_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS1_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS1_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS1_Enabled (0x1UL)

/* TASKS2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS2_Pos (2UL)
  #define VPRCSR_NORDIC_TASKS_TASKS2_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS2_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS2_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS2_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS2_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS2_Enabled (0x1UL)

/* TASKS3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS3_Pos (3UL)
  #define VPRCSR_NORDIC_TASKS_TASKS3_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS3_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS3_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS3_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS3_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS3_Enabled (0x1UL)

/* TASKS4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS4_Pos (4UL)
  #define VPRCSR_NORDIC_TASKS_TASKS4_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS4_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS4_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS4_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS4_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS4_Enabled (0x1UL)

/* TASKS5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS5_Pos (5UL)
  #define VPRCSR_NORDIC_TASKS_TASKS5_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS5_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS5_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS5_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS5_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS5_Enabled (0x1UL)

/* TASKS6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS6_Pos (6UL)
  #define VPRCSR_NORDIC_TASKS_TASKS6_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS6_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS6_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS6_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS6_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS6_Enabled (0x1UL)

/* TASKS7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS7_Pos (7UL)
  #define VPRCSR_NORDIC_TASKS_TASKS7_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS7_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS7_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS7_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS7_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS7_Enabled (0x1UL)

/* TASKS8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS8_Pos (8UL)
  #define VPRCSR_NORDIC_TASKS_TASKS8_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS8_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS8_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS8_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS8_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS8_Enabled (0x1UL)

/* TASKS9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS9_Pos (9UL)
  #define VPRCSR_NORDIC_TASKS_TASKS9_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS9_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS9_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS9_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS9_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS9_Enabled (0x1UL)

/* TASKS10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS10_Pos (10UL)
  #define VPRCSR_NORDIC_TASKS_TASKS10_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS10_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS10_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS10_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS10_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS10_Enabled (0x1UL)

/* TASKS11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS11_Pos (11UL)
  #define VPRCSR_NORDIC_TASKS_TASKS11_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS11_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS11_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS11_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS11_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS11_Enabled (0x1UL)

/* TASKS12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS12_Pos (12UL)
  #define VPRCSR_NORDIC_TASKS_TASKS12_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS12_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS12_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS12_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS12_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS12_Enabled (0x1UL)

/* TASKS13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS13_Pos (13UL)
  #define VPRCSR_NORDIC_TASKS_TASKS13_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS13_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS13_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS13_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS13_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS13_Enabled (0x1UL)

/* TASKS14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS14_Pos (14UL)
  #define VPRCSR_NORDIC_TASKS_TASKS14_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS14_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS14_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS14_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS14_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS14_Enabled (0x1UL)

/* TASKS15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS15_Pos (15UL)
  #define VPRCSR_NORDIC_TASKS_TASKS15_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS15_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS15_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS15_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS15_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS15_Enabled (0x1UL)

/* TASKS16 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS16_Pos (16UL)
  #define VPRCSR_NORDIC_TASKS_TASKS16_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS16_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS16_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS16_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS16_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS16_Enabled (0x1UL)

/* TASKS17 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS17_Pos (17UL)
  #define VPRCSR_NORDIC_TASKS_TASKS17_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS17_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS17_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS17_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS17_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS17_Enabled (0x1UL)

/* TASKS18 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS18_Pos (18UL)
  #define VPRCSR_NORDIC_TASKS_TASKS18_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS18_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS18_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS18_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS18_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS18_Enabled (0x1UL)

/* TASKS19 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS19_Pos (19UL)
  #define VPRCSR_NORDIC_TASKS_TASKS19_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS19_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS19_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS19_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS19_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS19_Enabled (0x1UL)

/* TASKS20 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS20_Pos (20UL)
  #define VPRCSR_NORDIC_TASKS_TASKS20_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS20_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS20_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS20_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS20_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS20_Enabled (0x1UL)

/* TASKS21 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS21_Pos (21UL)
  #define VPRCSR_NORDIC_TASKS_TASKS21_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS21_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS21_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS21_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS21_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS21_Enabled (0x1UL)

/* TASKS22 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS22_Pos (22UL)
  #define VPRCSR_NORDIC_TASKS_TASKS22_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS22_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS22_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS22_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS22_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS22_Enabled (0x1UL)

/* TASKS23 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS23_Pos (23UL)
  #define VPRCSR_NORDIC_TASKS_TASKS23_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS23_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS23_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS23_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS23_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS23_Enabled (0x1UL)

/* TASKS24 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS24_Pos (24UL)
  #define VPRCSR_NORDIC_TASKS_TASKS24_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS24_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS24_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS24_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS24_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS24_Enabled (0x1UL)

/* TASKS25 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS25_Pos (25UL)
  #define VPRCSR_NORDIC_TASKS_TASKS25_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS25_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS25_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS25_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS25_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS25_Enabled (0x1UL)

/* TASKS26 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS26_Pos (26UL)
  #define VPRCSR_NORDIC_TASKS_TASKS26_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS26_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS26_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS26_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS26_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS26_Enabled (0x1UL)

/* TASKS27 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS27_Pos (27UL)
  #define VPRCSR_NORDIC_TASKS_TASKS27_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS27_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS27_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS27_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS27_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS27_Enabled (0x1UL)

/* TASKS28 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS28_Pos (28UL)
  #define VPRCSR_NORDIC_TASKS_TASKS28_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS28_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS28_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS28_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS28_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS28_Enabled (0x1UL)

/* TASKS29 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS29_Pos (29UL)
  #define VPRCSR_NORDIC_TASKS_TASKS29_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS29_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS29_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS29_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS29_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS29_Enabled (0x1UL)

/* TASKS30 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS30_Pos (30UL)
  #define VPRCSR_NORDIC_TASKS_TASKS30_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS30_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS30_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS30_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS30_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS30_Enabled (0x1UL)

/* TASKS31 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_TASKS_TASKS31_Pos (31UL)
  #define VPRCSR_NORDIC_TASKS_TASKS31_Msk (0x1UL << VPRCSR_NORDIC_TASKS_TASKS31_Pos)
  #define VPRCSR_NORDIC_TASKS_TASKS31_Min (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS31_Max (0x1UL)
  #define VPRCSR_NORDIC_TASKS_TASKS31_Disabled (0x0UL)
  #define VPRCSR_NORDIC_TASKS_TASKS31_Enabled (0x1UL)


/**
  * @brief SUBSCRIBE [VPRCSR_NORDIC_SUBSCRIBE] Enable Task Subscription
  */
  #define VPRCSR_NORDIC_SUBSCRIBE (0x000007E1ul)
  #define VPRCSR_NORDIC_SUBSCRIBE_ResetValue (0x00000000UL)

/* SUBSCRIBE0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Pos (0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Pos) /*!< Bit mask of SUBSCRIBE0
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE0_Enabled (0x1UL)

/* SUBSCRIBE1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Pos (1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Pos) /*!< Bit mask of SUBSCRIBE1
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE1_Enabled (0x1UL)

/* SUBSCRIBE2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Pos (2UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Pos) /*!< Bit mask of SUBSCRIBE2
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE2_Enabled (0x1UL)

/* SUBSCRIBE3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Pos (3UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Pos) /*!< Bit mask of SUBSCRIBE3
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE3_Enabled (0x1UL)

/* SUBSCRIBE4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE4_Pos (4UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE4_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE4_Pos) /*!< Bit mask of SUBSCRIBE4
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE4_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE4_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE4_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE4_Enabled (0x1UL)

/* SUBSCRIBE5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE5_Pos (5UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE5_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE5_Pos) /*!< Bit mask of SUBSCRIBE5
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE5_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE5_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE5_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE5_Enabled (0x1UL)

/* SUBSCRIBE6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE6_Pos (6UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE6_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE6_Pos) /*!< Bit mask of SUBSCRIBE6
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE6_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE6_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE6_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE6_Enabled (0x1UL)

/* SUBSCRIBE7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE7_Pos (7UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE7_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE7_Pos) /*!< Bit mask of SUBSCRIBE7
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE7_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE7_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE7_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE7_Enabled (0x1UL)

/* SUBSCRIBE8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE8_Pos (8UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE8_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE8_Pos) /*!< Bit mask of SUBSCRIBE8
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE8_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE8_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE8_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE8_Enabled (0x1UL)

/* SUBSCRIBE9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE9_Pos (9UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE9_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE9_Pos) /*!< Bit mask of SUBSCRIBE9
                                                                            field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE9_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE9_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE9_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE9_Enabled (0x1UL)

/* SUBSCRIBE10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE10_Pos (10UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE10_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE10_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE10 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE10_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE10_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE10_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE10_Enabled (0x1UL)

/* SUBSCRIBE11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE11_Pos (11UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE11_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE11_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE11 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE11_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE11_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE11_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE11_Enabled (0x1UL)

/* SUBSCRIBE12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE12_Pos (12UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE12_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE12_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE12 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE12_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE12_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE12_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE12_Enabled (0x1UL)

/* SUBSCRIBE13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE13_Pos (13UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE13_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE13_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE13 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE13_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE13_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE13_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE13_Enabled (0x1UL)

/* SUBSCRIBE14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE14_Pos (14UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE14_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE14_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE14 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE14_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE14_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE14_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE14_Enabled (0x1UL)

/* SUBSCRIBE15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE15_Pos (15UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE15_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE15_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE15 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE15_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE15_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE15_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE15_Enabled (0x1UL)

/* SUBSCRIBE16 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE16_Pos (16UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE16_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE16_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE16 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE16_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE16_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE16_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE16_Enabled (0x1UL)

/* SUBSCRIBE17 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE17_Pos (17UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE17_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE17_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE17 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE17_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE17_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE17_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE17_Enabled (0x1UL)

/* SUBSCRIBE18 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE18_Pos (18UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE18_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE18_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE18 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE18_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE18_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE18_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE18_Enabled (0x1UL)

/* SUBSCRIBE19 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE19_Pos (19UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE19_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE19_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE19 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE19_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE19_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE19_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE19_Enabled (0x1UL)

/* SUBSCRIBE20 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE20_Pos (20UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE20_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE20_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE20 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE20_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE20_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE20_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE20_Enabled (0x1UL)

/* SUBSCRIBE21 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE21_Pos (21UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE21_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE21_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE21 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE21_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE21_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE21_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE21_Enabled (0x1UL)

/* SUBSCRIBE22 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE22_Pos (22UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE22_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE22_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE22 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE22_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE22_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE22_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE22_Enabled (0x1UL)

/* SUBSCRIBE23 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE23_Pos (23UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE23_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE23_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE23 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE23_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE23_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE23_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE23_Enabled (0x1UL)

/* SUBSCRIBE24 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE24_Pos (24UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE24_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE24_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE24 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE24_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE24_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE24_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE24_Enabled (0x1UL)

/* SUBSCRIBE25 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE25_Pos (25UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE25_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE25_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE25 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE25_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE25_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE25_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE25_Enabled (0x1UL)

/* SUBSCRIBE26 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE26_Pos (26UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE26_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE26_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE26 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE26_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE26_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE26_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE26_Enabled (0x1UL)

/* SUBSCRIBE27 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE27_Pos (27UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE27_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE27_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE27 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE27_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE27_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE27_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE27_Enabled (0x1UL)

/* SUBSCRIBE28 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE28_Pos (28UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE28_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE28_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE28 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE28_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE28_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE28_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE28_Enabled (0x1UL)

/* SUBSCRIBE29 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE29_Pos (29UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE29_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE29_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE29 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE29_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE29_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE29_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE29_Enabled (0x1UL)

/* SUBSCRIBE30 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE30_Pos (30UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE30_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE30_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE30 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE30_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE30_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE30_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE30_Enabled (0x1UL)

/* SUBSCRIBE31 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE31_Pos (31UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE31_Msk (0x1UL << VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE31_Pos) /*!< Bit mask of
                                                                            SUBSCRIBE31 field.*/
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE31_Min (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE31_Max (0x1UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE31_Disabled (0x0UL)
  #define VPRCSR_NORDIC_SUBSCRIBE_SUBSCRIBE31_Enabled (0x1UL)


/**
  * @brief EVENTS [VPRCSR_NORDIC_EVENTS] DPPI Events
  */
  #define VPRCSR_NORDIC_EVENTS (0x000007E2ul)
  #define VPRCSR_NORDIC_EVENTS_ResetValue (0x00000000UL)

/* EVENTS0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS0_Pos (0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS0_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS0_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS0_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS0_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS0_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS0_Enabled (0x1UL)

/* EVENTS1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS1_Pos (1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS1_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS1_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS1_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS1_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS1_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS1_Enabled (0x1UL)

/* EVENTS2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS2_Pos (2UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS2_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS2_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS2_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS2_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS2_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS2_Enabled (0x1UL)

/* EVENTS3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS3_Pos (3UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS3_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS3_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS3_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS3_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS3_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS3_Enabled (0x1UL)

/* EVENTS4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS4_Pos (4UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS4_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS4_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS4_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS4_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS4_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS4_Enabled (0x1UL)

/* EVENTS5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS5_Pos (5UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS5_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS5_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS5_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS5_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS5_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS5_Enabled (0x1UL)

/* EVENTS6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS6_Pos (6UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS6_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS6_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS6_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS6_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS6_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS6_Enabled (0x1UL)

/* EVENTS7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS7_Pos (7UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS7_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS7_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS7_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS7_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS7_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS7_Enabled (0x1UL)

/* EVENTS8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS8_Pos (8UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS8_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS8_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS8_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS8_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS8_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS8_Enabled (0x1UL)

/* EVENTS9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS9_Pos (9UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS9_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS9_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS9_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS9_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS9_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS9_Enabled (0x1UL)

/* EVENTS10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS10_Pos (10UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS10_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS10_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS10_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS10_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS10_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS10_Enabled (0x1UL)

/* EVENTS11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS11_Pos (11UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS11_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS11_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS11_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS11_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS11_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS11_Enabled (0x1UL)

/* EVENTS12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS12_Pos (12UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS12_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS12_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS12_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS12_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS12_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS12_Enabled (0x1UL)

/* EVENTS13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS13_Pos (13UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS13_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS13_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS13_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS13_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS13_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS13_Enabled (0x1UL)

/* EVENTS14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS14_Pos (14UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS14_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS14_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS14_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS14_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS14_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS14_Enabled (0x1UL)

/* EVENTS15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS15_Pos (15UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS15_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS15_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS15_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS15_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS15_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS15_Enabled (0x1UL)

/* EVENTS16 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS16_Pos (16UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS16_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS16_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS16_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS16_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS16_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS16_Enabled (0x1UL)

/* EVENTS17 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS17_Pos (17UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS17_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS17_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS17_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS17_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS17_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS17_Enabled (0x1UL)

/* EVENTS18 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS18_Pos (18UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS18_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS18_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS18_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS18_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS18_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS18_Enabled (0x1UL)

/* EVENTS19 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS19_Pos (19UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS19_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS19_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS19_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS19_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS19_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS19_Enabled (0x1UL)

/* EVENTS20 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS20_Pos (20UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS20_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS20_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS20_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS20_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS20_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS20_Enabled (0x1UL)

/* EVENTS21 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS21_Pos (21UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS21_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS21_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS21_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS21_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS21_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS21_Enabled (0x1UL)

/* EVENTS22 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS22_Pos (22UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS22_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS22_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS22_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS22_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS22_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS22_Enabled (0x1UL)

/* EVENTS23 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS23_Pos (23UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS23_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS23_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS23_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS23_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS23_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS23_Enabled (0x1UL)

/* EVENTS24 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS24_Pos (24UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS24_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS24_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS24_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS24_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS24_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS24_Enabled (0x1UL)

/* EVENTS25 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS25_Pos (25UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS25_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS25_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS25_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS25_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS25_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS25_Enabled (0x1UL)

/* EVENTS26 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS26_Pos (26UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS26_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS26_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS26_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS26_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS26_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS26_Enabled (0x1UL)

/* EVENTS27 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS27_Pos (27UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS27_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS27_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS27_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS27_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS27_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS27_Enabled (0x1UL)

/* EVENTS28 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS28_Pos (28UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS28_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS28_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS28_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS28_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS28_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS28_Enabled (0x1UL)

/* EVENTS29 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS29_Pos (29UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS29_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS29_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS29_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS29_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS29_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS29_Enabled (0x1UL)

/* EVENTS30 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS30_Pos (30UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS30_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS30_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS30_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS30_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS30_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS30_Enabled (0x1UL)

/* EVENTS31 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTS_EVENTS31_Pos (31UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS31_Msk (0x1UL << VPRCSR_NORDIC_EVENTS_EVENTS31_Pos)
  #define VPRCSR_NORDIC_EVENTS_EVENTS31_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS31_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS31_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTS_EVENTS31_Enabled (0x1UL)


/**
  * @brief PUBLISH [VPRCSR_NORDIC_PUBLISH] Enable Event Publication
  */
  #define VPRCSR_NORDIC_PUBLISH (0x000007E3ul)
  #define VPRCSR_NORDIC_PUBLISH_ResetValue (0x00000000UL)

/* PUBLISH0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH0_Pos (0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH0_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH0_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH0_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH0_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH0_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH0_Enabled (0x1UL)

/* PUBLISH1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH1_Pos (1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH1_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH1_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH1_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH1_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH1_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH1_Enabled (0x1UL)

/* PUBLISH2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH2_Pos (2UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH2_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH2_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH2_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH2_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH2_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH2_Enabled (0x1UL)

/* PUBLISH3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH3_Pos (3UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH3_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH3_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH3_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH3_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH3_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH3_Enabled (0x1UL)

/* PUBLISH4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH4_Pos (4UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH4_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH4_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH4_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH4_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH4_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH4_Enabled (0x1UL)

/* PUBLISH5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH5_Pos (5UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH5_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH5_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH5_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH5_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH5_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH5_Enabled (0x1UL)

/* PUBLISH6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH6_Pos (6UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH6_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH6_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH6_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH6_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH6_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH6_Enabled (0x1UL)

/* PUBLISH7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH7_Pos (7UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH7_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH7_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH7_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH7_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH7_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH7_Enabled (0x1UL)

/* PUBLISH8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH8_Pos (8UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH8_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH8_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH8_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH8_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH8_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH8_Enabled (0x1UL)

/* PUBLISH9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH9_Pos (9UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH9_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH9_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH9_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH9_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH9_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH9_Enabled (0x1UL)

/* PUBLISH10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH10_Pos (10UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH10_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH10_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH10_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH10_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH10_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH10_Enabled (0x1UL)

/* PUBLISH11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH11_Pos (11UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH11_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH11_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH11_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH11_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH11_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH11_Enabled (0x1UL)

/* PUBLISH12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH12_Pos (12UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH12_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH12_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH12_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH12_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH12_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH12_Enabled (0x1UL)

/* PUBLISH13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH13_Pos (13UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH13_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH13_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH13_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH13_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH13_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH13_Enabled (0x1UL)

/* PUBLISH14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH14_Pos (14UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH14_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH14_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH14_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH14_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH14_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH14_Enabled (0x1UL)

/* PUBLISH15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH15_Pos (15UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH15_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH15_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH15_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH15_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH15_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH15_Enabled (0x1UL)

/* PUBLISH16 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH16_Pos (16UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH16_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH16_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH16_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH16_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH16_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH16_Enabled (0x1UL)

/* PUBLISH17 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH17_Pos (17UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH17_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH17_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH17_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH17_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH17_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH17_Enabled (0x1UL)

/* PUBLISH18 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH18_Pos (18UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH18_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH18_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH18_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH18_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH18_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH18_Enabled (0x1UL)

/* PUBLISH19 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH19_Pos (19UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH19_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH19_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH19_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH19_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH19_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH19_Enabled (0x1UL)

/* PUBLISH20 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH20_Pos (20UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH20_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH20_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH20_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH20_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH20_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH20_Enabled (0x1UL)

/* PUBLISH21 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH21_Pos (21UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH21_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH21_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH21_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH21_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH21_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH21_Enabled (0x1UL)

/* PUBLISH22 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH22_Pos (22UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH22_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH22_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH22_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH22_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH22_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH22_Enabled (0x1UL)

/* PUBLISH23 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH23_Pos (23UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH23_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH23_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH23_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH23_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH23_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH23_Enabled (0x1UL)

/* PUBLISH24 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH24_Pos (24UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH24_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH24_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH24_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH24_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH24_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH24_Enabled (0x1UL)

/* PUBLISH25 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH25_Pos (25UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH25_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH25_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH25_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH25_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH25_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH25_Enabled (0x1UL)

/* PUBLISH26 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH26_Pos (26UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH26_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH26_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH26_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH26_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH26_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH26_Enabled (0x1UL)

/* PUBLISH27 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH27_Pos (27UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH27_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH27_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH27_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH27_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH27_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH27_Enabled (0x1UL)

/* PUBLISH28 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH28_Pos (28UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH28_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH28_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH28_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH28_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH28_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH28_Enabled (0x1UL)

/* PUBLISH29 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH29_Pos (29UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH29_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH29_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH29_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH29_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH29_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH29_Enabled (0x1UL)

/* PUBLISH30 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH30_Pos (30UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH30_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH30_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH30_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH30_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH30_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH30_Enabled (0x1UL)

/* PUBLISH31 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH31_Pos (31UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH31_Msk (0x1UL << VPRCSR_NORDIC_PUBLISH_PUBLISH31_Pos)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH31_Min (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH31_Max (0x1UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH31_Disabled (0x0UL)
  #define VPRCSR_NORDIC_PUBLISH_PUBLISH31_Enabled (0x1UL)


/**
  * @brief INTEN [VPRCSR_NORDIC_INTEN] DPPI Event Interrupt Enable
  */
  #define VPRCSR_NORDIC_INTEN (0x000007E4ul)
  #define VPRCSR_NORDIC_INTEN_ResetValue (0x00000000UL)

/* INTEN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN0_Pos (0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN0_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN0_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN0_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN0_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN0_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN0_Enabled (0x1UL)

/* INTEN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN1_Pos (1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN1_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN1_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN1_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN1_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN1_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN1_Enabled (0x1UL)

/* INTEN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN2_Pos (2UL)
  #define VPRCSR_NORDIC_INTEN_INTEN2_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN2_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN2_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN2_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN2_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN2_Enabled (0x1UL)

/* INTEN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN3_Pos (3UL)
  #define VPRCSR_NORDIC_INTEN_INTEN3_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN3_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN3_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN3_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN3_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN3_Enabled (0x1UL)

/* INTEN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN4_Pos (4UL)
  #define VPRCSR_NORDIC_INTEN_INTEN4_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN4_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN4_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN4_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN4_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN4_Enabled (0x1UL)

/* INTEN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN5_Pos (5UL)
  #define VPRCSR_NORDIC_INTEN_INTEN5_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN5_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN5_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN5_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN5_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN5_Enabled (0x1UL)

/* INTEN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN6_Pos (6UL)
  #define VPRCSR_NORDIC_INTEN_INTEN6_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN6_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN6_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN6_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN6_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN6_Enabled (0x1UL)

/* INTEN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN7_Pos (7UL)
  #define VPRCSR_NORDIC_INTEN_INTEN7_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN7_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN7_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN7_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN7_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN7_Enabled (0x1UL)

/* INTEN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN8_Pos (8UL)
  #define VPRCSR_NORDIC_INTEN_INTEN8_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN8_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN8_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN8_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN8_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN8_Enabled (0x1UL)

/* INTEN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN9_Pos (9UL)
  #define VPRCSR_NORDIC_INTEN_INTEN9_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN9_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN9_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN9_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN9_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN9_Enabled (0x1UL)

/* INTEN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN10_Pos (10UL)
  #define VPRCSR_NORDIC_INTEN_INTEN10_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN10_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN10_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN10_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN10_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN10_Enabled (0x1UL)

/* INTEN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN11_Pos (11UL)
  #define VPRCSR_NORDIC_INTEN_INTEN11_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN11_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN11_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN11_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN11_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN11_Enabled (0x1UL)

/* INTEN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN12_Pos (12UL)
  #define VPRCSR_NORDIC_INTEN_INTEN12_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN12_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN12_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN12_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN12_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN12_Enabled (0x1UL)

/* INTEN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN13_Pos (13UL)
  #define VPRCSR_NORDIC_INTEN_INTEN13_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN13_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN13_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN13_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN13_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN13_Enabled (0x1UL)

/* INTEN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN14_Pos (14UL)
  #define VPRCSR_NORDIC_INTEN_INTEN14_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN14_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN14_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN14_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN14_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN14_Enabled (0x1UL)

/* INTEN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN15_Pos (15UL)
  #define VPRCSR_NORDIC_INTEN_INTEN15_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN15_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN15_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN15_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN15_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN15_Enabled (0x1UL)

/* INTEN16 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN16_Pos (16UL)
  #define VPRCSR_NORDIC_INTEN_INTEN16_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN16_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN16_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN16_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN16_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN16_Enabled (0x1UL)

/* INTEN17 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN17_Pos (17UL)
  #define VPRCSR_NORDIC_INTEN_INTEN17_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN17_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN17_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN17_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN17_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN17_Enabled (0x1UL)

/* INTEN18 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN18_Pos (18UL)
  #define VPRCSR_NORDIC_INTEN_INTEN18_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN18_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN18_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN18_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN18_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN18_Enabled (0x1UL)

/* INTEN19 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN19_Pos (19UL)
  #define VPRCSR_NORDIC_INTEN_INTEN19_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN19_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN19_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN19_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN19_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN19_Enabled (0x1UL)

/* INTEN20 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN20_Pos (20UL)
  #define VPRCSR_NORDIC_INTEN_INTEN20_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN20_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN20_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN20_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN20_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN20_Enabled (0x1UL)

/* INTEN21 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN21_Pos (21UL)
  #define VPRCSR_NORDIC_INTEN_INTEN21_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN21_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN21_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN21_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN21_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN21_Enabled (0x1UL)

/* INTEN22 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN22_Pos (22UL)
  #define VPRCSR_NORDIC_INTEN_INTEN22_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN22_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN22_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN22_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN22_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN22_Enabled (0x1UL)

/* INTEN23 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN23_Pos (23UL)
  #define VPRCSR_NORDIC_INTEN_INTEN23_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN23_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN23_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN23_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN23_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN23_Enabled (0x1UL)

/* INTEN24 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN24_Pos (24UL)
  #define VPRCSR_NORDIC_INTEN_INTEN24_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN24_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN24_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN24_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN24_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN24_Enabled (0x1UL)

/* INTEN25 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN25_Pos (25UL)
  #define VPRCSR_NORDIC_INTEN_INTEN25_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN25_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN25_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN25_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN25_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN25_Enabled (0x1UL)

/* INTEN26 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN26_Pos (26UL)
  #define VPRCSR_NORDIC_INTEN_INTEN26_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN26_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN26_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN26_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN26_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN26_Enabled (0x1UL)

/* INTEN27 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN27_Pos (27UL)
  #define VPRCSR_NORDIC_INTEN_INTEN27_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN27_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN27_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN27_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN27_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN27_Enabled (0x1UL)

/* INTEN28 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN28_Pos (28UL)
  #define VPRCSR_NORDIC_INTEN_INTEN28_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN28_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN28_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN28_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN28_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN28_Enabled (0x1UL)

/* INTEN29 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN29_Pos (29UL)
  #define VPRCSR_NORDIC_INTEN_INTEN29_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN29_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN29_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN29_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN29_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN29_Enabled (0x1UL)

/* INTEN30 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN30_Pos (30UL)
  #define VPRCSR_NORDIC_INTEN_INTEN30_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN30_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN30_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN30_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN30_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN30_Enabled (0x1UL)

/* INTEN31 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_INTEN_INTEN31_Pos (31UL)
  #define VPRCSR_NORDIC_INTEN_INTEN31_Msk (0x1UL << VPRCSR_NORDIC_INTEN_INTEN31_Pos)
  #define VPRCSR_NORDIC_INTEN_INTEN31_Min (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN31_Max (0x1UL)
  #define VPRCSR_NORDIC_INTEN_INTEN31_Disabled (0x0UL)
  #define VPRCSR_NORDIC_INTEN_INTEN31_Enabled (0x1UL)


/**
  * @brief EVENTSB [VPRCSR_NORDIC_EVENTSB] Buffered DPPI Events
  */
  #define VPRCSR_NORDIC_EVENTSB (0x000007E5ul)
  #define VPRCSR_NORDIC_EVENTSB_ResetValue (0x00000000UL)

/* EVENTSB0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB0_Pos (0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB0_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB0_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB0_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB0_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB0_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB0_Enabled (0x1UL)

/* EVENTSB1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB1_Pos (1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB1_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB1_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB1_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB1_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB1_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB1_Enabled (0x1UL)

/* EVENTSB2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB2_Pos (2UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB2_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB2_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB2_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB2_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB2_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB2_Enabled (0x1UL)

/* EVENTSB3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB3_Pos (3UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB3_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB3_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB3_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB3_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB3_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB3_Enabled (0x1UL)

/* EVENTSB4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB4_Pos (4UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB4_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB4_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB4_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB4_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB4_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB4_Enabled (0x1UL)

/* EVENTSB5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB5_Pos (5UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB5_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB5_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB5_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB5_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB5_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB5_Enabled (0x1UL)

/* EVENTSB6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB6_Pos (6UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB6_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB6_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB6_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB6_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB6_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB6_Enabled (0x1UL)

/* EVENTSB7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB7_Pos (7UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB7_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB7_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB7_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB7_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB7_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB7_Enabled (0x1UL)

/* EVENTSB8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB8_Pos (8UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB8_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB8_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB8_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB8_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB8_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB8_Enabled (0x1UL)

/* EVENTSB9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB9_Pos (9UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB9_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB9_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB9_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB9_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB9_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB9_Enabled (0x1UL)

/* EVENTSB10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB10_Pos (10UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB10_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB10_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB10_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB10_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB10_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB10_Enabled (0x1UL)

/* EVENTSB11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB11_Pos (11UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB11_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB11_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB11_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB11_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB11_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB11_Enabled (0x1UL)

/* EVENTSB12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB12_Pos (12UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB12_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB12_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB12_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB12_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB12_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB12_Enabled (0x1UL)

/* EVENTSB13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB13_Pos (13UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB13_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB13_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB13_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB13_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB13_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB13_Enabled (0x1UL)

/* EVENTSB14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB14_Pos (14UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB14_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB14_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB14_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB14_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB14_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB14_Enabled (0x1UL)

/* EVENTSB15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB15_Pos (15UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB15_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB15_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB15_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB15_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB15_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB15_Enabled (0x1UL)

/* EVENTSB16 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB16_Pos (16UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB16_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB16_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB16_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB16_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB16_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB16_Enabled (0x1UL)

/* EVENTSB17 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB17_Pos (17UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB17_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB17_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB17_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB17_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB17_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB17_Enabled (0x1UL)

/* EVENTSB18 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB18_Pos (18UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB18_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB18_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB18_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB18_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB18_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB18_Enabled (0x1UL)

/* EVENTSB19 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB19_Pos (19UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB19_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB19_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB19_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB19_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB19_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB19_Enabled (0x1UL)

/* EVENTSB20 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB20_Pos (20UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB20_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB20_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB20_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB20_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB20_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB20_Enabled (0x1UL)

/* EVENTSB21 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB21_Pos (21UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB21_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB21_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB21_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB21_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB21_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB21_Enabled (0x1UL)

/* EVENTSB22 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB22_Pos (22UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB22_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB22_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB22_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB22_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB22_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB22_Enabled (0x1UL)

/* EVENTSB23 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB23_Pos (23UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB23_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB23_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB23_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB23_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB23_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB23_Enabled (0x1UL)

/* EVENTSB24 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB24_Pos (24UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB24_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB24_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB24_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB24_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB24_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB24_Enabled (0x1UL)

/* EVENTSB25 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB25_Pos (25UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB25_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB25_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB25_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB25_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB25_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB25_Enabled (0x1UL)

/* EVENTSB26 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB26_Pos (26UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB26_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB26_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB26_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB26_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB26_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB26_Enabled (0x1UL)

/* EVENTSB27 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB27_Pos (27UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB27_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB27_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB27_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB27_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB27_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB27_Enabled (0x1UL)

/* EVENTSB28 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB28_Pos (28UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB28_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB28_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB28_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB28_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB28_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB28_Enabled (0x1UL)

/* EVENTSB29 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB29_Pos (29UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB29_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB29_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB29_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB29_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB29_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB29_Enabled (0x1UL)

/* EVENTSB30 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB30_Pos (30UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB30_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB30_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB30_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB30_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB30_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB30_Enabled (0x1UL)

/* EVENTSB31 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB31_Pos (31UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB31_Msk (0x1UL << VPRCSR_NORDIC_EVENTSB_EVENTSB31_Pos)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB31_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB31_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB31_Disabled (0x0UL)
  #define VPRCSR_NORDIC_EVENTSB_EVENTSB31_Enabled (0x1UL)


/**
  * @brief EVENTSBS [VPRCSR_NORDIC_EVENTSBS] EVENTSB Dirty Status
  */
  #define VPRCSR_NORDIC_EVENTSBS (0x000007E6ul)
  #define VPRCSR_NORDIC_EVENTSBS_ResetValue (0x00000000UL)

/* EVENTSB @Bits 0..31 : Write to EVENTSB (if not dirty) */
  #define VPRCSR_NORDIC_EVENTSBS_EVENTSB_Pos (0UL)
  #define VPRCSR_NORDIC_EVENTSBS_EVENTSB_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_EVENTSBS_EVENTSB_Pos) /*!< Bit mask of EVENTSB
                                                                            field.*/

/* DIRTYBIT @Bit 0 : Read EVENTSB Dirty status */
  #define VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_Pos (0UL)
  #define VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_Msk (0x1UL << VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_Pos)
  #define VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_Min (0x0UL)
  #define VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_Max (0x1UL)
  #define VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_CLEAN (0x0UL)
  #define VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_DIRTY (0x1UL)


/**
  * @brief OUT [VPRCSR_NORDIC_OUT] GPIO Output value. Real Time Peripherals VIO.
  */
  #define VPRCSR_NORDIC_OUT (0x00000BC0ul)
  #define VPRCSR_NORDIC_OUT_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_OUT_PIN0_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN0_Pos)
  #define VPRCSR_NORDIC_OUT_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN0_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN0_HIGH (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_OUT_PIN1_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN1_Pos)
  #define VPRCSR_NORDIC_OUT_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN1_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN1_HIGH (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_OUT_PIN2_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN2_Pos)
  #define VPRCSR_NORDIC_OUT_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN2_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN2_HIGH (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_OUT_PIN3_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN3_Pos)
  #define VPRCSR_NORDIC_OUT_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN3_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN3_HIGH (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_OUT_PIN4_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN4_Pos)
  #define VPRCSR_NORDIC_OUT_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN4_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN4_HIGH (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_OUT_PIN5_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN5_Pos)
  #define VPRCSR_NORDIC_OUT_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN5_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN5_HIGH (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_OUT_PIN6_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN6_Pos)
  #define VPRCSR_NORDIC_OUT_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN6_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN6_HIGH (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_OUT_PIN7_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN7_Pos)
  #define VPRCSR_NORDIC_OUT_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN7_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN7_HIGH (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_OUT_PIN8_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN8_Pos)
  #define VPRCSR_NORDIC_OUT_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN8_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN8_HIGH (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_OUT_PIN9_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN9_Pos)
  #define VPRCSR_NORDIC_OUT_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN9_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN9_HIGH (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_OUT_PIN10_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN10_Pos)
  #define VPRCSR_NORDIC_OUT_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN10_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN10_HIGH (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_OUT_PIN11_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN11_Pos)
  #define VPRCSR_NORDIC_OUT_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN11_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN11_HIGH (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_OUT_PIN12_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN12_Pos)
  #define VPRCSR_NORDIC_OUT_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN12_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN12_HIGH (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_OUT_PIN13_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN13_Pos)
  #define VPRCSR_NORDIC_OUT_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN13_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN13_HIGH (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_OUT_PIN14_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN14_Pos)
  #define VPRCSR_NORDIC_OUT_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN14_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN14_HIGH (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_OUT_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_OUT_PIN15_Msk (0x1UL << VPRCSR_NORDIC_OUT_PIN15_Pos)
  #define VPRCSR_NORDIC_OUT_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUT_PIN15_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUT_PIN15_HIGH (0x1UL)


/**
  * @brief DIR [VPRCSR_NORDIC_DIR] GPIO pin Direction. Real Time Peripherals VIO.
  */
  #define VPRCSR_NORDIC_DIR (0x00000BC1ul)
  #define VPRCSR_NORDIC_DIR_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_DIR_PIN0_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN0_Pos)
  #define VPRCSR_NORDIC_DIR_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN0_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN0_OUTPUT (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_DIR_PIN1_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN1_Pos)
  #define VPRCSR_NORDIC_DIR_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN1_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN1_OUTPUT (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_DIR_PIN2_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN2_Pos)
  #define VPRCSR_NORDIC_DIR_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN2_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN2_OUTPUT (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_DIR_PIN3_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN3_Pos)
  #define VPRCSR_NORDIC_DIR_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN3_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN3_OUTPUT (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_DIR_PIN4_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN4_Pos)
  #define VPRCSR_NORDIC_DIR_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN4_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN4_OUTPUT (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_DIR_PIN5_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN5_Pos)
  #define VPRCSR_NORDIC_DIR_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN5_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN5_OUTPUT (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_DIR_PIN6_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN6_Pos)
  #define VPRCSR_NORDIC_DIR_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN6_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN6_OUTPUT (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_DIR_PIN7_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN7_Pos)
  #define VPRCSR_NORDIC_DIR_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN7_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN7_OUTPUT (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_DIR_PIN8_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN8_Pos)
  #define VPRCSR_NORDIC_DIR_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN8_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN8_OUTPUT (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_DIR_PIN9_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN9_Pos)
  #define VPRCSR_NORDIC_DIR_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN9_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN9_OUTPUT (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_DIR_PIN10_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN10_Pos)
  #define VPRCSR_NORDIC_DIR_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN10_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN10_OUTPUT (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_DIR_PIN11_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN11_Pos)
  #define VPRCSR_NORDIC_DIR_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN11_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN11_OUTPUT (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_DIR_PIN12_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN12_Pos)
  #define VPRCSR_NORDIC_DIR_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN12_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN12_OUTPUT (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_DIR_PIN13_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN13_Pos)
  #define VPRCSR_NORDIC_DIR_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN13_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN13_OUTPUT (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_DIR_PIN14_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN14_Pos)
  #define VPRCSR_NORDIC_DIR_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN14_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN14_OUTPUT (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_DIR_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_DIR_PIN15_Msk (0x1UL << VPRCSR_NORDIC_DIR_PIN15_Pos)
  #define VPRCSR_NORDIC_DIR_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIR_PIN15_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIR_PIN15_OUTPUT (0x1UL)


/**
  * @brief IN [VPRCSR_NORDIC_IN] GPIO Input. Real Time Peripherals VIO.
  */
  #define VPRCSR_NORDIC_IN (0x00000BC2ul)
  #define VPRCSR_NORDIC_IN_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_IN_PIN0_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN0_Pos)
  #define VPRCSR_NORDIC_IN_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN0_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN0_HIGH (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_IN_PIN1_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN1_Pos)
  #define VPRCSR_NORDIC_IN_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN1_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN1_HIGH (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_IN_PIN2_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN2_Pos)
  #define VPRCSR_NORDIC_IN_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN2_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN2_HIGH (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_IN_PIN3_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN3_Pos)
  #define VPRCSR_NORDIC_IN_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN3_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN3_HIGH (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_IN_PIN4_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN4_Pos)
  #define VPRCSR_NORDIC_IN_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN4_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN4_HIGH (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_IN_PIN5_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN5_Pos)
  #define VPRCSR_NORDIC_IN_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN5_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN5_HIGH (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_IN_PIN6_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN6_Pos)
  #define VPRCSR_NORDIC_IN_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN6_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN6_HIGH (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_IN_PIN7_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN7_Pos)
  #define VPRCSR_NORDIC_IN_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN7_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN7_HIGH (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_IN_PIN8_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN8_Pos)
  #define VPRCSR_NORDIC_IN_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN8_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN8_HIGH (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_IN_PIN9_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN9_Pos)
  #define VPRCSR_NORDIC_IN_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN9_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN9_HIGH (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_IN_PIN10_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN10_Pos)
  #define VPRCSR_NORDIC_IN_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN10_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN10_HIGH (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_IN_PIN11_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN11_Pos)
  #define VPRCSR_NORDIC_IN_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN11_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN11_HIGH (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_IN_PIN12_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN12_Pos)
  #define VPRCSR_NORDIC_IN_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN12_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN12_HIGH (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_IN_PIN13_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN13_Pos)
  #define VPRCSR_NORDIC_IN_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN13_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN13_HIGH (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_IN_PIN14_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN14_Pos)
  #define VPRCSR_NORDIC_IN_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN14_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN14_HIGH (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_IN_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_IN_PIN15_Msk (0x1UL << VPRCSR_NORDIC_IN_PIN15_Pos)
  #define VPRCSR_NORDIC_IN_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_IN_PIN15_LOW (0x0UL)
  #define VPRCSR_NORDIC_IN_PIN15_HIGH (0x1UL)


/**
  * @brief INMODE [VPRCSR_NORDIC_INMODE] Input Mode
  */
  #define VPRCSR_NORDIC_INMODE (0x00000BC3ul)
  #define VPRCSR_NORDIC_INMODE_ResetValue (0x00000000UL)

/* MODE @Bits 0..1 : Input Mode */
  #define VPRCSR_NORDIC_INMODE_MODE_Pos (0UL)
  #define VPRCSR_NORDIC_INMODE_MODE_Msk (0x3UL << VPRCSR_NORDIC_INMODE_MODE_Pos)
  #define VPRCSR_NORDIC_INMODE_MODE_Min (0x0UL)
  #define VPRCSR_NORDIC_INMODE_MODE_Max (0x3UL)
  #define VPRCSR_NORDIC_INMODE_MODE_CONTINUOUS (0x0UL)
  #define VPRCSR_NORDIC_INMODE_MODE_EVENT (0x1UL)
  #define VPRCSR_NORDIC_INMODE_MODE_SHIFT (0x2UL)
  #define VPRCSR_NORDIC_INMODE_MODE_SHIFTA (0x3UL)


/**
  * @brief OUTB [VPRCSR_NORDIC_OUTB] Buffered GPIO Output
  */
  #define VPRCSR_NORDIC_OUTB (0x00000BC4ul)
  #define VPRCSR_NORDIC_OUTB_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_OUTB_PIN0_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN0_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN0_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN0_HIGH (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_OUTB_PIN1_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN1_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN1_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN1_HIGH (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_OUTB_PIN2_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN2_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN2_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN2_HIGH (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_OUTB_PIN3_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN3_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN3_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN3_HIGH (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_OUTB_PIN4_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN4_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN4_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN4_HIGH (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_OUTB_PIN5_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN5_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN5_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN5_HIGH (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_OUTB_PIN6_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN6_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN6_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN6_HIGH (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_OUTB_PIN7_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN7_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN7_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN7_HIGH (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_OUTB_PIN8_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN8_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN8_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN8_HIGH (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_OUTB_PIN9_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN9_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN9_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN9_HIGH (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_OUTB_PIN10_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN10_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN10_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN10_HIGH (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_OUTB_PIN11_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN11_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN11_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN11_HIGH (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_OUTB_PIN12_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN12_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN12_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN12_HIGH (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_OUTB_PIN13_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN13_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN13_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN13_HIGH (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_OUTB_PIN14_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN14_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN14_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN14_HIGH (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_OUTB_PIN15_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN15_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN15_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN15_HIGH (0x1UL)

/* PIN16 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN16_Pos (16UL)
  #define VPRCSR_NORDIC_OUTB_PIN16_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN16_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN16_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN16_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN16_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN16_HIGH (0x1UL)

/* PIN17 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN17_Pos (17UL)
  #define VPRCSR_NORDIC_OUTB_PIN17_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN17_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN17_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN17_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN17_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN17_HIGH (0x1UL)

/* PIN18 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN18_Pos (18UL)
  #define VPRCSR_NORDIC_OUTB_PIN18_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN18_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN18_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN18_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN18_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN18_HIGH (0x1UL)

/* PIN19 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN19_Pos (19UL)
  #define VPRCSR_NORDIC_OUTB_PIN19_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN19_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN19_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN19_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN19_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN19_HIGH (0x1UL)

/* PIN20 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN20_Pos (20UL)
  #define VPRCSR_NORDIC_OUTB_PIN20_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN20_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN20_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN20_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN20_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN20_HIGH (0x1UL)

/* PIN21 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN21_Pos (21UL)
  #define VPRCSR_NORDIC_OUTB_PIN21_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN21_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN21_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN21_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN21_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN21_HIGH (0x1UL)

/* PIN22 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN22_Pos (22UL)
  #define VPRCSR_NORDIC_OUTB_PIN22_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN22_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN22_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN22_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN22_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN22_HIGH (0x1UL)

/* PIN23 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN23_Pos (23UL)
  #define VPRCSR_NORDIC_OUTB_PIN23_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN23_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN23_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN23_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN23_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN23_HIGH (0x1UL)

/* PIN24 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN24_Pos (24UL)
  #define VPRCSR_NORDIC_OUTB_PIN24_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN24_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN24_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN24_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN24_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN24_HIGH (0x1UL)

/* PIN25 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN25_Pos (25UL)
  #define VPRCSR_NORDIC_OUTB_PIN25_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN25_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN25_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN25_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN25_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN25_HIGH (0x1UL)

/* PIN26 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN26_Pos (26UL)
  #define VPRCSR_NORDIC_OUTB_PIN26_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN26_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN26_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN26_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN26_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN26_HIGH (0x1UL)

/* PIN27 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN27_Pos (27UL)
  #define VPRCSR_NORDIC_OUTB_PIN27_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN27_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN27_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN27_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN27_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN27_HIGH (0x1UL)

/* PIN28 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN28_Pos (28UL)
  #define VPRCSR_NORDIC_OUTB_PIN28_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN28_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN28_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN28_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN28_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN28_HIGH (0x1UL)

/* PIN29 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN29_Pos (29UL)
  #define VPRCSR_NORDIC_OUTB_PIN29_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN29_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN29_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN29_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN29_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN29_HIGH (0x1UL)

/* PIN30 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN30_Pos (30UL)
  #define VPRCSR_NORDIC_OUTB_PIN30_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN30_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN30_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN30_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN30_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN30_HIGH (0x1UL)

/* PIN31 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_OUTB_PIN31_Pos (31UL)
  #define VPRCSR_NORDIC_OUTB_PIN31_Msk (0x1UL << VPRCSR_NORDIC_OUTB_PIN31_Pos)
  #define VPRCSR_NORDIC_OUTB_PIN31_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN31_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTB_PIN31_LOW (0x0UL)
  #define VPRCSR_NORDIC_OUTB_PIN31_HIGH (0x1UL)


/**
  * @brief DIRB [VPRCSR_NORDIC_DIRB] Buffered GPIO pin Direction
  */
  #define VPRCSR_NORDIC_DIRB (0x00000BC5ul)
  #define VPRCSR_NORDIC_DIRB_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_DIRB_PIN0_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN0_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN0_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN0_OUTPUT (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_DIRB_PIN1_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN1_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN1_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN1_OUTPUT (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_DIRB_PIN2_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN2_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN2_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN2_OUTPUT (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_DIRB_PIN3_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN3_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN3_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN3_OUTPUT (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_DIRB_PIN4_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN4_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN4_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN4_OUTPUT (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_DIRB_PIN5_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN5_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN5_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN5_OUTPUT (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_DIRB_PIN6_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN6_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN6_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN6_OUTPUT (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_DIRB_PIN7_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN7_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN7_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN7_OUTPUT (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_DIRB_PIN8_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN8_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN8_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN8_OUTPUT (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_DIRB_PIN9_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN9_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN9_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN9_OUTPUT (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_DIRB_PIN10_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN10_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN10_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN10_OUTPUT (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_DIRB_PIN11_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN11_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN11_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN11_OUTPUT (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_DIRB_PIN12_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN12_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN12_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN12_OUTPUT (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_DIRB_PIN13_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN13_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN13_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN13_OUTPUT (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_DIRB_PIN14_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN14_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN14_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN14_OUTPUT (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_DIRB_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_DIRB_PIN15_Msk (0x1UL << VPRCSR_NORDIC_DIRB_PIN15_Pos)
  #define VPRCSR_NORDIC_DIRB_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRB_PIN15_INPUT (0x0UL)
  #define VPRCSR_NORDIC_DIRB_PIN15_OUTPUT (0x1UL)


/**
  * @brief DIROUT [VPRCSR_NORDIC_DIROUT] DIR and OUT concatenation
  */
  #define VPRCSR_NORDIC_DIROUT (0x00000BC6ul)
  #define VPRCSR_NORDIC_DIROUT_ResetValue (0x00000000UL)

/* OUT @Bits 0..15 : GPIO Output */
  #define VPRCSR_NORDIC_DIROUT_OUT_Pos (0UL)
  #define VPRCSR_NORDIC_DIROUT_OUT_Msk (0xFFFFUL << VPRCSR_NORDIC_DIROUT_OUT_Pos)

/* DIR @Bits 16..31 : GPIO pin Direction */
  #define VPRCSR_NORDIC_DIROUT_DIR_Pos (16UL)
  #define VPRCSR_NORDIC_DIROUT_DIR_Msk (0xFFFFUL << VPRCSR_NORDIC_DIROUT_DIR_Pos)


/**
  * @brief DIROUTB [VPRCSR_NORDIC_DIROUTB] Concatenation of DIRB and OUTB
  */
  #define VPRCSR_NORDIC_DIROUTB (0x00000BC7ul)
  #define VPRCSR_NORDIC_DIROUTB_ResetValue (0x00000000UL)

/* OUTB @Bits 0..15 : Buffered GPIO Output */
  #define VPRCSR_NORDIC_DIROUTB_OUTB_Pos (0UL)
  #define VPRCSR_NORDIC_DIROUTB_OUTB_Msk (0xFFFFUL << VPRCSR_NORDIC_DIROUTB_OUTB_Pos)

/* DIRB @Bits 16..31 : Buffered GPIO pin Direction */
  #define VPRCSR_NORDIC_DIROUTB_DIRB_Pos (16UL)
  #define VPRCSR_NORDIC_DIROUTB_DIRB_Msk (0xFFFFUL << VPRCSR_NORDIC_DIROUTB_DIRB_Pos)


/**
  * @brief OUTBRB [VPRCSR_NORDIC_OUTBRB] Byte reversed register OUTB
  */
  #define VPRCSR_NORDIC_OUTBRB (0x00000BC8ul)
  #define VPRCSR_NORDIC_OUTBRB_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBRB_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBRB_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_OUTBRB_VAL_Pos)
  #define VPRCSR_NORDIC_OUTBRB_VAL_Min (0x00000000UL)
  #define VPRCSR_NORDIC_OUTBRB_VAL_Max (0xFFFFFFFFUL)


/**
  * @brief OUTBRW [VPRCSR_NORDIC_OUTBRW] Word reversed register OUTB
  */
  #define VPRCSR_NORDIC_OUTBRW (0x00000BC9ul)
  #define VPRCSR_NORDIC_OUTBRW_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBRW_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBRW_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_OUTBRW_VAL_Pos)
  #define VPRCSR_NORDIC_OUTBRW_VAL_Min (0x00000000UL)
  #define VPRCSR_NORDIC_OUTBRW_VAL_Max (0xFFFFFFFFUL)


/**
  * @brief INBRB [VPRCSR_NORDIC_INBRB] Byte reversed register INB
  */
  #define VPRCSR_NORDIC_INBRB (0x00000BCAul)
  #define VPRCSR_NORDIC_INBRB_ResetValue (0x00000000UL)

/* VAL @Bits 0..31 : (unspecified) */
  #define VPRCSR_NORDIC_INBRB_VAL_Pos (0UL)
  #define VPRCSR_NORDIC_INBRB_VAL_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_INBRB_VAL_Pos)
  #define VPRCSR_NORDIC_INBRB_VAL_Min (0x00000000UL)
  #define VPRCSR_NORDIC_INBRB_VAL_Max (0xFFFFFFFFUL)


/**
  * @brief SHIFTCTRLB [VPRCSR_NORDIC_SHIFTCTRLB] Buffered IO shift control
  */
  #define VPRCSR_NORDIC_SHIFTCTRLB (0x00000BCBul)
  #define VPRCSR_NORDIC_SHIFTCTRLB_ResetValue (0x00000000UL)

/* Field group SHIFTCNTB : (unspecified) */
/* VALUE @Bits 0..5 : Alias to SHIFTCNTB.VALUE register */
    #define VPRCSR_NORDIC_SHIFTCTRLB_SHIFTCNTB_VALUE_Pos (0UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_SHIFTCNTB_VALUE_Msk (0x3FUL << VPRCSR_NORDIC_SHIFTCTRLB_SHIFTCNTB_VALUE_Pos) /*!< Bit mask
                                                                            of VALUE field.*/
    #define VPRCSR_NORDIC_SHIFTCTRLB_SHIFTCNTB_VALUE_Min (0x00UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_SHIFTCNTB_VALUE_Max (0x20UL)

/* End field group SHIFTCNTB. */

/* Field group OUTMODEB : (unspecified) */
/* MODE @Bits 8..10 : Alias to OUTMODEB.MODE register */
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_Pos (8UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_Msk (0x7UL << VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_Pos) /*!< Bit mask of
                                                                            MODE field.*/
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_Min (0x0UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_Max (0x4UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_NoShifting (0x0UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_OutBBuf (0x2UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_MODE_OutBBufToggleClk (0x4UL) /*!< Only OUTB used for buffering, auto-toggle clock
                                                                            line*/

/* FRAMEWIDTH @Bits 12..16 : Alias to OUTMODEB.FRAMEWIDTH register */
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_FRAMEWIDTH_Pos (12UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_FRAMEWIDTH_Msk (0x1FUL << VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_FRAMEWIDTH_Pos) /*!<
                                                                            Bit mask of FRAMEWIDTH field.*/
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_FRAMEWIDTH_Min (0x00UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_FRAMEWIDTH_Max (0x10UL)

/* SEL @Bits 24..27 : Alias to OUTMODEB.SEL register */
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_SEL_Pos (24UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_SEL_Msk (0xFUL << VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_SEL_Pos) /*!< Bit mask of SEL
                                                                            field.*/
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_SEL_Min (0x0UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_OUTMODEB_SEL_Max (0xFUL)

/* End field group OUTMODEB. */

/* Field group INMODEB : (unspecified) */
/* MODE @Bits 20..21 : Alias to INMODEB.MODE register */
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_Pos (20UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_Msk (0x3UL << VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_Pos) /*!< Bit mask of MODE
                                                                            field.*/
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_Min (0x0UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_Max (0x3UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_CONTINUOUS (0x0UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_EVENT (0x1UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_SHIFT (0x2UL)
    #define VPRCSR_NORDIC_SHIFTCTRLB_INMODEB_MODE_SHIFTA (0x3UL) /*!< Sampling and shifting on Counter1 event, independent from
                                                                      output*/

/* End field group INMODEB. */


/**
  * @brief SHIFTCNTIN [VPRCSR_NORDIC_SHIFTCNTIN] Number of frames to be shifted from INB before new data is required
  */
  #define VPRCSR_NORDIC_SHIFTCNTIN (0x00000BCDul)
  #define VPRCSR_NORDIC_SHIFTCNTIN_ResetValue (0x00000000UL)

/* VALUE @Bits 0..5 : Value */
  #define VPRCSR_NORDIC_SHIFTCNTIN_VALUE_Pos (0UL)
  #define VPRCSR_NORDIC_SHIFTCNTIN_VALUE_Msk (0x3FUL << VPRCSR_NORDIC_SHIFTCNTIN_VALUE_Pos)
  #define VPRCSR_NORDIC_SHIFTCNTIN_VALUE_Min (0x00UL)
  #define VPRCSR_NORDIC_SHIFTCNTIN_VALUE_Max (0x3FUL)


/**
  * @brief SHIFTCNTOUT [VPRCSR_NORDIC_SHIFTCNTOUT] Number of frames to be shifted to OUTB before new data is required
  */
  #define VPRCSR_NORDIC_SHIFTCNTOUT (0x00000BCEul)
  #define VPRCSR_NORDIC_SHIFTCNTOUT_ResetValue (0x00000000UL)

/* VALUE @Bits 0..5 : Value */
  #define VPRCSR_NORDIC_SHIFTCNTOUT_VALUE_Pos (0UL)
  #define VPRCSR_NORDIC_SHIFTCNTOUT_VALUE_Msk (0x3FUL << VPRCSR_NORDIC_SHIFTCNTOUT_VALUE_Pos)
  #define VPRCSR_NORDIC_SHIFTCNTOUT_VALUE_Min (0x00UL)
  #define VPRCSR_NORDIC_SHIFTCNTOUT_VALUE_Max (0x3FUL)


/**
  * @brief SHIFTCNTB [VPRCSR_NORDIC_SHIFTCNTB] Buffered SHIFTCNTOUT and SHIFTCNTIN register
  */
  #define VPRCSR_NORDIC_SHIFTCNTB (0x00000BCFul)
  #define VPRCSR_NORDIC_SHIFTCNTB_ResetValue (0x00000000UL)

/* VALUE @Bits 0..5 : Value */
  #define VPRCSR_NORDIC_SHIFTCNTB_VALUE_Pos (0UL)
  #define VPRCSR_NORDIC_SHIFTCNTB_VALUE_Msk (0x3FUL << VPRCSR_NORDIC_SHIFTCNTB_VALUE_Pos)
  #define VPRCSR_NORDIC_SHIFTCNTB_VALUE_Min (0x00UL)
  #define VPRCSR_NORDIC_SHIFTCNTB_VALUE_Max (0x3FUL)


/**
  * @brief OUTTGL [VPRCSR_NORDIC_OUTTGL] GPIO Output Toggle
  */
  #define VPRCSR_NORDIC_OUTTGL (0x00000BD0ul)
  #define VPRCSR_NORDIC_OUTTGL_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN0_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN0_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN0_TOGGLE (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN1_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN1_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN1_TOGGLE (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN2_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN2_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN2_TOGGLE (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN3_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN3_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN3_TOGGLE (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN4_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN4_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN4_TOGGLE (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN5_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN5_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN5_TOGGLE (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN6_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN6_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN6_TOGGLE (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN7_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN7_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN7_TOGGLE (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN8_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN8_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN8_TOGGLE (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN9_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN9_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN9_TOGGLE (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN10_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN10_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN10_TOGGLE (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN11_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN11_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN11_TOGGLE (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN12_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN12_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN12_TOGGLE (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN13_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN13_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN13_TOGGLE (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN14_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN14_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN14_TOGGLE (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_OUTTGL_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN15_Msk (0x1UL << VPRCSR_NORDIC_OUTTGL_PIN15_Pos)
  #define VPRCSR_NORDIC_OUTTGL_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTTGL_PIN15_TOGGLE (0x1UL)


/**
  * @brief DIRTGL [VPRCSR_NORDIC_DIRTGL] GPIO pin Direction Toggle
  */
  #define VPRCSR_NORDIC_DIRTGL (0x00000BD1ul)
  #define VPRCSR_NORDIC_DIRTGL_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN0_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN0_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN0_TOGGLE (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN1_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN1_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN1_TOGGLE (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN2_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN2_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN2_TOGGLE (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN3_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN3_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN3_TOGGLE (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN4_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN4_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN4_TOGGLE (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN5_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN5_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN5_TOGGLE (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN6_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN6_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN6_TOGGLE (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN7_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN7_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN7_TOGGLE (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN8_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN8_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN8_TOGGLE (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN9_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN9_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN9_TOGGLE (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN10_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN10_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN10_TOGGLE (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN11_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN11_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN11_TOGGLE (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN12_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN12_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN12_TOGGLE (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN13_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN13_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN13_TOGGLE (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN14_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN14_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN14_TOGGLE (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_DIRTGL_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN15_Msk (0x1UL << VPRCSR_NORDIC_DIRTGL_PIN15_Pos)
  #define VPRCSR_NORDIC_DIRTGL_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRTGL_PIN15_TOGGLE (0x1UL)


/**
  * @brief OUTBTGL [VPRCSR_NORDIC_OUTBTGL] Buffered GPIO Output Toggle
  */
  #define VPRCSR_NORDIC_OUTBTGL (0x00000BD2ul)
  #define VPRCSR_NORDIC_OUTBTGL_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN0_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN0_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN0_TOGGLE (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN1_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN1_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN1_TOGGLE (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN2_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN2_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN2_TOGGLE (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN3_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN3_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN3_TOGGLE (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN4_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN4_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN4_TOGGLE (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN5_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN5_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN5_TOGGLE (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN6_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN6_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN6_TOGGLE (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN7_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN7_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN7_TOGGLE (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN8_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN8_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN8_TOGGLE (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN9_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN9_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN9_TOGGLE (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN10_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN10_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN10_TOGGLE (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN11_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN11_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN11_TOGGLE (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN12_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN12_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN12_TOGGLE (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN13_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN13_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN13_TOGGLE (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN14_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN14_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN14_TOGGLE (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBTGL_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN15_Msk (0x1UL << VPRCSR_NORDIC_OUTBTGL_PIN15_Pos)
  #define VPRCSR_NORDIC_OUTBTGL_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBTGL_PIN15_TOGGLE (0x1UL)


/**
  * @brief DIRBTGL [VPRCSR_NORDIC_DIRBTGL] Buffered GPIO pin Direction Toggle
  */
  #define VPRCSR_NORDIC_DIRBTGL (0x00000BD3ul)
  #define VPRCSR_NORDIC_DIRBTGL_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN0_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN0_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN0_TOGGLE (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN1_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN1_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN1_TOGGLE (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN2_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN2_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN2_TOGGLE (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN3_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN3_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN3_TOGGLE (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN4_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN4_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN4_TOGGLE (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN5_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN5_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN5_TOGGLE (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN6_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN6_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN6_TOGGLE (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN7_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN7_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN7_TOGGLE (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN8_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN8_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN8_TOGGLE (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN9_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN9_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN9_TOGGLE (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN10_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN10_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN10_TOGGLE (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN11_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN11_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN11_TOGGLE (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN12_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN12_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN12_TOGGLE (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN13_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN13_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN13_TOGGLE (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN14_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN14_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN14_TOGGLE (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_DIRBTGL_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN15_Msk (0x1UL << VPRCSR_NORDIC_DIRBTGL_PIN15_Pos)
  #define VPRCSR_NORDIC_DIRBTGL_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIRBTGL_PIN15_TOGGLE (0x1UL)


/**
  * @brief DIROUTTGL [VPRCSR_NORDIC_DIROUTTGL] DIROUT Toggle
  */
  #define VPRCSR_NORDIC_DIROUTTGL (0x00000BD4ul)
  #define VPRCSR_NORDIC_DIROUTTGL_ResetValue (0x00000000UL)

/* OUT0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT0_Pos (0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT0_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT0_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT0_TOGGLE (0x1UL)

/* OUT1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT1_Pos (1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT1_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT1_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT1_TOGGLE (0x1UL)

/* OUT2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT2_Pos (2UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT2_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT2_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT2_TOGGLE (0x1UL)

/* OUT3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT3_Pos (3UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT3_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT3_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT3_TOGGLE (0x1UL)

/* OUT4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT4_Pos (4UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT4_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT4_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT4_TOGGLE (0x1UL)

/* OUT5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT5_Pos (5UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT5_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT5_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT5_TOGGLE (0x1UL)

/* OUT6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT6_Pos (6UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT6_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT6_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT6_TOGGLE (0x1UL)

/* OUT7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT7_Pos (7UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT7_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT7_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT7_TOGGLE (0x1UL)

/* OUT8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT8_Pos (8UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT8_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT8_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT8_TOGGLE (0x1UL)

/* OUT9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT9_Pos (9UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT9_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT9_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT9_TOGGLE (0x1UL)

/* OUT10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT10_Pos (10UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT10_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT10_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT10_TOGGLE (0x1UL)

/* OUT11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT11_Pos (11UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT11_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT11_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT11_TOGGLE (0x1UL)

/* OUT12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT12_Pos (12UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT12_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT12_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT12_TOGGLE (0x1UL)

/* OUT13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT13_Pos (13UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT13_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT13_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT13_TOGGLE (0x1UL)

/* OUT14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT14_Pos (14UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT14_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT14_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT14_TOGGLE (0x1UL)

/* OUT15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_OUT15_Pos (15UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT15_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_OUT15_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_OUT15_TOGGLE (0x1UL)

/* DIR0 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR0_Pos (16UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR0_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR0_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR0_TOGGLE (0x1UL)

/* DIR1 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR1_Pos (17UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR1_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR1_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR1_TOGGLE (0x1UL)

/* DIR2 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR2_Pos (18UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR2_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR2_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR2_TOGGLE (0x1UL)

/* DIR3 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR3_Pos (19UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR3_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR3_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR3_TOGGLE (0x1UL)

/* DIR4 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR4_Pos (20UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR4_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR4_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR4_TOGGLE (0x1UL)

/* DIR5 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR5_Pos (21UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR5_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR5_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR5_TOGGLE (0x1UL)

/* DIR6 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR6_Pos (22UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR6_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR6_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR6_TOGGLE (0x1UL)

/* DIR7 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR7_Pos (23UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR7_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR7_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR7_TOGGLE (0x1UL)

/* DIR8 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR8_Pos (24UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR8_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR8_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR8_TOGGLE (0x1UL)

/* DIR9 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR9_Pos (25UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR9_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR9_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR9_TOGGLE (0x1UL)

/* DIR10 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR10_Pos (26UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR10_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR10_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR10_TOGGLE (0x1UL)

/* DIR11 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR11_Pos (27UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR11_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR11_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR11_TOGGLE (0x1UL)

/* DIR12 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR12_Pos (28UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR12_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR12_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR12_TOGGLE (0x1UL)

/* DIR13 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR13_Pos (29UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR13_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR13_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR13_TOGGLE (0x1UL)

/* DIR14 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR14_Pos (30UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR14_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR14_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR14_TOGGLE (0x1UL)

/* DIR15 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTTGL_DIR15_Pos (31UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR15_Msk (0x1UL << VPRCSR_NORDIC_DIROUTTGL_DIR15_Pos)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTTGL_DIR15_TOGGLE (0x1UL)


/**
  * @brief DIROUTBTGL [VPRCSR_NORDIC_DIROUTBTGL] DIROUTB Toggle
  */
  #define VPRCSR_NORDIC_DIROUTBTGL (0x00000BD5ul)
  #define VPRCSR_NORDIC_DIROUTBTGL_ResetValue (0x00000000UL)

/* OUTB0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB0_Pos (0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB0_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB0_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB0_TOGGLE (0x1UL)

/* OUTB1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB1_Pos (1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB1_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB1_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB1_TOGGLE (0x1UL)

/* OUTB2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB2_Pos (2UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB2_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB2_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB2_TOGGLE (0x1UL)

/* OUTB3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB3_Pos (3UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB3_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB3_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB3_TOGGLE (0x1UL)

/* OUTB4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB4_Pos (4UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB4_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB4_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB4_TOGGLE (0x1UL)

/* OUTB5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB5_Pos (5UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB5_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB5_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB5_TOGGLE (0x1UL)

/* OUTB6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB6_Pos (6UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB6_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB6_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB6_TOGGLE (0x1UL)

/* OUTB7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB7_Pos (7UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB7_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB7_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB7_TOGGLE (0x1UL)

/* OUTB8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB8_Pos (8UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB8_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB8_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB8_TOGGLE (0x1UL)

/* OUTB9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB9_Pos (9UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB9_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB9_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB9_TOGGLE (0x1UL)

/* OUTB10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB10_Pos (10UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB10_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB10_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB10_TOGGLE (0x1UL)

/* OUTB11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB11_Pos (11UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB11_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB11_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB11_TOGGLE (0x1UL)

/* OUTB12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB12_Pos (12UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB12_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB12_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB12_TOGGLE (0x1UL)

/* OUTB13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB13_Pos (13UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB13_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB13_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB13_TOGGLE (0x1UL)

/* OUTB14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB14_Pos (14UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB14_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB14_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB14_TOGGLE (0x1UL)

/* OUTB15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB15_Pos (15UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB15_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_OUTB15_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_OUTB15_TOGGLE (0x1UL)

/* DIRB0 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB0_Pos (16UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB0_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB0_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB0_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB0_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB0_TOGGLE (0x1UL)

/* DIRB1 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB1_Pos (17UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB1_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB1_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB1_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB1_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB1_TOGGLE (0x1UL)

/* DIRB2 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB2_Pos (18UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB2_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB2_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB2_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB2_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB2_TOGGLE (0x1UL)

/* DIRB3 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB3_Pos (19UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB3_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB3_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB3_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB3_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB3_TOGGLE (0x1UL)

/* DIRB4 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB4_Pos (20UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB4_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB4_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB4_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB4_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB4_TOGGLE (0x1UL)

/* DIRB5 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB5_Pos (21UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB5_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB5_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB5_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB5_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB5_TOGGLE (0x1UL)

/* DIRB6 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB6_Pos (22UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB6_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB6_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB6_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB6_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB6_TOGGLE (0x1UL)

/* DIRB7 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB7_Pos (23UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB7_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB7_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB7_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB7_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB7_TOGGLE (0x1UL)

/* DIRB8 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB8_Pos (24UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB8_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB8_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB8_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB8_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB8_TOGGLE (0x1UL)

/* DIRB9 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB9_Pos (25UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB9_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB9_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB9_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB9_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB9_TOGGLE (0x1UL)

/* DIRB10 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB10_Pos (26UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB10_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB10_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB10_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB10_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB10_TOGGLE (0x1UL)

/* DIRB11 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB11_Pos (27UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB11_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB11_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB11_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB11_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB11_TOGGLE (0x1UL)

/* DIRB12 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB12_Pos (28UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB12_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB12_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB12_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB12_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB12_TOGGLE (0x1UL)

/* DIRB13 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB13_Pos (29UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB13_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB13_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB13_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB13_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB13_TOGGLE (0x1UL)

/* DIRB14 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB14_Pos (30UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB14_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB14_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB14_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB14_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB14_TOGGLE (0x1UL)

/* DIRB15 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB15_Pos (31UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB15_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBTGL_DIRB15_Pos)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB15_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB15_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBTGL_DIRB15_TOGGLE (0x1UL)


/**
  * @brief OUTUBTGL [VPRCSR_NORDIC_OUTUBTGL] Buffered GPIO Unshifted Output Toggle
  */
  #define VPRCSR_NORDIC_OUTUBTGL (0x00000BD6ul)
  #define VPRCSR_NORDIC_OUTUBTGL_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN0_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN0_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN0_TOGGLE (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN1_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN1_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN1_TOGGLE (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN2_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN2_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN2_TOGGLE (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN3_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN3_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN3_TOGGLE (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN4_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN4_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN4_TOGGLE (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN5_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN5_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN5_TOGGLE (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN6_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN6_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN6_TOGGLE (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN7_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN7_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN7_TOGGLE (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN8_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN8_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN8_TOGGLE (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN9_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN9_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN9_TOGGLE (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN10_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN10_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN10_TOGGLE (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN11_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN11_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN11_TOGGLE (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN12_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN12_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN12_TOGGLE (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN13_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN13_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN13_TOGGLE (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN14_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN14_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN14_TOGGLE (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_OUTUBTGL_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN15_Msk (0x1UL << VPRCSR_NORDIC_OUTUBTGL_PIN15_Pos)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTGL_PIN15_TOGGLE (0x1UL)


/**
  * @brief OUTBS [VPRCSR_NORDIC_OUTBS] Buffered GPIO Output Dirty Status
  */
  #define VPRCSR_NORDIC_OUTBS (0x00000BD8ul)
  #define VPRCSR_NORDIC_OUTBS_ResetValue (0x00000000UL)

/* OUTB @Bits 0..31 : Write to OUTB (if not dirty) */
  #define VPRCSR_NORDIC_OUTBS_OUTB_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBS_OUTB_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_OUTBS_OUTB_Pos)

/* DIRTYBIT @Bit 0 : Read Buffer Dirty status */
  #define VPRCSR_NORDIC_OUTBS_DIRTYBIT_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBS_DIRTYBIT_Msk (0x1UL << VPRCSR_NORDIC_OUTBS_DIRTYBIT_Pos)
  #define VPRCSR_NORDIC_OUTBS_DIRTYBIT_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBS_DIRTYBIT_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBS_DIRTYBIT_CLEAN (0x0UL)
  #define VPRCSR_NORDIC_OUTBS_DIRTYBIT_DIRTY (0x1UL)


/**
  * @brief DIRBS [VPRCSR_NORDIC_DIRBS] Buffered GPIO pin Direction Dirty Status
  */
  #define VPRCSR_NORDIC_DIRBS (0x00000BD9ul)
  #define VPRCSR_NORDIC_DIRBS_ResetValue (0x00000000UL)

/* DIRB @Bits 0..31 : Write to DIRB (if not dirty) */
  #define VPRCSR_NORDIC_DIRBS_DIRB_Pos (0UL)
  #define VPRCSR_NORDIC_DIRBS_DIRB_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_DIRBS_DIRB_Pos)

/* DIRTYBIT @Bit 0 : Read Buffer Dirty status */
  #define VPRCSR_NORDIC_DIRBS_DIRTYBIT_Pos (0UL)
  #define VPRCSR_NORDIC_DIRBS_DIRTYBIT_Msk (0x1UL << VPRCSR_NORDIC_DIRBS_DIRTYBIT_Pos)
  #define VPRCSR_NORDIC_DIRBS_DIRTYBIT_Min (0x0UL)
  #define VPRCSR_NORDIC_DIRBS_DIRTYBIT_Max (0x1UL)
  #define VPRCSR_NORDIC_DIRBS_DIRTYBIT_CLEAN (0x0UL)
  #define VPRCSR_NORDIC_DIRBS_DIRTYBIT_DIRTY (0x1UL)


/**
  * @brief DIROUTBS [VPRCSR_NORDIC_DIROUTBS] Combination of DIRB and OUTB Dirty Status
  */
  #define VPRCSR_NORDIC_DIROUTBS (0x00000BDAul)
  #define VPRCSR_NORDIC_DIROUTBS_ResetValue (0x00000000UL)

/* DIROUTB @Bits 0..31 : Write to DIROUTB (if not dirty) */
  #define VPRCSR_NORDIC_DIROUTBS_DIROUTB_Pos (0UL)
  #define VPRCSR_NORDIC_DIROUTBS_DIROUTB_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_DIROUTBS_DIROUTB_Pos) /*!< Bit mask of DIROUTB
                                                                            field.*/

/* DIRTYBIT @Bit 0 : Read Combination (OR) of DIRB and OUTB Dirty status */
  #define VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_Pos (0UL)
  #define VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_Msk (0x1UL << VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_Pos)
  #define VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_Min (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_Max (0x1UL)
  #define VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_CLEAN (0x0UL)
  #define VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_DIRTY (0x1UL)


/**
  * @brief OUTUBS [VPRCSR_NORDIC_OUTUBS] Buffered GPIO Unshifted Output Dirty Status
  */
  #define VPRCSR_NORDIC_OUTUBS (0x00000BDBul)
  #define VPRCSR_NORDIC_OUTUBS_ResetValue (0x00000000UL)

/* OUTUB @Bits 0..31 : Write to OUTUB (if not dirty) */
  #define VPRCSR_NORDIC_OUTUBS_OUTUB_Pos (0UL)
  #define VPRCSR_NORDIC_OUTUBS_OUTUB_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_OUTUBS_OUTUB_Pos)

/* DIRTYBIT @Bit 0 : Read Buffer Dirty status */
  #define VPRCSR_NORDIC_OUTUBS_DIRTYBIT_Pos (0UL)
  #define VPRCSR_NORDIC_OUTUBS_DIRTYBIT_Msk (0x1UL << VPRCSR_NORDIC_OUTUBS_DIRTYBIT_Pos)
  #define VPRCSR_NORDIC_OUTUBS_DIRTYBIT_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBS_DIRTYBIT_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTUBS_DIRTYBIT_CLEAN (0x0UL)
  #define VPRCSR_NORDIC_OUTUBS_DIRTYBIT_DIRTY (0x1UL)


/**
  * @brief OUTBD [VPRCSR_NORDIC_OUTBD] Concatenation of Buffered GPIO Output and GPIO Output
  */
  #define VPRCSR_NORDIC_OUTBD (0x00000BE0ul)
  #define VPRCSR_NORDIC_OUTBD_ResetValue (0x00000000UL)

/* OUT @Bits 0..15 : GPIO Output */
  #define VPRCSR_NORDIC_OUTBD_OUT_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBD_OUT_Msk (0xFFFFUL << VPRCSR_NORDIC_OUTBD_OUT_Pos)

/* OUTB @Bits 16..31 : Buffered GPIO Output */
  #define VPRCSR_NORDIC_OUTBD_OUTB_Pos (16UL)
  #define VPRCSR_NORDIC_OUTBD_OUTB_Msk (0xFFFFUL << VPRCSR_NORDIC_OUTBD_OUTB_Pos)


/**
  * @brief OUTBDTGL [VPRCSR_NORDIC_OUTBDTGL] OUTBD Toggle
  */
  #define VPRCSR_NORDIC_OUTBDTGL (0x00000BE1ul)
  #define VPRCSR_NORDIC_OUTBDTGL_ResetValue (0x00000000UL)

/* OUT0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT0_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT0_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT0_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT0_TOGGLE (0x1UL)

/* OUT1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT1_Pos (1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT1_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT1_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT1_TOGGLE (0x1UL)

/* OUT2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT2_Pos (2UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT2_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT2_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT2_TOGGLE (0x1UL)

/* OUT3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT3_Pos (3UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT3_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT3_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT3_TOGGLE (0x1UL)

/* OUT4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT4_Pos (4UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT4_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT4_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT4_TOGGLE (0x1UL)

/* OUT5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT5_Pos (5UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT5_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT5_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT5_TOGGLE (0x1UL)

/* OUT6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT6_Pos (6UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT6_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT6_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT6_TOGGLE (0x1UL)

/* OUT7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT7_Pos (7UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT7_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT7_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT7_TOGGLE (0x1UL)

/* OUT8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT8_Pos (8UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT8_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT8_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT8_TOGGLE (0x1UL)

/* OUT9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT9_Pos (9UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT9_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT9_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT9_TOGGLE (0x1UL)

/* OUT10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT10_Pos (10UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT10_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT10_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT10_TOGGLE (0x1UL)

/* OUT11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT11_Pos (11UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT11_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT11_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT11_TOGGLE (0x1UL)

/* OUT12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT12_Pos (12UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT12_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT12_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT12_TOGGLE (0x1UL)

/* OUT13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT13_Pos (13UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT13_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT13_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT13_TOGGLE (0x1UL)

/* OUT14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT14_Pos (14UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT14_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT14_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT14_TOGGLE (0x1UL)

/* OUT15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUT15_Pos (15UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT15_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUT15_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUT15_TOGGLE (0x1UL)

/* OUTB0 @Bit 16 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB0_Pos (16UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB0_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB0_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB0_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB0_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB0_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB0_TOGGLE (0x1UL)

/* OUTB1 @Bit 17 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB1_Pos (17UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB1_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB1_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB1_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB1_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB1_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB1_TOGGLE (0x1UL)

/* OUTB2 @Bit 18 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB2_Pos (18UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB2_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB2_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB2_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB2_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB2_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB2_TOGGLE (0x1UL)

/* OUTB3 @Bit 19 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB3_Pos (19UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB3_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB3_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB3_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB3_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB3_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB3_TOGGLE (0x1UL)

/* OUTB4 @Bit 20 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB4_Pos (20UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB4_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB4_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB4_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB4_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB4_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB4_TOGGLE (0x1UL)

/* OUTB5 @Bit 21 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB5_Pos (21UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB5_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB5_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB5_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB5_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB5_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB5_TOGGLE (0x1UL)

/* OUTB6 @Bit 22 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB6_Pos (22UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB6_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB6_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB6_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB6_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB6_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB6_TOGGLE (0x1UL)

/* OUTB7 @Bit 23 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB7_Pos (23UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB7_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB7_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB7_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB7_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB7_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB7_TOGGLE (0x1UL)

/* OUTB8 @Bit 24 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB8_Pos (24UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB8_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB8_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB8_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB8_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB8_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB8_TOGGLE (0x1UL)

/* OUTB9 @Bit 25 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB9_Pos (25UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB9_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB9_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB9_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB9_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB9_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB9_TOGGLE (0x1UL)

/* OUTB10 @Bit 26 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB10_Pos (26UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB10_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB10_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB10_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB10_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB10_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB10_TOGGLE (0x1UL)

/* OUTB11 @Bit 27 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB11_Pos (27UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB11_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB11_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB11_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB11_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB11_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB11_TOGGLE (0x1UL)

/* OUTB12 @Bit 28 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB12_Pos (28UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB12_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB12_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB12_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB12_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB12_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB12_TOGGLE (0x1UL)

/* OUTB13 @Bit 29 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB13_Pos (29UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB13_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB13_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB13_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB13_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB13_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB13_TOGGLE (0x1UL)

/* OUTB14 @Bit 30 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB14_Pos (30UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB14_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB14_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB14_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB14_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB14_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB14_TOGGLE (0x1UL)

/* OUTB15 @Bit 31 : (unspecified) */
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB15_Pos (31UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB15_Msk (0x1UL << VPRCSR_NORDIC_OUTBDTGL_OUTB15_Pos)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB15_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB15_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB15_UNCHANGED (0x0UL)
  #define VPRCSR_NORDIC_OUTBDTGL_OUTB15_TOGGLE (0x1UL)


/**
  * @brief OUTBDS [VPRCSR_NORDIC_OUTBDS] OUTBD Dirty Status
  */
  #define VPRCSR_NORDIC_OUTBDS (0x00000BE2ul)
  #define VPRCSR_NORDIC_OUTBDS_ResetValue (0x00000000UL)

/* OUTBD @Bits 0..31 : Write to OUTBD register (if not dirty) */
  #define VPRCSR_NORDIC_OUTBDS_OUTBD_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBDS_OUTBD_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_OUTBDS_OUTBD_Pos)

/* DIRTYBIT @Bit 0 : Read OUTB and OUT parallel write Dirty status */
  #define VPRCSR_NORDIC_OUTBDS_DIRTYBIT_Pos (0UL)
  #define VPRCSR_NORDIC_OUTBDS_DIRTYBIT_Msk (0x1UL << VPRCSR_NORDIC_OUTBDS_DIRTYBIT_Pos)
  #define VPRCSR_NORDIC_OUTBDS_DIRTYBIT_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTBDS_DIRTYBIT_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTBDS_DIRTYBIT_CLEAN (0x0UL)
  #define VPRCSR_NORDIC_OUTBDS_DIRTYBIT_DIRTY (0x1UL)


/**
  * @brief OUTMODE [VPRCSR_NORDIC_OUTMODE] Serial output mode
  */
  #define VPRCSR_NORDIC_OUTMODE (0x00000BE3ul)
  #define VPRCSR_NORDIC_OUTMODE_ResetValue (0x00000000UL)

/* MODE @Bits 0..2 : Mode */
  #define VPRCSR_NORDIC_OUTMODE_MODE_Pos (0UL)
  #define VPRCSR_NORDIC_OUTMODE_MODE_Msk (0x7UL << VPRCSR_NORDIC_OUTMODE_MODE_Pos)
  #define VPRCSR_NORDIC_OUTMODE_MODE_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_MODE_Max (0x4UL)
  #define VPRCSR_NORDIC_OUTMODE_MODE_NoShifting (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_MODE_OutBBuf (0x2UL)
  #define VPRCSR_NORDIC_OUTMODE_MODE_OutBBufToggleClk (0x4UL)

/* SHIFTMODE @Bit 0 : Shift mode */
  #define VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Pos (0UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Msk (0x1UL << VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Pos)
  #define VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Max (0x1UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Disabled (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Enabled (0x1UL)

/* FRAMEWIDTH @Bits 16..20 : Output frame width MODE=0x1: BITS=2^FRAMEWIDTH. Legal FRAMEWIDTH values: 0, 1, 2, 3, 4 MODE=0x2:
                             BITS=FRAMEWIDTH. Legal values: 1, 2, 3, 4, 5, 6, 7, 8, 16 (9-15 are not legal) MODE=0x4:
                             BITS=FRAMEWIDTH. Legal values: 1, 2, 3, 4, 5, 6, 7, 8 */

  #define VPRCSR_NORDIC_OUTMODE_FRAMEWIDTH_Pos (16UL)
  #define VPRCSR_NORDIC_OUTMODE_FRAMEWIDTH_Msk (0x1FUL << VPRCSR_NORDIC_OUTMODE_FRAMEWIDTH_Pos) /*!< Bit mask of FRAMEWIDTH
                                                                            field.*/
  #define VPRCSR_NORDIC_OUTMODE_FRAMEWIDTH_Min (0x00UL)
  #define VPRCSR_NORDIC_OUTMODE_FRAMEWIDTH_Max (0x10UL)

/* SHIFSIZE @Bits 16..19 : Shift size. Only applies if Shift mode is enabled */
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Pos (16UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Msk (0xFUL << VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Pos)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Max (0x4UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT1 (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT2 (0x1UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT4 (0x2UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT8 (0x3UL)
  #define VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT16 (0x4UL)

/* SEL @Bits 24..27 : Start index of VIO used for shifting from OUTB and to INB. For OUTB, the number of left shifts is given by
                      (MODE is OUTMODE.MODE): if (MODE < 2) then SHIFTS = 0; else if ((MODE==4) & (SEL==0)) then SHIFTS = 1;
                      else SHIFTS = SEL; For INB, the number of left shifts is given by (MODE is INMODE.MODE): if (MODE < 2)
                      then SHIFTS = 0; else if ((MODE==2) & (INSEL==1) & (FRAMEWIDTH==1)) then SHIFTS = 2; else if (SEL==0) then
                      SHIFTS = 1; else SHIFTS = SEL; */

  #define VPRCSR_NORDIC_OUTMODE_SEL_Pos (24UL)
  #define VPRCSR_NORDIC_OUTMODE_SEL_Msk (0xFUL << VPRCSR_NORDIC_OUTMODE_SEL_Pos)
  #define VPRCSR_NORDIC_OUTMODE_SEL_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTMODE_SEL_Max (0xFUL)


/**
  * @brief OUTMODEB [VPRCSR_NORDIC_OUTMODEB] Buffered OUTMODE register
  */
  #define VPRCSR_NORDIC_OUTMODEB (0x00000BE4ul)
  #define VPRCSR_NORDIC_OUTMODEB_ResetValue (0x00000000UL)

/* MODE @Bits 0..2 : Mode */
  #define VPRCSR_NORDIC_OUTMODEB_MODE_Pos (0UL)
  #define VPRCSR_NORDIC_OUTMODEB_MODE_Msk (0x7UL << VPRCSR_NORDIC_OUTMODEB_MODE_Pos)
  #define VPRCSR_NORDIC_OUTMODEB_MODE_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTMODEB_MODE_Max (0x4UL)
  #define VPRCSR_NORDIC_OUTMODEB_MODE_NoShifting (0x0UL)
  #define VPRCSR_NORDIC_OUTMODEB_MODE_OutBBuf (0x2UL)
  #define VPRCSR_NORDIC_OUTMODEB_MODE_OutBBufToggleClk (0x4UL)

/* FRAMEWIDTH @Bits 16..20 : Frame width in bits */
  #define VPRCSR_NORDIC_OUTMODEB_FRAMEWIDTH_Pos (16UL)
  #define VPRCSR_NORDIC_OUTMODEB_FRAMEWIDTH_Msk (0x1FUL << VPRCSR_NORDIC_OUTMODEB_FRAMEWIDTH_Pos) /*!< Bit mask of FRAMEWIDTH
                                                                            field.*/
  #define VPRCSR_NORDIC_OUTMODEB_FRAMEWIDTH_Min (0x00UL)
  #define VPRCSR_NORDIC_OUTMODEB_FRAMEWIDTH_Max (0x10UL)

/* SEL @Bits 24..27 : Start index of VIO used for shifting from OUTB and to INB. For OUTB, the number of left shifts is given by
                      (MODE is OUTMODE.MODE): if (MODE < 2) then SHIFTS = 0; else if ((MODE==4) & (SEL==0)) then SHIFTS = 1;
                      else SHIFTS = SEL; For INB, the number of left shifts is given by (MODE is INMODE.MODE): if (MODE < 2)
                      then SHIFTS = 0; else if ((MODE==2) & (INSEL==1) & (FRAMEWIDTH==1)) then SHIFTS = 2; else if (SEL==0) then
                      SHIFTS = 1; else SHIFTS = SEL; */

  #define VPRCSR_NORDIC_OUTMODEB_SEL_Pos (24UL)
  #define VPRCSR_NORDIC_OUTMODEB_SEL_Msk (0xFUL << VPRCSR_NORDIC_OUTMODEB_SEL_Pos)
  #define VPRCSR_NORDIC_OUTMODEB_SEL_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTMODEB_SEL_Max (0xFUL)


/**
  * @brief INMODEB [VPRCSR_NORDIC_INMODEB] Buffered INMODE register
  */
  #define VPRCSR_NORDIC_INMODEB (0x00000BE5ul)
  #define VPRCSR_NORDIC_INMODEB_ResetValue (0x00000000UL)

/* MODE @Bits 0..1 : Input Mode */
  #define VPRCSR_NORDIC_INMODEB_MODE_Pos (0UL)
  #define VPRCSR_NORDIC_INMODEB_MODE_Msk (0x3UL << VPRCSR_NORDIC_INMODEB_MODE_Pos)
  #define VPRCSR_NORDIC_INMODEB_MODE_Min (0x0UL)
  #define VPRCSR_NORDIC_INMODEB_MODE_Max (0x3UL)
  #define VPRCSR_NORDIC_INMODEB_MODE_CONTINUOUS (0x0UL)
  #define VPRCSR_NORDIC_INMODEB_MODE_EVENT (0x1UL)
  #define VPRCSR_NORDIC_INMODEB_MODE_SHIFT (0x2UL)
  #define VPRCSR_NORDIC_INMODEB_MODE_SHIFTA (0x3UL)


/**
  * @brief INB [VPRCSR_NORDIC_INB] Buffered GPIO input
  */
  #define VPRCSR_NORDIC_INB (0x00000BE6ul)
  #define VPRCSR_NORDIC_INB_ResetValue (0x00000000UL)

/* PIN0 @Bit 0 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN0_Pos (0UL)
  #define VPRCSR_NORDIC_INB_PIN0_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN0_Pos)
  #define VPRCSR_NORDIC_INB_PIN0_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN0_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN0_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN0_HIGH (0x1UL)

/* PIN1 @Bit 1 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN1_Pos (1UL)
  #define VPRCSR_NORDIC_INB_PIN1_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN1_Pos)
  #define VPRCSR_NORDIC_INB_PIN1_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN1_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN1_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN1_HIGH (0x1UL)

/* PIN2 @Bit 2 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN2_Pos (2UL)
  #define VPRCSR_NORDIC_INB_PIN2_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN2_Pos)
  #define VPRCSR_NORDIC_INB_PIN2_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN2_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN2_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN2_HIGH (0x1UL)

/* PIN3 @Bit 3 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN3_Pos (3UL)
  #define VPRCSR_NORDIC_INB_PIN3_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN3_Pos)
  #define VPRCSR_NORDIC_INB_PIN3_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN3_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN3_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN3_HIGH (0x1UL)

/* PIN4 @Bit 4 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN4_Pos (4UL)
  #define VPRCSR_NORDIC_INB_PIN4_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN4_Pos)
  #define VPRCSR_NORDIC_INB_PIN4_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN4_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN4_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN4_HIGH (0x1UL)

/* PIN5 @Bit 5 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN5_Pos (5UL)
  #define VPRCSR_NORDIC_INB_PIN5_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN5_Pos)
  #define VPRCSR_NORDIC_INB_PIN5_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN5_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN5_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN5_HIGH (0x1UL)

/* PIN6 @Bit 6 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN6_Pos (6UL)
  #define VPRCSR_NORDIC_INB_PIN6_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN6_Pos)
  #define VPRCSR_NORDIC_INB_PIN6_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN6_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN6_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN6_HIGH (0x1UL)

/* PIN7 @Bit 7 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN7_Pos (7UL)
  #define VPRCSR_NORDIC_INB_PIN7_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN7_Pos)
  #define VPRCSR_NORDIC_INB_PIN7_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN7_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN7_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN7_HIGH (0x1UL)

/* PIN8 @Bit 8 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN8_Pos (8UL)
  #define VPRCSR_NORDIC_INB_PIN8_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN8_Pos)
  #define VPRCSR_NORDIC_INB_PIN8_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN8_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN8_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN8_HIGH (0x1UL)

/* PIN9 @Bit 9 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN9_Pos (9UL)
  #define VPRCSR_NORDIC_INB_PIN9_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN9_Pos)
  #define VPRCSR_NORDIC_INB_PIN9_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN9_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN9_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN9_HIGH (0x1UL)

/* PIN10 @Bit 10 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN10_Pos (10UL)
  #define VPRCSR_NORDIC_INB_PIN10_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN10_Pos)
  #define VPRCSR_NORDIC_INB_PIN10_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN10_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN10_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN10_HIGH (0x1UL)

/* PIN11 @Bit 11 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN11_Pos (11UL)
  #define VPRCSR_NORDIC_INB_PIN11_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN11_Pos)
  #define VPRCSR_NORDIC_INB_PIN11_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN11_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN11_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN11_HIGH (0x1UL)

/* PIN12 @Bit 12 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN12_Pos (12UL)
  #define VPRCSR_NORDIC_INB_PIN12_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN12_Pos)
  #define VPRCSR_NORDIC_INB_PIN12_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN12_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN12_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN12_HIGH (0x1UL)

/* PIN13 @Bit 13 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN13_Pos (13UL)
  #define VPRCSR_NORDIC_INB_PIN13_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN13_Pos)
  #define VPRCSR_NORDIC_INB_PIN13_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN13_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN13_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN13_HIGH (0x1UL)

/* PIN14 @Bit 14 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN14_Pos (14UL)
  #define VPRCSR_NORDIC_INB_PIN14_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN14_Pos)
  #define VPRCSR_NORDIC_INB_PIN14_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN14_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN14_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN14_HIGH (0x1UL)

/* PIN15 @Bit 15 : (unspecified) */
  #define VPRCSR_NORDIC_INB_PIN15_Pos (15UL)
  #define VPRCSR_NORDIC_INB_PIN15_Msk (0x1UL << VPRCSR_NORDIC_INB_PIN15_Pos)
  #define VPRCSR_NORDIC_INB_PIN15_Min (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN15_Max (0x1UL)
  #define VPRCSR_NORDIC_INB_PIN15_LOW (0x0UL)
  #define VPRCSR_NORDIC_INB_PIN15_HIGH (0x1UL)


/**
  * @brief OUTUB [VPRCSR_NORDIC_OUTUB] Buffered write to Unshifted parts of OUT
  */
  #define VPRCSR_NORDIC_OUTUB (0x00000BE7ul)
  #define VPRCSR_NORDIC_OUTUB_ResetValue (0x00000000UL)

/* OUT @Bits 0..15 : Written to OUT MSBs that are not driven by OUTB shifting. */
  #define VPRCSR_NORDIC_OUTUB_OUT_Pos (0UL)
  #define VPRCSR_NORDIC_OUTUB_OUT_Msk (0xFFFFUL << VPRCSR_NORDIC_OUTUB_OUT_Pos)


/**
  * @brief SHIFTCNTCOMP [VPRCSR_NORDIC_SHIFTCNTCOMP] SHIFTCNTIN/OUT compare values
  */
  #define VPRCSR_NORDIC_SHIFTCNTCOMP (0x00000BE8ul)
  #define VPRCSR_NORDIC_SHIFTCNTCOMP_ResetValue (0x00000000UL)

/* OUTCOMPVAL @Bits 0..5 : Compare value for SHIFTCNTOUT */
  #define VPRCSR_NORDIC_SHIFTCNTCOMP_OUTCOMPVAL_Pos (0UL)
  #define VPRCSR_NORDIC_SHIFTCNTCOMP_OUTCOMPVAL_Msk (0x3FUL << VPRCSR_NORDIC_SHIFTCNTCOMP_OUTCOMPVAL_Pos) /*!< Bit mask of
                                                                            OUTCOMPVAL field.*/

/* INCOMPVAL @Bits 8..13 : Compare value for SHIFTCNTIN */
  #define VPRCSR_NORDIC_SHIFTCNTCOMP_INCOMPVAL_Pos (8UL)
  #define VPRCSR_NORDIC_SHIFTCNTCOMP_INCOMPVAL_Msk (0x3FUL << VPRCSR_NORDIC_SHIFTCNTCOMP_INCOMPVAL_Pos) /*!< Bit mask of
                                                                            INCOMPVAL field.*/


/**
  * @brief WAITEVENT [VPRCSR_NORDIC_WAITEVENT] Wait for internal event
  */
  #define VPRCSR_NORDIC_WAITEVENT (0x00000BE9ul)
  #define VPRCSR_NORDIC_WAITEVENT_ResetValue (0x00000000UL)

/* IEVENTCNT0 @Bit 0 : CNT0's event */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTCNT0_Pos (0UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTCNT0_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTCNT0_Pos) /*!< Bit mask of IEVENTCNT0
                                                                            field.*/

/* IEVENTCNT1 @Bit 1 : CNT1's event */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTCNT1_Pos (1UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTCNT1_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTCNT1_Pos) /*!< Bit mask of IEVENTCNT1
                                                                            field.*/

/* IEVENTVIO @Bit 2 : Event generated by a specific VIO pin */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTVIO_Pos (2UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTVIO_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTVIO_Pos) /*!< Bit mask of IEVENTVIO
                                                                            field.*/

/* IEVENTVIOANY @Bit 3 : Event generated by a change in any VIO pin */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTVIOANY_Pos (3UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTVIOANY_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTVIOANY_Pos) /*!< Bit mask of
                                                                            IEVENTVIOANY field.*/

/* IEVENTVTASKSANY @Bit 4 : Event when any TASK is triggered */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTVTASKSANY_Pos (4UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTVTASKSANY_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTVTASKSANY_Pos) /*!< Bit mask of
                                                                            IEVENTVTASKSANY field.*/

/* IEVENTSHIFTCNTOUT @Bit 5 : Event for SHIFTCNTOUT when reaching a compare value defined in SHIFTCNTCOMP */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTSHIFTCNTOUT_Pos (5UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTSHIFTCNTOUT_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTSHIFTCNTOUT_Pos) /*!< Bit mask
                                                                            of IEVENTSHIFTCNTOUT field.*/

/* IEVENTSHIFTCNTIN @Bit 6 : Event for SHIFTCNTIN when reaching a compare value defined in SHIFTCNTCOMP */
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTSHIFTCNTIN_Pos (6UL)
  #define VPRCSR_NORDIC_WAITEVENT_IEVENTSHIFTCNTIN_Msk (0x1UL << VPRCSR_NORDIC_WAITEVENT_IEVENTSHIFTCNTIN_Pos) /*!< Bit mask of
                                                                            IEVENTSHIFTCNTIN field.*/


/**
  * @brief WAITINPUT [VPRCSR_NORDIC_WAITINPUT] Wait input
  */
  #define VPRCSR_NORDIC_WAITINPUT (0x00000BEAul)
  #define VPRCSR_NORDIC_WAITINPUT_ResetValue (0x00000000UL)

/* VTASKSVIO @Bits 0..31 : VTASKS or VIO pins */
  #define VPRCSR_NORDIC_WAITINPUT_VTASKSVIO_Pos (0UL)
  #define VPRCSR_NORDIC_WAITINPUT_VTASKSVIO_Msk (0xFFFFFFFFUL << VPRCSR_NORDIC_WAITINPUT_VTASKSVIO_Pos) /*!< Bit mask of
                                                                            VTASKSVIO field.*/


/**
  * @brief RTPINTEN [VPRCSR_NORDIC_RTPINTEN] Interrupt enable
  */
  #define VPRCSR_NORDIC_RTPINTEN (0x00000BEBul)
  #define VPRCSR_NORDIC_RTPINTEN_ResetValue (0x00000000UL)

/* CNT0 @Bit 0 : Interrupt enable for IEVENTCNT0, alias of VPRNORDICCTRL.CNTIRQENABLE */
  #define VPRCSR_NORDIC_RTPINTEN_CNT0_Pos (0UL)
  #define VPRCSR_NORDIC_RTPINTEN_CNT0_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_CNT0_Pos)

/* CNT1 @Bit 1 : Interrupt enable for IEVENTCNT1 */
  #define VPRCSR_NORDIC_RTPINTEN_CNT1_Pos (1UL)
  #define VPRCSR_NORDIC_RTPINTEN_CNT1_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_CNT1_Pos)

/* VIO @Bit 2 : Interrupt enable for IEVENTVIO */
  #define VPRCSR_NORDIC_RTPINTEN_VIO_Pos (2UL)
  #define VPRCSR_NORDIC_RTPINTEN_VIO_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_VIO_Pos)

/* VIOANY @Bit 3 : Interrupt enable for IEVENTVIOANY */
  #define VPRCSR_NORDIC_RTPINTEN_VIOANY_Pos (3UL)
  #define VPRCSR_NORDIC_RTPINTEN_VIOANY_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_VIOANY_Pos)

/* VTASKSANY @Bit 4 : Interrupt enable for IEVENTVTASKSANY */
  #define VPRCSR_NORDIC_RTPINTEN_VTASKSANY_Pos (4UL)
  #define VPRCSR_NORDIC_RTPINTEN_VTASKSANY_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_VTASKSANY_Pos) /*!< Bit mask of VTASKSANY
                                                                            field.*/

/* SHIFTCNTOUT @Bit 5 : Interrupt enable for IEVENTSHIFTCNTOUT */
  #define VPRCSR_NORDIC_RTPINTEN_SHIFTCNTOUT_Pos (5UL)
  #define VPRCSR_NORDIC_RTPINTEN_SHIFTCNTOUT_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_SHIFTCNTOUT_Pos) /*!< Bit mask of SHIFTCNTOUT
                                                                            field.*/

/* SHIFTCNTIN @Bit 6 : Interrupt enable for IEVENTSHIFTCNTIN */
  #define VPRCSR_NORDIC_RTPINTEN_SHIFTCNTIN_Pos (6UL)
  #define VPRCSR_NORDIC_RTPINTEN_SHIFTCNTIN_Msk (0x1UL << VPRCSR_NORDIC_RTPINTEN_SHIFTCNTIN_Pos) /*!< Bit mask of SHIFTCNTIN
                                                                            field.*/


/**
  * @brief OUTUBTRIG [VPRCSR_NORDIC_OUTUBTRIG] OUTUB trigger select
  */
  #define VPRCSR_NORDIC_OUTUBTRIG (0x00000BECul)
  #define VPRCSR_NORDIC_OUTUBTRIG_ResetValue (0x00000000UL)

/* SEL @Bits 0..2 : OUTUBTRIG select */
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_Pos (0UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_Msk (0x7UL << VPRCSR_NORDIC_OUTUBTRIG_SEL_Pos)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_Min (0x0UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_Max (0x6UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTSHIFTCNTIN (0x6UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTSHIFTCNTOUT (0x5UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTVTASKSANY (0x4UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTVIOANY (0x3UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTVIO (0x2UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTCNT1 (0x1UL)
  #define VPRCSR_NORDIC_OUTUBTRIG_SEL_IEVENTCNT0 (0x0UL)




/* =========================================================================================================================== */
/* ================                                         VREGMRAM                                         ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ===================================================== Struct VREGMRAM ===================================================== */
/**
  * @brief VREGMRAM peripheral
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_VREGMRAM_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          VREGUSB                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ===================================================== Struct VREGUSB ====================================================== */
/**
  * @brief VREGUSB peripheral
  */
  typedef struct {
    __IM uint32_t RESERVED;
  } NRF_VREGUSB_Type;

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           VTIM                                           ================ */
/* =========================================================================================================================== */

/**
  * @brief VTIM CSR registers
  */


/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct WDT ======================================================== */
/**
  * @brief Watchdog Timer
  */
  typedef struct {
    __OM uint32_t TASKS_START;
    __OM uint32_t TASKS_STOP;
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;
    __IOM uint32_t SUBSCRIBE_STOP;
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_TIMEOUT;
    __IOM uint32_t EVENTS_STOPPED;
    __IM uint32_t RESERVED2[30];
    __IOM uint32_t PUBLISH_TIMEOUT;
    __IOM uint32_t PUBLISH_STOPPED;
    __IM uint32_t RESERVED3[95];
    __IOM uint32_t INTENSET;
    __IOM uint32_t INTENCLR;
    __IM uint32_t RESERVED4[6];
    __IOM uint32_t NMIENSET;
    __IOM uint32_t NMIENCLR;
    __IM uint32_t RESERVED5[53];
    __IM uint32_t RUNSTATUS;
    __IM uint32_t REQSTATUS;
    __IM uint32_t RESERVED6[63];
    __IOM uint32_t CRV;
    __IOM uint32_t RREN;
    __IOM uint32_t CONFIG;
    __IM uint32_t RESERVED7[4];
    __OM uint32_t TSEN;
    __IM uint32_t RESERVED8[55];
    __OM uint32_t RR[8];
  } NRF_WDT_Type;

/* WDT_TASKS_START: Start WDT */
  #define WDT_TASKS_START_ResetValue (0x00000000UL)

/* TASKS_START @Bit 0 : Start WDT */
  #define WDT_TASKS_START_TASKS_START_Pos (0UL)
  #define WDT_TASKS_START_TASKS_START_Msk (0x1UL << WDT_TASKS_START_TASKS_START_Pos)
  #define WDT_TASKS_START_TASKS_START_Min (0x1UL)
  #define WDT_TASKS_START_TASKS_START_Max (0x1UL)
  #define WDT_TASKS_START_TASKS_START_Trigger (0x1UL)


/* WDT_TASKS_STOP: Stop WDT */
  #define WDT_TASKS_STOP_ResetValue (0x00000000UL)

/* TASKS_STOP @Bit 0 : Stop WDT */
  #define WDT_TASKS_STOP_TASKS_STOP_Pos (0UL)
  #define WDT_TASKS_STOP_TASKS_STOP_Msk (0x1UL << WDT_TASKS_STOP_TASKS_STOP_Pos)
  #define WDT_TASKS_STOP_TASKS_STOP_Min (0x1UL)
  #define WDT_TASKS_STOP_TASKS_STOP_Max (0x1UL)
  #define WDT_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)


/* WDT_SUBSCRIBE_START: Subscribe configuration for task START */
  #define WDT_SUBSCRIBE_START_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define WDT_SUBSCRIBE_START_CHIDX_Pos (0UL)
  #define WDT_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << WDT_SUBSCRIBE_START_CHIDX_Pos)
  #define WDT_SUBSCRIBE_START_CHIDX_Min (0x00UL)
  #define WDT_SUBSCRIBE_START_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define WDT_SUBSCRIBE_START_EN_Pos (31UL)
  #define WDT_SUBSCRIBE_START_EN_Msk (0x1UL << WDT_SUBSCRIBE_START_EN_Pos)
  #define WDT_SUBSCRIBE_START_EN_Min (0x0UL)
  #define WDT_SUBSCRIBE_START_EN_Max (0x1UL)
  #define WDT_SUBSCRIBE_START_EN_Disabled (0x0UL)
  #define WDT_SUBSCRIBE_START_EN_Enabled (0x1UL)


/* WDT_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define WDT_SUBSCRIBE_STOP_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define WDT_SUBSCRIBE_STOP_CHIDX_Pos (0UL)
  #define WDT_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << WDT_SUBSCRIBE_STOP_CHIDX_Pos)
  #define WDT_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)
  #define WDT_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define WDT_SUBSCRIBE_STOP_EN_Pos (31UL)
  #define WDT_SUBSCRIBE_STOP_EN_Msk (0x1UL << WDT_SUBSCRIBE_STOP_EN_Pos)
  #define WDT_SUBSCRIBE_STOP_EN_Min (0x0UL)
  #define WDT_SUBSCRIBE_STOP_EN_Max (0x1UL)
  #define WDT_SUBSCRIBE_STOP_EN_Disabled (0x0UL)
  #define WDT_SUBSCRIBE_STOP_EN_Enabled (0x1UL)


/* WDT_EVENTS_TIMEOUT: Watchdog timeout */
  #define WDT_EVENTS_TIMEOUT_ResetValue (0x00000000UL)

/* EVENTS_TIMEOUT @Bit 0 : Watchdog timeout */
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Pos (0UL)
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Msk (0x1UL << WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Pos) /*!< Bit mask of EVENTS_TIMEOUT
                                                                            field.*/
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Min (0x0UL)
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Max (0x1UL)
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_NotGenerated (0x0UL)
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Generated (0x1UL)


/* WDT_EVENTS_STOPPED: Watchdog stopped */
  #define WDT_EVENTS_STOPPED_ResetValue (0x00000000UL)

/* EVENTS_STOPPED @Bit 0 : Watchdog stopped */
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL)
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << WDT_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED
                                                                            field.*/
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL)
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL)
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL)
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL)


/* WDT_PUBLISH_TIMEOUT: Publish configuration for event TIMEOUT */
  #define WDT_PUBLISH_TIMEOUT_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event TIMEOUT will publish to */
  #define WDT_PUBLISH_TIMEOUT_CHIDX_Pos (0UL)
  #define WDT_PUBLISH_TIMEOUT_CHIDX_Msk (0xFFUL << WDT_PUBLISH_TIMEOUT_CHIDX_Pos)
  #define WDT_PUBLISH_TIMEOUT_CHIDX_Min (0x00UL)
  #define WDT_PUBLISH_TIMEOUT_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define WDT_PUBLISH_TIMEOUT_EN_Pos (31UL)
  #define WDT_PUBLISH_TIMEOUT_EN_Msk (0x1UL << WDT_PUBLISH_TIMEOUT_EN_Pos)
  #define WDT_PUBLISH_TIMEOUT_EN_Min (0x0UL)
  #define WDT_PUBLISH_TIMEOUT_EN_Max (0x1UL)
  #define WDT_PUBLISH_TIMEOUT_EN_Disabled (0x0UL)
  #define WDT_PUBLISH_TIMEOUT_EN_Enabled (0x1UL)


/* WDT_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define WDT_PUBLISH_STOPPED_ResetValue (0x00000000UL)

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define WDT_PUBLISH_STOPPED_CHIDX_Pos (0UL)
  #define WDT_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << WDT_PUBLISH_STOPPED_CHIDX_Pos)
  #define WDT_PUBLISH_STOPPED_CHIDX_Min (0x00UL)
  #define WDT_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)

/* EN @Bit 31 : (unspecified) */
  #define WDT_PUBLISH_STOPPED_EN_Pos (31UL)
  #define WDT_PUBLISH_STOPPED_EN_Msk (0x1UL << WDT_PUBLISH_STOPPED_EN_Pos)
  #define WDT_PUBLISH_STOPPED_EN_Min (0x0UL)
  #define WDT_PUBLISH_STOPPED_EN_Max (0x1UL)
  #define WDT_PUBLISH_STOPPED_EN_Disabled (0x0UL)
  #define WDT_PUBLISH_STOPPED_EN_Enabled (0x1UL)


/* WDT_INTENSET: Enable interrupt */
  #define WDT_INTENSET_ResetValue (0x00000000UL)

/* TIMEOUT @Bit 0 : Write '1' to enable interrupt for event TIMEOUT */
  #define WDT_INTENSET_TIMEOUT_Pos (0UL)
  #define WDT_INTENSET_TIMEOUT_Msk (0x1UL << WDT_INTENSET_TIMEOUT_Pos)
  #define WDT_INTENSET_TIMEOUT_Min (0x0UL)
  #define WDT_INTENSET_TIMEOUT_Max (0x1UL)
  #define WDT_INTENSET_TIMEOUT_Set (0x1UL)
  #define WDT_INTENSET_TIMEOUT_Disabled (0x0UL)
  #define WDT_INTENSET_TIMEOUT_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define WDT_INTENSET_STOPPED_Pos (1UL)
  #define WDT_INTENSET_STOPPED_Msk (0x1UL << WDT_INTENSET_STOPPED_Pos)
  #define WDT_INTENSET_STOPPED_Min (0x0UL)
  #define WDT_INTENSET_STOPPED_Max (0x1UL)
  #define WDT_INTENSET_STOPPED_Set (0x1UL)
  #define WDT_INTENSET_STOPPED_Disabled (0x0UL)
  #define WDT_INTENSET_STOPPED_Enabled (0x1UL)


/* WDT_INTENCLR: Disable interrupt */
  #define WDT_INTENCLR_ResetValue (0x00000000UL)

/* TIMEOUT @Bit 0 : Write '1' to disable interrupt for event TIMEOUT */
  #define WDT_INTENCLR_TIMEOUT_Pos (0UL)
  #define WDT_INTENCLR_TIMEOUT_Msk (0x1UL << WDT_INTENCLR_TIMEOUT_Pos)
  #define WDT_INTENCLR_TIMEOUT_Min (0x0UL)
  #define WDT_INTENCLR_TIMEOUT_Max (0x1UL)
  #define WDT_INTENCLR_TIMEOUT_Clear (0x1UL)
  #define WDT_INTENCLR_TIMEOUT_Disabled (0x0UL)
  #define WDT_INTENCLR_TIMEOUT_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define WDT_INTENCLR_STOPPED_Pos (1UL)
  #define WDT_INTENCLR_STOPPED_Msk (0x1UL << WDT_INTENCLR_STOPPED_Pos)
  #define WDT_INTENCLR_STOPPED_Min (0x0UL)
  #define WDT_INTENCLR_STOPPED_Max (0x1UL)
  #define WDT_INTENCLR_STOPPED_Clear (0x1UL)
  #define WDT_INTENCLR_STOPPED_Disabled (0x0UL)
  #define WDT_INTENCLR_STOPPED_Enabled (0x1UL)


/* WDT_NMIENSET: Enable interrupt */
  #define WDT_NMIENSET_ResetValue (0x00000000UL)

/* TIMEOUT @Bit 0 : Write '1' to enable interrupt for event TIMEOUT */
  #define WDT_NMIENSET_TIMEOUT_Pos (0UL)
  #define WDT_NMIENSET_TIMEOUT_Msk (0x1UL << WDT_NMIENSET_TIMEOUT_Pos)
  #define WDT_NMIENSET_TIMEOUT_Min (0x0UL)
  #define WDT_NMIENSET_TIMEOUT_Max (0x1UL)
  #define WDT_NMIENSET_TIMEOUT_Set (0x1UL)
  #define WDT_NMIENSET_TIMEOUT_Disabled (0x0UL)
  #define WDT_NMIENSET_TIMEOUT_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define WDT_NMIENSET_STOPPED_Pos (1UL)
  #define WDT_NMIENSET_STOPPED_Msk (0x1UL << WDT_NMIENSET_STOPPED_Pos)
  #define WDT_NMIENSET_STOPPED_Min (0x0UL)
  #define WDT_NMIENSET_STOPPED_Max (0x1UL)
  #define WDT_NMIENSET_STOPPED_Set (0x1UL)
  #define WDT_NMIENSET_STOPPED_Disabled (0x0UL)
  #define WDT_NMIENSET_STOPPED_Enabled (0x1UL)


/* WDT_NMIENCLR: Disable interrupt */
  #define WDT_NMIENCLR_ResetValue (0x00000000UL)

/* TIMEOUT @Bit 0 : Write '1' to disable interrupt for event TIMEOUT */
  #define WDT_NMIENCLR_TIMEOUT_Pos (0UL)
  #define WDT_NMIENCLR_TIMEOUT_Msk (0x1UL << WDT_NMIENCLR_TIMEOUT_Pos)
  #define WDT_NMIENCLR_TIMEOUT_Min (0x0UL)
  #define WDT_NMIENCLR_TIMEOUT_Max (0x1UL)
  #define WDT_NMIENCLR_TIMEOUT_Clear (0x1UL)
  #define WDT_NMIENCLR_TIMEOUT_Disabled (0x0UL)
  #define WDT_NMIENCLR_TIMEOUT_Enabled (0x1UL)

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define WDT_NMIENCLR_STOPPED_Pos (1UL)
  #define WDT_NMIENCLR_STOPPED_Msk (0x1UL << WDT_NMIENCLR_STOPPED_Pos)
  #define WDT_NMIENCLR_STOPPED_Min (0x0UL)
  #define WDT_NMIENCLR_STOPPED_Max (0x1UL)
  #define WDT_NMIENCLR_STOPPED_Clear (0x1UL)
  #define WDT_NMIENCLR_STOPPED_Disabled (0x0UL)
  #define WDT_NMIENCLR_STOPPED_Enabled (0x1UL)


/* WDT_RUNSTATUS: Run status */
  #define WDT_RUNSTATUS_ResetValue (0x00000000UL)

/* RUNSTATUSWDT @Bit 0 : Indicates whether or not WDT is running */
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Pos (0UL)
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Msk (0x1UL << WDT_RUNSTATUS_RUNSTATUSWDT_Pos)
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Min (0x0UL)
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Max (0x1UL)
  #define WDT_RUNSTATUS_RUNSTATUSWDT_NotRunning (0x0UL)
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Running (0x1UL)


/* WDT_REQSTATUS: Request status */
  #define WDT_REQSTATUS_ResetValue (0x00000001UL)

/* RR0 @Bit 0 : Request status for RR[0] register */
  #define WDT_REQSTATUS_RR0_Pos (0UL)
  #define WDT_REQSTATUS_RR0_Msk (0x1UL << WDT_REQSTATUS_RR0_Pos)
  #define WDT_REQSTATUS_RR0_Min (0x0UL)
  #define WDT_REQSTATUS_RR0_Max (0x1UL)
  #define WDT_REQSTATUS_RR0_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR0_EnabledAndUnrequested (0x1UL)

/* RR1 @Bit 1 : Request status for RR[1] register */
  #define WDT_REQSTATUS_RR1_Pos (1UL)
  #define WDT_REQSTATUS_RR1_Msk (0x1UL << WDT_REQSTATUS_RR1_Pos)
  #define WDT_REQSTATUS_RR1_Min (0x0UL)
  #define WDT_REQSTATUS_RR1_Max (0x1UL)
  #define WDT_REQSTATUS_RR1_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR1_EnabledAndUnrequested (0x1UL)

/* RR2 @Bit 2 : Request status for RR[2] register */
  #define WDT_REQSTATUS_RR2_Pos (2UL)
  #define WDT_REQSTATUS_RR2_Msk (0x1UL << WDT_REQSTATUS_RR2_Pos)
  #define WDT_REQSTATUS_RR2_Min (0x0UL)
  #define WDT_REQSTATUS_RR2_Max (0x1UL)
  #define WDT_REQSTATUS_RR2_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR2_EnabledAndUnrequested (0x1UL)

/* RR3 @Bit 3 : Request status for RR[3] register */
  #define WDT_REQSTATUS_RR3_Pos (3UL)
  #define WDT_REQSTATUS_RR3_Msk (0x1UL << WDT_REQSTATUS_RR3_Pos)
  #define WDT_REQSTATUS_RR3_Min (0x0UL)
  #define WDT_REQSTATUS_RR3_Max (0x1UL)
  #define WDT_REQSTATUS_RR3_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR3_EnabledAndUnrequested (0x1UL)

/* RR4 @Bit 4 : Request status for RR[4] register */
  #define WDT_REQSTATUS_RR4_Pos (4UL)
  #define WDT_REQSTATUS_RR4_Msk (0x1UL << WDT_REQSTATUS_RR4_Pos)
  #define WDT_REQSTATUS_RR4_Min (0x0UL)
  #define WDT_REQSTATUS_RR4_Max (0x1UL)
  #define WDT_REQSTATUS_RR4_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR4_EnabledAndUnrequested (0x1UL)

/* RR5 @Bit 5 : Request status for RR[5] register */
  #define WDT_REQSTATUS_RR5_Pos (5UL)
  #define WDT_REQSTATUS_RR5_Msk (0x1UL << WDT_REQSTATUS_RR5_Pos)
  #define WDT_REQSTATUS_RR5_Min (0x0UL)
  #define WDT_REQSTATUS_RR5_Max (0x1UL)
  #define WDT_REQSTATUS_RR5_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR5_EnabledAndUnrequested (0x1UL)

/* RR6 @Bit 6 : Request status for RR[6] register */
  #define WDT_REQSTATUS_RR6_Pos (6UL)
  #define WDT_REQSTATUS_RR6_Msk (0x1UL << WDT_REQSTATUS_RR6_Pos)
  #define WDT_REQSTATUS_RR6_Min (0x0UL)
  #define WDT_REQSTATUS_RR6_Max (0x1UL)
  #define WDT_REQSTATUS_RR6_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR6_EnabledAndUnrequested (0x1UL)

/* RR7 @Bit 7 : Request status for RR[7] register */
  #define WDT_REQSTATUS_RR7_Pos (7UL)
  #define WDT_REQSTATUS_RR7_Msk (0x1UL << WDT_REQSTATUS_RR7_Pos)
  #define WDT_REQSTATUS_RR7_Min (0x0UL)
  #define WDT_REQSTATUS_RR7_Max (0x1UL)
  #define WDT_REQSTATUS_RR7_DisabledOrRequested (0x0UL)
  #define WDT_REQSTATUS_RR7_EnabledAndUnrequested (0x1UL)


/* WDT_CRV: Counter reload value */
  #define WDT_CRV_ResetValue (0xFFFFFFFFUL)

/* CRV @Bits 0..31 : Counter reload value in number of cycles of the 32.768 kHz clock */
  #define WDT_CRV_CRV_Pos (0UL)
  #define WDT_CRV_CRV_Msk (0xFFFFFFFFUL << WDT_CRV_CRV_Pos)
  #define WDT_CRV_CRV_Min (0x0000000FUL)
  #define WDT_CRV_CRV_Max (0xFFFFFFFFUL)


/* WDT_RREN: Enable register for reload request registers */
  #define WDT_RREN_ResetValue (0x00000001UL)

/* RR0 @Bit 0 : Enable or disable RR[0] register */
  #define WDT_RREN_RR0_Pos (0UL)
  #define WDT_RREN_RR0_Msk (0x1UL << WDT_RREN_RR0_Pos)
  #define WDT_RREN_RR0_Min (0x0UL)
  #define WDT_RREN_RR0_Max (0x1UL)
  #define WDT_RREN_RR0_Disabled (0x0UL)
  #define WDT_RREN_RR0_Enabled (0x1UL)

/* RR1 @Bit 1 : Enable or disable RR[1] register */
  #define WDT_RREN_RR1_Pos (1UL)
  #define WDT_RREN_RR1_Msk (0x1UL << WDT_RREN_RR1_Pos)
  #define WDT_RREN_RR1_Min (0x0UL)
  #define WDT_RREN_RR1_Max (0x1UL)
  #define WDT_RREN_RR1_Disabled (0x0UL)
  #define WDT_RREN_RR1_Enabled (0x1UL)

/* RR2 @Bit 2 : Enable or disable RR[2] register */
  #define WDT_RREN_RR2_Pos (2UL)
  #define WDT_RREN_RR2_Msk (0x1UL << WDT_RREN_RR2_Pos)
  #define WDT_RREN_RR2_Min (0x0UL)
  #define WDT_RREN_RR2_Max (0x1UL)
  #define WDT_RREN_RR2_Disabled (0x0UL)
  #define WDT_RREN_RR2_Enabled (0x1UL)

/* RR3 @Bit 3 : Enable or disable RR[3] register */
  #define WDT_RREN_RR3_Pos (3UL)
  #define WDT_RREN_RR3_Msk (0x1UL << WDT_RREN_RR3_Pos)
  #define WDT_RREN_RR3_Min (0x0UL)
  #define WDT_RREN_RR3_Max (0x1UL)
  #define WDT_RREN_RR3_Disabled (0x0UL)
  #define WDT_RREN_RR3_Enabled (0x1UL)

/* RR4 @Bit 4 : Enable or disable RR[4] register */
  #define WDT_RREN_RR4_Pos (4UL)
  #define WDT_RREN_RR4_Msk (0x1UL << WDT_RREN_RR4_Pos)
  #define WDT_RREN_RR4_Min (0x0UL)
  #define WDT_RREN_RR4_Max (0x1UL)
  #define WDT_RREN_RR4_Disabled (0x0UL)
  #define WDT_RREN_RR4_Enabled (0x1UL)

/* RR5 @Bit 5 : Enable or disable RR[5] register */
  #define WDT_RREN_RR5_Pos (5UL)
  #define WDT_RREN_RR5_Msk (0x1UL << WDT_RREN_RR5_Pos)
  #define WDT_RREN_RR5_Min (0x0UL)
  #define WDT_RREN_RR5_Max (0x1UL)
  #define WDT_RREN_RR5_Disabled (0x0UL)
  #define WDT_RREN_RR5_Enabled (0x1UL)

/* RR6 @Bit 6 : Enable or disable RR[6] register */
  #define WDT_RREN_RR6_Pos (6UL)
  #define WDT_RREN_RR6_Msk (0x1UL << WDT_RREN_RR6_Pos)
  #define WDT_RREN_RR6_Min (0x0UL)
  #define WDT_RREN_RR6_Max (0x1UL)
  #define WDT_RREN_RR6_Disabled (0x0UL)
  #define WDT_RREN_RR6_Enabled (0x1UL)

/* RR7 @Bit 7 : Enable or disable RR[7] register */
  #define WDT_RREN_RR7_Pos (7UL)
  #define WDT_RREN_RR7_Msk (0x1UL << WDT_RREN_RR7_Pos)
  #define WDT_RREN_RR7_Min (0x0UL)
  #define WDT_RREN_RR7_Max (0x1UL)
  #define WDT_RREN_RR7_Disabled (0x0UL)
  #define WDT_RREN_RR7_Enabled (0x1UL)


/* WDT_CONFIG: Configuration register */
  #define WDT_CONFIG_ResetValue (0x00000001UL)

/* SLEEP @Bit 0 : Configure WDT to either be paused, or kept running, while the CPU is sleeping */
  #define WDT_CONFIG_SLEEP_Pos (0UL)
  #define WDT_CONFIG_SLEEP_Msk (0x1UL << WDT_CONFIG_SLEEP_Pos)
  #define WDT_CONFIG_SLEEP_Min (0x0UL)
  #define WDT_CONFIG_SLEEP_Max (0x1UL)
  #define WDT_CONFIG_SLEEP_Pause (0x0UL)
  #define WDT_CONFIG_SLEEP_Run (0x1UL)

/* HALT @Bit 3 : Configure WDT to either be paused, or kept running, while the CPU is halted by the debugger */
  #define WDT_CONFIG_HALT_Pos (3UL)
  #define WDT_CONFIG_HALT_Msk (0x1UL << WDT_CONFIG_HALT_Pos)
  #define WDT_CONFIG_HALT_Min (0x0UL)
  #define WDT_CONFIG_HALT_Max (0x1UL)
  #define WDT_CONFIG_HALT_Pause (0x0UL)
  #define WDT_CONFIG_HALT_Run (0x1UL)

/* STOPEN @Bit 6 : Allow stopping WDT */
  #define WDT_CONFIG_STOPEN_Pos (6UL)
  #define WDT_CONFIG_STOPEN_Msk (0x1UL << WDT_CONFIG_STOPEN_Pos)
  #define WDT_CONFIG_STOPEN_Min (0x0UL)
  #define WDT_CONFIG_STOPEN_Max (0x1UL)
  #define WDT_CONFIG_STOPEN_Disable (0x0UL)
  #define WDT_CONFIG_STOPEN_Enable (0x1UL)


/* WDT_TSEN: Task stop enable */
  #define WDT_TSEN_ResetValue (0x00000000UL)

/* TSEN @Bits 0..31 : Allow stopping WDT */
  #define WDT_TSEN_TSEN_Pos (0UL)
  #define WDT_TSEN_TSEN_Msk (0xFFFFFFFFUL << WDT_TSEN_TSEN_Pos)
  #define WDT_TSEN_TSEN_Min (0x6E524635UL)
  #define WDT_TSEN_TSEN_Max (0x6E524635UL)
  #define WDT_TSEN_TSEN_Enable (0x6E524635UL)


/* WDT_RR: Reload request n */
  #define WDT_RR_MaxCount (8UL)
  #define WDT_RR_MaxIndex (7UL)
  #define WDT_RR_MinIndex (0UL)
  #define WDT_RR_ResetValue (0x00000000UL)

/* RR @Bits 0..31 : Reload request register */
  #define WDT_RR_RR_Pos (0UL)
  #define WDT_RR_RR_Msk (0xFFFFFFFFUL << WDT_RR_RR_Pos)
  #define WDT_RR_RR_Min (0x6E524635UL)
  #define WDT_RR_RR_Max (0x6E524635UL)
  #define WDT_RR_RR_Reload (0x6E524635UL)


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* ========================================== End of section using anonymous unions ========================================== */

#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


#ifdef __cplusplus
}
#endif
#endif /* NRF7120_ENGA_TYPES_H */

